/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var uuid = require('node-uuid');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;
var OperationStatus = azureCommon.OperationStatus;

var DataLakeAnalyticsManagementClient = ( /** @lends DataLakeAnalyticsManagementClient */ function() {
  /**
   * @class
   * Creates an Azure Data Lake Analytics account management client.
   * Initializes a new instance of the DataLakeAnalyticsManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function DataLakeAnalyticsManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    DataLakeAnalyticsManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.userAgentSuffix === null || this.userAgentSuffix === undefined) {
      this.userAgentSuffix = '';
    }
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-10-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [DataLakeAnalyticsAccountOperations](-DataLakeAnalyticsAccountOperations.html)
     * object.
     * @type {object}
     */
    this.dataLakeAnalyticsAccount = new DataLakeAnalyticsAccountOperations(this);
  }
  
  util.inherits(DataLakeAnalyticsManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.
   * 
   * @param {string} azureAsyncOperation Location value returned by the Begin
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsManagementClient.prototype.getLongRunningOperationStatus = function(azureAsyncOperation, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (azureAsyncOperation === null || azureAsyncOperation === undefined) {
      return callback(new Error('azureAsyncOperation cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + azureAsyncOperation;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = statusValue;
            result.status = statusInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = {};
              errorInstance.innerError = innerErrorInstance;
              
              var traceValue = innerErrorValue['trace'];
              if (traceValue !== null && traceValue !== undefined) {
                var traceInstance = traceValue;
                innerErrorInstance.trace = traceInstance;
              }
              
              var contextValue = innerErrorValue['context'];
              if (contextValue !== null && contextValue !== undefined) {
                var contextInstance = contextValue;
                innerErrorInstance.context = contextInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return DataLakeAnalyticsManagementClient;
})();
exports.DataLakeAnalyticsManagementClient = DataLakeAnalyticsManagementClient;

var DataLakeAnalyticsAccountOperations = ( /** @lends DataLakeAnalyticsAccountOperations */ function() {
  /**
   * @class
   * Operations for managing Data Lake Analytics accounts
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [DataLakeAnalyticsManagementClient] {@link
   * DataLakeAnalyticsManagementClient~DataLakeAnalyticsManagementClient}.
   * See [dataLakeAnalyticsAccount] {@link
   * DataLakeAnalyticsManagementClient~DataLakeAnalyticsManagementClient#dataLakeAnalyticsAccount}.
   * Initializes a new instance of the DataLakeAnalyticsAccountOperations class.
   * @constructor
   * 
   * @param {DataLakeAnalyticsManagementClient} client Reference to the service
   * client.
   */
  function DataLakeAnalyticsAccountOperations(client) {
    this.client = client;
  }
  
  /**
   * Updates the Data Lake Analytics account specified to include the
   * additional Data Lake Store account.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The Data Lake Analytics account name to add
   * the Data Lake Store account to
   * 
   * @param {string} dataLakeStoreAccountName The name of the Data Lake Store
   * account to add
   * 
   * @param {AddDataLakeStoreParameters} [parametersOrCallback] The parameters
   * containing the optional properties associated with the named Data Lake
   * account.
   * 
   * @param {DataLakeStoreAccountProperties} [parametersOrCallback.properties]
   * Gets or sets the properties for the Data Lake Store account being added.
   * 
   * @param {string} [parametersOrCallback.properties.suffix] Gets or sets the
   * optional suffix for the Data Lake Store account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.addDataLakeStoreAccount = function(resourceGroupName, accountName, dataLakeStoreAccountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (dataLakeStoreAccountName === null || dataLakeStoreAccountName === undefined) {
      return callback(new Error('dataLakeStoreAccountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/DataLakeStoreAccounts/';
    url2 = url2 + encodeURIComponent(dataLakeStoreAccountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    if (parameters !== null && parameters !== undefined) {
      var addDataLakeStoreParametersValue = {};
      requestDoc = addDataLakeStoreParametersValue;
      
      if (parameters.properties !== null && parameters.properties !== undefined) {
        var propertiesValue = {};
        addDataLakeStoreParametersValue['properties'] = propertiesValue;
        
        if (parameters.properties.suffix !== null && parameters.properties.suffix !== undefined) {
          propertiesValue['suffix'] = parameters.properties.suffix;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates the Data Lake Analytics account specified to include the
   * additional Azure Storage account.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The Data Lake Analytics account name to add
   * the Azure Storage account to
   * 
   * @param {string} storageAccountName The name of the Azure Storage account
   * to add
   * 
   * @param {AddStorageAccountParameters} parameters The parameters containing
   * the access key and optional suffix for the Azure Storage Account.
   * 
   * @param {StorageAccountProperties} [parameters.properties] Gets or sets the
   * properties for the Azure Storage account being added.
   * 
   * @param {string} [parameters.properties.accessKey] Gets or sets the access
   * key associated with this Azure Storage account that will be used to
   * connect to it.
   * 
   * @param {string} [parameters.properties.suffix] Gets or sets the optional
   * suffix for the Data Lake account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.addStorageAccount = function(resourceGroupName, accountName, storageAccountName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccountName === null || storageAccountName === undefined) {
      return callback(new Error('storageAccountName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    url2 = url2 + encodeURIComponent(storageAccountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var addStorageAccountParametersValue = {};
    requestDoc = addStorageAccountParametersValue;
    
    if (parameters.properties !== null && parameters.properties !== undefined) {
      var propertiesValue = {};
      addStorageAccountParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.accessKey !== null && parameters.properties.accessKey !== undefined) {
        propertiesValue['accessKey'] = parameters.properties.accessKey;
      }
      
      if (parameters.properties.suffix !== null && parameters.properties.suffix !== undefined) {
        propertiesValue['suffix'] = parameters.properties.suffix;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Begins the creation process for the specified Data Lake Analytics
   * account.This supplies the user with computation services for Data Lake
   * Analytics workloads
   * 
   * @param {string} resourceGroupName The name of the resource group the
   * account will be associated with.
   * 
   * @param {DataLakeAnalyticsAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the create Data Lake Analytics account operation.
   * 
   * @param {DataLakeAnalyticsAccount} parameters.dataLakeAnalyticsAccount Gets
   * or sets the account object that is being created.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.location] Gets or
   * sets the account regional location.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.name] Gets or sets
   * the account name.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.type] Gets or sets
   * the namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeAnalyticsAccount.tags] Gets or sets
   * the value of custom properties.
   * 
   * @param {DataLakeAnalyticsAccountProperties}
   * [parameters.dataLakeAnalyticsAccount.properties] Gets or sets the
   * properties defined by Data Lake Analytics all properties are specific to
   * each resource provider.
   * 
   * @param {DataLakeAnalyticsAccountStatus}
   * [parameters.dataLakeAnalyticsAccount.properties.provisioningState] Gets
   * or sets the provisioning status of the Data Lake Analytics account.
   * 
   * @param {DataLakeAnalyticsAccountState}
   * [parameters.dataLakeAnalyticsAccount.properties.state] Gets or sets the
   * state of the Data Lake Analytics account.
   * 
   * @param {string}
   * [parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount]
   * Gets or sets the default data lake storage account associated with this
   * Data Lake Analytics account.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism]
   * Gets or sets the maximum supported degree of parallelism for this acocunt.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxJobCount] Gets or sets
   * the maximum supported jobs running under the account at the same time.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts]
   * Gets or sets the list of Data Lake storage accounts associated with this
   * account.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.storageAccounts] Gets or
   * sets the list of Azure Blob storage accounts associated with this account.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.creationTime] Gets or
   * sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.properties.endpoint]
   * Gets or sets the full CName endpoint for this account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.beginCreate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.dataLakeAnalyticsAccount === null || parameters.dataLakeAnalyticsAccount === undefined) {
      return callback(new Error('parameters.dataLakeAnalyticsAccount cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    if (parameters.dataLakeAnalyticsAccount.name !== null && parameters.dataLakeAnalyticsAccount.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.dataLakeAnalyticsAccount.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var dataLakeAnalyticsAccountCreateOrUpdateParametersValue = {};
    requestDoc = dataLakeAnalyticsAccountCreateOrUpdateParametersValue;
    
    if (parameters.dataLakeAnalyticsAccount.location !== null && parameters.dataLakeAnalyticsAccount.location !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['location'] = parameters.dataLakeAnalyticsAccount.location;
    }
    
    if (parameters.dataLakeAnalyticsAccount.name !== null && parameters.dataLakeAnalyticsAccount.name !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['name'] = parameters.dataLakeAnalyticsAccount.name;
    }
    
    if (parameters.dataLakeAnalyticsAccount.type !== null && parameters.dataLakeAnalyticsAccount.type !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['type'] = parameters.dataLakeAnalyticsAccount.type;
    }
    
    if (parameters.dataLakeAnalyticsAccount.id !== null && parameters.dataLakeAnalyticsAccount.id !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['id'] = parameters.dataLakeAnalyticsAccount.id;
    }
    
    if (parameters.dataLakeAnalyticsAccount.tags !== null && parameters.dataLakeAnalyticsAccount.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.dataLakeAnalyticsAccount.tags) {
        var tagsValue = parameters.dataLakeAnalyticsAccount.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.dataLakeAnalyticsAccount.properties !== null && parameters.dataLakeAnalyticsAccount.properties !== undefined) {
      var propertiesValue = {};
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.dataLakeAnalyticsAccount.properties.provisioningState !== null && parameters.dataLakeAnalyticsAccount.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.dataLakeAnalyticsAccount.properties.provisioningState !== null && parameters.dataLakeAnalyticsAccount.properties.provisioningState !== undefined ? parameters.dataLakeAnalyticsAccount.properties.provisioningState.toString() : 'Failed';
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.state !== null && parameters.dataLakeAnalyticsAccount.properties.state !== undefined) {
        propertiesValue['state'] = parameters.dataLakeAnalyticsAccount.properties.state !== null && parameters.dataLakeAnalyticsAccount.properties.state !== undefined ? parameters.dataLakeAnalyticsAccount.properties.state.toString() : 'Active';
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount !== null && parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount !== undefined) {
        propertiesValue['defaultDataLakeStoreAccount'] = parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism !== null && parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism !== undefined) {
        propertiesValue['maxDegreeOfParallelism'] = parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.maxJobCount !== null && parameters.dataLakeAnalyticsAccount.properties.maxJobCount !== undefined) {
        propertiesValue['maxJobCount'] = parameters.dataLakeAnalyticsAccount.properties.maxJobCount;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts !== null && parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts !== undefined) {
        var dataLakeStoreAccountsArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts.length; loweredIndex1 = loweredIndex1 + 1) {
          var dataLakeStoreAccountsItem = parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts[loweredIndex1];
          var dataLakeStoreAccountValue = {};
          dataLakeStoreAccountsArray.push(dataLakeStoreAccountValue);
          
          if (dataLakeStoreAccountsItem.name !== null && dataLakeStoreAccountsItem.name !== undefined) {
            dataLakeStoreAccountValue['name'] = dataLakeStoreAccountsItem.name;
          }
          
          if (dataLakeStoreAccountsItem.properties !== null && dataLakeStoreAccountsItem.properties !== undefined) {
            var propertiesValue2 = {};
            dataLakeStoreAccountValue['properties'] = propertiesValue2;
            
            if (dataLakeStoreAccountsItem.properties.suffix !== null && dataLakeStoreAccountsItem.properties.suffix !== undefined) {
              propertiesValue2['suffix'] = dataLakeStoreAccountsItem.properties.suffix;
            }
          }
        }
        propertiesValue['dataLakeStoreAccounts'] = dataLakeStoreAccountsArray;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.storageAccounts !== null && parameters.dataLakeAnalyticsAccount.properties.storageAccounts !== undefined) {
        var storageAccountsArray = [];
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.dataLakeAnalyticsAccount.properties.storageAccounts.length; loweredIndex2 = loweredIndex2 + 1) {
          var storageAccountsItem = parameters.dataLakeAnalyticsAccount.properties.storageAccounts[loweredIndex2];
          var storageAccountValue = {};
          storageAccountsArray.push(storageAccountValue);
          
          if (storageAccountsItem.name !== null && storageAccountsItem.name !== undefined) {
            storageAccountValue['name'] = storageAccountsItem.name;
          }
          
          if (storageAccountsItem.properties !== null && storageAccountsItem.properties !== undefined) {
            var propertiesValue3 = {};
            storageAccountValue['properties'] = propertiesValue3;
            
            if (storageAccountsItem.properties.accessKey !== null && storageAccountsItem.properties.accessKey !== undefined) {
              propertiesValue3['accessKey'] = storageAccountsItem.properties.accessKey;
            }
            
            if (storageAccountsItem.properties.suffix !== null && storageAccountsItem.properties.suffix !== undefined) {
              propertiesValue3['suffix'] = storageAccountsItem.properties.suffix;
            }
          }
        }
        propertiesValue['storageAccounts'] = storageAccountsArray;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.creationTime !== null && parameters.dataLakeAnalyticsAccount.properties.creationTime !== undefined) {
        propertiesValue['creationTime'] = parameters.dataLakeAnalyticsAccount.properties.creationTime;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime !== null && parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime !== undefined) {
        propertiesValue['lastModifiedTime'] = parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.endpoint !== null && parameters.dataLakeAnalyticsAccount.properties.endpoint !== undefined) {
        propertiesValue['endpoint'] = parameters.dataLakeAnalyticsAccount.properties.endpoint;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      result.location = url2;
      
      return callback(null, result);
    });
  };
  
  /**
   * Begins the delete delete process for the Data Lake Analytics account
   * object specified by the account name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to delete
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.beginDelete = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204 && statusCode !== 404) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      if (statusCode === 404) {
        result.status = OperationStatus.Succeeded;
      }
      if (statusCode === 204) {
        result.status = OperationStatus.Succeeded;
      }
      result.location = url2;
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates the Data Lake Analytics account object specified by the
   * accountName with the contents of the account object.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {DataLakeAnalyticsAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the update Data Lake Analytics account operation.
   * 
   * @param {DataLakeAnalyticsAccount} parameters.dataLakeAnalyticsAccount Gets
   * or sets the account object that is being created.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.location] Gets or
   * sets the account regional location.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.name] Gets or sets
   * the account name.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.type] Gets or sets
   * the namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeAnalyticsAccount.tags] Gets or sets
   * the value of custom properties.
   * 
   * @param {DataLakeAnalyticsAccountProperties}
   * [parameters.dataLakeAnalyticsAccount.properties] Gets or sets the
   * properties defined by Data Lake Analytics all properties are specific to
   * each resource provider.
   * 
   * @param {DataLakeAnalyticsAccountStatus}
   * [parameters.dataLakeAnalyticsAccount.properties.provisioningState] Gets
   * or sets the provisioning status of the Data Lake Analytics account.
   * 
   * @param {DataLakeAnalyticsAccountState}
   * [parameters.dataLakeAnalyticsAccount.properties.state] Gets or sets the
   * state of the Data Lake Analytics account.
   * 
   * @param {string}
   * [parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount]
   * Gets or sets the default data lake storage account associated with this
   * Data Lake Analytics account.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism]
   * Gets or sets the maximum supported degree of parallelism for this acocunt.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxJobCount] Gets or sets
   * the maximum supported jobs running under the account at the same time.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts]
   * Gets or sets the list of Data Lake storage accounts associated with this
   * account.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.storageAccounts] Gets or
   * sets the list of Azure Blob storage accounts associated with this account.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.creationTime] Gets or
   * sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.properties.endpoint]
   * Gets or sets the full CName endpoint for this account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.beginUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.dataLakeAnalyticsAccount === null || parameters.dataLakeAnalyticsAccount === undefined) {
      return callback(new Error('parameters.dataLakeAnalyticsAccount cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    if (parameters.dataLakeAnalyticsAccount.name !== null && parameters.dataLakeAnalyticsAccount.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.dataLakeAnalyticsAccount.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var dataLakeAnalyticsAccountCreateOrUpdateParametersValue = {};
    requestDoc = dataLakeAnalyticsAccountCreateOrUpdateParametersValue;
    
    if (parameters.dataLakeAnalyticsAccount.location !== null && parameters.dataLakeAnalyticsAccount.location !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['location'] = parameters.dataLakeAnalyticsAccount.location;
    }
    
    if (parameters.dataLakeAnalyticsAccount.name !== null && parameters.dataLakeAnalyticsAccount.name !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['name'] = parameters.dataLakeAnalyticsAccount.name;
    }
    
    if (parameters.dataLakeAnalyticsAccount.type !== null && parameters.dataLakeAnalyticsAccount.type !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['type'] = parameters.dataLakeAnalyticsAccount.type;
    }
    
    if (parameters.dataLakeAnalyticsAccount.id !== null && parameters.dataLakeAnalyticsAccount.id !== undefined) {
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['id'] = parameters.dataLakeAnalyticsAccount.id;
    }
    
    if (parameters.dataLakeAnalyticsAccount.tags !== null && parameters.dataLakeAnalyticsAccount.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.dataLakeAnalyticsAccount.tags) {
        var tagsValue = parameters.dataLakeAnalyticsAccount.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.dataLakeAnalyticsAccount.properties !== null && parameters.dataLakeAnalyticsAccount.properties !== undefined) {
      var propertiesValue = {};
      dataLakeAnalyticsAccountCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.dataLakeAnalyticsAccount.properties.provisioningState !== null && parameters.dataLakeAnalyticsAccount.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.dataLakeAnalyticsAccount.properties.provisioningState !== null && parameters.dataLakeAnalyticsAccount.properties.provisioningState !== undefined ? parameters.dataLakeAnalyticsAccount.properties.provisioningState.toString() : 'Failed';
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.state !== null && parameters.dataLakeAnalyticsAccount.properties.state !== undefined) {
        propertiesValue['state'] = parameters.dataLakeAnalyticsAccount.properties.state !== null && parameters.dataLakeAnalyticsAccount.properties.state !== undefined ? parameters.dataLakeAnalyticsAccount.properties.state.toString() : 'Active';
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount !== null && parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount !== undefined) {
        propertiesValue['defaultDataLakeStoreAccount'] = parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism !== null && parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism !== undefined) {
        propertiesValue['maxDegreeOfParallelism'] = parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.maxJobCount !== null && parameters.dataLakeAnalyticsAccount.properties.maxJobCount !== undefined) {
        propertiesValue['maxJobCount'] = parameters.dataLakeAnalyticsAccount.properties.maxJobCount;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts !== null && parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts !== undefined) {
        var dataLakeStoreAccountsArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts.length; loweredIndex1 = loweredIndex1 + 1) {
          var dataLakeStoreAccountsItem = parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts[loweredIndex1];
          var dataLakeStoreAccountValue = {};
          dataLakeStoreAccountsArray.push(dataLakeStoreAccountValue);
          
          if (dataLakeStoreAccountsItem.name !== null && dataLakeStoreAccountsItem.name !== undefined) {
            dataLakeStoreAccountValue['name'] = dataLakeStoreAccountsItem.name;
          }
          
          if (dataLakeStoreAccountsItem.properties !== null && dataLakeStoreAccountsItem.properties !== undefined) {
            var propertiesValue2 = {};
            dataLakeStoreAccountValue['properties'] = propertiesValue2;
            
            if (dataLakeStoreAccountsItem.properties.suffix !== null && dataLakeStoreAccountsItem.properties.suffix !== undefined) {
              propertiesValue2['suffix'] = dataLakeStoreAccountsItem.properties.suffix;
            }
          }
        }
        propertiesValue['dataLakeStoreAccounts'] = dataLakeStoreAccountsArray;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.storageAccounts !== null && parameters.dataLakeAnalyticsAccount.properties.storageAccounts !== undefined) {
        var storageAccountsArray = [];
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.dataLakeAnalyticsAccount.properties.storageAccounts.length; loweredIndex2 = loweredIndex2 + 1) {
          var storageAccountsItem = parameters.dataLakeAnalyticsAccount.properties.storageAccounts[loweredIndex2];
          var storageAccountValue = {};
          storageAccountsArray.push(storageAccountValue);
          
          if (storageAccountsItem.name !== null && storageAccountsItem.name !== undefined) {
            storageAccountValue['name'] = storageAccountsItem.name;
          }
          
          if (storageAccountsItem.properties !== null && storageAccountsItem.properties !== undefined) {
            var propertiesValue3 = {};
            storageAccountValue['properties'] = propertiesValue3;
            
            if (storageAccountsItem.properties.accessKey !== null && storageAccountsItem.properties.accessKey !== undefined) {
              propertiesValue3['accessKey'] = storageAccountsItem.properties.accessKey;
            }
            
            if (storageAccountsItem.properties.suffix !== null && storageAccountsItem.properties.suffix !== undefined) {
              propertiesValue3['suffix'] = storageAccountsItem.properties.suffix;
            }
          }
        }
        propertiesValue['storageAccounts'] = storageAccountsArray;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.creationTime !== null && parameters.dataLakeAnalyticsAccount.properties.creationTime !== undefined) {
        propertiesValue['creationTime'] = parameters.dataLakeAnalyticsAccount.properties.creationTime;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime !== null && parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime !== undefined) {
        propertiesValue['lastModifiedTime'] = parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime;
      }
      
      if (parameters.dataLakeAnalyticsAccount.properties.endpoint !== null && parameters.dataLakeAnalyticsAccount.properties.endpoint !== undefined) {
        propertiesValue['endpoint'] = parameters.dataLakeAnalyticsAccount.properties.endpoint;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      result.location = url2;
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates the specified Data Lake Analytics account.This supplies the user
   * with computation services for Data Lake Analytics workloads
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {DataLakeAnalyticsAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the create Data Lake Analytics account operation.
   * 
   * @param {DataLakeAnalyticsAccount} parameters.dataLakeAnalyticsAccount Gets
   * or sets the account object that is being created.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.location] Gets or
   * sets the account regional location.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.name] Gets or sets
   * the account name.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.type] Gets or sets
   * the namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeAnalyticsAccount.tags] Gets or sets
   * the value of custom properties.
   * 
   * @param {DataLakeAnalyticsAccountProperties}
   * [parameters.dataLakeAnalyticsAccount.properties] Gets or sets the
   * properties defined by Data Lake Analytics all properties are specific to
   * each resource provider.
   * 
   * @param {DataLakeAnalyticsAccountStatus}
   * [parameters.dataLakeAnalyticsAccount.properties.provisioningState] Gets
   * or sets the provisioning status of the Data Lake Analytics account.
   * 
   * @param {DataLakeAnalyticsAccountState}
   * [parameters.dataLakeAnalyticsAccount.properties.state] Gets or sets the
   * state of the Data Lake Analytics account.
   * 
   * @param {string}
   * [parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount]
   * Gets or sets the default data lake storage account associated with this
   * Data Lake Analytics account.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism]
   * Gets or sets the maximum supported degree of parallelism for this acocunt.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxJobCount] Gets or sets
   * the maximum supported jobs running under the account at the same time.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts]
   * Gets or sets the list of Data Lake storage accounts associated with this
   * account.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.storageAccounts] Gets or
   * sets the list of Azure Blob storage accounts associated with this account.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.creationTime] Gets or
   * sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.properties.endpoint]
   * Gets or sets the full CName endpoint for this account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.create = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.dataLakeAnalyticsAccount.beginCreate(resourceGroupName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Gets the next page of the Data Lake Store account objects within the
   * specified Data Lake Analytics account with the link to the next page, if
   * any.
   * 
   * @param {string} nextLink The url to the next Data Lake Store account page.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.dataLakeStoreAccountListNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var dataLakeStoreAccountInstance = {};
              result.value.push(dataLakeStoreAccountInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                dataLakeStoreAccountInstance.name = nameInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                dataLakeStoreAccountInstance.properties = propertiesInstance;
                
                var suffixValue = propertiesValue['suffix'];
                if (suffixValue !== null && suffixValue !== undefined) {
                  var suffixInstance = suffixValue;
                  propertiesInstance.suffix = suffixInstance;
                }
              }
            }
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the Data Lake Analytics account object specified by the account
   * name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to delete
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.deleteMethod = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.dataLakeAnalyticsAccount.beginDelete(resourceGroupName, accountName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Updates the Data Lake Analytics account specified to remove the specified
   * Data Lake Store account.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The Data Lake Analytics account name to remove
   * the Data Lake Store account from
   * 
   * @param {string} dataLakeStoreAccountName The name of the Data Lake Store
   * account to remove
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.deleteDataLakeStoreAccount = function(resourceGroupName, accountName, dataLakeStoreAccountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (dataLakeStoreAccountName === null || dataLakeStoreAccountName === undefined) {
      return callback(new Error('dataLakeStoreAccountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/DataLakeStoreAccounts/';
    url2 = url2 + encodeURIComponent(dataLakeStoreAccountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates the Data Lake Analytics account specified to remove the specified
   * Azure Storage account.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The Data Lake Analytics account name to remove
   * the Azure Storage account from
   * 
   * @param {string} storageAccountName The name of the Azure Storage account
   * to remove
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.deleteStorageAccount = function(resourceGroupName, accountName, storageAccountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccountName === null || storageAccountName === undefined) {
      return callback(new Error('storageAccountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    url2 = url2 + encodeURIComponent(storageAccountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the Data Lake Analytics account object specified by the account name.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to retrieve
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.get = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var dataLakeAnalyticsAccountInstance = { tags: {} };
          result.dataLakeAnalyticsAccount = dataLakeAnalyticsAccountInstance;
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            dataLakeAnalyticsAccountInstance.location = locationInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            dataLakeAnalyticsAccountInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            dataLakeAnalyticsAccountInstance.type = typeInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            dataLakeAnalyticsAccountInstance.id = idInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              dataLakeAnalyticsAccountInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { dataLakeStoreAccounts: [], storageAccounts: [] };
            dataLakeAnalyticsAccountInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var stateValue = propertiesValue['state'];
            if (stateValue !== null && stateValue !== undefined) {
              var stateInstance = stateValue;
              propertiesInstance.state = stateInstance;
            }
            
            var defaultDataLakeStoreAccountValue = propertiesValue['defaultDataLakeStoreAccount'];
            if (defaultDataLakeStoreAccountValue !== null && defaultDataLakeStoreAccountValue !== undefined) {
              var defaultDataLakeStoreAccountInstance = defaultDataLakeStoreAccountValue;
              propertiesInstance.defaultDataLakeStoreAccount = defaultDataLakeStoreAccountInstance;
            }
            
            var maxDegreeOfParallelismValue = propertiesValue['maxDegreeOfParallelism'];
            if (maxDegreeOfParallelismValue !== null && maxDegreeOfParallelismValue !== undefined) {
              var maxDegreeOfParallelismInstance = maxDegreeOfParallelismValue;
              propertiesInstance.maxDegreeOfParallelism = maxDegreeOfParallelismInstance;
            }
            
            var maxJobCountValue = propertiesValue['maxJobCount'];
            if (maxJobCountValue !== null && maxJobCountValue !== undefined) {
              var maxJobCountInstance = maxJobCountValue;
              propertiesInstance.maxJobCount = maxJobCountInstance;
            }
            
            var dataLakeStoreAccountsArray = propertiesValue['dataLakeStoreAccounts'];
            if (dataLakeStoreAccountsArray !== null && dataLakeStoreAccountsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < dataLakeStoreAccountsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var dataLakeStoreAccountsValue = dataLakeStoreAccountsArray[loweredIndex1];
                var dataLakeStoreAccountInstance = {};
                propertiesInstance.dataLakeStoreAccounts.push(dataLakeStoreAccountInstance);
                
                var nameValue2 = dataLakeStoreAccountsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  dataLakeStoreAccountInstance.name = nameInstance2;
                }
                
                var propertiesValue2 = dataLakeStoreAccountsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var propertiesInstance2 = {};
                  dataLakeStoreAccountInstance.properties = propertiesInstance2;
                  
                  var suffixValue = propertiesValue2['suffix'];
                  if (suffixValue !== null && suffixValue !== undefined) {
                    var suffixInstance = suffixValue;
                    propertiesInstance2.suffix = suffixInstance;
                  }
                }
              }
            }
            
            var storageAccountsArray = propertiesValue['storageAccounts'];
            if (storageAccountsArray !== null && storageAccountsArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < storageAccountsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var storageAccountsValue = storageAccountsArray[loweredIndex2];
                var storageAccountInstance = {};
                propertiesInstance.storageAccounts.push(storageAccountInstance);
                
                var nameValue3 = storageAccountsValue['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  storageAccountInstance.name = nameInstance3;
                }
                
                var propertiesValue3 = storageAccountsValue['properties'];
                if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                  var propertiesInstance3 = {};
                  storageAccountInstance.properties = propertiesInstance3;
                  
                  var accessKeyValue = propertiesValue3['accessKey'];
                  if (accessKeyValue !== null && accessKeyValue !== undefined) {
                    var accessKeyInstance = accessKeyValue;
                    propertiesInstance3.accessKey = accessKeyInstance;
                  }
                  
                  var suffixValue2 = propertiesValue3['suffix'];
                  if (suffixValue2 !== null && suffixValue2 !== undefined) {
                    var suffixInstance2 = suffixValue2;
                    propertiesInstance3.suffix = suffixInstance2;
                  }
                }
              }
            }
            
            var creationTimeValue = propertiesValue['creationTime'];
            if (creationTimeValue !== null && creationTimeValue !== undefined) {
              var creationTimeInstance = creationTimeValue;
              propertiesInstance.creationTime = creationTimeInstance;
            }
            
            var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
            if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
              var lastModifiedTimeInstance = lastModifiedTimeValue;
              propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
            }
            
            var endpointValue = propertiesValue['endpoint'];
            if (endpointValue !== null && endpointValue !== undefined) {
              var endpointInstance = endpointValue;
              propertiesInstance.endpoint = endpointInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the specified Data Lake Store account details in the specified Data
   * Lake Analytics account.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to retrieve the Data
   * Lake Store account details from
   * 
   * @param {string} dataLakeStoreAccountName The name of the account to
   * retrieve
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.getDataLakeStoreAccount = function(resourceGroupName, accountName, dataLakeStoreAccountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (dataLakeStoreAccountName === null || dataLakeStoreAccountName === undefined) {
      return callback(new Error('dataLakeStoreAccountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/DataLakeStoreAccounts/';
    url2 = url2 + encodeURIComponent(dataLakeStoreAccountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var dataLakeStoreAccountInstance = {};
          result.dataLakeStoreAccount = dataLakeStoreAccountInstance;
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            dataLakeStoreAccountInstance.name = nameInstance;
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            dataLakeStoreAccountInstance.properties = propertiesInstance;
            
            var suffixValue = propertiesValue['suffix'];
            if (suffixValue !== null && suffixValue !== undefined) {
              var suffixInstance = suffixValue;
              propertiesInstance.suffix = suffixInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the specified Azure storage account details in the specified Data
   * Lake Analytics account.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the account to retrieve the Azure
   * storage account details from
   * 
   * @param {string} storageAccountName The name of the account to retrieve
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.getStorageAccount = function(resourceGroupName, accountName, storageAccountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccountName === null || storageAccountName === undefined) {
      return callback(new Error('storageAccountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    url2 = url2 + encodeURIComponent(storageAccountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var storageAccountInstance = {};
          result.storageAccount = storageAccountInstance;
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            storageAccountInstance.name = nameInstance;
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            storageAccountInstance.properties = propertiesInstance;
            
            var accessKeyValue = propertiesValue['accessKey'];
            if (accessKeyValue !== null && accessKeyValue !== undefined) {
              var accessKeyInstance = accessKeyValue;
              propertiesInstance.accessKey = accessKeyInstance;
            }
            
            var suffixValue = propertiesValue['suffix'];
            if (suffixValue !== null && suffixValue !== undefined) {
              var suffixInstance = suffixValue;
              propertiesInstance.suffix = suffixInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the specified Azure Storage container object associated with the
   * specified Data Lake Analytics and Azure Storage accounts.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * retrieve blob container for
   * 
   * @param {string} storageAccountName The name of the Azure storage account
   * to retrieve the blob container from
   * 
   * @param {string} containerName The name of the Azure storage container to
   * retrieve
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.getStorageContainer = function(resourceGroupName, accountName, storageAccountName, containerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccountName === null || storageAccountName === undefined) {
      return callback(new Error('storageAccountName cannot be null.'));
    }
    if (containerName === null || containerName === undefined) {
      return callback(new Error('containerName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    url2 = url2 + encodeURIComponent(storageAccountName);
    url2 = url2 + '/Containers/';
    url2 = url2 + encodeURIComponent(containerName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var containerInstance = {};
          result.container = containerInstance;
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            containerInstance.name = nameInstance;
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            containerInstance.id = idInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            containerInstance.type = typeInstance;
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            containerInstance.properties = propertiesInstance;
            
            var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
            if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
              var lastModifiedTimeInstance = lastModifiedTimeValue;
              propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the first page of the Data Lake Analytics account objects within the
   * subscription or within a specific resource group. This includes a link to
   * the next page, if any.
   * 
   * @param {string} [resourceGroupName] The name of the resource group.
   * 
   * @param {DataLakeAnalyticsAccountListParameters} [parametersOrCallback]
   * Query parameters. If null is passed returns all account items.
   * 
   * @param {string} [parametersOrCallback.filter] Gets or sets OData filter.
   * Optional.
   * 
   * @param {string} [parametersOrCallback.expand] Gets or sets OData
   * expansion. Expand related resources in line with the retrieved resources,
   * e.g. Categories/$expand=Products would expand Product data in line with
   * each Category entry. Optional.
   * 
   * @param {string} [parametersOrCallback.select] Gets or sets OData Select
   * statement. Limits the properties on each entry to just those requested,
   * e.g. Categories?$select=CategoryName,Description. Optional.
   * 
   * @param {string} [parametersOrCallback.orderBy] Gets or sets the OrderBy
   * clause. One or more comma-separated expressions with an optional “asc”
   * (the default) or “desc” depending on the order you’d like the values
   * sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   * 
   * @param {string} [parametersOrCallback.search] Gets or sets a free form
   * search. A free-text search expression to match for whether a particular
   * entry should be included in the feed, e.g. Categories?$search=blue OR
   * green. Optional.
   * 
   * @param {string} [parametersOrCallback.format] Gets or sets the return
   * format. Return the response in particular formatxii without access to
   * request headers for standard content-type negotiation (e.g
   * Orders?$format=json). Optional.
   * 
   * @param {number} [parametersOrCallback.top] Gets or sets the number of
   * items to return. Optional.
   * 
   * @param {number} [parametersOrCallback.skip] Gets or sets the number of
   * items to skip over before returning elements. Optional.
   * 
   * @param {boolean} [parametersOrCallback.count] Gets or sets a Boolean value
   * of true or false to request a count of the matching resources included
   * with the resources in the response, e.g. Categories?$count=true. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.list = function(resourceGroupName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/';
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      url2 = url2 + 'resourceGroups/' + encodeURIComponent(resourceGroupName) + '/';
    }
    url2 = url2 + 'providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    var queryParameters = [];
    if (parameters !== null && parameters !== undefined && parameters.filter !== null && parameters.filter !== undefined) {
      queryParameters.push('$filter=' + encodeURIComponent(parameters.filter));
    }
    if (parameters !== null && parameters !== undefined && parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.expand !== null && parameters.expand !== undefined) {
      queryParameters.push('$expand=' + encodeURIComponent(parameters.expand));
    }
    if (parameters !== null && parameters !== undefined && parameters.select !== null && parameters.select !== undefined) {
      queryParameters.push('$select=' + encodeURIComponent(parameters.select));
    }
    if (parameters !== null && parameters !== undefined && parameters.orderBy !== null && parameters.orderBy !== undefined) {
      queryParameters.push('$orderby=' + encodeURIComponent(parameters.orderBy));
    }
    if (parameters !== null && parameters !== undefined && parameters.count !== null && parameters.count !== undefined) {
      queryParameters.push('$count=' + encodeURIComponent(parameters.count.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.search !== null && parameters.search !== undefined) {
      queryParameters.push('$search=' + encodeURIComponent(parameters.search));
    }
    if (parameters !== null && parameters !== undefined && parameters.format !== null && parameters.format !== undefined) {
      queryParameters.push('$format=' + encodeURIComponent(parameters.format));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var dataLakeAnalyticsAccountInstance = { tags: {} };
              result.value.push(dataLakeAnalyticsAccountInstance);
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                dataLakeAnalyticsAccountInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                dataLakeAnalyticsAccountInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                dataLakeAnalyticsAccountInstance.type = typeInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                dataLakeAnalyticsAccountInstance.id = idInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  dataLakeAnalyticsAccountInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { dataLakeStoreAccounts: [], storageAccounts: [] };
                dataLakeAnalyticsAccountInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var stateValue = propertiesValue['state'];
                if (stateValue !== null && stateValue !== undefined) {
                  var stateInstance = stateValue;
                  propertiesInstance.state = stateInstance;
                }
                
                var defaultDataLakeStoreAccountValue = propertiesValue['defaultDataLakeStoreAccount'];
                if (defaultDataLakeStoreAccountValue !== null && defaultDataLakeStoreAccountValue !== undefined) {
                  var defaultDataLakeStoreAccountInstance = defaultDataLakeStoreAccountValue;
                  propertiesInstance.defaultDataLakeStoreAccount = defaultDataLakeStoreAccountInstance;
                }
                
                var maxDegreeOfParallelismValue = propertiesValue['maxDegreeOfParallelism'];
                if (maxDegreeOfParallelismValue !== null && maxDegreeOfParallelismValue !== undefined) {
                  var maxDegreeOfParallelismInstance = maxDegreeOfParallelismValue;
                  propertiesInstance.maxDegreeOfParallelism = maxDegreeOfParallelismInstance;
                }
                
                var maxJobCountValue = propertiesValue['maxJobCount'];
                if (maxJobCountValue !== null && maxJobCountValue !== undefined) {
                  var maxJobCountInstance = maxJobCountValue;
                  propertiesInstance.maxJobCount = maxJobCountInstance;
                }
                
                var dataLakeStoreAccountsArray = propertiesValue['dataLakeStoreAccounts'];
                if (dataLakeStoreAccountsArray !== null && dataLakeStoreAccountsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < dataLakeStoreAccountsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var dataLakeStoreAccountsValue = dataLakeStoreAccountsArray[loweredIndex2];
                    var dataLakeStoreAccountInstance = {};
                    propertiesInstance.dataLakeStoreAccounts.push(dataLakeStoreAccountInstance);
                    
                    var nameValue2 = dataLakeStoreAccountsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      dataLakeStoreAccountInstance.name = nameInstance2;
                    }
                    
                    var propertiesValue2 = dataLakeStoreAccountsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var propertiesInstance2 = {};
                      dataLakeStoreAccountInstance.properties = propertiesInstance2;
                      
                      var suffixValue = propertiesValue2['suffix'];
                      if (suffixValue !== null && suffixValue !== undefined) {
                        var suffixInstance = suffixValue;
                        propertiesInstance2.suffix = suffixInstance;
                      }
                    }
                  }
                }
                
                var storageAccountsArray = propertiesValue['storageAccounts'];
                if (storageAccountsArray !== null && storageAccountsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < storageAccountsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var storageAccountsValue = storageAccountsArray[loweredIndex3];
                    var storageAccountInstance = {};
                    propertiesInstance.storageAccounts.push(storageAccountInstance);
                    
                    var nameValue3 = storageAccountsValue['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      storageAccountInstance.name = nameInstance3;
                    }
                    
                    var propertiesValue3 = storageAccountsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var propertiesInstance3 = {};
                      storageAccountInstance.properties = propertiesInstance3;
                      
                      var accessKeyValue = propertiesValue3['accessKey'];
                      if (accessKeyValue !== null && accessKeyValue !== undefined) {
                        var accessKeyInstance = accessKeyValue;
                        propertiesInstance3.accessKey = accessKeyInstance;
                      }
                      
                      var suffixValue2 = propertiesValue3['suffix'];
                      if (suffixValue2 !== null && suffixValue2 !== undefined) {
                        var suffixInstance2 = suffixValue2;
                        propertiesInstance3.suffix = suffixInstance2;
                      }
                    }
                  }
                }
                
                var creationTimeValue = propertiesValue['creationTime'];
                if (creationTimeValue !== null && creationTimeValue !== undefined) {
                  var creationTimeInstance = creationTimeValue;
                  propertiesInstance.creationTime = creationTimeInstance;
                }
                
                var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
                if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
                  var lastModifiedTimeInstance = lastModifiedTimeValue;
                  propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
                }
                
                var endpointValue = propertiesValue['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance.endpoint = endpointInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the first page of the Data Lake Store account objects within the
   * specified Data Lake Analytics account. This includes a link to the next
   * page, if any.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * list Data Lake Store accounts for.
   * 
   * @param {DataLakeAnalyticsAccountListParameters} [parametersOrCallback]
   * Query parameters. If null is passed returns all account items.
   * 
   * @param {string} [parametersOrCallback.filter] Gets or sets OData filter.
   * Optional.
   * 
   * @param {string} [parametersOrCallback.expand] Gets or sets OData
   * expansion. Expand related resources in line with the retrieved resources,
   * e.g. Categories/$expand=Products would expand Product data in line with
   * each Category entry. Optional.
   * 
   * @param {string} [parametersOrCallback.select] Gets or sets OData Select
   * statement. Limits the properties on each entry to just those requested,
   * e.g. Categories?$select=CategoryName,Description. Optional.
   * 
   * @param {string} [parametersOrCallback.orderBy] Gets or sets the OrderBy
   * clause. One or more comma-separated expressions with an optional “asc”
   * (the default) or “desc” depending on the order you’d like the values
   * sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   * 
   * @param {string} [parametersOrCallback.search] Gets or sets a free form
   * search. A free-text search expression to match for whether a particular
   * entry should be included in the feed, e.g. Categories?$search=blue OR
   * green. Optional.
   * 
   * @param {string} [parametersOrCallback.format] Gets or sets the return
   * format. Return the response in particular formatxii without access to
   * request headers for standard content-type negotiation (e.g
   * Orders?$format=json). Optional.
   * 
   * @param {number} [parametersOrCallback.top] Gets or sets the number of
   * items to return. Optional.
   * 
   * @param {number} [parametersOrCallback.skip] Gets or sets the number of
   * items to skip over before returning elements. Optional.
   * 
   * @param {boolean} [parametersOrCallback.count] Gets or sets a Boolean value
   * of true or false to request a count of the matching resources included
   * with the resources in the response, e.g. Categories?$count=true. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.listDataLakeStoreAccounts = function(resourceGroupName, accountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/DataLakeStoreAccounts/';
    var queryParameters = [];
    if (parameters !== null && parameters !== undefined && parameters.filter !== null && parameters.filter !== undefined) {
      queryParameters.push('$filter=' + encodeURIComponent(parameters.filter));
    }
    if (parameters !== null && parameters !== undefined && parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.expand !== null && parameters.expand !== undefined) {
      queryParameters.push('$expand=' + encodeURIComponent(parameters.expand));
    }
    if (parameters !== null && parameters !== undefined && parameters.select !== null && parameters.select !== undefined) {
      queryParameters.push('$select=' + encodeURIComponent(parameters.select));
    }
    if (parameters !== null && parameters !== undefined && parameters.orderBy !== null && parameters.orderBy !== undefined) {
      queryParameters.push('$orderby=' + encodeURIComponent(parameters.orderBy));
    }
    if (parameters !== null && parameters !== undefined && parameters.count !== null && parameters.count !== undefined) {
      queryParameters.push('$count=' + encodeURIComponent(parameters.count.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.search !== null && parameters.search !== undefined) {
      queryParameters.push('$search=' + encodeURIComponent(parameters.search));
    }
    if (parameters !== null && parameters !== undefined && parameters.format !== null && parameters.format !== undefined) {
      queryParameters.push('$format=' + encodeURIComponent(parameters.format));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var dataLakeStoreAccountInstance = {};
              result.value.push(dataLakeStoreAccountInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                dataLakeStoreAccountInstance.name = nameInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                dataLakeStoreAccountInstance.properties = propertiesInstance;
                
                var suffixValue = propertiesValue['suffix'];
                if (suffixValue !== null && suffixValue !== undefined) {
                  var suffixInstance = suffixValue;
                  propertiesInstance.suffix = suffixInstance;
                }
              }
            }
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the next page of the Data Lake Analytics account objects within the
   * subscription or within a specific resource group with the link to the
   * next page, if any.
   * 
   * @param {string} nextLink The url to the next Data Lake Analytics account
   * page.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var dataLakeAnalyticsAccountInstance = { tags: {} };
              result.value.push(dataLakeAnalyticsAccountInstance);
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                dataLakeAnalyticsAccountInstance.location = locationInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                dataLakeAnalyticsAccountInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                dataLakeAnalyticsAccountInstance.type = typeInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                dataLakeAnalyticsAccountInstance.id = idInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  dataLakeAnalyticsAccountInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { dataLakeStoreAccounts: [], storageAccounts: [] };
                dataLakeAnalyticsAccountInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var stateValue = propertiesValue['state'];
                if (stateValue !== null && stateValue !== undefined) {
                  var stateInstance = stateValue;
                  propertiesInstance.state = stateInstance;
                }
                
                var defaultDataLakeStoreAccountValue = propertiesValue['defaultDataLakeStoreAccount'];
                if (defaultDataLakeStoreAccountValue !== null && defaultDataLakeStoreAccountValue !== undefined) {
                  var defaultDataLakeStoreAccountInstance = defaultDataLakeStoreAccountValue;
                  propertiesInstance.defaultDataLakeStoreAccount = defaultDataLakeStoreAccountInstance;
                }
                
                var maxDegreeOfParallelismValue = propertiesValue['maxDegreeOfParallelism'];
                if (maxDegreeOfParallelismValue !== null && maxDegreeOfParallelismValue !== undefined) {
                  var maxDegreeOfParallelismInstance = maxDegreeOfParallelismValue;
                  propertiesInstance.maxDegreeOfParallelism = maxDegreeOfParallelismInstance;
                }
                
                var maxJobCountValue = propertiesValue['maxJobCount'];
                if (maxJobCountValue !== null && maxJobCountValue !== undefined) {
                  var maxJobCountInstance = maxJobCountValue;
                  propertiesInstance.maxJobCount = maxJobCountInstance;
                }
                
                var dataLakeStoreAccountsArray = propertiesValue['dataLakeStoreAccounts'];
                if (dataLakeStoreAccountsArray !== null && dataLakeStoreAccountsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < dataLakeStoreAccountsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var dataLakeStoreAccountsValue = dataLakeStoreAccountsArray[loweredIndex2];
                    var dataLakeStoreAccountInstance = {};
                    propertiesInstance.dataLakeStoreAccounts.push(dataLakeStoreAccountInstance);
                    
                    var nameValue2 = dataLakeStoreAccountsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      dataLakeStoreAccountInstance.name = nameInstance2;
                    }
                    
                    var propertiesValue2 = dataLakeStoreAccountsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var propertiesInstance2 = {};
                      dataLakeStoreAccountInstance.properties = propertiesInstance2;
                      
                      var suffixValue = propertiesValue2['suffix'];
                      if (suffixValue !== null && suffixValue !== undefined) {
                        var suffixInstance = suffixValue;
                        propertiesInstance2.suffix = suffixInstance;
                      }
                    }
                  }
                }
                
                var storageAccountsArray = propertiesValue['storageAccounts'];
                if (storageAccountsArray !== null && storageAccountsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < storageAccountsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var storageAccountsValue = storageAccountsArray[loweredIndex3];
                    var storageAccountInstance = {};
                    propertiesInstance.storageAccounts.push(storageAccountInstance);
                    
                    var nameValue3 = storageAccountsValue['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      storageAccountInstance.name = nameInstance3;
                    }
                    
                    var propertiesValue3 = storageAccountsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var propertiesInstance3 = {};
                      storageAccountInstance.properties = propertiesInstance3;
                      
                      var accessKeyValue = propertiesValue3['accessKey'];
                      if (accessKeyValue !== null && accessKeyValue !== undefined) {
                        var accessKeyInstance = accessKeyValue;
                        propertiesInstance3.accessKey = accessKeyInstance;
                      }
                      
                      var suffixValue2 = propertiesValue3['suffix'];
                      if (suffixValue2 !== null && suffixValue2 !== undefined) {
                        var suffixInstance2 = suffixValue2;
                        propertiesInstance3.suffix = suffixInstance2;
                      }
                    }
                  }
                }
                
                var creationTimeValue = propertiesValue['creationTime'];
                if (creationTimeValue !== null && creationTimeValue !== undefined) {
                  var creationTimeInstance = creationTimeValue;
                  propertiesInstance.creationTime = creationTimeInstance;
                }
                
                var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
                if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
                  var lastModifiedTimeInstance = lastModifiedTimeValue;
                  propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
                }
                
                var endpointValue = propertiesValue['endpoint'];
                if (endpointValue !== null && endpointValue !== undefined) {
                  var endpointInstance = endpointValue;
                  propertiesInstance.endpoint = endpointInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the SAS token associated with the specified Data Lake Analytics and
   * WASB storage account and container combination.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * get the SAS token for
   * 
   * @param {string} storageAccountName The name of the Azure storage account
   * to retrieve the blob container from
   * 
   * @param {string} containerName The name of the Azure storage container to
   * retrieve
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.listSasTokens = function(resourceGroupName, accountName, storageAccountName, containerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccountName === null || storageAccountName === undefined) {
      return callback(new Error('storageAccountName cannot be null.'));
    }
    if (containerName === null || containerName === undefined) {
      return callback(new Error('containerName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    url2 = url2 + encodeURIComponent(storageAccountName);
    url2 = url2 + '/Containers/';
    url2 = url2 + encodeURIComponent(containerName);
    url2 = url2 + '/listSasTokens';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var sasTokenInfoInstance = {};
              result.value.push(sasTokenInfoInstance);
              
              var accessTokenValue = valueValue['accessToken'];
              if (accessTokenValue !== null && accessTokenValue !== undefined) {
                var accessTokenInstance = accessTokenValue;
                sasTokenInfoInstance.accessToken = accessTokenInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the first page of the Data Lake Analytics account objects within the
   * subscription or within a specific resource group. This includes a link to
   * the next page, if any.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * list Storage accounts for.
   * 
   * @param {DataLakeAnalyticsAccountListParameters} [parametersOrCallback]
   * Query parameters. If null is passed returns all account items.
   * 
   * @param {string} [parametersOrCallback.filter] Gets or sets OData filter.
   * Optional.
   * 
   * @param {string} [parametersOrCallback.expand] Gets or sets OData
   * expansion. Expand related resources in line with the retrieved resources,
   * e.g. Categories/$expand=Products would expand Product data in line with
   * each Category entry. Optional.
   * 
   * @param {string} [parametersOrCallback.select] Gets or sets OData Select
   * statement. Limits the properties on each entry to just those requested,
   * e.g. Categories?$select=CategoryName,Description. Optional.
   * 
   * @param {string} [parametersOrCallback.orderBy] Gets or sets the OrderBy
   * clause. One or more comma-separated expressions with an optional “asc”
   * (the default) or “desc” depending on the order you’d like the values
   * sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
   * 
   * @param {string} [parametersOrCallback.search] Gets or sets a free form
   * search. A free-text search expression to match for whether a particular
   * entry should be included in the feed, e.g. Categories?$search=blue OR
   * green. Optional.
   * 
   * @param {string} [parametersOrCallback.format] Gets or sets the return
   * format. Return the response in particular formatxii without access to
   * request headers for standard content-type negotiation (e.g
   * Orders?$format=json). Optional.
   * 
   * @param {number} [parametersOrCallback.top] Gets or sets the number of
   * items to return. Optional.
   * 
   * @param {number} [parametersOrCallback.skip] Gets or sets the number of
   * items to skip over before returning elements. Optional.
   * 
   * @param {boolean} [parametersOrCallback.count] Gets or sets a Boolean value
   * of true or false to request a count of the matching resources included
   * with the resources in the response, e.g. Categories?$count=true. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.listStorageAccounts = function(resourceGroupName, accountName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    var queryParameters = [];
    if (parameters !== null && parameters !== undefined && parameters.filter !== null && parameters.filter !== undefined) {
      queryParameters.push('$filter=' + encodeURIComponent(parameters.filter));
    }
    if (parameters !== null && parameters !== undefined && parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.expand !== null && parameters.expand !== undefined) {
      queryParameters.push('$expand=' + encodeURIComponent(parameters.expand));
    }
    if (parameters !== null && parameters !== undefined && parameters.select !== null && parameters.select !== undefined) {
      queryParameters.push('$select=' + encodeURIComponent(parameters.select));
    }
    if (parameters !== null && parameters !== undefined && parameters.orderBy !== null && parameters.orderBy !== undefined) {
      queryParameters.push('$orderby=' + encodeURIComponent(parameters.orderBy));
    }
    if (parameters !== null && parameters !== undefined && parameters.count !== null && parameters.count !== undefined) {
      queryParameters.push('$count=' + encodeURIComponent(parameters.count.toString()));
    }
    if (parameters !== null && parameters !== undefined && parameters.search !== null && parameters.search !== undefined) {
      queryParameters.push('$search=' + encodeURIComponent(parameters.search));
    }
    if (parameters !== null && parameters !== undefined && parameters.format !== null && parameters.format !== undefined) {
      queryParameters.push('$format=' + encodeURIComponent(parameters.format));
    }
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var storageAccountInstance = {};
              result.value.push(storageAccountInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                storageAccountInstance.name = nameInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                storageAccountInstance.properties = propertiesInstance;
                
                var accessKeyValue = propertiesValue['accessKey'];
                if (accessKeyValue !== null && accessKeyValue !== undefined) {
                  var accessKeyInstance = accessKeyValue;
                  propertiesInstance.accessKey = accessKeyInstance;
                }
                
                var suffixValue = propertiesValue['suffix'];
                if (suffixValue !== null && suffixValue !== undefined) {
                  var suffixInstance = suffixValue;
                  propertiesInstance.suffix = suffixInstance;
                }
              }
            }
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the Azure Storage containers object associated with the specified
   * Data Lake Analytics and Azure Storage accounts.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The name of the Data Lake Analytics account to
   * retrieve blob containers for
   * 
   * @param {string} storageAccountName The name of the Azure storage account
   * to retrieve blob containers from
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.listStorageContainers = function(resourceGroupName, accountName, storageAccountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccountName === null || storageAccountName === undefined) {
      return callback(new Error('storageAccountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    url2 = url2 + encodeURIComponent(storageAccountName);
    url2 = url2 + '/Containers';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var blobContainerInstance = {};
              result.value.push(blobContainerInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                blobContainerInstance.name = nameInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                blobContainerInstance.id = idInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                blobContainerInstance.type = typeInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                blobContainerInstance.properties = propertiesInstance;
                
                var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
                if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
                  var lastModifiedTimeInstance = lastModifiedTimeValue;
                  propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the next page of the SAS token objects within the specified Azure
   * Storage account and container, if any.
   * 
   * @param {string} nextLink The url to the next Azure Storage Container SAS
   * token page.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.sasTokensListNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var sasTokenInfoInstance = {};
              result.value.push(sasTokenInfoInstance);
              
              var accessTokenValue = valueValue['accessToken'];
              if (accessTokenValue !== null && accessTokenValue !== undefined) {
                var accessTokenInstance = accessTokenValue;
                sasTokenInfoInstance.accessToken = accessTokenInstance;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the next page of the Azure Storage account objects within the
   * specified Data Lake Analytics account with the link to the next page, if
   * any.
   * 
   * @param {string} nextLink The url to the next Azure Storage account page.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.storageAccountListNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var storageAccountInstance = {};
              result.value.push(storageAccountInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                storageAccountInstance.name = nameInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                storageAccountInstance.properties = propertiesInstance;
                
                var accessKeyValue = propertiesValue['accessKey'];
                if (accessKeyValue !== null && accessKeyValue !== undefined) {
                  var accessKeyInstance = accessKeyValue;
                  propertiesInstance.accessKey = accessKeyInstance;
                }
                
                var suffixValue = propertiesValue['suffix'];
                if (suffixValue !== null && suffixValue !== undefined) {
                  var suffixInstance = suffixValue;
                  propertiesInstance.suffix = suffixInstance;
                }
              }
            }
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            result.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the next page of the Azure Storage Container objects within the
   * specified Azure Storage account, if any.
   * 
   * @param {string} nextLink The url to the next Azure Storage Container page.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.storageContainersListNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + nextLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var blobContainerInstance = {};
              result.value.push(blobContainerInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                blobContainerInstance.name = nameInstance;
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                blobContainerInstance.id = idInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                blobContainerInstance.type = typeInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                blobContainerInstance.properties = propertiesInstance;
                
                var lastModifiedTimeValue = propertiesValue['lastModifiedTime'];
                if (lastModifiedTimeValue !== null && lastModifiedTimeValue !== undefined) {
                  var lastModifiedTimeInstance = lastModifiedTimeValue;
                  propertiesInstance.lastModifiedTime = lastModifiedTimeInstance;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates the Data Lake Analytics account object specified by the
   * accountName with the contents of the account object.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {DataLakeAnalyticsAccountCreateOrUpdateParameters} parameters
   * Parameters supplied to the update Data Lake Analytics account operation.
   * 
   * @param {DataLakeAnalyticsAccount} parameters.dataLakeAnalyticsAccount Gets
   * or sets the account object that is being created.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.location] Gets or
   * sets the account regional location.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.name] Gets or sets
   * the account name.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.type] Gets or sets
   * the namespace and type of the account.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.id] Gets or sets the
   * account subscription ID.
   * 
   * @param {object} [parameters.dataLakeAnalyticsAccount.tags] Gets or sets
   * the value of custom properties.
   * 
   * @param {DataLakeAnalyticsAccountProperties}
   * [parameters.dataLakeAnalyticsAccount.properties] Gets or sets the
   * properties defined by Data Lake Analytics all properties are specific to
   * each resource provider.
   * 
   * @param {DataLakeAnalyticsAccountStatus}
   * [parameters.dataLakeAnalyticsAccount.properties.provisioningState] Gets
   * or sets the provisioning status of the Data Lake Analytics account.
   * 
   * @param {DataLakeAnalyticsAccountState}
   * [parameters.dataLakeAnalyticsAccount.properties.state] Gets or sets the
   * state of the Data Lake Analytics account.
   * 
   * @param {string}
   * [parameters.dataLakeAnalyticsAccount.properties.defaultDataLakeStoreAccount]
   * Gets or sets the default data lake storage account associated with this
   * Data Lake Analytics account.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxDegreeOfParallelism]
   * Gets or sets the maximum supported degree of parallelism for this acocunt.
   * 
   * @param {number}
   * [parameters.dataLakeAnalyticsAccount.properties.maxJobCount] Gets or sets
   * the maximum supported jobs running under the account at the same time.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.dataLakeStoreAccounts]
   * Gets or sets the list of Data Lake storage accounts associated with this
   * account.
   * 
   * @param {ICollection}
   * [parameters.dataLakeAnalyticsAccount.properties.storageAccounts] Gets or
   * sets the list of Azure Blob storage accounts associated with this account.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.creationTime] Gets or
   * sets the account creation time.
   * 
   * @param {date}
   * [parameters.dataLakeAnalyticsAccount.properties.lastModifiedTime] Gets or
   * sets the account last modified time.
   * 
   * @param {string} [parameters.dataLakeAnalyticsAccount.properties.endpoint]
   * Gets or sets the full CName endpoint for this account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.update = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.dataLakeAnalyticsAccount.beginUpdate(resourceGroupName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Updates the specified storage account. This is currently only supported
   * for Azure blob accounts to update their access keys and suffix.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} accountName The Data Lake Analytics account name to modify
   * storage accounts in
   * 
   * @param {string} storageAccountName The Azure Storage account to modify
   * 
   * @param {AddStorageAccountParameters} parameters The parameters containing
   * the access key and suffix to update the storage account with.
   * 
   * @param {StorageAccountProperties} [parameters.properties] Gets or sets the
   * properties for the Azure Storage account being added.
   * 
   * @param {string} [parameters.properties.accessKey] Gets or sets the access
   * key associated with this Azure Storage account that will be used to
   * connect to it.
   * 
   * @param {string} [parameters.properties.suffix] Gets or sets the optional
   * suffix for the Data Lake account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DataLakeAnalyticsAccountOperations.prototype.updateStorageAccount = function(resourceGroupName, accountName, storageAccountName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccountName === null || storageAccountName === undefined) {
      return callback(new Error('storageAccountName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.DataLakeAnalytics';
    url2 = url2 + '/';
    url2 = url2 + 'accounts';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/StorageAccounts/';
    url2 = url2 + encodeURIComponent(storageAccountName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.Analytics 0.9.5-preview' + this.client.userAgentSuffix;
    }
    if (uuid() !== null && uuid() !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = uuid();
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var addStorageAccountParametersValue = {};
    requestDoc = addStorageAccountParametersValue;
    
    if (parameters.properties !== null && parameters.properties !== undefined) {
      var propertiesValue = {};
      addStorageAccountParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.accessKey !== null && parameters.properties.accessKey !== undefined) {
        propertiesValue['accessKey'] = parameters.properties.accessKey;
      }
      
      if (parameters.properties.suffix !== null && parameters.properties.suffix !== undefined) {
        propertiesValue['suffix'] = parameters.properties.suffix;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return DataLakeAnalyticsAccountOperations;
})();
