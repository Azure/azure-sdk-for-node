/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var RecoveryServicesManagementClient = ( /** @lends RecoveryServicesManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the RecoveryServicesManagementClient class.
   * @constructor
   * 
   * @param {string} resourceNamespace
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function RecoveryServicesManagementClient(resourceNamespace, credentials, baseUri, filters) {
    if (resourceNamespace === null || resourceNamespace === undefined) {
      throw new Error('resourceNamespace cannot be null.');
    }
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    RecoveryServicesManagementClient['super_'].call(this, credentials, filters);
    
    this.resourceNamespace = resourceNamespace;
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-01-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [ReplicationUsagesOperations](-ReplicationUsagesOperations.html) object.
     * @type {object}
     */
    this.replicationUsages = new ReplicationUsagesOperations(this);
    /**
     * Provides an instance of the
     * [ResourceGroupsOperations](-ResourceGroupsOperations.html) object.
     * @type {object}
     */
    this.resourceGroup = new ResourceGroupsOperations(this);
    /**
     * Provides an instance of the [StampOperations](-StampOperations.html)
     * object.
     * @type {object}
     */
    this.allocatedStamps = new StampOperations(this);
    /**
     * Provides an instance of the
     * [VaultExtendedInfoOperations](-VaultExtendedInfoOperations.html) object.
     * @type {object}
     */
    this.vaultExtendedInfo = new VaultExtendedInfoOperations(this);
    /**
     * Provides an instance of the [VaultOperations](-VaultOperations.html)
     * object.
     * @type {object}
     */
    this.vaults = new VaultOperations(this);
    /**
     * Provides an instance of the
     * [VaultUsageOperations](-VaultUsageOperations.html) object.
     * @type {object}
     */
    this.vaultUsage = new VaultUsageOperations(this);
  }
  
  util.inherits(RecoveryServicesManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of thespecified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
   * more information)
   * 
   * @param {string} requestId The request ID for the request you wish to
   * track. The request ID is returned in the x-ms-request-id response header
   * for every request.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RecoveryServicesManagementClient.prototype.getOperationStatus = function(requestId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (requestId === null || requestId === undefined) {
      return callback(new Error('requestId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.credentials.subscriptionId !== null && this.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.credentials.subscriptionId);
    }
    url2 = url2 + '/operations/';
    url2 = url2 + encodeURIComponent(requestId);
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        var recoveryServicesOperationStatusResponseValue = responseDoc['RecoveryServicesOperationStatusResponse'];
        if (recoveryServicesOperationStatusResponseValue !== null && recoveryServicesOperationStatusResponseValue !== undefined) {
          var recoveryServicesOperationStatusResponseInstance = {};
          
          var idValue = recoveryServicesOperationStatusResponseValue['ID'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            recoveryServicesOperationStatusResponseInstance.id = idInstance;
          }
          
          var statusValue = recoveryServicesOperationStatusResponseValue['Status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = statusValue;
            recoveryServicesOperationStatusResponseInstance.status = statusInstance;
          }
          
          var httpStatusCodeValue = recoveryServicesOperationStatusResponseValue['HttpStatusCode'];
          if (httpStatusCodeValue !== null && httpStatusCodeValue !== undefined) {
            var httpStatusCodeInstance = httpStatusCodeValue;
            recoveryServicesOperationStatusResponseInstance.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorValue = recoveryServicesOperationStatusResponseValue['Error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = {};
            recoveryServicesOperationStatusResponseInstance.error = errorInstance;
            
            var codeValue = errorValue['Code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['Message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RecoveryServicesManagementClient;
})();
exports.RecoveryServicesManagementClient = RecoveryServicesManagementClient;

var ReplicationUsagesOperations = ( /** @lends ReplicationUsagesOperations */ function() {
  /**
   * @class
   * Definition of vault usage operations for the Recovery Services extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [RecoveryServicesManagementClient] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient}.
   * See [replicationUsages] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient#replicationUsages}.
   * Initializes a new instance of the ReplicationUsagesOperations class.
   * @constructor
   * 
   * @param {RecoveryServicesManagementClient} client Reference to the service
   * client.
   */
  function ReplicationUsagesOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the replication usages of a vault.
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {string} resourceName The name of the resource.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ReplicationUsagesOperations.prototype.get = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/replicationUsages';
    var queryParameters = [];
    queryParameters.push('api-version=2015-11-10');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var replicationUsagesInstance = {};
          result.replicationVaultUsages = replicationUsagesInstance;
          
          var monitoringSummaryValue = responseDoc['monitoringSummary'];
          if (monitoringSummaryValue !== null && monitoringSummaryValue !== undefined) {
            var monitoringSummaryInstance = {};
            replicationUsagesInstance.monitoringSummary = monitoringSummaryInstance;
            
            var unHealthyVmCountValue = monitoringSummaryValue['unHealthyVmCount'];
            if (unHealthyVmCountValue !== null && unHealthyVmCountValue !== undefined) {
              var unHealthyVmCountInstance = unHealthyVmCountValue;
              monitoringSummaryInstance.unHealthyVmCount = unHealthyVmCountInstance;
            }
            
            var unHealthyProviderCountValue = monitoringSummaryValue['unHealthyProviderCount'];
            if (unHealthyProviderCountValue !== null && unHealthyProviderCountValue !== undefined) {
              var unHealthyProviderCountInstance = unHealthyProviderCountValue;
              monitoringSummaryInstance.unHealthyProviderCount = unHealthyProviderCountInstance;
            }
            
            var eventsCountValue = monitoringSummaryValue['eventsCount'];
            if (eventsCountValue !== null && eventsCountValue !== undefined) {
              var eventsCountInstance = eventsCountValue;
              monitoringSummaryInstance.eventsCount = eventsCountInstance;
            }
          }
          
          var jobsSummaryValue = responseDoc['jobsSummary'];
          if (jobsSummaryValue !== null && jobsSummaryValue !== undefined) {
            var jobsSummaryInstance = {};
            replicationUsagesInstance.jobsSummary = jobsSummaryInstance;
            
            var failedJobsValue = jobsSummaryValue['failedJobs'];
            if (failedJobsValue !== null && failedJobsValue !== undefined) {
              var failedJobsInstance = failedJobsValue;
              jobsSummaryInstance.failedJobs = failedJobsInstance;
            }
            
            var suspendedJobsValue = jobsSummaryValue['suspendedJobs'];
            if (suspendedJobsValue !== null && suspendedJobsValue !== undefined) {
              var suspendedJobsInstance = suspendedJobsValue;
              jobsSummaryInstance.suspendedJobs = suspendedJobsInstance;
            }
            
            var inProgressJobsValue = jobsSummaryValue['inProgressJobs'];
            if (inProgressJobsValue !== null && inProgressJobsValue !== undefined) {
              var inProgressJobsInstance = inProgressJobsValue;
              jobsSummaryInstance.inProgressJobs = inProgressJobsInstance;
            }
          }
          
          var protectedItemCountValue = responseDoc['protectedItemCount'];
          if (protectedItemCountValue !== null && protectedItemCountValue !== undefined) {
            var protectedItemCountInstance = protectedItemCountValue;
            replicationUsagesInstance.protectedItemCount = protectedItemCountInstance;
          }
          
          var recoveryPlanCountValue = responseDoc['recoveryPlanCount'];
          if (recoveryPlanCountValue !== null && recoveryPlanCountValue !== undefined) {
            var recoveryPlanCountInstance = recoveryPlanCountValue;
            replicationUsagesInstance.recoveryPlanCount = recoveryPlanCountInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ReplicationUsagesOperations;
})();

var ResourceGroupsOperations = ( /** @lends ResourceGroupsOperations */ function() {
  /**
   * @class
   * Definition of cloud service operations for the Recovery services extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [RecoveryServicesManagementClient] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient}.
   * See [resourceGroup] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient#resourceGroup}.
   * Initializes a new instance of the ResourceGroupsOperations class.
   * @constructor
   * 
   * @param {RecoveryServicesManagementClient} client Reference to the service
   * client.
   */
  function ResourceGroupsOperations(client) {
    this.client = client;
  }
  
  /**
   * Retrieve a list of Resource Groups
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupsOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups';
    var queryParameters = [];
    queryParameters.push('api-version=2015-01-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { resourceGroups: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var resourceGroupInstance = { tags: {} };
              result.resourceGroups.push(resourceGroupInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                resourceGroupInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                resourceGroupInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                resourceGroupInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                resourceGroupInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                resourceGroupInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  resourceGroupInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ResourceGroupsOperations;
})();

var StampOperations = ( /** @lends StampOperations */ function() {
  /**
   * @class
   * Definition of allocated stamp operations for the Recovery Services
   * extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [RecoveryServicesManagementClient] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient}.
   * See [allocatedStamps] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient#allocatedStamps}.
   * Initializes a new instance of the StampOperations class.
   * @constructor
   * 
   * @param {RecoveryServicesManagementClient} client Reference to the service
   * client.
   */
  function StampOperations(client) {
    this.client = client;
  }
  
  /**
   * Retrieve a list of allocated stamps.
   * 
   * @param {string} region Region of the stamp.
   * 
   * @param {string} provisioningApiVersion Provisioning api version.
   * 
   * @param {StampQueryParameter} parameters Stamp query parameter.
   * 
   * @param {string} parameters.stampType Stamp type that needs to be allocated.
   * 
   * @param {string} [parameters.preferredStampId] Preferred stamp identifier
   * (a GUID).
   * 
   * @param {string} [parameters.lowerBoundStampVersion] Lower bound on stamp
   * version to be allocated.
   * 
   * @param {string} [parameters.upperBoundStampVersion] Upper bound on stamp
   * version to be allocated.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StampOperations.prototype.list = function(region, provisioningApiVersion, parameters, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (region === null || region === undefined) {
      return callback(new Error('region cannot be null.'));
    }
    if (provisioningApiVersion === null || provisioningApiVersion === undefined) {
      return callback(new Error('provisioningApiVersion cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.stampType === null || parameters.stampType === undefined) {
      return callback(new Error('parameters.stampType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/locations/';
    url2 = url2 + encodeURIComponent(region);
    url2 = url2 + '/allocatedStamp';
    var queryParameters = [];
    var odataFilter = [];
    if (parameters.toQueryString() !== null && parameters.toQueryString() !== undefined) {
      odataFilter.push(encodeURIComponent(parameters.toQueryString().toString()));
    }
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    queryParameters.push('api-version=' + encodeURIComponent(provisioningApiVersion));
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { stamps: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var stampInstance = {};
              result.stamps.push(stampInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                stampInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                stampInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                stampInstance.type = typeInstance;
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                stampInstance.properties = propertiesInstance;
                
                var versionValue = propertiesValue['version'];
                if (versionValue !== null && versionValue !== undefined) {
                  var versionInstance = versionValue;
                  propertiesInstance.version = versionInstance;
                }
                
                var uriValue = propertiesValue['uri'];
                if (uriValue !== null && uriValue !== undefined) {
                  var uriInstance = uriValue;
                  propertiesInstance.uri = uriInstance;
                }
                
                var stampTypeValue = propertiesValue['stampType'];
                if (stampTypeValue !== null && stampTypeValue !== undefined) {
                  var stampTypeInstance = stampTypeValue;
                  propertiesInstance.stampType = stampTypeInstance;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return StampOperations;
})();

var VaultExtendedInfoOperations = ( /** @lends VaultExtendedInfoOperations */ function() {
  /**
   * @class
   * Definition of vault extended info operations for the Recovery Services
   * extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [RecoveryServicesManagementClient] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient}.
   * See [vaultExtendedInfo] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient#vaultExtendedInfo}.
   * Initializes a new instance of the VaultExtendedInfoOperations class.
   * @constructor
   * 
   * @param {RecoveryServicesManagementClient} client Reference to the service
   * client.
   */
  function VaultExtendedInfoOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the vault extended info.
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {string} resourceName The name of the resource.
   * 
   * @param {ResourceExtendedInformationArgs} extendedInfoArgs Create resource
   * extended info input parameters.
   * 
   * @param {ResourceExtendedInfoProperties} extendedInfoArgs.properties
   * Contract version for the entity.
   * 
   * @param {string} [extendedInfoArgs.properties.integrityKey] Integrity key.
   * 
   * @param {string} [extendedInfoArgs.properties.algorithm] Algorithm.
   * 
   * @param {string} [extendedInfoArgs.properties.encryptionKey] Encryption
   * key.
   * 
   * @param {string} [extendedInfoArgs.properties.encryptionKeyThumbprint]
   * Encryption key thumbprint.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultExtendedInfoOperations.prototype.createExtendedInfo = function(resourceGroupName, resourceName, extendedInfoArgs, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (extendedInfoArgs === null || extendedInfoArgs === undefined) {
      return callback(new Error('extendedInfoArgs cannot be null.'));
    }
    if (extendedInfoArgs.properties === null || extendedInfoArgs.properties === undefined) {
      return callback(new Error('extendedInfoArgs.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/extendedInformation/vaultExtendedInfo';
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var resourceExtendedInformationArgsValue = {};
    requestDoc = resourceExtendedInformationArgsValue;
    
    var propertiesValue = {};
    resourceExtendedInformationArgsValue['properties'] = propertiesValue;
    
    if (extendedInfoArgs.properties.integrityKey !== null && extendedInfoArgs.properties.integrityKey !== undefined) {
      propertiesValue['integrityKey'] = extendedInfoArgs.properties.integrityKey;
    }
    
    if (extendedInfoArgs.properties.algorithm !== null && extendedInfoArgs.properties.algorithm !== undefined) {
      propertiesValue['algorithm'] = extendedInfoArgs.properties.algorithm;
    }
    
    if (extendedInfoArgs.properties.encryptionKey !== null && extendedInfoArgs.properties.encryptionKey !== undefined) {
      propertiesValue['encryptionKey'] = extendedInfoArgs.properties.encryptionKey;
    }
    
    if (extendedInfoArgs.properties.encryptionKeyThumbprint !== null && extendedInfoArgs.properties.encryptionKeyThumbprint !== undefined) {
      propertiesValue['encryptionKeyThumbprint'] = extendedInfoArgs.properties.encryptionKeyThumbprint;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode >= 400) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the vault extended info.
   * 
   * @param {string} resourceGroupName The name of the resource group
   * containing the job collection.
   * 
   * @param {string} resourceName The name of the resource.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultExtendedInfoOperations.prototype.getExtendedInfo = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/extendedInformation/vaultExtendedInfo';
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var extendedInformationInstance = { tags: {} };
          result.resourceExtendedInformation = extendedInformationInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            extendedInformationInstance.properties = propertiesInstance;
            
            var integrityKeyValue = propertiesValue['integrityKey'];
            if (integrityKeyValue !== null && integrityKeyValue !== undefined) {
              var integrityKeyInstance = integrityKeyValue;
              propertiesInstance.integrityKey = integrityKeyInstance;
            }
            
            var algorithmValue = propertiesValue['algorithm'];
            if (algorithmValue !== null && algorithmValue !== undefined) {
              var algorithmInstance = algorithmValue;
              propertiesInstance.algorithm = algorithmInstance;
            }
            
            var encryptionKeyValue = propertiesValue['encryptionKey'];
            if (encryptionKeyValue !== null && encryptionKeyValue !== undefined) {
              var encryptionKeyInstance = encryptionKeyValue;
              propertiesInstance.encryptionKey = encryptionKeyInstance;
            }
            
            var encryptionKeyThumbprintValue = propertiesValue['encryptionKeyThumbprint'];
            if (encryptionKeyThumbprintValue !== null && encryptionKeyThumbprintValue !== undefined) {
              var encryptionKeyThumbprintInstance = encryptionKeyThumbprintValue;
              propertiesInstance.encryptionKeyThumbprint = encryptionKeyThumbprintInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            extendedInformationInstance.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            extendedInformationInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            extendedInformationInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            extendedInformationInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              extendedInformationInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Update the vault extended info.
   * 
   * @param {string} resourceGroupName The name of the resource group
   * containing the vault.
   * 
   * @param {string} resourceName The name of the resource.
   * 
   * @param {ResourceExtendedInformationArgs} extendedInfoArgs Update resource
   * extended info input parameters.
   * 
   * @param {ResourceExtendedInfoProperties} extendedInfoArgs.properties
   * Contract version for the entity.
   * 
   * @param {string} [extendedInfoArgs.properties.integrityKey] Integrity key.
   * 
   * @param {string} [extendedInfoArgs.properties.algorithm] Algorithm.
   * 
   * @param {string} [extendedInfoArgs.properties.encryptionKey] Encryption
   * key.
   * 
   * @param {string} [extendedInfoArgs.properties.encryptionKeyThumbprint]
   * Encryption key thumbprint.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultExtendedInfoOperations.prototype.updateExtendedInfo = function(resourceGroupName, resourceName, extendedInfoArgs, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (extendedInfoArgs === null || extendedInfoArgs === undefined) {
      return callback(new Error('extendedInfoArgs cannot be null.'));
    }
    if (extendedInfoArgs.properties === null || extendedInfoArgs.properties === undefined) {
      return callback(new Error('extendedInfoArgs.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/extendedInformation/vaultExtendedInfo';
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var resourceExtendedInformationArgsValue = {};
    requestDoc = resourceExtendedInformationArgsValue;
    
    var propertiesValue = {};
    resourceExtendedInformationArgsValue['properties'] = propertiesValue;
    
    if (extendedInfoArgs.properties.integrityKey !== null && extendedInfoArgs.properties.integrityKey !== undefined) {
      propertiesValue['integrityKey'] = extendedInfoArgs.properties.integrityKey;
    }
    
    if (extendedInfoArgs.properties.algorithm !== null && extendedInfoArgs.properties.algorithm !== undefined) {
      propertiesValue['algorithm'] = extendedInfoArgs.properties.algorithm;
    }
    
    if (extendedInfoArgs.properties.encryptionKey !== null && extendedInfoArgs.properties.encryptionKey !== undefined) {
      propertiesValue['encryptionKey'] = extendedInfoArgs.properties.encryptionKey;
    }
    
    if (extendedInfoArgs.properties.encryptionKeyThumbprint !== null && extendedInfoArgs.properties.encryptionKeyThumbprint !== undefined) {
      propertiesValue['encryptionKeyThumbprint'] = extendedInfoArgs.properties.encryptionKeyThumbprint;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var extendedInformationInstance = { tags: {} };
          result.resourceExtendedInformation = extendedInformationInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            extendedInformationInstance.properties = propertiesInstance;
            
            var integrityKeyValue = propertiesValue2['integrityKey'];
            if (integrityKeyValue !== null && integrityKeyValue !== undefined) {
              var integrityKeyInstance = integrityKeyValue;
              propertiesInstance.integrityKey = integrityKeyInstance;
            }
            
            var algorithmValue = propertiesValue2['algorithm'];
            if (algorithmValue !== null && algorithmValue !== undefined) {
              var algorithmInstance = algorithmValue;
              propertiesInstance.algorithm = algorithmInstance;
            }
            
            var encryptionKeyValue = propertiesValue2['encryptionKey'];
            if (encryptionKeyValue !== null && encryptionKeyValue !== undefined) {
              var encryptionKeyInstance = encryptionKeyValue;
              propertiesInstance.encryptionKey = encryptionKeyInstance;
            }
            
            var encryptionKeyThumbprintValue = propertiesValue2['encryptionKeyThumbprint'];
            if (encryptionKeyThumbprintValue !== null && encryptionKeyThumbprintValue !== undefined) {
              var encryptionKeyThumbprintInstance = encryptionKeyThumbprintValue;
              propertiesInstance.encryptionKeyThumbprint = encryptionKeyThumbprintInstance;
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            extendedInformationInstance.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            extendedInformationInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            extendedInformationInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            extendedInformationInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              extendedInformationInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the vault extended info.
   * 
   * @param {string} resourceGroupName The name of the resource group
   * containing the job collection.
   * 
   * @param {string} resourceName The name of the resource.
   * 
   * @param {CertificateArgs} parameters Upload Vault Certificate input
   * parameters.
   * 
   * @param {object} parameters.properties Properties of the certificate.
   * 
   * @param {string} certFriendlyName Certificate friendly name
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultExtendedInfoOperations.prototype.uploadCertificate = function(resourceGroupName, resourceName, parameters, certFriendlyName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    if (certFriendlyName === null || certFriendlyName === undefined) {
      return callback(new Error('certFriendlyName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/certificates/';
    url2 = url2 + encodeURIComponent(certFriendlyName);
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var parametersValue = {};
    requestDoc = parametersValue;
    
    if (parameters.properties !== null && parameters.properties !== undefined) {
      var propertiesDictionary = {};
      for (var propertiesKey in parameters.properties) {
        var propertiesValue = parameters.properties[propertiesKey];
        propertiesDictionary[propertiesKey] = propertiesValue;
      }
      parametersValue['properties'] = propertiesDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            result.properties = propertiesInstance;
            
            var friendlyNameValue = propertiesValue2['friendlyName'];
            if (friendlyNameValue !== null && friendlyNameValue !== undefined) {
              var friendlyNameInstance = friendlyNameValue;
              propertiesInstance.friendlyName = friendlyNameInstance;
            }
            
            var globalAcsHostNameValue = propertiesValue2['globalAcsHostName'];
            if (globalAcsHostNameValue !== null && globalAcsHostNameValue !== undefined) {
              var globalAcsHostNameInstance = globalAcsHostNameValue;
              propertiesInstance.globalAcsHostName = globalAcsHostNameInstance;
            }
            
            var globalAcsNamespaceValue = propertiesValue2['globalAcsNamespace'];
            if (globalAcsNamespaceValue !== null && globalAcsNamespaceValue !== undefined) {
              var globalAcsNamespaceInstance = globalAcsNamespaceValue;
              propertiesInstance.globalAcsNamespace = globalAcsNamespaceInstance;
            }
            
            var globalAcsRPRealmValue = propertiesValue2['globalAcsRPRealm'];
            if (globalAcsRPRealmValue !== null && globalAcsRPRealmValue !== undefined) {
              var globalAcsRPRealmInstance = globalAcsRPRealmValue;
              propertiesInstance.globalAcsRPRealm = globalAcsRPRealmInstance;
            }
            
            var resourceIdValue = propertiesValue2['resourceId'];
            if (resourceIdValue !== null && resourceIdValue !== undefined) {
              var resourceIdInstance = resourceIdValue;
              propertiesInstance.resourceId = resourceIdInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return VaultExtendedInfoOperations;
})();

var VaultOperations = ( /** @lends VaultOperations */ function() {
  /**
   * @class
   * Definition of vault operations for the Recovery Services extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [RecoveryServicesManagementClient] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient}.
   * See [vaults] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient#vaults}.
   * Initializes a new instance of the VaultOperations class.
   * @constructor
   * 
   * @param {RecoveryServicesManagementClient} client Reference to the service
   * client.
   */
  function VaultOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates a vault
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {string} vaultName The name of the vault to create.
   * 
   * @param {VaultCreateArgs} vaultCreationInput Vault object to be created
   * 
   * @param {string} [vaultCreationInput.location] Label for the vault
   * 
   * @param {VaultSku} [vaultCreationInput.sku] Sku
   * 
   * @param {string} [vaultCreationInput.sku.name] Name
   * 
   * @param {VaultProperties} [vaultCreationInput.properties] properties
   * 
   * @param {string} [vaultCreationInput.properties.provisioningState]
   * Provisioning State
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.beginCreating = function(resourceGroupName, vaultName, vaultCreationInput, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vaultName === null || vaultName === undefined) {
      return callback(new Error('vaultName cannot be null.'));
    }
    if (vaultCreationInput === null || vaultCreationInput === undefined) {
      return callback(new Error('vaultCreationInput cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vaultName);
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json; charset=utf-8';
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var resourceValue = {};
    requestDoc = resourceValue;
    
    if (vaultCreationInput.location !== null && vaultCreationInput.location !== undefined) {
      resourceValue['location'] = vaultCreationInput.location;
    }
    
    if (vaultCreationInput.sku !== null && vaultCreationInput.sku !== undefined) {
      var skuValue = {};
      resourceValue['sku'] = skuValue;
      
      if (vaultCreationInput.sku.name !== null && vaultCreationInput.sku.name !== undefined) {
        skuValue['name'] = vaultCreationInput.sku.name;
      }
    }
    
    if (vaultCreationInput.properties !== null && vaultCreationInput.properties !== undefined) {
      var propertiesValue = {};
      resourceValue['properties'] = propertiesValue;
      
      if (vaultCreationInput.properties.provisioningState !== null && vaultCreationInput.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = vaultCreationInput.properties.provisioningState;
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201 || statusCode === 202) {
        var responseContent = body;
        result = { tags: {} };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            result.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            result.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            result.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            result.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              result.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            result.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            result.eTag = etagInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.eTag = response.headers['etag'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes a vault
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {string} vaultName The name of the vault to delete.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.beginDeleting = function(resourceGroupName, vaultName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vaultName === null || vaultName === undefined) {
      return callback(new Error('vaultName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vaultName);
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates a vault
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {string} [vaultName] The name of the vault to create.
   * 
   * @param {VaultCreateArgs} vaultCreationInput Vault object to be created
   * 
   * @param {string} [vaultCreationInput.location] Label for the vault
   * 
   * @param {VaultSku} [vaultCreationInput.sku] Sku
   * 
   * @param {string} [vaultCreationInput.sku.name] Name
   * 
   * @param {VaultProperties} [vaultCreationInput.properties] properties
   * 
   * @param {string} [vaultCreationInput.properties.provisioningState]
   * Provisioning State
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.create = function(resourceGroupName, vaultName, vaultCreationInput, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.vaults.beginCreating(resourceGroupName, vaultName, vaultCreationInput, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 15;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Succeeded') {
                  if (result2.error !== null && result2.error !== undefined) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.error = new Error();
                    ex.error.code = result2.error.code;
                    ex.error.message = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                result2.eTag = result.eTag;
                return callback(null, result2);
              } else {
                delayInSeconds = 10;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Deletes a vault
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {string} vaultName The name of the vault to delete.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.deleteMethod = function(resourceGroupName, vaultName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.vaults.beginDeleting(resourceGroupName, vaultName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = 15;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Succeeded') {
                  if (result2.error !== null && result2.error !== undefined) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.error = new Error();
                    ex.error.code = result2.error.code;
                    ex.error.message = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 10;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Get the Vault details.
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {string} resourceName The name of the resource.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.get = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var vaultInstance = { tags: {} };
          result.vault = vaultInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            vaultInstance.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            vaultInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            vaultInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            vaultInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              vaultInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            vaultInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var eTagValue = responseDoc['eTag'];
          if (eTagValue !== null && eTagValue !== undefined) {
            var eTagInstance = eTagValue;
            vaultInstance.eTag = eTagInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Fetches resource storage config.
   * 
   * @param {string} resourceGroupName The name of resource group to which
   * vault belongs
   * 
   * @param {string} resourceName The name of the vault
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.getResourceStorageConfig = function(resourceGroupName, resourceName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/backupstorageconfig/vaultstorageconfig';
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            result.id = idInstance;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            result.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            result.type = typeInstance;
          }
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            result.properties = propertiesInstance;
            
            var storageTypeValue = propertiesValue['storageType'];
            if (storageTypeValue !== null && storageTypeValue !== undefined) {
              var storageTypeInstance = storageTypeValue;
              propertiesInstance.storageType = storageTypeInstance;
            }
            
            var storageTypeStateValue = propertiesValue['storageTypeState'];
            if (storageTypeStateValue !== null && storageTypeStateValue !== undefined) {
              var storageTypeStateInstance = storageTypeStateValue;
              propertiesInstance.storageTypeState = storageTypeStateInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieve a list of Vaults.
   * 
   * @param {string} resourceGroupName The name of the Resource group/ Cloud
   * service containing the resource/ Vault collection.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.list = function(resourceGroupName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { vaults: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var vaultInstance = { tags: {} };
              result.vaults.push(vaultInstance);
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                vaultInstance.id = idInstance;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                vaultInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                vaultInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                vaultInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  vaultInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                vaultInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var eTagValue = valueValue['eTag'];
              if (eTagValue !== null && eTagValue !== undefined) {
                var eTagInstance = eTagValue;
                vaultInstance.eTag = eTagInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  /**
   * Updates vault storage model type.
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} resourceName
   * 
   * @param {UpdateVaultStorageTypeRequest} updateVaultStorageTypeRequest
   * Update Vault Storage Type Request
   * 
   * @param {StorageTypeProperties} updateVaultStorageTypeRequest.properties
   * Storage type properties.
   * 
   * @param {string}
   * [updateVaultStorageTypeRequest.properties.storageModelType] Gets or sets
   * the storage model type.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultOperations.prototype.updateStorageType = function(resourceGroupName, resourceName, updateVaultStorageTypeRequest, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceName === null || resourceName === undefined) {
      return callback(new Error('resourceName cannot be null.'));
    }
    if (updateVaultStorageTypeRequest === null || updateVaultStorageTypeRequest === undefined) {
      return callback(new Error('updateVaultStorageTypeRequest cannot be null.'));
    }
    if (updateVaultStorageTypeRequest.properties === null || updateVaultStorageTypeRequest.properties === undefined) {
      return callback(new Error('updateVaultStorageTypeRequest.properties cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(resourceName);
    url2 = url2 + '/backupstorageconfig/vaultstorageconfig';
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept-Language'] = 'en-us';
    httpRequest.headers['Content-Type'] = 'application/json';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var updateVaultStorageTypeRequestValue = {};
    requestDoc = updateVaultStorageTypeRequestValue;
    
    var propertiesValue = {};
    updateVaultStorageTypeRequestValue['properties'] = propertiesValue;
    
    if (updateVaultStorageTypeRequest.properties.storageModelType !== null && updateVaultStorageTypeRequest.properties.storageModelType !== undefined) {
      propertiesValue['storageModelType'] = updateVaultStorageTypeRequest.properties.storageModelType;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return VaultOperations;
})();

var VaultUsageOperations = ( /** @lends VaultUsageOperations */ function() {
  /**
   * @class
   * Definition of vault operations for the Recovery Services extension.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [RecoveryServicesManagementClient] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient}.
   * See [vaultUsage] {@link
   * RecoveryServicesManagementClient~RecoveryServicesManagementClient#vaultUsage}.
   * Initializes a new instance of the VaultUsageOperations class.
   * @constructor
   * 
   * @param {RecoveryServicesManagementClient} client Reference to the service
   * client.
   */
  function VaultUsageOperations(client) {
    this.client = client;
  }
  
  /**
   * Get the Vault Usage.
   * 
   * @param {string} resourceGroupName The name of the (resource group?) cloud
   * service containing the vault collection.
   * 
   * @param {string} vaultName The name of the vault to get usage.
   * 
   * @param {CustomRequestHeaders} [customRequestHeaders] Request header
   * parameters.
   * 
   * @param {string} [customRequestHeaders.agentAuthenticationHeader] String
   * representing a unique code which is used to validate that the request is
   * originated by an authenticated client.
   * 
   * @param {string} [customRequestHeaders.clientRequestId] ClientRequestId is
   * a unique ID for every request to Azure Recovery Services. It is useful
   * when diagnosing failures in API calls.
   * 
   * @param {string} [customRequestHeaders.culture] Language to be used for
   * current request. See
   * https://msdn.microsoft.com/en-us/library/ee825488%28v=cs.20%29.aspx for
   * language codes.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VaultUsageOperations.prototype.list = function(resourceGroupName, vaultName, customRequestHeaders, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vaultName === null || vaultName === undefined) {
      return callback(new Error('vaultName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/Subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + encodeURIComponent(this.client.resourceNamespace);
    url2 = url2 + '/';
    url2 = url2 + 'vaults';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vaultName);
    url2 = url2 + '/usages';
    var queryParameters = [];
    queryParameters.push('api-version=2016-05-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    if (customRequestHeaders.culture !== null && customRequestHeaders.culture !== undefined) {
      httpRequest.headers['Accept-Language'] = customRequestHeaders.culture;
    }
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    if (customRequestHeaders.clientRequestId !== null && customRequestHeaders.clientRequestId !== undefined) {
      httpRequest.headers['x-ms-client-request-id'] = customRequestHeaders.clientRequestId;
    }
    httpRequest.headers['x-ms-version'] = '2015-01-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var usageInstance = {};
              result.value.push(usageInstance);
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = {};
                usageInstance.name = nameInstance;
                
                var valueValue2 = nameValue['value'];
                if (valueValue2 !== null && valueValue2 !== undefined) {
                  var valueInstance = valueValue2;
                  nameInstance.value = valueInstance;
                }
                
                var localizedValueValue = nameValue['localizedValue'];
                if (localizedValueValue !== null && localizedValueValue !== undefined) {
                  var localizedValueInstance = localizedValueValue;
                  nameInstance.localizedValue = localizedValueInstance;
                }
              }
              
              var unitValue = valueValue['unit'];
              if (unitValue !== null && unitValue !== undefined) {
                var unitInstance = unitValue;
                usageInstance.unit = unitInstance;
              }
              
              var currentValueValue = valueValue['currentValue'];
              if (currentValueValue !== null && currentValueValue !== undefined) {
                var currentValueInstance = currentValueValue;
                usageInstance.currentValue = currentValueInstance;
              }
              
              var limitValue = valueValue['limit'];
              if (limitValue !== null && limitValue !== undefined) {
                var limitInstance = limitValue;
                usageInstance.limit = limitInstance;
              }
              
              var nextResetTimeValue = valueValue['nextResetTime'];
              if (nextResetTimeValue !== null && nextResetTimeValue !== undefined) {
                var nextResetTimeInstance = nextResetTimeValue;
                usageInstance.nextResetTime = nextResetTimeInstance;
              }
              
              var quotaPeriodValue = valueValue['quotaPeriod'];
              if (quotaPeriodValue !== null && quotaPeriodValue !== undefined) {
                var quotaPeriodInstance = quotaPeriodValue;
                usageInstance.quotaPeriod = quotaPeriodInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      
      return callback(null, result);
    });
  };
  
  return VaultUsageOperations;
})();
