/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var ServiceClient = msRest.ServiceClient;

var models = require('./models');
var operations = require('./operations');

/**
 * @class
 * Initializes a new instance of the ServiceFabricClient class.
 * @constructor
 *
 * @param {string} apiVersion - The version of the api
 *
 * @param {string} [baseUri] - The base URI of the service.
 *
 * @param {object} [options] - The parameter options
 *
 * @param {Array} [options.filters] - Filters to be added to the request pipeline
 *
 * @param {object} [options.requestOptions] - Options for the underlying request object
 * {@link https://github.com/request/request#requestoptions-callback Options doc}
 *
 * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
 *
 */
function ServiceFabricClient(apiVersion, baseUri, options) {
  if (apiVersion === null || apiVersion === undefined) {
    throw new Error('\'apiVersion\' cannot be null.');
  }

  if (!options) options = {};

  ServiceFabricClient['super_'].call(this, null, options);
  this.baseUri = baseUri;
  if (!this.baseUri) {
    this.baseUri = 'http://localhost:19080';
  }
  this.apiVersion = apiVersion;

  this.clusterManifests = new operations.ClusterManifests(this);
  this.clusterHealths = new operations.ClusterHealths(this);
  this.nodes = new operations.Nodes(this);
  this.nodeStates = new operations.NodeStates(this);
  this.nodeHealths = new operations.NodeHealths(this);
  this.deployedApplications = new operations.DeployedApplications(this);
  this.deployedApplicationHealths = new operations.DeployedApplicationHealths(this);
  this.nodeLoadInformations = new operations.NodeLoadInformations(this);
  this.deployedCodePackages = new operations.DeployedCodePackages(this);
  this.deployedReplicas = new operations.DeployedReplicas(this);
  this.deployedReplicaDetails = new operations.DeployedReplicaDetails(this);
  this.deployedServicePackages = new operations.DeployedServicePackages(this);
  this.deployedServicePackageHealths = new operations.DeployedServicePackageHealths(this);
  this.deployedServiceTypes = new operations.DeployedServiceTypes(this);
  this.applicationTypes = new operations.ApplicationTypes(this);
  this.serviceManifests = new operations.ServiceManifests(this);
  this.serviceTypes = new operations.ServiceTypes(this);
  this.applicationManifests = new operations.ApplicationManifests(this);
  this.applications = new operations.Applications(this);
  this.services = new operations.Services(this);
  this.serviceGroupDescriptions = new operations.ServiceGroupDescriptions(this);
  this.serviceGroupMembers = new operations.ServiceGroupMembers(this);
  this.applicationHealths = new operations.ApplicationHealths(this);
  this.applicationUpgrades = new operations.ApplicationUpgrades(this);
  this.serviceFromTemplates = new operations.ServiceFromTemplates(this);
  this.serviceGroups = new operations.ServiceGroups(this);
  this.serviceGroupFromTemplates = new operations.ServiceGroupFromTemplates(this);
  this.applicationUpgradeRollbacks = new operations.ApplicationUpgradeRollbacks(this);
  this.serviceDescriptions = new operations.ServiceDescriptions(this);
  this.serviceHealths = new operations.ServiceHealths(this);
  this.partitions = new operations.Partitions(this);
  this.partitionLists = new operations.PartitionLists(this);
  this.partitionLoads = new operations.PartitionLoads(this);
  this.replicas = new operations.Replicas(this);
  this.partitionHealths = new operations.PartitionHealths(this);
  this.replicaHealths = new operations.ReplicaHealths(this);
  this.partitionLoadInformations = new operations.PartitionLoadInformations(this);
  this.replicaLoadInformations = new operations.ReplicaLoadInformations(this);
  this.clusterLoadInformations = new operations.ClusterLoadInformations(this);
  this.upgradeProgresses = new operations.UpgradeProgresses(this);
  this.models = models;
  msRest.addSerializationMixin(this);
}

util.inherits(ServiceFabricClient, ServiceClient);

module.exports = ServiceFabricClient;
