/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * MeshSecret
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshSecret {


    /**
     * @summary Creates or updates a Secret resource.
     *
     * Creates a Secret resource with the specified name, description and
     * properties. If Secret resource with the same name exists, then it is updated
     * with the specified description and properties. Once created, the kind and
     * contentType of a secret resource cannot be updated.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} secretResourceDescription Description for creating a secret
     * resource.
     *
     * @param {object} secretResourceDescription.properties Describes the
     * properties of a secret resource.
     *
     * @param {string} [secretResourceDescription.properties.description] User
     * readable description of the secret.
     *
     * @param {string} [secretResourceDescription.properties.contentType] The type
     * of the content stored in the secret value. The value of this property is
     * opaque to Service Fabric. Once set, the value of this property cannot be
     * changed.
     *
     * @param {string} secretResourceDescription.properties.kind Polymorphic
     * Discriminator
     *
     * @param {string} secretResourceDescription.name Name of the Secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecretResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(secretResourceName: string, secretResourceDescription: models.SecretResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretResourceDescription>>;

    /**
     * @summary Creates or updates a Secret resource.
     *
     * Creates a Secret resource with the specified name, description and
     * properties. If Secret resource with the same name exists, then it is updated
     * with the specified description and properties. Once created, the kind and
     * contentType of a secret resource cannot be updated.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} secretResourceDescription Description for creating a secret
     * resource.
     *
     * @param {object} secretResourceDescription.properties Describes the
     * properties of a secret resource.
     *
     * @param {string} [secretResourceDescription.properties.description] User
     * readable description of the secret.
     *
     * @param {string} [secretResourceDescription.properties.contentType] The type
     * of the content stored in the secret value. The value of this property is
     * opaque to Service Fabric. Once set, the value of this property cannot be
     * changed.
     *
     * @param {string} secretResourceDescription.properties.kind Polymorphic
     * Discriminator
     *
     * @param {string} secretResourceDescription.name Name of the Secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecretResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecretResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecretResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(secretResourceName: string, secretResourceDescription: models.SecretResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretResourceDescription>;
    createOrUpdate(secretResourceName: string, secretResourceDescription: models.SecretResourceDescription, callback: ServiceCallback<models.SecretResourceDescription>): void;
    createOrUpdate(secretResourceName: string, secretResourceDescription: models.SecretResourceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretResourceDescription>): void;


    /**
     * @summary Gets the Secret resource with the given name.
     *
     * Gets the information about the Secret resource with the given name. The
     * information include the description and other properties of the Secret.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecretResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(secretResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretResourceDescription>>;

    /**
     * @summary Gets the Secret resource with the given name.
     *
     * Gets the information about the Secret resource with the given name. The
     * information include the description and other properties of the Secret.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecretResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecretResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecretResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(secretResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretResourceDescription>;
    get(secretResourceName: string, callback: ServiceCallback<models.SecretResourceDescription>): void;
    get(secretResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretResourceDescription>): void;


    /**
     * @summary Deletes the Secret resource.
     *
     * Deletes the specified Secret resource and all of its named values.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(secretResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the Secret resource.
     *
     * Deletes the specified Secret resource and all of its named values.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(secretResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(secretResourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(secretResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Lists all the secret resources.
     *
     * Gets the information about all secret resources in a given resource group.
     * The information include the description and other properties of the Secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedSecretResourceDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedSecretResourceDescriptionList>>;

    /**
     * @summary Lists all the secret resources.
     *
     * Gets the information about all secret resources in a given resource group.
     * The information include the description and other properties of the Secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedSecretResourceDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedSecretResourceDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedSecretResourceDescriptionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedSecretResourceDescriptionList>;
    list(callback: ServiceCallback<models.PagedSecretResourceDescriptionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedSecretResourceDescriptionList>): void;
}

/**
 * @class
 * MeshSecretValue
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshSecretValue {


    /**
     * @summary Adds the specified value as a new version of the specified secret
     * resource.
     *
     * Creates a new value of the specified secret resource. The name of the value
     * is typically the version identifier. Once created the value cannot be
     * changed.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} secretValueResourceDescription Description for creating a
     * value of a secret resource.
     *
     * @param {string} secretValueResourceDescription.name Version identifier of
     * the secret value.
     *
     * @param {string} [secretValueResourceDescription.value] The actual value of
     * the secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecretValueResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addValueWithHttpOperationResponse(secretResourceName: string, secretValueResourceName: string, secretValueResourceDescription: models.SecretValueResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretValueResourceDescription>>;

    /**
     * @summary Adds the specified value as a new version of the specified secret
     * resource.
     *
     * Creates a new value of the specified secret resource. The name of the value
     * is typically the version identifier. Once created the value cannot be
     * changed.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} secretValueResourceDescription Description for creating a
     * value of a secret resource.
     *
     * @param {string} secretValueResourceDescription.name Version identifier of
     * the secret value.
     *
     * @param {string} [secretValueResourceDescription.value] The actual value of
     * the secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecretValueResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecretValueResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecretValueResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addValue(secretResourceName: string, secretValueResourceName: string, secretValueResourceDescription: models.SecretValueResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretValueResourceDescription>;
    addValue(secretResourceName: string, secretValueResourceName: string, secretValueResourceDescription: models.SecretValueResourceDescription, callback: ServiceCallback<models.SecretValueResourceDescription>): void;
    addValue(secretResourceName: string, secretValueResourceName: string, secretValueResourceDescription: models.SecretValueResourceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretValueResourceDescription>): void;


    /**
     * @summary Gets the specified secret value resource.
     *
     * Get the information about the specified named secret value resources. The
     * information does not include the actual value of the secret.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecretValueResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(secretResourceName: string, secretValueResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretValueResourceDescription>>;

    /**
     * @summary Gets the specified secret value resource.
     *
     * Get the information about the specified named secret value resources. The
     * information does not include the actual value of the secret.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecretValueResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecretValueResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecretValueResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(secretResourceName: string, secretValueResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretValueResourceDescription>;
    get(secretResourceName: string, secretValueResourceName: string, callback: ServiceCallback<models.SecretValueResourceDescription>): void;
    get(secretResourceName: string, secretValueResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretValueResourceDescription>): void;


    /**
     * @summary Deletes the specified  value of the named secret resource.
     *
     * Deletes the secret value resource identified by the name. The name of the
     * resource is typically the version associated with that value. Deletion will
     * fail if the specified value is in use.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(secretResourceName: string, secretValueResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the specified  value of the named secret resource.
     *
     * Deletes the secret value resource identified by the name. The name of the
     * resource is typically the version associated with that value. Deletion will
     * fail if the specified value is in use.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(secretResourceName: string, secretValueResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(secretResourceName: string, secretValueResourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(secretResourceName: string, secretValueResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List names of all values of the specified secret resource.
     *
     * Gets information about all secret value resources of the specified secret
     * resource. The information includes the names of the secret value resources,
     * but not the actual values.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedSecretValueResourceDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(secretResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedSecretValueResourceDescriptionList>>;

    /**
     * @summary List names of all values of the specified secret resource.
     *
     * Gets information about all secret value resources of the specified secret
     * resource. The information includes the names of the secret value resources,
     * but not the actual values.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedSecretValueResourceDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedSecretValueResourceDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedSecretValueResourceDescriptionList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(secretResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedSecretValueResourceDescriptionList>;
    list(secretResourceName: string, callback: ServiceCallback<models.PagedSecretValueResourceDescriptionList>): void;
    list(secretResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedSecretValueResourceDescriptionList>): void;


    /**
     * @summary Lists the specified value of the secret resource.
     *
     * Lists the decrypted value of the specified named value of the secret
     * resource. This is a privileged operation.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecretValue>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    showWithHttpOperationResponse(secretResourceName: string, secretValueResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretValue>>;

    /**
     * @summary Lists the specified value of the secret resource.
     *
     * Lists the decrypted value of the specified named value of the secret
     * resource. This is a privileged operation.
     *
     * @param {string} secretResourceName The name of the secret resource.
     *
     * @param {string} secretValueResourceName The name of the secret resource
     * value which is typically the version identifier for the value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecretValue} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecretValue} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecretValue} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    show(secretResourceName: string, secretValueResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretValue>;
    show(secretResourceName: string, secretValueResourceName: string, callback: ServiceCallback<models.SecretValue>): void;
    show(secretResourceName: string, secretValueResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretValue>): void;
}

/**
 * @class
 * MeshVolume
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshVolume {


    /**
     * @summary Creates or updates a Volume resource.
     *
     * Creates a Volume resource with the specified name, description and
     * properties. If Volume resource with the same name exists, then it is updated
     * with the specified description and properties.
     *
     * @param {string} volumeResourceName The identity of the volume.
     *
     * @param {object} volumeResourceDescription Description for creating a Volume
     * resource.
     *
     * @param {string} volumeResourceDescription.name Name of the Volume resource.
     *
     * @param {string} [volumeResourceDescription.description] User readable
     * description of the volume.
     *
     * @param {object} [volumeResourceDescription.azureFileParameters] This type
     * describes a volume provided by an Azure Files file share.
     *
     * @param {string} volumeResourceDescription.azureFileParameters.accountName
     * Name of the Azure storage account for the File Share.
     *
     * @param {string} [volumeResourceDescription.azureFileParameters.accountKey]
     * Access key of the Azure storage account for the File Share.
     *
     * @param {string} volumeResourceDescription.azureFileParameters.shareName Name
     * of the Azure Files file share that provides storage for the volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(volumeResourceName: string, volumeResourceDescription: models.VolumeResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeResourceDescription>>;

    /**
     * @summary Creates or updates a Volume resource.
     *
     * Creates a Volume resource with the specified name, description and
     * properties. If Volume resource with the same name exists, then it is updated
     * with the specified description and properties.
     *
     * @param {string} volumeResourceName The identity of the volume.
     *
     * @param {object} volumeResourceDescription Description for creating a Volume
     * resource.
     *
     * @param {string} volumeResourceDescription.name Name of the Volume resource.
     *
     * @param {string} [volumeResourceDescription.description] User readable
     * description of the volume.
     *
     * @param {object} [volumeResourceDescription.azureFileParameters] This type
     * describes a volume provided by an Azure Files file share.
     *
     * @param {string} volumeResourceDescription.azureFileParameters.accountName
     * Name of the Azure storage account for the File Share.
     *
     * @param {string} [volumeResourceDescription.azureFileParameters.accountKey]
     * Access key of the Azure storage account for the File Share.
     *
     * @param {string} volumeResourceDescription.azureFileParameters.shareName Name
     * of the Azure Files file share that provides storage for the volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(volumeResourceName: string, volumeResourceDescription: models.VolumeResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeResourceDescription>;
    createOrUpdate(volumeResourceName: string, volumeResourceDescription: models.VolumeResourceDescription, callback: ServiceCallback<models.VolumeResourceDescription>): void;
    createOrUpdate(volumeResourceName: string, volumeResourceDescription: models.VolumeResourceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeResourceDescription>): void;


    /**
     * @summary Gets the Volume resource with the given name.
     *
     * Gets the information about the Volume resource with the given name. The
     * information include the description and other properties of the Volume.
     *
     * @param {string} volumeResourceName The identity of the volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(volumeResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeResourceDescription>>;

    /**
     * @summary Gets the Volume resource with the given name.
     *
     * Gets the information about the Volume resource with the given name. The
     * information include the description and other properties of the Volume.
     *
     * @param {string} volumeResourceName The identity of the volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(volumeResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeResourceDescription>;
    get(volumeResourceName: string, callback: ServiceCallback<models.VolumeResourceDescription>): void;
    get(volumeResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeResourceDescription>): void;


    /**
     * @summary Deletes the Volume resource.
     *
     * Deletes the Volume resource identified by the name.
     *
     * @param {string} volumeResourceName The identity of the volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(volumeResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the Volume resource.
     *
     * Deletes the Volume resource identified by the name.
     *
     * @param {string} volumeResourceName The identity of the volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(volumeResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(volumeResourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(volumeResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Lists all the volume resources.
     *
     * Gets the information about all volume resources in a given resource group.
     * The information include the description and other properties of the Volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedVolumeResourceDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedVolumeResourceDescriptionList>>;

    /**
     * @summary Lists all the volume resources.
     *
     * Gets the information about all volume resources in a given resource group.
     * The information include the description and other properties of the Volume.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedVolumeResourceDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedVolumeResourceDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedVolumeResourceDescriptionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedVolumeResourceDescriptionList>;
    list(callback: ServiceCallback<models.PagedVolumeResourceDescriptionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedVolumeResourceDescriptionList>): void;
}

/**
 * @class
 * MeshNetwork
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshNetwork {


    /**
     * @summary Creates or updates a Network resource.
     *
     * Creates a Network resource with the specified name, description and
     * properties. If Network resource with the same name exists, then it is
     * updated with the specified description and properties. Network resource
     * provides connectivity between application services.
     *
     * @param {string} networkResourceName The identity of the network.
     *
     * @param {object} networkResourceDescription Description for creating a
     * Network resource.
     *
     * @param {string} networkResourceDescription.name Name of the Network
     * resource.
     *
     * @param {object} networkResourceDescription.properties Describes properties
     * of a network resource.
     *
     * @param {string} [networkResourceDescription.properties.description] User
     * readable description of the network.
     *
     * @param {string} networkResourceDescription.properties.kind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(networkResourceName: string, networkResourceDescription: models.NetworkResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkResourceDescription>>;

    /**
     * @summary Creates or updates a Network resource.
     *
     * Creates a Network resource with the specified name, description and
     * properties. If Network resource with the same name exists, then it is
     * updated with the specified description and properties. Network resource
     * provides connectivity between application services.
     *
     * @param {string} networkResourceName The identity of the network.
     *
     * @param {object} networkResourceDescription Description for creating a
     * Network resource.
     *
     * @param {string} networkResourceDescription.name Name of the Network
     * resource.
     *
     * @param {object} networkResourceDescription.properties Describes properties
     * of a network resource.
     *
     * @param {string} [networkResourceDescription.properties.description] User
     * readable description of the network.
     *
     * @param {string} networkResourceDescription.properties.kind Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(networkResourceName: string, networkResourceDescription: models.NetworkResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkResourceDescription>;
    createOrUpdate(networkResourceName: string, networkResourceDescription: models.NetworkResourceDescription, callback: ServiceCallback<models.NetworkResourceDescription>): void;
    createOrUpdate(networkResourceName: string, networkResourceDescription: models.NetworkResourceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkResourceDescription>): void;


    /**
     * @summary Gets the Network resource with the given name.
     *
     * Gets the information about the Network resource with the given name. The
     * information include the description and other properties of the Network.
     *
     * @param {string} networkResourceName The identity of the network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(networkResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkResourceDescription>>;

    /**
     * @summary Gets the Network resource with the given name.
     *
     * Gets the information about the Network resource with the given name. The
     * information include the description and other properties of the Network.
     *
     * @param {string} networkResourceName The identity of the network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(networkResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkResourceDescription>;
    get(networkResourceName: string, callback: ServiceCallback<models.NetworkResourceDescription>): void;
    get(networkResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkResourceDescription>): void;


    /**
     * @summary Deletes the Network resource.
     *
     * Deletes the Network resource identified by the name.
     *
     * @param {string} networkResourceName The identity of the network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(networkResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the Network resource.
     *
     * Deletes the Network resource identified by the name.
     *
     * @param {string} networkResourceName The identity of the network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(networkResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(networkResourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(networkResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Lists all the network resources.
     *
     * Gets the information about all network resources in a given resource group.
     * The information include the description and other properties of the Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedNetworkResourceDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedNetworkResourceDescriptionList>>;

    /**
     * @summary Lists all the network resources.
     *
     * Gets the information about all network resources in a given resource group.
     * The information include the description and other properties of the Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedNetworkResourceDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedNetworkResourceDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedNetworkResourceDescriptionList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedNetworkResourceDescriptionList>;
    list(callback: ServiceCallback<models.PagedNetworkResourceDescriptionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedNetworkResourceDescriptionList>): void;
}

/**
 * @class
 * MeshApplication
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshApplication {


    /**
     * @summary Creates or updates a Application resource.
     *
     * Creates a Application resource with the specified name, description and
     * properties. If Application resource with the same name exists, then it is
     * updated with the specified description and properties.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} applicationResourceDescription Description for creating a
     * Application resource.
     *
     * @param {string} applicationResourceDescription.name Name of the Application
     * resource.
     *
     * @param {string} [applicationResourceDescription.description] User readable
     * description of the application.
     *
     * @param {array} [applicationResourceDescription.services] Describes the
     * services in the application. This property is used to create or modify
     * services of the application. On get only the name of the service is
     * returned. The service description can be obtained by querying for the
     * service resource.
     *
     * @param {object} [applicationResourceDescription.diagnostics] Describes the
     * diagnostics definition and usage for an application resource.
     *
     * @param {array} [applicationResourceDescription.diagnostics.sinks] List of
     * supported sinks that can be referenced.
     *
     * @param {boolean} [applicationResourceDescription.diagnostics.enabled] Status
     * of whether or not sinks are enabled.
     *
     * @param {array} [applicationResourceDescription.diagnostics.defaultSinkRefs]
     * The sinks to be used if diagnostics is enabled. Sink choices can be
     * overridden at the service and code package level.
     *
     * @param {string} [applicationResourceDescription.debugParams] Internal - used
     * by Visual Studio to setup the debugging session on the local development
     * environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(applicationResourceName: string, applicationResourceDescription: models.ApplicationResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResourceDescription>>;

    /**
     * @summary Creates or updates a Application resource.
     *
     * Creates a Application resource with the specified name, description and
     * properties. If Application resource with the same name exists, then it is
     * updated with the specified description and properties.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} applicationResourceDescription Description for creating a
     * Application resource.
     *
     * @param {string} applicationResourceDescription.name Name of the Application
     * resource.
     *
     * @param {string} [applicationResourceDescription.description] User readable
     * description of the application.
     *
     * @param {array} [applicationResourceDescription.services] Describes the
     * services in the application. This property is used to create or modify
     * services of the application. On get only the name of the service is
     * returned. The service description can be obtained by querying for the
     * service resource.
     *
     * @param {object} [applicationResourceDescription.diagnostics] Describes the
     * diagnostics definition and usage for an application resource.
     *
     * @param {array} [applicationResourceDescription.diagnostics.sinks] List of
     * supported sinks that can be referenced.
     *
     * @param {boolean} [applicationResourceDescription.diagnostics.enabled] Status
     * of whether or not sinks are enabled.
     *
     * @param {array} [applicationResourceDescription.diagnostics.defaultSinkRefs]
     * The sinks to be used if diagnostics is enabled. Sink choices can be
     * overridden at the service and code package level.
     *
     * @param {string} [applicationResourceDescription.debugParams] Internal - used
     * by Visual Studio to setup the debugging session on the local development
     * environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(applicationResourceName: string, applicationResourceDescription: models.ApplicationResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResourceDescription>;
    createOrUpdate(applicationResourceName: string, applicationResourceDescription: models.ApplicationResourceDescription, callback: ServiceCallback<models.ApplicationResourceDescription>): void;
    createOrUpdate(applicationResourceName: string, applicationResourceDescription: models.ApplicationResourceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResourceDescription>): void;


    /**
     * @summary Gets the Application resource with the given name.
     *
     * Gets the information about the Application resource with the given name. The
     * information include the description and other properties of the Application.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResourceDescription>>;

    /**
     * @summary Gets the Application resource with the given name.
     *
     * Gets the information about the Application resource with the given name. The
     * information include the description and other properties of the Application.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResourceDescription>;
    get(applicationResourceName: string, callback: ServiceCallback<models.ApplicationResourceDescription>): void;
    get(applicationResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResourceDescription>): void;


    /**
     * @summary Deletes the Application resource.
     *
     * Deletes the Application resource identified by the name.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(applicationResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the Application resource.
     *
     * Deletes the Application resource identified by the name.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(applicationResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(applicationResourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(applicationResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Lists all the application resources.
     *
     * Gets the information about all application resources in a given resource
     * group. The information include the description and other properties of the
     * Application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedApplicationResourceDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedApplicationResourceDescriptionList>>;

    /**
     * @summary Lists all the application resources.
     *
     * Gets the information about all application resources in a given resource
     * group. The information include the description and other properties of the
     * Application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedApplicationResourceDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedApplicationResourceDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedApplicationResourceDescriptionList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedApplicationResourceDescriptionList>;
    list(callback: ServiceCallback<models.PagedApplicationResourceDescriptionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedApplicationResourceDescriptionList>): void;
}

/**
 * @class
 * MeshService
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshService {


    /**
     * @summary Gets the Service resource with the given name.
     *
     * Gets the information about the Service resource with the given name. The
     * information include the description and other properties of the Service.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationResourceName: string, serviceResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResourceDescription>>;

    /**
     * @summary Gets the Service resource with the given name.
     *
     * Gets the information about the Service resource with the given name. The
     * information include the description and other properties of the Service.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationResourceName: string, serviceResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResourceDescription>;
    get(applicationResourceName: string, serviceResourceName: string, callback: ServiceCallback<models.ServiceResourceDescription>): void;
    get(applicationResourceName: string, serviceResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResourceDescription>): void;


    /**
     * @summary Lists all the service resources.
     *
     * Gets the information about all services of an application resource. The
     * information include the description and other properties of the Service.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedServiceResourceDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(applicationResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedServiceResourceDescriptionList>>;

    /**
     * @summary Lists all the service resources.
     *
     * Gets the information about all services of an application resource. The
     * information include the description and other properties of the Service.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedServiceResourceDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedServiceResourceDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedServiceResourceDescriptionList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(applicationResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedServiceResourceDescriptionList>;
    list(applicationResourceName: string, callback: ServiceCallback<models.PagedServiceResourceDescriptionList>): void;
    list(applicationResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedServiceResourceDescriptionList>): void;
}

/**
 * @class
 * MeshCodePackage
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshCodePackage {


    /**
     * @summary Gets the logs from the container.
     *
     * Gets the logs for the container of the specified code package of the service
     * replica.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {string} replicaName Service Fabric replica name.
     *
     * @param {string} codePackageName The name of code package of the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.tail] Number of lines to show from the end of the
     * logs. Default is 100. 'all' to show the complete logs.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerLogs>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getContainerLogsWithHttpOperationResponse(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options?: { tail? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerLogs>>;

    /**
     * @summary Gets the logs from the container.
     *
     * Gets the logs for the container of the specified code package of the service
     * replica.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {string} replicaName Service Fabric replica name.
     *
     * @param {string} codePackageName The name of code package of the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.tail] Number of lines to show from the end of the
     * logs. Default is 100. 'all' to show the complete logs.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerLogs} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerLogs} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerLogs} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getContainerLogs(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options?: { tail? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerLogs>;
    getContainerLogs(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, callback: ServiceCallback<models.ContainerLogs>): void;
    getContainerLogs(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options: { tail? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerLogs>): void;
}

/**
 * @class
 * MeshServiceReplica
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshServiceReplica {


    /**
     * @summary Gets the given replica of the service of an application.
     *
     * Gets the information about the service replica with the given name. The
     * information include the description and other properties of the service
     * replica.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {string} replicaName Service Fabric replica name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceReplicaDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationResourceName: string, serviceResourceName: string, replicaName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceReplicaDescription>>;

    /**
     * @summary Gets the given replica of the service of an application.
     *
     * Gets the information about the service replica with the given name. The
     * information include the description and other properties of the service
     * replica.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {string} replicaName Service Fabric replica name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceReplicaDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceReplicaDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceReplicaDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationResourceName: string, serviceResourceName: string, replicaName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceReplicaDescription>;
    get(applicationResourceName: string, serviceResourceName: string, replicaName: string, callback: ServiceCallback<models.ServiceReplicaDescription>): void;
    get(applicationResourceName: string, serviceResourceName: string, replicaName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceReplicaDescription>): void;


    /**
     * @summary Lists all the replicas of a service.
     *
     * Gets the information about all replicas of a service. The information
     * include the description and other properties of the service replica.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedServiceReplicaDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(applicationResourceName: string, serviceResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedServiceReplicaDescriptionList>>;

    /**
     * @summary Lists all the replicas of a service.
     *
     * Gets the information about all replicas of a service. The information
     * include the description and other properties of the service replica.
     *
     * @param {string} applicationResourceName The identity of the application.
     *
     * @param {string} serviceResourceName The identity of the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedServiceReplicaDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedServiceReplicaDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedServiceReplicaDescriptionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(applicationResourceName: string, serviceResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedServiceReplicaDescriptionList>;
    list(applicationResourceName: string, serviceResourceName: string, callback: ServiceCallback<models.PagedServiceReplicaDescriptionList>): void;
    list(applicationResourceName: string, serviceResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedServiceReplicaDescriptionList>): void;
}

/**
 * @class
 * MeshGateway
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface MeshGateway {


    /**
     * @summary Creates or updates a Gateway resource.
     *
     * Creates a Gateway resource with the specified name, description and
     * properties. If Gateway resource with the same name exists, then it is
     * updated with the specified description and properties. Use Gateway resource
     * to provide public connectivity to application services.
     *
     * @param {string} gatewayResourceName The identity of the gateway.
     *
     * @param {object} gatewayResourceDescription Description for creating a
     * Gateway resource.
     *
     * @param {string} gatewayResourceDescription.name Name of the Gateway
     * resource.
     *
     * @param {string} [gatewayResourceDescription.description] User readable
     * description of the gateway.
     *
     * @param {object} gatewayResourceDescription.sourceNetwork Network the gateway
     * should listen on for requests.
     *
     * @param {object} gatewayResourceDescription.destinationNetwork Network that
     * the Application is using.
     *
     * @param {string} [gatewayResourceDescription.destinationNetwork.name] Name of
     * the network
     *
     * @param {array} [gatewayResourceDescription.destinationNetwork.endpointRefs]
     * A list of endpoints that are exposed on this network.
     *
     * @param {array} [gatewayResourceDescription.tcp] Configuration for tcp
     * connectivity for this gateway.
     *
     * @param {array} [gatewayResourceDescription.http] Configuration for http
     * connectivity for this gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(gatewayResourceName: string, gatewayResourceDescription: models.GatewayResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResourceDescription>>;

    /**
     * @summary Creates or updates a Gateway resource.
     *
     * Creates a Gateway resource with the specified name, description and
     * properties. If Gateway resource with the same name exists, then it is
     * updated with the specified description and properties. Use Gateway resource
     * to provide public connectivity to application services.
     *
     * @param {string} gatewayResourceName The identity of the gateway.
     *
     * @param {object} gatewayResourceDescription Description for creating a
     * Gateway resource.
     *
     * @param {string} gatewayResourceDescription.name Name of the Gateway
     * resource.
     *
     * @param {string} [gatewayResourceDescription.description] User readable
     * description of the gateway.
     *
     * @param {object} gatewayResourceDescription.sourceNetwork Network the gateway
     * should listen on for requests.
     *
     * @param {object} gatewayResourceDescription.destinationNetwork Network that
     * the Application is using.
     *
     * @param {string} [gatewayResourceDescription.destinationNetwork.name] Name of
     * the network
     *
     * @param {array} [gatewayResourceDescription.destinationNetwork.endpointRefs]
     * A list of endpoints that are exposed on this network.
     *
     * @param {array} [gatewayResourceDescription.tcp] Configuration for tcp
     * connectivity for this gateway.
     *
     * @param {array} [gatewayResourceDescription.http] Configuration for http
     * connectivity for this gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(gatewayResourceName: string, gatewayResourceDescription: models.GatewayResourceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResourceDescription>;
    createOrUpdate(gatewayResourceName: string, gatewayResourceDescription: models.GatewayResourceDescription, callback: ServiceCallback<models.GatewayResourceDescription>): void;
    createOrUpdate(gatewayResourceName: string, gatewayResourceDescription: models.GatewayResourceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResourceDescription>): void;


    /**
     * @summary Gets the Gateway resource with the given name.
     *
     * Gets the information about the Gateway resource with the given name. The
     * information include the description and other properties of the Gateway.
     *
     * @param {string} gatewayResourceName The identity of the gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResourceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(gatewayResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResourceDescription>>;

    /**
     * @summary Gets the Gateway resource with the given name.
     *
     * Gets the information about the Gateway resource with the given name. The
     * information include the description and other properties of the Gateway.
     *
     * @param {string} gatewayResourceName The identity of the gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResourceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResourceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResourceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(gatewayResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResourceDescription>;
    get(gatewayResourceName: string, callback: ServiceCallback<models.GatewayResourceDescription>): void;
    get(gatewayResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResourceDescription>): void;


    /**
     * @summary Deletes the Gateway resource.
     *
     * Deletes the Gateway resource identified by the name.
     *
     * @param {string} gatewayResourceName The identity of the gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(gatewayResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the Gateway resource.
     *
     * Deletes the Gateway resource identified by the name.
     *
     * @param {string} gatewayResourceName The identity of the gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(gatewayResourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(gatewayResourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(gatewayResourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Lists all the gateway resources.
     *
     * Gets the information about all gateway resources in a given resource group.
     * The information include the description and other properties of the Gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PagedGatewayResourceDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PagedGatewayResourceDescriptionList>>;

    /**
     * @summary Lists all the gateway resources.
     *
     * Gets the information about all gateway resources in a given resource group.
     * The information include the description and other properties of the Gateway.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PagedGatewayResourceDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PagedGatewayResourceDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PagedGatewayResourceDescriptionList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PagedGatewayResourceDescriptionList>;
    list(callback: ServiceCallback<models.PagedGatewayResourceDescriptionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PagedGatewayResourceDescriptionList>): void;
}
