/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ClusterManifests
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterManifests {

    /**
     * Get cluster manifests
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    get(callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ClusterHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterHealths {

    /**
     * Report cluster healths
     *
     * @param {object} clusterHealthReport The report of the cluster health
     * 
     * @param {string} [clusterHealthReport.sourceId]
     * 
     * @param {string} [clusterHealthReport.property]
     * 
     * @param {string} [clusterHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [clusterHealthReport.description]
     * 
     * @param {string} [clusterHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [clusterHealthReport.sequenceNumber]
     * 
     * @param {boolean} [clusterHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(clusterHealthReport: models.ClusterHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(clusterHealthReport: models.ClusterHealthReport, callback: ServiceCallback<string>): void;

    /**
     * Get cluster healths
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     * 
     * @param {string} [options.nodesHealthStateFilter] The filter of the nodes
     * health state
     * 
     * @param {string} [options.applicationsHealthStateFilter] The filter of the
     * applications health state
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(options: { eventsHealthStateFilter? : string, nodesHealthStateFilter? : string, applicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterHealth>): void;
    get(callback: ServiceCallback<models.ClusterHealth>): void;
}

/**
 * @class
 * Nodes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Nodes {

    /**
     * List nodes
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.continuationToken] The token of the continuation
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeList>): void;
    list(callback: ServiceCallback<models.NodeList>): void;

    /**
     * Get nodes
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Node>): void;
    get(nodeName: string, callback: ServiceCallback<models.Node>): void;

    /**
     * Enable nodes
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enable(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    enable(nodeName: string, callback: ServiceCallback<string>): void;

    /**
     * Disable nodes
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} disableNode The node
     * 
     * @param {string} [disableNode.deactivationIntent] Possible values include:
     * 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    disable(nodeName: string, disableNode: models.DisableNode, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    disable(nodeName: string, disableNode: models.DisableNode, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * NodeStates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface NodeStates {

    /**
     * Remove node states
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    remove(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    remove(nodeName: string, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * NodeHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface NodeHealths {

    /**
     * Get node healths
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeHealth>): void;
    get(nodeName: string, callback: ServiceCallback<models.NodeHealth>): void;

    /**
     * Send node health
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} nodeHealthReport The report of the node health
     * 
     * @param {string} [nodeHealthReport.sourceId]
     * 
     * @param {string} [nodeHealthReport.property]
     * 
     * @param {string} [nodeHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [nodeHealthReport.description]
     * 
     * @param {string} [nodeHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [nodeHealthReport.sequenceNumber]
     * 
     * @param {boolean} [nodeHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(nodeName: string, nodeHealthReport: models.NodeHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(nodeName: string, nodeHealthReport: models.NodeHealthReport, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * DeployedApplications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedApplications {

    /**
     * List deployed applications
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplication[]>): void;
    list(nodeName: string, callback: ServiceCallback<models.DeployedApplication[]>): void;

    /**
     * Get deployed applications
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplication>): void;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedApplication>): void;
}

/**
 * @class
 * DeployedApplicationHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedApplicationHealths {

    /**
     * Get deployed application healths
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     * 
     * @param {string} [options.deployedServicePackagesHealthStateFilter] The
     * filter of the deployed service packages health state
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, applicationName: string, options: { eventsHealthStateFilter? : string, deployedServicePackagesHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedApplicationHealth>): void;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedApplicationHealth>): void;

    /**
     * Send deployed application health
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {object} deployedApplicationHealthReport The report of the deployed
     * application health
     * 
     * @param {string} [deployedApplicationHealthReport.sourceId]
     * 
     * @param {string} [deployedApplicationHealthReport.property]
     * 
     * @param {string} [deployedApplicationHealthReport.healthState] Possible
     * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [deployedApplicationHealthReport.description]
     * 
     * @param {string} [deployedApplicationHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [deployedApplicationHealthReport.sequenceNumber]
     * 
     * @param {boolean} [deployedApplicationHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(nodeName: string, applicationName: string, deployedApplicationHealthReport: models.DeployedApplicationHealthReport, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * NodeLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface NodeLoadInformations {

    /**
     * Get node load informations
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeLoadInformation>): void;
    get(nodeName: string, callback: ServiceCallback<models.NodeLoadInformation>): void;
}

/**
 * @class
 * DeployedCodePackages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedCodePackages {

    /**
     * Get deployed code packages
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedCodePackage[]>): void;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedCodePackage[]>): void;
}

/**
 * @class
 * DeployedReplicas
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedReplicas {

    /**
     * Get deployed replicas
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedReplica[]>): void;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedReplica[]>): void;
}

/**
 * @class
 * DeployedReplicaDetails
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedReplicaDetails {

    /**
     * Get deployed replica details
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} partitionName The name of the partition
     * 
     * @param {string} replicaId The id of the replica
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, partitionName: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedReplicaDetail>): void;
    get(nodeName: string, partitionName: string, replicaId: string, callback: ServiceCallback<models.DeployedReplicaDetail>): void;
}

/**
 * @class
 * DeployedServicePackages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedServicePackages {

    /**
     * Get deployed service packages
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServicePackage[]>): void;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedServicePackage[]>): void;
}

/**
 * @class
 * DeployedServicePackageHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedServicePackageHealths {

    /**
     * Get deployed service package healths
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {string} servicePackageName The name of the service package
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, applicationName: string, servicePackageName: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServicePackageHealth>): void;
    get(nodeName: string, applicationName: string, servicePackageName: string, callback: ServiceCallback<models.DeployedServicePackageHealth>): void;

    /**
     * Send deployed service package health
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {string} serviceManifestName The name of the service manifest
     * 
     * @param {object} deployedServicePackageHealthReport The report of the
     * deployed service package health
     * 
     * @param {string} [deployedServicePackageHealthReport.sourceId]
     * 
     * @param {string} [deployedServicePackageHealthReport.property]
     * 
     * @param {string} [deployedServicePackageHealthReport.healthState] Possible
     * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [deployedServicePackageHealthReport.description]
     * 
     * @param {string}
     * [deployedServicePackageHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [deployedServicePackageHealthReport.sequenceNumber]
     * 
     * @param {boolean} [deployedServicePackageHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServiceHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(nodeName: string, applicationName: string, serviceManifestName: string, deployedServicePackageHealthReport: models.DeployedServiceHealthReport, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * DeployedServiceTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface DeployedServiceTypes {

    /**
     * Get deployed service types
     *
     * @param {string} nodeName The name of the node
     * 
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(nodeName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeployedServiceType[]>): void;
    get(nodeName: string, applicationName: string, callback: ServiceCallback<models.DeployedServiceType[]>): void;
}

/**
 * @class
 * ApplicationTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationTypes {

    /**
     * List application types
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationType[]>): void;
    list(callback: ServiceCallback<models.ApplicationType[]>): void;

    /**
     * Get application types
     *
     * @param {string} applicationTypeName The name of the application type
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationType[]>): void;
    get(applicationTypeName: string, callback: ServiceCallback<models.ApplicationType[]>): void;

    /**
     * Register application types
     *
     * @param {object} registerApplicationType The type of the register application
     * 
     * @param {string} [registerApplicationType.applicationTypeBuildPath]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.timeout] The timeout in seconds
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    register(registerApplicationType: models.RegisterApplicationType, options: { timeout? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    register(registerApplicationType: models.RegisterApplicationType, callback: ServiceCallback<string>): void;

    /**
     * Unregister application types
     *
     * @param {string} applicationTypeName The name of the application type
     * 
     * @param {object} unregisterApplicationType The type of the unregister
     * application
     * 
     * @param {string} [unregisterApplicationType.applicationTypeVersion]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    unregister(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    unregister(applicationTypeName: string, unregisterApplicationType: models.UnregisterApplicationType, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceManifests
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceManifests {

    /**
     * Get service manifests
     *
     * @param {string} applicationTypeName The name of the application type
     * 
     * @param {string} applicationTypeVersion The version of the application type
     * 
     * @param {string} serviceManifestName The name of the service manifest
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceManifest>): void;
    get(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, callback: ServiceCallback<models.ServiceManifest>): void;
}

/**
 * @class
 * ServiceTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceTypes {

    /**
     * Get service types
     *
     * @param {string} applicationTypeName The name of the application type
     * 
     * @param {string} applicationTypeVersion The version of the application type
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationTypeName: string, applicationTypeVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceType[]>): void;
    get(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<models.ServiceType[]>): void;
}

/**
 * @class
 * ApplicationManifests
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationManifests {

    /**
     * Get application manifests
     *
     * @param {string} applicationTypeName The name of the application type
     * 
     * @param {string} applicationTypeVersion The version of the application type
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationTypeName: string, applicationTypeVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationManifest>): void;
    get(applicationTypeName: string, applicationTypeVersion: string, callback: ServiceCallback<models.ApplicationManifest>): void;
}

/**
 * @class
 * Applications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Applications {

    /**
     * List applications
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.continuationToken] The token of the continuation
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationList>): void;
    list(callback: ServiceCallback<models.ApplicationList>): void;

    /**
     * Get applications
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;
    get(applicationName: string, callback: ServiceCallback<models.Application>): void;

    /**
     * Create applications
     *
     * @param {object} applicationDescription The description of the application
     * 
     * @param {string} [applicationDescription.name]
     * 
     * @param {string} [applicationDescription.typeName]
     * 
     * @param {string} [applicationDescription.typeVersion]
     * 
     * @param {array} [applicationDescription.parameterList]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(applicationDescription: models.ApplicationDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(applicationDescription: models.ApplicationDescription, callback: ServiceCallback<any>): void;

    /**
     * Remove applications
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    remove(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    remove(applicationName: string, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Services
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Services {

    /**
     * List services
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceList>): void;
    list(applicationName: string, callback: ServiceCallback<models.ServiceList>): void;

    /**
     * Get services
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Service>): void;
    get(applicationName: string, serviceName: string, callback: ServiceCallback<models.Service>): void;

    /**
     * Create services
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} createServiceDescription The description of the service
     * 
     * @param {string} [createServiceDescription.applicationName]
     * 
     * @param {string} [createServiceDescription.serviceName]
     * 
     * @param {string} [createServiceDescription.serviceTypeName]
     * 
     * @param {object} [createServiceDescription.partitionDescription]
     * 
     * @param {string}
     * [createServiceDescription.partitionDescription.partitionScheme] Possible
     * values include: 'Invalid', 'Singleton', 'UniformInt64', 'Named'
     * 
     * @param {number} [createServiceDescription.partitionDescription.count]
     * 
     * @param {array} [createServiceDescription.partitionDescription.names]
     * 
     * @param {string} [createServiceDescription.partitionDescription.lowKey]
     * 
     * @param {string} [createServiceDescription.partitionDescription.highKey]
     * 
     * @param {string} [createServiceDescription.placementConstraints]
     * 
     * @param {object} [createServiceDescription.correlationScheme]
     * 
     * @param {object} [createServiceDescription.serviceLoadMetrics]
     * 
     * @param {object} [createServiceDescription.servicePlacementPolicies]
     * 
     * @param {string}
     * [createServiceDescription.servicePlacementPolicies.serviceName]
     * 
     * @param {string}
     * [createServiceDescription.servicePlacementPolicies.serviceCorrelationScheme]
     * Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
     * 'NonAlignedAffinity'
     * 
     * @param {number} [createServiceDescription.flags]
     * 
     * @param {string} [createServiceDescription.ServiceKind] Polymorhpic
     * Discriminator
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(applicationName: string, createServiceDescription: models.CreateServiceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(applicationName: string, createServiceDescription: models.CreateServiceDescription, callback: ServiceCallback<any>): void;

    /**
     * Update services
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} updateServiceDescription The description of the service
     * update
     * 
     * @param {number} [updateServiceDescription.flags]
     * 
     * @param {string} [updateServiceDescription.ServiceKind] Polymorhpic
     * Discriminator
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(serviceName: string, updateServiceDescription: models.UpdateServiceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    update(serviceName: string, updateServiceDescription: models.UpdateServiceDescription, callback: ServiceCallback<string>): void;

    /**
     * Remove services
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    remove(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    remove(serviceName: string, callback: ServiceCallback<string>): void;

    /**
     * Resolve services
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.partitionKeyType] The type of the partition key
     * 
     * @param {string} [options.partitionKeyValue] The value of the partition key
     * 
     * @param {string} [options.previousRspVersion] The version of the previous rsp
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resolve(serviceName: string, options: { partitionKeyType? : number, partitionKeyValue? : string, previousRspVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResolvedServicePartition>): void;
    resolve(serviceName: string, callback: ServiceCallback<models.ResolvedServicePartition>): void;
}

/**
 * @class
 * ServiceGroupDescriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroupDescriptions {

    /**
     * Get service group descriptions
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceGroupDescription>): void;
    get(applicationName: string, serviceName: string, callback: ServiceCallback<models.ServiceGroupDescription>): void;
}

/**
 * @class
 * ServiceGroupMembers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroupMembers {

    /**
     * Get service group members
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceGroupMember>): void;
    get(applicationName: string, serviceName: string, callback: ServiceCallback<models.ServiceGroupMember>): void;
}

/**
 * @class
 * ApplicationHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationHealths {

    /**
     * Get application healths
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     * 
     * @param {string} [options.deployedApplicationsHealthStateFilter] The filter
     * of the deployed application health state
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationName: string, options: { eventsHealthStateFilter? : string, deployedApplicationsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationHealth>): void;
    get(applicationName: string, callback: ServiceCallback<models.ApplicationHealth>): void;

    /**
     * Send application health
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} applicationHealthReport The report of the application health
     * 
     * @param {string} [applicationHealthReport.sourceId]
     * 
     * @param {string} [applicationHealthReport.property]
     * 
     * @param {string} [applicationHealthReport.healthState] Possible values
     * include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [applicationHealthReport.description]
     * 
     * @param {string} [applicationHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [applicationHealthReport.sequenceNumber]
     * 
     * @param {boolean} [applicationHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(applicationName: string, applicationHealthReport: models.ApplicationHealthReport, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ApplicationUpgrades
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationUpgrades {

    /**
     * Get application upgrades
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationUpgrade>): void;
    get(applicationName: string, callback: ServiceCallback<models.ApplicationUpgrade>): void;

    /**
     * Start application upgrades
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} startApplicationUpgradeDescription The description of the
     * start application upgrade
     * 
     * @param {string} [startApplicationUpgradeDescription.name]
     * 
     * @param {string}
     * [startApplicationUpgradeDescription.targetApplicationTypeVersion]
     * 
     * @param {array} [startApplicationUpgradeDescription.parameters]
     * 
     * @param {string} [startApplicationUpgradeDescription.upgradeKind] Possible
     * values include: 'Invalid', 'Rolling'
     * 
     * @param {string} [startApplicationUpgradeDescription.rollingUpgradeMode]
     * Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     * 
     * @param {number}
     * [startApplicationUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds]
     * 
     * @param {boolean} [startApplicationUpgradeDescription.forceRestart]
     * 
     * @param {object} [startApplicationUpgradeDescription.monitoringPolicy]
     * 
     * @param {string}
     * [startApplicationUpgradeDescription.monitoringPolicy.failureAction]
     * 
     * @param {string}
     * [startApplicationUpgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
     * 
     * @param {string}
     * [startApplicationUpgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds]
     * 
     * @param {string}
     * [startApplicationUpgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
     * 
     * @param {string}
     * [startApplicationUpgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds]
     * 
     * @param {string}
     * [startApplicationUpgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
     * 
     * @param {object}
     * [startApplicationUpgradeDescription.applicationHealthPolicy]
     * 
     * @param {boolean}
     * [startApplicationUpgradeDescription.applicationHealthPolicy.considerWarningAsError]
     * 
     * @param {number}
     * [startApplicationUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * 
     * @param {object}
     * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     * 
     * @param {number}
     * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     * 
     * @param {number}
     * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     * 
     * @param {number}
     * [startApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    start(applicationName: string, startApplicationUpgradeDescription: models.StartApplicationUpgradeDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    start(applicationName: string, startApplicationUpgradeDescription: models.StartApplicationUpgradeDescription, callback: ServiceCallback<string>): void;

    /**
     * Update application upgrades
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} updateApplicationUpgradeDescription The description of the
     * application upgrade
     * 
     * @param {string} [updateApplicationUpgradeDescription.name]
     * 
     * @param {string} [updateApplicationUpgradeDescription.upgradeKind]
     * 
     * @param {object} [updateApplicationUpgradeDescription.updateDescription] The
     * description of the update
     * 
     * @param {string}
     * [updateApplicationUpgradeDescription.updateDescription.rollingUpgradeMode]
     * Possible values include: 'Invalid', 'UnmonitoredAuto',
     * 'UnmonitoredManual', 'Monitored'
     * 
     * @param {boolean}
     * [updateApplicationUpgradeDescription.updateDescription.forceRestart]
     * 
     * @param {string}
     * [updateApplicationUpgradeDescription.updateDescription.failureAction]
     * 
     * @param {number}
     * [updateApplicationUpgradeDescription.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
     * 
     * @param {string}
     * [updateApplicationUpgradeDescription.updateDescription.healthCheckWaitDurationInMilliseconds]
     * 
     * @param {string}
     * [updateApplicationUpgradeDescription.updateDescription.healthCheckStableDurationInMilliseconds]
     * 
     * @param {string}
     * [updateApplicationUpgradeDescription.updateDescription.healthCheckRetryTimeoutInMilliseconds]
     * 
     * @param {string}
     * [updateApplicationUpgradeDescription.updateDescription.upgradeTimeoutInMilliseconds]
     * 
     * @param {string}
     * [updateApplicationUpgradeDescription.updateDescription.upgradeDomainTimeoutInMilliseconds]
     * 
     * @param {object}
     * [updateApplicationUpgradeDescription.applicationHealthPolicy]
     * 
     * @param {boolean}
     * [updateApplicationUpgradeDescription.applicationHealthPolicy.considerWarningAsError]
     * 
     * @param {number}
     * [updateApplicationUpgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * 
     * @param {object}
     * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     * The policy of the default service type health
     * 
     * @param {number}
     * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     * 
     * @param {number}
     * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     * 
     * @param {number}
     * [updateApplicationUpgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(applicationName: string, updateApplicationUpgradeDescription: models.UpdateApplicationUpgradeDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    update(applicationName: string, updateApplicationUpgradeDescription: models.UpdateApplicationUpgradeDescription, callback: ServiceCallback<string>): void;

    /**
     * Resume application upgrades
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} resumeApplicationUpgrade The upgrade of the resume
     * application
     * 
     * @param {string} [resumeApplicationUpgrade.upgradeDomainName]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resume(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    resume(applicationName: string, resumeApplicationUpgrade: models.ResumeApplicationUpgrade, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceFromTemplates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceFromTemplates {

    /**
     * Create service from templates
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} serviceDescriptionTemplate The template of the service
     * description
     * 
     * @param {string} [serviceDescriptionTemplate.serviceName]
     * 
     * @param {string} [serviceDescriptionTemplate.serviceTypeName]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * ServiceGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroups {

    /**
     * Create service groups
     *
     * @param {string} applicationName The name of the service group
     * 
     * @param {object} createServiceGroupDescription The description of the
     * service group
     * 
     * @param {string} [createServiceGroupDescription.applicationName]
     * 
     * @param {string} [createServiceGroupDescription.serviceName]
     * 
     * @param {string} [createServiceGroupDescription.serviceTypeName]
     * 
     * @param {object} [createServiceGroupDescription.partitionDescription]
     * 
     * @param {string}
     * [createServiceGroupDescription.partitionDescription.partitionScheme]
     * Possible values include: 'Invalid', 'Singleton', 'UniformInt64', 'Named'
     * 
     * @param {number} [createServiceGroupDescription.partitionDescription.count]
     * 
     * @param {array} [createServiceGroupDescription.partitionDescription.names]
     * 
     * @param {string} [createServiceGroupDescription.partitionDescription.lowKey]
     * 
     * @param {string}
     * [createServiceGroupDescription.partitionDescription.highKey]
     * 
     * @param {string} [createServiceGroupDescription.placementConstraints]
     * 
     * @param {object} [createServiceGroupDescription.correlationScheme]
     * 
     * @param {object} [createServiceGroupDescription.serviceLoadMetrics]
     * 
     * @param {object} [createServiceGroupDescription.servicePlacementPolicies]
     * 
     * @param {string}
     * [createServiceGroupDescription.servicePlacementPolicies.serviceName]
     * 
     * @param {string}
     * [createServiceGroupDescription.servicePlacementPolicies.serviceCorrelationScheme]
     * Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
     * 'NonAlignedAffinity'
     * 
     * @param {number} [createServiceGroupDescription.flags]
     * 
     * @param {array}
     * [createServiceGroupDescription.serviceGroupMemberDescription]
     * 
     * @param {string} [createServiceGroupDescription.ServiceKind] Polymorhpic
     * Discriminator
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(applicationName: string, createServiceGroupDescription: models.CreateServiceGroupDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(applicationName: string, createServiceGroupDescription: models.CreateServiceGroupDescription, callback: ServiceCallback<any>): void;

    /**
     * Update service groups
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {string} serviceName The name of the service
     * 
     * @param {object} updateServiceGroupDescription The description of the
     * service group update
     * 
     * @param {number} [updateServiceGroupDescription.flags]
     * 
     * @param {string} [updateServiceGroupDescription.ServiceKind] Polymorhpic
     * Discriminator
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(applicationName: string, serviceName: string, updateServiceGroupDescription: models.UpdateServiceGroupDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    update(applicationName: string, serviceName: string, updateServiceGroupDescription: models.UpdateServiceGroupDescription, callback: ServiceCallback<string>): void;

    /**
     * Remove service groups
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    remove(applicationName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    remove(applicationName: string, serviceName: string, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceGroupFromTemplates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceGroupFromTemplates {

    /**
     * Create service group from templates
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} serviceDescriptionTemplate The template of the service
     * description
     * 
     * @param {string} [serviceDescriptionTemplate.serviceName]
     * 
     * @param {string} [serviceDescriptionTemplate.serviceTypeName]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(applicationName: string, serviceDescriptionTemplate: models.ServiceDescriptionTemplate, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * ApplicationUpgradeRollbacks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ApplicationUpgradeRollbacks {

    /**
     * Start application upgrade rollbacks
     *
     * @param {string} applicationName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    start(applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    start(applicationName: string, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ServiceDescriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceDescriptions {

    /**
     * Get service descriptions
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceDescription>): void;
    get(serviceName: string, callback: ServiceCallback<models.ServiceDescription>): void;
}

/**
 * @class
 * ServiceHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ServiceHealths {

    /**
     * Get service healths
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceHealth>): void;
    get(serviceName: string, callback: ServiceCallback<models.ServiceHealth>): void;

    /**
     * Send service healths
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} serviceHealthReport The report of the service health
     * 
     * @param {string} [serviceHealthReport.sourceId]
     * 
     * @param {string} [serviceHealthReport.property]
     * 
     * @param {string} [serviceHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [serviceHealthReport.description]
     * 
     * @param {string} [serviceHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [serviceHealthReport.sequenceNumber]
     * 
     * @param {boolean} [serviceHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(serviceName: string, serviceHealthReport: models.ServiceHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(serviceName: string, serviceHealthReport: models.ServiceHealthReport, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Partitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Partitions {

    /**
     * List partitions
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionList>): void;
    list(serviceName: string, callback: ServiceCallback<models.PartitionList>): void;

    /**
     * Get partitions
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {string} partitionId The id of the partition
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(serviceName: string, partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Partition>): void;
    get(serviceName: string, partitionId: string, callback: ServiceCallback<models.Partition>): void;

    /**
     * Repair partitions
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    repair(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    repair(partitionId: string, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * PartitionLists
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionLists {

    /**
     * Repair partition lists
     *
     * @param {string} serviceName The name of the service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    repair(serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    repair(serviceName: string, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * PartitionLoads
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionLoads {

    /**
     * Reset partition loads
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reset(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    reset(partitionId: string, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Replicas
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface Replicas {

    /**
     * List replicas
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaList>): void;
    list(partitionId: string, callback: ServiceCallback<models.ReplicaList>): void;

    /**
     * Get replicas
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {string} replicaId The id of the replica
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(partitionId: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replica>): void;
    get(partitionId: string, replicaId: string, callback: ServiceCallback<models.Replica>): void;
}

/**
 * @class
 * PartitionHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionHealths {

    /**
     * Get partition healths
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     * 
     * @param {string} [options.replicasHealthStateFilter] The filter of the
     * replicas health state
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(partitionId: string, options: { eventsHealthStateFilter? : string, replicasHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionHealth>): void;
    get(partitionId: string, callback: ServiceCallback<models.PartitionHealth>): void;

    /**
     * Send partition health
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {object} partitionHealthReport The report of the partition health
     * 
     * @param {string} [partitionHealthReport.sourceId]
     * 
     * @param {string} [partitionHealthReport.property]
     * 
     * @param {string} [partitionHealthReport.healthState] Possible values
     * include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [partitionHealthReport.description]
     * 
     * @param {string} [partitionHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [partitionHealthReport.sequenceNumber]
     * 
     * @param {boolean} [partitionHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(partitionId: string, partitionHealthReport: models.PartitionHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(partitionId: string, partitionHealthReport: models.PartitionHealthReport, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * ReplicaHealths
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ReplicaHealths {

    /**
     * Get replica healths
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {string} replicaId The id of the replica
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.eventsHealthStateFilter] The filter of the events
     * health state
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(partitionId: string, replicaId: string, options: { eventsHealthStateFilter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaHealth>): void;
    get(partitionId: string, replicaId: string, callback: ServiceCallback<models.ReplicaHealth>): void;

    /**
     * Send replica healths
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {string} replicaId The id of the replica
     * 
     * @param {object} replicaHealthReport The report of the replica health
     * 
     * @param {string} [replicaHealthReport.sourceId]
     * 
     * @param {string} [replicaHealthReport.property]
     * 
     * @param {string} [replicaHealthReport.healthState] Possible values include:
     * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * 
     * @param {string} [replicaHealthReport.description]
     * 
     * @param {string} [replicaHealthReport.timeToLiveInMilliSeconds]
     * 
     * @param {string} [replicaHealthReport.sequenceNumber]
     * 
     * @param {boolean} [replicaHealthReport.removeWhenExpired]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    send(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    send(partitionId: string, replicaId: string, replicaHealthReport: models.ReplicaHealthReport, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * PartitionLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface PartitionLoadInformations {

    /**
     * Get partition load informations
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(partitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionLoadInformation>): void;
    get(partitionId: string, callback: ServiceCallback<models.PartitionLoadInformation>): void;
}

/**
 * @class
 * ReplicaLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ReplicaLoadInformations {

    /**
     * Get replica load informations
     *
     * @param {string} partitionId The id of the partition
     * 
     * @param {string} replicaId The id of the replica
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(partitionId: string, replicaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicaLoadInformation>): void;
    get(partitionId: string, replicaId: string, callback: ServiceCallback<models.ReplicaLoadInformation>): void;
}

/**
 * @class
 * ClusterLoadInformations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface ClusterLoadInformations {

    /**
     * Get cluster load informations
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterLoadInformation>): void;
    get(callback: ServiceCallback<models.ClusterLoadInformation>): void;
}

/**
 * @class
 * UpgradeProgresses
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 */
export interface UpgradeProgresses {

    /**
     * Get upgrade progresses
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterUpgradeProgress>): void;
    get(callback: ServiceCallback<models.ClusterUpgradeProgress>): void;
}
