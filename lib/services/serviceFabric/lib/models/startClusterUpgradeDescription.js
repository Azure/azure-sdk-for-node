/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes the parameters for starting a cluster upgrade.
 *
 */
class StartClusterUpgradeDescription {
  /**
   * Create a StartClusterUpgradeDescription.
   * @member {string} [codeVersion] The cluster code version.
   * @member {string} [configVersion] The cluster configuration version.
   * @member {string} [upgradeKind] Possible values include: 'Invalid',
   * 'Rolling'. Default value: 'Rolling' .
   * @member {string} [rollingUpgradeMode] Possible values include: 'Invalid',
   * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'. Default value:
   * 'UnmonitoredAuto' .
   * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds]
   * @member {boolean} [forceRestart]
   * @member {object} [monitoringPolicy]
   * @member {string} [monitoringPolicy.failureAction] Possible values include:
   * 'Invalid', 'Rollback', 'Manual'
   * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
   * @member {string}
   * [monitoringPolicy.healthCheckStableDurationInMilliseconds]
   * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
   * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds]
   * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
   * @member {object} [clusterHealthPolicy]
   * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
   * whether warnings are treated with the same severity as errors.
   * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error.
   * For example, to allow 10% of nodes to be unhealthy, this value would be
   * 10.
   *
   * The percentage represents the maximum tolerated percentage of nodes that
   * can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy node,
   * the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy nodes
   * over the total number of nodes in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of
   * nodes. Default percentage is zero.
   *
   * In large clusters, some nodes will always be down or out for repairs, so
   * this percentage should be configured to tolerate that.
   * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
   * maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this
   * value would be 10.
   *
   * The percentage represents the maximum tolerated percentage of applications
   * that can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * application, the health is evaluated as Warning.
   * This is calculated by dividing the number of unhealthy applications over
   * the total number of application instances in the cluster, excluding
   * applications of application types that are included in the
   * ApplicationTypeHealthPolicyMap.
   * The computation rounds up to tolerate one failure on small numbers of
   * applications. Default percentage is zero.
   * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap]
   * @member {boolean} [enableDeltaHealthEvaluation] When true, enables delta
   * health evaluation rather than absolute health evaluation after completion
   * of each upgrade domain.
   * @member {object} [clusterUpgradeHealthPolicy]
   * @member {number}
   * [clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes] The maximum
   * allowed percentage of nodes health degradation allowed during cluster
   * upgrades. The delta is measured between the state of the nodes at the
   * beginning of upgrade and the state of the nodes at the time of the health
   * evaluation. The check is performed after every upgrade domain upgrade
   * completion to make sure the global state of the cluster is within
   * tolerated limits. The default value is 10%.
   * @member {number}
   * [clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
   * The maximum allowed percentage of upgrade domain nodes health degradation
   * allowed during cluster upgrades. The delta is measured between the state
   * of the upgrade domain nodes at the beginning of upgrade and the state of
   * the upgrade domain nodes at the time of the health evaluation. The check
   * is performed after every upgrade domain upgrade completion for all
   * completed upgrade domains to make sure the state of the upgrade domains is
   * within tolerated limits. The default value is 15%.
   * @member {object} [applicationHealthPolicyMap]
   * @member {array} [applicationHealthPolicyMap.applicationHealthPolicyMap]
   */
  constructor() {
  }

  /**
   * Defines the metadata of StartClusterUpgradeDescription
   *
   * @returns {object} metadata of StartClusterUpgradeDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StartClusterUpgradeDescription',
      type: {
        name: 'Composite',
        className: 'StartClusterUpgradeDescription',
        modelProperties: {
          codeVersion: {
            required: false,
            serializedName: 'CodeVersion',
            type: {
              name: 'String'
            }
          },
          configVersion: {
            required: false,
            serializedName: 'ConfigVersion',
            type: {
              name: 'String'
            }
          },
          upgradeKind: {
            required: false,
            serializedName: 'UpgradeKind',
            defaultValue: 'Rolling',
            type: {
              name: 'String'
            }
          },
          rollingUpgradeMode: {
            required: false,
            serializedName: 'RollingUpgradeMode',
            defaultValue: 'UnmonitoredAuto',
            type: {
              name: 'String'
            }
          },
          upgradeReplicaSetCheckTimeoutInSeconds: {
            required: false,
            serializedName: 'UpgradeReplicaSetCheckTimeoutInSeconds',
            type: {
              name: 'Number'
            }
          },
          forceRestart: {
            required: false,
            serializedName: 'ForceRestart',
            type: {
              name: 'Boolean'
            }
          },
          monitoringPolicy: {
            required: false,
            serializedName: 'MonitoringPolicy',
            type: {
              name: 'Composite',
              className: 'MonitoringPolicyDescription'
            }
          },
          clusterHealthPolicy: {
            required: false,
            serializedName: 'ClusterHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterHealthPolicy'
            }
          },
          enableDeltaHealthEvaluation: {
            required: false,
            serializedName: 'EnableDeltaHealthEvaluation',
            type: {
              name: 'Boolean'
            }
          },
          clusterUpgradeHealthPolicy: {
            required: false,
            serializedName: 'ClusterUpgradeHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterUpgradeHealthPolicyObject'
            }
          },
          applicationHealthPolicyMap: {
            required: false,
            serializedName: 'ApplicationHealthPolicyMap',
            type: {
              name: 'Composite',
              className: 'ApplicationHealthPolicies'
            }
          }
        }
      }
    };
  }
}

module.exports = StartClusterUpgradeDescription;
