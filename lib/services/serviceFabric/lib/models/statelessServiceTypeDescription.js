/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes a stateless service type defined in the service manifest of a
 * provisioned application type.
 *
 * @extends models['ServiceTypeDescription']
 */
class StatelessServiceTypeDescription extends models['ServiceTypeDescription'] {
  /**
   * Create a StatelessServiceTypeDescription.
   * @member {boolean} [useImplicitHost] A flag indicating if this type is not
   * implemented and hosted by a user service process, but is implicitly hosted
   * by a system created process. This value is true for services using the
   * guest executable services, false otherwise.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StatelessServiceTypeDescription
   *
   * @returns {object} metadata of StatelessServiceTypeDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Stateless',
      type: {
        name: 'Composite',
        className: 'StatelessServiceTypeDescription',
        modelProperties: {
          isStateful: {
            required: false,
            serializedName: 'IsStateful',
            type: {
              name: 'Boolean'
            }
          },
          serviceTypeName: {
            required: false,
            serializedName: 'ServiceTypeName',
            type: {
              name: 'String'
            }
          },
          placementConstraints: {
            required: false,
            serializedName: 'PlacementConstraints',
            type: {
              name: 'String'
            }
          },
          servicePlacementPolicies: {
            required: false,
            serializedName: 'ServicePlacementPolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServicePlacementPolicyDescriptionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'Type',
                      clientName: 'type'
                    },
                    uberParent: 'ServicePlacementPolicyDescription',
                    className: 'ServicePlacementPolicyDescription'
                  }
              }
            }
          },
          extensions: {
            required: false,
            serializedName: 'Extensions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceTypeExtensionDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceTypeExtensionDescription'
                  }
              }
            }
          },
          kind: {
            required: true,
            serializedName: 'Kind',
            type: {
              name: 'String'
            }
          },
          useImplicitHost: {
            required: false,
            serializedName: 'UseImplicitHost',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = StatelessServiceTypeDescription;
