/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Information about code package deployed on a Service Fabric node.
 *
 */
class DeployedCodePackageInfo {
  /**
   * Create a DeployedCodePackageInfo.
   * @member {string} [name]
   * @member {string} [version] The version of the code package specified in
   * service manifest.
   * @member {string} [serviceManifestName]
   * @member {string} [servicePackageActivationId]
   * @member {string} [hostType] Possible values include: 'Invalid', 'ExeHost',
   * 'ContainerHost'
   * @member {string} [hostIsolationMode] Possible values include: 'None',
   * 'Process', 'HyperV'
   * @member {string} [status] Possible values include: 'Invalid',
   * 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating'
   * @member {string} [runFrequencyInterval] The interval at which code package
   * is run. This is used for periodic code package.
   * @member {object} [setupEntryPoint]
   * @member {string} [setupEntryPoint.entryPointLocation] The location of
   * entry point executable on the node.
   * @member {string} [setupEntryPoint.processId] The process id of the entry
   * point.
   * @member {string} [setupEntryPoint.runAsUserName] The user name under which
   * entry point executable is run on the node.
   * @member {object} [setupEntryPoint.codePackageEntryPointStatistics]
   * @member {string}
   * [setupEntryPoint.codePackageEntryPointStatistics.lastExitCode] The last
   * exit code of the entry point.
   * @member {date}
   * [setupEntryPoint.codePackageEntryPointStatistics.lastActivationTime] The
   * last time (in UTC) when Service Fabric attempted to run the entry point.
   * @member {date}
   * [setupEntryPoint.codePackageEntryPointStatistics.lastExitTime] The last
   * time (in UTC) when the entry point finished running.
   * @member {date}
   * [setupEntryPoint.codePackageEntryPointStatistics.lastSuccessfulActivationTime]
   * The last time (in UTC) when the entry point ran successfully.
   * @member {date}
   * [setupEntryPoint.codePackageEntryPointStatistics.lastSuccessfulExitTime]
   * The last time (in UTC) when the entry point finished running gracefully.
   * @member {string}
   * [setupEntryPoint.codePackageEntryPointStatistics.activationCount] Number
   * of times the entry point has run.
   * @member {string}
   * [setupEntryPoint.codePackageEntryPointStatistics.activationFailureCount]
   * Number of times the entry point failed to run.
   * @member {string}
   * [setupEntryPoint.codePackageEntryPointStatistics.continuousActivationFailureCount]
   * Number of times the entry point continuously failed to run.
   * @member {string}
   * [setupEntryPoint.codePackageEntryPointStatistics.exitCount] Number of
   * times the entry point finished running.
   * @member {string}
   * [setupEntryPoint.codePackageEntryPointStatistics.exitFailureCount] Number
   * of times the entry point failed to exit gracefully.
   * @member {string}
   * [setupEntryPoint.codePackageEntryPointStatistics.continuousExitFailureCount]
   * Number of times the entry point continuously failed to exit gracefully.
   * @member {string} [setupEntryPoint.status] Possible values include:
   * 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'
   * @member {date} [setupEntryPoint.nextActivationTime] The time (in UTC) when
   * the entry point executable will be run next.
   * @member {string} [setupEntryPoint.instanceId]
   * @member {object} [mainEntryPoint]
   * @member {string} [mainEntryPoint.entryPointLocation] The location of entry
   * point executable on the node.
   * @member {string} [mainEntryPoint.processId] The process id of the entry
   * point.
   * @member {string} [mainEntryPoint.runAsUserName] The user name under which
   * entry point executable is run on the node.
   * @member {object} [mainEntryPoint.codePackageEntryPointStatistics]
   * @member {string}
   * [mainEntryPoint.codePackageEntryPointStatistics.lastExitCode] The last
   * exit code of the entry point.
   * @member {date}
   * [mainEntryPoint.codePackageEntryPointStatistics.lastActivationTime] The
   * last time (in UTC) when Service Fabric attempted to run the entry point.
   * @member {date}
   * [mainEntryPoint.codePackageEntryPointStatistics.lastExitTime] The last
   * time (in UTC) when the entry point finished running.
   * @member {date}
   * [mainEntryPoint.codePackageEntryPointStatistics.lastSuccessfulActivationTime]
   * The last time (in UTC) when the entry point ran successfully.
   * @member {date}
   * [mainEntryPoint.codePackageEntryPointStatistics.lastSuccessfulExitTime]
   * The last time (in UTC) when the entry point finished running gracefully.
   * @member {string}
   * [mainEntryPoint.codePackageEntryPointStatistics.activationCount] Number of
   * times the entry point has run.
   * @member {string}
   * [mainEntryPoint.codePackageEntryPointStatistics.activationFailureCount]
   * Number of times the entry point failed to run.
   * @member {string}
   * [mainEntryPoint.codePackageEntryPointStatistics.continuousActivationFailureCount]
   * Number of times the entry point continuously failed to run.
   * @member {string}
   * [mainEntryPoint.codePackageEntryPointStatistics.exitCount] Number of times
   * the entry point finished running.
   * @member {string}
   * [mainEntryPoint.codePackageEntryPointStatistics.exitFailureCount] Number
   * of times the entry point failed to exit gracefully.
   * @member {string}
   * [mainEntryPoint.codePackageEntryPointStatistics.continuousExitFailureCount]
   * Number of times the entry point continuously failed to exit gracefully.
   * @member {string} [mainEntryPoint.status] Possible values include:
   * 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'
   * @member {date} [mainEntryPoint.nextActivationTime] The time (in UTC) when
   * the entry point executable will be run next.
   * @member {string} [mainEntryPoint.instanceId]
   */
  constructor() {
  }

  /**
   * Defines the metadata of DeployedCodePackageInfo
   *
   * @returns {object} metadata of DeployedCodePackageInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeployedCodePackageInfo',
      type: {
        name: 'Composite',
        className: 'DeployedCodePackageInfo',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          version: {
            required: false,
            serializedName: 'Version',
            type: {
              name: 'String'
            }
          },
          serviceManifestName: {
            required: false,
            serializedName: 'ServiceManifestName',
            type: {
              name: 'String'
            }
          },
          servicePackageActivationId: {
            required: false,
            serializedName: 'ServicePackageActivationId',
            type: {
              name: 'String'
            }
          },
          hostType: {
            required: false,
            serializedName: 'HostType',
            type: {
              name: 'String'
            }
          },
          hostIsolationMode: {
            required: false,
            serializedName: 'HostIsolationMode',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'Status',
            type: {
              name: 'String'
            }
          },
          runFrequencyInterval: {
            required: false,
            serializedName: 'RunFrequencyInterval',
            type: {
              name: 'String'
            }
          },
          setupEntryPoint: {
            required: false,
            serializedName: 'SetupEntryPoint',
            type: {
              name: 'Composite',
              className: 'CodePackageEntryPoint'
            }
          },
          mainEntryPoint: {
            required: false,
            serializedName: 'MainEntryPoint',
            type: {
              name: 'Composite',
              className: 'CodePackageEntryPoint'
            }
          }
        }
      }
    };
  }
}

module.exports = DeployedCodePackageInfo;
