/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the ClusterHealthPolicy class.
 * @constructor
 * The policy of the cluster health
 *
 * @member {string} [rollingUpgradeMode] The mode of the rolling upgrade.
 * Possible values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual',
 * 'Monitored'
 *
 * @member {boolean} [forceRestart] The flag of the force restart
 *
 * @member {string} [failureAction] The action of the failure
 *
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds] The seconds of the
 * upgrade replica set check timeout
 *
 * @member {string} [healthCheckWaitDurationInMilliseconds] The milliseconds of
 * the health check wait duration
 *
 * @member {string} [healthCheckStableDurationInMilliseconds] The milliseconds
 * of the health check stable duration
 *
 * @member {string} [healthCheckRetryTimeoutInMilliseconds] The milliseconds of
 * the health check retry timeout
 *
 * @member {string} [upgradeTimeoutInMilliseconds] The milliseconds of the
 * upgrade timeout
 *
 * @member {string} [upgradeDomainTimeoutInMilliseconds] The milliseconds of
 * the upgrade domain timeout
 *
 */
function ClusterHealthPolicy() {
}

/**
 * Defines the metadata of ClusterHealthPolicy
 *
 * @returns {object} metadata of ClusterHealthPolicy
 *
 */
ClusterHealthPolicy.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ClusterHealthPolicy',
    type: {
      name: 'Composite',
      className: 'ClusterHealthPolicy',
      modelProperties: {
        rollingUpgradeMode: {
          required: false,
          serializedName: 'RollingUpgradeMode',
          type: {
            name: 'String'
          }
        },
        forceRestart: {
          required: false,
          serializedName: 'ForceRestart',
          type: {
            name: 'Boolean'
          }
        },
        failureAction: {
          required: false,
          serializedName: 'FailureAction',
          type: {
            name: 'String'
          }
        },
        upgradeReplicaSetCheckTimeoutInSeconds: {
          required: false,
          serializedName: 'UpgradeReplicaSetCheckTimeoutInSeconds',
          type: {
            name: 'Number'
          }
        },
        healthCheckWaitDurationInMilliseconds: {
          required: false,
          serializedName: 'HealthCheckWaitDurationInMilliseconds',
          type: {
            name: 'String'
          }
        },
        healthCheckStableDurationInMilliseconds: {
          required: false,
          serializedName: 'HealthCheckStableDurationInMilliseconds',
          type: {
            name: 'String'
          }
        },
        healthCheckRetryTimeoutInMilliseconds: {
          required: false,
          serializedName: 'HealthCheckRetryTimeoutInMilliseconds',
          type: {
            name: 'String'
          }
        },
        upgradeTimeoutInMilliseconds: {
          required: false,
          serializedName: 'UpgradeTimeoutInMilliseconds',
          type: {
            name: 'String'
          }
        },
        upgradeDomainTimeoutInMilliseconds: {
          required: false,
          serializedName: 'UpgradeDomainTimeoutInMilliseconds',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ClusterHealthPolicy;
