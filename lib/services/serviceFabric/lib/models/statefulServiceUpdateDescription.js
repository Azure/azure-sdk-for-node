/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes an update for a stateful service.
 *
 * @extends models['ServiceUpdateDescription']
 */
class StatefulServiceUpdateDescription extends models['ServiceUpdateDescription'] {
  /**
   * Create a StatefulServiceUpdateDescription.
   * @member {number} [targetReplicaSetSize] The target replica set size as a
   * number.
   * @member {number} [minReplicaSetSize] The minimum replica set size as a
   * number.
   * @member {string} [replicaRestartWaitDurationSeconds] The duration, in
   * seconds, between when a replica goes down and when a new replica is
   * created.
   * @member {string} [quorumLossWaitDurationSeconds] The maximum duration, in
   * seconds, for which a partition is allowed to be in a state of quorum loss.
   * @member {string} [standByReplicaKeepDurationSeconds] The definition on how
   * long StandBy replicas should be maintained before being removed.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StatefulServiceUpdateDescription
   *
   * @returns {object} metadata of StatefulServiceUpdateDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Stateful',
      type: {
        name: 'Composite',
        className: 'StatefulServiceUpdateDescription',
        modelProperties: {
          flags: {
            required: false,
            serializedName: 'Flags',
            type: {
              name: 'String'
            }
          },
          placementConstraints: {
            required: false,
            serializedName: 'PlacementConstraints',
            type: {
              name: 'String'
            }
          },
          correlationScheme: {
            required: false,
            serializedName: 'CorrelationScheme',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceCorrelationDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceCorrelationDescription'
                  }
              }
            }
          },
          loadMetrics: {
            required: false,
            serializedName: 'LoadMetrics',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceLoadMetricDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceLoadMetricDescription'
                  }
              }
            }
          },
          servicePlacementPolicies: {
            required: false,
            serializedName: 'ServicePlacementPolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServicePlacementPolicyDescriptionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'Type',
                      clientName: 'type'
                    },
                    uberParent: 'ServicePlacementPolicyDescription',
                    className: 'ServicePlacementPolicyDescription'
                  }
              }
            }
          },
          defaultMoveCost: {
            required: false,
            serializedName: 'DefaultMoveCost',
            type: {
              name: 'String'
            }
          },
          serviceKind: {
            required: true,
            serializedName: 'ServiceKind',
            type: {
              name: 'String'
            }
          },
          targetReplicaSetSize: {
            required: false,
            serializedName: 'TargetReplicaSetSize',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          minReplicaSetSize: {
            required: false,
            serializedName: 'MinReplicaSetSize',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          replicaRestartWaitDurationSeconds: {
            required: false,
            serializedName: 'ReplicaRestartWaitDurationSeconds',
            type: {
              name: 'String'
            }
          },
          quorumLossWaitDurationSeconds: {
            required: false,
            serializedName: 'QuorumLossWaitDurationSeconds',
            type: {
              name: 'String'
            }
          },
          standByReplicaKeepDurationSeconds: {
            required: false,
            serializedName: 'StandByReplicaKeepDurationSeconds',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = StatefulServiceUpdateDescription;
