/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes the policy to be used for placement of a Service Fabric service
 * where two replicas from the same partition should never be placed in the
 * same fault or upgrade domain.
 *
 * While this is not common it can expose the service to an increased risk of
 * concurrent failures due to unplanned outages or other cases of
 * subsequent/concurrent failures. As an example, consider a case where
 * replicas are deployed across different data center, with one replica per
 * location. In the event that one of the datacenters goes offline, normally
 * the replica that was placed in that datacenter will be packed into one of
 * the remaining datacenters. If this is not desirable then this policy should
 * be set.
 *
 *
 * @extends models['ServicePlacementPolicyDescription']
 */
class ServicePlacementRequireDomainDistributionPolicyDescription extends models['ServicePlacementPolicyDescription'] {
  /**
   * Create a ServicePlacementRequireDomainDistributionPolicyDescription.
   * @member {string} [domainName] The name of the domain that should used for
   * placement as per this policy.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ServicePlacementRequireDomainDistributionPolicyDescription
   *
   * @returns {object} metadata of ServicePlacementRequireDomainDistributionPolicyDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RequireDomainDistribution',
      type: {
        name: 'Composite',
        className: 'ServicePlacementRequireDomainDistributionPolicyDescription',
        modelProperties: {
          type: {
            required: true,
            serializedName: 'Type',
            type: {
              name: 'String'
            }
          },
          domainName: {
            required: false,
            serializedName: 'DomainName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ServicePlacementRequireDomainDistributionPolicyDescription;
