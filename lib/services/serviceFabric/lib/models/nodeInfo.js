/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Information about a node in Service Fabric cluster.
 *
 */
class NodeInfo {
  /**
   * Create a NodeInfo.
   * @member {string} [name]
   * @member {string} [ipAddressOrFQDN] The IP address or fully qualified
   * domain name of the node.
   * @member {string} [type] The type of the node.
   * @member {string} [codeVersion] The version of Service Fabric binaries that
   * the node is running.
   * @member {string} [configVersion] The version of Service Fabric cluster
   * manifest that the node is using.
   * @member {string} [nodeStatus] Possible values include: 'Invalid', 'Up',
   * 'Down', 'Enabling', 'Disabling', 'Disabled', 'Unknown', 'Removed'
   * @member {string} [nodeUpTimeInSeconds] Time in seconds since the node has
   * been in NodeStatus Up. Value ero indicates that the node is not Up.
   * @member {string} [healthState] Possible values include: 'Invalid', 'Ok',
   * 'Warning', 'Error', 'Unknown'
   * @member {boolean} [isSeedNode] Indicates if the node is a seed node or
   * not. Returns true if the node is a seed node, otherwise false. A quorum of
   * seed nodes are required for proper operation of Service Fabric cluster.
   * @member {string} [upgradeDomain] The upgrade domain of the node.
   * @member {string} [faultDomain] The fault domain of the node.
   * @member {object} [id]
   * @member {string} [id.id] Value of the node Id. This is a 128 bit integer.
   * @member {string} [instanceId] The id representing the node instance. While
   * the Id of the node is deterministically generated from the node name and
   * remains same across restarts, the InstanceId changes every time node
   * restarts.
   * @member {object} [nodeDeactivationInfo]
   * @member {string} [nodeDeactivationInfo.nodeDeactivationIntent] Possible
   * values include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
   * @member {string} [nodeDeactivationInfo.nodeDeactivationStatus] Possible
   * values include: 'None', 'SafetyCheckInProgress', 'SafetyCheckComplete',
   * 'Completed'
   * @member {array} [nodeDeactivationInfo.nodeDeactivationTask]
   * @member {array} [nodeDeactivationInfo.pendingSafetyChecks]
   * @member {boolean} [isStopped] Indicates if the node is stopped by calling
   * stop node API or not. Returns true if the node is stopped, otherwise
   * false.
   * @member {string} [nodeDownTimeInSeconds] Time in seconds since the node
   * has been in NodeStatus Down. Value zero indicates node is not NodeStatus
   * Down.
   * @member {date} [nodeUpAt] Date time in UTC when the node came up. If the
   * node has never been up then this value will be zero date time.
   * @member {date} [nodeDownAt] Date time in UTC when the node went down. If
   * node has never been down then this value will be zero date time.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeInfo
   *
   * @returns {object} metadata of NodeInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeInfo',
      type: {
        name: 'Composite',
        className: 'NodeInfo',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          ipAddressOrFQDN: {
            required: false,
            serializedName: 'IpAddressOrFQDN',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'Type',
            type: {
              name: 'String'
            }
          },
          codeVersion: {
            required: false,
            serializedName: 'CodeVersion',
            type: {
              name: 'String'
            }
          },
          configVersion: {
            required: false,
            serializedName: 'ConfigVersion',
            type: {
              name: 'String'
            }
          },
          nodeStatus: {
            required: false,
            serializedName: 'NodeStatus',
            type: {
              name: 'String'
            }
          },
          nodeUpTimeInSeconds: {
            required: false,
            serializedName: 'NodeUpTimeInSeconds',
            type: {
              name: 'String'
            }
          },
          healthState: {
            required: false,
            serializedName: 'HealthState',
            type: {
              name: 'String'
            }
          },
          isSeedNode: {
            required: false,
            serializedName: 'IsSeedNode',
            type: {
              name: 'Boolean'
            }
          },
          upgradeDomain: {
            required: false,
            serializedName: 'UpgradeDomain',
            type: {
              name: 'String'
            }
          },
          faultDomain: {
            required: false,
            serializedName: 'FaultDomain',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            serializedName: 'Id',
            type: {
              name: 'Composite',
              className: 'NodeId'
            }
          },
          instanceId: {
            required: false,
            serializedName: 'InstanceId',
            type: {
              name: 'String'
            }
          },
          nodeDeactivationInfo: {
            required: false,
            serializedName: 'NodeDeactivationInfo',
            type: {
              name: 'Composite',
              className: 'NodeDeactivationInfo'
            }
          },
          isStopped: {
            required: false,
            serializedName: 'IsStopped',
            type: {
              name: 'Boolean'
            }
          },
          nodeDownTimeInSeconds: {
            required: false,
            serializedName: 'NodeDownTimeInSeconds',
            type: {
              name: 'String'
            }
          },
          nodeUpAt: {
            required: false,
            serializedName: 'NodeUpAt',
            type: {
              name: 'DateTime'
            }
          },
          nodeDownAt: {
            required: false,
            serializedName: 'NodeDownAt',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = NodeInfo;
