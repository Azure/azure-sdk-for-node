/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The cluster health chunk query description, which can specify the health
 * policies to evaluate cluster health and very expressive filters to select
 * which cluster entities to include in response.
 *
 */
class ClusterHealthChunkQueryDescription {
  /**
   * Create a ClusterHealthChunkQueryDescription.
   * @member {array} [nodeFilters] Defines a list of filters that specify which
   * nodes to be included in the returned cluster health chunk.
   * If no filters are specified, no nodes are returned. All the nodes are used
   * to evaluate the cluster's aggregated health state, regardless of the input
   * filters.
   * The cluster health chunk query may specify multiple node filters.
   * For example, it can specify a filter to return all nodes with health state
   * Error and another filter to always include a node identified by its
   * NodeName.
   * @member {array} [applicationFilters] Defines a list of filters that
   * specify which applications to be included in the returned cluster health
   * chunk.
   * If no filters are specified, no applications are returned. All the
   * applications are used to evaluate the cluster's aggregated health state,
   * regardless of the input filters.
   * The cluster health chunk query may specify multiple application filters.
   * For example, it can specify a filter to return all applications with
   * health state Error and another filter to always include applications of a
   * specified application type.
   * @member {object} [clusterHealthPolicy]
   * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
   * whether warnings are treated with the same severity as errors.
   * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error.
   * For example, to allow 10% of nodes to be unhealthy, this value would be
   * 10.
   *
   * The percentage represents the maximum tolerated percentage of nodes that
   * can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy node,
   * the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy nodes
   * over the total number of nodes in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of
   * nodes. Default percentage is zero.
   *
   * In large clusters, some nodes will always be down or out for repairs, so
   * this percentage should be configured to tolerate that.
   * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
   * maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this
   * value would be 10.
   *
   * The percentage represents the maximum tolerated percentage of applications
   * that can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * application, the health is evaluated as Warning.
   * This is calculated by dividing the number of unhealthy applications over
   * the total number of application instances in the cluster, excluding
   * applications of application types that are included in the
   * ApplicationTypeHealthPolicyMap.
   * The computation rounds up to tolerate one failure on small numbers of
   * applications. Default percentage is zero.
   * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap]
   * @member {object} [applicationHealthPolicies]
   * @member {array} [applicationHealthPolicies.applicationHealthPolicyMap]
   */
  constructor() {
  }

  /**
   * Defines the metadata of ClusterHealthChunkQueryDescription
   *
   * @returns {object} metadata of ClusterHealthChunkQueryDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterHealthChunkQueryDescription',
      type: {
        name: 'Composite',
        className: 'ClusterHealthChunkQueryDescription',
        modelProperties: {
          nodeFilters: {
            required: false,
            serializedName: 'NodeFilters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeHealthStateFilterElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeHealthStateFilter'
                  }
              }
            }
          },
          applicationFilters: {
            required: false,
            serializedName: 'ApplicationFilters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationHealthStateFilterElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationHealthStateFilter'
                  }
              }
            }
          },
          clusterHealthPolicy: {
            required: false,
            serializedName: 'ClusterHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterHealthPolicy'
            }
          },
          applicationHealthPolicies: {
            required: false,
            serializedName: 'ApplicationHealthPolicies',
            type: {
              name: 'Composite',
              className: 'ApplicationHealthPolicies'
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterHealthChunkQueryDescription;
