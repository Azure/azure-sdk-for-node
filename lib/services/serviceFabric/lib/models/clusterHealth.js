/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents the health of the cluster.
 * Contains the cluster aggregated health state, the cluster application and
 * node health states as well as the health events and the unhealthy
 * evaluations.
 *
 *
 * @extends models['EntityHealth']
 */
class ClusterHealth extends models['EntityHealth'] {
  /**
   * Create a ClusterHealth.
   * @member {array} [nodeHealthStates] Cluster node health states as found in
   * the health store.
   * @member {array} [applicationHealthStates] Cluster application health
   * states as found in the health store.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ClusterHealth
   *
   * @returns {object} metadata of ClusterHealth
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterHealth',
      type: {
        name: 'Composite',
        className: 'ClusterHealth',
        modelProperties: {
          aggregatedHealthState: {
            required: false,
            serializedName: 'AggregatedHealthState',
            type: {
              name: 'String'
            }
          },
          healthEvents: {
            required: false,
            serializedName: 'HealthEvents',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthEventElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthEvent'
                  }
              }
            }
          },
          unhealthyEvaluations: {
            required: false,
            serializedName: 'UnhealthyEvaluations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthEvaluationWrapperElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthEvaluationWrapper'
                  }
              }
            }
          },
          healthStatistics: {
            required: false,
            serializedName: 'HealthStatistics',
            type: {
              name: 'Composite',
              className: 'HealthStatistics'
            }
          },
          nodeHealthStates: {
            required: false,
            serializedName: 'NodeHealthStates',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeHealthStateElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeHealthState'
                  }
              }
            }
          },
          applicationHealthStates: {
            required: false,
            serializedName: 'ApplicationHealthStates',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationHealthStateElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationHealthState'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterHealth;
