/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Information about a Service Fabric service replica deployed on a node.
 *
 */
class DeployedServiceReplicaInfo {
  /**
   * Create a DeployedServiceReplicaInfo.
   * @member {string} [serviceName]
   * @member {string} [serviceTypeName]
   * @member {string} [serviceManifestName]
   * @member {string} [codePackageName]
   * @member {uuid} [partitionId]
   * @member {string} [replicaStatus] Possible values include: 'Invalid',
   * 'InBuild', 'Standby', 'Ready', 'Down', 'Dropped'
   * @member {string} [address] The last address returned by the replica in
   * Open or ChangeRole.
   * @member {string} [servicePackageActivationId]
   * @member {string} [hostProcessId] Host process id of the process that is
   * hosting the replica. This will be zero if the replica is down. In hyper-v
   * containers this host process id will be from different kernel.
   * @member {string} serviceKind Polymorphic Discriminator
   */
  constructor() {
  }

  /**
   * Defines the metadata of DeployedServiceReplicaInfo
   *
   * @returns {object} metadata of DeployedServiceReplicaInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeployedServiceReplicaInfo',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'ServiceKind',
          clientName: 'serviceKind'
        },
        uberParent: 'DeployedServiceReplicaInfo',
        className: 'DeployedServiceReplicaInfo',
        modelProperties: {
          serviceName: {
            required: false,
            serializedName: 'ServiceName',
            type: {
              name: 'String'
            }
          },
          serviceTypeName: {
            required: false,
            serializedName: 'ServiceTypeName',
            type: {
              name: 'String'
            }
          },
          serviceManifestName: {
            required: false,
            serializedName: 'ServiceManifestName',
            type: {
              name: 'String'
            }
          },
          codePackageName: {
            required: false,
            serializedName: 'CodePackageName',
            type: {
              name: 'String'
            }
          },
          partitionId: {
            required: false,
            serializedName: 'PartitionId',
            type: {
              name: 'String'
            }
          },
          replicaStatus: {
            required: false,
            serializedName: 'ReplicaStatus',
            type: {
              name: 'String'
            }
          },
          address: {
            required: false,
            serializedName: 'Address',
            type: {
              name: 'String'
            }
          },
          servicePackageActivationId: {
            required: false,
            serializedName: 'ServicePackageActivationId',
            type: {
              name: 'String'
            }
          },
          hostProcessId: {
            required: false,
            serializedName: 'HostProcessId',
            type: {
              name: 'String'
            }
          },
          serviceKind: {
            required: true,
            serializedName: 'ServiceKind',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DeployedServiceReplicaInfo;
