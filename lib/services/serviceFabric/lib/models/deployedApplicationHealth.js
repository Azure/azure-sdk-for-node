/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealth class.
 * @constructor
 * The health of the deployed application
 *
 * @member {array} [healthEvents]
 * 
 * @member {string} [aggregatedHealthState] Possible values include:
 * 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * 
 * @member {string} [unhealthyEvaluations]
 * 
 * @member {string} [name]
 * 
 * @member {string} [nodeName]
 * 
 * @member {object} [deployedServicePackageHealthStates]
 * 
 * @member {string} [deployedServicePackageHealthStates.applicationName]
 * 
 * @member {string} [deployedServicePackageHealthStates.serviceManifestName]
 * 
 * @member {string} [deployedServicePackageHealthStates.nodeName]
 * 
 * @member {string} [deployedServicePackageHealthStates.aggregatedHealthState]
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * 
 */
function DeployedApplicationHealth() {
}

/**
 * Defines the metadata of DeployedApplicationHealth
 *
 * @returns {object} metadata of DeployedApplicationHealth
 *
 */
DeployedApplicationHealth.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DeployedApplicationHealth',
    type: {
      name: 'Composite',
      className: 'DeployedApplicationHealth',
      modelProperties: {
        healthEvents: {
          required: false,
          serializedName: 'HealthEvents',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'HealthEventElementType',
                type: {
                  name: 'Composite',
                  className: 'HealthEvent'
                }
            }
          }
        },
        aggregatedHealthState: {
          required: false,
          serializedName: 'AggregatedHealthState',
          type: {
            name: 'String'
          }
        },
        unhealthyEvaluations: {
          required: false,
          serializedName: 'UnhealthyEvaluations',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'Name',
          type: {
            name: 'String'
          }
        },
        nodeName: {
          required: false,
          serializedName: 'NodeName',
          type: {
            name: 'String'
          }
        },
        deployedServicePackageHealthStates: {
          required: false,
          serializedName: 'DeployedServicePackageHealthStates',
          type: {
            name: 'Composite',
            className: 'DeployedServicePackageHealthState'
          }
        }
      }
    }
  };
};

module.exports = DeployedApplicationHealth;
