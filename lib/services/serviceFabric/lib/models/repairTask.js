/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents a repair task, which includes information about what kind of
 * repair was requested, what its progress is, and what its final result was.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 *
 */
class RepairTask {
  /**
   * Create a RepairTask.
   * @member {string} taskId The ID of the repair task.
   * @member {string} [version] The version of the repair task.
   * When creating a new repair task, the version must be set to zero.  When
   * updating a repair task,
   * the version is used for optimistic concurrency checks.  If the version is
   * set to zero, the update will not check for write conflicts.  If the
   * version is set to a non-zero value, then the
   * update will only succeed if the actual current version of the repair task
   * matches this value.
   * @member {string} [description] A description of the purpose of the repair
   * task, or other informational details.
   * May be set when the repair task is created, and is immutable once set.
   * @member {string} state The workflow state of the repair task. Valid
   * initial states are Created, Claimed, and Preparing.
   *
   * - Invalid - Indicates that the repair task state is invalid. All Service
   * Fabric enumerations have the invalid value.
   * - Created - Indicates that the repair task has been created.
   * - Claimed - Indicates that the repair task has been claimed by a repair
   * executor.
   * - Preparing - Indicates that the Repair Manager is preparing the system to
   * handle the impact of the repair task, usually by taking resources offline
   * gracefully.
   * - Approved - Indicates that the repair task has been approved by the
   * Repair Manager and is safe to execute.
   * - Executing - Indicates that execution of the repair task is in progress.
   * - Restoring - Indicates that the Repair Manager is restoring the system to
   * its pre-repair state, usually by bringing resources back online.
   * - Completed - Indicates that the repair task has completed, and no further
   * state changes will occur.
   * . Possible values include: 'Invalid', 'Created', 'Claimed', 'Preparing',
   * 'Approved', 'Executing', 'Restoring', 'Completed'
   * @member {number} [flags] A bitwise-OR of the following values, which gives
   * additional details about the status of the repair task.
   * - 1 - Cancellation of the repair has been requested
   * - 2 - Abort of the repair has been requested
   * - 4 - Approval of the repair was forced via client request
   * @member {string} action The requested repair action. Must be specified
   * when the repair task is created, and is immutable once set.
   * @member {object} [target]
   * @member {string} [target.kind] Polymorphic Discriminator
   * @member {string} [executor] The name of the repair executor. Must be
   * specified in Claimed and later states, and is immutable once set.
   * @member {string} [executorData] A data string that the repair executor can
   * use to store its internal state.
   * @member {object} [impact]
   * @member {string} [impact.kind] Polymorphic Discriminator
   * @member {string} [resultStatus] A value describing the overall result of
   * the repair task execution.
   * Must be specified in the Restoring and later states, and is immutable once
   * set.
   *
   * - Invalid - Indicates that the repair task result is invalid. All Service
   * Fabric enumerations have the invalid value.
   * - Succeeded - Indicates that the repair task completed execution
   * successfully.
   * - Cancelled - Indicates that the repair task was cancelled prior to
   * execution.
   * - Interrupted - Indicates that execution of the repair task was
   * interrupted by a cancellation request after some work had already been
   * performed.
   * - Failed - Indicates that there was a failure during execution of the
   * repair task. Some work may have been performed.
   * - Pending - Indicates that the repair task result is not yet available,
   * because the repair task has not finished executing.
   * . Possible values include: 'Invalid', 'Succeeded', 'Cancelled',
   * 'Interrupted', 'Failed', 'Pending'
   * @member {number} [resultCode] A numeric value providing additional details
   * about the result of the repair task execution.
   * May be specified in the Restoring and later states, and is immutable once
   * set.
   * @member {string} [resultDetails] A string providing additional details
   * about the result of the repair task execution.
   * May be specified in the Restoring and later states, and is immutable once
   * set.
   * @member {object} [history]
   * @member {date} [history.createdUtcTimestamp] The time when the repair task
   * entered the Created state.
   * @member {date} [history.claimedUtcTimestamp] The time when the repair task
   * entered the Claimed state.
   * @member {date} [history.preparingUtcTimestamp] The time when the repair
   * task entered the Preparing state.
   * @member {date} [history.approvedUtcTimestamp] The time when the repair
   * task entered the Approved state
   * @member {date} [history.executingUtcTimestamp] The time when the repair
   * task entered the Executing state
   * @member {date} [history.restoringUtcTimestamp] The time when the repair
   * task entered the Restoring state
   * @member {date} [history.completedUtcTimestamp] The time when the repair
   * task entered the Completed state
   * @member {date} [history.preparingHealthCheckStartUtcTimestamp] The time
   * when the repair task started the health check in the Preparing state.
   * @member {date} [history.preparingHealthCheckEndUtcTimestamp] The time when
   * the repair task completed the health check in the Preparing state.
   * @member {date} [history.restoringHealthCheckStartUtcTimestamp] The time
   * when the repair task started the health check in the Restoring state.
   * @member {date} [history.restoringHealthCheckEndUtcTimestamp] The time when
   * the repair task completed the health check in the Restoring state.
   * @member {string} [preparingHealthCheckState] Possible values include:
   * 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
   * @member {string} [restoringHealthCheckState] Possible values include:
   * 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
   * @member {boolean} [performPreparingHealthCheck] A value to determine if
   * health checks will be performed when the repair task enters the Preparing
   * state.
   * @member {boolean} [performRestoringHealthCheck] A value to determine if
   * health checks will be performed when the repair task enters the Restoring
   * state.
   */
  constructor() {
  }

  /**
   * Defines the metadata of RepairTask
   *
   * @returns {object} metadata of RepairTask
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RepairTask',
      type: {
        name: 'Composite',
        className: 'RepairTask',
        modelProperties: {
          taskId: {
            required: true,
            serializedName: 'TaskId',
            type: {
              name: 'String'
            }
          },
          version: {
            required: false,
            serializedName: 'Version',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'Description',
            type: {
              name: 'String'
            }
          },
          state: {
            required: true,
            serializedName: 'State',
            type: {
              name: 'String'
            }
          },
          flags: {
            required: false,
            serializedName: 'Flags',
            type: {
              name: 'Number'
            }
          },
          action: {
            required: true,
            serializedName: 'Action',
            type: {
              name: 'String'
            }
          },
          target: {
            required: false,
            serializedName: 'Target',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'Kind',
                clientName: 'kind'
              },
              uberParent: 'RepairTargetDescriptionBase',
              className: 'RepairTargetDescriptionBase'
            }
          },
          executor: {
            required: false,
            serializedName: 'Executor',
            type: {
              name: 'String'
            }
          },
          executorData: {
            required: false,
            serializedName: 'ExecutorData',
            type: {
              name: 'String'
            }
          },
          impact: {
            required: false,
            serializedName: 'Impact',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'Kind',
                clientName: 'kind'
              },
              uberParent: 'RepairImpactDescriptionBase',
              className: 'RepairImpactDescriptionBase'
            }
          },
          resultStatus: {
            required: false,
            serializedName: 'ResultStatus',
            type: {
              name: 'String'
            }
          },
          resultCode: {
            required: false,
            serializedName: 'ResultCode',
            type: {
              name: 'Number'
            }
          },
          resultDetails: {
            required: false,
            serializedName: 'ResultDetails',
            type: {
              name: 'String'
            }
          },
          history: {
            required: false,
            serializedName: 'History',
            type: {
              name: 'Composite',
              className: 'RepairTaskHistory'
            }
          },
          preparingHealthCheckState: {
            required: false,
            serializedName: 'PreparingHealthCheckState',
            type: {
              name: 'String'
            }
          },
          restoringHealthCheckState: {
            required: false,
            serializedName: 'RestoringHealthCheckState',
            type: {
              name: 'String'
            }
          },
          performPreparingHealthCheck: {
            required: false,
            serializedName: 'PerformPreparingHealthCheck',
            type: {
              name: 'Boolean'
            }
          },
          performRestoringHealthCheck: {
            required: false,
            serializedName: 'PerformRestoringHealthCheck',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = RepairTask;
