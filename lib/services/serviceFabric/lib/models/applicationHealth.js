/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents the health of the application. Contains the application
 * aggregated health state and the service and deployed application health
 * states.
 *
 * @extends models['EntityHealth']
 */
class ApplicationHealth extends models['EntityHealth'] {
  /**
   * Create a ApplicationHealth.
   * @member {string} [name]
   * @member {array} [serviceHealthStates] Service health states as found in
   * the health store.
   * @member {array} [deployedApplicationHealthStates] Deployed application
   * health states as found in the health store.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApplicationHealth
   *
   * @returns {object} metadata of ApplicationHealth
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicationHealth',
      type: {
        name: 'Composite',
        className: 'ApplicationHealth',
        modelProperties: {
          aggregatedHealthState: {
            required: false,
            serializedName: 'AggregatedHealthState',
            type: {
              name: 'String'
            }
          },
          healthEvents: {
            required: false,
            serializedName: 'HealthEvents',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthEventElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthEvent'
                  }
              }
            }
          },
          unhealthyEvaluations: {
            required: false,
            serializedName: 'UnhealthyEvaluations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthEvaluationWrapperElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthEvaluationWrapper'
                  }
              }
            }
          },
          healthStatistics: {
            required: false,
            serializedName: 'HealthStatistics',
            type: {
              name: 'Composite',
              className: 'HealthStatistics'
            }
          },
          name: {
            required: false,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          serviceHealthStates: {
            required: false,
            serializedName: 'ServiceHealthStates',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceHealthStateElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceHealthState'
                  }
              }
            }
          },
          deployedApplicationHealthStates: {
            required: false,
            serializedName: 'DeployedApplicationHealthStates',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DeployedApplicationHealthStateElementType',
                  type: {
                    name: 'Composite',
                    className: 'DeployedApplicationHealthState'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicationHealth;
