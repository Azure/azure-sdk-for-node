/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the UpdateApplicationUpgrade class.
 * @constructor
 * The description of the update application upgrade
 *
 * @member {string} [name]
 *
 * @member {string} [upgradeKind]
 *
 * @member {object} [updateDescription]
 *
 * @member {string} [updateDescription.rollingUpgradeMode] The mode of the
 * rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'
 *
 * @member {boolean} [updateDescription.forceRestart] The flag of the force
 * restart
 *
 * @member {string} [updateDescription.failureAction] The action of the failure
 *
 * @member {number} [updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
 * The seconds of the upgrade replica set check timeout
 *
 * @member {string} [updateDescription.healthCheckWaitDurationInMilliseconds]
 * The seconds of the health check wait duration
 *
 * @member {string} [updateDescription.healthCheckStableDurationInMilliseconds]
 * The seconds of the health check stable duration
 *
 * @member {string} [updateDescription.healthCheckRetryTimeoutInMilliseconds]
 * The milliseconds of the health check retry timeout
 *
 * @member {string} [updateDescription.upgradeTimeoutInMilliseconds] The
 * milliseconds of the upgrade timeout
 *
 * @member {string} [updateDescription.upgradeDomainTimeoutInMilliseconds] The
 * milliseconds of the upgrade domain timeout
 *
 * @member {object} [applicationHealthPolicy]
 *
 * @member {boolean} [applicationHealthPolicy.considerWarningAsError]
 *
 * @member {number}
 * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 *
 * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The policy of the default service type health
 *
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 *
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 *
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 *
 */
function UpdateApplicationUpgrade() {
}

/**
 * Defines the metadata of UpdateApplicationUpgrade
 *
 * @returns {object} metadata of UpdateApplicationUpgrade
 *
 */
UpdateApplicationUpgrade.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'UpdateApplicationUpgrade',
    type: {
      name: 'Composite',
      className: 'UpdateApplicationUpgrade',
      modelProperties: {
        name: {
          required: false,
          serializedName: 'Name',
          type: {
            name: 'String'
          }
        },
        upgradeKind: {
          required: false,
          serializedName: 'UpgradeKind',
          type: {
            name: 'String'
          }
        },
        updateDescription: {
          required: false,
          serializedName: 'UpdateDescription',
          type: {
            name: 'Composite',
            className: 'UpdateDescription'
          }
        },
        applicationHealthPolicy: {
          required: false,
          serializedName: 'ApplicationHealthPolicy',
          type: {
            name: 'Composite',
            className: 'ApplicationHealthPolicy'
          }
        }
      }
    }
  };
};

module.exports = UpdateApplicationUpgrade;
