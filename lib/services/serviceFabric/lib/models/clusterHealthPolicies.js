/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Health policies to evaluate cluster health.
 *
 */
class ClusterHealthPolicies {
  /**
   * Create a ClusterHealthPolicies.
   * @member {array} [applicationHealthPolicyMap]
   * @member {object} [clusterHealthPolicy]
   * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
   * whether warnings are treated with the same severity as errors.
   * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error.
   * For example, to allow 10% of nodes to be unhealthy, this value would be
   * 10.
   *
   * The percentage represents the maximum tolerated percentage of nodes that
   * can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy node,
   * the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy nodes
   * over the total number of nodes in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of
   * nodes. Default percentage is zero.
   *
   * In large clusters, some nodes will always be down or out for repairs, so
   * this percentage should be configured to tolerate that.
   * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
   * maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this
   * value would be 10.
   *
   * The percentage represents the maximum tolerated percentage of applications
   * that can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * application, the health is evaluated as Warning.
   * This is calculated by dividing the number of unhealthy applications over
   * the total number of application instances in the cluster, excluding
   * applications of application types that are included in the
   * ApplicationTypeHealthPolicyMap.
   * The computation rounds up to tolerate one failure on small numbers of
   * applications. Default percentage is zero.
   * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap]
   */
  constructor() {
  }

  /**
   * Defines the metadata of ClusterHealthPolicies
   *
   * @returns {object} metadata of ClusterHealthPolicies
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterHealthPolicies',
      type: {
        name: 'Composite',
        className: 'ClusterHealthPolicies',
        modelProperties: {
          applicationHealthPolicyMap: {
            required: false,
            serializedName: 'ApplicationHealthPolicyMap',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationHealthPolicyMapItemElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationHealthPolicyMapItem'
                  }
              }
            }
          },
          clusterHealthPolicy: {
            required: false,
            serializedName: 'ClusterHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterHealthPolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterHealthPolicies;
