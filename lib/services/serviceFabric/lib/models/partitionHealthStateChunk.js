/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents the health state chunk of a partition, which contains the
 * partition id, its aggregated health state and any replicas that respect the
 * filters in the cluster health chunk query description.
 *
 *
 * @extends models['EntityHealthStateChunk']
 */
class PartitionHealthStateChunk extends models['EntityHealthStateChunk'] {
  /**
   * Create a PartitionHealthStateChunk.
   * @member {uuid} [partitionId]
   * @member {object} [replicaHealthStateChunks]
   * @member {array} [replicaHealthStateChunks.items] The list of replica
   * health state chunks that respect the input filters in the chunk query.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PartitionHealthStateChunk
   *
   * @returns {object} metadata of PartitionHealthStateChunk
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PartitionHealthStateChunk',
      type: {
        name: 'Composite',
        className: 'PartitionHealthStateChunk',
        modelProperties: {
          healthState: {
            required: false,
            serializedName: 'HealthState',
            type: {
              name: 'String'
            }
          },
          partitionId: {
            required: false,
            serializedName: 'PartitionId',
            type: {
              name: 'String'
            }
          },
          replicaHealthStateChunks: {
            required: false,
            serializedName: 'ReplicaHealthStateChunks',
            type: {
              name: 'Composite',
              className: 'ReplicaHealthStateChunkList'
            }
          }
        }
      }
    };
  }
}

module.exports = PartitionHealthStateChunk;
