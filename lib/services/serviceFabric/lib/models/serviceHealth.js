/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Information about the health of a Service Fabric service.
 *
 * @extends models['EntityHealth']
 */
class ServiceHealth extends models['EntityHealth'] {
  /**
   * Create a ServiceHealth.
   * @member {string} [name]
   * @member {array} [partitionHealthStates] The list of partition health
   * states associated with the service.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ServiceHealth
   *
   * @returns {object} metadata of ServiceHealth
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServiceHealth',
      type: {
        name: 'Composite',
        className: 'ServiceHealth',
        modelProperties: {
          aggregatedHealthState: {
            required: false,
            serializedName: 'AggregatedHealthState',
            type: {
              name: 'String'
            }
          },
          healthEvents: {
            required: false,
            serializedName: 'HealthEvents',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthEventElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthEvent'
                  }
              }
            }
          },
          unhealthyEvaluations: {
            required: false,
            serializedName: 'UnhealthyEvaluations',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthEvaluationWrapperElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthEvaluationWrapper'
                  }
              }
            }
          },
          healthStatistics: {
            required: false,
            serializedName: 'HealthStatistics',
            type: {
              name: 'Composite',
              className: 'HealthStatistics'
            }
          },
          name: {
            required: false,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          partitionHealthStates: {
            required: false,
            serializedName: 'PartitionHealthStates',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PartitionHealthStateElementType',
                  type: {
                    name: 'Composite',
                    className: 'PartitionHealthState'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ServiceHealth;
