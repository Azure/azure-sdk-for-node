/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the LoadMetricInformation class.
 * @constructor
 * @member {string} [name]
 * 
 * @member {boolean} [isBalancedBefore]
 * 
 * @member {boolean} [isBalancedAfter]
 * 
 * @member {number} [deviationBefore]
 * 
 * @member {number} [deviationAfter]
 * 
 * @member {number} [balancingThreshold]
 * 
 * @member {string} [action]
 * 
 * @member {number} [activityThreshold]
 * 
 * @member {string} [clusterCapacity]
 * 
 * @member {string} [clusterLoad]
 * 
 * @member {string} [remainingUnbufferedCapacity]
 * 
 * @member {number} [nodeBufferPercentage]
 * 
 * @member {string} [bufferedCapacity]
 * 
 * @member {string} [remainingBufferedCapacity]
 * 
 * @member {boolean} [isClusterCapacityViolation]
 * 
 * @member {string} [minNodeLoadValue]
 * 
 * @member {object} [minNodeLoadId]
 * 
 * @member {string} [minNodeLoadId.id]
 * 
 * @member {string} [maxNodeLoadValue]
 * 
 * @member {object} [maxNodeLoadId]
 * 
 * @member {string} [maxNodeLoadId.id]
 * 
 */
function LoadMetricInformation() {
}

/**
 * Defines the metadata of LoadMetricInformation
 *
 * @returns {object} metadata of LoadMetricInformation
 *
 */
LoadMetricInformation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'LoadMetricInformation',
    type: {
      name: 'Composite',
      className: 'LoadMetricInformation',
      modelProperties: {
        name: {
          required: false,
          serializedName: 'Name',
          type: {
            name: 'String'
          }
        },
        isBalancedBefore: {
          required: false,
          serializedName: 'IsBalancedBefore',
          type: {
            name: 'Boolean'
          }
        },
        isBalancedAfter: {
          required: false,
          serializedName: 'IsBalancedAfter',
          type: {
            name: 'Boolean'
          }
        },
        deviationBefore: {
          required: false,
          serializedName: 'DeviationBefore',
          type: {
            name: 'Number'
          }
        },
        deviationAfter: {
          required: false,
          serializedName: 'DeviationAfter',
          type: {
            name: 'Number'
          }
        },
        balancingThreshold: {
          required: false,
          serializedName: 'BalancingThreshold',
          type: {
            name: 'Number'
          }
        },
        action: {
          required: false,
          serializedName: 'Action',
          type: {
            name: 'String'
          }
        },
        activityThreshold: {
          required: false,
          serializedName: 'ActivityThreshold',
          type: {
            name: 'Number'
          }
        },
        clusterCapacity: {
          required: false,
          serializedName: 'ClusterCapacity',
          type: {
            name: 'String'
          }
        },
        clusterLoad: {
          required: false,
          serializedName: 'ClusterLoad',
          type: {
            name: 'String'
          }
        },
        remainingUnbufferedCapacity: {
          required: false,
          serializedName: 'RemainingUnbufferedCapacity',
          type: {
            name: 'String'
          }
        },
        nodeBufferPercentage: {
          required: false,
          serializedName: 'NodeBufferPercentage',
          type: {
            name: 'Number'
          }
        },
        bufferedCapacity: {
          required: false,
          serializedName: 'BufferedCapacity',
          type: {
            name: 'String'
          }
        },
        remainingBufferedCapacity: {
          required: false,
          serializedName: 'RemainingBufferedCapacity',
          type: {
            name: 'String'
          }
        },
        isClusterCapacityViolation: {
          required: false,
          serializedName: 'IsClusterCapacityViolation',
          type: {
            name: 'Boolean'
          }
        },
        minNodeLoadValue: {
          required: false,
          serializedName: 'MinNodeLoadValue',
          type: {
            name: 'String'
          }
        },
        minNodeLoadId: {
          required: false,
          serializedName: 'MinNodeLoadId',
          type: {
            name: 'Composite',
            className: 'LoadMetricInformationMinNodeLoadId'
          }
        },
        maxNodeLoadValue: {
          required: false,
          serializedName: 'MaxNodeLoadValue',
          type: {
            name: 'String'
          }
        },
        maxNodeLoadId: {
          required: false,
          serializedName: 'MaxNodeLoadId',
          type: {
            name: 'Composite',
            className: 'LoadMetricInformationMaxNodeLoadId'
          }
        }
      }
    }
  };
};

module.exports = LoadMetricInformation;
