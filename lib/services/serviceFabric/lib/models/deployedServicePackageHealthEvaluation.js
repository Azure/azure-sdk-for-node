/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealthEvaluation class.
 * @constructor
 * The evaluation of the deployed service package health
 *
 * @member {string} [applicationName]
 *
 * @member {string} [nodeName]
 *
 * @member {string} [serviceManifestName]
 *
 * @member {array} [unhealthyEvaluations]
 *
 */
function DeployedServicePackageHealthEvaluation() {
  DeployedServicePackageHealthEvaluation['super_'].call(this);
}

util.inherits(DeployedServicePackageHealthEvaluation, models['HealthEvaluation']);

/**
 * Defines the metadata of DeployedServicePackageHealthEvaluation
 *
 * @returns {object} metadata of DeployedServicePackageHealthEvaluation
 *
 */
DeployedServicePackageHealthEvaluation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DeployedServicePackage',
    type: {
      name: 'Composite',
      className: 'DeployedServicePackageHealthEvaluation',
      modelProperties: {
        description: {
          required: false,
          serializedName: 'Description',
          type: {
            name: 'String'
          }
        },
        aggregatedHealthState: {
          required: false,
          serializedName: 'AggregatedHealthState',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: true,
          serializedName: 'Kind',
          type: {
            name: 'String'
          }
        },
        applicationName: {
          required: false,
          serializedName: 'ApplicationName',
          type: {
            name: 'String'
          }
        },
        nodeName: {
          required: false,
          serializedName: 'NodeName',
          type: {
            name: 'String'
          }
        },
        serviceManifestName: {
          required: false,
          serializedName: 'ServiceManifestName',
          type: {
            name: 'String'
          }
        },
        unhealthyEvaluations: {
          required: false,
          serializedName: 'UnhealthyEvaluations',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'UnhealthyEvaluationElementType',
                type: {
                  name: 'Composite',
                  className: 'UnhealthyEvaluation'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = DeployedServicePackageHealthEvaluation;
