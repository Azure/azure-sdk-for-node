/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the StartApplicationUpgrade class.
 * @constructor
 * The description of the start application upgrade
 *
 * @member {string} [name]
 *
 * @member {string} [targetApplicationTypeVersion]
 *
 * @member {array} [parameters]
 *
 * @member {string} [upgradeKind] Possible values include: 'Invalid', 'Rolling'
 *
 * @member {string} [rollingUpgradeMode] Possible values include: 'Invalid',
 * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
 *
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds]
 *
 * @member {boolean} [forceRestart]
 *
 * @member {object} [monitoringPolicy]
 *
 * @member {string} [monitoringPolicy.failureAction]
 *
 * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 *
 * @member {string} [monitoringPolicy.healthCheckStableDurationInMilliseconds]
 *
 * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 *
 * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds]
 *
 * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds]
 *
 * @member {object} [applicationHealthPolicy]
 *
 * @member {boolean} [applicationHealthPolicy.considerWarningAsError]
 *
 * @member {number}
 * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 *
 * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The policy of the default service type health
 *
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 *
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 *
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 *
 */
function StartApplicationUpgrade() {
}

/**
 * Defines the metadata of StartApplicationUpgrade
 *
 * @returns {object} metadata of StartApplicationUpgrade
 *
 */
StartApplicationUpgrade.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'StartApplicationUpgrade',
    type: {
      name: 'Composite',
      className: 'StartApplicationUpgrade',
      modelProperties: {
        name: {
          required: false,
          serializedName: 'Name',
          type: {
            name: 'String'
          }
        },
        targetApplicationTypeVersion: {
          required: false,
          serializedName: 'TargetApplicationTypeVersion',
          type: {
            name: 'String'
          }
        },
        parameters: {
          required: false,
          serializedName: 'Parameters',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StartApplicationUpgradeParametersItemElementType',
                type: {
                  name: 'Composite',
                  className: 'StartApplicationUpgradeParametersItem'
                }
            }
          }
        },
        upgradeKind: {
          required: false,
          serializedName: 'UpgradeKind',
          type: {
            name: 'String'
          }
        },
        rollingUpgradeMode: {
          required: false,
          serializedName: 'RollingUpgradeMode',
          type: {
            name: 'String'
          }
        },
        upgradeReplicaSetCheckTimeoutInSeconds: {
          required: false,
          serializedName: 'UpgradeReplicaSetCheckTimeoutInSeconds',
          type: {
            name: 'Number'
          }
        },
        forceRestart: {
          required: false,
          serializedName: 'ForceRestart',
          type: {
            name: 'Boolean'
          }
        },
        monitoringPolicy: {
          required: false,
          serializedName: 'MonitoringPolicy',
          type: {
            name: 'Composite',
            className: 'MonitoringPolicy'
          }
        },
        applicationHealthPolicy: {
          required: false,
          serializedName: 'ApplicationHealthPolicy',
          type: {
            name: 'Composite',
            className: 'ApplicationHealthPolicy'
          }
        }
      }
    }
  };
};

module.exports = StartApplicationUpgrade;
