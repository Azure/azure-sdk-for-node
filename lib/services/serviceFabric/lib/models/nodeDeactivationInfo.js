/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Information about the node deactivation. This information is valid for a
 * node that is undergoing deactivation or has already been deactivated.
 *
 */
class NodeDeactivationInfo {
  /**
   * Create a NodeDeactivationInfo.
   * @member {string} [nodeDeactivationIntent] Possible values include:
   * 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
   * @member {string} [nodeDeactivationStatus] Possible values include: 'None',
   * 'SafetyCheckInProgress', 'SafetyCheckComplete', 'Completed'
   * @member {array} [nodeDeactivationTask]
   * @member {array} [pendingSafetyChecks]
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeDeactivationInfo
   *
   * @returns {object} metadata of NodeDeactivationInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeDeactivationInfo',
      type: {
        name: 'Composite',
        className: 'NodeDeactivationInfo',
        modelProperties: {
          nodeDeactivationIntent: {
            required: false,
            serializedName: 'NodeDeactivationIntent',
            type: {
              name: 'String'
            }
          },
          nodeDeactivationStatus: {
            required: false,
            serializedName: 'NodeDeactivationStatus',
            type: {
              name: 'String'
            }
          },
          nodeDeactivationTask: {
            required: false,
            serializedName: 'NodeDeactivationTask',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeDeactivationTaskElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeDeactivationTask'
                  }
              }
            }
          },
          pendingSafetyChecks: {
            required: false,
            serializedName: 'PendingSafetyChecks',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SafetyCheckWrapperElementType',
                  type: {
                    name: 'Composite',
                    className: 'SafetyCheckWrapper'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = NodeDeactivationInfo;
