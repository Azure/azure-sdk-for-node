/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Information about an NodeTransition operation.  This class contains an
 * OperationState and a NodeTransitionResult.  The NodeTransitionResult is not
 * valid until OperationState
 * is Completed or Faulted.
 *
 *
 */
class NodeTransitionProgress {
  /**
   * Create a NodeTransitionProgress.
   * @member {string} [state] Possible values include: 'Invalid', 'Running',
   * 'RollingBack', 'Completed', 'Faulted', 'Cancelled', 'ForceCancelled'
   * @member {object} [nodeTransitionResult]
   * @member {number} [nodeTransitionResult.errorCode] If OperationState is
   * Completed, this is 0.  If OperationState is Faulted, this is an error code
   * indicating the reason.
   * @member {object} [nodeTransitionResult.nodeResult]
   * @member {string} [nodeTransitionResult.nodeResult.nodeName]
   * @member {string} [nodeTransitionResult.nodeResult.nodeInstanceId] The node
   * instance id.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeTransitionProgress
   *
   * @returns {object} metadata of NodeTransitionProgress
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeTransitionProgress',
      type: {
        name: 'Composite',
        className: 'NodeTransitionProgress',
        modelProperties: {
          state: {
            required: false,
            serializedName: 'State',
            type: {
              name: 'String'
            }
          },
          nodeTransitionResult: {
            required: false,
            serializedName: 'NodeTransitionResult',
            type: {
              name: 'Composite',
              className: 'NodeTransitionResult'
            }
          }
        }
      }
    };
  }
}

module.exports = NodeTransitionProgress;
