/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the FabricErrorError class.
 * @constructor
 * Error object containing error code and error message.
 *
 * @member {string} code Defines the fabric error codes that be returned as
 * part of the error object in response to Service Fabric API operations that
 * are not successful. Following are the error code values that can be returned
 * for a specific HTTP status code.
 *
 * - Possible values of the error code for HTTP status code 400 (Bad Request)
 * - "FABRIC_E_INVALID_PARTITION_KEY"
 * - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_ADDRESS"
 * - "FABRIC_E_APPLICATION_NOT_UPGRADING"
 * - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_FABRIC_NOT_UPGRADING"
 * - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_CONFIGURATION"
 * - "FABRIC_E_INVALID_NAME_URI"
 * - "FABRIC_E_PATH_TOO_LONG"
 * - "FABRIC_E_KEY_TOO_LARGE"
 * - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
 * - "FABRIC_E_INVALID_ATOMIC_GROUP"
 * - "FABRIC_E_VALUE_EMPTY"
 * - "FABRIC_E_BACKUP_IS_ENABLED"
 * - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
 * - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
 * - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
 * - "E_INVALIDARG"
 *
 * - Possible values of the error code for HTTP status code 404 (Not Found)
 * - "FABRIC_E_NODE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
 * - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
 * - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
 * - "FABRIC_E_PARTITION_NOT_FOUND"
 * - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
 * - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
 * - "FABRIC_E_DIRECTORY_NOT_FOUND"
 * - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
 * - "FABRIC_E_FILE_NOT_FOUND"
 * - "FABRIC_E_NAME_DOES_NOT_EXIST"
 * - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
 * - "FABRIC_E_ENUMERATION_COMPLETED"
 * - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
 * - "FABRIC_E_KEY_NOT_FOUND"
 * - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
 * - "FABRIC_E_BACKUP_NOT_ENABLED"
 * - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
 * - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
 * - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"
 *
 * - Possible values of the error code for HTTP status code 409 (Conflict)
 * - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
 * - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_SERVICE_ALREADY_EXISTS"
 * - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_TYPE_IN_USE"
 * - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
 * - "FABRIC_E_FABRIC_VERSION_IN_USE"
 * - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_NAME_ALREADY_EXISTS"
 * - "FABRIC_E_NAME_NOT_EMPTY"
 * - "FABRIC_E_PROPERTY_CHECK_FAILED"
 * - "FABRIC_E_SERVICE_METADATA_MISMATCH"
 * - "FABRIC_E_SERVICE_TYPE_MISMATCH"
 * - "FABRIC_E_HEALTH_STALE_REPORT"
 * - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
 * - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
 * - "FABRIC_E_INSTANCE_ID_MISMATCH"
 * - "FABRIC_E_BACKUP_IN_PROGRESS"
 * - "FABRIC_E_RESTORE_IN_PROGRESS"
 * - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
 *
 * - Possible values of the error code for HTTP status code 413 (Request Entity
 * Too Large)
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 500 (Internal
 * Server Error)
 * - "FABRIC_E_NODE_IS_UP"
 * - "E_FAIL"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_VOLUME_ALREADY_EXISTS"
 * - "FABRIC_E_VOLUME_NOT_FOUND"
 * - "SerializationError"
 *
 * - Possible values of the error code for HTTP status code 503 (Service
 * Unavailable)
 * - "FABRIC_E_NO_WRITE_QUORUM"
 * - "FABRIC_E_NOT_PRIMARY"
 * - "FABRIC_E_NOT_READY"
 * - "FABRIC_E_RECONFIGURATION_PENDING"
 * - "FABRIC_E_SERVICE_OFFLINE"
 * - "E_ABORT"
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 504 (Gateway
 * Timeout)
 * - "FABRIC_E_COMMUNICATION_ERROR"
 * - "FABRIC_E_OPERATION_NOT_COMPLETE"
 * - "FABRIC_E_TIMEOUT". Possible values include:
 * 'FABRIC_E_INVALID_PARTITION_KEY', 'FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_ADDRESS', 'FABRIC_E_APPLICATION_NOT_UPGRADING',
 * 'FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_FABRIC_NOT_UPGRADING', 'FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_CONFIGURATION', 'FABRIC_E_INVALID_NAME_URI',
 * 'FABRIC_E_PATH_TOO_LONG', 'FABRIC_E_KEY_TOO_LARGE',
 * 'FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED',
 * 'FABRIC_E_INVALID_ATOMIC_GROUP', 'FABRIC_E_VALUE_EMPTY',
 * 'FABRIC_E_NODE_NOT_FOUND', 'FABRIC_E_APPLICATION_TYPE_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_NOT_FOUND', 'FABRIC_E_SERVICE_TYPE_NOT_FOUND',
 * 'FABRIC_E_SERVICE_DOES_NOT_EXIST',
 * 'FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND',
 * 'FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND', 'FABRIC_E_PARTITION_NOT_FOUND',
 * 'FABRIC_E_REPLICA_DOES_NOT_EXIST', 'FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST',
 * 'FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND',
 * 'FABRIC_E_DIRECTORY_NOT_FOUND', 'FABRIC_E_FABRIC_VERSION_NOT_FOUND',
 * 'FABRIC_E_FILE_NOT_FOUND', 'FABRIC_E_NAME_DOES_NOT_EXIST',
 * 'FABRIC_E_PROPERTY_DOES_NOT_EXIST', 'FABRIC_E_ENUMERATION_COMPLETED',
 * 'FABRIC_E_SERVICE_MANIFEST_NOT_FOUND', 'FABRIC_E_KEY_NOT_FOUND',
 * 'FABRIC_E_HEALTH_ENTITY_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS',
 * 'FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS',
 * 'FABRIC_E_SERVICE_ALREADY_EXISTS', 'FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_TYPE_IN_USE',
 * 'FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS', 'FABRIC_E_FABRIC_VERSION_IN_USE',
 * 'FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS', 'FABRIC_E_NAME_ALREADY_EXISTS',
 * 'FABRIC_E_NAME_NOT_EMPTY', 'FABRIC_E_PROPERTY_CHECK_FAILED',
 * 'FABRIC_E_SERVICE_METADATA_MISMATCH', 'FABRIC_E_SERVICE_TYPE_MISMATCH',
 * 'FABRIC_E_HEALTH_STALE_REPORT', 'FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED',
 * 'FABRIC_E_NODE_HAS_NOT_STOPPED_YET', 'FABRIC_E_INSTANCE_ID_MISMATCH',
 * 'FABRIC_E_VALUE_TOO_LARGE', 'FABRIC_E_NO_WRITE_QUORUM',
 * 'FABRIC_E_NOT_PRIMARY', 'FABRIC_E_NOT_READY',
 * 'FABRIC_E_RECONFIGURATION_PENDING', 'FABRIC_E_SERVICE_OFFLINE', 'E_ABORT',
 * 'FABRIC_E_COMMUNICATION_ERROR', 'FABRIC_E_OPERATION_NOT_COMPLETE',
 * 'FABRIC_E_TIMEOUT', 'FABRIC_E_NODE_IS_UP', 'E_FAIL',
 * 'FABRIC_E_BACKUP_IS_ENABLED',
 * 'FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH',
 * 'FABRIC_E_INVALID_FOR_STATELESS_SERVICES', 'FABRIC_E_BACKUP_NOT_ENABLED',
 * 'FABRIC_E_BACKUP_POLICY_NOT_EXISTING',
 * 'FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING',
 * 'FABRIC_E_BACKUP_IN_PROGRESS', 'FABRIC_E_RESTORE_IN_PROGRESS',
 * 'FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING',
 * 'FABRIC_E_INVALID_SERVICE_SCALING_POLICY', 'E_INVALIDARG',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND',
 * 'FABRIC_E_VOLUME_ALREADY_EXISTS', 'FABRIC_E_VOLUME_NOT_FOUND',
 * 'SerializationError', 'FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'
 * @member {string} [message] Error message.
 */
export interface FabricErrorError {
  code: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the FabricError class.
 * @constructor
 * The REST API operations for Service Fabric return standard HTTP status
 * codes. This type defines the additional information returned from the
 * Service Fabric API operations that are not successful.
 *
 * @member {object} error Error object containing error code and error message.
 * @member {string} [error.code] Defines the fabric error codes that be
 * returned as part of the error object in response to Service Fabric API
 * operations that are not successful. Following are the error code values that
 * can be returned for a specific HTTP status code.
 *
 * - Possible values of the error code for HTTP status code 400 (Bad Request)
 * - "FABRIC_E_INVALID_PARTITION_KEY"
 * - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_ADDRESS"
 * - "FABRIC_E_APPLICATION_NOT_UPGRADING"
 * - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_FABRIC_NOT_UPGRADING"
 * - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_CONFIGURATION"
 * - "FABRIC_E_INVALID_NAME_URI"
 * - "FABRIC_E_PATH_TOO_LONG"
 * - "FABRIC_E_KEY_TOO_LARGE"
 * - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
 * - "FABRIC_E_INVALID_ATOMIC_GROUP"
 * - "FABRIC_E_VALUE_EMPTY"
 * - "FABRIC_E_BACKUP_IS_ENABLED"
 * - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
 * - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
 * - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
 * - "E_INVALIDARG"
 *
 * - Possible values of the error code for HTTP status code 404 (Not Found)
 * - "FABRIC_E_NODE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
 * - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
 * - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
 * - "FABRIC_E_PARTITION_NOT_FOUND"
 * - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
 * - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
 * - "FABRIC_E_DIRECTORY_NOT_FOUND"
 * - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
 * - "FABRIC_E_FILE_NOT_FOUND"
 * - "FABRIC_E_NAME_DOES_NOT_EXIST"
 * - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
 * - "FABRIC_E_ENUMERATION_COMPLETED"
 * - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
 * - "FABRIC_E_KEY_NOT_FOUND"
 * - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
 * - "FABRIC_E_BACKUP_NOT_ENABLED"
 * - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
 * - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
 * - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"
 *
 * - Possible values of the error code for HTTP status code 409 (Conflict)
 * - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
 * - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_SERVICE_ALREADY_EXISTS"
 * - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_TYPE_IN_USE"
 * - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
 * - "FABRIC_E_FABRIC_VERSION_IN_USE"
 * - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_NAME_ALREADY_EXISTS"
 * - "FABRIC_E_NAME_NOT_EMPTY"
 * - "FABRIC_E_PROPERTY_CHECK_FAILED"
 * - "FABRIC_E_SERVICE_METADATA_MISMATCH"
 * - "FABRIC_E_SERVICE_TYPE_MISMATCH"
 * - "FABRIC_E_HEALTH_STALE_REPORT"
 * - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
 * - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
 * - "FABRIC_E_INSTANCE_ID_MISMATCH"
 * - "FABRIC_E_BACKUP_IN_PROGRESS"
 * - "FABRIC_E_RESTORE_IN_PROGRESS"
 * - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
 *
 * - Possible values of the error code for HTTP status code 413 (Request Entity
 * Too Large)
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 500 (Internal
 * Server Error)
 * - "FABRIC_E_NODE_IS_UP"
 * - "E_FAIL"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_VOLUME_ALREADY_EXISTS"
 * - "FABRIC_E_VOLUME_NOT_FOUND"
 * - "SerializationError"
 *
 * - Possible values of the error code for HTTP status code 503 (Service
 * Unavailable)
 * - "FABRIC_E_NO_WRITE_QUORUM"
 * - "FABRIC_E_NOT_PRIMARY"
 * - "FABRIC_E_NOT_READY"
 * - "FABRIC_E_RECONFIGURATION_PENDING"
 * - "FABRIC_E_SERVICE_OFFLINE"
 * - "E_ABORT"
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 504 (Gateway
 * Timeout)
 * - "FABRIC_E_COMMUNICATION_ERROR"
 * - "FABRIC_E_OPERATION_NOT_COMPLETE"
 * - "FABRIC_E_TIMEOUT". Possible values include:
 * 'FABRIC_E_INVALID_PARTITION_KEY', 'FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_ADDRESS', 'FABRIC_E_APPLICATION_NOT_UPGRADING',
 * 'FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_FABRIC_NOT_UPGRADING', 'FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_CONFIGURATION', 'FABRIC_E_INVALID_NAME_URI',
 * 'FABRIC_E_PATH_TOO_LONG', 'FABRIC_E_KEY_TOO_LARGE',
 * 'FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED',
 * 'FABRIC_E_INVALID_ATOMIC_GROUP', 'FABRIC_E_VALUE_EMPTY',
 * 'FABRIC_E_NODE_NOT_FOUND', 'FABRIC_E_APPLICATION_TYPE_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_NOT_FOUND', 'FABRIC_E_SERVICE_TYPE_NOT_FOUND',
 * 'FABRIC_E_SERVICE_DOES_NOT_EXIST',
 * 'FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND',
 * 'FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND', 'FABRIC_E_PARTITION_NOT_FOUND',
 * 'FABRIC_E_REPLICA_DOES_NOT_EXIST', 'FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST',
 * 'FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND',
 * 'FABRIC_E_DIRECTORY_NOT_FOUND', 'FABRIC_E_FABRIC_VERSION_NOT_FOUND',
 * 'FABRIC_E_FILE_NOT_FOUND', 'FABRIC_E_NAME_DOES_NOT_EXIST',
 * 'FABRIC_E_PROPERTY_DOES_NOT_EXIST', 'FABRIC_E_ENUMERATION_COMPLETED',
 * 'FABRIC_E_SERVICE_MANIFEST_NOT_FOUND', 'FABRIC_E_KEY_NOT_FOUND',
 * 'FABRIC_E_HEALTH_ENTITY_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS',
 * 'FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS',
 * 'FABRIC_E_SERVICE_ALREADY_EXISTS', 'FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_TYPE_IN_USE',
 * 'FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS', 'FABRIC_E_FABRIC_VERSION_IN_USE',
 * 'FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS', 'FABRIC_E_NAME_ALREADY_EXISTS',
 * 'FABRIC_E_NAME_NOT_EMPTY', 'FABRIC_E_PROPERTY_CHECK_FAILED',
 * 'FABRIC_E_SERVICE_METADATA_MISMATCH', 'FABRIC_E_SERVICE_TYPE_MISMATCH',
 * 'FABRIC_E_HEALTH_STALE_REPORT', 'FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED',
 * 'FABRIC_E_NODE_HAS_NOT_STOPPED_YET', 'FABRIC_E_INSTANCE_ID_MISMATCH',
 * 'FABRIC_E_VALUE_TOO_LARGE', 'FABRIC_E_NO_WRITE_QUORUM',
 * 'FABRIC_E_NOT_PRIMARY', 'FABRIC_E_NOT_READY',
 * 'FABRIC_E_RECONFIGURATION_PENDING', 'FABRIC_E_SERVICE_OFFLINE', 'E_ABORT',
 * 'FABRIC_E_COMMUNICATION_ERROR', 'FABRIC_E_OPERATION_NOT_COMPLETE',
 * 'FABRIC_E_TIMEOUT', 'FABRIC_E_NODE_IS_UP', 'E_FAIL',
 * 'FABRIC_E_BACKUP_IS_ENABLED',
 * 'FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH',
 * 'FABRIC_E_INVALID_FOR_STATELESS_SERVICES', 'FABRIC_E_BACKUP_NOT_ENABLED',
 * 'FABRIC_E_BACKUP_POLICY_NOT_EXISTING',
 * 'FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING',
 * 'FABRIC_E_BACKUP_IN_PROGRESS', 'FABRIC_E_RESTORE_IN_PROGRESS',
 * 'FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING',
 * 'FABRIC_E_INVALID_SERVICE_SCALING_POLICY', 'E_INVALIDARG',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND',
 * 'FABRIC_E_VOLUME_ALREADY_EXISTS', 'FABRIC_E_VOLUME_NOT_FOUND',
 * 'SerializationError', 'FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'
 * @member {string} [error.message] Error message.
 */
export interface FabricError {
  error: FabricErrorError;
}

/**
 * @class
 * Initializes a new instance of the ContainerLogs class.
 * @constructor
 * Container logs.
 *
 * @member {string} [content] Container logs.
 */
export interface ContainerLogs {
  content?: string;
}

/**
 * @class
 * Initializes a new instance of the AadMetadata class.
 * @constructor
 * Azure Active Directory metadata used for secured connection to cluster.
 *
 * @member {string} [authority] The AAD authority url.
 * @member {string} [client] The AAD client application Id.
 * @member {string} [cluster] The AAD cluster application Id.
 * @member {string} [login] The AAD login url.
 * @member {string} [redirect] The client application redirect address.
 * @member {string} [tenant] The AAD tenant Id.
 */
export interface AadMetadata {
  authority?: string;
  client?: string;
  cluster?: string;
  login?: string;
  redirect?: string;
  tenant?: string;
}

/**
 * @class
 * Initializes a new instance of the AadMetadataObject class.
 * @constructor
 * Azure Active Directory metadata object used for secured connection to
 * cluster.
 *
 * @member {string} [type] The client authentication method.
 * @member {object} [metadata] Azure Active Directory metadata used for secured
 * connection to cluster.
 * @member {string} [metadata.authority] The AAD authority url.
 * @member {string} [metadata.client] The AAD client application Id.
 * @member {string} [metadata.cluster] The AAD cluster application Id.
 * @member {string} [metadata.login] The AAD login url.
 * @member {string} [metadata.redirect] The client application redirect
 * address.
 * @member {string} [metadata.tenant] The AAD tenant Id.
 */
export interface AadMetadataObject {
  type?: string;
  metadata?: AadMetadata;
}

/**
 * @class
 * Initializes a new instance of the AnalysisEventMetadata class.
 * @constructor
 * Metadata about an Analysis Event.
 *
 * @member {moment.duration} [delay] The analysis delay.
 * @member {moment.duration} [duration] The duration of analysis.
 */
export interface AnalysisEventMetadata {
  delay?: moment.Duration;
  duration?: moment.Duration;
}

/**
 * @class
 * Initializes a new instance of the FabricEvent class.
 * @constructor
 * Represents the base for all Fabric Events.
 *
 * @member {uuid} eventInstanceId The identifier for the FabricEvent instance.
 * @member {string} [category] The category of event.
 * @member {date} timeStamp The time event was logged.
 * @member {boolean} [hasCorrelatedEvents] Shows there is existing related
 * events available.
 * @member {string} kind Polymorphic Discriminator
 */
export interface FabricEvent {
  eventInstanceId: string;
  category?: string;
  timeStamp: Date;
  hasCorrelatedEvents?: boolean;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationEvent class.
 * @constructor
 * Represents the base for all Application Events.
 *
 * @member {string} applicationId The identity of the application. This is an
 * encoded representation of the application name. This is used in the REST
 * APIs to identify the application resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the application name is "fabric:/myapp/app1",
 * the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in
 * previous versions.
 */
export interface ApplicationEvent extends FabricEvent {
  applicationId: string;
}

/**
 * @class
 * Initializes a new instance of the EntityHealthState class.
 * @constructor
 * A base type for the health state of various entities in the cluster. It
 * contains the aggregated health state.
 *
 * @member {string} [aggregatedHealthState] The health state of a Service
 * Fabric entity such as Cluster, Node, Application, Service, Partition,
 * Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
 * 'Unknown'
 */
export interface EntityHealthState {
  aggregatedHealthState?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceHealthState class.
 * @constructor
 * Represents the health state of a service, which contains the service
 * identifier and its aggregated health state.
 *
 * @member {string} [serviceName] Name of the service whose health state is
 * represented by this object.
 */
export interface ServiceHealthState extends EntityHealthState {
  serviceName?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealthState class.
 * @constructor
 * Represents the health state of a deployed application, which contains the
 * entity identifier and the aggregated health state.
 *
 * @member {string} [nodeName] Name of the node on which the service package is
 * deployed.
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 */
export interface DeployedApplicationHealthState extends EntityHealthState {
  nodeName?: string;
  applicationName?: string;
}

/**
 * @class
 * Initializes a new instance of the EntityHealth class.
 * @constructor
 * Health information common to all entities in the cluster. It contains the
 * aggregated health state, health events and unhealthy evaluation.
 *
 * @member {string} [aggregatedHealthState] The HealthState representing the
 * aggregated health state of the entity computed by Health Manager.
 * The health evaluation of the entity reflects all events reported on the
 * entity and its children (if any).
 * The aggregation is done by applying the desired health policy. Possible
 * values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * @member {array} [healthEvents] The list of health events reported on the
 * entity.
 * @member {array} [unhealthyEvaluations] The unhealthy evaluations that show
 * why the current aggregated health state was returned by Health Manager.
 * @member {object} [healthStatistics] Shows the health statistics for all
 * children types of the queried entity.
 * @member {array} [healthStatistics.healthStateCountList] List of health state
 * counts per entity kind, which keeps track of how many children of the
 * queried entity are in Ok, Warning and Error state.
 */
export interface EntityHealth {
  aggregatedHealthState?: string;
  healthEvents?: HealthEvent[];
  unhealthyEvaluations?: HealthEvaluationWrapper[];
  healthStatistics?: HealthStatistics;
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealth class.
 * @constructor
 * Represents the health of the application. Contains the application
 * aggregated health state and the service and deployed application health
 * states.
 *
 * @member {string} [name] The name of the application, including the 'fabric:'
 * URI scheme.
 * @member {array} [serviceHealthStates] Service health states as found in the
 * health store.
 * @member {array} [deployedApplicationHealthStates] Deployed application
 * health states as found in the health store.
 */
export interface ApplicationHealth extends EntityHealth {
  name?: string;
  serviceHealthStates?: ServiceHealthState[];
  deployedApplicationHealthStates?: DeployedApplicationHealthState[];
}

/**
 * @class
 * Initializes a new instance of the HealthEvaluation class.
 * @constructor
 * Represents a health evaluation which describes the data and the algorithm
 * used by health manager to evaluate the health of an entity.
 *
 * @member {string} [aggregatedHealthState] The health state of a Service
 * Fabric entity such as Cluster, Node, Application, Service, Partition,
 * Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
 * 'Unknown'
 * @member {string} [description] Description of the health evaluation, which
 * represents a summary of the evaluation process.
 * @member {string} kind Polymorphic Discriminator
 */
export interface HealthEvaluation {
  aggregatedHealthState?: string;
  description?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the HealthEvaluationWrapper class.
 * @constructor
 * Wrapper object for health evaluation.
 *
 * @member {object} [healthEvaluation] Represents a health evaluation which
 * describes the data and the algorithm used by health manager to evaluate the
 * health of an entity.
 * @member {string} [healthEvaluation.aggregatedHealthState] The health state
 * of a Service Fabric entity such as Cluster, Node, Application, Service,
 * Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning',
 * 'Error', 'Unknown'
 * @member {string} [healthEvaluation.description] Description of the health
 * evaluation, which represents a summary of the evaluation process.
 * @member {string} [healthEvaluation.kind] Polymorphic Discriminator
 */
export interface HealthEvaluationWrapper {
  healthEvaluation?: HealthEvaluation;
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthEvaluation class.
 * @constructor
 * Represents health evaluation for an application, containing information
 * about the data and the algorithm used by the health store to evaluate
 * health.
 *
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the current aggregated health state of the application. The types of
 * the unhealthy evaluations can be DeployedApplicationsHealthEvaluation,
 * ServicesHealthEvaluation or EventHealthEvaluation.
 */
export interface ApplicationHealthEvaluation extends HealthEvaluation {
  applicationName?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ServiceTypeHealthPolicy class.
 * @constructor
 * Represents the health policy used to evaluate the health of services
 * belonging to a service type.
 *
 * @member {number} [maxPercentUnhealthyPartitionsPerService] The maximum
 * allowed percentage of unhealthy partitions per service. Allowed values are
 * Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero. Default value: 0 .
 * @member {number} [maxPercentUnhealthyReplicasPerPartition] The maximum
 * allowed percentage of unhealthy replicas per partition. Allowed values are
 * Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero. Default value: 0 .
 * @member {number} [maxPercentUnhealthyServices] The maximum allowed
 * percentage of unhealthy services. Allowed values are Byte values from zero
 * to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero. Default value: 0 .
 */
export interface ServiceTypeHealthPolicy {
  maxPercentUnhealthyPartitionsPerService?: number;
  maxPercentUnhealthyReplicasPerPartition?: number;
  maxPercentUnhealthyServices?: number;
}

/**
 * @class
 * Initializes a new instance of the ServiceTypeHealthPolicyMapItem class.
 * @constructor
 * Defines an item in ServiceTypeHealthPolicyMap.
 *
 * @member {string} key The key of the service type health policy map item.
 * This is the name of the service type.
 * @member {object} value The value of the service type health policy map item.
 * This is the ServiceTypeHealthPolicy for this service type.
 * @member {number} [value.maxPercentUnhealthyPartitionsPerService] The maximum
 * allowed percentage of unhealthy partitions per service. Allowed values are
 * Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number} [value.maxPercentUnhealthyReplicasPerPartition] The maximum
 * allowed percentage of unhealthy replicas per partition. Allowed values are
 * Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number} [value.maxPercentUnhealthyServices] The maximum allowed
 * percentage of unhealthy services. Allowed values are Byte values from zero
 * to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 */
export interface ServiceTypeHealthPolicyMapItem {
  key: string;
  value: ServiceTypeHealthPolicy;
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthPolicy class.
 * @constructor
 * Defines a health policy used to evaluate the health of an application or one
 * of its children entities.
 *
 * @member {boolean} [considerWarningAsError] Indicates whether warnings are
 * treated with the same severity as errors. Default value: false .
 * @member {number} [maxPercentUnhealthyDeployedApplications] The maximum
 * allowed percentage of unhealthy deployed applications. Allowed values are
 * Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero. Default value: 0 .
 * @member {object} [defaultServiceTypeHealthPolicy] The health policy used by
 * default to evaluate the health of a service type.
 * @member {number}
 * [defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService] The
 * maximum allowed percentage of unhealthy partitions per service. Allowed
 * values are Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number}
 * [defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition] The
 * maximum allowed percentage of unhealthy replicas per partition. Allowed
 * values are Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number}
 * [defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices] The maximum
 * allowed percentage of unhealthy services. Allowed values are Byte values
 * from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 * @member {array} [serviceTypeHealthPolicyMap] The map with service type
 * health policy per service type name. The map is empty by default.
 */
export interface ApplicationHealthPolicy {
  considerWarningAsError?: boolean;
  maxPercentUnhealthyDeployedApplications?: number;
  defaultServiceTypeHealthPolicy?: ServiceTypeHealthPolicy;
  serviceTypeHealthPolicyMap?: ServiceTypeHealthPolicyMapItem[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthPolicyMapItem class.
 * @constructor
 * Defines an item in ApplicationHealthPolicyMap.
 *
 * @member {string} key The key of the application health policy map item. This
 * is the name of the application.
 * @member {object} value The value of the application health policy map item.
 * This is the ApplicationHealthPolicy for this application.
 * @member {boolean} [value.considerWarningAsError] Indicates whether warnings
 * are treated with the same severity as errors.
 * @member {number} [value.maxPercentUnhealthyDeployedApplications] The maximum
 * allowed percentage of unhealthy deployed applications. Allowed values are
 * Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 * @member {object} [value.defaultServiceTypeHealthPolicy] The health policy
 * used by default to evaluate the health of a service type.
 * @member {number}
 * [value.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 * The maximum allowed percentage of unhealthy partitions per service. Allowed
 * values are Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number}
 * [value.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 * The maximum allowed percentage of unhealthy replicas per partition. Allowed
 * values are Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number}
 * [value.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices] The
 * maximum allowed percentage of unhealthy services. Allowed values are Byte
 * values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 * @member {array} [value.serviceTypeHealthPolicyMap] The map with service type
 * health policy per service type name. The map is empty by default.
 */
export interface ApplicationHealthPolicyMapItem {
  key: string;
  value: ApplicationHealthPolicy;
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthPolicies class.
 * @constructor
 * Defines the application health policy map used to evaluate the health of an
 * application or one of its children entities.
 *
 * @member {array} [applicationHealthPolicyMap] The wrapper that contains the
 * map with application health policies used to evaluate specific applications
 * in the cluster.
 */
export interface ApplicationHealthPolicies {
  applicationHealthPolicyMap?: ApplicationHealthPolicyMapItem[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthState class.
 * @constructor
 * Represents the health state of an application, which contains the
 * application identifier and the aggregated health state.
 *
 * @member {string} [name] The name of the application, including the 'fabric:'
 * URI scheme.
 */
export interface ApplicationHealthState extends EntityHealthState {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the EntityHealthStateChunk class.
 * @constructor
 * A base type for the health state chunk of various entities in the cluster.
 * It contains the aggregated health state.
 *
 * @member {string} [healthState] The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 */
export interface EntityHealthStateChunk {
  healthState?: string;
}

/**
 * @class
 * Initializes a new instance of the ReplicaHealthStateChunk class.
 * @constructor
 * Represents the health state chunk of a stateful service replica or a
 * stateless service instance.
 * The replica health state contains the replica ID and its aggregated health
 * state.
 *
 * @member {string} [replicaOrInstanceId] Id of a stateful service replica or a
 * stateless service instance. This ID is used in the queries that apply to
 * both stateful and stateless services. It is used by Service Fabric to
 * uniquely identify a replica of a partition of a stateful service or an
 * instance of a stateless service partition. It is unique within a partition
 * and does not change for the lifetime of the replica or the instance. If a
 * stateful replica gets dropped and another replica gets created on the same
 * node for the same partition, it will get a different value for the ID. If a
 * stateless instance is failed over on the same or different node it will get
 * a different value for the ID.
 */
export interface ReplicaHealthStateChunk extends EntityHealthStateChunk {
  replicaOrInstanceId?: string;
}

/**
 * @class
 * Initializes a new instance of the ReplicaHealthStateChunkList class.
 * @constructor
 * The list of replica health state chunks that respect the input filters in
 * the chunk query. Returned by get cluster health state chunks query.
 *
 * @member {array} [items] The list of replica health state chunks that respect
 * the input filters in the chunk query.
 */
export interface ReplicaHealthStateChunkList {
  items?: ReplicaHealthStateChunk[];
}

/**
 * @class
 * Initializes a new instance of the PartitionHealthStateChunk class.
 * @constructor
 * Represents the health state chunk of a partition, which contains the
 * partition ID, its aggregated health state and any replicas that respect the
 * filters in the cluster health chunk query description.
 *
 * @member {uuid} [partitionId] The Id of the partition.
 * @member {object} [replicaHealthStateChunks] The list of replica health state
 * chunks belonging to the partition that respect the filters in the cluster
 * health chunk query description.
 * @member {array} [replicaHealthStateChunks.items] The list of replica health
 * state chunks that respect the input filters in the chunk query.
 */
export interface PartitionHealthStateChunk extends EntityHealthStateChunk {
  partitionId?: string;
  replicaHealthStateChunks?: ReplicaHealthStateChunkList;
}

/**
 * @class
 * Initializes a new instance of the PartitionHealthStateChunkList class.
 * @constructor
 * The list of partition health state chunks that respect the input filters in
 * the chunk query description.
 * Returned by get cluster health state chunks query as part of the parent
 * application hierarchy.
 *
 * @member {array} [items] The list of partition health state chunks that
 * respect the input filters in the chunk query.
 */
export interface PartitionHealthStateChunkList {
  items?: PartitionHealthStateChunk[];
}

/**
 * @class
 * Initializes a new instance of the ServiceHealthStateChunk class.
 * @constructor
 * Represents the health state chunk of a service, which contains the service
 * name, its aggregated health state and any partitions that respect the
 * filters in the cluster health chunk query description.
 *
 * @member {string} [serviceName] The name of the service whose health state
 * chunk is provided in this object.
 * @member {object} [partitionHealthStateChunks] The list of partition health
 * state chunks belonging to the service that respect the filters in the
 * cluster health chunk query description.
 * @member {array} [partitionHealthStateChunks.items] The list of partition
 * health state chunks that respect the input filters in the chunk query.
 */
export interface ServiceHealthStateChunk extends EntityHealthStateChunk {
  serviceName?: string;
  partitionHealthStateChunks?: PartitionHealthStateChunkList;
}

/**
 * @class
 * Initializes a new instance of the ServiceHealthStateChunkList class.
 * @constructor
 * The list of service health state chunks that respect the input filters in
 * the chunk query. Returned by get cluster health state chunks query.
 *
 * @member {array} [items] The list of service health state chunks that respect
 * the input filters in the chunk query.
 */
export interface ServiceHealthStateChunkList {
  items?: ServiceHealthStateChunk[];
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealthStateChunk class.
 * @constructor
 * Represents the health state chunk of a deployed service package, which
 * contains the service manifest name and the service package aggregated health
 * state.
 *
 * @member {string} [serviceManifestName] The name of the service manifest.
 * @member {string} [servicePackageActivationId] The ActivationId of a deployed
 * service package. If ServicePackageActivationMode specified at the time of
 * creating the service
 * is 'SharedProcess' (or if it is not specified, in which case it defaults to
 * 'SharedProcess'), then value of ServicePackageActivationId
 * is always an empty string.
 */
export interface DeployedServicePackageHealthStateChunk extends EntityHealthStateChunk {
  serviceManifestName?: string;
  servicePackageActivationId?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealthStateChunkList class.
 * @constructor
 * The list of deployed service package health state chunks that respect the
 * input filters in the chunk query. Returned by get cluster health state
 * chunks query.
 *
 * @member {array} [items] The list of deployed service package health state
 * chunks that respect the input filters in the chunk query.
 */
export interface DeployedServicePackageHealthStateChunkList {
  items?: DeployedServicePackageHealthStateChunk[];
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealthStateChunk class.
 * @constructor
 * Represents the health state chunk of a deployed application, which contains
 * the node where the application is deployed, the aggregated health state and
 * any deployed service packages that respect the chunk query description
 * filters.
 *
 * @member {string} [nodeName] The name of node where the application is
 * deployed.
 * @member {object} [deployedServicePackageHealthStateChunks] The list of
 * deployed service package health state chunks belonging to the deployed
 * application that respect the filters in the cluster health chunk query
 * description.
 * @member {array} [deployedServicePackageHealthStateChunks.items] The list of
 * deployed service package health state chunks that respect the input filters
 * in the chunk query.
 */
export interface DeployedApplicationHealthStateChunk extends EntityHealthStateChunk {
  nodeName?: string;
  deployedServicePackageHealthStateChunks?: DeployedServicePackageHealthStateChunkList;
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealthStateChunkList class.
 * @constructor
 * The list of deployed application health state chunks that respect the input
 * filters in the chunk query. Returned by get cluster health state chunks
 * query.
 *
 * @member {array} [items] The list of deployed application health state chunks
 * that respect the input filters in the chunk query.
 */
export interface DeployedApplicationHealthStateChunkList {
  items?: DeployedApplicationHealthStateChunk[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthStateChunk class.
 * @constructor
 * Represents the health state chunk of a application.
 * The application health state chunk contains the application name, its
 * aggregated health state and any children services and deployed applications
 * that respect the filters in cluster health chunk query description.
 *
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {string} [applicationTypeName] The application type name as defined
 * in the application manifest.
 * @member {object} [serviceHealthStateChunks] The list of service health state
 * chunks in the cluster that respect the filters in the cluster health chunk
 * query description.
 * @member {array} [serviceHealthStateChunks.items] The list of service health
 * state chunks that respect the input filters in the chunk query.
 * @member {object} [deployedApplicationHealthStateChunks] The list of deployed
 * application health state chunks in the cluster that respect the filters in
 * the cluster health chunk query description.
 * @member {array} [deployedApplicationHealthStateChunks.items] The list of
 * deployed application health state chunks that respect the input filters in
 * the chunk query.
 */
export interface ApplicationHealthStateChunk extends EntityHealthStateChunk {
  applicationName?: string;
  applicationTypeName?: string;
  serviceHealthStateChunks?: ServiceHealthStateChunkList;
  deployedApplicationHealthStateChunks?: DeployedApplicationHealthStateChunkList;
}

/**
 * @class
 * Initializes a new instance of the EntityHealthStateChunkList class.
 * @constructor
 * A base type for the list of health state chunks found in the cluster. It
 * contains the total number of health states that match the input filters.
 *
 * @member {number} [totalCount] Total number of entity health state objects
 * that match the specified filters from the cluster health chunk query
 * description.
 */
export interface EntityHealthStateChunkList {
  totalCount?: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthStateChunkList class.
 * @constructor
 * The list of application health state chunks in the cluster that respect the
 * input filters in the chunk query. Returned by get cluster health state
 * chunks query.
 *
 * @member {array} [items] The list of application health state chunks that
 * respect the input filters in the chunk query.
 */
export interface ApplicationHealthStateChunkList extends EntityHealthStateChunkList {
  items?: ApplicationHealthStateChunk[];
}

/**
 * @class
 * Initializes a new instance of the ReplicaHealthStateFilter class.
 * @constructor
 * Defines matching criteria to determine whether a replica should be included
 * as a child of a partition in the cluster health chunk.
 * The replicas are only returned if the parent entities match a filter
 * specified in the cluster health chunk query description. The parent
 * partition, service and application must be included in the cluster health
 * chunk.
 * One filter can match zero, one or multiple replicas, depending on its
 * properties.
 *
 * @member {string} [replicaOrInstanceIdFilter] Id of the stateful service
 * replica or stateless service instance that matches the filter. The filter is
 * applied only to the specified replica, if it exists.
 * If the replica doesn't exist, no replica is returned in the cluster health
 * chunk based on this filter.
 * If the replica exists, it is included in the cluster health chunk if it
 * respects the other filter properties.
 * If not specified, all replicas that match the parent filters (if any) are
 * taken into consideration and matched against the other filter members, like
 * health state filter.
 * @member {number} [healthStateFilter] The filter for the health state of the
 * replicas. It allows selecting replicas if they match the desired health
 * states.
 * The possible values are integer value of one of the following health states.
 * Only replicas that match the filter are returned. All replicas are used to
 * evaluate the parent partition aggregated health state.
 * If not specified, default value is None, unless the replica ID is specified.
 * If the filter has default value and replica ID is specified, the matching
 * replica is returned.
 * The state values are flag-based enumeration, so the value could be a
 * combination of these values obtained using bitwise 'OR' operator.
 * For example, if the provided value is 6, it matches replicas with
 * HealthState value of OK (2) and Warning (4).
 *
 * - Default - Default value. Matches any HealthState. The value is zero.
 * - None - Filter that doesn't match any HealthState value. Used in order to
 * return no results on a given collection of states. The value is 1.
 * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
 * - Warning - Filter that matches input with HealthState value Warning. The
 * value is 4.
 * - Error - Filter that matches input with HealthState value Error. The value
 * is 8.
 * - All - Filter that matches input with any HealthState value. The value is
 * 65535. Default value: 0 .
 */
export interface ReplicaHealthStateFilter {
  replicaOrInstanceIdFilter?: string;
  healthStateFilter?: number;
}

/**
 * @class
 * Initializes a new instance of the PartitionHealthStateFilter class.
 * @constructor
 * Defines matching criteria to determine whether a partition should be
 * included as a child of a service in the cluster health chunk.
 * The partitions are only returned if the parent entities match a filter
 * specified in the cluster health chunk query description. The parent service
 * and application must be included in the cluster health chunk.
 * One filter can match zero, one or multiple partitions, depending on its
 * properties.
 *
 * @member {uuid} [partitionIdFilter] ID of the partition that matches the
 * filter. The filter is applied only to the specified partition, if it exists.
 * If the partition doesn't exist, no partition is returned in the cluster
 * health chunk based on this filter.
 * If the partition exists, it is included in the cluster health chunk if it
 * respects the other filter properties.
 * If not specified, all partitions that match the parent filters (if any) are
 * taken into consideration and matched against the other filter members, like
 * health state filter.
 * @member {number} [healthStateFilter] The filter for the health state of the
 * partitions. It allows selecting partitions if they match the desired health
 * states.
 * The possible values are integer value of one of the following health states.
 * Only partitions that match the filter are returned. All partitions are used
 * to evaluate the cluster aggregated health state.
 * If not specified, default value is None, unless the partition ID is
 * specified. If the filter has default value and partition ID is specified,
 * the matching partition is returned.
 * The state values are flag-based enumeration, so the value could be a
 * combination of these values obtained using bitwise 'OR' operator.
 * For example, if the provided value is 6, it matches partitions with
 * HealthState value of OK (2) and Warning (4).
 *
 * - Default - Default value. Matches any HealthState. The value is zero.
 * - None - Filter that doesn't match any HealthState value. Used in order to
 * return no results on a given collection of states. The value is 1.
 * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
 * - Warning - Filter that matches input with HealthState value Warning. The
 * value is 4.
 * - Error - Filter that matches input with HealthState value Error. The value
 * is 8.
 * - All - Filter that matches input with any HealthState value. The value is
 * 65535. Default value: 0 .
 * @member {array} [replicaFilters] Defines a list of filters that specify
 * which replicas to be included in the returned cluster health chunk as
 * children of the parent partition. The replicas are returned only if the
 * parent partition matches a filter.
 * If the list is empty, no replicas are returned. All the replicas are used to
 * evaluate the parent partition aggregated health state, regardless of the
 * input filters.
 * The partition filter may specify multiple replica filters.
 * For example, it can specify a filter to return all replicas with health
 * state Error and another filter to always include a replica identified by its
 * replica id.
 */
export interface PartitionHealthStateFilter {
  partitionIdFilter?: string;
  healthStateFilter?: number;
  replicaFilters?: ReplicaHealthStateFilter[];
}

/**
 * @class
 * Initializes a new instance of the ServiceHealthStateFilter class.
 * @constructor
 * Defines matching criteria to determine whether a service should be included
 * as a child of an application in the cluster health chunk.
 * The services are only returned if the parent application matches a filter
 * specified in the cluster health chunk query description.
 * One filter can match zero, one or multiple services, depending on its
 * properties.
 *
 * @member {string} [serviceNameFilter] The name of the service that matches
 * the filter. The filter is applied only to the specified service, if it
 * exists.
 * If the service doesn't exist, no service is returned in the cluster health
 * chunk based on this filter.
 * If the service exists, it is included as the application's child if the
 * health state matches the other filter properties.
 * If not specified, all services that match the parent filters (if any) are
 * taken into consideration and matched against the other filter members, like
 * health state filter.
 * @member {number} [healthStateFilter] The filter for the health state of the
 * services. It allows selecting services if they match the desired health
 * states.
 * The possible values are integer value of one of the following health states.
 * Only services that match the filter are returned. All services are used to
 * evaluate the cluster aggregated health state.
 * If not specified, default value is None, unless the service name is
 * specified. If the filter has default value and service name is specified,
 * the matching service is returned.
 * The state values are flag-based enumeration, so the value could be a
 * combination of these values obtained using bitwise 'OR' operator.
 * For example, if the provided value is 6, it matches services with
 * HealthState value of OK (2) and Warning (4).
 *
 * - Default - Default value. Matches any HealthState. The value is zero.
 * - None - Filter that doesn't match any HealthState value. Used in order to
 * return no results on a given collection of states. The value is 1.
 * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
 * - Warning - Filter that matches input with HealthState value Warning. The
 * value is 4.
 * - Error - Filter that matches input with HealthState value Error. The value
 * is 8.
 * - All - Filter that matches input with any HealthState value. The value is
 * 65535. Default value: 0 .
 * @member {array} [partitionFilters] Defines a list of filters that specify
 * which partitions to be included in the returned cluster health chunk as
 * children of the service. The partitions are returned only if the parent
 * service matches a filter.
 * If the list is empty, no partitions are returned. All the partitions are
 * used to evaluate the parent service aggregated health state, regardless of
 * the input filters.
 * The service filter may specify multiple partition filters.
 * For example, it can specify a filter to return all partitions with health
 * state Error and another filter to always include a partition identified by
 * its partition ID.
 */
export interface ServiceHealthStateFilter {
  serviceNameFilter?: string;
  healthStateFilter?: number;
  partitionFilters?: PartitionHealthStateFilter[];
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealthStateFilter class.
 * @constructor
 * Defines matching criteria to determine whether a deployed service package
 * should be included as a child of a deployed application in the cluster
 * health chunk.
 * The deployed service packages are only returned if the parent entities match
 * a filter specified in the cluster health chunk query description. The parent
 * deployed application and its parent application must be included in the
 * cluster health chunk.
 * One filter can match zero, one or multiple deployed service packages,
 * depending on its properties.
 *
 * @member {string} [serviceManifestNameFilter] The name of the service
 * manifest which identifies the deployed service packages that matches the
 * filter.
 * If specified, the filter is applied only to the specified deployed service
 * packages, if any.
 * If no deployed service packages with specified manifest name exist, nothing
 * is returned in the cluster health chunk based on this filter.
 * If any deployed service package exists, they are included in the cluster
 * health chunk if it respects the other filter properties.
 * If not specified, all deployed service packages that match the parent
 * filters (if any) are taken into consideration and matched against the other
 * filter members, like health state filter.
 * @member {string} [servicePackageActivationIdFilter] The activation ID of a
 * deployed service package that matches the filter.
 * If not specified, the filter applies to all deployed service packages that
 * match the other parameters.
 * If specified, the filter matches only the deployed service package with the
 * specified activation ID.
 * @member {number} [healthStateFilter] The filter for the health state of the
 * deployed service packages. It allows selecting deployed service packages if
 * they match the desired health states.
 * The possible values are integer value of one of the following health states.
 * Only deployed service packages that match the filter are returned. All
 * deployed service packages are used to evaluate the parent deployed
 * application aggregated health state.
 * If not specified, default value is None, unless the deployed service package
 * ID is specified. If the filter has default value and deployed service
 * package ID is specified, the matching deployed service package is returned.
 * The state values are flag-based enumeration, so the value could be a
 * combination of these values obtained using bitwise 'OR' operator.
 * For example, if the provided value is 6, it matches deployed service
 * packages with HealthState value of OK (2) and Warning (4).
 *
 * - Default - Default value. Matches any HealthState. The value is zero.
 * - None - Filter that doesn't match any HealthState value. Used in order to
 * return no results on a given collection of states. The value is 1.
 * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
 * - Warning - Filter that matches input with HealthState value Warning. The
 * value is 4.
 * - Error - Filter that matches input with HealthState value Error. The value
 * is 8.
 * - All - Filter that matches input with any HealthState value. The value is
 * 65535. Default value: 0 .
 */
export interface DeployedServicePackageHealthStateFilter {
  serviceManifestNameFilter?: string;
  servicePackageActivationIdFilter?: string;
  healthStateFilter?: number;
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealthStateFilter class.
 * @constructor
 * Defines matching criteria to determine whether a deployed application should
 * be included as a child of an application in the cluster health chunk.
 * The deployed applications are only returned if the parent application
 * matches a filter specified in the cluster health chunk query description.
 * One filter can match zero, one or multiple deployed applications, depending
 * on its properties.
 *
 * @member {string} [nodeNameFilter] The name of the node where the application
 * is deployed in order to match the filter.
 * If specified, the filter is applied only to the application deployed on the
 * specified node.
 * If the application is not deployed on the node with the specified name, no
 * deployed application is returned in the cluster health chunk based on this
 * filter.
 * Otherwise, the deployed application is included in the cluster health chunk
 * if it respects the other filter properties.
 * If not specified, all deployed applications that match the parent filters
 * (if any) are taken into consideration and matched against the other filter
 * members, like health state filter.
 * @member {number} [healthStateFilter] The filter for the health state of the
 * deployed applications. It allows selecting deployed applications if they
 * match the desired health states.
 * The possible values are integer value of one of the following health states.
 * Only deployed applications that match the filter are returned. All deployed
 * applications are used to evaluate the cluster aggregated health state.
 * If not specified, default value is None, unless the node name is specified.
 * If the filter has default value and node name is specified, the matching
 * deployed application is returned.
 * The state values are flag-based enumeration, so the value could be a
 * combination of these values obtained using bitwise 'OR' operator.
 * For example, if the provided value is 6, it matches deployed applications
 * with HealthState value of OK (2) and Warning (4).
 *
 * - Default - Default value. Matches any HealthState. The value is zero.
 * - None - Filter that doesn't match any HealthState value. Used in order to
 * return no results on a given collection of states. The value is 1.
 * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
 * - Warning - Filter that matches input with HealthState value Warning. The
 * value is 4.
 * - Error - Filter that matches input with HealthState value Error. The value
 * is 8.
 * - All - Filter that matches input with any HealthState value. The value is
 * 65535. Default value: 0 .
 * @member {array} [deployedServicePackageFilters] Defines a list of filters
 * that specify which deployed service packages to be included in the returned
 * cluster health chunk as children of the parent deployed application. The
 * deployed service packages are returned only if the parent deployed
 * application matches a filter.
 * If the list is empty, no deployed service packages are returned. All the
 * deployed service packages are used to evaluate the parent deployed
 * application aggregated health state, regardless of the input filters.
 * The deployed application filter may specify multiple deployed service
 * package filters.
 * For example, it can specify a filter to return all deployed service packages
 * with health state Error and another filter to always include a deployed
 * service package on a node.
 */
export interface DeployedApplicationHealthStateFilter {
  nodeNameFilter?: string;
  healthStateFilter?: number;
  deployedServicePackageFilters?: DeployedServicePackageHealthStateFilter[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthStateFilter class.
 * @constructor
 * Defines matching criteria to determine whether a application should be
 * included in the cluster health chunk.
 * One filter can match zero, one or multiple applications, depending on its
 * properties.
 *
 * @member {string} [applicationNameFilter] The name of the application that
 * matches the filter, as a fabric uri. The filter is applied only to the
 * specified application, if it exists.
 * If the application doesn't exist, no application is returned in the cluster
 * health chunk based on this filter.
 * If the application exists, it is included in the cluster health chunk if it
 * respects the other filter properties.
 * If not specified, all applications are matched against the other filter
 * members, like health state filter.
 * @member {string} [applicationTypeNameFilter] The name of the application
 * type that matches the filter.
 * If specified, the filter is applied only to applications of the selected
 * application type, if any exists.
 * If no applications of the specified application type exists, no application
 * is returned in the cluster health chunk based on this filter.
 * Each application of the specified application type is included in the
 * cluster health chunk if it respects the other filter properties.
 * If not specified, all applications are matched against the other filter
 * members, like health state filter.
 * @member {number} [healthStateFilter] The filter for the health state of the
 * applications. It allows selecting applications if they match the desired
 * health states.
 * The possible values are integer value of one of the following health states.
 * Only applications that match the filter are returned. All applications are
 * used to evaluate the cluster aggregated health state.
 * If not specified, default value is None, unless the application name or the
 * application type name are specified. If the filter has default value and
 * application name is specified, the matching application is returned.
 * The state values are flag-based enumeration, so the value could be a
 * combination of these values obtained using bitwise 'OR' operator.
 * For example, if the provided value is 6, it matches applications with
 * HealthState value of OK (2) and Warning (4).
 *
 * - Default - Default value. Matches any HealthState. The value is zero.
 * - None - Filter that doesn't match any HealthState value. Used in order to
 * return no results on a given collection of states. The value is 1.
 * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
 * - Warning - Filter that matches input with HealthState value Warning. The
 * value is 4.
 * - Error - Filter that matches input with HealthState value Error. The value
 * is 8.
 * - All - Filter that matches input with any HealthState value. The value is
 * 65535. Default value: 0 .
 * @member {array} [serviceFilters] Defines a list of filters that specify
 * which services to be included in the returned cluster health chunk as
 * children of the application. The services are returned only if the parent
 * application matches a filter.
 * If the list is empty, no services are returned. All the services are used to
 * evaluate the parent application aggregated health state, regardless of the
 * input filters.
 * The application filter may specify multiple service filters.
 * For example, it can specify a filter to return all services with health
 * state Error and another filter to always include a service identified by its
 * service name.
 * @member {array} [deployedApplicationFilters] Defines a list of filters that
 * specify which deployed applications to be included in the returned cluster
 * health chunk as children of the application. The deployed applications are
 * returned only if the parent application matches a filter.
 * If the list is empty, no deployed applications are returned. All the
 * deployed applications are used to evaluate the parent application aggregated
 * health state, regardless of the input filters.
 * The application filter may specify multiple deployed application filters.
 * For example, it can specify a filter to return all deployed applications
 * with health state Error and another filter to always include a deployed
 * application on a specified node.
 */
export interface ApplicationHealthStateFilter {
  applicationNameFilter?: string;
  applicationTypeNameFilter?: string;
  healthStateFilter?: number;
  serviceFilters?: ServiceHealthStateFilter[];
  deployedApplicationFilters?: DeployedApplicationHealthStateFilter[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationParameter class.
 * @constructor
 * Describes an application parameter override to be applied when creating or
 * upgrading an application.
 *
 * @member {string} key The name of the parameter.
 * @member {string} value The value of the parameter.
 */
export interface ApplicationParameter {
  key: string;
  value: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationInfo class.
 * @constructor
 * Information about a Service Fabric application.
 *
 * @member {string} [id] The identity of the application. This is an encoded
 * representation of the application name. This is used in the REST APIs to
 * identify the application resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the application name is "fabric:/myapp/app1",
 * the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in
 * previous versions.
 * @member {string} [name] The name of the application, including the 'fabric:'
 * URI scheme.
 * @member {string} [typeName] The application type name as defined in the
 * application manifest.
 * @member {string} [typeVersion] The version of the application type as
 * defined in the application manifest.
 * @member {string} [status] The status of the application. Possible values
 * include: 'Invalid', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {array} [parameters] List of application parameters with overridden
 * values from their default values specified in the application manifest.
 * @member {string} [healthState] The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * @member {string} [applicationDefinitionKind] The mechanism used to define a
 * Service Fabric application. Possible values include: 'Invalid',
 * 'ServiceFabricApplicationDescription', 'Compose'
 */
export interface ApplicationInfo {
  id?: string;
  name?: string;
  typeName?: string;
  typeVersion?: string;
  status?: string;
  parameters?: ApplicationParameter[];
  healthState?: string;
  applicationDefinitionKind?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationMetricDescription class.
 * @constructor
 * Describes capacity information for a custom resource balancing metric. This
 * can be used to limit the total consumption of this metric by the services of
 * this application.
 *
 * @member {string} [name] The name of the metric.
 * @member {number} [maximumCapacity] The maximum node capacity for Service
 * Fabric application.
 * This is the maximum Load for an instance of this application on a single
 * node. Even if the capacity of node is greater than this value, Service
 * Fabric will limit the total load of services within the application on each
 * node to this value.
 * If set to zero, capacity for this metric is unlimited on each node.
 * When creating a new application with application capacity defined, the
 * product of MaximumNodes and this value must always be smaller than or equal
 * to TotalApplicationCapacity.
 * When updating existing application with application capacity, the product of
 * MaximumNodes and this value must always be smaller than or equal to
 * TotalApplicationCapacity.
 * @member {number} [reservationCapacity] The node reservation capacity for
 * Service Fabric application.
 * This is the amount of load which is reserved on nodes which have instances
 * of this application.
 * If MinimumNodes is specified, then the product of these values will be the
 * capacity reserved in the cluster for the application.
 * If set to zero, no capacity is reserved for this metric.
 * When setting application capacity or when updating application capacity;
 * this value must be smaller than or equal to MaximumCapacity for each metric.
 * @member {number} [totalApplicationCapacity] The total metric capacity for
 * Service Fabric application.
 * This is the total metric capacity for this application in the cluster.
 * Service Fabric will try to limit the sum of loads of services within the
 * application to this value.
 * When creating a new application with application capacity defined, the
 * product of MaximumNodes and MaximumCapacity must always be smaller than or
 * equal to this value.
 */
export interface ApplicationMetricDescription {
  name?: string;
  maximumCapacity?: number;
  reservationCapacity?: number;
  totalApplicationCapacity?: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationLoadInfo class.
 * @constructor
 * Load Information about a Service Fabric application.
 *
 * @member {string} [id] The identity of the application. This is an encoded
 * representation of the application name. This is used in the REST APIs to
 * identify the application resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the application name is "fabric:/myapp/app1",
 * the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in
 * previous versions.
 * @member {number} [minimumNodes] The minimum number of nodes for this
 * application.
 * It is the number of nodes where Service Fabric will reserve Capacity in the
 * cluster which equals to ReservedLoad * MinimumNodes for this Application
 * instance.
 * For applications that do not have application capacity defined this value
 * will be zero.
 * @member {number} [maximumNodes] The maximum number of nodes where this
 * application can be instantiated.
 * It is the number of nodes this application is allowed to span.
 * For applications that do not have application capacity defined this value
 * will be zero.
 * @member {number} [nodeCount] The number of nodes on which this application
 * is instantiated.
 * For applications that do not have application capacity defined this value
 * will be zero.
 * @member {array} [applicationLoadMetricInformation] List of application
 * capacity metric description.
 */
export interface ApplicationLoadInfo {
  id?: string;
  minimumNodes?: number;
  maximumNodes?: number;
  nodeCount?: number;
  applicationLoadMetricInformation?: ApplicationMetricDescription[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationNameInfo class.
 * @constructor
 * Information about the application name.
 *
 * @member {string} [id] The identity of the application. This is an encoded
 * representation of the application name. This is used in the REST APIs to
 * identify the application resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the application name is "fabric:/myapp/app1",
 * the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in
 * previous versions.
 * @member {string} [name] The name of the application, including the 'fabric:'
 * URI scheme.
 */
export interface ApplicationNameInfo {
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationsHealthEvaluation class.
 * @constructor
 * Represents health evaluation for applications, containing health evaluations
 * for each unhealthy application that impacted current aggregated health
 * state.
 *
 * @member {number} [maxPercentUnhealthyApplications] Maximum allowed
 * percentage of unhealthy applications from the ClusterHealthPolicy.
 * @member {number} [totalCount] Total number of applications from the health
 * store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * ApplicationHealthEvaluation that impacted the aggregated health.
 */
export interface ApplicationsHealthEvaluation extends HealthEvaluation {
  maxPercentUnhealthyApplications?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationTypeApplicationsHealthEvaluation class.
 * @constructor
 * Represents health evaluation for applications of a particular application
 * type. The application type applications evaluation can be returned when
 * cluster health evaluation returns unhealthy aggregated health state, either
 * Error or Warning. It contains health evaluations for each unhealthy
 * application of the included application type that impacted current
 * aggregated health state.
 *
 * @member {string} [applicationTypeName] The application type name as defined
 * in the application manifest.
 * @member {number} [maxPercentUnhealthyApplications] Maximum allowed
 * percentage of unhealthy applications for the application type, specified as
 * an entry in ApplicationTypeHealthPolicyMap.
 * @member {number} [totalCount] Total number of applications of the
 * application type found in the health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * ApplicationHealthEvaluation of this application type that impacted the
 * aggregated health.
 */
export interface ApplicationTypeApplicationsHealthEvaluation extends HealthEvaluation {
  applicationTypeName?: string;
  maxPercentUnhealthyApplications?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationTypeHealthPolicyMapItem class.
 * @constructor
 * Defines an item in ApplicationTypeHealthPolicyMap.
 *
 * @member {string} key The key of the application type health policy map item.
 * This is the name of the application type.
 * @member {number} value The value of the application type health policy map
 * item.
 * The max percent unhealthy applications allowed for the application type.
 * Must be between zero and 100.
 */
export interface ApplicationTypeHealthPolicyMapItem {
  key: string;
  value: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationTypeInfo class.
 * @constructor
 * Information about an application type.
 *
 * @member {string} [name] The application type name as defined in the
 * application manifest.
 * @member {string} [version] The version of the application type as defined in
 * the application manifest.
 * @member {array} [defaultParameterList] List of application type parameters
 * that can be overridden when creating or updating the application.
 * @member {string} [status] The status of the application type. Possible
 * values include: 'Invalid', 'Provisioning', 'Available', 'Unprovisioning',
 * 'Failed'
 * @member {string} [statusDetails] Additional detailed information about the
 * status of the application type.
 * @member {string} [applicationTypeDefinitionKind] The mechanism used to
 * define a Service Fabric application type. Possible values include:
 * 'Invalid', 'ServiceFabricApplicationPackage', 'Compose'
 */
export interface ApplicationTypeInfo {
  name?: string;
  version?: string;
  defaultParameterList?: ApplicationParameter[];
  status?: string;
  statusDetails?: string;
  applicationTypeDefinitionKind?: string;
}

/**
 * @class
 * Initializes a new instance of the PagedApplicationTypeInfoList class.
 * @constructor
 * The list of application types that are provisioned or being provisioned in
 * the cluster. The list is paged when all of the results cannot fit in a
 * single message. The next set of results can be obtained by executing the
 * same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of application type information.
 */
export interface PagedApplicationTypeInfoList {
  continuationToken?: string;
  items?: ApplicationTypeInfo[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationTypeManifest class.
 * @constructor
 * Contains the manifest describing an application type registered in a Service
 * Fabric cluster.
 *
 * @member {string} [manifest] The XML manifest as a string.
 */
export interface ApplicationTypeManifest {
  manifest?: string;
}

/**
 * @class
 * Initializes a new instance of the MonitoringPolicyDescription class.
 * @constructor
 * Describes the parameters for monitoring an upgrade in Monitored mode.
 *
 * @member {string} [failureAction] The compensating action to perform when a
 * Monitored upgrade encounters monitoring policy or health policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [healthCheckWaitDurationInMilliseconds] The amount of time
 * to wait after completing an upgrade domain before applying health policies.
 * It is first interpreted as a string representing an ISO 8601 duration. If
 * that fails, then it is interpreted as a number representing the total number
 * of milliseconds.
 * @member {string} [healthCheckStableDurationInMilliseconds] The amount of
 * time that the application or cluster must remain healthy before the upgrade
 * proceeds to the next upgrade domain. It is first interpreted as a string
 * representing an ISO 8601 duration. If that fails, then it is interpreted as
 * a number representing the total number of milliseconds.
 * @member {string} [healthCheckRetryTimeoutInMilliseconds] The amount of time
 * to retry health evaluation when the application or cluster is unhealthy
 * before FailureAction is executed. It is first interpreted as a string
 * representing an ISO 8601 duration. If that fails, then it is interpreted as
 * a number representing the total number of milliseconds.
 * @member {string} [upgradeTimeoutInMilliseconds] The amount of time the
 * overall upgrade has to complete before FailureAction is executed. It is
 * first interpreted as a string representing an ISO 8601 duration. If that
 * fails, then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [upgradeDomainTimeoutInMilliseconds] The amount of time
 * each upgrade domain has to complete before FailureAction is executed. It is
 * first interpreted as a string representing an ISO 8601 duration. If that
 * fails, then it is interpreted as a number representing the total number of
 * milliseconds.
 */
export interface MonitoringPolicyDescription {
  failureAction?: string;
  healthCheckWaitDurationInMilliseconds?: string;
  healthCheckStableDurationInMilliseconds?: string;
  healthCheckRetryTimeoutInMilliseconds?: string;
  upgradeTimeoutInMilliseconds?: string;
  upgradeDomainTimeoutInMilliseconds?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeDescription class.
 * @constructor
 * Describes the parameters for an application upgrade. Note that upgrade
 * description replaces the existing application description. This means that
 * if the parameters are not specified, the existing parameters on the
 * applications will be overwritten with the empty parameters list. This would
 * result in the application using the default value of the parameters from the
 * application manifest. If you do not want to change any existing parameter
 * values, please get the application parameters first using the
 * GetApplicationInfo query and then supply those values as Parameters in this
 * ApplicationUpgradeDescription.
 *
 * @member {string} name The name of the target application, including the
 * 'fabric:' URI scheme.
 * @member {string} targetApplicationTypeVersion The target application type
 * version (found in the application manifest) for the application upgrade.
 * @member {array} parameters List of application parameters with overridden
 * values from their default values specified in the application manifest.
 * @member {string} upgradeKind The kind of upgrade out of the following
 * possible values. Possible values include: 'Invalid', 'Rolling'. Default
 * value: 'Rolling' .
 * @member {string} [rollingUpgradeMode] The mode used to monitor health during
 * a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds] The maximum amount
 * of time to block processing of an upgrade domain and prevent loss of
 * availability when there are unexpected issues. When this timeout expires,
 * processing of the upgrade domain will proceed regardless of availability
 * loss issues. The timeout is reset at the start of each upgrade domain. Valid
 * values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {boolean} [forceRestart] If true, then processes are forcefully
 * restarted during upgrade even when the code version has not changed (the
 * upgrade only changes configuration or data).
 * @member {object} [monitoringPolicy] Describes the parameters for monitoring
 * an upgrade in Monitored mode.
 * @member {string} [monitoringPolicy.failureAction] The compensating action to
 * perform when a Monitored upgrade encounters monitoring policy or health
 * policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds] The amount
 * of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [applicationHealthPolicy] Defines a health policy used to
 * evaluate the health of an application or one of its children entities.
 * @member {boolean} [applicationHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number}
 * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications] The
 * maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 * The maximum allowed percentage of unhealthy partitions per service. Allowed
 * values are Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 * The maximum allowed percentage of unhealthy replicas per partition. Allowed
 * values are Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 * The maximum allowed percentage of unhealthy services. Allowed values are
 * Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 * @member {array} [applicationHealthPolicy.serviceTypeHealthPolicyMap] The map
 * with service type health policy per service type name. The map is empty by
 * default.
 */
export interface ApplicationUpgradeDescription {
  name: string;
  targetApplicationTypeVersion: string;
  parameters: ApplicationParameter[];
  upgradeKind: string;
  rollingUpgradeMode?: string;
  upgradeReplicaSetCheckTimeoutInSeconds?: number;
  forceRestart?: boolean;
  monitoringPolicy?: MonitoringPolicyDescription;
  applicationHealthPolicy?: ApplicationHealthPolicy;
}

/**
 * @class
 * Initializes a new instance of the UpgradeDomainInfo class.
 * @constructor
 * Information about an upgrade domain.
 *
 * @member {string} [name] The name of the upgrade domain
 * @member {string} [state] The state of the upgrade domain. Possible values
 * include: 'Invalid', 'Pending', 'InProgress', 'Completed'
 */
export interface UpgradeDomainInfo {
  name?: string;
  state?: string;
}

/**
 * @class
 * Initializes a new instance of the SafetyCheck class.
 * @constructor
 * Represents a safety check performed by service fabric before continuing with
 * the operations. These checks ensure the availability of the service and the
 * reliability of the state.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface SafetyCheck {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the SafetyCheckWrapper class.
 * @constructor
 * A wrapper for the safety check object. Safety checks are performed by
 * service fabric before continuing with the operations. These checks ensure
 * the availability of the service and the reliability of the state.
 *
 * @member {object} [safetyCheck] Represents a safety check performed by
 * service fabric before continuing with the operations. These checks ensure
 * the availability of the service and the reliability of the state.
 * @member {string} [safetyCheck.kind] Polymorphic Discriminator
 */
export interface SafetyCheckWrapper {
  safetyCheck?: SafetyCheck;
}

/**
 * @class
 * Initializes a new instance of the NodeUpgradeProgressInfo class.
 * @constructor
 * Information about the upgrading node and its status
 *
 * @member {string} [nodeName] The name of a Service Fabric node.
 * @member {string} [upgradePhase] The state of the upgrading node. Possible
 * values include: 'Invalid', 'PreUpgradeSafetyCheck', 'Upgrading',
 * 'PostUpgradeSafetyCheck'
 * @member {array} [pendingSafetyChecks] List of pending safety checks
 */
export interface NodeUpgradeProgressInfo {
  nodeName?: string;
  upgradePhase?: string;
  pendingSafetyChecks?: SafetyCheckWrapper[];
}

/**
 * @class
 * Initializes a new instance of the CurrentUpgradeDomainProgressInfo class.
 * @constructor
 * Information about the current in-progress upgrade domain.
 *
 * @member {string} [domainName] The name of the upgrade domain
 * @member {array} [nodeUpgradeProgressList] List of upgrading nodes and their
 * statuses
 */
export interface CurrentUpgradeDomainProgressInfo {
  domainName?: string;
  nodeUpgradeProgressList?: NodeUpgradeProgressInfo[];
}

/**
 * @class
 * Initializes a new instance of the FailureUpgradeDomainProgressInfo class.
 * @constructor
 * Information about the upgrade domain progress at the time of upgrade
 * failure.
 *
 * @member {string} [domainName] The name of the upgrade domain
 * @member {array} [nodeUpgradeProgressList] List of upgrading nodes and their
 * statuses
 */
export interface FailureUpgradeDomainProgressInfo {
  domainName?: string;
  nodeUpgradeProgressList?: NodeUpgradeProgressInfo[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeProgressInfo class.
 * @constructor
 * Describes the parameters for an application upgrade.
 *
 * @member {string} [name] The name of the target application, including the
 * 'fabric:' URI scheme.
 * @member {string} [typeName] The application type name as defined in the
 * application manifest.
 * @member {string} [targetApplicationTypeVersion] The target application type
 * version (found in the application manifest) for the application upgrade.
 * @member {array} [upgradeDomains] List of upgrade domains and their statuses.
 * @member {string} [upgradeState] The state of the upgrade domain. Possible
 * values include: 'Invalid', 'RollingBackInProgress', 'RollingBackCompleted',
 * 'RollingForwardPending', 'RollingForwardInProgress',
 * 'RollingForwardCompleted', 'Failed'
 * @member {string} [nextUpgradeDomain] The name of the next upgrade domain to
 * be processed.
 * @member {string} [rollingUpgradeMode] The mode used to monitor health during
 * a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {object} [upgradeDescription] Describes the parameters for an
 * application upgrade. Note that upgrade description replaces the existing
 * application description. This means that if the parameters are not
 * specified, the existing parameters on the applications will be overwritten
 * with the empty parameters list. This would result in the application using
 * the default value of the parameters from the application manifest. If you do
 * not want to change any existing parameter values, please get the application
 * parameters first using the GetApplicationInfo query and then supply those
 * values as Parameters in this ApplicationUpgradeDescription.
 * @member {string} [upgradeDescription.name] The name of the target
 * application, including the 'fabric:' URI scheme.
 * @member {string} [upgradeDescription.targetApplicationTypeVersion] The
 * target application type version (found in the application manifest) for the
 * application upgrade.
 * @member {array} [upgradeDescription.parameters] List of application
 * parameters with overridden values from their default values specified in the
 * application manifest.
 * @member {string} [upgradeDescription.upgradeKind] The kind of upgrade out of
 * the following possible values. Possible values include: 'Invalid', 'Rolling'
 * @member {string} [upgradeDescription.rollingUpgradeMode] The mode used to
 * monitor health during a rolling upgrade. The values are UnmonitoredAuto,
 * UnmonitoredManual, and Monitored. Possible values include: 'Invalid',
 * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
 * @member {number} [upgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds]
 * The maximum amount of time to block processing of an upgrade domain and
 * prevent loss of availability when there are unexpected issues. When this
 * timeout expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 * @member {boolean} [upgradeDescription.forceRestart] If true, then processes
 * are forcefully restarted during upgrade even when the code version has not
 * changed (the upgrade only changes configuration or data).
 * @member {object} [upgradeDescription.monitoringPolicy] Describes the
 * parameters for monitoring an upgrade in Monitored mode.
 * @member {string} [upgradeDescription.monitoringPolicy.failureAction] The
 * compensating action to perform when a Monitored upgrade encounters
 * monitoring policy or health policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string}
 * [upgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds] The
 * amount of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [upgradeDescription.applicationHealthPolicy] Defines a
 * health policy used to evaluate the health of an application or one of its
 * children entities.
 * @member {boolean}
 * [upgradeDescription.applicationHealthPolicy.considerWarningAsError]
 * Indicates whether warnings are treated with the same severity as errors.
 * @member {number}
 * [upgradeDescription.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
 * The maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 * @member {object}
 * [upgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 * @member {number}
 * [upgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 * The maximum allowed percentage of unhealthy partitions per service. Allowed
 * values are Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number}
 * [upgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 * The maximum allowed percentage of unhealthy replicas per partition. Allowed
 * values are Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number}
 * [upgradeDescription.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 * The maximum allowed percentage of unhealthy services. Allowed values are
 * Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 * @member {array}
 * [upgradeDescription.applicationHealthPolicy.serviceTypeHealthPolicyMap] The
 * map with service type health policy per service type name. The map is empty
 * by default.
 * @member {string} [upgradeDurationInMilliseconds] The estimated total amount
 * of time spent processing the overall upgrade.
 * @member {string} [upgradeDomainDurationInMilliseconds] The estimated total
 * amount of time spent processing the current upgrade domain.
 * @member {array} [unhealthyEvaluations] List of health evaluations that
 * resulted in the current aggregated health state.
 * @member {object} [currentUpgradeDomainProgress] Information about the
 * current in-progress upgrade domain.
 * @member {string} [currentUpgradeDomainProgress.domainName] The name of the
 * upgrade domain
 * @member {array} [currentUpgradeDomainProgress.nodeUpgradeProgressList] List
 * of upgrading nodes and their statuses
 * @member {string} [startTimestampUtc] The estimated UTC datetime when the
 * upgrade started.
 * @member {string} [failureTimestampUtc] The estimated UTC datetime when the
 * upgrade failed and FailureAction was executed.
 * @member {string} [failureReason] The cause of an upgrade failure that
 * resulted in FailureAction being executed. Possible values include: 'None',
 * 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout',
 * 'OverallUpgradeTimeout'
 * @member {object} [upgradeDomainProgressAtFailure] Information about the
 * upgrade domain progress at the time of upgrade failure.
 * @member {string} [upgradeDomainProgressAtFailure.domainName] The name of the
 * upgrade domain
 * @member {array} [upgradeDomainProgressAtFailure.nodeUpgradeProgressList]
 * List of upgrading nodes and their statuses
 * @member {string} [upgradeStatusDetails] Additional detailed information
 * about the status of the pending upgrade.
 */
export interface ApplicationUpgradeProgressInfo {
  name?: string;
  typeName?: string;
  targetApplicationTypeVersion?: string;
  upgradeDomains?: UpgradeDomainInfo[];
  upgradeState?: string;
  nextUpgradeDomain?: string;
  rollingUpgradeMode?: string;
  upgradeDescription?: ApplicationUpgradeDescription;
  upgradeDurationInMilliseconds?: string;
  upgradeDomainDurationInMilliseconds?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
  currentUpgradeDomainProgress?: CurrentUpgradeDomainProgressInfo;
  startTimestampUtc?: string;
  failureTimestampUtc?: string;
  failureReason?: string;
  upgradeDomainProgressAtFailure?: FailureUpgradeDomainProgressInfo;
  upgradeStatusDetails?: string;
}

/**
 * @class
 * Initializes a new instance of the ClusterConfiguration class.
 * @constructor
 * Information about the standalone cluster configuration.
 *
 * @member {string} [clusterConfiguration] The contents of the cluster
 * configuration file.
 */
export interface ClusterConfiguration {
  clusterConfiguration?: string;
}

/**
 * @class
 * Initializes a new instance of the ClusterEvent class.
 * @constructor
 * Represents the base for all Cluster Events.
 *
 */
export interface ClusterEvent extends FabricEvent {
}

/**
 * @class
 * Initializes a new instance of the NodeId class.
 * @constructor
 * An internal ID used by Service Fabric to uniquely identify a node. Node Id
 * is deterministically generated from node name.
 *
 * @member {string} [id] Value of the node Id. This is a 128 bit integer.
 */
export interface NodeId {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeHealthState class.
 * @constructor
 * Represents the health state of a node, which contains the node identifier
 * and its aggregated health state.
 *
 * @member {string} [name] The name of a Service Fabric node.
 * @member {object} [id] An internal ID used by Service Fabric to uniquely
 * identify a node. Node Id is deterministically generated from node name.
 * @member {string} [id.id] Value of the node Id. This is a 128 bit integer.
 */
export interface NodeHealthState extends EntityHealthState {
  name?: string;
  id?: NodeId;
}

/**
 * @class
 * Initializes a new instance of the ClusterHealth class.
 * @constructor
 * Represents the health of the cluster.
 * Contains the cluster aggregated health state, the cluster application and
 * node health states as well as the health events and the unhealthy
 * evaluations.
 *
 * @member {array} [nodeHealthStates] Cluster node health states as found in
 * the health store.
 * @member {array} [applicationHealthStates] Cluster application health states
 * as found in the health store.
 */
export interface ClusterHealth extends EntityHealth {
  nodeHealthStates?: NodeHealthState[];
  applicationHealthStates?: ApplicationHealthState[];
}

/**
 * @class
 * Initializes a new instance of the NodeHealthStateChunk class.
 * @constructor
 * Represents the health state chunk of a node, which contains the node name
 * and its aggregated health state.
 *
 * @member {string} [nodeName] The name of a Service Fabric node.
 */
export interface NodeHealthStateChunk extends EntityHealthStateChunk {
  nodeName?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeHealthStateChunkList class.
 * @constructor
 * The list of node health state chunks in the cluster that respect the input
 * filters in the chunk query. Returned by get cluster health state chunks
 * query.
 *
 * @member {array} [items] The list of node health state chunks that respect
 * the input filters in the chunk query.
 */
export interface NodeHealthStateChunkList extends EntityHealthStateChunkList {
  items?: NodeHealthStateChunk[];
}

/**
 * @class
 * Initializes a new instance of the ClusterHealthChunk class.
 * @constructor
 * Represents the health chunk of the cluster.
 * Contains the cluster aggregated health state, and the cluster entities that
 * respect the input filter.
 *
 * @member {string} [healthState] The HealthState representing the aggregated
 * health state of the cluster computed by Health Manager.
 * The health evaluation of the entity reflects all events reported on the
 * entity and its children (if any).
 * The aggregation is done by applying the desired cluster health policy and
 * the application health policies. Possible values include: 'Invalid', 'Ok',
 * 'Warning', 'Error', 'Unknown'
 * @member {object} [nodeHealthStateChunks] The list of node health state
 * chunks in the cluster that respect the filters in the cluster health chunk
 * query description.
 * @member {array} [nodeHealthStateChunks.items] The list of node health state
 * chunks that respect the input filters in the chunk query.
 * @member {object} [applicationHealthStateChunks] The list of application
 * health state chunks in the cluster that respect the filters in the cluster
 * health chunk query description.
 * @member {array} [applicationHealthStateChunks.items] The list of application
 * health state chunks that respect the input filters in the chunk query.
 */
export interface ClusterHealthChunk {
  healthState?: string;
  nodeHealthStateChunks?: NodeHealthStateChunkList;
  applicationHealthStateChunks?: ApplicationHealthStateChunkList;
}

/**
 * @class
 * Initializes a new instance of the NodeHealthStateFilter class.
 * @constructor
 * Defines matching criteria to determine whether a node should be included in
 * the returned cluster health chunk.
 * One filter can match zero, one or multiple nodes, depending on its
 * properties.
 * Can be specified in the cluster health chunk query description.
 *
 * @member {string} [nodeNameFilter] Name of the node that matches the filter.
 * The filter is applied only to the specified node, if it exists.
 * If the node doesn't exist, no node is returned in the cluster health chunk
 * based on this filter.
 * If the node exists, it is included in the cluster health chunk if the health
 * state matches the other filter properties.
 * If not specified, all nodes that match the parent filters (if any) are taken
 * into consideration and matched against the other filter members, like health
 * state filter.
 * @member {number} [healthStateFilter] The filter for the health state of the
 * nodes. It allows selecting nodes if they match the desired health states.
 * The possible values are integer value of one of the following health states.
 * Only nodes that match the filter are returned. All nodes are used to
 * evaluate the cluster aggregated health state.
 * If not specified, default value is None, unless the node name is specified.
 * If the filter has default value and node name is specified, the matching
 * node is returned.
 * The state values are flag-based enumeration, so the value could be a
 * combination of these values obtained using bitwise 'OR' operator.
 * For example, if the provided value is 6, it matches nodes with HealthState
 * value of OK (2) and Warning (4).
 *
 * - Default - Default value. Matches any HealthState. The value is zero.
 * - None - Filter that doesn't match any HealthState value. Used in order to
 * return no results on a given collection of states. The value is 1.
 * - Ok - Filter that matches input with HealthState value Ok. The value is 2.
 * - Warning - Filter that matches input with HealthState value Warning. The
 * value is 4.
 * - Error - Filter that matches input with HealthState value Error. The value
 * is 8.
 * - All - Filter that matches input with any HealthState value. The value is
 * 65535. Default value: 0 .
 */
export interface NodeHealthStateFilter {
  nodeNameFilter?: string;
  healthStateFilter?: number;
}

/**
 * @class
 * Initializes a new instance of the ClusterHealthPolicy class.
 * @constructor
 * Defines a health policy used to evaluate the health of the cluster or of a
 * cluster node.
 *
 * @member {boolean} [considerWarningAsError] Indicates whether warnings are
 * treated with the same severity as errors. Default value: false .
 * @member {number} [maxPercentUnhealthyNodes] The maximum allowed percentage
 * of unhealthy nodes before reporting an error. For example, to allow 10% of
 * nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that. Default value: 0 .
 * @member {number} [maxPercentUnhealthyApplications] The maximum allowed
 * percentage of unhealthy applications before reporting an error. For example,
 * to allow 10% of applications to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero. Default value: 0 .
 * @member {array} [applicationTypeHealthPolicyMap] Defines a map with max
 * percentage unhealthy applications for specific application types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 */
export interface ClusterHealthPolicy {
  considerWarningAsError?: boolean;
  maxPercentUnhealthyNodes?: number;
  maxPercentUnhealthyApplications?: number;
  applicationTypeHealthPolicyMap?: ApplicationTypeHealthPolicyMapItem[];
}

/**
 * @class
 * Initializes a new instance of the ClusterHealthChunkQueryDescription class.
 * @constructor
 * The cluster health chunk query description, which can specify the health
 * policies to evaluate cluster health and very expressive filters to select
 * which cluster entities to include in response.
 *
 * @member {array} [nodeFilters] Defines a list of filters that specify which
 * nodes to be included in the returned cluster health chunk.
 * If no filters are specified, no nodes are returned. All the nodes are used
 * to evaluate the cluster's aggregated health state, regardless of the input
 * filters.
 * The cluster health chunk query may specify multiple node filters.
 * For example, it can specify a filter to return all nodes with health state
 * Error and another filter to always include a node identified by its
 * NodeName.
 * @member {array} [applicationFilters] Defines a list of filters that specify
 * which applications to be included in the returned cluster health chunk.
 * If no filters are specified, no applications are returned. All the
 * applications are used to evaluate the cluster's aggregated health state,
 * regardless of the input filters.
 * The cluster health chunk query may specify multiple application filters.
 * For example, it can specify a filter to return all applications with health
 * state Error and another filter to always include applications of a specified
 * application type.
 * @member {object} [clusterHealthPolicy] Defines a health policy used to
 * evaluate the health of the cluster or of a cluster node.
 * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {object} [applicationHealthPolicies] Defines the application health
 * policy map used to evaluate the health of an application or one of its
 * children entities.
 * @member {array} [applicationHealthPolicies.applicationHealthPolicyMap] The
 * wrapper that contains the map with application health policies used to
 * evaluate specific applications in the cluster.
 */
export interface ClusterHealthChunkQueryDescription {
  nodeFilters?: NodeHealthStateFilter[];
  applicationFilters?: ApplicationHealthStateFilter[];
  clusterHealthPolicy?: ClusterHealthPolicy;
  applicationHealthPolicies?: ApplicationHealthPolicies;
}

/**
 * @class
 * Initializes a new instance of the ClusterHealthPolicies class.
 * @constructor
 * Health policies to evaluate cluster health.
 *
 * @member {array} [applicationHealthPolicyMap] Defines a map that contains
 * specific application health policies for different applications.
 * Each entry specifies as key the application name and as value an
 * ApplicationHealthPolicy used to evaluate the application health.
 * If an application is not specified in the map, the application health
 * evaluation uses the ApplicationHealthPolicy found in its application
 * manifest or the default application health policy (if no health policy is
 * defined in the manifest).
 * The map is empty by default.
 * @member {object} [clusterHealthPolicy] Defines a health policy used to
 * evaluate the health of the cluster or of a cluster node.
 * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 */
export interface ClusterHealthPolicies {
  applicationHealthPolicyMap?: ApplicationHealthPolicyMapItem[];
  clusterHealthPolicy?: ClusterHealthPolicy;
}

/**
 * @class
 * Initializes a new instance of the ClusterManifest class.
 * @constructor
 * Information about the cluster manifest.
 *
 * @member {string} [manifest] The contents of the cluster manifest file.
 */
export interface ClusterManifest {
  manifest?: string;
}

/**
 * @class
 * Initializes a new instance of the ClusterVersion class.
 * @constructor
 * The cluster version.
 *
 * @member {string} [version] The Service Fabric cluster runtime version.
 */
export interface ClusterVersion {
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerApiRequestBody class.
 * @constructor
 * parameters for making container API call.
 *
 * @member {string} [httpVerb] HTTP verb of container REST API, defaults to
 * "GET"
 * @member {string} uriPath URI path of container REST API
 * @member {string} [contentType] Content type of container REST API request,
 * defaults to "application/json"
 * @member {string} [body] HTTP request body of container REST API
 */
export interface ContainerApiRequestBody {
  httpVerb?: string;
  uriPath: string;
  contentType?: string;
  body?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerApiResult class.
 * @constructor
 * Container API result.
 *
 * @member {number} status HTTP status code returned by the target container
 * API
 * @member {string} [contentType] HTTP content type
 * @member {string} [contentEncoding] HTTP content encoding
 * @member {string} [body] container API result body
 */
export interface ContainerApiResult {
  status: number;
  contentType?: string;
  contentEncoding?: string;
  body?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerApiResponse class.
 * @constructor
 * Response body that wraps container API result.
 *
 * @member {object} containerApiResult Container API result.
 * @member {number} [containerApiResult.status] HTTP status code returned by
 * the target container API
 * @member {string} [containerApiResult.contentType] HTTP content type
 * @member {string} [containerApiResult.contentEncoding] HTTP content encoding
 * @member {string} [containerApiResult.body] container API result body
 */
export interface ContainerApiResponse {
  containerApiResult: ContainerApiResult;
}

/**
 * @class
 * Initializes a new instance of the ContainerInstanceEvent class.
 * @constructor
 * Represents the base for all Container Events.
 *
 */
export interface ContainerInstanceEvent extends FabricEvent {
}

/**
 * @class
 * Initializes a new instance of the DeactivationIntentDescription class.
 * @constructor
 * Describes the intent or reason for deactivating the node.
 *
 * @member {string} [deactivationIntent] Describes the intent or reason for
 * deactivating the node. The possible values are following. Possible values
 * include: 'Pause', 'Restart', 'RemoveData'
 */
export interface DeactivationIntentDescription {
  deactivationIntent?: string;
}

/**
 * @class
 * Initializes a new instance of the DeltaNodesCheckHealthEvaluation class.
 * @constructor
 * Represents health evaluation for delta nodes, containing health evaluations
 * for each unhealthy node that impacted current aggregated health state.
 * Can be returned during cluster upgrade when the aggregated health state of
 * the cluster is Warning or Error.
 *
 * @member {number} [baselineErrorCount] Number of nodes with aggregated heath
 * state Error in the health store at the beginning of the cluster upgrade.
 * @member {number} [baselineTotalCount] Total number of nodes in the health
 * store at the beginning of the cluster upgrade.
 * @member {number} [maxPercentDeltaUnhealthyNodes] Maximum allowed percentage
 * of delta unhealthy nodes from the ClusterUpgradeHealthPolicy.
 * @member {number} [totalCount] Total number of nodes in the health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state.
 * Includes all the unhealthy NodeHealthEvaluation that impacted the aggregated
 * health.
 */
export interface DeltaNodesCheckHealthEvaluation extends HealthEvaluation {
  baselineErrorCount?: number;
  baselineTotalCount?: number;
  maxPercentDeltaUnhealthyNodes?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealthState class.
 * @constructor
 * Represents the health state of a deployed service package, containing the
 * entity identifier and the aggregated health state.
 *
 * @member {string} [nodeName] Name of the node on which the service package is
 * deployed.
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {string} [serviceManifestName] Name of the manifest describing the
 * service package.
 * @member {string} [servicePackageActivationId] The ActivationId of a deployed
 * service package. If ServicePackageActivationMode specified at the time of
 * creating the service
 * is 'SharedProcess' (or if it is not specified, in which case it defaults to
 * 'SharedProcess'), then value of ServicePackageActivationId
 * is always an empty string.
 */
export interface DeployedServicePackageHealthState extends EntityHealthState {
  nodeName?: string;
  applicationName?: string;
  serviceManifestName?: string;
  servicePackageActivationId?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealth class.
 * @constructor
 * Information about the health of an application deployed on a Service Fabric
 * node.
 *
 * @member {string} [name] Name of the application deployed on the node whose
 * health information is described by this object.
 * @member {string} [nodeName] Name of the node where this application is
 * deployed.
 * @member {array} [deployedServicePackageHealthStates] Deployed service
 * package health states for the current deployed application as found in the
 * health store.
 */
export interface DeployedApplicationHealth extends EntityHealth {
  name?: string;
  nodeName?: string;
  deployedServicePackageHealthStates?: DeployedServicePackageHealthState[];
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealthEvaluation class.
 * @constructor
 * Represents health evaluation for a deployed application, containing
 * information about the data and the algorithm used by the health store to
 * evaluate health.
 *
 * @member {string} [nodeName] Name of the node where the application is
 * deployed to.
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {array} [unhealthyEvaluations] List of  unhealthy evaluations that
 * led to the current aggregated health state of the deployed application.
 * The types of the unhealthy evaluations can be
 * DeployedServicePackagesHealthEvaluation or EventHealthEvaluation.
 */
export interface DeployedApplicationHealthEvaluation extends HealthEvaluation {
  nodeName?: string;
  applicationName?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationInfo class.
 * @constructor
 * Information about application deployed on the node.
 *
 * @member {string} [id] The identity of the application. This is an encoded
 * representation of the application name. This is used in the REST APIs to
 * identify the application resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the application name is "fabric:/myapp/app1",
 * the application identity would be "myapp\~app1" in 6.0+ and "myapp/app1" in
 * previous versions.
 * @member {string} [name] The name of the application, including the 'fabric:'
 * URI scheme.
 * @member {string} [typeName] The application type name as defined in the
 * application manifest.
 * @member {string} [status] The status of the application deployed on the
 * node. Following are the possible values. Possible values include: 'Invalid',
 * 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating'
 * @member {string} [workDirectory] The work directory of the application on
 * the node. The work directory can be used to store application data.
 * @member {string} [logDirectory] The log directory of the application on the
 * node. The log directory can be used to store application logs.
 * @member {string} [tempDirectory] The temp directory of the application on
 * the node. The code packages belonging to the application are forked with
 * this directory set as their temporary directory.
 * @member {string} [healthState] The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 */
export interface DeployedApplicationInfo {
  id?: string;
  name?: string;
  typeName?: string;
  status?: string;
  workDirectory?: string;
  logDirectory?: string;
  tempDirectory?: string;
  healthState?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationsHealthEvaluation class.
 * @constructor
 * Represents health evaluation for deployed applications, containing health
 * evaluations for each unhealthy deployed application that impacted current
 * aggregated health state.
 * Can be returned when evaluating application health and the aggregated health
 * state is either Error or Warning.
 *
 * @member {number} [maxPercentUnhealthyDeployedApplications] Maximum allowed
 * percentage of unhealthy deployed applications from the
 * ApplicationHealthPolicy.
 * @member {number} [totalCount] Total number of deployed applications of the
 * application in the health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * DeployedApplicationHealthEvaluation that impacted the aggregated health.
 */
export interface DeployedApplicationsHealthEvaluation extends HealthEvaluation {
  maxPercentUnhealthyDeployedApplications?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealth class.
 * @constructor
 * Information about the health of a service package for a specific application
 * deployed on a Service Fabric node.
 *
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {string} [serviceManifestName] Name of the service manifest.
 * @member {string} [nodeName] Name of the node where this service package is
 * deployed.
 */
export interface DeployedServicePackageHealth extends EntityHealth {
  applicationName?: string;
  serviceManifestName?: string;
  nodeName?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealthEvaluation class.
 * @constructor
 * Represents health evaluation for a deployed service package, containing
 * information about the data and the algorithm used by health store to
 * evaluate health. The evaluation is returned only when the aggregated health
 * state is either Error or Warning.
 *
 * @member {string} [nodeName] The name of a Service Fabric node.
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {string} [serviceManifestName] The name of the service manifest.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the current aggregated health state. The type of the unhealthy
 * evaluations can be EventHealthEvaluation.
 */
export interface DeployedServicePackageHealthEvaluation extends HealthEvaluation {
  nodeName?: string;
  applicationName?: string;
  serviceManifestName?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackagesHealthEvaluation class.
 * @constructor
 * Represents health evaluation for deployed service packages, containing
 * health evaluations for each unhealthy deployed service package that impacted
 * current aggregated health state. Can be returned when evaluating deployed
 * application health and the aggregated health state is either Error or
 * Warning.
 *
 * @member {number} [totalCount] Total number of deployed service packages of
 * the deployed application in the health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * DeployedServicePackageHealthEvaluation that impacted the aggregated health.
 */
export interface DeployedServicePackagesHealthEvaluation extends HealthEvaluation {
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the DeployedServiceReplicaInfo class.
 * @constructor
 * Information about a Service Fabric service replica deployed on a node.
 *
 * @member {string} [serviceName] The full name of the service with 'fabric:'
 * URI scheme.
 * @member {string} [serviceTypeName] Name of the service type as specified in
 * the service manifest.
 * @member {string} [serviceManifestName] The name of the service manifest in
 * which this service type is defined.
 * @member {string} [codePackageName] The name of the code package that hosts
 * this replica.
 * @member {uuid} [partitionId] An internal ID used by Service Fabric to
 * uniquely identify a partition. This is a randomly generated GUID when the
 * service was created. The partition ID is unique and does not change for the
 * lifetime of the service. If the same service was deleted and recreated the
 * IDs of its partitions would be different.
 * @member {string} [replicaStatus] The status of a replica of a service.
 * Possible values include: 'Invalid', 'InBuild', 'Standby', 'Ready', 'Down',
 * 'Dropped'
 * @member {string} [address] The last address returned by the replica in Open
 * or ChangeRole.
 * @member {string} [servicePackageActivationId] The ActivationId of a deployed
 * service package. If ServicePackageActivationMode specified at the time of
 * creating the service
 * is 'SharedProcess' (or if it is not specified, in which case it defaults to
 * 'SharedProcess'), then value of ServicePackageActivationId
 * is always an empty string.
 * @member {string} [hostProcessId] Host process ID of the process that is
 * hosting the replica. This will be zero if the replica is down. In hyper-v
 * containers this host process ID will be from different kernel.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface DeployedServiceReplicaInfo {
  serviceName?: string;
  serviceTypeName?: string;
  serviceManifestName?: string;
  codePackageName?: string;
  partitionId?: string;
  replicaStatus?: string;
  address?: string;
  servicePackageActivationId?: string;
  hostProcessId?: string;
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the ReconfigurationInformation class.
 * @constructor
 * Information about current reconfiguration like phase, type, previous
 * configuration role of replica and reconfiguration start date time.
 *
 * @member {string} [previousConfigurationRole] Replica role before
 * reconfiguration started. Possible values include: 'Unknown', 'None',
 * 'Primary', 'IdleSecondary', 'ActiveSecondary'
 * @member {string} [reconfigurationPhase] Current phase of ongoing
 * reconfiguration. If no reconfiguration is taking place then this value will
 * be "None". Possible values include: 'Unknown', 'None', 'Phase0', 'Phase1',
 * 'Phase2', 'Phase3', 'Phase4', 'AbortPhaseZero'
 * @member {string} [reconfigurationType] Type of current ongoing
 * reconfiguration. If no reconfiguration is taking place then this value will
 * be "None". Possible values include: 'Unknown', 'SwapPrimary', 'Failover',
 * 'Other'
 * @member {date} [reconfigurationStartTimeUtc] Start time (in UTC) of the
 * ongoing reconfiguration. If no reconfiguration is taking place then this
 * value will be zero date-time.
 */
export interface ReconfigurationInformation {
  previousConfigurationRole?: string;
  reconfigurationPhase?: string;
  reconfigurationType?: string;
  reconfigurationStartTimeUtc?: Date;
}

/**
 * @class
 * Initializes a new instance of the DeployedStatefulServiceReplicaInfo class.
 * @constructor
 * Information about a stateful service replica deployed on a node.
 *
 * @member {string} [replicaId] Id of a stateful service replica. ReplicaId is
 * used by Service Fabric to uniquely identify a replica of a partition. It is
 * unique within a partition and does not change for the lifetime of the
 * replica. If a replica gets dropped and another replica gets created on the
 * same node for the same partition, it will get a different value for the id.
 * Sometimes the id of a stateless service instance is also referred as a
 * replica id.
 * @member {string} [replicaRole] The role of a replica of a stateful service.
 * Possible values include: 'Unknown', 'None', 'Primary', 'IdleSecondary',
 * 'ActiveSecondary'
 * @member {object} [reconfigurationInformation] Information about current
 * reconfiguration like phase, type, previous configuration role of replica and
 * reconfiguration start date time.
 * @member {string} [reconfigurationInformation.previousConfigurationRole]
 * Replica role before reconfiguration started. Possible values include:
 * 'Unknown', 'None', 'Primary', 'IdleSecondary', 'ActiveSecondary'
 * @member {string} [reconfigurationInformation.reconfigurationPhase] Current
 * phase of ongoing reconfiguration. If no reconfiguration is taking place then
 * this value will be "None". Possible values include: 'Unknown', 'None',
 * 'Phase0', 'Phase1', 'Phase2', 'Phase3', 'Phase4', 'AbortPhaseZero'
 * @member {string} [reconfigurationInformation.reconfigurationType] Type of
 * current ongoing reconfiguration. If no reconfiguration is taking place then
 * this value will be "None". Possible values include: 'Unknown',
 * 'SwapPrimary', 'Failover', 'Other'
 * @member {date} [reconfigurationInformation.reconfigurationStartTimeUtc]
 * Start time (in UTC) of the ongoing reconfiguration. If no reconfiguration is
 * taking place then this value will be zero date-time.
 */
export interface DeployedStatefulServiceReplicaInfo extends DeployedServiceReplicaInfo {
  replicaId?: string;
  replicaRole?: string;
  reconfigurationInformation?: ReconfigurationInformation;
}

/**
 * @class
 * Initializes a new instance of the DeployedStatelessServiceInstanceInfo class.
 * @constructor
 * Information about a stateless service instance deployed on a node.
 *
 * @member {string} [instanceId] Id of a stateless service instance. InstanceId
 * is used by Service Fabric to uniquely identify an instance of a partition of
 * a stateless service. It is unique within a partition and does not change for
 * the lifetime of the instance. If the instance has failed over on the same or
 * different node, it will get a different value for the InstanceId.
 */
export interface DeployedStatelessServiceInstanceInfo extends DeployedServiceReplicaInfo {
  instanceId?: string;
}

/**
 * @class
 * Initializes a new instance of the HealthInformation class.
 * @constructor
 * Represents common health report information. It is included in all health
 * reports sent to health store and in all health events returned by health
 * queries.
 *
 * @member {string} sourceId The source name that identifies the
 * client/watchdog/system component that generated the health information.
 * @member {string} property The property of the health information. An entity
 * can have health reports for different properties.
 * The property is a string and not a fixed enumeration to allow the reporter
 * flexibility to categorize the state condition that triggers the report.
 * For example, a reporter with SourceId "LocalWatchdog" can monitor the state
 * of the available disk on a node,
 * so it can report "AvailableDisk" property on that node.
 * The same reporter can monitor the node connectivity, so it can report a
 * property "Connectivity" on the same node.
 * In the health store, these reports are treated as separate health events for
 * the specified node.
 *
 * Together with the SourceId, the property uniquely identifies the health
 * information.
 * @member {string} healthState The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * @member {moment.duration} [timeToLiveInMilliSeconds] The duration for which
 * this health report is valid. This field uses ISO8601 format for specifying
 * the duration.
 * When clients report periodically, they should send reports with higher
 * frequency than time to live.
 * If clients report on transition, they can set the time to live to infinite.
 * When time to live expires, the health event that contains the health
 * information
 * is either removed from health store, if RemoveWhenExpired is true, or
 * evaluated at error, if RemoveWhenExpired false.
 *
 * If not specified, time to live defaults to infinite value.
 * @member {string} [description] The description of the health information. It
 * represents free text used to add human readable information about the
 * report.
 * The maximum string length for the description is 4096 characters.
 * If the provided string is longer, it will be automatically truncated.
 * When truncated, the last characters of the description contain a marker
 * "[Truncated]", and total string size is 4096 characters.
 * The presence of the marker indicates to users that truncation occurred.
 * Note that when truncated, the description has less than 4096 characters from
 * the original string.
 * @member {string} [sequenceNumber] The sequence number for this health report
 * as a numeric string.
 * The report sequence number is used by the health store to detect stale
 * reports.
 * If not specified, a sequence number is auto-generated by the health client
 * when a report is added.
 * @member {boolean} [removeWhenExpired] Value that indicates whether the
 * report is removed from health store when it expires.
 * If set to true, the report is removed from the health store after it
 * expires.
 * If set to false, the report is treated as an error when expired. The value
 * of this property is false by default.
 * When clients report periodically, they should set RemoveWhenExpired false
 * (default).
 * This way, if the reporter has issues (e.g. deadlock) and can't report, the
 * entity is evaluated at error when the health report expires.
 * This flags the entity as being in Error health state.
 */
export interface HealthInformation {
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveInMilliSeconds?: moment.Duration;
  description?: string;
  sequenceNumber?: string;
  removeWhenExpired?: boolean;
}

/**
 * @class
 * Initializes a new instance of the HealthEvent class.
 * @constructor
 * Represents health information reported on a health entity, such as cluster,
 * application or node, with additional metadata added by the Health Manager.
 *
 * @member {boolean} [isExpired] Returns true if the health event is expired,
 * otherwise false.
 * @member {date} [sourceUtcTimestamp] The date and time when the health report
 * was sent by the source.
 * @member {date} [lastModifiedUtcTimestamp] The date and time when the health
 * report was last modified by the health store.
 * @member {date} [lastOkTransitionAt] If the current health state is 'Ok',
 * this property returns the time at which the health report was first reported
 * with 'Ok'.
 * For periodic reporting, many reports with the same state may have been
 * generated.
 * This property returns the date and time when the first 'Ok' health report
 * was received.
 *
 * If the current health state is 'Error' or 'Warning', returns the date and
 * time at which the health state was last in 'Ok', before transitioning to a
 * different state.
 *
 * If the health state was never 'Ok', the value will be zero date-time.
 * @member {date} [lastWarningTransitionAt] If the current health state is
 * 'Warning', this property returns the time at which the health report was
 * first reported with 'Warning'. For periodic reporting, many reports with the
 * same state may have been generated however, this property returns only the
 * date and time at the first 'Warning' health report was received.
 *
 * If the current health state is 'Ok' or 'Error', returns the date and time at
 * which the health state was last in 'Warning', before transitioning to a
 * different state.
 *
 * If the health state was never 'Warning', the value will be zero date-time.
 * @member {date} [lastErrorTransitionAt] If the current health state is
 * 'Error', this property returns the time at which the health report was first
 * reported with 'Error'. For periodic reporting, many reports with the same
 * state may have been generated however, this property returns only the date
 * and time at the first 'Error' health report was received.
 *
 * If the current health state is 'Ok' or 'Warning', returns the date and time
 * at which the health state was last in 'Error', before transitioning to a
 * different state.
 *
 * If the health state was never 'Error', the value will be zero date-time.
 */
export interface HealthEvent extends HealthInformation {
  isExpired?: boolean;
  sourceUtcTimestamp?: Date;
  lastModifiedUtcTimestamp?: Date;
  lastOkTransitionAt?: Date;
  lastWarningTransitionAt?: Date;
  lastErrorTransitionAt?: Date;
}

/**
 * @class
 * Initializes a new instance of the HealthStateCount class.
 * @constructor
 * Represents information about how many health entities are in Ok, Warning and
 * Error health state.
 *
 * @member {number} [okCount] The number of health entities with aggregated
 * health state Ok.
 * @member {number} [warningCount] The number of health entities with
 * aggregated health state Warning.
 * @member {number} [errorCount] The number of health entities with aggregated
 * health state Error.
 */
export interface HealthStateCount {
  okCount?: number;
  warningCount?: number;
  errorCount?: number;
}

/**
 * @class
 * Initializes a new instance of the EntityKindHealthStateCount class.
 * @constructor
 * Represents health state count for entities of the specified entity kind.
 *
 * @member {string} [entityKind] The entity kind for which health states are
 * evaluated. Possible values include: 'Invalid', 'Node', 'Partition',
 * 'Service', 'Application', 'Replica', 'DeployedApplication',
 * 'DeployedServicePackage', 'Cluster'
 * @member {object} [healthStateCount] The health state count for the entities
 * of the specified kind.
 * @member {number} [healthStateCount.okCount] The number of health entities
 * with aggregated health state Ok.
 * @member {number} [healthStateCount.warningCount] The number of health
 * entities with aggregated health state Warning.
 * @member {number} [healthStateCount.errorCount] The number of health entities
 * with aggregated health state Error.
 */
export interface EntityKindHealthStateCount {
  entityKind?: string;
  healthStateCount?: HealthStateCount;
}

/**
 * @class
 * Initializes a new instance of the HealthStatistics class.
 * @constructor
 * The health statistics of an entity, returned as part of the health query
 * result when the query description is configured to include statistics.
 * The statistics include health state counts for all children types of the
 * current entity.
 * For example, for cluster, the health statistics include health state counts
 * for nodes, applications, services, partitions, replicas, deployed
 * applications and deployed service packages.
 * For partition, the health statistics include health counts for replicas.
 *
 * @member {array} [healthStateCountList] List of health state counts per
 * entity kind, which keeps track of how many children of the queried entity
 * are in Ok, Warning and Error state.
 */
export interface HealthStatistics {
  healthStateCountList?: EntityKindHealthStateCount[];
}

/**
 * @class
 * Initializes a new instance of the Epoch class.
 * @constructor
 * An Epoch is a configuration number for the partition as a whole. When the
 * configuration of the replica set changes, for example when the Primary
 * replica changes, the operations that are replicated from the new Primary
 * replica are said to be a new Epoch from the ones which were sent by the old
 * Primary replica.
 *
 * @member {string} [configurationVersion] The current configuration number of
 * this Epoch. The configuration number is an increasing value that is updated
 * whenever the configuration of this replica set changes.
 * @member {string} [dataLossVersion] The current data loss number of this
 * Epoch. The data loss number property is an increasing value which is updated
 * whenever data loss is suspected, as when loss of a quorum of replicas in the
 * replica set that includes the Primary replica.
 */
export interface Epoch {
  configurationVersion?: string;
  dataLossVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the EventHealthEvaluation class.
 * @constructor
 * Represents health evaluation of a HealthEvent that was reported on the
 * entity.
 * The health evaluation is returned when evaluating health of an entity
 * results in Error or Warning.
 *
 * @member {boolean} [considerWarningAsError] Indicates whether warnings are
 * treated with the same severity as errors. The field is specified in the
 * health policy used to evaluate the entity.
 * @member {object} [unhealthyEvent] Represents health information reported on
 * a health entity, such as cluster, application or node, with additional
 * metadata added by the Health Manager.
 * @member {boolean} [unhealthyEvent.isExpired] Returns true if the health
 * event is expired, otherwise false.
 * @member {date} [unhealthyEvent.sourceUtcTimestamp] The date and time when
 * the health report was sent by the source.
 * @member {date} [unhealthyEvent.lastModifiedUtcTimestamp] The date and time
 * when the health report was last modified by the health store.
 * @member {date} [unhealthyEvent.lastOkTransitionAt] If the current health
 * state is 'Ok', this property returns the time at which the health report was
 * first reported with 'Ok'.
 * For periodic reporting, many reports with the same state may have been
 * generated.
 * This property returns the date and time when the first 'Ok' health report
 * was received.
 *
 * If the current health state is 'Error' or 'Warning', returns the date and
 * time at which the health state was last in 'Ok', before transitioning to a
 * different state.
 *
 * If the health state was never 'Ok', the value will be zero date-time.
 * @member {date} [unhealthyEvent.lastWarningTransitionAt] If the current
 * health state is 'Warning', this property returns the time at which the
 * health report was first reported with 'Warning'. For periodic reporting,
 * many reports with the same state may have been generated however, this
 * property returns only the date and time at the first 'Warning' health report
 * was received.
 *
 * If the current health state is 'Ok' or 'Error', returns the date and time at
 * which the health state was last in 'Warning', before transitioning to a
 * different state.
 *
 * If the health state was never 'Warning', the value will be zero date-time.
 * @member {date} [unhealthyEvent.lastErrorTransitionAt] If the current health
 * state is 'Error', this property returns the time at which the health report
 * was first reported with 'Error'. For periodic reporting, many reports with
 * the same state may have been generated however, this property returns only
 * the date and time at the first 'Error' health report was received.
 *
 * If the current health state is 'Ok' or 'Warning', returns the date and time
 * at which the health state was last in 'Error', before transitioning to a
 * different state.
 *
 * If the health state was never 'Error', the value will be zero date-time.
 */
export interface EventHealthEvaluation extends HealthEvaluation {
  considerWarningAsError?: boolean;
  unhealthyEvent?: HealthEvent;
}

/**
 * @class
 * Initializes a new instance of the FabricCodeVersionInfo class.
 * @constructor
 * Information about a Service Fabric code version.
 *
 * @member {string} [codeVersion] The product version of Service Fabric.
 */
export interface FabricCodeVersionInfo {
  codeVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the FabricConfigVersionInfo class.
 * @constructor
 * Information about a Service Fabric config version.
 *
 * @member {string} [configVersion] The config version of Service Fabric.
 */
export interface FabricConfigVersionInfo {
  configVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the ClusterConfigurationUpgradeStatusInfo class.
 * @constructor
 * Information about a standalone cluster configuration upgrade status.
 *
 * @member {string} [upgradeState] The state of the upgrade domain. Possible
 * values include: 'Invalid', 'RollingBackInProgress', 'RollingBackCompleted',
 * 'RollingForwardPending', 'RollingForwardInProgress',
 * 'RollingForwardCompleted', 'Failed'
 * @member {number} [progressStatus] The cluster manifest version.
 * @member {string} [configVersion] The cluster configuration version.
 * @member {string} [details] The cluster upgrade status details.
 */
export interface ClusterConfigurationUpgradeStatusInfo {
  upgradeState?: string;
  progressStatus?: number;
  configVersion?: string;
  details?: string;
}

/**
 * @class
 * Initializes a new instance of the PartitionInformation class.
 * @constructor
 * Information about the partition identity, partitioning scheme and keys
 * supported by it.
 *
 * @member {uuid} [id] An internal ID used by Service Fabric to uniquely
 * identify a partition. This is a randomly generated GUID when the service was
 * created. The partition ID is unique and does not change for the lifetime of
 * the service. If the same service was deleted and recreated the IDs of its
 * partitions would be different.
 * @member {string} servicePartitionKind Polymorphic Discriminator
 */
export interface PartitionInformation {
  id?: string;
  servicePartitionKind: string;
}

/**
 * @class
 * Initializes a new instance of the Int64RangePartitionInformation class.
 * @constructor
 * Describes the partition information for the integer range that is based on
 * partition schemes.
 *
 * @member {string} [lowKey] Specifies the minimum key value handled by this
 * partition.
 * @member {string} [highKey] Specifies the maximum key value handled by this
 * partition.
 */
export interface Int64RangePartitionInformation extends PartitionInformation {
  lowKey?: string;
  highKey?: string;
}

/**
 * @class
 * Initializes a new instance of the NamedPartitionInformation class.
 * @constructor
 * Describes the partition information for the name as a string that is based
 * on partition schemes.
 *
 * @member {string} [name] Name of the partition.
 */
export interface NamedPartitionInformation extends PartitionInformation {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeDeactivationTaskId class.
 * @constructor
 * Identity of the task related to deactivation operation on the node.
 *
 * @member {string} [id] Value of the task id.
 * @member {string} [nodeDeactivationTaskType] The type of the task that
 * performed the node deactivation. Following are the possible values. Possible
 * values include: 'Invalid', 'Infrastructure', 'Repair', 'Client'
 */
export interface NodeDeactivationTaskId {
  id?: string;
  nodeDeactivationTaskType?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeDeactivationTask class.
 * @constructor
 * The task representing the deactivation operation on the node.
 *
 * @member {object} [nodeDeactivationTaskId] Identity of the task related to
 * deactivation operation on the node.
 * @member {string} [nodeDeactivationTaskId.id] Value of the task id.
 * @member {string} [nodeDeactivationTaskId.nodeDeactivationTaskType] The type
 * of the task that performed the node deactivation. Following are the possible
 * values. Possible values include: 'Invalid', 'Infrastructure', 'Repair',
 * 'Client'
 * @member {string} [nodeDeactivationIntent] The intent or the reason for
 * deactivating the node. Following are the possible values for it. Possible
 * values include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
 */
export interface NodeDeactivationTask {
  nodeDeactivationTaskId?: NodeDeactivationTaskId;
  nodeDeactivationIntent?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeDeactivationInfo class.
 * @constructor
 * Information about the node deactivation. This information is valid for a
 * node that is undergoing deactivation or has already been deactivated.
 *
 * @member {string} [nodeDeactivationIntent] The intent or the reason for
 * deactivating the node. Following are the possible values for it. Possible
 * values include: 'Invalid', 'Pause', 'Restart', 'RemoveData', 'RemoveNode'
 * @member {string} [nodeDeactivationStatus] The status of node deactivation
 * operation. Following are the possible values. Possible values include:
 * 'None', 'SafetyCheckInProgress', 'SafetyCheckComplete', 'Completed'
 * @member {array} [nodeDeactivationTask] List of tasks representing the
 * deactivation operation on the node.
 * @member {array} [pendingSafetyChecks] List of pending safety checks
 */
export interface NodeDeactivationInfo {
  nodeDeactivationIntent?: string;
  nodeDeactivationStatus?: string;
  nodeDeactivationTask?: NodeDeactivationTask[];
  pendingSafetyChecks?: SafetyCheckWrapper[];
}

/**
 * @class
 * Initializes a new instance of the NodeEvent class.
 * @constructor
 * Represents the base for all Node Events.
 *
 * @member {string} nodeName The name of a Service Fabric node.
 */
export interface NodeEvent extends FabricEvent {
  nodeName: string;
}

/**
 * @class
 * Initializes a new instance of the NodeHealth class.
 * @constructor
 * Information about the health of a Service Fabric node.
 *
 * @member {string} [name] Name of the node whose health information is
 * described by this object.
 */
export interface NodeHealth extends EntityHealth {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeHealthEvaluation class.
 * @constructor
 * Represents health evaluation for a node, containing information about the
 * data and the algorithm used by health store to evaluate health. The
 * evaluation is returned only when the aggregated health state is either Error
 * or Warning.
 *
 * @member {string} [nodeName] The name of a Service Fabric node.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the current aggregated health state of the node. The types of the
 * unhealthy evaluations can be EventHealthEvaluation.
 */
export interface NodeHealthEvaluation extends HealthEvaluation {
  nodeName?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the NodeInfo class.
 * @constructor
 * Information about a node in Service Fabric cluster.
 *
 * @member {string} [name] The name of a Service Fabric node.
 * @member {string} [ipAddressOrFQDN] The IP address or fully qualified domain
 * name of the node.
 * @member {string} [type] The type of the node.
 * @member {string} [codeVersion] The version of Service Fabric binaries that
 * the node is running.
 * @member {string} [configVersion] The version of Service Fabric cluster
 * manifest that the node is using.
 * @member {string} [nodeStatus] The status of the node. Possible values
 * include: 'Invalid', 'Up', 'Down', 'Enabling', 'Disabling', 'Disabled',
 * 'Unknown', 'Removed'
 * @member {string} [nodeUpTimeInSeconds] Time in seconds since the node has
 * been in NodeStatus Up. Value zero indicates that the node is not Up.
 * @member {string} [healthState] The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * @member {boolean} [isSeedNode] Indicates if the node is a seed node or not.
 * Returns true if the node is a seed node, otherwise false. A quorum of seed
 * nodes are required for proper operation of Service Fabric cluster.
 * @member {string} [upgradeDomain] The upgrade domain of the node.
 * @member {string} [faultDomain] The fault domain of the node.
 * @member {object} [id] An internal ID used by Service Fabric to uniquely
 * identify a node. Node Id is deterministically generated from node name.
 * @member {string} [id.id] Value of the node Id. This is a 128 bit integer.
 * @member {string} [instanceId] The ID representing the node instance. While
 * the ID of the node is deterministically generated from the node name and
 * remains same across restarts, the InstanceId changes every time node
 * restarts.
 * @member {object} [nodeDeactivationInfo] Information about the node
 * deactivation. This information is valid for a node that is undergoing
 * deactivation or has already been deactivated.
 * @member {string} [nodeDeactivationInfo.nodeDeactivationIntent] The intent or
 * the reason for deactivating the node. Following are the possible values for
 * it. Possible values include: 'Invalid', 'Pause', 'Restart', 'RemoveData',
 * 'RemoveNode'
 * @member {string} [nodeDeactivationInfo.nodeDeactivationStatus] The status of
 * node deactivation operation. Following are the possible values. Possible
 * values include: 'None', 'SafetyCheckInProgress', 'SafetyCheckComplete',
 * 'Completed'
 * @member {array} [nodeDeactivationInfo.nodeDeactivationTask] List of tasks
 * representing the deactivation operation on the node.
 * @member {array} [nodeDeactivationInfo.pendingSafetyChecks] List of pending
 * safety checks
 * @member {boolean} [isStopped] Indicates if the node is stopped by calling
 * stop node API or not. Returns true if the node is stopped, otherwise false.
 * @member {string} [nodeDownTimeInSeconds] Time in seconds since the node has
 * been in NodeStatus Down. Value zero indicates node is not NodeStatus Down.
 * @member {date} [nodeUpAt] Date time in UTC when the node came up. If the
 * node has never been up then this value will be zero date time.
 * @member {date} [nodeDownAt] Date time in UTC when the node went down. If
 * node has never been down then this value will be zero date time.
 */
export interface NodeInfo {
  name?: string;
  ipAddressOrFQDN?: string;
  type?: string;
  codeVersion?: string;
  configVersion?: string;
  nodeStatus?: string;
  nodeUpTimeInSeconds?: string;
  healthState?: string;
  isSeedNode?: boolean;
  upgradeDomain?: string;
  faultDomain?: string;
  id?: NodeId;
  instanceId?: string;
  nodeDeactivationInfo?: NodeDeactivationInfo;
  isStopped?: boolean;
  nodeDownTimeInSeconds?: string;
  nodeUpAt?: Date;
  nodeDownAt?: Date;
}

/**
 * @class
 * Initializes a new instance of the NodeLoadMetricInformation class.
 * @constructor
 * Represents data structure that contains load information for a certain
 * metric on a node.
 *
 * @member {string} [name] Name of the metric for which this load information
 * is provided.
 * @member {string} [nodeCapacity] Total capacity on the node for this metric.
 * @member {string} [nodeLoad] Current load on the node for this metric.
 * @member {string} [nodeRemainingCapacity] The remaining capacity on the node
 * for this metric.
 * @member {boolean} [isCapacityViolation] Indicates if there is a capacity
 * violation for this metric on the node.
 * @member {string} [nodeBufferedCapacity] The value that indicates the
 * reserved capacity for this metric on the node.
 * @member {string} [nodeRemainingBufferedCapacity] The remaining reserved
 * capacity for this metric on the node.
 */
export interface NodeLoadMetricInformation {
  name?: string;
  nodeCapacity?: string;
  nodeLoad?: string;
  nodeRemainingCapacity?: string;
  isCapacityViolation?: boolean;
  nodeBufferedCapacity?: string;
  nodeRemainingBufferedCapacity?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeLoadInfo class.
 * @constructor
 * Information about load on a Service Fabric node. It holds a summary of all
 * metrics and their load on a node.
 *
 * @member {string} [nodeName] Name of the node for which the load information
 * is provided by this object.
 * @member {array} [nodeLoadMetricInformation] List that contains metrics and
 * their load information on this node.
 */
export interface NodeLoadInfo {
  nodeName?: string;
  nodeLoadMetricInformation?: NodeLoadMetricInformation[];
}

/**
 * @class
 * Initializes a new instance of the NodesHealthEvaluation class.
 * @constructor
 * Represents health evaluation for nodes, containing health evaluations for
 * each unhealthy node that impacted current aggregated health state. Can be
 * returned when evaluating cluster health and the aggregated health state is
 * either Error or Warning.
 *
 * @member {number} [maxPercentUnhealthyNodes] Maximum allowed percentage of
 * unhealthy nodes from the ClusterHealthPolicy.
 * @member {number} [totalCount] Total number of nodes found in the health
 * store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * NodeHealthEvaluation that impacted the aggregated health.
 */
export interface NodesHealthEvaluation extends HealthEvaluation {
  maxPercentUnhealthyNodes?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the PagedApplicationInfoList class.
 * @constructor
 * The list of applications in the cluster. The list is paged when all of the
 * results cannot fit in a single message. The next set of results can be
 * obtained by executing the same query with the continuation token provided in
 * this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of application information.
 */
export interface PagedApplicationInfoList {
  continuationToken?: string;
  items?: ApplicationInfo[];
}

/**
 * @class
 * Initializes a new instance of the PagedDeployedApplicationInfoList class.
 * @constructor
 * The list of deployed applications in activating, downloading, or active
 * states on a node.
 * The list is paged when all of the results cannot fit in a single message.
 * The next set of results can be obtained by executing the same query with the
 * continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of deployed application information.
 */
export interface PagedDeployedApplicationInfoList {
  continuationToken?: string;
  items?: DeployedApplicationInfo[];
}

/**
 * @class
 * Initializes a new instance of the PagedNodeInfoList class.
 * @constructor
 * The list of nodes in the cluster. The list is paged when all of the results
 * cannot fit in a single message. The next set of results can be obtained by
 * executing the same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of node information.
 */
export interface PagedNodeInfoList {
  continuationToken?: string;
  items?: NodeInfo[];
}

/**
 * @class
 * Initializes a new instance of the ServicePartitionInfo class.
 * @constructor
 * Information about a partition of a Service Fabric service.
 *
 * @member {string} [healthState] The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * @member {string} [partitionStatus] The status of the service fabric service
 * partition. Possible values include: 'Invalid', 'Ready', 'NotReady',
 * 'InQuorumLoss', 'Reconfiguring', 'Deleting'
 * @member {object} [partitionInformation] Information about the partition
 * identity, partitioning scheme and keys supported by it.
 * @member {uuid} [partitionInformation.id] An internal ID used by Service
 * Fabric to uniquely identify a partition. This is a randomly generated GUID
 * when the service was created. The partition ID is unique and does not change
 * for the lifetime of the service. If the same service was deleted and
 * recreated the IDs of its partitions would be different.
 * @member {string} [partitionInformation.servicePartitionKind] Polymorphic
 * Discriminator
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface ServicePartitionInfo {
  healthState?: string;
  partitionStatus?: string;
  partitionInformation?: PartitionInformation;
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the PagedServicePartitionInfoList class.
 * @constructor
 * The list of partition in the cluster for a service. The list is paged when
 * all of the results cannot fit in a single message. The next set of results
 * can be obtained by executing the same query with the continuation token
 * provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of service partition information.
 */
export interface PagedServicePartitionInfoList {
  continuationToken?: string;
  items?: ServicePartitionInfo[];
}

/**
 * @class
 * Initializes a new instance of the ReplicaInfo class.
 * @constructor
 * Information about the identity, status, health, node name, uptime, and other
 * details about the replica.
 *
 * @member {string} [replicaStatus] The status of a replica of a service.
 * Possible values include: 'Invalid', 'InBuild', 'Standby', 'Ready', 'Down',
 * 'Dropped'
 * @member {string} [healthState] The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * @member {string} [nodeName] The name of a Service Fabric node.
 * @member {string} [address] The address the replica is listening on.
 * @member {string} [lastInBuildDurationInSeconds] The last in build duration
 * of the replica in seconds.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface ReplicaInfo {
  replicaStatus?: string;
  healthState?: string;
  nodeName?: string;
  address?: string;
  lastInBuildDurationInSeconds?: string;
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the PagedReplicaInfoList class.
 * @constructor
 * The list of replicas in the cluster for a given partition. The list is paged
 * when all of the results cannot fit in a single message. The next set of
 * results can be obtained by executing the same query with the continuation
 * token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of replica information.
 */
export interface PagedReplicaInfoList {
  continuationToken?: string;
  items?: ReplicaInfo[];
}

/**
 * @class
 * Initializes a new instance of the ServiceInfo class.
 * @constructor
 * Information about a Service Fabric service.
 *
 * @member {string} [id] The identity of the service. This ID is an encoded
 * representation of the service name. This is used in the REST APIs to
 * identify the service resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the service name is "fabric:/myapp/app1/svc1",
 * the service identity would be "myapp~app1\~svc1" in 6.0+ and
 * "myapp/app1/svc1" in previous versions.
 * @member {string} [name] The full name of the service with 'fabric:' URI
 * scheme.
 * @member {string} [typeName] Name of the service type as specified in the
 * service manifest.
 * @member {string} [manifestVersion] The version of the service manifest.
 * @member {string} [healthState] The health state of a Service Fabric entity
 * such as Cluster, Node, Application, Service, Partition, Replica etc.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * @member {string} [serviceStatus] The status of the application. Possible
 * values include: 'Unknown', 'Active', 'Upgrading', 'Deleting', 'Creating',
 * 'Failed'
 * @member {boolean} [isServiceGroup] Whether the service is in a service
 * group.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface ServiceInfo {
  id?: string;
  name?: string;
  typeName?: string;
  manifestVersion?: string;
  healthState?: string;
  serviceStatus?: string;
  isServiceGroup?: boolean;
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the PagedServiceInfoList class.
 * @constructor
 * The list of services in the cluster for an application. The list is paged
 * when all of the results cannot fit in a single message. The next set of
 * results can be obtained by executing the same query with the continuation
 * token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of service information.
 */
export interface PagedServiceInfoList {
  continuationToken?: string;
  items?: ServiceInfo[];
}

/**
 * @class
 * Initializes a new instance of the PartitionEvent class.
 * @constructor
 * Represents the base for all Partition Events.
 *
 * @member {uuid} partitionId An internal ID used by Service Fabric to uniquely
 * identify a partition. This is a randomly generated GUID when the service was
 * created. The partition ID is unique and does not change for the lifetime of
 * the service. If the same service was deleted and recreated the IDs of its
 * partitions would be different.
 */
export interface PartitionEvent extends FabricEvent {
  partitionId: string;
}

/**
 * @class
 * Initializes a new instance of the PartitionAnalysisEvent class.
 * @constructor
 * Represents the base for all Partition Analysis Events.
 *
 * @member {object} metadata Metadata about an Analysis Event.
 * @member {moment.duration} [metadata.delay] The analysis delay.
 * @member {moment.duration} [metadata.duration] The duration of analysis.
 */
export interface PartitionAnalysisEvent extends PartitionEvent {
  metadata: AnalysisEventMetadata;
}

/**
 * @class
 * Initializes a new instance of the ReplicaHealthState class.
 * @constructor
 * Represents a base class for stateful service replica or stateless service
 * instance health state.
 *
 * @member {uuid} [partitionId] The ID of the partition to which this replica
 * belongs.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface ReplicaHealthState extends EntityHealthState {
  partitionId?: string;
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the PartitionHealth class.
 * @constructor
 * Information about the health of a Service Fabric partition.
 *
 * @member {uuid} [partitionId] ID of the partition whose health information is
 * described by this object.
 * @member {array} [replicaHealthStates] The list of replica health states
 * associated with the partition.
 */
export interface PartitionHealth extends EntityHealth {
  partitionId?: string;
  replicaHealthStates?: ReplicaHealthState[];
}

/**
 * @class
 * Initializes a new instance of the PartitionHealthEvaluation class.
 * @constructor
 * Represents health evaluation for a partition, containing information about
 * the data and the algorithm used by health store to evaluate health. The
 * evaluation is returned only when the aggregated health state is either Error
 * or Warning.
 *
 * @member {uuid} [partitionId] Id of the partition whose health evaluation is
 * described by this object.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the current aggregated health state of the partition. The types of
 * the unhealthy evaluations can be ReplicasHealthEvaluation or
 * EventHealthEvaluation.
 */
export interface PartitionHealthEvaluation extends HealthEvaluation {
  partitionId?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the PartitionHealthState class.
 * @constructor
 * Represents the health state of a partition, which contains the partition
 * identifier and its aggregated health state.
 *
 * @member {uuid} [partitionId] Id of the partition whose health state is
 * described by this object.
 */
export interface PartitionHealthState extends EntityHealthState {
  partitionId?: string;
}

/**
 * @class
 * Initializes a new instance of the ProvisionFabricDescription class.
 * @constructor
 * Describes the parameters for provisioning a cluster.
 *
 * @member {string} [codeFilePath] The cluster code package file path.
 * @member {string} [clusterManifestFilePath] The cluster manifest file path.
 */
export interface ProvisionFabricDescription {
  codeFilePath?: string;
  clusterManifestFilePath?: string;
}

/**
 * @class
 * Initializes a new instance of the ProvisionApplicationTypeDescriptionBase class.
 * @constructor
 * Represents the type of registration or provision requested, and if the
 * operation needs to be asynchronous or not. Supported types of provision
 * operations are from either image store or external store.
 *
 * @member {boolean} async Indicates whether or not provisioning should occur
 * asynchronously. When set to true, the provision operation returns when the
 * request is accepted by the system, and the provision operation continues
 * without any timeout limit. The default value is false. For large application
 * packages, we recommend setting the value to true.
 * @member {string} kind Polymorphic Discriminator
 */
export interface ProvisionApplicationTypeDescriptionBase {
  async: boolean;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ProvisionApplicationTypeDescription class.
 * @constructor
 * Describes the operation to register or provision an application type using
 * an application package uploaded to the Service Fabric image store.
 *
 * @member {string} applicationTypeBuildPath The relative path for the
 * application package in the image store specified during the prior upload
 * operation.
 * @member {string} [applicationPackageCleanupPolicy] The kind of action that
 * needs to be taken for cleaning up the application package after successful
 * provision. Possible values include: 'Invalid', 'Default', 'Automatic',
 * 'Manual'
 */
export interface ProvisionApplicationTypeDescription extends ProvisionApplicationTypeDescriptionBase {
  applicationTypeBuildPath: string;
  applicationPackageCleanupPolicy?: string;
}

/**
 * @class
 * Initializes a new instance of the ExternalStoreProvisionApplicationTypeDescription class.
 * @constructor
 * Describes the operation to register or provision an application type using
 * an application package from an external store instead of a package uploaded
 * to the Service Fabric image store.
 *
 * @member {string} applicationPackageDownloadUri The path to the '.sfpkg'
 * application package from where the application package can be downloaded
 * using HTTP or HTTPS protocols. The application package can be stored in an
 * external store that provides GET operation to download the file. Supported
 * protocols are HTTP and HTTPS, and the path must allow READ access.
 * @member {string} applicationTypeName The application type name represents
 * the name of the application type found in the application manifest.
 * @member {string} applicationTypeVersion The application type version
 * represents the version of the application type found in the application
 * manifest.
 */
export interface ExternalStoreProvisionApplicationTypeDescription extends ProvisionApplicationTypeDescriptionBase {
  applicationPackageDownloadUri: string;
  applicationTypeName: string;
  applicationTypeVersion: string;
}

/**
 * @class
 * Initializes a new instance of the UnprovisionFabricDescription class.
 * @constructor
 * Describes the parameters for unprovisioning a cluster.
 *
 * @member {string} [codeVersion] The cluster code package version.
 * @member {string} [configVersion] The cluster manifest version.
 */
export interface UnprovisionFabricDescription {
  codeVersion?: string;
  configVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the ResumeClusterUpgradeDescription class.
 * @constructor
 * Describes the parameters for resuming a cluster upgrade.
 *
 * @member {string} upgradeDomain The next upgrade domain for this cluster
 * upgrade.
 */
export interface ResumeClusterUpgradeDescription {
  upgradeDomain: string;
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeHealthPolicyObject class.
 * @constructor
 * Defines a health policy used to evaluate the health of the cluster during a
 * cluster upgrade.
 *
 * @member {number} [maxPercentDeltaUnhealthyNodes] The maximum allowed
 * percentage of nodes health degradation allowed during cluster upgrades. The
 * delta is measured between the state of the nodes at the beginning of upgrade
 * and the state of the nodes at the time of the health evaluation. The check
 * is performed after every upgrade domain upgrade completion to make sure the
 * global state of the cluster is within tolerated limits. The default value is
 * 10%.
 * @member {number} [maxPercentUpgradeDomainDeltaUnhealthyNodes] The maximum
 * allowed percentage of upgrade domain nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the upgrade
 * domain nodes at the beginning of upgrade and the state of the upgrade domain
 * nodes at the time of the health evaluation. The check is performed after
 * every upgrade domain upgrade completion for all completed upgrade domains to
 * make sure the state of the upgrade domains is within tolerated limits. The
 * default value is 15%.
 */
export interface ClusterUpgradeHealthPolicyObject {
  maxPercentDeltaUnhealthyNodes?: number;
  maxPercentUpgradeDomainDeltaUnhealthyNodes?: number;
}

/**
 * @class
 * Initializes a new instance of the StartClusterUpgradeDescription class.
 * @constructor
 * Describes the parameters for starting a cluster upgrade.
 *
 * @member {string} [codeVersion] The cluster code version.
 * @member {string} [configVersion] The cluster configuration version.
 * @member {string} [upgradeKind] The kind of upgrade out of the following
 * possible values. Possible values include: 'Invalid', 'Rolling'. Default
 * value: 'Rolling' .
 * @member {string} [rollingUpgradeMode] The mode used to monitor health during
 * a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds] The maximum amount
 * of time to block processing of an upgrade domain and prevent loss of
 * availability when there are unexpected issues. When this timeout expires,
 * processing of the upgrade domain will proceed regardless of availability
 * loss issues. The timeout is reset at the start of each upgrade domain. Valid
 * values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {boolean} [forceRestart] If true, then processes are forcefully
 * restarted during upgrade even when the code version has not changed (the
 * upgrade only changes configuration or data).
 * @member {object} [monitoringPolicy] Describes the parameters for monitoring
 * an upgrade in Monitored mode.
 * @member {string} [monitoringPolicy.failureAction] The compensating action to
 * perform when a Monitored upgrade encounters monitoring policy or health
 * policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds] The amount
 * of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [clusterHealthPolicy] Defines a health policy used to
 * evaluate the health of the cluster or of a cluster node.
 * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {boolean} [enableDeltaHealthEvaluation] When true, enables delta
 * health evaluation rather than absolute health evaluation after completion of
 * each upgrade domain.
 * @member {object} [clusterUpgradeHealthPolicy] Defines a health policy used
 * to evaluate the health of the cluster during a cluster upgrade.
 * @member {number} [clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes]
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits. The default value is 10%.
 * @member {number}
 * [clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes] The
 * maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits. The default value is 15%.
 * @member {object} [applicationHealthPolicyMap] Defines the application health
 * policy map used to evaluate the health of an application or one of its
 * children entities.
 * @member {array} [applicationHealthPolicyMap.applicationHealthPolicyMap] The
 * wrapper that contains the map with application health policies used to
 * evaluate specific applications in the cluster.
 */
export interface StartClusterUpgradeDescription {
  codeVersion?: string;
  configVersion?: string;
  upgradeKind?: string;
  rollingUpgradeMode?: string;
  upgradeReplicaSetCheckTimeoutInSeconds?: number;
  forceRestart?: boolean;
  monitoringPolicy?: MonitoringPolicyDescription;
  clusterHealthPolicy?: ClusterHealthPolicy;
  enableDeltaHealthEvaluation?: boolean;
  clusterUpgradeHealthPolicy?: ClusterUpgradeHealthPolicyObject;
  applicationHealthPolicyMap?: ApplicationHealthPolicies;
}

/**
 * @class
 * Initializes a new instance of the RollingUpgradeUpdateDescription class.
 * @constructor
 * Describes the parameters for updating a rolling upgrade of application or
 * cluster.
 *
 * @member {string} rollingUpgradeMode The mode used to monitor health during a
 * rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {boolean} [forceRestart] If true, then processes are forcefully
 * restarted during upgrade even when the code version has not changed (the
 * upgrade only changes configuration or data).
 * @member {number} [replicaSetCheckTimeoutInMilliseconds] The maximum amount
 * of time to block processing of an upgrade domain and prevent loss of
 * availability when there are unexpected issues. When this timeout expires,
 * processing of the upgrade domain will proceed regardless of availability
 * loss issues. The timeout is reset at the start of each upgrade domain. Valid
 * values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {string} [failureAction] The compensating action to perform when a
 * Monitored upgrade encounters monitoring policy or health policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [healthCheckWaitDurationInMilliseconds] The amount of time
 * to wait after completing an upgrade domain before applying health policies.
 * It is first interpreted as a string representing an ISO 8601 duration. If
 * that fails, then it is interpreted as a number representing the total number
 * of milliseconds.
 * @member {string} [healthCheckStableDurationInMilliseconds] The amount of
 * time that the application or cluster must remain healthy before the upgrade
 * proceeds to the next upgrade domain. It is first interpreted as a string
 * representing an ISO 8601 duration. If that fails, then it is interpreted as
 * a number representing the total number of milliseconds.
 * @member {string} [healthCheckRetryTimeoutInMilliseconds] The amount of time
 * to retry health evaluation when the application or cluster is unhealthy
 * before FailureAction is executed. It is first interpreted as a string
 * representing an ISO 8601 duration. If that fails, then it is interpreted as
 * a number representing the total number of milliseconds.
 * @member {string} [upgradeTimeoutInMilliseconds] The amount of time the
 * overall upgrade has to complete before FailureAction is executed. It is
 * first interpreted as a string representing an ISO 8601 duration. If that
 * fails, then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [upgradeDomainTimeoutInMilliseconds] The amount of time
 * each upgrade domain has to complete before FailureAction is executed. It is
 * first interpreted as a string representing an ISO 8601 duration. If that
 * fails, then it is interpreted as a number representing the total number of
 * milliseconds.
 */
export interface RollingUpgradeUpdateDescription {
  rollingUpgradeMode: string;
  forceRestart?: boolean;
  replicaSetCheckTimeoutInMilliseconds?: number;
  failureAction?: string;
  healthCheckWaitDurationInMilliseconds?: string;
  healthCheckStableDurationInMilliseconds?: string;
  healthCheckRetryTimeoutInMilliseconds?: string;
  upgradeTimeoutInMilliseconds?: string;
  upgradeDomainTimeoutInMilliseconds?: string;
}

/**
 * @class
 * Initializes a new instance of the UpdateClusterUpgradeDescription class.
 * @constructor
 * Parameters for updating a cluster upgrade.
 *
 * @member {string} [upgradeKind] The type of upgrade out of the following
 * possible values. Possible values include: 'Invalid', 'Rolling',
 * 'Rolling_ForceRestart'. Default value: 'Rolling' .
 * @member {object} [updateDescription] Describes the parameters for updating a
 * rolling upgrade of application or cluster.
 * @member {string} [updateDescription.rollingUpgradeMode] The mode used to
 * monitor health during a rolling upgrade. The values are UnmonitoredAuto,
 * UnmonitoredManual, and Monitored. Possible values include: 'Invalid',
 * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
 * @member {boolean} [updateDescription.forceRestart] If true, then processes
 * are forcefully restarted during upgrade even when the code version has not
 * changed (the upgrade only changes configuration or data).
 * @member {number} [updateDescription.replicaSetCheckTimeoutInMilliseconds]
 * The maximum amount of time to block processing of an upgrade domain and
 * prevent loss of availability when there are unexpected issues. When this
 * timeout expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 * @member {string} [updateDescription.failureAction] The compensating action
 * to perform when a Monitored upgrade encounters monitoring policy or health
 * policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [updateDescription.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [updateDescription.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [updateDescription.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [updateDescription.upgradeTimeoutInMilliseconds] The amount
 * of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string} [updateDescription.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [clusterHealthPolicy] Defines a health policy used to
 * evaluate the health of the cluster or of a cluster node.
 * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {boolean} [enableDeltaHealthEvaluation] When true, enables delta
 * health evaluation rather than absolute health evaluation after completion of
 * each upgrade domain.
 * @member {object} [clusterUpgradeHealthPolicy] Defines a health policy used
 * to evaluate the health of the cluster during a cluster upgrade.
 * @member {number} [clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes]
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits. The default value is 10%.
 * @member {number}
 * [clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes] The
 * maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits. The default value is 15%.
 * @member {object} [applicationHealthPolicyMap] Defines the application health
 * policy map used to evaluate the health of an application or one of its
 * children entities.
 * @member {array} [applicationHealthPolicyMap.applicationHealthPolicyMap] The
 * wrapper that contains the map with application health policies used to
 * evaluate specific applications in the cluster.
 */
export interface UpdateClusterUpgradeDescription {
  upgradeKind?: string;
  updateDescription?: RollingUpgradeUpdateDescription;
  clusterHealthPolicy?: ClusterHealthPolicy;
  enableDeltaHealthEvaluation?: boolean;
  clusterUpgradeHealthPolicy?: ClusterUpgradeHealthPolicyObject;
  applicationHealthPolicyMap?: ApplicationHealthPolicies;
}

/**
 * @class
 * Initializes a new instance of the PartitionSafetyCheck class.
 * @constructor
 * Represents a safety check for the service partition being performed by
 * service fabric before continuing with operations.
 *
 * @member {uuid} [partitionId] Id of the partition which is undergoing the
 * safety check.
 */
export interface PartitionSafetyCheck extends SafetyCheck {
  partitionId?: string;
}

/**
 * @class
 * Initializes a new instance of the EnsureAvailabilitySafetyCheck class.
 * @constructor
 * Safety check that waits to ensure the availability of the partition. It
 * waits until there are replicas available such that bringing down this
 * replica will not cause availability loss for the partition.
 *
 */
export interface EnsureAvailabilitySafetyCheck extends PartitionSafetyCheck {
}

/**
 * @class
 * Initializes a new instance of the EnsurePartitionQurumSafetyCheck class.
 * @constructor
 * Safety check that ensures that a quorum of replicas are not lost for a
 * partition.
 *
 */
export interface EnsurePartitionQurumSafetyCheck extends PartitionSafetyCheck {
}

/**
 * @class
 * Initializes a new instance of the SeedNodeSafetyCheck class.
 * @constructor
 * Represents a safety check for the seed nodes being performed by service
 * fabric before continuing with node level operations.
 *
 */
export interface SeedNodeSafetyCheck extends SafetyCheck {
}

/**
 * @class
 * Initializes a new instance of the PartitionsHealthEvaluation class.
 * @constructor
 * Represents health evaluation for the partitions of a service, containing
 * health evaluations for each unhealthy partition that impacts current
 * aggregated health state. Can be returned when evaluating service health and
 * the aggregated health state is either Error or Warning.
 *
 * @member {number} [maxPercentUnhealthyPartitionsPerService] Maximum allowed
 * percentage of unhealthy partitions per service from the
 * ServiceTypeHealthPolicy.
 * @member {number} [totalCount] Total number of partitions of the service from
 * the health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * PartitionHealthEvaluation that impacted the aggregated health.
 */
export interface PartitionsHealthEvaluation extends HealthEvaluation {
  maxPercentUnhealthyPartitionsPerService?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ReplicaEvent class.
 * @constructor
 * Represents the base for all Replica Events.
 *
 * @member {uuid} partitionId An internal ID used by Service Fabric to uniquely
 * identify a partition. This is a randomly generated GUID when the service was
 * created. The partition ID is unique and does not change for the lifetime of
 * the service. If the same service was deleted and recreated the IDs of its
 * partitions would be different.
 * @member {number} replicaId Id of a stateful service replica. ReplicaId is
 * used by Service Fabric to uniquely identify a replica of a partition. It is
 * unique within a partition and does not change for the lifetime of the
 * replica. If a replica gets dropped and another replica gets created on the
 * same node for the same partition, it will get a different value for the id.
 * Sometimes the id of a stateless service instance is also referred as a
 * replica id.
 */
export interface ReplicaEvent extends FabricEvent {
  partitionId: string;
  replicaId: number;
}

/**
 * @class
 * Initializes a new instance of the ReplicaHealth class.
 * @constructor
 * Represents a base class for stateful service replica or stateless service
 * instance health.
 * Contains the replica aggregated health state, the health events and the
 * unhealthy evaluations.
 *
 * @member {uuid} [partitionId] Id of the partition to which this replica
 * belongs.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface ReplicaHealth extends EntityHealth {
  partitionId?: string;
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the ReplicaHealthEvaluation class.
 * @constructor
 * Represents health evaluation for a replica, containing information about the
 * data and the algorithm used by health store to evaluate health. The
 * evaluation is returned only when the aggregated health state is either Error
 * or Warning.
 *
 * @member {uuid} [partitionId] Id of the partition to which the replica
 * belongs.
 * @member {string} [replicaOrInstanceId] Id of a stateful service replica or a
 * stateless service instance. This ID is used in the queries that apply to
 * both stateful and stateless services. It is used by Service Fabric to
 * uniquely identify a replica of a partition of a stateful service or an
 * instance of a stateless service partition. It is unique within a partition
 * and does not change for the lifetime of the replica or the instance. If a
 * stateful replica gets dropped and another replica gets created on the same
 * node for the same partition, it will get a different value for the ID. If a
 * stateless instance is failed over on the same or different node it will get
 * a different value for the ID.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the current aggregated health state of the replica. The types of the
 * unhealthy evaluations can be EventHealthEvaluation.
 */
export interface ReplicaHealthEvaluation extends HealthEvaluation {
  partitionId?: string;
  replicaOrInstanceId?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ReplicasHealthEvaluation class.
 * @constructor
 * Represents health evaluation for replicas, containing health evaluations for
 * each unhealthy replica that impacted current aggregated health state. Can be
 * returned when evaluating partition health and the aggregated health state is
 * either Error or Warning.
 *
 * @member {number} [maxPercentUnhealthyReplicasPerPartition] Maximum allowed
 * percentage of unhealthy replicas per partition from the
 * ApplicationHealthPolicy.
 * @member {number} [totalCount] Total number of replicas in the partition from
 * the health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * ReplicaHealthEvaluation that impacted the aggregated health.
 */
export interface ReplicasHealthEvaluation extends HealthEvaluation {
  maxPercentUnhealthyReplicasPerPartition?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the RestartNodeDescription class.
 * @constructor
 * Describes the parameters to restart a Service Fabric node.
 *
 * @member {string} nodeInstanceId The instance ID of the target node. If
 * instance ID is specified the node is restarted only if it matches with the
 * current instance of the node. A default value of "0" would match any
 * instance ID. The instance ID can be obtained using get node query. Default
 * value: '0' .
 * @member {string} [createFabricDump] Specify True to create a dump of the
 * fabric node process. This is case-sensitive. Possible values include:
 * 'False', 'True'. Default value: 'False' .
 */
export interface RestartNodeDescription {
  nodeInstanceId: string;
  createFabricDump?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceEvent class.
 * @constructor
 * Represents the base for all Service Events.
 *
 * @member {string} serviceId The identity of the service. This ID is an
 * encoded representation of the service name. This is used in the REST APIs to
 * identify the service resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the service name is "fabric:/myapp/app1/svc1",
 * the service identity would be "myapp~app1\~svc1" in 6.0+ and
 * "myapp/app1/svc1" in previous versions.
 */
export interface ServiceEvent extends FabricEvent {
  serviceId: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceFromTemplateDescription class.
 * @constructor
 * Defines description for creating a Service Fabric service from a template
 * defined in the application manifest.
 *
 * @member {string} applicationName The name of the application, including the
 * 'fabric:' URI scheme.
 * @member {string} serviceName The full name of the service with 'fabric:' URI
 * scheme.
 * @member {string} serviceTypeName Name of the service type as specified in
 * the service manifest.
 * @member {array} [initializationData] The initialization data for the newly
 * created service instance.
 * @member {string} [servicePackageActivationMode] The activation mode of
 * service package to be used for a service. Possible values include:
 * 'SharedProcess', 'ExclusiveProcess'
 * @member {string} [serviceDnsName] The DNS name of the service. It requires
 * the DNS system service to be enabled in Service Fabric cluster.
 */
export interface ServiceFromTemplateDescription {
  applicationName: string;
  serviceName: string;
  serviceTypeName: string;
  initializationData?: number[];
  servicePackageActivationMode?: string;
  serviceDnsName?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceHealthEvaluation class.
 * @constructor
 * Represents health evaluation for a service, containing information about the
 * data and the algorithm used by health store to evaluate health. The
 * evaluation is returned only when the aggregated health state is either Error
 * or Warning.
 *
 * @member {string} [serviceName] Name of the service whose health evaluation
 * is described by this object.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the current aggregated health state of the service. The types of the
 * unhealthy evaluations can be PartitionsHealthEvaluation or
 * EventHealthEvaluation.
 */
export interface ServiceHealthEvaluation extends HealthEvaluation {
  serviceName?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ServiceHealth class.
 * @constructor
 * Information about the health of a Service Fabric service.
 *
 * @member {string} [name] The name of the service whose health information is
 * described by this object.
 * @member {array} [partitionHealthStates] The list of partition health states
 * associated with the service.
 */
export interface ServiceHealth extends EntityHealth {
  name?: string;
  partitionHealthStates?: PartitionHealthState[];
}

/**
 * @class
 * Initializes a new instance of the ServiceNameInfo class.
 * @constructor
 * Information about the service name.
 *
 * @member {string} [id] The identity of the service. This ID is an encoded
 * representation of the service name. This is used in the REST APIs to
 * identify the service resource.
 * Starting in version 6.0, hierarchical names are delimited with the "\~"
 * character. For example, if the service name is "fabric:/myapp/app1/svc1",
 * the service identity would be "myapp~app1\~svc1" in 6.0+ and
 * "myapp/app1/svc1" in previous versions.
 * @member {string} [name] The full name of the service with 'fabric:' URI
 * scheme.
 */
export interface ServiceNameInfo {
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ServicePlacementPolicyDescription class.
 * @constructor
 * Describes the policy to be used for placement of a Service Fabric service.
 *
 * @member {string} type Polymorphic Discriminator
 */
export interface ServicePlacementPolicyDescription {
  type: string;
}

/**
 * @class
 * Initializes a new instance of the ServicePlacementInvalidDomainPolicyDescription class.
 * @constructor
 * Describes the policy to be used for placement of a Service Fabric service
 * where a particular fault or upgrade domain should not be used for placement
 * of the instances or replicas of that service.
 *
 * @member {string} [domainName] The name of the domain that should not be used
 * for placement.
 */
export interface ServicePlacementInvalidDomainPolicyDescription extends ServicePlacementPolicyDescription {
  domainName?: string;
}

/**
 * @class
 * Initializes a new instance of the ServicePlacementNonPartiallyPlaceServicePolicyDescription class.
 * @constructor
 * Describes the policy to be used for placement of a Service Fabric service
 * where all replicas must be able to be placed in order for any replicas to be
 * created.
 *
 */
export interface ServicePlacementNonPartiallyPlaceServicePolicyDescription extends ServicePlacementPolicyDescription {
}

/**
 * @class
 * Initializes a new instance of the ServicePlacementPreferPrimaryDomainPolicyDescription class.
 * @constructor
 * Describes the policy to be used for placement of a Service Fabric service
 * where the service's Primary replicas should optimally be placed in a
 * particular domain.
 *
 * This placement policy is usually used with fault domains in scenarios where
 * the Service Fabric cluster is geographically distributed in order to
 * indicate that a service's primary replica should be located in a particular
 * fault domain, which in geo-distributed scenarios usually aligns with
 * regional or datacenter boundaries. Note that since this is an optimization
 * it is possible that the Primary replica may not end up located in this
 * domain due to failures, capacity limits, or other constraints.
 *
 * @member {string} [domainName] The name of the domain that should used for
 * placement as per this policy.
 */
export interface ServicePlacementPreferPrimaryDomainPolicyDescription extends ServicePlacementPolicyDescription {
  domainName?: string;
}

/**
 * @class
 * Initializes a new instance of the ServicePlacementRequiredDomainPolicyDescription class.
 * @constructor
 * Describes the policy to be used for placement of a Service Fabric service
 * where the instances or replicas of that service must be placed in a
 * particular domain
 *
 * @member {string} [domainName] The name of the domain that should used for
 * placement as per this policy.
 */
export interface ServicePlacementRequiredDomainPolicyDescription extends ServicePlacementPolicyDescription {
  domainName?: string;
}

/**
 * @class
 * Initializes a new instance of the ServicePlacementRequireDomainDistributionPolicyDescription class.
 * @constructor
 * Describes the policy to be used for placement of a Service Fabric service
 * where two replicas from the same partition should never be placed in the
 * same fault or upgrade domain.
 *
 * While this is not common it can expose the service to an increased risk of
 * concurrent failures due to unplanned outages or other cases of
 * subsequent/concurrent failures. As an example, consider a case where
 * replicas are deployed across different data center, with one replica per
 * location. In the event that one of the datacenters goes offline, normally
 * the replica that was placed in that datacenter will be packed into one of
 * the remaining datacenters. If this is not desirable then this policy should
 * be set.
 *
 * @member {string} [domainName] The name of the domain that should used for
 * placement as per this policy.
 */
export interface ServicePlacementRequireDomainDistributionPolicyDescription extends ServicePlacementPolicyDescription {
  domainName?: string;
}

/**
 * @class
 * Initializes a new instance of the ServicesHealthEvaluation class.
 * @constructor
 * Represents health evaluation for services of a certain service type
 * belonging to an application, containing health evaluations for each
 * unhealthy service that impacted current aggregated health state. Can be
 * returned when evaluating application health and the aggregated health state
 * is either Error or Warning.
 *
 * @member {string} [serviceTypeName] Name of the service type of the services.
 * @member {number} [maxPercentUnhealthyServices] Maximum allowed percentage of
 * unhealthy services from the ServiceTypeHealthPolicy.
 * @member {number} [totalCount] Total number of services of the current
 * service type in the application from the health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * ServiceHealthEvaluation that impacted the aggregated health.
 */
export interface ServicesHealthEvaluation extends HealthEvaluation {
  serviceTypeName?: string;
  maxPercentUnhealthyServices?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ServiceLoadMetricDescription class.
 * @constructor
 * Specifies a metric to load balance a service during runtime.
 *
 * @member {string} name The name of the metric. If the service chooses to
 * report load during runtime, the load metric name should match the name that
 * is specified in Name exactly. Note that metric names are case-sensitive.
 * @member {string} [weight] The service load metric relative weight, compared
 * to other metrics configured for this service, as a number. Possible values
 * include: 'Zero', 'Low', 'Medium', 'High'
 * @member {number} [primaryDefaultLoad] Used only for Stateful services. The
 * default amount of load, as a number, that this service creates for this
 * metric when it is a Primary replica.
 * @member {number} [secondaryDefaultLoad] Used only for Stateful services. The
 * default amount of load, as a number, that this service creates for this
 * metric when it is a Secondary replica.
 * @member {number} [defaultLoad] Used only for Stateless services. The default
 * amount of load, as a number, that this service creates for this metric.
 */
export interface ServiceLoadMetricDescription {
  name: string;
  weight?: string;
  primaryDefaultLoad?: number;
  secondaryDefaultLoad?: number;
  defaultLoad?: number;
}

/**
 * @class
 * Initializes a new instance of the ServiceTypeExtensionDescription class.
 * @constructor
 * Describes extension of a service type defined in the service manifest.
 *
 * @member {string} [key] The name of the extension.
 * @member {string} [value] The extension value.
 */
export interface ServiceTypeExtensionDescription {
  key?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceTypeDescription class.
 * @constructor
 * Describes a service type defined in the service manifest of a provisioned
 * application type. The properties the ones defined in the service manifest.
 *
 * @member {boolean} [isStateful] Indicates whether the service type is a
 * stateful service type or a stateless service type. This property is true if
 * the service type is a stateful service type, false otherwise.
 * @member {string} [serviceTypeName] Name of the service type as specified in
 * the service manifest.
 * @member {string} [placementConstraints] The placement constraint to be used
 * when instantiating this service in a Service Fabric cluster.
 * @member {array} [loadMetrics] The service load metrics is given as an array
 * of ServiceLoadMetricDescription objects.
 * @member {array} [servicePlacementPolicies] List of service placement policy
 * descriptions.
 * @member {array} [extensions] List of service type extensions.
 * @member {string} kind Polymorphic Discriminator
 */
export interface ServiceTypeDescription {
  isStateful?: boolean;
  serviceTypeName?: string;
  placementConstraints?: string;
  loadMetrics?: ServiceLoadMetricDescription[];
  servicePlacementPolicies?: ServicePlacementPolicyDescription[];
  extensions?: ServiceTypeExtensionDescription[];
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceTypeInfo class.
 * @constructor
 * Information about a service type that is defined in a service manifest of a
 * provisioned application type.
 *
 * @member {object} [serviceTypeDescription] Describes a service type defined
 * in the service manifest of a provisioned application type. The properties
 * the ones defined in the service manifest.
 * @member {boolean} [serviceTypeDescription.isStateful] Indicates whether the
 * service type is a stateful service type or a stateless service type. This
 * property is true if the service type is a stateful service type, false
 * otherwise.
 * @member {string} [serviceTypeDescription.serviceTypeName] Name of the
 * service type as specified in the service manifest.
 * @member {string} [serviceTypeDescription.placementConstraints] The placement
 * constraint to be used when instantiating this service in a Service Fabric
 * cluster.
 * @member {array} [serviceTypeDescription.loadMetrics] The service load
 * metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {array} [serviceTypeDescription.servicePlacementPolicies] List of
 * service placement policy descriptions.
 * @member {array} [serviceTypeDescription.extensions] List of service type
 * extensions.
 * @member {string} [serviceTypeDescription.kind] Polymorphic Discriminator
 * @member {string} [serviceManifestName] The name of the service manifest in
 * which this service type is defined.
 * @member {string} [serviceManifestVersion] The version of the service
 * manifest in which this service type is defined.
 * @member {boolean} [isServiceGroup] Indicates whether the service is a
 * service group. If it is, the property value is true otherwise false.
 */
export interface ServiceTypeInfo {
  serviceTypeDescription?: ServiceTypeDescription;
  serviceManifestName?: string;
  serviceManifestVersion?: string;
  isServiceGroup?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ServiceTypeManifest class.
 * @constructor
 * Contains the manifest describing a service type registered as part of an
 * application in a Service Fabric cluster.
 *
 * @member {string} [manifest] The XML manifest as a string.
 */
export interface ServiceTypeManifest {
  manifest?: string;
}

/**
 * @class
 * Initializes a new instance of the SingletonPartitionInformation class.
 * @constructor
 * Information about a partition that is singleton. The services with singleton
 * partitioning scheme are effectively non-partitioned. They only have one
 * partition.
 *
 */
export interface SingletonPartitionInformation extends PartitionInformation {
}

/**
 * @class
 * Initializes a new instance of the StatefulServiceInfo class.
 * @constructor
 * Information about a stateful Service Fabric service.
 *
 * @member {boolean} [hasPersistedState] Whether the service has persisted
 * state.
 */
export interface StatefulServiceInfo extends ServiceInfo {
  hasPersistedState?: boolean;
}

/**
 * @class
 * Initializes a new instance of the StatefulServicePartitionInfo class.
 * @constructor
 * Information about a partition of a stateful Service Fabric service..
 *
 * @member {number} [targetReplicaSetSize] The target replica set size as a
 * number.
 * @member {number} [minReplicaSetSize] The minimum replica set size as a
 * number.
 * @member {moment.duration} [lastQuorumLossDuration] The duration for which
 * this partition was in quorum loss. If the partition is currently in quorum
 * loss, it returns the duration since it has been in that state. This field is
 * using ISO8601 format for specifying the duration.
 * @member {object} [primaryEpoch] An Epoch is a configuration number for the
 * partition as a whole. When the configuration of the replica set changes, for
 * example when the Primary replica changes, the operations that are replicated
 * from the new Primary replica are said to be a new Epoch from the ones which
 * were sent by the old Primary replica.
 * @member {string} [primaryEpoch.configurationVersion] The current
 * configuration number of this Epoch. The configuration number is an
 * increasing value that is updated whenever the configuration of this replica
 * set changes.
 * @member {string} [primaryEpoch.dataLossVersion] The current data loss number
 * of this Epoch. The data loss number property is an increasing value which is
 * updated whenever data loss is suspected, as when loss of a quorum of
 * replicas in the replica set that includes the Primary replica.
 */
export interface StatefulServicePartitionInfo extends ServicePartitionInfo {
  targetReplicaSetSize?: number;
  minReplicaSetSize?: number;
  lastQuorumLossDuration?: moment.Duration;
  primaryEpoch?: Epoch;
}

/**
 * @class
 * Initializes a new instance of the StatefulServiceReplicaHealth class.
 * @constructor
 * Represents the health of the stateful service replica.
 * Contains the replica aggregated health state, the health events and the
 * unhealthy evaluations.
 *
 * @member {string} [replicaId] Id of a stateful service replica. ReplicaId is
 * used by Service Fabric to uniquely identify a replica of a partition. It is
 * unique within a partition and does not change for the lifetime of the
 * replica. If a replica gets dropped and another replica gets created on the
 * same node for the same partition, it will get a different value for the id.
 * Sometimes the id of a stateless service instance is also referred as a
 * replica id.
 */
export interface StatefulServiceReplicaHealth extends ReplicaHealth {
  replicaId?: string;
}

/**
 * @class
 * Initializes a new instance of the StatefulServiceReplicaHealthState class.
 * @constructor
 * Represents the health state of the stateful service replica, which contains
 * the replica ID and the aggregated health state.
 *
 * @member {string} [replicaId] Id of a stateful service replica. ReplicaId is
 * used by Service Fabric to uniquely identify a replica of a partition. It is
 * unique within a partition and does not change for the lifetime of the
 * replica. If a replica gets dropped and another replica gets created on the
 * same node for the same partition, it will get a different value for the id.
 * Sometimes the id of a stateless service instance is also referred as a
 * replica id.
 */
export interface StatefulServiceReplicaHealthState extends ReplicaHealthState {
  replicaId?: string;
}

/**
 * @class
 * Initializes a new instance of the StatefulServiceTypeDescription class.
 * @constructor
 * Describes a stateful service type defined in the service manifest of a
 * provisioned application type.
 *
 * @member {boolean} [hasPersistedState] A flag indicating whether this is a
 * persistent service which stores states on the local disk. If it is then the
 * value of this property is true, if not it is false.
 */
export interface StatefulServiceTypeDescription extends ServiceTypeDescription {
  hasPersistedState?: boolean;
}

/**
 * @class
 * Initializes a new instance of the StatelessServiceInfo class.
 * @constructor
 * Information about a stateless Service Fabric service.
 *
 */
export interface StatelessServiceInfo extends ServiceInfo {
}

/**
 * @class
 * Initializes a new instance of the StatelessServiceInstanceHealth class.
 * @constructor
 * Represents the health of the stateless service instance.
 * Contains the instance aggregated health state, the health events and the
 * unhealthy evaluations.
 *
 * @member {string} [instanceId] Id of a stateless service instance. InstanceId
 * is used by Service Fabric to uniquely identify an instance of a partition of
 * a stateless service. It is unique within a partition and does not change for
 * the lifetime of the instance. If the instance has failed over on the same or
 * different node, it will get a different value for the InstanceId.
 */
export interface StatelessServiceInstanceHealth extends ReplicaHealth {
  instanceId?: string;
}

/**
 * @class
 * Initializes a new instance of the StatelessServiceInstanceHealthState class.
 * @constructor
 * Represents the health state of the stateless service instance, which
 * contains the instance ID and the aggregated health state.
 *
 * @member {string} [replicaId] Id of the stateless service instance on the
 * wire this field is called ReplicaId.
 */
export interface StatelessServiceInstanceHealthState extends ReplicaHealthState {
  replicaId?: string;
}

/**
 * @class
 * Initializes a new instance of the StatelessServicePartitionInfo class.
 * @constructor
 * Information about a partition of a stateless Service Fabric service.
 *
 * @member {number} [instanceCount] Number of instances of this partition.
 */
export interface StatelessServicePartitionInfo extends ServicePartitionInfo {
  instanceCount?: number;
}

/**
 * @class
 * Initializes a new instance of the StatelessServiceTypeDescription class.
 * @constructor
 * Describes a stateless service type defined in the service manifest of a
 * provisioned application type.
 *
 * @member {boolean} [useImplicitHost] A flag indicating if this type is not
 * implemented and hosted by a user service process, but is implicitly hosted
 * by a system created process. This value is true for services using the guest
 * executable services, false otherwise.
 */
export interface StatelessServiceTypeDescription extends ServiceTypeDescription {
  useImplicitHost?: boolean;
}

/**
 * @class
 * Initializes a new instance of the SystemApplicationHealthEvaluation class.
 * @constructor
 * Represents health evaluation for the fabric:/System application, containing
 * information about the data and the algorithm used by health store to
 * evaluate health. The evaluation is returned only when the aggregated health
 * state of the cluster is either Error or Warning.
 *
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the current aggregated health state of the system application. The
 * types of the unhealthy evaluations can be
 * DeployedApplicationsHealthEvaluation, ServicesHealthEvaluation or
 * EventHealthEvaluation.
 */
export interface SystemApplicationHealthEvaluation extends HealthEvaluation {
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the UpgradeDomainDeltaNodesCheckHealthEvaluation class.
 * @constructor
 * Represents health evaluation for delta unhealthy cluster nodes in an upgrade
 * domain, containing health evaluations for each unhealthy node that impacted
 * current aggregated health state.
 * Can be returned during cluster upgrade when cluster aggregated health state
 * is Warning or Error.
 *
 * @member {string} [upgradeDomainName] Name of the upgrade domain where nodes
 * health is currently evaluated.
 * @member {number} [baselineErrorCount] Number of upgrade domain nodes with
 * aggregated heath state Error in the health store at the beginning of the
 * cluster upgrade.
 * @member {number} [baselineTotalCount] Total number of upgrade domain nodes
 * in the health store at the beginning of the cluster upgrade.
 * @member {number} [maxPercentDeltaUnhealthyNodes] Maximum allowed percentage
 * of upgrade domain delta unhealthy nodes from the ClusterUpgradeHealthPolicy.
 * @member {number} [totalCount] Total number of upgrade domain nodes in the
 * health store.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * NodeHealthEvaluation that impacted the aggregated health.
 */
export interface UpgradeDomainDeltaNodesCheckHealthEvaluation extends HealthEvaluation {
  upgradeDomainName?: string;
  baselineErrorCount?: number;
  baselineTotalCount?: number;
  maxPercentDeltaUnhealthyNodes?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the UpgradeDomainNodesHealthEvaluation class.
 * @constructor
 * Represents health evaluation for cluster nodes in an upgrade domain,
 * containing health evaluations for each unhealthy node that impacted current
 * aggregated health state. Can be returned when evaluating cluster health
 * during cluster upgrade and the aggregated health state is either Error or
 * Warning.
 *
 * @member {string} [upgradeDomainName] Name of the upgrade domain where nodes
 * health is currently evaluated.
 * @member {number} [maxPercentUnhealthyNodes] Maximum allowed percentage of
 * unhealthy nodes from the ClusterHealthPolicy.
 * @member {number} [totalCount] Total number of nodes in the current upgrade
 * domain.
 * @member {array} [unhealthyEvaluations] List of unhealthy evaluations that
 * led to the aggregated health state. Includes all the unhealthy
 * NodeHealthEvaluation that impacted the aggregated health.
 */
export interface UpgradeDomainNodesHealthEvaluation extends HealthEvaluation {
  upgradeDomainName?: string;
  maxPercentUnhealthyNodes?: number;
  totalCount?: number;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
}

/**
 * @class
 * Initializes a new instance of the WaitForInbuildReplicaSafetyCheck class.
 * @constructor
 * Safety check that waits for the replica build operation to finish. This
 * indicates that there is a replica that is going through the copy or is
 * providing data for building another replica. Bring the node down will abort
 * this copy operation which are typically expensive involving data movements.
 *
 */
export interface WaitForInbuildReplicaSafetyCheck extends PartitionSafetyCheck {
}

/**
 * @class
 * Initializes a new instance of the WaitForPrimaryPlacementSafetyCheck class.
 * @constructor
 * Safety check that waits for the primary replica that was moved out of the
 * node due to upgrade to be placed back again on that node.
 *
 */
export interface WaitForPrimaryPlacementSafetyCheck extends PartitionSafetyCheck {
}

/**
 * @class
 * Initializes a new instance of the WaitForPrimarySwapSafetyCheck class.
 * @constructor
 * Safety check that waits for the primary replica to be moved out of the node
 * before starting an upgrade to ensure the availability of the primary replica
 * for the partition.
 *
 */
export interface WaitForPrimarySwapSafetyCheck extends PartitionSafetyCheck {
}

/**
 * @class
 * Initializes a new instance of the WaitForReconfigurationSafetyCheck class.
 * @constructor
 * Safety check that waits for the current reconfiguration of the partition to
 * be completed before starting an upgrade.
 *
 */
export interface WaitForReconfigurationSafetyCheck extends PartitionSafetyCheck {
}

/**
 * @class
 * Initializes a new instance of the LoadMetricReport class.
 * @constructor
 * Represents the load metric report which contains the time metric was
 * reported, its name and value.
 *
 * @member {date} [lastReportedUtc] Gets the UTC time when the load was
 * reported.
 * @member {string} [name] The name of the load metric.
 * @member {string} [value] The value of the load metric. In future releases of
 * Service Fabric this parameter will be deprecated in favor of CurrentValue.
 * @member {string} [currentValue] The value of the load metric.
 */
export interface LoadMetricReport {
  lastReportedUtc?: Date;
  name?: string;
  value?: string;
  currentValue?: string;
}

/**
 * @class
 * Initializes a new instance of the PartitionLoadInformation class.
 * @constructor
 * Represents load information for a partition, which contains the primary and
 * secondary reported load metrics.
 * In case there is no load reported, PartitionLoadInformation will contain the
 * default load for the service of the partition.
 * For default loads, LoadMetricReport's LastReportedUtc is set to 0.
 *
 * @member {uuid} [partitionId] Id of the partition.
 * @member {array} [primaryLoadMetricReports] Array of load reports from the
 * primary replica for this partition.
 * @member {array} [secondaryLoadMetricReports] Array of aggregated load
 * reports from all secondary replicas for this partition.
 * Array only contains the latest reported load for each metric.
 */
export interface PartitionLoadInformation {
  partitionId?: string;
  primaryLoadMetricReports?: LoadMetricReport[];
  secondaryLoadMetricReports?: LoadMetricReport[];
}

/**
 * @class
 * Initializes a new instance of the StatefulServiceReplicaInfo class.
 * @constructor
 * Represents a stateful service replica. This includes information about the
 * identity, role, status, health, node name, uptime, and other details about
 * the replica.
 *
 * @member {string} [replicaRole] The role of a replica of a stateful service.
 * Possible values include: 'Unknown', 'None', 'Primary', 'IdleSecondary',
 * 'ActiveSecondary'
 * @member {string} [replicaId] Id of a stateful service replica. ReplicaId is
 * used by Service Fabric to uniquely identify a replica of a partition. It is
 * unique within a partition and does not change for the lifetime of the
 * replica. If a replica gets dropped and another replica gets created on the
 * same node for the same partition, it will get a different value for the id.
 * Sometimes the id of a stateless service instance is also referred as a
 * replica id.
 */
export interface StatefulServiceReplicaInfo extends ReplicaInfo {
  replicaRole?: string;
  replicaId?: string;
}

/**
 * @class
 * Initializes a new instance of the StatelessServiceInstanceInfo class.
 * @constructor
 * Represents a stateless service instance. This includes information about the
 * identity, status, health, node name, uptime, and other details about the
 * instance.
 *
 * @member {string} [instanceId] Id of a stateless service instance. InstanceId
 * is used by Service Fabric to uniquely identify an instance of a partition of
 * a stateless service. It is unique within a partition and does not change for
 * the lifetime of the instance. If the instance has failed over on the same or
 * different node, it will get a different value for the InstanceId.
 */
export interface StatelessServiceInstanceInfo extends ReplicaInfo {
  instanceId?: string;
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeDescriptionObject class.
 * @constructor
 * Represents a ServiceFabric cluster upgrade
 *
 * @member {string} [configVersion] The cluster configuration version
 * (specified in the cluster manifest).
 * @member {string} [codeVersion] The ServiceFabric code version of the
 * cluster.
 * @member {string} [upgradeKind] The kind of upgrade out of the following
 * possible values. Possible values include: 'Invalid', 'Rolling'. Default
 * value: 'Rolling' .
 * @member {string} [rollingUpgradeMode] The mode used to monitor health during
 * a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds] The maximum amount
 * of time to block processing of an upgrade domain and prevent loss of
 * availability when there are unexpected issues. When this timeout expires,
 * processing of the upgrade domain will proceed regardless of availability
 * loss issues. The timeout is reset at the start of each upgrade domain. Valid
 * values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {boolean} [forceRestart] If true, then processes are forcefully
 * restarted during upgrade even when the code version has not changed (the
 * upgrade only changes configuration or data).
 * @member {boolean} [enableDeltaHealthEvaluation] When true, enables delta
 * health evaluation rather than absolute health evaluation after completion of
 * each upgrade domain.
 * @member {object} [monitoringPolicy] Describes the parameters for monitoring
 * an upgrade in Monitored mode.
 * @member {string} [monitoringPolicy.failureAction] The compensating action to
 * perform when a Monitored upgrade encounters monitoring policy or health
 * policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds] The amount
 * of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [clusterHealthPolicy] Defines a health policy used to
 * evaluate the health of the cluster or of a cluster node.
 * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {object} [clusterUpgradeHealthPolicy] Defines a health policy used
 * to evaluate the health of the cluster during a cluster upgrade.
 * @member {number} [clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes]
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits. The default value is 10%.
 * @member {number}
 * [clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes] The
 * maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits. The default value is 15%.
 * @member {array} [applicationHealthPolicyMap] Defines a map that contains
 * specific application health policies for different applications.
 * Each entry specifies as key the application name and as value an
 * ApplicationHealthPolicy used to evaluate the application health.
 * If an application is not specified in the map, the application health
 * evaluation uses the ApplicationHealthPolicy found in its application
 * manifest or the default application health policy (if no health policy is
 * defined in the manifest).
 * The map is empty by default.
 */
export interface ClusterUpgradeDescriptionObject {
  configVersion?: string;
  codeVersion?: string;
  upgradeKind?: string;
  rollingUpgradeMode?: string;
  upgradeReplicaSetCheckTimeoutInSeconds?: number;
  forceRestart?: boolean;
  enableDeltaHealthEvaluation?: boolean;
  monitoringPolicy?: MonitoringPolicyDescription;
  clusterHealthPolicy?: ClusterHealthPolicy;
  clusterUpgradeHealthPolicy?: ClusterUpgradeHealthPolicyObject;
  applicationHealthPolicyMap?: ApplicationHealthPolicyMapItem[];
}

/**
 * @class
 * Initializes a new instance of the FailedUpgradeDomainProgressObject class.
 * @constructor
 * The detailed upgrade progress for nodes in the current upgrade domain at the
 * point of failure.
 *
 * @member {string} [domainName] The name of the upgrade domain
 * @member {array} [nodeUpgradeProgressList] List of upgrading nodes and their
 * statuses
 */
export interface FailedUpgradeDomainProgressObject {
  domainName?: string;
  nodeUpgradeProgressList?: NodeUpgradeProgressInfo[];
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeProgressObject class.
 * @constructor
 * Information about a cluster upgrade.
 *
 * @member {string} [codeVersion] The ServiceFabric code version of the
 * cluster.
 * @member {string} [configVersion] The cluster configuration version
 * (specified in the cluster manifest).
 * @member {array} [upgradeDomains] List of upgrade domains and their statuses.
 * @member {string} [upgradeState] The state of the upgrade domain. Possible
 * values include: 'Invalid', 'RollingBackInProgress', 'RollingBackCompleted',
 * 'RollingForwardPending', 'RollingForwardInProgress',
 * 'RollingForwardCompleted', 'Failed'
 * @member {string} [nextUpgradeDomain] The name of the next upgrade domain to
 * be processed.
 * @member {string} [rollingUpgradeMode] The mode used to monitor health during
 * a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {object} [upgradeDescription] Represents a ServiceFabric cluster
 * upgrade
 * @member {string} [upgradeDescription.configVersion] The cluster
 * configuration version (specified in the cluster manifest).
 * @member {string} [upgradeDescription.codeVersion] The ServiceFabric code
 * version of the cluster.
 * @member {string} [upgradeDescription.upgradeKind] The kind of upgrade out of
 * the following possible values. Possible values include: 'Invalid', 'Rolling'
 * @member {string} [upgradeDescription.rollingUpgradeMode] The mode used to
 * monitor health during a rolling upgrade. The values are UnmonitoredAuto,
 * UnmonitoredManual, and Monitored. Possible values include: 'Invalid',
 * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
 * @member {number} [upgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds]
 * The maximum amount of time to block processing of an upgrade domain and
 * prevent loss of availability when there are unexpected issues. When this
 * timeout expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 * @member {boolean} [upgradeDescription.forceRestart] If true, then processes
 * are forcefully restarted during upgrade even when the code version has not
 * changed (the upgrade only changes configuration or data).
 * @member {boolean} [upgradeDescription.enableDeltaHealthEvaluation] When
 * true, enables delta health evaluation rather than absolute health evaluation
 * after completion of each upgrade domain.
 * @member {object} [upgradeDescription.monitoringPolicy] Describes the
 * parameters for monitoring an upgrade in Monitored mode.
 * @member {string} [upgradeDescription.monitoringPolicy.failureAction] The
 * compensating action to perform when a Monitored upgrade encounters
 * monitoring policy or health policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string}
 * [upgradeDescription.monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.upgradeTimeoutInMilliseconds] The
 * amount of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string}
 * [upgradeDescription.monitoringPolicy.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [upgradeDescription.clusterHealthPolicy] Defines a health
 * policy used to evaluate the health of the cluster or of a cluster node.
 * @member {boolean}
 * [upgradeDescription.clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number}
 * [upgradeDescription.clusterHealthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number}
 * [upgradeDescription.clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array}
 * [upgradeDescription.clusterHealthPolicy.applicationTypeHealthPolicyMap]
 * Defines a map with max percentage unhealthy applications for specific
 * application types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {object} [upgradeDescription.clusterUpgradeHealthPolicy] Defines a
 * health policy used to evaluate the health of the cluster during a cluster
 * upgrade.
 * @member {number}
 * [upgradeDescription.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes]
 * The maximum allowed percentage of nodes health degradation allowed during
 * cluster upgrades. The delta is measured between the state of the nodes at
 * the beginning of upgrade and the state of the nodes at the time of the
 * health evaluation. The check is performed after every upgrade domain upgrade
 * completion to make sure the global state of the cluster is within tolerated
 * limits. The default value is 10%.
 * @member {number}
 * [upgradeDescription.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
 * The maximum allowed percentage of upgrade domain nodes health degradation
 * allowed during cluster upgrades. The delta is measured between the state of
 * the upgrade domain nodes at the beginning of upgrade and the state of the
 * upgrade domain nodes at the time of the health evaluation. The check is
 * performed after every upgrade domain upgrade completion for all completed
 * upgrade domains to make sure the state of the upgrade domains is within
 * tolerated limits. The default value is 15%.
 * @member {array} [upgradeDescription.applicationHealthPolicyMap] Defines a
 * map that contains specific application health policies for different
 * applications.
 * Each entry specifies as key the application name and as value an
 * ApplicationHealthPolicy used to evaluate the application health.
 * If an application is not specified in the map, the application health
 * evaluation uses the ApplicationHealthPolicy found in its application
 * manifest or the default application health policy (if no health policy is
 * defined in the manifest).
 * The map is empty by default.
 * @member {string} [upgradeDurationInMilliseconds] The estimated elapsed time
 * spent processing the current overall upgrade.
 * @member {string} [upgradeDomainDurationInMilliseconds] The estimated elapsed
 * time spent processing the current upgrade domain.
 * @member {array} [unhealthyEvaluations] List of health evaluations that
 * resulted in the current aggregated health state.
 * @member {object} [currentUpgradeDomainProgress] Information about the
 * current in-progress upgrade domain.
 * @member {string} [currentUpgradeDomainProgress.domainName] The name of the
 * upgrade domain
 * @member {array} [currentUpgradeDomainProgress.nodeUpgradeProgressList] List
 * of upgrading nodes and their statuses
 * @member {string} [startTimestampUtc] The start time of the upgrade in UTC.
 * @member {string} [failureTimestampUtc] The failure time of the upgrade in
 * UTC.
 * @member {string} [failureReason] The cause of an upgrade failure that
 * resulted in FailureAction being executed. Possible values include: 'None',
 * 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout',
 * 'OverallUpgradeTimeout'
 * @member {object} [upgradeDomainProgressAtFailure] The detailed upgrade
 * progress for nodes in the current upgrade domain at the point of failure.
 * @member {string} [upgradeDomainProgressAtFailure.domainName] The name of the
 * upgrade domain
 * @member {array} [upgradeDomainProgressAtFailure.nodeUpgradeProgressList]
 * List of upgrading nodes and their statuses
 */
export interface ClusterUpgradeProgressObject {
  codeVersion?: string;
  configVersion?: string;
  upgradeDomains?: UpgradeDomainInfo[];
  upgradeState?: string;
  nextUpgradeDomain?: string;
  rollingUpgradeMode?: string;
  upgradeDescription?: ClusterUpgradeDescriptionObject;
  upgradeDurationInMilliseconds?: string;
  upgradeDomainDurationInMilliseconds?: string;
  unhealthyEvaluations?: HealthEvaluationWrapper[];
  currentUpgradeDomainProgress?: CurrentUpgradeDomainProgressInfo;
  startTimestampUtc?: string;
  failureTimestampUtc?: string;
  failureReason?: string;
  upgradeDomainProgressAtFailure?: FailedUpgradeDomainProgressObject;
}

/**
 * @class
 * Initializes a new instance of the ClusterConfigurationUpgradeDescription class.
 * @constructor
 * Describes the parameters for a standalone cluster configuration upgrade.
 *
 * @member {string} clusterConfig The cluster configuration as a JSON string.
 * For example, [this
 * file](https://github.com/Azure-Samples/service-fabric-dotnet-standalone-cluster-configuration/blob/master/Samples/ClusterConfig.Unsecure.DevCluster.json)
 * contains JSON describing the [nodes and other properties of the
 * cluster](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-manifest).
 * @member {moment.duration} [healthCheckRetryTimeout] The length of time
 * between attempts to perform health checks if the application or cluster is
 * not healthy. Default value: moment.duration('PT0H0M0S') .
 * @member {moment.duration} [healthCheckWaitDurationInSeconds] The length of
 * time to wait after completing an upgrade domain before starting the health
 * checks process. Default value: moment.duration('PT0H0M0S') .
 * @member {moment.duration} [healthCheckStableDurationInSeconds] The length of
 * time that the application or cluster must remain healthy before the upgrade
 * proceeds to the next upgrade domain. Default value:
 * moment.duration('PT0H0M0S') .
 * @member {moment.duration} [upgradeDomainTimeoutInSeconds] The timeout for
 * the upgrade domain. Default value: moment.duration('PT0H0M0S') .
 * @member {moment.duration} [upgradeTimeoutInSeconds] The upgrade timeout.
 * Default value: moment.duration('PT0H0M0S') .
 * @member {number} [maxPercentUnhealthyApplications] The maximum allowed
 * percentage of unhealthy applications during the upgrade. Allowed values are
 * integer values from zero to 100. Default value: 0 .
 * @member {number} [maxPercentUnhealthyNodes] The maximum allowed percentage
 * of unhealthy nodes during the upgrade. Allowed values are integer values
 * from zero to 100. Default value: 0 .
 * @member {number} [maxPercentDeltaUnhealthyNodes] The maximum allowed
 * percentage of delta health degradation during the upgrade. Allowed values
 * are integer values from zero to 100. Default value: 0 .
 * @member {number} [maxPercentUpgradeDomainDeltaUnhealthyNodes] The maximum
 * allowed percentage of upgrade domain delta health degradation during the
 * upgrade. Allowed values are integer values from zero to 100. Default value:
 * 0 .
 * @member {object} [applicationHealthPolicies] Defines the application health
 * policy map used to evaluate the health of an application or one of its
 * children entities.
 * @member {array} [applicationHealthPolicies.applicationHealthPolicyMap] The
 * wrapper that contains the map with application health policies used to
 * evaluate specific applications in the cluster.
 */
export interface ClusterConfigurationUpgradeDescription {
  clusterConfig: string;
  healthCheckRetryTimeout?: moment.Duration;
  healthCheckWaitDurationInSeconds?: moment.Duration;
  healthCheckStableDurationInSeconds?: moment.Duration;
  upgradeDomainTimeoutInSeconds?: moment.Duration;
  upgradeTimeoutInSeconds?: moment.Duration;
  maxPercentUnhealthyApplications?: number;
  maxPercentUnhealthyNodes?: number;
  maxPercentDeltaUnhealthyNodes?: number;
  maxPercentUpgradeDomainDeltaUnhealthyNodes?: number;
  applicationHealthPolicies?: ApplicationHealthPolicies;
}

/**
 * @class
 * Initializes a new instance of the UpgradeOrchestrationServiceState class.
 * @constructor
 * Service state of Service Fabric Upgrade Orchestration Service.
 *
 * @member {string} [serviceState] The state of Service Fabric Upgrade
 * Orchestration Service.
 */
export interface UpgradeOrchestrationServiceState {
  serviceState?: string;
}

/**
 * @class
 * Initializes a new instance of the UpgradeOrchestrationServiceStateSummary class.
 * @constructor
 * Service state summary of Service Fabric Upgrade Orchestration Service.
 *
 * @member {string} [currentCodeVersion] The current code version of the
 * cluster.
 * @member {string} [currentManifestVersion] The current manifest version of
 * the cluster.
 * @member {string} [targetCodeVersion] The target code version of  the
 * cluster.
 * @member {string} [targetManifestVersion] The target manifest version of the
 * cluster.
 * @member {string} [pendingUpgradeType] The type of the pending upgrade of the
 * cluster.
 */
export interface UpgradeOrchestrationServiceStateSummary {
  currentCodeVersion?: string;
  currentManifestVersion?: string;
  targetCodeVersion?: string;
  targetManifestVersion?: string;
  pendingUpgradeType?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationTypeImageStorePath class.
 * @constructor
 * Path description for the application package in the image store specified
 * during the prior copy operation.
 *
 * @member {string} applicationTypeBuildPath The relative image store path to
 * the application package.
 */
export interface ApplicationTypeImageStorePath {
  applicationTypeBuildPath: string;
}

/**
 * @class
 * Initializes a new instance of the UnprovisionApplicationTypeDescriptionInfo class.
 * @constructor
 * Describes the operation to unregister or unprovision an application type and
 * its version that was registered with the Service Fabric.
 *
 * @member {string} applicationTypeVersion The version of the application type
 * as defined in the application manifest.
 * @member {boolean} [async] The flag indicating whether or not unprovision
 * should occur asynchronously. When set to true, the unprovision operation
 * returns when the request is accepted by the system, and the unprovision
 * operation continues without any timeout limit. The default value is false.
 * However, we recommend setting it to true for large application packages that
 * were provisioned.
 */
export interface UnprovisionApplicationTypeDescriptionInfo {
  applicationTypeVersion: string;
  async?: boolean;
}

/**
 * @class
 * Initializes a new instance of the CodePackageEntryPointStatistics class.
 * @constructor
 * Statistics about setup or main entry point  of a code package deployed on a
 * Service Fabric node.
 *
 * @member {string} [lastExitCode] The last exit code of the entry point.
 * @member {date} [lastActivationTime] The last time (in UTC) when Service
 * Fabric attempted to run the entry point.
 * @member {date} [lastExitTime] The last time (in UTC) when the entry point
 * finished running.
 * @member {date} [lastSuccessfulActivationTime] The last time (in UTC) when
 * the entry point ran successfully.
 * @member {date} [lastSuccessfulExitTime] The last time (in UTC) when the
 * entry point finished running gracefully.
 * @member {string} [activationCount] Number of times the entry point has run.
 * @member {string} [activationFailureCount] Number of times the entry point
 * failed to run.
 * @member {string} [continuousActivationFailureCount] Number of times the
 * entry point continuously failed to run.
 * @member {string} [exitCount] Number of times the entry point finished
 * running.
 * @member {string} [exitFailureCount] Number of times the entry point failed
 * to exit gracefully.
 * @member {string} [continuousExitFailureCount] Number of times the entry
 * point continuously failed to exit gracefully.
 */
export interface CodePackageEntryPointStatistics {
  lastExitCode?: string;
  lastActivationTime?: Date;
  lastExitTime?: Date;
  lastSuccessfulActivationTime?: Date;
  lastSuccessfulExitTime?: Date;
  activationCount?: string;
  activationFailureCount?: string;
  continuousActivationFailureCount?: string;
  exitCount?: string;
  exitFailureCount?: string;
  continuousExitFailureCount?: string;
}

/**
 * @class
 * Initializes a new instance of the CodePackageEntryPoint class.
 * @constructor
 * Information about setup or main entry point of a code package deployed on a
 * Service Fabric node.
 *
 * @member {string} [entryPointLocation] The location of entry point executable
 * on the node.
 * @member {string} [processId] The process ID of the entry point.
 * @member {string} [runAsUserName] The user name under which entry point
 * executable is run on the node.
 * @member {object} [codePackageEntryPointStatistics] Statistics about setup or
 * main entry point  of a code package deployed on a Service Fabric node.
 * @member {string} [codePackageEntryPointStatistics.lastExitCode] The last
 * exit code of the entry point.
 * @member {date} [codePackageEntryPointStatistics.lastActivationTime] The last
 * time (in UTC) when Service Fabric attempted to run the entry point.
 * @member {date} [codePackageEntryPointStatistics.lastExitTime] The last time
 * (in UTC) when the entry point finished running.
 * @member {date}
 * [codePackageEntryPointStatistics.lastSuccessfulActivationTime] The last time
 * (in UTC) when the entry point ran successfully.
 * @member {date} [codePackageEntryPointStatistics.lastSuccessfulExitTime] The
 * last time (in UTC) when the entry point finished running gracefully.
 * @member {string} [codePackageEntryPointStatistics.activationCount] Number of
 * times the entry point has run.
 * @member {string} [codePackageEntryPointStatistics.activationFailureCount]
 * Number of times the entry point failed to run.
 * @member {string}
 * [codePackageEntryPointStatistics.continuousActivationFailureCount] Number of
 * times the entry point continuously failed to run.
 * @member {string} [codePackageEntryPointStatistics.exitCount] Number of times
 * the entry point finished running.
 * @member {string} [codePackageEntryPointStatistics.exitFailureCount] Number
 * of times the entry point failed to exit gracefully.
 * @member {string}
 * [codePackageEntryPointStatistics.continuousExitFailureCount] Number of times
 * the entry point continuously failed to exit gracefully.
 * @member {string} [status] Specifies the status of the code package entry
 * point deployed on a Service Fabric node. Possible values include: 'Invalid',
 * 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'
 * @member {date} [nextActivationTime] The time (in UTC) when the entry point
 * executable will be run next.
 * @member {string} [instanceId] The instance ID for current running entry
 * point. For a code package setup entry point (if specified) runs first and
 * after it finishes main entry point is started. Each time entry point
 * executable is run, its instance id will change.
 */
export interface CodePackageEntryPoint {
  entryPointLocation?: string;
  processId?: string;
  runAsUserName?: string;
  codePackageEntryPointStatistics?: CodePackageEntryPointStatistics;
  status?: string;
  nextActivationTime?: Date;
  instanceId?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedCodePackageInfo class.
 * @constructor
 * Information about code package deployed on a Service Fabric node.
 *
 * @member {string} [name] The name of the code package.
 * @member {string} [version] The version of the code package specified in
 * service manifest.
 * @member {string} [serviceManifestName] The name of service manifest that
 * specified this code package.
 * @member {string} [servicePackageActivationId] The ActivationId of a deployed
 * service package. If ServicePackageActivationMode specified at the time of
 * creating the service
 * is 'SharedProcess' (or if it is not specified, in which case it defaults to
 * 'SharedProcess'), then value of ServicePackageActivationId
 * is always an empty string.
 * @member {string} [hostType] Specifies the type of host for main entry point
 * of a code package as specified in service manifest. Possible values include:
 * 'Invalid', 'ExeHost', 'ContainerHost'
 * @member {string} [hostIsolationMode] Specifies the isolation mode of main
 * entry point of a code package when it's host type is ContainerHost. This is
 * specified as part of container host policies in application manifest while
 * importing service manifest. Possible values include: 'None', 'Process',
 * 'HyperV'
 * @member {string} [status] Specifies the status of a deployed application or
 * service package on a Service Fabric node. Possible values include:
 * 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading',
 * 'Deactivating'
 * @member {string} [runFrequencyInterval] The interval at which code package
 * is run. This is used for periodic code package.
 * @member {object} [setupEntryPoint] Information about setup or main entry
 * point of a code package deployed on a Service Fabric node.
 * @member {string} [setupEntryPoint.entryPointLocation] The location of entry
 * point executable on the node.
 * @member {string} [setupEntryPoint.processId] The process ID of the entry
 * point.
 * @member {string} [setupEntryPoint.runAsUserName] The user name under which
 * entry point executable is run on the node.
 * @member {object} [setupEntryPoint.codePackageEntryPointStatistics]
 * Statistics about setup or main entry point  of a code package deployed on a
 * Service Fabric node.
 * @member {string}
 * [setupEntryPoint.codePackageEntryPointStatistics.lastExitCode] The last exit
 * code of the entry point.
 * @member {date}
 * [setupEntryPoint.codePackageEntryPointStatistics.lastActivationTime] The
 * last time (in UTC) when Service Fabric attempted to run the entry point.
 * @member {date}
 * [setupEntryPoint.codePackageEntryPointStatistics.lastExitTime] The last time
 * (in UTC) when the entry point finished running.
 * @member {date}
 * [setupEntryPoint.codePackageEntryPointStatistics.lastSuccessfulActivationTime]
 * The last time (in UTC) when the entry point ran successfully.
 * @member {date}
 * [setupEntryPoint.codePackageEntryPointStatistics.lastSuccessfulExitTime] The
 * last time (in UTC) when the entry point finished running gracefully.
 * @member {string}
 * [setupEntryPoint.codePackageEntryPointStatistics.activationCount] Number of
 * times the entry point has run.
 * @member {string}
 * [setupEntryPoint.codePackageEntryPointStatistics.activationFailureCount]
 * Number of times the entry point failed to run.
 * @member {string}
 * [setupEntryPoint.codePackageEntryPointStatistics.continuousActivationFailureCount]
 * Number of times the entry point continuously failed to run.
 * @member {string} [setupEntryPoint.codePackageEntryPointStatistics.exitCount]
 * Number of times the entry point finished running.
 * @member {string}
 * [setupEntryPoint.codePackageEntryPointStatistics.exitFailureCount] Number of
 * times the entry point failed to exit gracefully.
 * @member {string}
 * [setupEntryPoint.codePackageEntryPointStatistics.continuousExitFailureCount]
 * Number of times the entry point continuously failed to exit gracefully.
 * @member {string} [setupEntryPoint.status] Specifies the status of the code
 * package entry point deployed on a Service Fabric node. Possible values
 * include: 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'
 * @member {date} [setupEntryPoint.nextActivationTime] The time (in UTC) when
 * the entry point executable will be run next.
 * @member {string} [setupEntryPoint.instanceId] The instance ID for current
 * running entry point. For a code package setup entry point (if specified)
 * runs first and after it finishes main entry point is started. Each time
 * entry point executable is run, its instance id will change.
 * @member {object} [mainEntryPoint] Information about setup or main entry
 * point of a code package deployed on a Service Fabric node.
 * @member {string} [mainEntryPoint.entryPointLocation] The location of entry
 * point executable on the node.
 * @member {string} [mainEntryPoint.processId] The process ID of the entry
 * point.
 * @member {string} [mainEntryPoint.runAsUserName] The user name under which
 * entry point executable is run on the node.
 * @member {object} [mainEntryPoint.codePackageEntryPointStatistics] Statistics
 * about setup or main entry point  of a code package deployed on a Service
 * Fabric node.
 * @member {string}
 * [mainEntryPoint.codePackageEntryPointStatistics.lastExitCode] The last exit
 * code of the entry point.
 * @member {date}
 * [mainEntryPoint.codePackageEntryPointStatistics.lastActivationTime] The last
 * time (in UTC) when Service Fabric attempted to run the entry point.
 * @member {date} [mainEntryPoint.codePackageEntryPointStatistics.lastExitTime]
 * The last time (in UTC) when the entry point finished running.
 * @member {date}
 * [mainEntryPoint.codePackageEntryPointStatistics.lastSuccessfulActivationTime]
 * The last time (in UTC) when the entry point ran successfully.
 * @member {date}
 * [mainEntryPoint.codePackageEntryPointStatistics.lastSuccessfulExitTime] The
 * last time (in UTC) when the entry point finished running gracefully.
 * @member {string}
 * [mainEntryPoint.codePackageEntryPointStatistics.activationCount] Number of
 * times the entry point has run.
 * @member {string}
 * [mainEntryPoint.codePackageEntryPointStatistics.activationFailureCount]
 * Number of times the entry point failed to run.
 * @member {string}
 * [mainEntryPoint.codePackageEntryPointStatistics.continuousActivationFailureCount]
 * Number of times the entry point continuously failed to run.
 * @member {string} [mainEntryPoint.codePackageEntryPointStatistics.exitCount]
 * Number of times the entry point finished running.
 * @member {string}
 * [mainEntryPoint.codePackageEntryPointStatistics.exitFailureCount] Number of
 * times the entry point failed to exit gracefully.
 * @member {string}
 * [mainEntryPoint.codePackageEntryPointStatistics.continuousExitFailureCount]
 * Number of times the entry point continuously failed to exit gracefully.
 * @member {string} [mainEntryPoint.status] Specifies the status of the code
 * package entry point deployed on a Service Fabric node. Possible values
 * include: 'Invalid', 'Pending', 'Starting', 'Started', 'Stopping', 'Stopped'
 * @member {date} [mainEntryPoint.nextActivationTime] The time (in UTC) when
 * the entry point executable will be run next.
 * @member {string} [mainEntryPoint.instanceId] The instance ID for current
 * running entry point. For a code package setup entry point (if specified)
 * runs first and after it finishes main entry point is started. Each time
 * entry point executable is run, its instance id will change.
 */
export interface DeployedCodePackageInfo {
  name?: string;
  version?: string;
  serviceManifestName?: string;
  servicePackageActivationId?: string;
  hostType?: string;
  hostIsolationMode?: string;
  status?: string;
  runFrequencyInterval?: string;
  setupEntryPoint?: CodePackageEntryPoint;
  mainEntryPoint?: CodePackageEntryPoint;
}

/**
 * @class
 * Initializes a new instance of the ChaosContext class.
 * @constructor
 * Describes a map, which is a collection of (string, string) type key-value
 * pairs. The map can be used to record information about
 * the Chaos run. There cannot be more than 100 such pairs and each string (key
 * or value) can be at most 4095 characters long.
 * This map is set by the starter of the Chaos run to optionally store the
 * context about the specific run.
 *
 * @member {object} [map] Describes a map that contains a collection of
 * ChaosContextMapItem's.
 */
export interface ChaosContext {
  map?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the ChaosTargetFilter class.
 * @constructor
 * Defines all filters for targeted Chaos faults, for example, faulting only
 * certain node types or faulting only certain applications.
 * If ChaosTargetFilter is not used, Chaos faults all cluster entities. If
 * ChaosTargetFilter is used, Chaos faults only the entities that meet the
 * ChaosTargetFilter
 * specification. NodeTypeInclusionList and ApplicationInclusionList allow a
 * union semantics only. It is not possible to specify an intersection
 * of NodeTypeInclusionList and ApplicationInclusionList. For example, it is
 * not possible to specify "fault this application only when it is on that node
 * type."
 * Once an entity is included in either NodeTypeInclusionList or
 * ApplicationInclusionList, that entity cannot be excluded using
 * ChaosTargetFilter. Even if
 * applicationX does not appear in ApplicationInclusionList, in some Chaos
 * iteration applicationX can be faulted because it happens to be on a node of
 * nodeTypeY that is included
 * in NodeTypeInclusionList. If both NodeTypeInclusionList and
 * ApplicationInclusionList are null or empty, an ArgumentException is thrown.
 *
 * @member {array} [nodeTypeInclusionList] A list of node types to include in
 * Chaos faults.
 * All types of faults (restart node, restart code package, remove replica,
 * restart replica, move primary, and move secondary) are enabled for the nodes
 * of these node types.
 * If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList,
 * then node level faults (like NodeRestart) will never be enabled for the
 * nodes of
 * NodeTypeX, but code package and replica faults can still be enabled for
 * NodeTypeX if an application in the ApplicationInclusionList.
 * happens to reside on a node of NodeTypeX.
 * At most 100 node type names can be included in this list, to increase this
 * number, a config upgrade is required for
 * MaxNumberOfNodeTypesInChaosEntityFilter configuration.
 * @member {array} [applicationInclusionList] A list of application URIs to
 * include in Chaos faults.
 * All replicas belonging to services of these applications are amenable to
 * replica faults (restart replica, remove replica, move primary, and move
 * secondary) by Chaos.
 * Chaos may restart a code package only if the code package hosts replicas of
 * these applications only.
 * If an application does not appear in this list, it can still be faulted in
 * some Chaos iteration if the application ends up on a node of a node type
 * that is included in NodeTypeInclusionList.
 * However, if applicationX is tied to nodeTypeY through placement constraints
 * and applicationX is absent from ApplicationInclusionList and nodeTypeY is
 * absent from NodeTypeInclusionList, then applicationX will never be faulted.
 * At most 1000 application names can be included in this list, to increase
 * this number, a config upgrade is required for
 * MaxNumberOfApplicationsInChaosEntityFilter configuration.
 */
export interface ChaosTargetFilter {
  nodeTypeInclusionList?: string[];
  applicationInclusionList?: string[];
}

/**
 * @class
 * Initializes a new instance of the ChaosParameters class.
 * @constructor
 * Defines all the parameters to configure a Chaos run.
 *
 * @member {string} [timeToRunInSeconds] Total time (in seconds) for which
 * Chaos will run before automatically stopping. The maximum allowed value is
 * 4,294,967,295 (System.UInt32.MaxValue). Default value: '4294967295' .
 * @member {number} [maxClusterStabilizationTimeoutInSeconds] The maximum
 * amount of time to wait for all cluster entities to become stable and
 * healthy. Chaos executes in iterations and at the start of each iteration it
 * validates the health of cluster entities.
 * During validation if a cluster entity is not stable and healthy within
 * MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed
 * event. Default value: 60 .
 * @member {number} [maxConcurrentFaults] MaxConcurrentFaults is the maximum
 * number of concurrent faults induced per iteration.
 * Chaos executes in iterations and two consecutive iterations are separated by
 * a validation phase.
 * The higher the concurrency, the more aggressive the injection of faults,
 * leading to inducing more complex series of states to uncover bugs.
 * The recommendation is to start with a value of 2 or 3 and to exercise
 * caution while moving up. Default value: 1 .
 * @member {boolean} [enableMoveReplicaFaults] Enables or disables the move
 * primary and move secondary faults. Default value: true .
 * @member {number} [waitTimeBetweenFaultsInSeconds] Wait time (in seconds)
 * between consecutive faults within a single iteration.
 * The larger the value, the lower the overlapping between faults and the
 * simpler the sequence of state transitions that the cluster goes through.
 * The recommendation is to start with a value between 1 and 5 and exercise
 * caution while moving up. Default value: 20 .
 * @member {number} [waitTimeBetweenIterationsInSeconds] Time-separation (in
 * seconds) between two consecutive iterations of Chaos.
 * The larger the value, the lower the fault injection rate. Default value: 30
 * .
 * @member {object} [clusterHealthPolicy] Passed-in cluster health policy is
 * used to validate health of the cluster in between Chaos iterations. If the
 * cluster health is in error or if an unexpected exception happens during
 * fault execution--to provide the cluster with some time to recuperate--Chaos
 * will wait for 30 minutes before the next health-check.
 * @member {boolean} [clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number} [clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array} [clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {object} [context] Describes a map, which is a collection of
 * (string, string) type key-value pairs. The map can be used to record
 * information about
 * the Chaos run. There cannot be more than 100 such pairs and each string (key
 * or value) can be at most 4095 characters long.
 * This map is set by the starter of the Chaos run to optionally store the
 * context about the specific run.
 * @member {object} [context.map] Describes a map that contains a collection of
 * ChaosContextMapItem's.
 * @member {object} [chaosTargetFilter] List of cluster entities to target for
 * Chaos faults.
 * This filter can be used to target Chaos faults only to certain node types or
 * only to certain application instances. If ChaosTargetFilter is not used,
 * Chaos faults all cluster entities.
 * If ChaosTargetFilter is used, Chaos faults only the entities that meet the
 * ChaosTargetFilter specification.
 * @member {array} [chaosTargetFilter.nodeTypeInclusionList] A list of node
 * types to include in Chaos faults.
 * All types of faults (restart node, restart code package, remove replica,
 * restart replica, move primary, and move secondary) are enabled for the nodes
 * of these node types.
 * If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList,
 * then node level faults (like NodeRestart) will never be enabled for the
 * nodes of
 * NodeTypeX, but code package and replica faults can still be enabled for
 * NodeTypeX if an application in the ApplicationInclusionList.
 * happens to reside on a node of NodeTypeX.
 * At most 100 node type names can be included in this list, to increase this
 * number, a config upgrade is required for
 * MaxNumberOfNodeTypesInChaosEntityFilter configuration.
 * @member {array} [chaosTargetFilter.applicationInclusionList] A list of
 * application URIs to include in Chaos faults.
 * All replicas belonging to services of these applications are amenable to
 * replica faults (restart replica, remove replica, move primary, and move
 * secondary) by Chaos.
 * Chaos may restart a code package only if the code package hosts replicas of
 * these applications only.
 * If an application does not appear in this list, it can still be faulted in
 * some Chaos iteration if the application ends up on a node of a node type
 * that is included in NodeTypeInclusionList.
 * However, if applicationX is tied to nodeTypeY through placement constraints
 * and applicationX is absent from ApplicationInclusionList and nodeTypeY is
 * absent from NodeTypeInclusionList, then applicationX will never be faulted.
 * At most 1000 application names can be included in this list, to increase
 * this number, a config upgrade is required for
 * MaxNumberOfApplicationsInChaosEntityFilter configuration.
 */
export interface ChaosParameters {
  timeToRunInSeconds?: string;
  maxClusterStabilizationTimeoutInSeconds?: number;
  maxConcurrentFaults?: number;
  enableMoveReplicaFaults?: boolean;
  waitTimeBetweenFaultsInSeconds?: number;
  waitTimeBetweenIterationsInSeconds?: number;
  clusterHealthPolicy?: ClusterHealthPolicy;
  context?: ChaosContext;
  chaosTargetFilter?: ChaosTargetFilter;
}

/**
 * @class
 * Initializes a new instance of the Chaos class.
 * @constructor
 * Contains a description of Chaos.
 *
 * @member {object} [chaosParameters] If Chaos is running, these are the
 * parameters Chaos is running with.
 * @member {string} [chaosParameters.timeToRunInSeconds] Total time (in
 * seconds) for which Chaos will run before automatically stopping. The maximum
 * allowed value is 4,294,967,295 (System.UInt32.MaxValue).
 * @member {number} [chaosParameters.maxClusterStabilizationTimeoutInSeconds]
 * The maximum amount of time to wait for all cluster entities to become stable
 * and healthy. Chaos executes in iterations and at the start of each iteration
 * it validates the health of cluster entities.
 * During validation if a cluster entity is not stable and healthy within
 * MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed
 * event.
 * @member {number} [chaosParameters.maxConcurrentFaults] MaxConcurrentFaults
 * is the maximum number of concurrent faults induced per iteration.
 * Chaos executes in iterations and two consecutive iterations are separated by
 * a validation phase.
 * The higher the concurrency, the more aggressive the injection of faults,
 * leading to inducing more complex series of states to uncover bugs.
 * The recommendation is to start with a value of 2 or 3 and to exercise
 * caution while moving up.
 * @member {boolean} [chaosParameters.enableMoveReplicaFaults] Enables or
 * disables the move primary and move secondary faults.
 * @member {number} [chaosParameters.waitTimeBetweenFaultsInSeconds] Wait time
 * (in seconds) between consecutive faults within a single iteration.
 * The larger the value, the lower the overlapping between faults and the
 * simpler the sequence of state transitions that the cluster goes through.
 * The recommendation is to start with a value between 1 and 5 and exercise
 * caution while moving up.
 * @member {number} [chaosParameters.waitTimeBetweenIterationsInSeconds]
 * Time-separation (in seconds) between two consecutive iterations of Chaos.
 * The larger the value, the lower the fault injection rate.
 * @member {object} [chaosParameters.clusterHealthPolicy] Passed-in cluster
 * health policy is used to validate health of the cluster in between Chaos
 * iterations. If the cluster health is in error or if an unexpected exception
 * happens during fault execution--to provide the cluster with some time to
 * recuperate--Chaos will wait for 30 minutes before the next health-check.
 * @member {boolean}
 * [chaosParameters.clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number}
 * [chaosParameters.clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number}
 * [chaosParameters.clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array}
 * [chaosParameters.clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {object} [chaosParameters.context] Describes a map, which is a
 * collection of (string, string) type key-value pairs. The map can be used to
 * record information about
 * the Chaos run. There cannot be more than 100 such pairs and each string (key
 * or value) can be at most 4095 characters long.
 * This map is set by the starter of the Chaos run to optionally store the
 * context about the specific run.
 * @member {object} [chaosParameters.context.map] Describes a map that contains
 * a collection of ChaosContextMapItem's.
 * @member {object} [chaosParameters.chaosTargetFilter] List of cluster
 * entities to target for Chaos faults.
 * This filter can be used to target Chaos faults only to certain node types or
 * only to certain application instances. If ChaosTargetFilter is not used,
 * Chaos faults all cluster entities.
 * If ChaosTargetFilter is used, Chaos faults only the entities that meet the
 * ChaosTargetFilter specification.
 * @member {array} [chaosParameters.chaosTargetFilter.nodeTypeInclusionList] A
 * list of node types to include in Chaos faults.
 * All types of faults (restart node, restart code package, remove replica,
 * restart replica, move primary, and move secondary) are enabled for the nodes
 * of these node types.
 * If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList,
 * then node level faults (like NodeRestart) will never be enabled for the
 * nodes of
 * NodeTypeX, but code package and replica faults can still be enabled for
 * NodeTypeX if an application in the ApplicationInclusionList.
 * happens to reside on a node of NodeTypeX.
 * At most 100 node type names can be included in this list, to increase this
 * number, a config upgrade is required for
 * MaxNumberOfNodeTypesInChaosEntityFilter configuration.
 * @member {array} [chaosParameters.chaosTargetFilter.applicationInclusionList]
 * A list of application URIs to include in Chaos faults.
 * All replicas belonging to services of these applications are amenable to
 * replica faults (restart replica, remove replica, move primary, and move
 * secondary) by Chaos.
 * Chaos may restart a code package only if the code package hosts replicas of
 * these applications only.
 * If an application does not appear in this list, it can still be faulted in
 * some Chaos iteration if the application ends up on a node of a node type
 * that is included in NodeTypeInclusionList.
 * However, if applicationX is tied to nodeTypeY through placement constraints
 * and applicationX is absent from ApplicationInclusionList and nodeTypeY is
 * absent from NodeTypeInclusionList, then applicationX will never be faulted.
 * At most 1000 application names can be included in this list, to increase
 * this number, a config upgrade is required for
 * MaxNumberOfApplicationsInChaosEntityFilter configuration.
 * @member {string} [status] Current status of the Chaos run. Possible values
 * include: 'Invalid', 'Running', 'Stopped'
 * @member {string} [scheduleStatus] Current status of the schedule. Possible
 * values include: 'Invalid', 'Stopped', 'Active', 'Expired', 'Pending'
 */
export interface Chaos {
  chaosParameters?: ChaosParameters;
  status?: string;
  scheduleStatus?: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosParametersDictionaryItem class.
 * @constructor
 * Defines an item in ChaosParametersDictionary of the Chaos Schedule.
 *
 * @member {string} key The key identifying the Chaos Parameter in the
 * dictionary. This key is referenced by Chaos Schedule Jobs.
 * @member {object} value Defines all the parameters to configure a Chaos run.
 * @member {string} [value.timeToRunInSeconds] Total time (in seconds) for
 * which Chaos will run before automatically stopping. The maximum allowed
 * value is 4,294,967,295 (System.UInt32.MaxValue).
 * @member {number} [value.maxClusterStabilizationTimeoutInSeconds] The maximum
 * amount of time to wait for all cluster entities to become stable and
 * healthy. Chaos executes in iterations and at the start of each iteration it
 * validates the health of cluster entities.
 * During validation if a cluster entity is not stable and healthy within
 * MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed
 * event.
 * @member {number} [value.maxConcurrentFaults] MaxConcurrentFaults is the
 * maximum number of concurrent faults induced per iteration.
 * Chaos executes in iterations and two consecutive iterations are separated by
 * a validation phase.
 * The higher the concurrency, the more aggressive the injection of faults,
 * leading to inducing more complex series of states to uncover bugs.
 * The recommendation is to start with a value of 2 or 3 and to exercise
 * caution while moving up.
 * @member {boolean} [value.enableMoveReplicaFaults] Enables or disables the
 * move primary and move secondary faults.
 * @member {number} [value.waitTimeBetweenFaultsInSeconds] Wait time (in
 * seconds) between consecutive faults within a single iteration.
 * The larger the value, the lower the overlapping between faults and the
 * simpler the sequence of state transitions that the cluster goes through.
 * The recommendation is to start with a value between 1 and 5 and exercise
 * caution while moving up.
 * @member {number} [value.waitTimeBetweenIterationsInSeconds] Time-separation
 * (in seconds) between two consecutive iterations of Chaos.
 * The larger the value, the lower the fault injection rate.
 * @member {object} [value.clusterHealthPolicy] Passed-in cluster health policy
 * is used to validate health of the cluster in between Chaos iterations. If
 * the cluster health is in error or if an unexpected exception happens during
 * fault execution--to provide the cluster with some time to recuperate--Chaos
 * will wait for 30 minutes before the next health-check.
 * @member {boolean} [value.clusterHealthPolicy.considerWarningAsError]
 * Indicates whether warnings are treated with the same severity as errors.
 * @member {number} [value.clusterHealthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number} [value.clusterHealthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array} [value.clusterHealthPolicy.applicationTypeHealthPolicyMap]
 * Defines a map with max percentage unhealthy applications for specific
 * application types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {object} [value.context] Describes a map, which is a collection of
 * (string, string) type key-value pairs. The map can be used to record
 * information about
 * the Chaos run. There cannot be more than 100 such pairs and each string (key
 * or value) can be at most 4095 characters long.
 * This map is set by the starter of the Chaos run to optionally store the
 * context about the specific run.
 * @member {object} [value.context.map] Describes a map that contains a
 * collection of ChaosContextMapItem's.
 * @member {object} [value.chaosTargetFilter] List of cluster entities to
 * target for Chaos faults.
 * This filter can be used to target Chaos faults only to certain node types or
 * only to certain application instances. If ChaosTargetFilter is not used,
 * Chaos faults all cluster entities.
 * If ChaosTargetFilter is used, Chaos faults only the entities that meet the
 * ChaosTargetFilter specification.
 * @member {array} [value.chaosTargetFilter.nodeTypeInclusionList] A list of
 * node types to include in Chaos faults.
 * All types of faults (restart node, restart code package, remove replica,
 * restart replica, move primary, and move secondary) are enabled for the nodes
 * of these node types.
 * If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList,
 * then node level faults (like NodeRestart) will never be enabled for the
 * nodes of
 * NodeTypeX, but code package and replica faults can still be enabled for
 * NodeTypeX if an application in the ApplicationInclusionList.
 * happens to reside on a node of NodeTypeX.
 * At most 100 node type names can be included in this list, to increase this
 * number, a config upgrade is required for
 * MaxNumberOfNodeTypesInChaosEntityFilter configuration.
 * @member {array} [value.chaosTargetFilter.applicationInclusionList] A list of
 * application URIs to include in Chaos faults.
 * All replicas belonging to services of these applications are amenable to
 * replica faults (restart replica, remove replica, move primary, and move
 * secondary) by Chaos.
 * Chaos may restart a code package only if the code package hosts replicas of
 * these applications only.
 * If an application does not appear in this list, it can still be faulted in
 * some Chaos iteration if the application ends up on a node of a node type
 * that is included in NodeTypeInclusionList.
 * However, if applicationX is tied to nodeTypeY through placement constraints
 * and applicationX is absent from ApplicationInclusionList and nodeTypeY is
 * absent from NodeTypeInclusionList, then applicationX will never be faulted.
 * At most 1000 application names can be included in this list, to increase
 * this number, a config upgrade is required for
 * MaxNumberOfApplicationsInChaosEntityFilter configuration.
 */
export interface ChaosParametersDictionaryItem {
  key: string;
  value: ChaosParameters;
}

/**
 * @class
 * Initializes a new instance of the ChaosEvent class.
 * @constructor
 * Represents an event generated during a Chaos run.
 *
 * @member {date} timeStampUtc The UTC timestamp when this Chaos event was
 * generated.
 * @member {string} kind Polymorphic Discriminator
 */
export interface ChaosEvent {
  timeStampUtc: Date;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosEventWrapper class.
 * @constructor
 * Wrapper object for Chaos event.
 *
 * @member {object} [chaosEvent] Represents an event generated during a Chaos
 * run.
 * @member {date} [chaosEvent.timeStampUtc] The UTC timestamp when this Chaos
 * event was generated.
 * @member {string} [chaosEvent.kind] Polymorphic Discriminator
 */
export interface ChaosEventWrapper {
  chaosEvent?: ChaosEvent;
}

/**
 * @class
 * Initializes a new instance of the ChaosEventsSegment class.
 * @constructor
 * Contains the list of Chaos events and the continuation token to get the next
 * segment.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [history] List of Chaos events that meet the user-supplied
 * criteria.
 */
export interface ChaosEventsSegment {
  continuationToken?: string;
  history?: ChaosEventWrapper[];
}

/**
 * @class
 * Initializes a new instance of the ChaosScheduleJobActiveDaysOfWeek class.
 * @constructor
 * Defines the days of the week that a Chaos Schedule Job will run for.
 *
 * @member {boolean} [sunday] Indicates if the Chaos Schedule Job will run on
 * Sunday. Default value: false .
 * @member {boolean} [monday] Indicates if the Chaos Schedule Job will run on
 * Monday. Default value: false .
 * @member {boolean} [tuesday] Indicates if the Chaos Schedule Job will run on
 * Tuesday. Default value: false .
 * @member {boolean} [wednesday] Indicates if the Chaos Schedule Job will run
 * on Wednesday. Default value: false .
 * @member {boolean} [thursday] Indicates if the Chaos Schedule Job will run on
 * Thursday. Default value: false .
 * @member {boolean} [friday] Indicates if the Chaos Schedule Job will run on
 * Friday. Default value: false .
 * @member {boolean} [saturday] Indicates if the Chaos Schedule Job will run on
 * Saturday. Default value: false .
 */
export interface ChaosScheduleJobActiveDaysOfWeek {
  sunday?: boolean;
  monday?: boolean;
  tuesday?: boolean;
  wednesday?: boolean;
  thursday?: boolean;
  friday?: boolean;
  saturday?: boolean;
}

/**
 * @class
 * Initializes a new instance of the TimeOfDay class.
 * @constructor
 * Defines an hour and minute of the day specified in 24 hour time.
 *
 * @member {number} [hour] Represents the hour of the day. Value must be
 * between 0 and 23 inclusive.
 * @member {number} [minute] Represents the minute of the hour. Value must be
 * between 0 to 59 inclusive.
 */
export interface TimeOfDay {
  hour?: number;
  minute?: number;
}

/**
 * @class
 * Initializes a new instance of the TimeRange class.
 * @constructor
 * Defines a time range in a 24 hour day specified by a start and end time.
 *
 * @member {object} [startTime] Defines an hour and minute of the day specified
 * in 24 hour time.
 * @member {number} [startTime.hour] Represents the hour of the day. Value must
 * be between 0 and 23 inclusive.
 * @member {number} [startTime.minute] Represents the minute of the hour. Value
 * must be between 0 to 59 inclusive.
 * @member {object} [endTime] Defines an hour and minute of the day specified
 * in 24 hour time.
 * @member {number} [endTime.hour] Represents the hour of the day. Value must
 * be between 0 and 23 inclusive.
 * @member {number} [endTime.minute] Represents the minute of the hour. Value
 * must be between 0 to 59 inclusive.
 */
export interface TimeRange {
  startTime?: TimeOfDay;
  endTime?: TimeOfDay;
}

/**
 * @class
 * Initializes a new instance of the ChaosScheduleJob class.
 * @constructor
 * Defines a repetition rule and parameters of Chaos to be used with the Chaos
 * Schedule.
 *
 * @member {string} [chaosParameters] A reference to which Chaos Parameters of
 * the Chaos Schedule to use.
 * @member {object} [days] Defines the days of the week that a Chaos Schedule
 * Job will run for.
 * @member {boolean} [days.sunday] Indicates if the Chaos Schedule Job will run
 * on Sunday
 * @member {boolean} [days.monday] Indicates if the Chaos Schedule Job will run
 * on Monday
 * @member {boolean} [days.tuesday] Indicates if the Chaos Schedule Job will
 * run on Tuesday
 * @member {boolean} [days.wednesday] Indicates if the Chaos Schedule Job will
 * run on Wednesday
 * @member {boolean} [days.thursday] Indicates if the Chaos Schedule Job will
 * run on Thursday
 * @member {boolean} [days.friday] Indicates if the Chaos Schedule Job will run
 * on Friday
 * @member {boolean} [days.saturday] Indicates if the Chaos Schedule Job will
 * run on Saturday
 * @member {array} [times] A list of Time Ranges that specify when during
 * active days that this job will run. The times are interpreted as UTC.
 */
export interface ChaosScheduleJob {
  chaosParameters?: string;
  days?: ChaosScheduleJobActiveDaysOfWeek;
  times?: TimeRange[];
}

/**
 * @class
 * Initializes a new instance of the ChaosSchedule class.
 * @constructor
 * Defines the schedule used by Chaos.
 *
 * @member {date} [startDate] The date and time Chaos will start using this
 * schedule. Default value: new Date('1601-01-01T00:00:00Z') .
 * @member {date} [expiryDate] The date and time Chaos will continue to use
 * this schedule until. Default value: new Date('9999-12-31T23:59:59.999Z') .
 * @member {array} [chaosParametersDictionary] A mapping of string names to
 * Chaos Parameters to be referenced by Chaos Schedule Jobs.
 * @member {array} [jobs] A list of all Chaos Schedule Jobs that will be
 * automated by the schedule.
 */
export interface ChaosSchedule {
  startDate?: Date;
  expiryDate?: Date;
  chaosParametersDictionary?: ChaosParametersDictionaryItem[];
  jobs?: ChaosScheduleJob[];
}

/**
 * @class
 * Initializes a new instance of the ChaosScheduleDescription class.
 * @constructor
 * Defines the Chaos Schedule used by Chaos and the version of the Chaos
 * Schedule. The version value wraps back to 0 after surpassing 2,147,483,647.
 *
 * @member {number} [version] The version number of the Schedule.
 * @member {object} [schedule] Defines the schedule used by Chaos.
 * @member {date} [schedule.startDate] The date and time Chaos will start using
 * this schedule.
 * @member {date} [schedule.expiryDate] The date and time Chaos will continue
 * to use this schedule until.
 * @member {array} [schedule.chaosParametersDictionary] A mapping of string
 * names to Chaos Parameters to be referenced by Chaos Schedule Jobs.
 * @member {array} [schedule.jobs] A list of all Chaos Schedule Jobs that will
 * be automated by the schedule.
 */
export interface ChaosScheduleDescription {
  version?: number;
  schedule?: ChaosSchedule;
}

/**
 * @class
 * Initializes a new instance of the ExecutingFaultsChaosEvent class.
 * @constructor
 * Describes a Chaos event that gets generated when Chaos has decided on the
 * faults for an iteration. This Chaos event contains the details of the faults
 * as a list of strings.
 *
 * @member {array} [faults] List of string description of the faults that Chaos
 * decided to execute in an iteration.
 */
export interface ExecutingFaultsChaosEvent extends ChaosEvent {
  faults?: string[];
}

/**
 * @class
 * Initializes a new instance of the StartedChaosEvent class.
 * @constructor
 * Describes a Chaos event that gets generated when Chaos is started.
 *
 * @member {object} [chaosParameters] Defines all the parameters to configure a
 * Chaos run.
 * @member {string} [chaosParameters.timeToRunInSeconds] Total time (in
 * seconds) for which Chaos will run before automatically stopping. The maximum
 * allowed value is 4,294,967,295 (System.UInt32.MaxValue).
 * @member {number} [chaosParameters.maxClusterStabilizationTimeoutInSeconds]
 * The maximum amount of time to wait for all cluster entities to become stable
 * and healthy. Chaos executes in iterations and at the start of each iteration
 * it validates the health of cluster entities.
 * During validation if a cluster entity is not stable and healthy within
 * MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed
 * event.
 * @member {number} [chaosParameters.maxConcurrentFaults] MaxConcurrentFaults
 * is the maximum number of concurrent faults induced per iteration.
 * Chaos executes in iterations and two consecutive iterations are separated by
 * a validation phase.
 * The higher the concurrency, the more aggressive the injection of faults,
 * leading to inducing more complex series of states to uncover bugs.
 * The recommendation is to start with a value of 2 or 3 and to exercise
 * caution while moving up.
 * @member {boolean} [chaosParameters.enableMoveReplicaFaults] Enables or
 * disables the move primary and move secondary faults.
 * @member {number} [chaosParameters.waitTimeBetweenFaultsInSeconds] Wait time
 * (in seconds) between consecutive faults within a single iteration.
 * The larger the value, the lower the overlapping between faults and the
 * simpler the sequence of state transitions that the cluster goes through.
 * The recommendation is to start with a value between 1 and 5 and exercise
 * caution while moving up.
 * @member {number} [chaosParameters.waitTimeBetweenIterationsInSeconds]
 * Time-separation (in seconds) between two consecutive iterations of Chaos.
 * The larger the value, the lower the fault injection rate.
 * @member {object} [chaosParameters.clusterHealthPolicy] Passed-in cluster
 * health policy is used to validate health of the cluster in between Chaos
 * iterations. If the cluster health is in error or if an unexpected exception
 * happens during fault execution--to provide the cluster with some time to
 * recuperate--Chaos will wait for 30 minutes before the next health-check.
 * @member {boolean}
 * [chaosParameters.clusterHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number}
 * [chaosParameters.clusterHealthPolicy.maxPercentUnhealthyNodes] The maximum
 * allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * The percentage represents the maximum tolerated percentage of nodes that can
 * be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy node, the
 * health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy nodes over
 * the total number of nodes in the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 *
 * In large clusters, some nodes will always be down or out for repairs, so
 * this percentage should be configured to tolerate that.
 * @member {number}
 * [chaosParameters.clusterHealthPolicy.maxPercentUnhealthyApplications] The
 * maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * The percentage represents the maximum tolerated percentage of applications
 * that can be unhealthy before the cluster is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * application, the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy applications over the
 * total number of application instances in the cluster, excluding applications
 * of application types that are included in the
 * ApplicationTypeHealthPolicyMap.
 * The computation rounds up to tolerate one failure on small numbers of
 * applications. Default percentage is zero.
 * @member {array}
 * [chaosParameters.clusterHealthPolicy.applicationTypeHealthPolicyMap] Defines
 * a map with max percentage unhealthy applications for specific application
 * types.
 * Each entry specifies as key the application type name and as value an
 * integer that represents the MaxPercentUnhealthyApplications percentage used
 * to evaluate the applications of the specified application type.
 *
 * The application type health policy map can be used during cluster health
 * evaluation to describe special application types.
 * The application types included in the map are evaluated against the
 * percentage specified in the map, and not with the global
 * MaxPercentUnhealthyApplications defined in the cluster health policy.
 * The applications of application types specified in the map are not counted
 * against the global pool of applications.
 * For example, if some applications of a type are critical, the cluster
 * administrator can add an entry to the map for that application type
 * and assign it a value of 0% (that is, do not tolerate any failures).
 * All other applications can be evaluated with MaxPercentUnhealthyApplications
 * set to 20% to tolerate some failures out of the thousands of application
 * instances.
 * The application type health policy map is used only if the cluster manifest
 * enables application type health evaluation using the configuration entry for
 * HealthManager/EnableApplicationTypeHealthEvaluation.
 * @member {object} [chaosParameters.context] Describes a map, which is a
 * collection of (string, string) type key-value pairs. The map can be used to
 * record information about
 * the Chaos run. There cannot be more than 100 such pairs and each string (key
 * or value) can be at most 4095 characters long.
 * This map is set by the starter of the Chaos run to optionally store the
 * context about the specific run.
 * @member {object} [chaosParameters.context.map] Describes a map that contains
 * a collection of ChaosContextMapItem's.
 * @member {object} [chaosParameters.chaosTargetFilter] List of cluster
 * entities to target for Chaos faults.
 * This filter can be used to target Chaos faults only to certain node types or
 * only to certain application instances. If ChaosTargetFilter is not used,
 * Chaos faults all cluster entities.
 * If ChaosTargetFilter is used, Chaos faults only the entities that meet the
 * ChaosTargetFilter specification.
 * @member {array} [chaosParameters.chaosTargetFilter.nodeTypeInclusionList] A
 * list of node types to include in Chaos faults.
 * All types of faults (restart node, restart code package, remove replica,
 * restart replica, move primary, and move secondary) are enabled for the nodes
 * of these node types.
 * If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList,
 * then node level faults (like NodeRestart) will never be enabled for the
 * nodes of
 * NodeTypeX, but code package and replica faults can still be enabled for
 * NodeTypeX if an application in the ApplicationInclusionList.
 * happens to reside on a node of NodeTypeX.
 * At most 100 node type names can be included in this list, to increase this
 * number, a config upgrade is required for
 * MaxNumberOfNodeTypesInChaosEntityFilter configuration.
 * @member {array} [chaosParameters.chaosTargetFilter.applicationInclusionList]
 * A list of application URIs to include in Chaos faults.
 * All replicas belonging to services of these applications are amenable to
 * replica faults (restart replica, remove replica, move primary, and move
 * secondary) by Chaos.
 * Chaos may restart a code package only if the code package hosts replicas of
 * these applications only.
 * If an application does not appear in this list, it can still be faulted in
 * some Chaos iteration if the application ends up on a node of a node type
 * that is included in NodeTypeInclusionList.
 * However, if applicationX is tied to nodeTypeY through placement constraints
 * and applicationX is absent from ApplicationInclusionList and nodeTypeY is
 * absent from NodeTypeInclusionList, then applicationX will never be faulted.
 * At most 1000 application names can be included in this list, to increase
 * this number, a config upgrade is required for
 * MaxNumberOfApplicationsInChaosEntityFilter configuration.
 */
export interface StartedChaosEvent extends ChaosEvent {
  chaosParameters?: ChaosParameters;
}

/**
 * @class
 * Initializes a new instance of the StoppedChaosEvent class.
 * @constructor
 * Describes a Chaos event that gets generated when Chaos stops because either
 * the user issued a stop or the time to run was up.
 *
 * @member {string} [reason] Describes why Chaos stopped. Chaos can stop
 * because of StopChaos API call or the timeToRun provided in ChaosParameters
 * is over.
 */
export interface StoppedChaosEvent extends ChaosEvent {
  reason?: string;
}

/**
 * @class
 * Initializes a new instance of the TestErrorChaosEvent class.
 * @constructor
 * Describes a Chaos event that gets generated when an unexpected event occurs
 * in the Chaos engine.
 * For example, due to the cluster snapshot being inconsistent, while faulting
 * an entity, Chaos found that the entity was already faulted -- which would be
 * an unexpected event.
 *
 * @member {string} [reason] Describes why TestErrorChaosEvent was generated.
 * For example, Chaos tries to fault a partition but finds that the partition
 * is no longer fault tolerant, then a TestErrorEvent gets generated with the
 * reason stating that the partition is not fault tolerant.
 */
export interface TestErrorChaosEvent extends ChaosEvent {
  reason?: string;
}

/**
 * @class
 * Initializes a new instance of the ValidationFailedChaosEvent class.
 * @constructor
 * Chaos event corresponding to a failure during validation.
 *
 * @member {string} [reason] Describes why the ValidationFailedChaosEvent was
 * generated. This may happen because more than MaxPercentUnhealthyNodes are
 * unhealthy for more than MaxClusterStabilizationTimeout. This reason will be
 * in the Reason property of the ValidationFailedChaosEvent as a string.
 */
export interface ValidationFailedChaosEvent extends ChaosEvent {
  reason?: string;
}

/**
 * @class
 * Initializes a new instance of the WaitingChaosEvent class.
 * @constructor
 * Describes a Chaos event that gets generated when Chaos is waiting for the
 * cluster to become ready for faulting, for example, Chaos may be waiting for
 * the on-going upgrade to finish.
 *
 * @member {string} [reason] Describes why the WaitingChaosEvent was generated,
 * for example, due to a cluster upgrade.
 */
export interface WaitingChaosEvent extends ChaosEvent {
  reason?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationCapacityDescription class.
 * @constructor
 * Describes capacity information for services of this application. This
 * description can be used for describing the following.
 * - Reserving the capacity for the services on the nodes
 * - Limiting the total number of nodes that services of this application can
 * run on
 * - Limiting the custom capacity metrics to limit the total consumption of
 * this metric by the services of this application
 *
 * @member {number} [minimumNodes] The minimum number of nodes where Service
 * Fabric will reserve capacity for this application. Note that this does not
 * mean that the services of this application will be placed on all of those
 * nodes. If this property is set to zero, no capacity will be reserved. The
 * value of this property cannot be more than the value of the MaximumNodes
 * property.
 * @member {number} [maximumNodes] The maximum number of nodes where Service
 * Fabric will reserve capacity for this application. Note that this does not
 * mean that the services of this application will be placed on all of those
 * nodes. By default, the value of this property is zero and it means that the
 * services can be placed on any node. Default value: 0 .
 * @member {array} [applicationMetrics] List of application capacity metric
 * description.
 */
export interface ApplicationCapacityDescription {
  minimumNodes?: number;
  maximumNodes?: number;
  applicationMetrics?: ApplicationMetricDescription[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationDescription class.
 * @constructor
 * Describes a Service Fabric application.
 *
 * @member {string} name The name of the application, including the 'fabric:'
 * URI scheme.
 * @member {string} typeName The application type name as defined in the
 * application manifest.
 * @member {string} typeVersion The version of the application type as defined
 * in the application manifest.
 * @member {array} [parameterList] List of application parameters with
 * overridden values from their default values specified in the application
 * manifest.
 * @member {object} [applicationCapacity] Describes capacity information for
 * services of this application. This description can be used for describing
 * the following.
 * - Reserving the capacity for the services on the nodes
 * - Limiting the total number of nodes that services of this application can
 * run on
 * - Limiting the custom capacity metrics to limit the total consumption of
 * this metric by the services of this application
 * @member {number} [applicationCapacity.minimumNodes] The minimum number of
 * nodes where Service Fabric will reserve capacity for this application. Note
 * that this does not mean that the services of this application will be placed
 * on all of those nodes. If this property is set to zero, no capacity will be
 * reserved. The value of this property cannot be more than the value of the
 * MaximumNodes property.
 * @member {number} [applicationCapacity.maximumNodes] The maximum number of
 * nodes where Service Fabric will reserve capacity for this application. Note
 * that this does not mean that the services of this application will be placed
 * on all of those nodes. By default, the value of this property is zero and it
 * means that the services can be placed on any node.
 * @member {array} [applicationCapacity.applicationMetrics] List of application
 * capacity metric description.
 */
export interface ApplicationDescription {
  name: string;
  typeName: string;
  typeVersion: string;
  parameterList?: ApplicationParameter[];
  applicationCapacity?: ApplicationCapacityDescription;
}

/**
 * @class
 * Initializes a new instance of the ComposeDeploymentStatusInfo class.
 * @constructor
 * Information about a Service Fabric compose deployment.
 *
 * @member {string} [name] The name of the deployment.
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {string} [status] The status of the compose deployment. Possible
 * values include: 'Invalid', 'Provisioning', 'Creating', 'Ready',
 * 'Unprovisioning', 'Deleting', 'Failed', 'Upgrading'
 * @member {string} [statusDetails] The status details of compose deployment
 * including failure message.
 */
export interface ComposeDeploymentStatusInfo {
  name?: string;
  applicationName?: string;
  status?: string;
  statusDetails?: string;
}

/**
 * @class
 * Initializes a new instance of the RegistryCredential class.
 * @constructor
 * Credential information to connect to container registry.
 *
 * @member {string} [registryUserName] The user name to connect to container
 * registry.
 * @member {string} [registryPassword] The password for supplied username to
 * connect to container registry.
 * @member {boolean} [passwordEncrypted] Indicates that supplied container
 * registry password is encrypted.
 */
export interface RegistryCredential {
  registryUserName?: string;
  registryPassword?: string;
  passwordEncrypted?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ComposeDeploymentUpgradeDescription class.
 * @constructor
 * Describes the parameters for a compose deployment upgrade.
 *
 * @member {string} deploymentName The name of the deployment.
 * @member {string} composeFileContent The content of the compose file that
 * describes the deployment to create.
 * @member {object} [registryCredential] Credential information to connect to
 * container registry.
 * @member {string} [registryCredential.registryUserName] The user name to
 * connect to container registry.
 * @member {string} [registryCredential.registryPassword] The password for
 * supplied username to connect to container registry.
 * @member {boolean} [registryCredential.passwordEncrypted] Indicates that
 * supplied container registry password is encrypted.
 * @member {string} upgradeKind The kind of upgrade out of the following
 * possible values. Possible values include: 'Invalid', 'Rolling'. Default
 * value: 'Rolling' .
 * @member {string} [rollingUpgradeMode] The mode used to monitor health during
 * a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds] The maximum amount
 * of time to block processing of an upgrade domain and prevent loss of
 * availability when there are unexpected issues. When this timeout expires,
 * processing of the upgrade domain will proceed regardless of availability
 * loss issues. The timeout is reset at the start of each upgrade domain. Valid
 * values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {boolean} [forceRestart] If true, then processes are forcefully
 * restarted during upgrade even when the code version has not changed (the
 * upgrade only changes configuration or data).
 * @member {object} [monitoringPolicy] Describes the parameters for monitoring
 * an upgrade in Monitored mode.
 * @member {string} [monitoringPolicy.failureAction] The compensating action to
 * perform when a Monitored upgrade encounters monitoring policy or health
 * policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds] The amount
 * of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [applicationHealthPolicy] Defines a health policy used to
 * evaluate the health of an application or one of its children entities.
 * @member {boolean} [applicationHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number}
 * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications] The
 * maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 * The maximum allowed percentage of unhealthy partitions per service. Allowed
 * values are Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 * The maximum allowed percentage of unhealthy replicas per partition. Allowed
 * values are Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 * The maximum allowed percentage of unhealthy services. Allowed values are
 * Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 * @member {array} [applicationHealthPolicy.serviceTypeHealthPolicyMap] The map
 * with service type health policy per service type name. The map is empty by
 * default.
 */
export interface ComposeDeploymentUpgradeDescription {
  deploymentName: string;
  composeFileContent: string;
  registryCredential?: RegistryCredential;
  upgradeKind: string;
  rollingUpgradeMode?: string;
  upgradeReplicaSetCheckTimeoutInSeconds?: number;
  forceRestart?: boolean;
  monitoringPolicy?: MonitoringPolicyDescription;
  applicationHealthPolicy?: ApplicationHealthPolicy;
}

/**
 * @class
 * Initializes a new instance of the ComposeDeploymentUpgradeProgressInfo class.
 * @constructor
 * Describes the parameters for a compose deployment upgrade.
 *
 * @member {string} [deploymentName] The name of the target deployment.
 * @member {string} [applicationName] The name of the target application,
 * including the 'fabric:' URI scheme.
 * @member {string} [upgradeState] The state of the compose deployment upgrade.
 * Possible values include: 'Invalid', 'ProvisioningTarget',
 * 'RollingForwardInProgress', 'RollingForwardPending',
 * 'UnprovisioningCurrent', 'RollingForwardCompleted', 'RollingBackInProgress',
 * 'UnprovisioningTarget', 'RollingBackCompleted', 'Failed'
 * @member {string} [upgradeStatusDetails] Additional detailed information
 * about the status of the pending upgrade.
 * @member {string} [upgradeKind] The kind of upgrade out of the following
 * possible values. Possible values include: 'Invalid', 'Rolling'. Default
 * value: 'Rolling' .
 * @member {string} [rollingUpgradeMode] The mode used to monitor health during
 * a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and
 * Monitored. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'. Default value: 'UnmonitoredAuto' .
 * @member {boolean} [forceRestart] If true, then processes are forcefully
 * restarted during upgrade even when the code version has not changed (the
 * upgrade only changes configuration or data).
 * @member {number} [upgradeReplicaSetCheckTimeoutInSeconds] The maximum amount
 * of time to block processing of an upgrade domain and prevent loss of
 * availability when there are unexpected issues. When this timeout expires,
 * processing of the upgrade domain will proceed regardless of availability
 * loss issues. The timeout is reset at the start of each upgrade domain. Valid
 * values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {object} [monitoringPolicy] Describes the parameters for monitoring
 * an upgrade in Monitored mode.
 * @member {string} [monitoringPolicy.failureAction] The compensating action to
 * perform when a Monitored upgrade encounters monitoring policy or health
 * policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [monitoringPolicy.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [monitoringPolicy.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [monitoringPolicy.upgradeTimeoutInMilliseconds] The amount
 * of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string} [monitoringPolicy.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {object} [applicationHealthPolicy] Defines a health policy used to
 * evaluate the health of an application or one of its children entities.
 * @member {boolean} [applicationHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number}
 * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications] The
 * maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 * The maximum allowed percentage of unhealthy partitions per service. Allowed
 * values are Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 * The maximum allowed percentage of unhealthy replicas per partition. Allowed
 * values are Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 * The maximum allowed percentage of unhealthy services. Allowed values are
 * Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 * @member {array} [applicationHealthPolicy.serviceTypeHealthPolicyMap] The map
 * with service type health policy per service type name. The map is empty by
 * default.
 * @member {string} [targetApplicationTypeVersion] The target application type
 * version (found in the application manifest) for the application upgrade.
 * @member {string} [upgradeDuration] The estimated amount of time that the
 * overall upgrade elapsed. It is first interpreted as a string representing an
 * ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [currentUpgradeDomainDuration] The estimated amount of time
 * spent processing current Upgrade Domain. It is first interpreted as a string
 * representing an ISO 8601 duration. If that fails, then it is interpreted as
 * a number representing the total number of milliseconds.
 * @member {array} [applicationUnhealthyEvaluations] List of health evaluations
 * that resulted in the current aggregated health state.
 * @member {object} [currentUpgradeDomainProgress] Information about the
 * current in-progress upgrade domain.
 * @member {string} [currentUpgradeDomainProgress.domainName] The name of the
 * upgrade domain
 * @member {array} [currentUpgradeDomainProgress.nodeUpgradeProgressList] List
 * of upgrading nodes and their statuses
 * @member {string} [startTimestampUtc] The estimated UTC datetime when the
 * upgrade started.
 * @member {string} [failureTimestampUtc] The estimated UTC datetime when the
 * upgrade failed and FailureAction was executed.
 * @member {string} [failureReason] The cause of an upgrade failure that
 * resulted in FailureAction being executed. Possible values include: 'None',
 * 'Interrupted', 'HealthCheck', 'UpgradeDomainTimeout',
 * 'OverallUpgradeTimeout'
 * @member {object} [upgradeDomainProgressAtFailure] Information about the
 * upgrade domain progress at the time of upgrade failure.
 * @member {string} [upgradeDomainProgressAtFailure.domainName] The name of the
 * upgrade domain
 * @member {array} [upgradeDomainProgressAtFailure.nodeUpgradeProgressList]
 * List of upgrading nodes and their statuses
 * @member {string} [applicationUpgradeStatusDetails] Additional details of
 * application upgrade including failure message.
 */
export interface ComposeDeploymentUpgradeProgressInfo {
  deploymentName?: string;
  applicationName?: string;
  upgradeState?: string;
  upgradeStatusDetails?: string;
  upgradeKind?: string;
  rollingUpgradeMode?: string;
  forceRestart?: boolean;
  upgradeReplicaSetCheckTimeoutInSeconds?: number;
  monitoringPolicy?: MonitoringPolicyDescription;
  applicationHealthPolicy?: ApplicationHealthPolicy;
  targetApplicationTypeVersion?: string;
  upgradeDuration?: string;
  currentUpgradeDomainDuration?: string;
  applicationUnhealthyEvaluations?: HealthEvaluationWrapper[];
  currentUpgradeDomainProgress?: CurrentUpgradeDomainProgressInfo;
  startTimestampUtc?: string;
  failureTimestampUtc?: string;
  failureReason?: string;
  upgradeDomainProgressAtFailure?: FailureUpgradeDomainProgressInfo;
  applicationUpgradeStatusDetails?: string;
}

/**
 * @class
 * Initializes a new instance of the PagedComposeDeploymentStatusInfoList class.
 * @constructor
 * The list of compose deployments in the cluster. The list is paged when all
 * of the results cannot fit in a single message. The next set of results can
 * be obtained by executing the same query with the continuation token provided
 * in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of compose deployment status information.
 */
export interface PagedComposeDeploymentStatusInfoList {
  continuationToken?: string;
  items?: ComposeDeploymentStatusInfo[];
}

/**
 * @class
 * Initializes a new instance of the CreateComposeDeploymentDescription class.
 * @constructor
 * Defines description for creating a Service Fabric compose deployment.
 *
 * @member {string} deploymentName The name of the deployment.
 * @member {string} composeFileContent The content of the compose file that
 * describes the deployment to create.
 * @member {object} [registryCredential] Credential information to connect to
 * container registry.
 * @member {string} [registryCredential.registryUserName] The user name to
 * connect to container registry.
 * @member {string} [registryCredential.registryPassword] The password for
 * supplied username to connect to container registry.
 * @member {boolean} [registryCredential.passwordEncrypted] Indicates that
 * supplied container registry password is encrypted.
 */
export interface CreateComposeDeploymentDescription {
  deploymentName: string;
  composeFileContent: string;
  registryCredential?: RegistryCredential;
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageInfo class.
 * @constructor
 * Information about service package deployed on a Service Fabric node.
 *
 * @member {string} [name] The name of the service package as specified in the
 * service manifest.
 * @member {string} [version] The version of the service package specified in
 * service manifest.
 * @member {string} [status] Specifies the status of a deployed application or
 * service package on a Service Fabric node. Possible values include:
 * 'Invalid', 'Downloading', 'Activating', 'Active', 'Upgrading',
 * 'Deactivating'
 * @member {string} [servicePackageActivationId] The ActivationId of a deployed
 * service package. If ServicePackageActivationMode specified at the time of
 * creating the service
 * is 'SharedProcess' (or if it is not specified, in which case it defaults to
 * 'SharedProcess'), then value of ServicePackageActivationId
 * is always an empty string.
 */
export interface DeployedServicePackageInfo {
  name?: string;
  version?: string;
  status?: string;
  servicePackageActivationId?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceCorrelationDescription class.
 * @constructor
 * Creates a particular correlation between services.
 *
 * @member {string} scheme The ServiceCorrelationScheme which describes the
 * relationship between this service and the service specified via ServiceName.
 * Possible values include: 'Invalid', 'Affinity', 'AlignedAffinity',
 * 'NonAlignedAffinity'
 * @member {string} serviceName The name of the service that the correlation
 * relationship is established with.
 */
export interface ServiceCorrelationDescription {
  scheme: string;
  serviceName: string;
}

/**
 * @class
 * Initializes a new instance of the PartitionSchemeDescription class.
 * @constructor
 * Describes how the service is partitioned.
 *
 * @member {string} partitionScheme Polymorphic Discriminator
 */
export interface PartitionSchemeDescription {
  partitionScheme: string;
}

/**
 * @class
 * Initializes a new instance of the NamedPartitionSchemeDescription class.
 * @constructor
 * Describes the named partition scheme of the service.
 *
 * @member {number} count The number of partitions.
 * @member {array} names Array of size specified by the ‘Count’ parameter, for
 * the names of the partitions.
 */
export interface NamedPartitionSchemeDescription extends PartitionSchemeDescription {
  count: number;
  names: string[];
}

/**
 * @class
 * Initializes a new instance of the SingletonPartitionSchemeDescription class.
 * @constructor
 * Describes the partition scheme of a singleton-partitioned, or
 * non-partitioned service.
 *
 */
export interface SingletonPartitionSchemeDescription extends PartitionSchemeDescription {
}

/**
 * @class
 * Initializes a new instance of the UniformInt64RangePartitionSchemeDescription class.
 * @constructor
 * Describes a partitioning scheme where an integer range is allocated evenly
 * across a number of partitions.
 *
 * @member {number} count The number of partitions.
 * @member {string} lowKey String indicating the lower bound of the partition
 * key range that
 * should be split between the partitions.
 * @member {string} highKey String indicating the upper bound of the partition
 * key range that
 * should be split between the partitions.
 */
export interface UniformInt64RangePartitionSchemeDescription extends PartitionSchemeDescription {
  count: number;
  lowKey: string;
  highKey: string;
}

/**
 * @class
 * Initializes a new instance of the ScalingTriggerDescription class.
 * @constructor
 * Describes the trigger for performing a scaling operation.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface ScalingTriggerDescription {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ScalingMechanismDescription class.
 * @constructor
 * Describes the mechanism for performing a scaling operation.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface ScalingMechanismDescription {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ScalingPolicyDescription class.
 * @constructor
 * Describes how the scaling should be performed
 *
 * @member {object} scalingTrigger Specifies the trigger associated with this
 * scaling policy
 * @member {string} [scalingTrigger.kind] Polymorphic Discriminator
 * @member {object} scalingMechanism Specifies the mechanism associated with
 * this scaling policy
 * @member {string} [scalingMechanism.kind] Polymorphic Discriminator
 */
export interface ScalingPolicyDescription {
  scalingTrigger: ScalingTriggerDescription;
  scalingMechanism: ScalingMechanismDescription;
}

/**
 * @class
 * Initializes a new instance of the ServiceDescription class.
 * @constructor
 * A ServiceDescription contains all of the information necessary to create a
 * service.
 *
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 * @member {string} serviceName The full name of the service with 'fabric:' URI
 * scheme.
 * @member {string} serviceTypeName Name of the service type as specified in
 * the service manifest.
 * @member {array} [initializationData] The initialization data as an array of
 * bytes. Initialization data is passed to service instances or replicas when
 * they are created.
 * @member {object} partitionDescription The partition description as an
 * object.
 * @member {string} [partitionDescription.partitionScheme] Polymorphic
 * Discriminator
 * @member {string} [placementConstraints] The placement constraints as a
 * string. Placement constraints are boolean expressions on node properties and
 * allow for restricting a service to particular nodes based on the service
 * requirements. For example, to place a service on nodes where NodeType is
 * blue specify the following: "NodeColor == blue)".
 * @member {array} [correlationScheme] The correlation scheme.
 * @member {array} [serviceLoadMetrics] The service load metrics.
 * @member {array} [servicePlacementPolicies] The service placement policies.
 * @member {string} [defaultMoveCost] The move cost for the service. Possible
 * values include: 'Zero', 'Low', 'Medium', 'High'
 * @member {boolean} [isDefaultMoveCostSpecified] Indicates if the
 * DefaultMoveCost property is specified.
 * @member {string} [servicePackageActivationMode] The activation mode of
 * service package to be used for a service. Possible values include:
 * 'SharedProcess', 'ExclusiveProcess'
 * @member {string} [serviceDnsName] The DNS name of the service. It requires
 * the DNS system service to be enabled in Service Fabric cluster.
 * @member {array} [scalingPolicies] Scaling policies for this service.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface ServiceDescription {
  applicationName?: string;
  serviceName: string;
  serviceTypeName: string;
  initializationData?: number[];
  partitionDescription: PartitionSchemeDescription;
  placementConstraints?: string;
  correlationScheme?: ServiceCorrelationDescription[];
  serviceLoadMetrics?: ServiceLoadMetricDescription[];
  servicePlacementPolicies?: ServicePlacementPolicyDescription[];
  defaultMoveCost?: string;
  isDefaultMoveCostSpecified?: boolean;
  servicePackageActivationMode?: string;
  serviceDnsName?: string;
  scalingPolicies?: ScalingPolicyDescription[];
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the StatefulServiceDescription class.
 * @constructor
 * Describes a stateful service.
 *
 * @member {number} targetReplicaSetSize The target replica set size as a
 * number.
 * @member {number} minReplicaSetSize The minimum replica set size as a number.
 * @member {boolean} hasPersistedState A flag indicating whether this is a
 * persistent service which stores states on the local disk. If it is then the
 * value of this property is true, if not it is false.
 * @member {number} [flags] Flags indicating whether other properties are set.
 * Each of the associated properties corresponds to a flag, specified below,
 * which, if set, indicate that the property is specified.
 * This property can be a combination of those flags obtained using bitwise
 * 'OR' operator.
 * For example, if the provided value is 6 then the flags for
 * QuorumLossWaitDuration (2) and StandByReplicaKeepDuration(4) are set.
 *
 * - None - Does not indicate any other properties are set. The value is zero.
 * - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration
 * property is set. The value is 1.
 * - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is
 * set. The value is 2.
 * - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration
 * property is set. The value is 4.
 * @member {number} [replicaRestartWaitDurationSeconds] The duration, in
 * seconds, between when a replica goes down and when a new replica is created.
 * @member {number} [quorumLossWaitDurationSeconds] The maximum duration, in
 * seconds, for which a partition is allowed to be in a state of quorum loss.
 * @member {number} [standByReplicaKeepDurationSeconds] The definition on how
 * long StandBy replicas should be maintained before being removed.
 */
export interface StatefulServiceDescription extends ServiceDescription {
  targetReplicaSetSize: number;
  minReplicaSetSize: number;
  hasPersistedState: boolean;
  flags?: number;
  replicaRestartWaitDurationSeconds?: number;
  quorumLossWaitDurationSeconds?: number;
  standByReplicaKeepDurationSeconds?: number;
}

/**
 * @class
 * Initializes a new instance of the StatelessServiceDescription class.
 * @constructor
 * Describes a stateless service.
 *
 * @member {number} instanceCount The instance count.
 */
export interface StatelessServiceDescription extends ServiceDescription {
  instanceCount: number;
}

/**
 * @class
 * Initializes a new instance of the ReplicatorQueueStatus class.
 * @constructor
 * Provides various statistics of the queue used in the service fabric
 * replicator.
 * Contains information about the service fabric replicator like the
 * replication/copy queue utilization, last acknowledgement received timestamp,
 * etc.
 * Depending on the role of the replicator, the properties in this type imply
 * different meanings.
 *
 * @member {number} [queueUtilizationPercentage] Represents the utilization of
 * the queue. A value of 0 indicates that the queue is empty and a value of 100
 * indicates the queue is full.
 * @member {string} [queueMemorySize] Represents the virtual memory consumed by
 * the queue in bytes.
 * @member {string} [firstSequenceNumber] On a primary replicator, this is
 * semantically the sequence number of the operation for which all the
 * secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is the smallest sequence number of the
 * operation that is present in the queue.
 * @member {string} [completedSequenceNumber] On a primary replicator, this is
 * semantically the highest sequence number of the operation for which all the
 * secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * that has been applied to the persistent state.
 * @member {string} [committedSequenceNumber] On a primary replicator, this is
 * semantically the highest sequence number of the operation for which a write
 * quorum of the secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * of the in-order operation received from the primary.
 * @member {string} [lastSequenceNumber] Represents the latest sequence number
 * of the operation that is available in the queue.
 */
export interface ReplicatorQueueStatus {
  queueUtilizationPercentage?: number;
  queueMemorySize?: string;
  firstSequenceNumber?: string;
  completedSequenceNumber?: string;
  committedSequenceNumber?: string;
  lastSequenceNumber?: string;
}

/**
 * @class
 * Initializes a new instance of the ReplicatorStatus class.
 * @constructor
 * Represents a base class for primary or secondary replicator status.
 * Contains information about the service fabric replicator like the
 * replication/copy queue utilization, last acknowledgement received timestamp,
 * etc.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface ReplicatorStatus {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the RemoteReplicatorAcknowledgementDetail class.
 * @constructor
 * Provides various statistics of the acknowledgements that are being received
 * from the remote replicator.
 *
 * @member {string} [averageReceiveDuration] Represents the average duration it
 * takes for the remote replicator to receive an operation.
 * @member {string} [averageApplyDuration] Represents the average duration it
 * takes for the remote replicator to apply an operation. This usually entails
 * writing the operation to disk.
 * @member {string} [notReceivedCount] Represents the number of operations not
 * yet received by a remote replicator.
 * @member {string} [receivedAndNotAppliedCount] Represents the number of
 * operations received and not yet applied by a remote replicator.
 */
export interface RemoteReplicatorAcknowledgementDetail {
  averageReceiveDuration?: string;
  averageApplyDuration?: string;
  notReceivedCount?: string;
  receivedAndNotAppliedCount?: string;
}

/**
 * @class
 * Initializes a new instance of the RemoteReplicatorAcknowledgementStatus class.
 * @constructor
 * Provides details about the remote replicators from the primary replicator's
 * point of view.
 *
 * @member {object} [replicationStreamAcknowledgementDetail] Details about the
 * acknowledgements for operations that are part of the replication stream
 * data.
 * @member {string}
 * [replicationStreamAcknowledgementDetail.averageReceiveDuration] Represents
 * the average duration it takes for the remote replicator to receive an
 * operation.
 * @member {string}
 * [replicationStreamAcknowledgementDetail.averageApplyDuration] Represents the
 * average duration it takes for the remote replicator to apply an operation.
 * This usually entails writing the operation to disk.
 * @member {string} [replicationStreamAcknowledgementDetail.notReceivedCount]
 * Represents the number of operations not yet received by a remote replicator.
 * @member {string}
 * [replicationStreamAcknowledgementDetail.receivedAndNotAppliedCount]
 * Represents the number of operations received and not yet applied by a remote
 * replicator.
 * @member {object} [copyStreamAcknowledgementDetail] Details about the
 * acknowledgements for operations that are part of the copy stream data.
 * @member {string} [copyStreamAcknowledgementDetail.averageReceiveDuration]
 * Represents the average duration it takes for the remote replicator to
 * receive an operation.
 * @member {string} [copyStreamAcknowledgementDetail.averageApplyDuration]
 * Represents the average duration it takes for the remote replicator to apply
 * an operation. This usually entails writing the operation to disk.
 * @member {string} [copyStreamAcknowledgementDetail.notReceivedCount]
 * Represents the number of operations not yet received by a remote replicator.
 * @member {string}
 * [copyStreamAcknowledgementDetail.receivedAndNotAppliedCount] Represents the
 * number of operations received and not yet applied by a remote replicator.
 */
export interface RemoteReplicatorAcknowledgementStatus {
  replicationStreamAcknowledgementDetail?: RemoteReplicatorAcknowledgementDetail;
  copyStreamAcknowledgementDetail?: RemoteReplicatorAcknowledgementDetail;
}

/**
 * @class
 * Initializes a new instance of the RemoteReplicatorStatus class.
 * @constructor
 * Represents the state of the secondary replicator from the primary
 * replicator’s point of view.
 *
 * @member {string} [replicaId] Represents the replica ID of the remote
 * secondary replicator.
 * @member {date} [lastAcknowledgementProcessedTimeUtc] The last timestamp (in
 * UTC) when an acknowledgement from the secondary replicator was processed on
 * the primary.
 * UTC 0 represents an invalid value, indicating that no acknowledgement
 * messages were ever processed.
 * @member {string} [lastReceivedReplicationSequenceNumber] The highest
 * replication operation sequence number that the secondary has received from
 * the primary.
 * @member {string} [lastAppliedReplicationSequenceNumber] The highest
 * replication operation sequence number that the secondary has applied to its
 * state.
 * @member {boolean} [isInBuild] A value that indicates whether the secondary
 * replica is in the process of being built.
 * @member {string} [lastReceivedCopySequenceNumber] The highest copy operation
 * sequence number that the secondary has received from the primary.
 * A value of -1 implies that the secondary has received all copy operations.
 * @member {string} [lastAppliedCopySequenceNumber] The highest copy operation
 * sequence number that the secondary has applied to its state.
 * A value of -1 implies that the secondary has applied all copy operations and
 * the copy process is complete.
 * @member {object} [remoteReplicatorAcknowledgementStatus] Represents the
 * acknowledgment status for the remote secondary replicator.
 * @member {object}
 * [remoteReplicatorAcknowledgementStatus.replicationStreamAcknowledgementDetail]
 * Details about the acknowledgements for operations that are part of the
 * replication stream data.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.replicationStreamAcknowledgementDetail.averageReceiveDuration]
 * Represents the average duration it takes for the remote replicator to
 * receive an operation.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.replicationStreamAcknowledgementDetail.averageApplyDuration]
 * Represents the average duration it takes for the remote replicator to apply
 * an operation. This usually entails writing the operation to disk.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.replicationStreamAcknowledgementDetail.notReceivedCount]
 * Represents the number of operations not yet received by a remote replicator.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.replicationStreamAcknowledgementDetail.receivedAndNotAppliedCount]
 * Represents the number of operations received and not yet applied by a remote
 * replicator.
 * @member {object}
 * [remoteReplicatorAcknowledgementStatus.copyStreamAcknowledgementDetail]
 * Details about the acknowledgements for operations that are part of the copy
 * stream data.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.copyStreamAcknowledgementDetail.averageReceiveDuration]
 * Represents the average duration it takes for the remote replicator to
 * receive an operation.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.copyStreamAcknowledgementDetail.averageApplyDuration]
 * Represents the average duration it takes for the remote replicator to apply
 * an operation. This usually entails writing the operation to disk.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.copyStreamAcknowledgementDetail.notReceivedCount]
 * Represents the number of operations not yet received by a remote replicator.
 * @member {string}
 * [remoteReplicatorAcknowledgementStatus.copyStreamAcknowledgementDetail.receivedAndNotAppliedCount]
 * Represents the number of operations received and not yet applied by a remote
 * replicator.
 */
export interface RemoteReplicatorStatus {
  replicaId?: string;
  lastAcknowledgementProcessedTimeUtc?: Date;
  lastReceivedReplicationSequenceNumber?: string;
  lastAppliedReplicationSequenceNumber?: string;
  isInBuild?: boolean;
  lastReceivedCopySequenceNumber?: string;
  lastAppliedCopySequenceNumber?: string;
  remoteReplicatorAcknowledgementStatus?: RemoteReplicatorAcknowledgementStatus;
}

/**
 * @class
 * Initializes a new instance of the PrimaryReplicatorStatus class.
 * @constructor
 * Provides statistics about the Service Fabric Replicator, when it is
 * functioning in a Primary role.
 *
 * @member {object} [replicationQueueStatus] Details about the replication
 * queue on the primary replicator.
 * @member {number} [replicationQueueStatus.queueUtilizationPercentage]
 * Represents the utilization of the queue. A value of 0 indicates that the
 * queue is empty and a value of 100 indicates the queue is full.
 * @member {string} [replicationQueueStatus.queueMemorySize] Represents the
 * virtual memory consumed by the queue in bytes.
 * @member {string} [replicationQueueStatus.firstSequenceNumber] On a primary
 * replicator, this is semantically the sequence number of the operation for
 * which all the secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is the smallest sequence number of the
 * operation that is present in the queue.
 * @member {string} [replicationQueueStatus.completedSequenceNumber] On a
 * primary replicator, this is semantically the highest sequence number of the
 * operation for which all the secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * that has been applied to the persistent state.
 * @member {string} [replicationQueueStatus.committedSequenceNumber] On a
 * primary replicator, this is semantically the highest sequence number of the
 * operation for which a write quorum of the secondary replicas have sent an
 * acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * of the in-order operation received from the primary.
 * @member {string} [replicationQueueStatus.lastSequenceNumber] Represents the
 * latest sequence number of the operation that is available in the queue.
 * @member {array} [remoteReplicators] The status of all the active and idle
 * secondary replicators that the primary is aware of.
 */
export interface PrimaryReplicatorStatus extends ReplicatorStatus {
  replicationQueueStatus?: ReplicatorQueueStatus;
  remoteReplicators?: RemoteReplicatorStatus[];
}

/**
 * @class
 * Initializes a new instance of the SecondaryReplicatorStatus class.
 * @constructor
 * Provides statistics about the Service Fabric Replicator, when it is
 * functioning in a ActiveSecondary role.
 *
 * @member {object} [replicationQueueStatus] Details about the replication
 * queue on the secondary replicator.
 * @member {number} [replicationQueueStatus.queueUtilizationPercentage]
 * Represents the utilization of the queue. A value of 0 indicates that the
 * queue is empty and a value of 100 indicates the queue is full.
 * @member {string} [replicationQueueStatus.queueMemorySize] Represents the
 * virtual memory consumed by the queue in bytes.
 * @member {string} [replicationQueueStatus.firstSequenceNumber] On a primary
 * replicator, this is semantically the sequence number of the operation for
 * which all the secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is the smallest sequence number of the
 * operation that is present in the queue.
 * @member {string} [replicationQueueStatus.completedSequenceNumber] On a
 * primary replicator, this is semantically the highest sequence number of the
 * operation for which all the secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * that has been applied to the persistent state.
 * @member {string} [replicationQueueStatus.committedSequenceNumber] On a
 * primary replicator, this is semantically the highest sequence number of the
 * operation for which a write quorum of the secondary replicas have sent an
 * acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * of the in-order operation received from the primary.
 * @member {string} [replicationQueueStatus.lastSequenceNumber] Represents the
 * latest sequence number of the operation that is available in the queue.
 * @member {date} [lastReplicationOperationReceivedTimeUtc] The last time-stamp
 * (UTC) at which a replication operation was received from the primary.
 * UTC 0 represents an invalid value, indicating that a replication operation
 * message was never received.
 * @member {boolean} [isInBuild] Value that indicates whether the replica is
 * currently being built.
 * @member {object} [copyQueueStatus] Details about the copy queue on the
 * secondary replicator.
 * @member {number} [copyQueueStatus.queueUtilizationPercentage] Represents the
 * utilization of the queue. A value of 0 indicates that the queue is empty and
 * a value of 100 indicates the queue is full.
 * @member {string} [copyQueueStatus.queueMemorySize] Represents the virtual
 * memory consumed by the queue in bytes.
 * @member {string} [copyQueueStatus.firstSequenceNumber] On a primary
 * replicator, this is semantically the sequence number of the operation for
 * which all the secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is the smallest sequence number of the
 * operation that is present in the queue.
 * @member {string} [copyQueueStatus.completedSequenceNumber] On a primary
 * replicator, this is semantically the highest sequence number of the
 * operation for which all the secondary replicas have sent an acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * that has been applied to the persistent state.
 * @member {string} [copyQueueStatus.committedSequenceNumber] On a primary
 * replicator, this is semantically the highest sequence number of the
 * operation for which a write quorum of the secondary replicas have sent an
 * acknowledgement.
 * On a secondary replicator, this is semantically the highest sequence number
 * of the in-order operation received from the primary.
 * @member {string} [copyQueueStatus.lastSequenceNumber] Represents the latest
 * sequence number of the operation that is available in the queue.
 * @member {date} [lastCopyOperationReceivedTimeUtc] The last time-stamp (UTC)
 * at which a copy operation was received from the primary.
 * UTC 0 represents an invalid value, indicating that a copy operation message
 * was never received.
 * @member {date} [lastAcknowledgementSentTimeUtc] The last time-stamp (UTC) at
 * which an acknowledgment was sent to the primary replicator.
 * UTC 0 represents an invalid value, indicating that an acknowledgment message
 * was never sent.
 */
export interface SecondaryReplicatorStatus extends ReplicatorStatus {
  replicationQueueStatus?: ReplicatorQueueStatus;
  lastReplicationOperationReceivedTimeUtc?: Date;
  isInBuild?: boolean;
  copyQueueStatus?: ReplicatorQueueStatus;
  lastCopyOperationReceivedTimeUtc?: Date;
  lastAcknowledgementSentTimeUtc?: Date;
}

/**
 * @class
 * Initializes a new instance of the SecondaryActiveReplicatorStatus class.
 * @constructor
 * Status of the secondary replicator when it is in active mode and is part of
 * the replica set.
 *
 */
export interface SecondaryActiveReplicatorStatus extends SecondaryReplicatorStatus {
}

/**
 * @class
 * Initializes a new instance of the SecondaryIdleReplicatorStatus class.
 * @constructor
 * Status of the secondary replicator when it is in idle mode and is being
 * built by the primary.
 *
 */
export interface SecondaryIdleReplicatorStatus extends SecondaryReplicatorStatus {
}

/**
 * @class
 * Initializes a new instance of the LoadMetricReportInfo class.
 * @constructor
 * Information about load reported by replica.
 *
 * @member {string} [name] The name of the metric.
 * @member {number} [value] The value of the load for the metric. In future
 * releases of Service Fabric this parameter will be deprecated in favor of
 * CurrentValue.
 * @member {string} [currentValue] The double value of the load for the metric.
 * @member {date} [lastReportedUtc] The UTC time when the load is reported.
 */
export interface LoadMetricReportInfo {
  name?: string;
  value?: number;
  currentValue?: string;
  lastReportedUtc?: Date;
}

/**
 * @class
 * Initializes a new instance of the DeployedServiceReplicaDetailInfo class.
 * @constructor
 * Information about a Service Fabric service replica deployed on a node.
 *
 * @member {string} [serviceName] Full hierarchical name of the service in URI
 * format starting with `fabric:`.
 * @member {uuid} [partitionId] An internal ID used by Service Fabric to
 * uniquely identify a partition. This is a randomly generated GUID when the
 * service was created. The partition ID is unique and does not change for the
 * lifetime of the service. If the same service was deleted and recreated the
 * IDs of its partitions would be different.
 * @member {string} [currentServiceOperation] Specifies the current active
 * life-cycle operation on a stateful service replica or stateless service
 * instance. Possible values include: 'Unknown', 'None', 'Open', 'ChangeRole',
 * 'Close', 'Abort'
 * @member {date} [currentServiceOperationStartTimeUtc] The start time of the
 * current service operation in UTC format.
 * @member {array} [reportedLoad] List of load reported by replica.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface DeployedServiceReplicaDetailInfo {
  serviceName?: string;
  partitionId?: string;
  currentServiceOperation?: string;
  currentServiceOperationStartTimeUtc?: Date;
  reportedLoad?: LoadMetricReportInfo[];
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the ReplicaStatusBase class.
 * @constructor
 * Information about the replica.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface ReplicaStatusBase {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the KeyValueStoreReplicaStatus class.
 * @constructor
 * Key value store related information for the replica.
 *
 * @member {string} [databaseRowCountEstimate] Value indicating the estimated
 * number of rows in the underlying database.
 * @member {string} [databaseLogicalSizeEstimate] Value indicating the
 * estimated size of the underlying database.
 * @member {string} [copyNotificationCurrentKeyFilter] Value indicating the
 * latest key-prefix filter applied to enumeration during the callback. Null if
 * there is no pending callback.
 * @member {string} [copyNotificationCurrentProgress] Value indicating the
 * latest number of keys enumerated during the callback. 0 if there is no
 * pending callback.
 * @member {string} [statusDetails] Value indicating the current status details
 * of the replica.
 */
export interface KeyValueStoreReplicaStatus extends ReplicaStatusBase {
  databaseRowCountEstimate?: string;
  databaseLogicalSizeEstimate?: string;
  copyNotificationCurrentKeyFilter?: string;
  copyNotificationCurrentProgress?: string;
  statusDetails?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedStatefulServiceReplicaDetailInfo class.
 * @constructor
 * Information about a stateful replica running in a code package. Note
 * DeployedServiceReplicaQueryResult will contain duplicate data like
 * ServiceKind, ServiceName, PartitionId and replicaId.
 *
 * @member {string} [replicaId] Id of a stateful service replica. ReplicaId is
 * used by Service Fabric to uniquely identify a replica of a partition. It is
 * unique within a partition and does not change for the lifetime of the
 * replica. If a replica gets dropped and another replica gets created on the
 * same node for the same partition, it will get a different value for the id.
 * Sometimes the id of a stateless service instance is also referred as a
 * replica id.
 * @member {string} [currentReplicatorOperation] Specifies the operation
 * currently being executed by the Replicator. Possible values include:
 * 'Invalid', 'None', 'Open', 'ChangeRole', 'UpdateEpoch', 'Close', 'Abort',
 * 'OnDataLoss', 'WaitForCatchup', 'Build'
 * @member {string} [readStatus] Specifies the access status of the partition.
 * Possible values include: 'Invalid', 'Granted', 'ReconfigurationPending',
 * 'NotPrimary', 'NoWriteQuorum'
 * @member {string} [writeStatus] Specifies the access status of the partition.
 * Possible values include: 'Invalid', 'Granted', 'ReconfigurationPending',
 * 'NotPrimary', 'NoWriteQuorum'
 * @member {object} [replicatorStatus] Represents a base class for primary or
 * secondary replicator status.
 * Contains information about the service fabric replicator like the
 * replication/copy queue utilization, last acknowledgement received timestamp,
 * etc.
 * @member {string} [replicatorStatus.kind] Polymorphic Discriminator
 * @member {object} [replicaStatus] Key value store related information for the
 * replica.
 * @member {string} [replicaStatus.databaseRowCountEstimate] Value indicating
 * the estimated number of rows in the underlying database.
 * @member {string} [replicaStatus.databaseLogicalSizeEstimate] Value
 * indicating the estimated size of the underlying database.
 * @member {string} [replicaStatus.copyNotificationCurrentKeyFilter] Value
 * indicating the latest key-prefix filter applied to enumeration during the
 * callback. Null if there is no pending callback.
 * @member {string} [replicaStatus.copyNotificationCurrentProgress] Value
 * indicating the latest number of keys enumerated during the callback. 0 if
 * there is no pending callback.
 * @member {string} [replicaStatus.statusDetails] Value indicating the current
 * status details of the replica.
 * @member {object} [deployedServiceReplicaQueryResult] Information about a
 * stateful service replica deployed on a node.
 * @member {string} [deployedServiceReplicaQueryResult.replicaId] Id of a
 * stateful service replica. ReplicaId is used by Service Fabric to uniquely
 * identify a replica of a partition. It is unique within a partition and does
 * not change for the lifetime of the replica. If a replica gets dropped and
 * another replica gets created on the same node for the same partition, it
 * will get a different value for the id. Sometimes the id of a stateless
 * service instance is also referred as a replica id.
 * @member {string} [deployedServiceReplicaQueryResult.replicaRole] The role of
 * a replica of a stateful service. Possible values include: 'Unknown', 'None',
 * 'Primary', 'IdleSecondary', 'ActiveSecondary'
 * @member {object}
 * [deployedServiceReplicaQueryResult.reconfigurationInformation] Information
 * about current reconfiguration like phase, type, previous configuration role
 * of replica and reconfiguration start date time.
 * @member {string}
 * [deployedServiceReplicaQueryResult.reconfigurationInformation.previousConfigurationRole]
 * Replica role before reconfiguration started. Possible values include:
 * 'Unknown', 'None', 'Primary', 'IdleSecondary', 'ActiveSecondary'
 * @member {string}
 * [deployedServiceReplicaQueryResult.reconfigurationInformation.reconfigurationPhase]
 * Current phase of ongoing reconfiguration. If no reconfiguration is taking
 * place then this value will be "None". Possible values include: 'Unknown',
 * 'None', 'Phase0', 'Phase1', 'Phase2', 'Phase3', 'Phase4', 'AbortPhaseZero'
 * @member {string}
 * [deployedServiceReplicaQueryResult.reconfigurationInformation.reconfigurationType]
 * Type of current ongoing reconfiguration. If no reconfiguration is taking
 * place then this value will be "None". Possible values include: 'Unknown',
 * 'SwapPrimary', 'Failover', 'Other'
 * @member {date}
 * [deployedServiceReplicaQueryResult.reconfigurationInformation.reconfigurationStartTimeUtc]
 * Start time (in UTC) of the ongoing reconfiguration. If no reconfiguration is
 * taking place then this value will be zero date-time.
 */
export interface DeployedStatefulServiceReplicaDetailInfo extends DeployedServiceReplicaDetailInfo {
  replicaId?: string;
  currentReplicatorOperation?: string;
  readStatus?: string;
  writeStatus?: string;
  replicatorStatus?: ReplicatorStatus;
  replicaStatus?: KeyValueStoreReplicaStatus;
  deployedServiceReplicaQueryResult?: DeployedStatefulServiceReplicaInfo;
}

/**
 * @class
 * Initializes a new instance of the DeployedStatelessServiceInstanceDetailInfo class.
 * @constructor
 * Information about a stateless instance running in a code package. Note that
 * DeployedServiceReplicaQueryResult will contain duplicate data like
 * ServiceKind, ServiceName, PartitionId and InstanceId.
 *
 * @member {string} [instanceId] Id of a stateless service instance. InstanceId
 * is used by Service Fabric to uniquely identify an instance of a partition of
 * a stateless service. It is unique within a partition and does not change for
 * the lifetime of the instance. If the instance has failed over on the same or
 * different node, it will get a different value for the InstanceId.
 * @member {object} [deployedServiceReplicaQueryResult] Information about a
 * stateless service instance deployed on a node.
 * @member {string} [deployedServiceReplicaQueryResult.instanceId] Id of a
 * stateless service instance. InstanceId is used by Service Fabric to uniquely
 * identify an instance of a partition of a stateless service. It is unique
 * within a partition and does not change for the lifetime of the instance. If
 * the instance has failed over on the same or different node, it will get a
 * different value for the InstanceId.
 */
export interface DeployedStatelessServiceInstanceDetailInfo extends DeployedServiceReplicaDetailInfo {
  instanceId?: string;
  deployedServiceReplicaQueryResult?: DeployedStatelessServiceInstanceInfo;
}

/**
 * @class
 * Initializes a new instance of the ServiceUpdateDescription class.
 * @constructor
 * A ServiceUpdateDescription contains all of the information necessary to
 * update a service.
 *
 * @member {string} [flags] Flags indicating whether other properties are set.
 * Each of the associated properties corresponds to a flag, specified below,
 * which, if set, indicate that the property is specified.
 * This property can be a combination of those flags obtained using bitwise
 * 'OR' operator.
 * For example, if the provided value is 6 then the flags for
 * ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.
 *
 * - None - Does not indicate any other properties are set. The value is zero.
 * - TargetReplicaSetSize/InstanceCount - Indicates whether the
 * TargetReplicaSetSize property (for Stateful services) or the InstanceCount
 * property (for Stateless services) is set. The value is 1.
 * - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration
 * property is set. The value is  2.
 * - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is
 * set. The value is 4.
 * - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration
 * property is set. The value is 8.
 * - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The
 * value is 16.
 * - PlacementConstraints - Indicates the PlacementConstraints property is set.
 * The value is 32.
 * - PlacementPolicyList - Indicates the ServicePlacementPolicies property is
 * set. The value is 64.
 * - Correlation - Indicates the CorrelationScheme property is set. The value
 * is 128.
 * - Metrics - Indicates the ServiceLoadMetrics property is set. The value is
 * 256.
 * - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value
 * is 512.
 * - ScalingPolicy - Indicates the ScalingPolicies property is set. The value
 * is 1024.
 * @member {string} [placementConstraints] The placement constraints as a
 * string. Placement constraints are boolean expressions on node properties and
 * allow for restricting a service to particular nodes based on the service
 * requirements. For example, to place a service on nodes where NodeType is
 * blue specify the following: "NodeColor == blue)".
 * @member {array} [correlationScheme] The correlation scheme.
 * @member {array} [loadMetrics] The service load metrics.
 * @member {array} [servicePlacementPolicies] The service placement policies.
 * @member {string} [defaultMoveCost] The move cost for the service. Possible
 * values include: 'Zero', 'Low', 'Medium', 'High'
 * @member {array} [scalingPolicies] Scaling policies for this service.
 * @member {string} serviceKind Polymorphic Discriminator
 */
export interface ServiceUpdateDescription {
  flags?: string;
  placementConstraints?: string;
  correlationScheme?: ServiceCorrelationDescription[];
  loadMetrics?: ServiceLoadMetricDescription[];
  servicePlacementPolicies?: ServicePlacementPolicyDescription[];
  defaultMoveCost?: string;
  scalingPolicies?: ScalingPolicyDescription[];
  serviceKind: string;
}

/**
 * @class
 * Initializes a new instance of the StatefulServiceUpdateDescription class.
 * @constructor
 * Describes an update for a stateful service.
 *
 * @member {number} [targetReplicaSetSize] The target replica set size as a
 * number.
 * @member {number} [minReplicaSetSize] The minimum replica set size as a
 * number.
 * @member {string} [replicaRestartWaitDurationSeconds] The duration, in
 * seconds, between when a replica goes down and when a new replica is created.
 * @member {string} [quorumLossWaitDurationSeconds] The maximum duration, in
 * seconds, for which a partition is allowed to be in a state of quorum loss.
 * @member {string} [standByReplicaKeepDurationSeconds] The definition on how
 * long StandBy replicas should be maintained before being removed.
 */
export interface StatefulServiceUpdateDescription extends ServiceUpdateDescription {
  targetReplicaSetSize?: number;
  minReplicaSetSize?: number;
  replicaRestartWaitDurationSeconds?: string;
  quorumLossWaitDurationSeconds?: string;
  standByReplicaKeepDurationSeconds?: string;
}

/**
 * @class
 * Initializes a new instance of the StatelessServiceUpdateDescription class.
 * @constructor
 * Describes an update for a stateless service.
 *
 * @member {number} [instanceCount] The instance count.
 */
export interface StatelessServiceUpdateDescription extends ServiceUpdateDescription {
  instanceCount?: number;
}

/**
 * @class
 * Initializes a new instance of the FileVersion class.
 * @constructor
 * Information about the version of image store file.
 *
 * @member {string} [versionNumber] The current image store version number for
 * the file is used in image store for checking whether it need to be updated.
 * @member {string} [epochDataLossNumber] The epoch data loss number of image
 * store replica when this file entry was updated or created.
 * @member {string} [epochConfigurationNumber] The epoch configuration version
 * number of the image store replica when this file entry was created or
 * updated.
 */
export interface FileVersion {
  versionNumber?: string;
  epochDataLossNumber?: string;
  epochConfigurationNumber?: string;
}

/**
 * @class
 * Initializes a new instance of the FileInfo class.
 * @constructor
 * Information about a image store file.
 *
 * @member {string} [fileSize] The size of file in bytes.
 * @member {object} [fileVersion] Information about the version of image store
 * file.
 * @member {string} [fileVersion.versionNumber] The current image store version
 * number for the file is used in image store for checking whether it need to
 * be updated.
 * @member {string} [fileVersion.epochDataLossNumber] The epoch data loss
 * number of image store replica when this file entry was updated or created.
 * @member {string} [fileVersion.epochConfigurationNumber] The epoch
 * configuration version number of the image store replica when this file entry
 * was created or updated.
 * @member {date} [modifiedDate] The date and time when the image store file
 * was last modified.
 * @member {string} [storeRelativePath] The file path relative to the image
 * store root path.
 */
export interface FileInfo {
  fileSize?: string;
  fileVersion?: FileVersion;
  modifiedDate?: Date;
  storeRelativePath?: string;
}

/**
 * @class
 * Initializes a new instance of the FolderInfo class.
 * @constructor
 * Information about a image store folder. It includes how many files this
 * folder contains and its image store relative path.
 *
 * @member {string} [storeRelativePath] The remote location within image store.
 * This path is relative to the image store root.
 * @member {string} [fileCount] The number of files from within the image store
 * folder.
 */
export interface FolderInfo {
  storeRelativePath?: string;
  fileCount?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageStoreContent class.
 * @constructor
 * Information about the image store content.
 *
 * @member {array} [storeFiles] The list of image store file info objects
 * represents files found under the given image store relative path.
 * @member {array} [storeFolders] The list of image store folder info objects
 * represents subfolders found under the given image store relative path.
 */
export interface ImageStoreContent {
  storeFiles?: FileInfo[];
  storeFolders?: FolderInfo[];
}

/**
 * @class
 * Initializes a new instance of the ImageStoreCopyDescription class.
 * @constructor
 * Information about how to copy image store content from one image store
 * relative path to another image store relative path.
 *
 * @member {string} remoteSource The relative path of source image store
 * content to be copied from.
 * @member {string} remoteDestination The relative path of destination image
 * store content to be copied to.
 * @member {array} [skipFiles] The list of the file names to be skipped for
 * copying.
 * @member {boolean} [checkMarkFile] Indicates whether to check mark file
 * during copying. The property is true if checking mark file is required,
 * false otherwise. The mark file is used to check whether the folder is well
 * constructed. If the property is true and mark file does not exist, the copy
 * is skipped.
 */
export interface ImageStoreCopyDescription {
  remoteSource: string;
  remoteDestination: string;
  skipFiles?: string[];
  checkMarkFile?: boolean;
}

/**
 * @class
 * Initializes a new instance of the RestartDeployedCodePackageDescription class.
 * @constructor
 * Defines description for restarting a deployed code package on Service Fabric
 * node.
 *
 * @member {string} serviceManifestName The name of service manifest that
 * specified this code package.
 * @member {string} [servicePackageActivationId] The ActivationId of a deployed
 * service package. If ServicePackageActivationMode specified at the time of
 * creating the service
 * is 'SharedProcess' (or if it is not specified, in which case it defaults to
 * 'SharedProcess'), then value of ServicePackageActivationId
 * is always an empty string.
 * @member {string} codePackageName The name of the code package defined in the
 * service manifest.
 * @member {string} codePackageInstanceId The instance ID for currently running
 * entry point. For a code package setup entry point (if specified) runs first
 * and after it finishes main entry point is started.
 * Each time entry point executable is run, its instance ID will change. If 0
 * is passed in as the code package instance ID, the API will restart the code
 * package with whatever instance ID it is currently running.
 * If an instance ID other than 0 is passed in, the API will restart the code
 * package only if the current Instance ID matches the passed in instance ID.
 * Note, passing in the exact instance ID (not 0) in the API is safer, because
 * if ensures at most one restart of the code package.
 */
export interface RestartDeployedCodePackageDescription {
  serviceManifestName: string;
  servicePackageActivationId?: string;
  codePackageName: string;
  codePackageInstanceId: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedServiceTypeInfo class.
 * @constructor
 * Information about service type deployed on a node, information such as the
 * status of the service type registration on a node.
 *
 * @member {string} [serviceTypeName] Name of the service type as specified in
 * the service manifest.
 * @member {string} [serviceManifestName] The name of the service manifest in
 * which this service type is defined.
 * @member {string} [codePackageName] The name of the code package that
 * registered the service type.
 * @member {string} [status] The status of the service type registration on the
 * node. Possible values include: 'Invalid', 'Disabled', 'Enabled',
 * 'Registered'
 * @member {string} [servicePackageActivationId] The ActivationId of a deployed
 * service package. If ServicePackageActivationMode specified at the time of
 * creating the service
 * is 'SharedProcess' (or if it is not specified, in which case it defaults to
 * 'SharedProcess'), then value of ServicePackageActivationId
 * is always an empty string.
 */
export interface DeployedServiceTypeInfo {
  serviceTypeName?: string;
  serviceManifestName?: string;
  codePackageName?: string;
  status?: string;
  servicePackageActivationId?: string;
}

/**
 * @class
 * Initializes a new instance of the ResolvedServiceEndpoint class.
 * @constructor
 * Endpoint of a resolved service partition.
 *
 * @member {string} [kind] The role of the replica where the endpoint is
 * reported. Possible values include: 'Invalid', 'Stateless',
 * 'StatefulPrimary', 'StatefulSecondary'
 * @member {string} [address] The address of the endpoint. If the endpoint has
 * multiple listeners the address is a JSON object with one property per
 * listener with the value as the address of that listener.
 */
export interface ResolvedServiceEndpoint {
  kind?: string;
  address?: string;
}

/**
 * @class
 * Initializes a new instance of the ResolvedServicePartition class.
 * @constructor
 * Information about a service partition and its associated endpoints.
 *
 * @member {string} name The full name of the service with 'fabric:' URI
 * scheme.
 * @member {object} partitionInformation A representation of the resolved
 * partition.
 * @member {uuid} [partitionInformation.id] An internal ID used by Service
 * Fabric to uniquely identify a partition. This is a randomly generated GUID
 * when the service was created. The partition ID is unique and does not change
 * for the lifetime of the service. If the same service was deleted and
 * recreated the IDs of its partitions would be different.
 * @member {string} [partitionInformation.servicePartitionKind] Polymorphic
 * Discriminator
 * @member {array} endpoints List of resolved service endpoints of a service
 * partition.
 * @member {string} version The version of this resolved service partition
 * result. This version should be passed in the next time the ResolveService
 * call is made via the PreviousRspVersion query parameter.
 */
export interface ResolvedServicePartition {
  name: string;
  partitionInformation: PartitionInformation;
  endpoints: ResolvedServiceEndpoint[];
  version: string;
}

/**
 * @class
 * Initializes a new instance of the SelectedPartition class.
 * @constructor
 * This class returns information about the partition that the user-induced
 * operation acted upon.
 *
 * @member {string} [serviceName] The name of the service the partition belongs
 * to.
 * @member {uuid} [partitionId] An internal ID used by Service Fabric to
 * uniquely identify a partition. This is a randomly generated GUID when the
 * service was created. The partition ID is unique and does not change for the
 * lifetime of the service. If the same service was deleted and recreated the
 * IDs of its partitions would be different.
 */
export interface SelectedPartition {
  serviceName?: string;
  partitionId?: string;
}

/**
 * @class
 * Initializes a new instance of the InvokeDataLossResult class.
 * @constructor
 * Represents information about an operation in a terminal state (Completed or
 * Faulted).
 *
 * @member {number} [errorCode] If OperationState is Completed, this is 0.  If
 * OperationState is Faulted, this is an error code indicating the reason.
 * @member {object} [selectedPartition] This class returns information about
 * the partition that the user-induced operation acted upon.
 * @member {string} [selectedPartition.serviceName] The name of the service the
 * partition belongs to.
 * @member {uuid} [selectedPartition.partitionId] An internal ID used by
 * Service Fabric to uniquely identify a partition. This is a randomly
 * generated GUID when the service was created. The partition ID is unique and
 * does not change for the lifetime of the service. If the same service was
 * deleted and recreated the IDs of its partitions would be different.
 */
export interface InvokeDataLossResult {
  errorCode?: number;
  selectedPartition?: SelectedPartition;
}

/**
 * @class
 * Initializes a new instance of the InvokeQuorumLossResult class.
 * @constructor
 * Represents information about an operation in a terminal state (Completed or
 * Faulted).
 *
 * @member {number} [errorCode] If OperationState is Completed, this is 0.  If
 * OperationState is Faulted, this is an error code indicating the reason.
 * @member {object} [selectedPartition] This class returns information about
 * the partition that the user-induced operation acted upon.
 * @member {string} [selectedPartition.serviceName] The name of the service the
 * partition belongs to.
 * @member {uuid} [selectedPartition.partitionId] An internal ID used by
 * Service Fabric to uniquely identify a partition. This is a randomly
 * generated GUID when the service was created. The partition ID is unique and
 * does not change for the lifetime of the service. If the same service was
 * deleted and recreated the IDs of its partitions would be different.
 */
export interface InvokeQuorumLossResult {
  errorCode?: number;
  selectedPartition?: SelectedPartition;
}

/**
 * @class
 * Initializes a new instance of the NodeResult class.
 * @constructor
 * Contains information about a node that was targeted by a user-induced
 * operation.
 *
 * @member {string} [nodeName] The name of a Service Fabric node.
 * @member {string} [nodeInstanceId] The node instance id.
 */
export interface NodeResult {
  nodeName?: string;
  nodeInstanceId?: string;
}

/**
 * @class
 * Initializes a new instance of the NodeTransitionResult class.
 * @constructor
 * Represents information about an operation in a terminal state (Completed or
 * Faulted).
 *
 * @member {number} [errorCode] If OperationState is Completed, this is 0.  If
 * OperationState is Faulted, this is an error code indicating the reason.
 * @member {object} [nodeResult] Contains information about a node that was
 * targeted by a user-induced operation.
 * @member {string} [nodeResult.nodeName] The name of a Service Fabric node.
 * @member {string} [nodeResult.nodeInstanceId] The node instance id.
 */
export interface NodeTransitionResult {
  errorCode?: number;
  nodeResult?: NodeResult;
}

/**
 * @class
 * Initializes a new instance of the NodeTransitionProgress class.
 * @constructor
 * Information about an NodeTransition operation.  This class contains an
 * OperationState and a NodeTransitionResult.  The NodeTransitionResult is not
 * valid until OperationState
 * is Completed or Faulted.
 *
 * @member {string} [state] The state of the operation. Possible values
 * include: 'Invalid', 'Running', 'RollingBack', 'Completed', 'Faulted',
 * 'Cancelled', 'ForceCancelled'
 * @member {object} [nodeTransitionResult] Represents information about an
 * operation in a terminal state (Completed or Faulted).
 * @member {number} [nodeTransitionResult.errorCode] If OperationState is
 * Completed, this is 0.  If OperationState is Faulted, this is an error code
 * indicating the reason.
 * @member {object} [nodeTransitionResult.nodeResult] Contains information
 * about a node that was targeted by a user-induced operation.
 * @member {string} [nodeTransitionResult.nodeResult.nodeName] The name of a
 * Service Fabric node.
 * @member {string} [nodeTransitionResult.nodeResult.nodeInstanceId] The node
 * instance id.
 */
export interface NodeTransitionProgress {
  state?: string;
  nodeTransitionResult?: NodeTransitionResult;
}

/**
 * @class
 * Initializes a new instance of the OperationStatus class.
 * @constructor
 * Contains the OperationId, OperationState, and OperationType for user-induced
 * operations.
 *
 * @member {uuid} [operationId] A GUID that identifies a call to this API.
 * This is also passed into the corresponding GetProgress API.
 * @member {string} [state] The state of the operation. Possible values
 * include: 'Invalid', 'Running', 'RollingBack', 'Completed', 'Faulted',
 * 'Cancelled', 'ForceCancelled'
 * @member {string} [type] The type of the operation. Possible values include:
 * 'Invalid', 'PartitionDataLoss', 'PartitionQuorumLoss', 'PartitionRestart',
 * 'NodeTransition'
 */
export interface OperationStatus {
  operationId?: string;
  state?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the PartitionDataLossProgress class.
 * @constructor
 * Information about a partition data loss user-induced operation.
 *
 * @member {string} [state] The state of the operation. Possible values
 * include: 'Invalid', 'Running', 'RollingBack', 'Completed', 'Faulted',
 * 'Cancelled', 'ForceCancelled'
 * @member {object} [invokeDataLossResult] Represents information about an
 * operation in a terminal state (Completed or Faulted).
 * @member {number} [invokeDataLossResult.errorCode] If OperationState is
 * Completed, this is 0.  If OperationState is Faulted, this is an error code
 * indicating the reason.
 * @member {object} [invokeDataLossResult.selectedPartition] This class returns
 * information about the partition that the user-induced operation acted upon.
 * @member {string} [invokeDataLossResult.selectedPartition.serviceName] The
 * name of the service the partition belongs to.
 * @member {uuid} [invokeDataLossResult.selectedPartition.partitionId] An
 * internal ID used by Service Fabric to uniquely identify a partition. This is
 * a randomly generated GUID when the service was created. The partition ID is
 * unique and does not change for the lifetime of the service. If the same
 * service was deleted and recreated the IDs of its partitions would be
 * different.
 */
export interface PartitionDataLossProgress {
  state?: string;
  invokeDataLossResult?: InvokeDataLossResult;
}

/**
 * @class
 * Initializes a new instance of the PartitionQuorumLossProgress class.
 * @constructor
 * Information about a partition quorum loss user-induced operation.
 *
 * @member {string} [state] The state of the operation. Possible values
 * include: 'Invalid', 'Running', 'RollingBack', 'Completed', 'Faulted',
 * 'Cancelled', 'ForceCancelled'
 * @member {object} [invokeQuorumLossResult] Represents information about an
 * operation in a terminal state (Completed or Faulted).
 * @member {number} [invokeQuorumLossResult.errorCode] If OperationState is
 * Completed, this is 0.  If OperationState is Faulted, this is an error code
 * indicating the reason.
 * @member {object} [invokeQuorumLossResult.selectedPartition] This class
 * returns information about the partition that the user-induced operation
 * acted upon.
 * @member {string} [invokeQuorumLossResult.selectedPartition.serviceName] The
 * name of the service the partition belongs to.
 * @member {uuid} [invokeQuorumLossResult.selectedPartition.partitionId] An
 * internal ID used by Service Fabric to uniquely identify a partition. This is
 * a randomly generated GUID when the service was created. The partition ID is
 * unique and does not change for the lifetime of the service. If the same
 * service was deleted and recreated the IDs of its partitions would be
 * different.
 */
export interface PartitionQuorumLossProgress {
  state?: string;
  invokeQuorumLossResult?: InvokeQuorumLossResult;
}

/**
 * @class
 * Initializes a new instance of the RestartPartitionResult class.
 * @constructor
 * Represents information about an operation in a terminal state (Completed or
 * Faulted).
 *
 * @member {number} [errorCode] If OperationState is Completed, this is 0.  If
 * OperationState is Faulted, this is an error code indicating the reason.
 * @member {object} [selectedPartition] This class returns information about
 * the partition that the user-induced operation acted upon.
 * @member {string} [selectedPartition.serviceName] The name of the service the
 * partition belongs to.
 * @member {uuid} [selectedPartition.partitionId] An internal ID used by
 * Service Fabric to uniquely identify a partition. This is a randomly
 * generated GUID when the service was created. The partition ID is unique and
 * does not change for the lifetime of the service. If the same service was
 * deleted and recreated the IDs of its partitions would be different.
 */
export interface RestartPartitionResult {
  errorCode?: number;
  selectedPartition?: SelectedPartition;
}

/**
 * @class
 * Initializes a new instance of the PartitionRestartProgress class.
 * @constructor
 * Information about a partition restart user-induced operation.
 *
 * @member {string} [state] The state of the operation. Possible values
 * include: 'Invalid', 'Running', 'RollingBack', 'Completed', 'Faulted',
 * 'Cancelled', 'ForceCancelled'
 * @member {object} [restartPartitionResult] Represents information about an
 * operation in a terminal state (Completed or Faulted).
 * @member {number} [restartPartitionResult.errorCode] If OperationState is
 * Completed, this is 0.  If OperationState is Faulted, this is an error code
 * indicating the reason.
 * @member {object} [restartPartitionResult.selectedPartition] This class
 * returns information about the partition that the user-induced operation
 * acted upon.
 * @member {string} [restartPartitionResult.selectedPartition.serviceName] The
 * name of the service the partition belongs to.
 * @member {uuid} [restartPartitionResult.selectedPartition.partitionId] An
 * internal ID used by Service Fabric to uniquely identify a partition. This is
 * a randomly generated GUID when the service was created. The partition ID is
 * unique and does not change for the lifetime of the service. If the same
 * service was deleted and recreated the IDs of its partitions would be
 * different.
 */
export interface PartitionRestartProgress {
  state?: string;
  restartPartitionResult?: RestartPartitionResult;
}

/**
 * @class
 * Initializes a new instance of the PackageSharingPolicyInfo class.
 * @constructor
 * Represents a policy for the package sharing.
 *
 * @member {string} [sharedPackageName] The name of code, configuration or data
 * package that should be shared.
 * @member {string} [packageSharingScope] Represents the scope for
 * PackageSharingPolicy. This is specified during DeployServicePackageToNode
 * operation. Possible values include: 'None', 'All', 'Code', 'Config', 'Data'
 */
export interface PackageSharingPolicyInfo {
  sharedPackageName?: string;
  packageSharingScope?: string;
}

/**
 * @class
 * Initializes a new instance of the DeployServicePackageToNodeDescription class.
 * @constructor
 * Defines description for downloading packages associated with a service
 * manifest to image cache on a Service Fabric node.
 *
 * @member {string} serviceManifestName The name of service manifest whose
 * packages need to be downloaded.
 * @member {string} applicationTypeName The application type name as defined in
 * the application manifest.
 * @member {string} applicationTypeVersion The version of the application type
 * as defined in the application manifest.
 * @member {string} nodeName The name of a Service Fabric node.
 * @member {array} [packageSharingPolicy] List of package sharing policy
 * information.
 */
export interface DeployServicePackageToNodeDescription {
  serviceManifestName: string;
  applicationTypeName: string;
  applicationTypeVersion: string;
  nodeName: string;
  packageSharingPolicy?: PackageSharingPolicyInfo[];
}

/**
 * @class
 * Initializes a new instance of the ResumeApplicationUpgradeDescription class.
 * @constructor
 * Describes the parameters for resuming an unmonitored manual Service Fabric
 * application upgrade
 *
 * @member {string} upgradeDomainName The name of the upgrade domain in which
 * to resume the upgrade.
 */
export interface ResumeApplicationUpgradeDescription {
  upgradeDomainName: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeUpdateDescription class.
 * @constructor
 * Describes the parameters for updating an ongoing application upgrade.
 *
 * @member {string} name The name of the application, including the 'fabric:'
 * URI scheme.
 * @member {string} upgradeKind The kind of upgrade out of the following
 * possible values. Possible values include: 'Invalid', 'Rolling'. Default
 * value: 'Rolling' .
 * @member {object} [applicationHealthPolicy] Defines a health policy used to
 * evaluate the health of an application or one of its children entities.
 * @member {boolean} [applicationHealthPolicy.considerWarningAsError] Indicates
 * whether warnings are treated with the same severity as errors.
 * @member {number}
 * [applicationHealthPolicy.maxPercentUnhealthyDeployedApplications] The
 * maximum allowed percentage of unhealthy deployed applications. Allowed
 * values are Byte values from zero to 100.
 * The percentage represents the maximum tolerated percentage of deployed
 * applications that can be unhealthy before the application is considered in
 * error.
 * This is calculated by dividing the number of unhealthy deployed applications
 * over the number of nodes where the application is currently deployed on in
 * the cluster.
 * The computation rounds up to tolerate one failure on small numbers of nodes.
 * Default percentage is zero.
 * @member {object} [applicationHealthPolicy.defaultServiceTypeHealthPolicy]
 * The health policy used by default to evaluate the health of a service type.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
 * The maximum allowed percentage of unhealthy partitions per service. Allowed
 * values are Byte values from zero to 100
 *
 * The percentage represents the maximum tolerated percentage of partitions
 * that can be unhealthy before the service is considered in error.
 * If the percentage is respected but there is at least one unhealthy
 * partition, the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy partitions
 * over the total number of partitions in the service.
 * The computation rounds up to tolerate one failure on small numbers of
 * partitions. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
 * The maximum allowed percentage of unhealthy replicas per partition. Allowed
 * values are Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of replicas that
 * can be unhealthy before the partition is considered in error.
 * If the percentage is respected but there is at least one unhealthy replica,
 * the health is evaluated as Warning.
 * The percentage is calculated by dividing the number of unhealthy replicas
 * over the total number of replicas in the partition.
 * The computation rounds up to tolerate one failure on small numbers of
 * replicas. Default percentage is zero.
 * @member {number}
 * [applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
 * The maximum allowed percentage of unhealthy services. Allowed values are
 * Byte values from zero to 100.
 *
 * The percentage represents the maximum tolerated percentage of services that
 * can be unhealthy before the application is considered in error.
 * If the percentage is respected but there is at least one unhealthy service,
 * the health is evaluated as Warning.
 * This is calculated by dividing the number of unhealthy services of the
 * specific service type over the total number of services of the specific
 * service type.
 * The computation rounds up to tolerate one failure on small numbers of
 * services. Default percentage is zero.
 * @member {array} [applicationHealthPolicy.serviceTypeHealthPolicyMap] The map
 * with service type health policy per service type name. The map is empty by
 * default.
 * @member {object} [updateDescription] Describes the parameters for updating a
 * rolling upgrade of application or cluster.
 * @member {string} [updateDescription.rollingUpgradeMode] The mode used to
 * monitor health during a rolling upgrade. The values are UnmonitoredAuto,
 * UnmonitoredManual, and Monitored. Possible values include: 'Invalid',
 * 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
 * @member {boolean} [updateDescription.forceRestart] If true, then processes
 * are forcefully restarted during upgrade even when the code version has not
 * changed (the upgrade only changes configuration or data).
 * @member {number} [updateDescription.replicaSetCheckTimeoutInMilliseconds]
 * The maximum amount of time to block processing of an upgrade domain and
 * prevent loss of availability when there are unexpected issues. When this
 * timeout expires, processing of the upgrade domain will proceed regardless of
 * availability loss issues. The timeout is reset at the start of each upgrade
 * domain. Valid values are between 0 and 42949672925 inclusive. (unsigned
 * 32-bit integer).
 * @member {string} [updateDescription.failureAction] The compensating action
 * to perform when a Monitored upgrade encounters monitoring policy or health
 * policy violations.
 * Invalid indicates the failure action is invalid. Rollback specifies that the
 * upgrade will start rolling back automatically.
 * Manual indicates that the upgrade will switch to UnmonitoredManual upgrade
 * mode. Possible values include: 'Invalid', 'Rollback', 'Manual'
 * @member {string} [updateDescription.healthCheckWaitDurationInMilliseconds]
 * The amount of time to wait after completing an upgrade domain before
 * applying health policies. It is first interpreted as a string representing
 * an ISO 8601 duration. If that fails, then it is interpreted as a number
 * representing the total number of milliseconds.
 * @member {string} [updateDescription.healthCheckStableDurationInMilliseconds]
 * The amount of time that the application or cluster must remain healthy
 * before the upgrade proceeds to the next upgrade domain. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [updateDescription.healthCheckRetryTimeoutInMilliseconds]
 * The amount of time to retry health evaluation when the application or
 * cluster is unhealthy before FailureAction is executed. It is first
 * interpreted as a string representing an ISO 8601 duration. If that fails,
 * then it is interpreted as a number representing the total number of
 * milliseconds.
 * @member {string} [updateDescription.upgradeTimeoutInMilliseconds] The amount
 * of time the overall upgrade has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 * @member {string} [updateDescription.upgradeDomainTimeoutInMilliseconds] The
 * amount of time each upgrade domain has to complete before FailureAction is
 * executed. It is first interpreted as a string representing an ISO 8601
 * duration. If that fails, then it is interpreted as a number representing the
 * total number of milliseconds.
 */
export interface ApplicationUpgradeUpdateDescription {
  name: string;
  upgradeKind: string;
  applicationHealthPolicy?: ApplicationHealthPolicy;
  updateDescription?: RollingUpgradeUpdateDescription;
}

/**
 * @class
 * Initializes a new instance of the NameDescription class.
 * @constructor
 * Describes a Service Fabric name.
 *
 * @member {string} name The Service Fabric name, including the 'fabric:' URI
 * scheme.
 */
export interface NameDescription {
  name: string;
}

/**
 * @class
 * Initializes a new instance of the PagedSubNameInfoList class.
 * @constructor
 * A paged list of Service Fabric names. The list is paged when all of the
 * results cannot fit in a single message. The next set of results can be
 * obtained by executing the same query with the continuation token provided in
 * this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {boolean} [isConsistent] Indicates whether any name under the given
 * name has been modified during the enumeration. If there was a modification,
 * this property value is false.
 * @member {array} [subNames] List of the child names.
 */
export interface PagedSubNameInfoList {
  continuationToken?: string;
  isConsistent?: boolean;
  subNames?: string[];
}

/**
 * @class
 * Initializes a new instance of the PropertyValue class.
 * @constructor
 * Describes a Service Fabric property value.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface PropertyValue {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the BinaryPropertyValue class.
 * @constructor
 * Describes a Service Fabric property value of type Binary.
 *
 * @member {array} data Array of bytes to be sent as an integer array. Each
 * element of array is a number between 0 and 255.
 */
export interface BinaryPropertyValue extends PropertyValue {
  data: number[];
}

/**
 * @class
 * Initializes a new instance of the Int64PropertyValue class.
 * @constructor
 * Describes a Service Fabric property value of type Int64.
 *
 * @member {string} data The data of the property value.
 */
export interface Int64PropertyValue extends PropertyValue {
  data: string;
}

/**
 * @class
 * Initializes a new instance of the DoublePropertyValue class.
 * @constructor
 * Describes a Service Fabric property value of type Double.
 *
 * @member {number} data The data of the property value.
 */
export interface DoublePropertyValue extends PropertyValue {
  data: number;
}

/**
 * @class
 * Initializes a new instance of the StringPropertyValue class.
 * @constructor
 * Describes a Service Fabric property value of type String.
 *
 * @member {string} data The data of the property value.
 */
export interface StringPropertyValue extends PropertyValue {
  data: string;
}

/**
 * @class
 * Initializes a new instance of the GuidPropertyValue class.
 * @constructor
 * Describes a Service Fabric property value of type Guid.
 *
 * @member {uuid} data The data of the property value.
 */
export interface GuidPropertyValue extends PropertyValue {
  data: string;
}

/**
 * @class
 * Initializes a new instance of the PropertyMetadata class.
 * @constructor
 * The metadata associated with a property, including the property's name.
 *
 * @member {string} [typeId] The kind of property, determined by the type of
 * data. Following are the possible values. Possible values include: 'Invalid',
 * 'Binary', 'Int64', 'Double', 'String', 'Guid'
 * @member {string} [customTypeId] The property's custom type ID.
 * @member {string} [parent] The name of the parent Service Fabric Name for the
 * property. It could be thought of as the name-space/table under which the
 * property exists.
 * @member {number} [sizeInBytes] The length of the serialized property value.
 * @member {date} [lastModifiedUtcTimestamp] Represents when the Property was
 * last modified. Only write operations will cause this field to be updated.
 * @member {string} [sequenceNumber] The version of the property. Every time a
 * property is modified, its sequence number is increased.
 */
export interface PropertyMetadata {
  typeId?: string;
  customTypeId?: string;
  parent?: string;
  sizeInBytes?: number;
  lastModifiedUtcTimestamp?: Date;
  sequenceNumber?: string;
}

/**
 * @class
 * Initializes a new instance of the PropertyInfo class.
 * @constructor
 * Information about a Service Fabric property.
 *
 * @member {string} name The name of the Service Fabric property.
 * @member {object} [value] Describes a Service Fabric property value.
 * @member {string} [value.kind] Polymorphic Discriminator
 * @member {object} metadata The metadata associated with a property, including
 * the property's name.
 * @member {string} [metadata.typeId] The kind of property, determined by the
 * type of data. Following are the possible values. Possible values include:
 * 'Invalid', 'Binary', 'Int64', 'Double', 'String', 'Guid'
 * @member {string} [metadata.customTypeId] The property's custom type ID.
 * @member {string} [metadata.parent] The name of the parent Service Fabric
 * Name for the property. It could be thought of as the name-space/table under
 * which the property exists.
 * @member {number} [metadata.sizeInBytes] The length of the serialized
 * property value.
 * @member {date} [metadata.lastModifiedUtcTimestamp] Represents when the
 * Property was last modified. Only write operations will cause this field to
 * be updated.
 * @member {string} [metadata.sequenceNumber] The version of the property.
 * Every time a property is modified, its sequence number is increased.
 */
export interface PropertyInfo {
  name: string;
  value?: PropertyValue;
  metadata: PropertyMetadata;
}

/**
 * @class
 * Initializes a new instance of the PagedPropertyInfoList class.
 * @constructor
 * The paged list of Service Fabric properties under a given name. The list is
 * paged when all of the results cannot fit in a single message. The next set
 * of results can be obtained by executing the same query with the continuation
 * token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {boolean} [isConsistent] Indicates whether any property under the
 * given name has been modified during the enumeration. If there was a
 * modification, this property value is false.
 * @member {array} [properties] List of property information.
 */
export interface PagedPropertyInfoList {
  continuationToken?: string;
  isConsistent?: boolean;
  properties?: PropertyInfo[];
}

/**
 * @class
 * Initializes a new instance of the PropertyDescription class.
 * @constructor
 * Description of a Service Fabric property.
 *
 * @member {string} propertyName The name of the Service Fabric property.
 * @member {string} [customTypeId] The property's custom type ID. Using this
 * property, the user is able to tag the type of the value of the property.
 * @member {object} value Describes a Service Fabric property value.
 * @member {string} [value.kind] Polymorphic Discriminator
 */
export interface PropertyDescription {
  propertyName: string;
  customTypeId?: string;
  value: PropertyValue;
}

/**
 * @class
 * Initializes a new instance of the PropertyBatchOperation class.
 * @constructor
 * Represents the base type for property operations that can be put into a
 * batch and submitted.
 *
 * @member {string} propertyName The name of the Service Fabric property.
 * @member {string} kind Polymorphic Discriminator
 */
export interface PropertyBatchOperation {
  propertyName: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the PropertyBatchDescriptionList class.
 * @constructor
 * Describes a list of property batch operations to be executed. Either all or
 * none of the operations will be committed.
 *
 * @member {array} [operations] A list of the property batch operations to be
 * executed.
 */
export interface PropertyBatchDescriptionList {
  operations?: PropertyBatchOperation[];
}

/**
 * @class
 * Initializes a new instance of the CheckExistsPropertyBatchOperation class.
 * @constructor
 * Represents a PropertyBatchOperation that compares the Boolean existence of a
 * property with the Exists argument.
 * The PropertyBatchOperation operation fails if the property's existence is
 * not equal to the Exists argument.
 * The CheckExistsPropertyBatchOperation is generally used as a precondition
 * for the write operations in the batch.
 * Note that if one PropertyBatchOperation in a PropertyBatch fails,
 * the entire batch fails and cannot be committed in a transactional manner.
 *
 * @member {boolean} exists Whether or not the property should exist for the
 * operation to pass.
 */
export interface CheckExistsPropertyBatchOperation extends PropertyBatchOperation {
  exists: boolean;
}

/**
 * @class
 * Initializes a new instance of the CheckSequencePropertyBatchOperation class.
 * @constructor
 * Compares the Sequence Number of a property with the SequenceNumber argument.
 * A property's sequence number can be thought of as that property's version.
 * Every time the property is modified, its sequence number is increased.
 * The sequence number can be found in a property's metadata.
 * The comparison fails if the sequence numbers are not equal.
 * CheckSequencePropertyBatchOperation is generally used as a precondition for
 * the write operations in the batch.
 * Note that if one PropertyBatchOperation in a PropertyBatch fails,
 * the entire batch fails and cannot be committed in a transactional manner.
 *
 * @member {string} sequenceNumber The expected sequence number.
 */
export interface CheckSequencePropertyBatchOperation extends PropertyBatchOperation {
  sequenceNumber: string;
}

/**
 * @class
 * Initializes a new instance of the CheckValuePropertyBatchOperation class.
 * @constructor
 * Represents a PropertyBatchOperation that compares the value of the property
 * with the expected value.
 * The CheckValuePropertyBatchOperation is generally used as a precondition for
 * the write operations in the batch.
 * Note that if one PropertyBatchOperation in a PropertyBatch fails,
 * the entire batch fails and cannot be committed in a transactional manner.
 *
 * @member {object} value The expected property value.
 * @member {string} [value.kind] Polymorphic Discriminator
 */
export interface CheckValuePropertyBatchOperation extends PropertyBatchOperation {
  value: PropertyValue;
}

/**
 * @class
 * Initializes a new instance of the DeletePropertyBatchOperation class.
 * @constructor
 * Represents a PropertyBatchOperation that deletes a specified property if it
 * exists.
 * Note that if one PropertyBatchOperation in a PropertyBatch fails,
 * the entire batch fails and cannot be committed in a transactional manner.
 *
 */
export interface DeletePropertyBatchOperation extends PropertyBatchOperation {
}

/**
 * @class
 * Initializes a new instance of the GetPropertyBatchOperation class.
 * @constructor
 * Represents a PropertyBatchOperation that gets the specified property if it
 * exists.
 * Note that if one PropertyBatchOperation in a PropertyBatch fails,
 * the entire batch fails and cannot be committed in a transactional manner.
 *
 * @member {boolean} [includeValue] Whether or not to return the property value
 * with the metadata.
 * True if values should be returned with the metadata; False to return only
 * property metadata. Default value: false .
 */
export interface GetPropertyBatchOperation extends PropertyBatchOperation {
  includeValue?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PutPropertyBatchOperation class.
 * @constructor
 * Puts the specified property under the specified name.
 * Note that if one PropertyBatchOperation in a PropertyBatch fails,
 * the entire batch fails and cannot be committed in a transactional manner.
 *
 * @member {object} value Describes a Service Fabric property value.
 * @member {string} [value.kind] Polymorphic Discriminator
 * @member {string} [customTypeId] The property's custom type ID. Using this
 * property, the user is able to tag the type of the value of the property.
 */
export interface PutPropertyBatchOperation extends PropertyBatchOperation {
  value: PropertyValue;
  customTypeId?: string;
}

/**
 * @class
 * Initializes a new instance of the PropertyBatchInfo class.
 * @constructor
 * Information about the results of a property batch.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface PropertyBatchInfo {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the SuccessfulPropertyBatchInfo class.
 * @constructor
 * Derived from PropertyBatchInfo. Represents the property batch succeeding.
 * Contains the results of any "Get" operations in the batch.
 *
 * @member {object} [properties] A map containing the properties that were
 * requested through any "Get" property batch operations. The key represents
 * the index of the "Get" operation in the original request, in string form.
 * The value is the property. If a property is not found, it will not be in the
 * map.
 */
export interface SuccessfulPropertyBatchInfo extends PropertyBatchInfo {
  properties?: { [propertyName: string]: PropertyInfo };
}

/**
 * @class
 * Initializes a new instance of the FailedPropertyBatchInfo class.
 * @constructor
 * Derived from PropertyBatchInfo. Represents the property batch failing.
 * Contains information about the specific batch failure.
 *
 * @member {string} [errorMessage] The error message of the failed operation.
 * Describes the exception thrown due to the first unsuccessful operation in
 * the property batch.
 * @member {number} [operationIndex] The index of the unsuccessful operation in
 * the property batch.
 */
export interface FailedPropertyBatchInfo extends PropertyBatchInfo {
  errorMessage?: string;
  operationIndex?: number;
}

/**
 * @class
 * Initializes a new instance of the BackupScheduleDescription class.
 * @constructor
 * Describes the backup schedule parameters.
 *
 * @member {string} scheduleKind Polymorphic Discriminator
 */
export interface BackupScheduleDescription {
  scheduleKind: string;
}

/**
 * @class
 * Initializes a new instance of the BackupStorageDescription class.
 * @constructor
 * Describes the parameters for the backup storage.
 *
 * @member {string} [friendlyName] Friendly name for this backup storage.
 * @member {string} storageKind Polymorphic Discriminator
 */
export interface BackupStorageDescription {
  friendlyName?: string;
  storageKind: string;
}

/**
 * @class
 * Initializes a new instance of the RetentionPolicyDescription class.
 * @constructor
 * Describes the retention policy configured.
 *
 * @member {string} retentionPolicyType Polymorphic Discriminator
 */
export interface RetentionPolicyDescription {
  retentionPolicyType: string;
}

/**
 * @class
 * Initializes a new instance of the BackupPolicyDescription class.
 * @constructor
 * Describes a backup policy for configuring periodic backup.
 *
 * @member {string} name The unique name identifying this backup policy.
 * @member {boolean} autoRestoreOnDataLoss Specifies whether to trigger restore
 * automatically using the latest available backup in case the partition
 * experiences a data loss event.
 * @member {number} maxIncrementalBackups Defines the maximum number of
 * incremental backups to be taken between two full backups. This is just the
 * upper limit. A full backup may be taken before specified number of
 * incremental backups are completed in one of the following conditions
 * - The replica has never taken a full backup since it has become primary,
 * - Some of the log records since the last backup has been truncated, or
 * - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
 * @member {object} schedule Describes the backup schedule parameters.
 * @member {string} [schedule.scheduleKind] Polymorphic Discriminator
 * @member {object} storage Describes the details of backup storage where to
 * store the periodic backups.
 * @member {string} [storage.friendlyName] Friendly name for this backup
 * storage.
 * @member {string} [storage.storageKind] Polymorphic Discriminator
 * @member {object} [retentionPolicy] Describes the policy to retain backups in
 * storage.
 * @member {string} [retentionPolicy.retentionPolicyType] Polymorphic
 * Discriminator
 */
export interface BackupPolicyDescription {
  name: string;
  autoRestoreOnDataLoss: boolean;
  maxIncrementalBackups: number;
  schedule: BackupScheduleDescription;
  storage: BackupStorageDescription;
  retentionPolicy?: RetentionPolicyDescription;
}

/**
 * @class
 * Initializes a new instance of the PagedBackupPolicyDescriptionList class.
 * @constructor
 * The list of backup policies configured in the cluster. The list is paged
 * when all of the results cannot fit in a single message. The next set of
 * results can be obtained by executing the same query with the continuation
 * token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] The list of backup policies information.
 */
export interface PagedBackupPolicyDescriptionList {
  continuationToken?: string;
  items?: BackupPolicyDescription[];
}

/**
 * @class
 * Initializes a new instance of the BasicRetentionPolicyDescription class.
 * @constructor
 * Describes basic retention policy.
 *
 * @member {moment.duration} retentionDuration It is the minimum duration for
 * which a backup created, will remain stored in the storage and might get
 * deleted after that span of time. It should be specified in ISO8601 format.
 * @member {number} [minimumNumberOfBackups] It is the minimum number of
 * backups to be retained at any point of time. If specified with a non zero
 * value, backups will not be deleted even if the backups have gone past
 * retention duration and have number of backups less than or equal to it.
 */
export interface BasicRetentionPolicyDescription extends RetentionPolicyDescription {
  retentionDuration: moment.Duration;
  minimumNumberOfBackups?: number;
}

/**
 * @class
 * Initializes a new instance of the DisableBackupDescription class.
 * @constructor
 * It describes the body parameters while disabling backup of a backup
 * entity(Application/Service/Partition).
 *
 * @member {boolean} cleanBackup Boolean flag to delete backups. It can be set
 * to true for deleting all the backups which were created for the backup
 * entity that is getting disabled for backup.
 */
export interface DisableBackupDescription {
  cleanBackup: boolean;
}

/**
 * @class
 * Initializes a new instance of the BackupConfigurationInfo class.
 * @constructor
 * Describes the backup configuration information.
 *
 * @member {string} [policyName] The name of the backup policy which is
 * applicable to this Service Fabric application or service or partition.
 * @member {string} [policyInheritedFrom] Specifies the scope at which the
 * backup policy is applied. Possible values include: 'Invalid', 'Partition',
 * 'Service', 'Application'
 * @member {object} [suspensionInfo] Describes the backup suspension details.
 * @member {boolean} [suspensionInfo.isSuspended] Indicates whether periodic
 * backup is suspended at this level or not.
 * @member {string} [suspensionInfo.suspensionInheritedFrom] Specifies the
 * scope at which the backup suspension was applied. Possible values include:
 * 'Invalid', 'Partition', 'Service', 'Application'
 * @member {string} kind Polymorphic Discriminator
 */
export interface BackupConfigurationInfo {
  policyName?: string;
  policyInheritedFrom?: string;
  suspensionInfo?: BackupSuspensionInfo;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationBackupConfigurationInfo class.
 * @constructor
 * Backup configuration information for a specific Service Fabric application
 * specifying what backup policy is being applied and suspend description, if
 * any.
 *
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 */
export interface ApplicationBackupConfigurationInfo extends BackupConfigurationInfo {
  applicationName?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceBackupConfigurationInfo class.
 * @constructor
 * Backup configuration information for a specific Service Fabric service
 * specifying what backup policy is being applied and suspend description, if
 * any.
 *
 * @member {string} [serviceName] The full name of the service with 'fabric:'
 * URI scheme.
 */
export interface ServiceBackupConfigurationInfo extends BackupConfigurationInfo {
  serviceName?: string;
}

/**
 * @class
 * Initializes a new instance of the BackupSuspensionInfo class.
 * @constructor
 * Describes the backup suspension details.
 *
 * @member {boolean} [isSuspended] Indicates whether periodic backup is
 * suspended at this level or not.
 * @member {string} [suspensionInheritedFrom] Specifies the scope at which the
 * backup suspension was applied. Possible values include: 'Invalid',
 * 'Partition', 'Service', 'Application'
 */
export interface BackupSuspensionInfo {
  isSuspended?: boolean;
  suspensionInheritedFrom?: string;
}

/**
 * @class
 * Initializes a new instance of the PagedBackupConfigurationInfoList class.
 * @constructor
 * The list of backup configuration information. The list is paged when all of
 * the results cannot fit in a single message. The next set of results can be
 * obtained by executing the same query with the continuation token provided in
 * this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of backup configuration information.
 */
export interface PagedBackupConfigurationInfoList {
  continuationToken?: string;
  items?: BackupConfigurationInfo[];
}

/**
 * @class
 * Initializes a new instance of the RestorePartitionDescription class.
 * @constructor
 * Specifies the parameters needed to trigger a restore of a specific
 * partition.
 *
 * @member {uuid} backupId Unique backup ID.
 * @member {string} backupLocation Location of the backup relative to the
 * backup storage specified/ configured.
 * @member {object} [backupStorage] Location of the backup from where the
 * partition will be restored.
 * @member {string} [backupStorage.friendlyName] Friendly name for this backup
 * storage.
 * @member {string} [backupStorage.storageKind] Polymorphic Discriminator
 */
export interface RestorePartitionDescription {
  backupId: string;
  backupLocation: string;
  backupStorage?: BackupStorageDescription;
}

/**
 * @class
 * Initializes a new instance of the RestoreProgressInfo class.
 * @constructor
 * Describes the progress of a restore operation on a partition.
 *
 * @member {string} [restoreState] Represents the current state of the
 * partition restore operation. Possible values include: 'Invalid', 'Accepted',
 * 'RestoreInProgress', 'Success', 'Failure', 'Timeout'
 * @member {date} [timeStampUtc] Timestamp when operation succeeded or failed.
 * @member {object} [restoredEpoch] Describes the epoch at which the partition
 * is restored.
 * @member {string} [restoredEpoch.configurationVersion] The current
 * configuration number of this Epoch. The configuration number is an
 * increasing value that is updated whenever the configuration of this replica
 * set changes.
 * @member {string} [restoredEpoch.dataLossVersion] The current data loss
 * number of this Epoch. The data loss number property is an increasing value
 * which is updated whenever data loss is suspected, as when loss of a quorum
 * of replicas in the replica set that includes the Primary replica.
 * @member {string} [restoredLsn] Restored LSN.
 * @member {object} [failureError] Denotes the failure encountered in
 * performing restore operation.
 * @member {string} [failureError.code] Defines the fabric error codes that be
 * returned as part of the error object in response to Service Fabric API
 * operations that are not successful. Following are the error code values that
 * can be returned for a specific HTTP status code.
 *
 * - Possible values of the error code for HTTP status code 400 (Bad Request)
 * - "FABRIC_E_INVALID_PARTITION_KEY"
 * - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_ADDRESS"
 * - "FABRIC_E_APPLICATION_NOT_UPGRADING"
 * - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_FABRIC_NOT_UPGRADING"
 * - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_CONFIGURATION"
 * - "FABRIC_E_INVALID_NAME_URI"
 * - "FABRIC_E_PATH_TOO_LONG"
 * - "FABRIC_E_KEY_TOO_LARGE"
 * - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
 * - "FABRIC_E_INVALID_ATOMIC_GROUP"
 * - "FABRIC_E_VALUE_EMPTY"
 * - "FABRIC_E_BACKUP_IS_ENABLED"
 * - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
 * - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
 * - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
 * - "E_INVALIDARG"
 *
 * - Possible values of the error code for HTTP status code 404 (Not Found)
 * - "FABRIC_E_NODE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
 * - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
 * - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
 * - "FABRIC_E_PARTITION_NOT_FOUND"
 * - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
 * - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
 * - "FABRIC_E_DIRECTORY_NOT_FOUND"
 * - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
 * - "FABRIC_E_FILE_NOT_FOUND"
 * - "FABRIC_E_NAME_DOES_NOT_EXIST"
 * - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
 * - "FABRIC_E_ENUMERATION_COMPLETED"
 * - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
 * - "FABRIC_E_KEY_NOT_FOUND"
 * - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
 * - "FABRIC_E_BACKUP_NOT_ENABLED"
 * - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
 * - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
 * - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"
 *
 * - Possible values of the error code for HTTP status code 409 (Conflict)
 * - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
 * - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_SERVICE_ALREADY_EXISTS"
 * - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_TYPE_IN_USE"
 * - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
 * - "FABRIC_E_FABRIC_VERSION_IN_USE"
 * - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_NAME_ALREADY_EXISTS"
 * - "FABRIC_E_NAME_NOT_EMPTY"
 * - "FABRIC_E_PROPERTY_CHECK_FAILED"
 * - "FABRIC_E_SERVICE_METADATA_MISMATCH"
 * - "FABRIC_E_SERVICE_TYPE_MISMATCH"
 * - "FABRIC_E_HEALTH_STALE_REPORT"
 * - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
 * - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
 * - "FABRIC_E_INSTANCE_ID_MISMATCH"
 * - "FABRIC_E_BACKUP_IN_PROGRESS"
 * - "FABRIC_E_RESTORE_IN_PROGRESS"
 * - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
 *
 * - Possible values of the error code for HTTP status code 413 (Request Entity
 * Too Large)
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 500 (Internal
 * Server Error)
 * - "FABRIC_E_NODE_IS_UP"
 * - "E_FAIL"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_VOLUME_ALREADY_EXISTS"
 * - "FABRIC_E_VOLUME_NOT_FOUND"
 * - "SerializationError"
 *
 * - Possible values of the error code for HTTP status code 503 (Service
 * Unavailable)
 * - "FABRIC_E_NO_WRITE_QUORUM"
 * - "FABRIC_E_NOT_PRIMARY"
 * - "FABRIC_E_NOT_READY"
 * - "FABRIC_E_RECONFIGURATION_PENDING"
 * - "FABRIC_E_SERVICE_OFFLINE"
 * - "E_ABORT"
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 504 (Gateway
 * Timeout)
 * - "FABRIC_E_COMMUNICATION_ERROR"
 * - "FABRIC_E_OPERATION_NOT_COMPLETE"
 * - "FABRIC_E_TIMEOUT". Possible values include:
 * 'FABRIC_E_INVALID_PARTITION_KEY', 'FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_ADDRESS', 'FABRIC_E_APPLICATION_NOT_UPGRADING',
 * 'FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_FABRIC_NOT_UPGRADING', 'FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_CONFIGURATION', 'FABRIC_E_INVALID_NAME_URI',
 * 'FABRIC_E_PATH_TOO_LONG', 'FABRIC_E_KEY_TOO_LARGE',
 * 'FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED',
 * 'FABRIC_E_INVALID_ATOMIC_GROUP', 'FABRIC_E_VALUE_EMPTY',
 * 'FABRIC_E_NODE_NOT_FOUND', 'FABRIC_E_APPLICATION_TYPE_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_NOT_FOUND', 'FABRIC_E_SERVICE_TYPE_NOT_FOUND',
 * 'FABRIC_E_SERVICE_DOES_NOT_EXIST',
 * 'FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND',
 * 'FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND', 'FABRIC_E_PARTITION_NOT_FOUND',
 * 'FABRIC_E_REPLICA_DOES_NOT_EXIST', 'FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST',
 * 'FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND',
 * 'FABRIC_E_DIRECTORY_NOT_FOUND', 'FABRIC_E_FABRIC_VERSION_NOT_FOUND',
 * 'FABRIC_E_FILE_NOT_FOUND', 'FABRIC_E_NAME_DOES_NOT_EXIST',
 * 'FABRIC_E_PROPERTY_DOES_NOT_EXIST', 'FABRIC_E_ENUMERATION_COMPLETED',
 * 'FABRIC_E_SERVICE_MANIFEST_NOT_FOUND', 'FABRIC_E_KEY_NOT_FOUND',
 * 'FABRIC_E_HEALTH_ENTITY_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS',
 * 'FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS',
 * 'FABRIC_E_SERVICE_ALREADY_EXISTS', 'FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_TYPE_IN_USE',
 * 'FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS', 'FABRIC_E_FABRIC_VERSION_IN_USE',
 * 'FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS', 'FABRIC_E_NAME_ALREADY_EXISTS',
 * 'FABRIC_E_NAME_NOT_EMPTY', 'FABRIC_E_PROPERTY_CHECK_FAILED',
 * 'FABRIC_E_SERVICE_METADATA_MISMATCH', 'FABRIC_E_SERVICE_TYPE_MISMATCH',
 * 'FABRIC_E_HEALTH_STALE_REPORT', 'FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED',
 * 'FABRIC_E_NODE_HAS_NOT_STOPPED_YET', 'FABRIC_E_INSTANCE_ID_MISMATCH',
 * 'FABRIC_E_VALUE_TOO_LARGE', 'FABRIC_E_NO_WRITE_QUORUM',
 * 'FABRIC_E_NOT_PRIMARY', 'FABRIC_E_NOT_READY',
 * 'FABRIC_E_RECONFIGURATION_PENDING', 'FABRIC_E_SERVICE_OFFLINE', 'E_ABORT',
 * 'FABRIC_E_COMMUNICATION_ERROR', 'FABRIC_E_OPERATION_NOT_COMPLETE',
 * 'FABRIC_E_TIMEOUT', 'FABRIC_E_NODE_IS_UP', 'E_FAIL',
 * 'FABRIC_E_BACKUP_IS_ENABLED',
 * 'FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH',
 * 'FABRIC_E_INVALID_FOR_STATELESS_SERVICES', 'FABRIC_E_BACKUP_NOT_ENABLED',
 * 'FABRIC_E_BACKUP_POLICY_NOT_EXISTING',
 * 'FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING',
 * 'FABRIC_E_BACKUP_IN_PROGRESS', 'FABRIC_E_RESTORE_IN_PROGRESS',
 * 'FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING',
 * 'FABRIC_E_INVALID_SERVICE_SCALING_POLICY', 'E_INVALIDARG',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND',
 * 'FABRIC_E_VOLUME_ALREADY_EXISTS', 'FABRIC_E_VOLUME_NOT_FOUND',
 * 'SerializationError', 'FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'
 * @member {string} [failureError.message] Error message.
 */
export interface RestoreProgressInfo {
  restoreState?: string;
  timeStampUtc?: Date;
  restoredEpoch?: Epoch;
  restoredLsn?: string;
  failureError?: FabricErrorError;
}

/**
 * @class
 * Initializes a new instance of the BackupPartitionDescription class.
 * @constructor
 * Describes the parameters for triggering partition's backup.
 *
 * @member {object} [backupStorage] Specifies the details of the backup storage
 * where to save the backup.
 * @member {string} [backupStorage.friendlyName] Friendly name for this backup
 * storage.
 * @member {string} [backupStorage.storageKind] Polymorphic Discriminator
 */
export interface BackupPartitionDescription {
  backupStorage?: BackupStorageDescription;
}

/**
 * @class
 * Initializes a new instance of the BackupInfo class.
 * @constructor
 * Represents a backup point which can be used to trigger a restore.
 *
 * @member {uuid} [backupId] Unique backup ID .
 * @member {uuid} [backupChainId] Unique backup chain ID. All backups part of
 * the same chain has the same backup chain id. A backup chain is comprised of
 * 1 full backup and multiple incremental backups.
 * @member {string} [applicationName] Name of the Service Fabric application
 * this partition backup belongs to.
 * @member {string} [serviceName] Name of the Service Fabric service this
 * partition backup belongs to.
 * @member {object} [partitionInformation] Information about the partition to
 * which this backup belongs to
 * @member {uuid} [partitionInformation.id] An internal ID used by Service
 * Fabric to uniquely identify a partition. This is a randomly generated GUID
 * when the service was created. The partition ID is unique and does not change
 * for the lifetime of the service. If the same service was deleted and
 * recreated the IDs of its partitions would be different.
 * @member {string} [partitionInformation.servicePartitionKind] Polymorphic
 * Discriminator
 * @member {string} [backupLocation] Location of the backup, relative to the
 * backup store.
 * @member {string} [backupType] Describes the type of backup, whether its full
 * or incremental. Possible values include: 'Invalid', 'Full', 'Incremental'
 * @member {object} [epochOfLastBackupRecord] Epoch of the last record in this
 * backup.
 * @member {string} [epochOfLastBackupRecord.configurationVersion] The current
 * configuration number of this Epoch. The configuration number is an
 * increasing value that is updated whenever the configuration of this replica
 * set changes.
 * @member {string} [epochOfLastBackupRecord.dataLossVersion] The current data
 * loss number of this Epoch. The data loss number property is an increasing
 * value which is updated whenever data loss is suspected, as when loss of a
 * quorum of replicas in the replica set that includes the Primary replica.
 * @member {string} [lsnOfLastBackupRecord] LSN of the last record in this
 * backup.
 * @member {date} [creationTimeUtc] The date time when this backup was taken.
 * @member {string} [serviceManifestVersion] Manifest Version of the service
 * this partition backup belongs to.
 * @member {object} [failureError] Denotes the failure encountered in getting
 * backup point information.
 * @member {string} [failureError.code] Defines the fabric error codes that be
 * returned as part of the error object in response to Service Fabric API
 * operations that are not successful. Following are the error code values that
 * can be returned for a specific HTTP status code.
 *
 * - Possible values of the error code for HTTP status code 400 (Bad Request)
 * - "FABRIC_E_INVALID_PARTITION_KEY"
 * - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_ADDRESS"
 * - "FABRIC_E_APPLICATION_NOT_UPGRADING"
 * - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_FABRIC_NOT_UPGRADING"
 * - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_CONFIGURATION"
 * - "FABRIC_E_INVALID_NAME_URI"
 * - "FABRIC_E_PATH_TOO_LONG"
 * - "FABRIC_E_KEY_TOO_LARGE"
 * - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
 * - "FABRIC_E_INVALID_ATOMIC_GROUP"
 * - "FABRIC_E_VALUE_EMPTY"
 * - "FABRIC_E_BACKUP_IS_ENABLED"
 * - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
 * - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
 * - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
 * - "E_INVALIDARG"
 *
 * - Possible values of the error code for HTTP status code 404 (Not Found)
 * - "FABRIC_E_NODE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
 * - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
 * - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
 * - "FABRIC_E_PARTITION_NOT_FOUND"
 * - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
 * - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
 * - "FABRIC_E_DIRECTORY_NOT_FOUND"
 * - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
 * - "FABRIC_E_FILE_NOT_FOUND"
 * - "FABRIC_E_NAME_DOES_NOT_EXIST"
 * - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
 * - "FABRIC_E_ENUMERATION_COMPLETED"
 * - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
 * - "FABRIC_E_KEY_NOT_FOUND"
 * - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
 * - "FABRIC_E_BACKUP_NOT_ENABLED"
 * - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
 * - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
 * - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"
 *
 * - Possible values of the error code for HTTP status code 409 (Conflict)
 * - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
 * - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_SERVICE_ALREADY_EXISTS"
 * - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_TYPE_IN_USE"
 * - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
 * - "FABRIC_E_FABRIC_VERSION_IN_USE"
 * - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_NAME_ALREADY_EXISTS"
 * - "FABRIC_E_NAME_NOT_EMPTY"
 * - "FABRIC_E_PROPERTY_CHECK_FAILED"
 * - "FABRIC_E_SERVICE_METADATA_MISMATCH"
 * - "FABRIC_E_SERVICE_TYPE_MISMATCH"
 * - "FABRIC_E_HEALTH_STALE_REPORT"
 * - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
 * - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
 * - "FABRIC_E_INSTANCE_ID_MISMATCH"
 * - "FABRIC_E_BACKUP_IN_PROGRESS"
 * - "FABRIC_E_RESTORE_IN_PROGRESS"
 * - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
 *
 * - Possible values of the error code for HTTP status code 413 (Request Entity
 * Too Large)
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 500 (Internal
 * Server Error)
 * - "FABRIC_E_NODE_IS_UP"
 * - "E_FAIL"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_VOLUME_ALREADY_EXISTS"
 * - "FABRIC_E_VOLUME_NOT_FOUND"
 * - "SerializationError"
 *
 * - Possible values of the error code for HTTP status code 503 (Service
 * Unavailable)
 * - "FABRIC_E_NO_WRITE_QUORUM"
 * - "FABRIC_E_NOT_PRIMARY"
 * - "FABRIC_E_NOT_READY"
 * - "FABRIC_E_RECONFIGURATION_PENDING"
 * - "FABRIC_E_SERVICE_OFFLINE"
 * - "E_ABORT"
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 504 (Gateway
 * Timeout)
 * - "FABRIC_E_COMMUNICATION_ERROR"
 * - "FABRIC_E_OPERATION_NOT_COMPLETE"
 * - "FABRIC_E_TIMEOUT". Possible values include:
 * 'FABRIC_E_INVALID_PARTITION_KEY', 'FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_ADDRESS', 'FABRIC_E_APPLICATION_NOT_UPGRADING',
 * 'FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_FABRIC_NOT_UPGRADING', 'FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_CONFIGURATION', 'FABRIC_E_INVALID_NAME_URI',
 * 'FABRIC_E_PATH_TOO_LONG', 'FABRIC_E_KEY_TOO_LARGE',
 * 'FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED',
 * 'FABRIC_E_INVALID_ATOMIC_GROUP', 'FABRIC_E_VALUE_EMPTY',
 * 'FABRIC_E_NODE_NOT_FOUND', 'FABRIC_E_APPLICATION_TYPE_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_NOT_FOUND', 'FABRIC_E_SERVICE_TYPE_NOT_FOUND',
 * 'FABRIC_E_SERVICE_DOES_NOT_EXIST',
 * 'FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND',
 * 'FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND', 'FABRIC_E_PARTITION_NOT_FOUND',
 * 'FABRIC_E_REPLICA_DOES_NOT_EXIST', 'FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST',
 * 'FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND',
 * 'FABRIC_E_DIRECTORY_NOT_FOUND', 'FABRIC_E_FABRIC_VERSION_NOT_FOUND',
 * 'FABRIC_E_FILE_NOT_FOUND', 'FABRIC_E_NAME_DOES_NOT_EXIST',
 * 'FABRIC_E_PROPERTY_DOES_NOT_EXIST', 'FABRIC_E_ENUMERATION_COMPLETED',
 * 'FABRIC_E_SERVICE_MANIFEST_NOT_FOUND', 'FABRIC_E_KEY_NOT_FOUND',
 * 'FABRIC_E_HEALTH_ENTITY_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS',
 * 'FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS',
 * 'FABRIC_E_SERVICE_ALREADY_EXISTS', 'FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_TYPE_IN_USE',
 * 'FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS', 'FABRIC_E_FABRIC_VERSION_IN_USE',
 * 'FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS', 'FABRIC_E_NAME_ALREADY_EXISTS',
 * 'FABRIC_E_NAME_NOT_EMPTY', 'FABRIC_E_PROPERTY_CHECK_FAILED',
 * 'FABRIC_E_SERVICE_METADATA_MISMATCH', 'FABRIC_E_SERVICE_TYPE_MISMATCH',
 * 'FABRIC_E_HEALTH_STALE_REPORT', 'FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED',
 * 'FABRIC_E_NODE_HAS_NOT_STOPPED_YET', 'FABRIC_E_INSTANCE_ID_MISMATCH',
 * 'FABRIC_E_VALUE_TOO_LARGE', 'FABRIC_E_NO_WRITE_QUORUM',
 * 'FABRIC_E_NOT_PRIMARY', 'FABRIC_E_NOT_READY',
 * 'FABRIC_E_RECONFIGURATION_PENDING', 'FABRIC_E_SERVICE_OFFLINE', 'E_ABORT',
 * 'FABRIC_E_COMMUNICATION_ERROR', 'FABRIC_E_OPERATION_NOT_COMPLETE',
 * 'FABRIC_E_TIMEOUT', 'FABRIC_E_NODE_IS_UP', 'E_FAIL',
 * 'FABRIC_E_BACKUP_IS_ENABLED',
 * 'FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH',
 * 'FABRIC_E_INVALID_FOR_STATELESS_SERVICES', 'FABRIC_E_BACKUP_NOT_ENABLED',
 * 'FABRIC_E_BACKUP_POLICY_NOT_EXISTING',
 * 'FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING',
 * 'FABRIC_E_BACKUP_IN_PROGRESS', 'FABRIC_E_RESTORE_IN_PROGRESS',
 * 'FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING',
 * 'FABRIC_E_INVALID_SERVICE_SCALING_POLICY', 'E_INVALIDARG',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND',
 * 'FABRIC_E_VOLUME_ALREADY_EXISTS', 'FABRIC_E_VOLUME_NOT_FOUND',
 * 'SerializationError', 'FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'
 * @member {string} [failureError.message] Error message.
 */
export interface BackupInfo {
  backupId?: string;
  backupChainId?: string;
  applicationName?: string;
  serviceName?: string;
  partitionInformation?: PartitionInformation;
  backupLocation?: string;
  backupType?: string;
  epochOfLastBackupRecord?: Epoch;
  lsnOfLastBackupRecord?: string;
  creationTimeUtc?: Date;
  serviceManifestVersion?: string;
  failureError?: FabricErrorError;
}

/**
 * @class
 * Initializes a new instance of the PagedBackupInfoList class.
 * @constructor
 * The list of backups. The list is paged when all of the results cannot fit in
 * a single message. The next set of results can be obtained by executing the
 * same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of backup information.
 */
export interface PagedBackupInfoList {
  continuationToken?: string;
  items?: BackupInfo[];
}

/**
 * @class
 * Initializes a new instance of the AzureBlobBackupStorageDescription class.
 * @constructor
 * Describes the parameters for Azure blob store used for storing and
 * enumerating backups.
 *
 * @member {string} connectionString The connection string to connect to the
 * Azure blob store.
 * @member {string} containerName The name of the container in the blob store
 * to store and enumerate backups from.
 */
export interface AzureBlobBackupStorageDescription extends BackupStorageDescription {
  connectionString: string;
  containerName: string;
}

/**
 * @class
 * Initializes a new instance of the FileShareBackupStorageDescription class.
 * @constructor
 * Describes the parameters for file share storage used for storing or
 * enumerating backups.
 *
 * @member {string} path UNC path of the file share where to store or enumerate
 * backups from.
 * @member {string} [primaryUserName] Primary user name to access the file
 * share.
 * @member {string} [primaryPassword] Primary password to access the share
 * location.
 * @member {string} [secondaryUserName] Secondary user name to access the file
 * share.
 * @member {string} [secondaryPassword] Secondary password to access the share
 * location
 */
export interface FileShareBackupStorageDescription extends BackupStorageDescription {
  path: string;
  primaryUserName?: string;
  primaryPassword?: string;
  secondaryUserName?: string;
  secondaryPassword?: string;
}

/**
 * @class
 * Initializes a new instance of the FrequencyBasedBackupScheduleDescription class.
 * @constructor
 * Describes the frequency based backup schedule.
 *
 * @member {moment.duration} interval Defines the interval with which backups
 * are periodically taken. It should be specified in ISO8601 format. Timespan
 * in seconds is not supported and will be ignored while creating the policy.
 */
export interface FrequencyBasedBackupScheduleDescription extends BackupScheduleDescription {
  interval: moment.Duration;
}

/**
 * @class
 * Initializes a new instance of the TimeBasedBackupScheduleDescription class.
 * @constructor
 * Describes the time based backup schedule.
 *
 * @member {string} scheduleFrequencyType Describes the frequency with which to
 * run the time based backup schedule. Possible values include: 'Invalid',
 * 'Daily', 'Weekly'
 * @member {array} [runDays] List of days of a week when to trigger the
 * periodic backup. This is valid only when the backup schedule frequency type
 * is weekly.
 * @member {array} runTimes Represents the list of exact time during the day in
 * ISO8601 format. Like '19:00:00' will represent '7PM' during the day. Date
 * specified along with time will be ignored.
 */
export interface TimeBasedBackupScheduleDescription extends BackupScheduleDescription {
  scheduleFrequencyType: string;
  runDays?: string[];
  runTimes: Date[];
}

/**
 * @class
 * Initializes a new instance of the BackupProgressInfo class.
 * @constructor
 * Describes the progress of a partition's backup.
 *
 * @member {string} [backupState] Represents the current state of the partition
 * backup operation. Possible values include: 'Invalid', 'Accepted',
 * 'BackupInProgress', 'Success', 'Failure', 'Timeout'
 * @member {date} [timeStampUtc] TimeStamp in UTC when operation succeeded or
 * failed.
 * @member {uuid} [backupId] Unique ID of the newly created backup.
 * @member {string} [backupLocation] Location, relative to the backup store, of
 * the newly created backup.
 * @member {object} [epochOfLastBackupRecord] Specifies the epoch of the last
 * record included in backup.
 * @member {string} [epochOfLastBackupRecord.configurationVersion] The current
 * configuration number of this Epoch. The configuration number is an
 * increasing value that is updated whenever the configuration of this replica
 * set changes.
 * @member {string} [epochOfLastBackupRecord.dataLossVersion] The current data
 * loss number of this Epoch. The data loss number property is an increasing
 * value which is updated whenever data loss is suspected, as when loss of a
 * quorum of replicas in the replica set that includes the Primary replica.
 * @member {string} [lsnOfLastBackupRecord] The LSN of last record included in
 * backup.
 * @member {object} [failureError] Denotes the failure encountered in
 * performing backup operation.
 * @member {string} [failureError.code] Defines the fabric error codes that be
 * returned as part of the error object in response to Service Fabric API
 * operations that are not successful. Following are the error code values that
 * can be returned for a specific HTTP status code.
 *
 * - Possible values of the error code for HTTP status code 400 (Bad Request)
 * - "FABRIC_E_INVALID_PARTITION_KEY"
 * - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_ADDRESS"
 * - "FABRIC_E_APPLICATION_NOT_UPGRADING"
 * - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_FABRIC_NOT_UPGRADING"
 * - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"
 * - "FABRIC_E_INVALID_CONFIGURATION"
 * - "FABRIC_E_INVALID_NAME_URI"
 * - "FABRIC_E_PATH_TOO_LONG"
 * - "FABRIC_E_KEY_TOO_LARGE"
 * - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"
 * - "FABRIC_E_INVALID_ATOMIC_GROUP"
 * - "FABRIC_E_VALUE_EMPTY"
 * - "FABRIC_E_BACKUP_IS_ENABLED"
 * - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"
 * - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"
 * - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"
 * - "E_INVALIDARG"
 *
 * - Possible values of the error code for HTTP status code 404 (Not Found)
 * - "FABRIC_E_NODE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"
 * - "FABRIC_E_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"
 * - "FABRIC_E_SERVICE_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"
 * - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"
 * - "FABRIC_E_PARTITION_NOT_FOUND"
 * - "FABRIC_E_REPLICA_DOES_NOT_EXIST"
 * - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"
 * - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"
 * - "FABRIC_E_DIRECTORY_NOT_FOUND"
 * - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"
 * - "FABRIC_E_FILE_NOT_FOUND"
 * - "FABRIC_E_NAME_DOES_NOT_EXIST"
 * - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"
 * - "FABRIC_E_ENUMERATION_COMPLETED"
 * - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"
 * - "FABRIC_E_KEY_NOT_FOUND"
 * - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"
 * - "FABRIC_E_BACKUP_NOT_ENABLED"
 * - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"
 * - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"
 * - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"
 *
 * - Possible values of the error code for HTTP status code 409 (Conflict)
 * - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"
 * - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_SERVICE_ALREADY_EXISTS"
 * - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"
 * - "FABRIC_E_APPLICATION_TYPE_IN_USE"
 * - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"
 * - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"
 * - "FABRIC_E_FABRIC_VERSION_IN_USE"
 * - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"
 * - "FABRIC_E_NAME_ALREADY_EXISTS"
 * - "FABRIC_E_NAME_NOT_EMPTY"
 * - "FABRIC_E_PROPERTY_CHECK_FAILED"
 * - "FABRIC_E_SERVICE_METADATA_MISMATCH"
 * - "FABRIC_E_SERVICE_TYPE_MISMATCH"
 * - "FABRIC_E_HEALTH_STALE_REPORT"
 * - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"
 * - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"
 * - "FABRIC_E_INSTANCE_ID_MISMATCH"
 * - "FABRIC_E_BACKUP_IN_PROGRESS"
 * - "FABRIC_E_RESTORE_IN_PROGRESS"
 * - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"
 *
 * - Possible values of the error code for HTTP status code 413 (Request Entity
 * Too Large)
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 500 (Internal
 * Server Error)
 * - "FABRIC_E_NODE_IS_UP"
 * - "E_FAIL"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"
 * - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"
 * - "FABRIC_E_VOLUME_ALREADY_EXISTS"
 * - "FABRIC_E_VOLUME_NOT_FOUND"
 * - "SerializationError"
 *
 * - Possible values of the error code for HTTP status code 503 (Service
 * Unavailable)
 * - "FABRIC_E_NO_WRITE_QUORUM"
 * - "FABRIC_E_NOT_PRIMARY"
 * - "FABRIC_E_NOT_READY"
 * - "FABRIC_E_RECONFIGURATION_PENDING"
 * - "FABRIC_E_SERVICE_OFFLINE"
 * - "E_ABORT"
 * - "FABRIC_E_VALUE_TOO_LARGE"
 *
 * - Possible values of the error code for HTTP status code 504 (Gateway
 * Timeout)
 * - "FABRIC_E_COMMUNICATION_ERROR"
 * - "FABRIC_E_OPERATION_NOT_COMPLETE"
 * - "FABRIC_E_TIMEOUT". Possible values include:
 * 'FABRIC_E_INVALID_PARTITION_KEY', 'FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_ADDRESS', 'FABRIC_E_APPLICATION_NOT_UPGRADING',
 * 'FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_FABRIC_NOT_UPGRADING', 'FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR',
 * 'FABRIC_E_INVALID_CONFIGURATION', 'FABRIC_E_INVALID_NAME_URI',
 * 'FABRIC_E_PATH_TOO_LONG', 'FABRIC_E_KEY_TOO_LARGE',
 * 'FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED',
 * 'FABRIC_E_INVALID_ATOMIC_GROUP', 'FABRIC_E_VALUE_EMPTY',
 * 'FABRIC_E_NODE_NOT_FOUND', 'FABRIC_E_APPLICATION_TYPE_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_NOT_FOUND', 'FABRIC_E_SERVICE_TYPE_NOT_FOUND',
 * 'FABRIC_E_SERVICE_DOES_NOT_EXIST',
 * 'FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND',
 * 'FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND', 'FABRIC_E_PARTITION_NOT_FOUND',
 * 'FABRIC_E_REPLICA_DOES_NOT_EXIST', 'FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST',
 * 'FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND',
 * 'FABRIC_E_DIRECTORY_NOT_FOUND', 'FABRIC_E_FABRIC_VERSION_NOT_FOUND',
 * 'FABRIC_E_FILE_NOT_FOUND', 'FABRIC_E_NAME_DOES_NOT_EXIST',
 * 'FABRIC_E_PROPERTY_DOES_NOT_EXIST', 'FABRIC_E_ENUMERATION_COMPLETED',
 * 'FABRIC_E_SERVICE_MANIFEST_NOT_FOUND', 'FABRIC_E_KEY_NOT_FOUND',
 * 'FABRIC_E_HEALTH_ENTITY_NOT_FOUND',
 * 'FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS',
 * 'FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS',
 * 'FABRIC_E_SERVICE_ALREADY_EXISTS', 'FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS',
 * 'FABRIC_E_APPLICATION_TYPE_IN_USE',
 * 'FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION',
 * 'FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS', 'FABRIC_E_FABRIC_VERSION_IN_USE',
 * 'FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS', 'FABRIC_E_NAME_ALREADY_EXISTS',
 * 'FABRIC_E_NAME_NOT_EMPTY', 'FABRIC_E_PROPERTY_CHECK_FAILED',
 * 'FABRIC_E_SERVICE_METADATA_MISMATCH', 'FABRIC_E_SERVICE_TYPE_MISMATCH',
 * 'FABRIC_E_HEALTH_STALE_REPORT', 'FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED',
 * 'FABRIC_E_NODE_HAS_NOT_STOPPED_YET', 'FABRIC_E_INSTANCE_ID_MISMATCH',
 * 'FABRIC_E_VALUE_TOO_LARGE', 'FABRIC_E_NO_WRITE_QUORUM',
 * 'FABRIC_E_NOT_PRIMARY', 'FABRIC_E_NOT_READY',
 * 'FABRIC_E_RECONFIGURATION_PENDING', 'FABRIC_E_SERVICE_OFFLINE', 'E_ABORT',
 * 'FABRIC_E_COMMUNICATION_ERROR', 'FABRIC_E_OPERATION_NOT_COMPLETE',
 * 'FABRIC_E_TIMEOUT', 'FABRIC_E_NODE_IS_UP', 'E_FAIL',
 * 'FABRIC_E_BACKUP_IS_ENABLED',
 * 'FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH',
 * 'FABRIC_E_INVALID_FOR_STATELESS_SERVICES', 'FABRIC_E_BACKUP_NOT_ENABLED',
 * 'FABRIC_E_BACKUP_POLICY_NOT_EXISTING',
 * 'FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING',
 * 'FABRIC_E_BACKUP_IN_PROGRESS', 'FABRIC_E_RESTORE_IN_PROGRESS',
 * 'FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING',
 * 'FABRIC_E_INVALID_SERVICE_SCALING_POLICY', 'E_INVALIDARG',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS',
 * 'FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND',
 * 'FABRIC_E_VOLUME_ALREADY_EXISTS', 'FABRIC_E_VOLUME_NOT_FOUND',
 * 'SerializationError', 'FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'
 * @member {string} [failureError.message] Error message.
 */
export interface BackupProgressInfo {
  backupState?: string;
  timeStampUtc?: Date;
  backupId?: string;
  backupLocation?: string;
  epochOfLastBackupRecord?: Epoch;
  lsnOfLastBackupRecord?: string;
  failureError?: FabricErrorError;
}

/**
 * @class
 * Initializes a new instance of the PartitionBackupConfigurationInfo class.
 * @constructor
 * Backup configuration information, for a specific partition, specifying what
 * backup policy is being applied and suspend description, if any.
 *
 * @member {string} [serviceName] The full name of the service with 'fabric:'
 * URI scheme.
 * @member {uuid} [partitionId] The partition ID identifying the partition.
 */
export interface PartitionBackupConfigurationInfo extends BackupConfigurationInfo {
  serviceName?: string;
  partitionId?: string;
}

/**
 * @class
 * Initializes a new instance of the BackupEntity class.
 * @constructor
 * Describes the Service Fabric entity that is configured for backup.
 *
 * @member {string} entityKind Polymorphic Discriminator
 */
export interface BackupEntity {
  entityKind: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationBackupEntity class.
 * @constructor
 * Identifies the Service Fabric application which is being backed up.
 *
 * @member {string} [applicationName] The name of the application, including
 * the 'fabric:' URI scheme.
 */
export interface ApplicationBackupEntity extends BackupEntity {
  applicationName?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceBackupEntity class.
 * @constructor
 * Identifies the Service Fabric stateful service which is being backed up.
 *
 * @member {string} [serviceName] The full name of the service with 'fabric:'
 * URI scheme.
 */
export interface ServiceBackupEntity extends BackupEntity {
  serviceName?: string;
}

/**
 * @class
 * Initializes a new instance of the PartitionBackupEntity class.
 * @constructor
 * Identifies the Service Fabric stateful partition which is being backed up.
 *
 * @member {string} [serviceName] The full name of the service with 'fabric:'
 * URI scheme.
 * @member {uuid} [partitionId] The partition ID identifying the partition.
 */
export interface PartitionBackupEntity extends BackupEntity {
  serviceName?: string;
  partitionId?: string;
}

/**
 * @class
 * Initializes a new instance of the EnableBackupDescription class.
 * @constructor
 * Specifies the parameters needed to enable periodic backup.
 *
 * @member {string} backupPolicyName Name of the backup policy to be used for
 * enabling periodic backups.
 */
export interface EnableBackupDescription {
  backupPolicyName: string;
}

/**
 * @class
 * Initializes a new instance of the PagedBackupEntityList class.
 * @constructor
 * The list of backup entities that are being periodically backed. The list is
 * paged when all of the results cannot fit in a single message. The next set
 * of results can be obtained by executing the same query with the continuation
 * token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of backup entity information.
 */
export interface PagedBackupEntityList {
  continuationToken?: string;
  items?: BackupEntity[];
}

/**
 * @class
 * Initializes a new instance of the GetBackupByStorageQueryDescription class.
 * @constructor
 * Describes additional filters to be applied, while listing backups, and
 * backup storage details from where to fetch the backups.
 *
 * @member {date} [startDateTimeFilter] Specifies the start date time in
 * ISO8601 from which to enumerate backups. If not specified, backups are
 * enumerated from the beginning.
 * @member {date} [endDateTimeFilter] Specifies the end date time in ISO8601
 * till which to enumerate backups. If not specified, backups are enumerated
 * till the end.
 * @member {boolean} [latest] If specified as true, gets the most recent backup
 * (within the specified time range) for every partition under the specified
 * backup entity. Default value: false .
 * @member {object} storage Describes the parameters for the backup storage
 * from where to enumerate backups. This is optional and by default backups are
 * enumerated from the backup storage where this backup entity is currently
 * being backed up (as specified in backup policy). This parameter is useful to
 * be able to enumerate backups from another cluster where you may intend to
 * restore.
 * @member {string} [storage.friendlyName] Friendly name for this backup
 * storage.
 * @member {string} [storage.storageKind] Polymorphic Discriminator
 * @member {object} backupEntity Indicates the entity for which to enumerate
 * backups.
 * @member {string} [backupEntity.entityKind] Polymorphic Discriminator
 */
export interface GetBackupByStorageQueryDescription {
  startDateTimeFilter?: Date;
  endDateTimeFilter?: Date;
  latest?: boolean;
  storage: BackupStorageDescription;
  backupEntity: BackupEntity;
}

/**
 * @class
 * Initializes a new instance of the NodeImpact class.
 * @constructor
 * Describes the expected impact of a repair to a particular node.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} nodeName The name of the impacted node.
 * @member {string} [impactLevel] The level of impact expected. Possible values
 * include: 'Invalid', 'None', 'Restart', 'RemoveData', 'RemoveNode'
 */
export interface NodeImpact {
  nodeName: string;
  impactLevel?: string;
}

/**
 * @class
 * Initializes a new instance of the RepairImpactDescriptionBase class.
 * @constructor
 * Describes the expected impact of executing a repair task.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface RepairImpactDescriptionBase {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the NodeRepairImpactDescription class.
 * @constructor
 * Describes the expected impact of a repair on a set of nodes.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {array} [nodeImpactList] The list of nodes impacted by a repair
 * action and their respective expected impact.
 */
export interface NodeRepairImpactDescription extends RepairImpactDescriptionBase {
  nodeImpactList?: NodeImpact[];
}

/**
 * @class
 * Initializes a new instance of the RepairTargetDescriptionBase class.
 * @constructor
 * Describes the entities targeted by a repair action.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface RepairTargetDescriptionBase {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the NodeRepairTargetDescription class.
 * @constructor
 * Describes the list of nodes targeted by a repair action.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {array} [nodeNames] The list of nodes targeted by a repair action.
 */
export interface NodeRepairTargetDescription extends RepairTargetDescriptionBase {
  nodeNames?: string[];
}

/**
 * @class
 * Initializes a new instance of the RepairTaskHistory class.
 * @constructor
 * A record of the times when the repair task entered each state.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {date} [createdUtcTimestamp] The time when the repair task entered
 * the Created state.
 * @member {date} [claimedUtcTimestamp] The time when the repair task entered
 * the Claimed state.
 * @member {date} [preparingUtcTimestamp] The time when the repair task entered
 * the Preparing state.
 * @member {date} [approvedUtcTimestamp] The time when the repair task entered
 * the Approved state
 * @member {date} [executingUtcTimestamp] The time when the repair task entered
 * the Executing state
 * @member {date} [restoringUtcTimestamp] The time when the repair task entered
 * the Restoring state
 * @member {date} [completedUtcTimestamp] The time when the repair task entered
 * the Completed state
 * @member {date} [preparingHealthCheckStartUtcTimestamp] The time when the
 * repair task started the health check in the Preparing state.
 * @member {date} [preparingHealthCheckEndUtcTimestamp] The time when the
 * repair task completed the health check in the Preparing state.
 * @member {date} [restoringHealthCheckStartUtcTimestamp] The time when the
 * repair task started the health check in the Restoring state.
 * @member {date} [restoringHealthCheckEndUtcTimestamp] The time when the
 * repair task completed the health check in the Restoring state.
 */
export interface RepairTaskHistory {
  createdUtcTimestamp?: Date;
  claimedUtcTimestamp?: Date;
  preparingUtcTimestamp?: Date;
  approvedUtcTimestamp?: Date;
  executingUtcTimestamp?: Date;
  restoringUtcTimestamp?: Date;
  completedUtcTimestamp?: Date;
  preparingHealthCheckStartUtcTimestamp?: Date;
  preparingHealthCheckEndUtcTimestamp?: Date;
  restoringHealthCheckStartUtcTimestamp?: Date;
  restoringHealthCheckEndUtcTimestamp?: Date;
}

/**
 * @class
 * Initializes a new instance of the RepairTask class.
 * @constructor
 * Represents a repair task, which includes information about what kind of
 * repair was requested, what its progress is, and what its final result was.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} taskId The ID of the repair task.
 * @member {string} [version] The version of the repair task.
 * When creating a new repair task, the version must be set to zero.  When
 * updating a repair task,
 * the version is used for optimistic concurrency checks.  If the version is
 * set to zero, the update will not check for write conflicts.  If the version
 * is set to a non-zero value, then the
 * update will only succeed if the actual current version of the repair task
 * matches this value.
 * @member {string} [description] A description of the purpose of the repair
 * task, or other informational details.
 * May be set when the repair task is created, and is immutable once set.
 * @member {string} state The workflow state of the repair task. Valid initial
 * states are Created, Claimed, and Preparing. Possible values include:
 * 'Invalid', 'Created', 'Claimed', 'Preparing', 'Approved', 'Executing',
 * 'Restoring', 'Completed'
 * @member {number} [flags] A bitwise-OR of the following values, which gives
 * additional details about the status of the repair task.
 * - 1 - Cancellation of the repair has been requested
 * - 2 - Abort of the repair has been requested
 * - 4 - Approval of the repair was forced via client request
 * @member {string} action The requested repair action. Must be specified when
 * the repair task is created, and is immutable once set.
 * @member {object} [target] The target object determines what actions the
 * system will take to prepare for the impact of the repair, prior to approving
 * execution of the repair.
 * May be set when the repair task is created, and is immutable once set.
 * @member {string} [target.kind] Polymorphic Discriminator
 * @member {string} [executor] The name of the repair executor. Must be
 * specified in Claimed and later states, and is immutable once set.
 * @member {string} [executorData] A data string that the repair executor can
 * use to store its internal state.
 * @member {object} [impact] The impact object determines what actions the
 * system will take to prepare for the impact of the repair, prior to approving
 * execution of the repair.
 * Impact must be specified by the repair executor when transitioning to the
 * Preparing state, and is immutable once set.
 * @member {string} [impact.kind] Polymorphic Discriminator
 * @member {string} [resultStatus] A value describing the overall result of the
 * repair task execution. Must be specified in the Restoring and later states,
 * and is immutable once set. Possible values include: 'Invalid', 'Succeeded',
 * 'Cancelled', 'Interrupted', 'Failed', 'Pending'
 * @member {number} [resultCode] A numeric value providing additional details
 * about the result of the repair task execution.
 * May be specified in the Restoring and later states, and is immutable once
 * set.
 * @member {string} [resultDetails] A string providing additional details about
 * the result of the repair task execution.
 * May be specified in the Restoring and later states, and is immutable once
 * set.
 * @member {object} [history] An object that contains timestamps of the repair
 * task's state transitions.
 * These timestamps are updated by the system, and cannot be directly modified.
 * @member {date} [history.createdUtcTimestamp] The time when the repair task
 * entered the Created state.
 * @member {date} [history.claimedUtcTimestamp] The time when the repair task
 * entered the Claimed state.
 * @member {date} [history.preparingUtcTimestamp] The time when the repair task
 * entered the Preparing state.
 * @member {date} [history.approvedUtcTimestamp] The time when the repair task
 * entered the Approved state
 * @member {date} [history.executingUtcTimestamp] The time when the repair task
 * entered the Executing state
 * @member {date} [history.restoringUtcTimestamp] The time when the repair task
 * entered the Restoring state
 * @member {date} [history.completedUtcTimestamp] The time when the repair task
 * entered the Completed state
 * @member {date} [history.preparingHealthCheckStartUtcTimestamp] The time when
 * the repair task started the health check in the Preparing state.
 * @member {date} [history.preparingHealthCheckEndUtcTimestamp] The time when
 * the repair task completed the health check in the Preparing state.
 * @member {date} [history.restoringHealthCheckStartUtcTimestamp] The time when
 * the repair task started the health check in the Restoring state.
 * @member {date} [history.restoringHealthCheckEndUtcTimestamp] The time when
 * the repair task completed the health check in the Restoring state.
 * @member {string} [preparingHealthCheckState] The workflow state of the
 * health check when the repair task is in the Preparing state. Possible values
 * include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
 * @member {string} [restoringHealthCheckState] The workflow state of the
 * health check when the repair task is in the Restoring state. Possible values
 * include: 'NotStarted', 'InProgress', 'Succeeded', 'Skipped', 'TimedOut'
 * @member {boolean} [performPreparingHealthCheck] A value to determine if
 * health checks will be performed when the repair task enters the Preparing
 * state.
 * @member {boolean} [performRestoringHealthCheck] A value to determine if
 * health checks will be performed when the repair task enters the Restoring
 * state.
 */
export interface RepairTask {
  taskId: string;
  version?: string;
  description?: string;
  state: string;
  flags?: number;
  action: string;
  target?: RepairTargetDescriptionBase;
  executor?: string;
  executorData?: string;
  impact?: RepairImpactDescriptionBase;
  resultStatus?: string;
  resultCode?: number;
  resultDetails?: string;
  history?: RepairTaskHistory;
  preparingHealthCheckState?: string;
  restoringHealthCheckState?: string;
  performPreparingHealthCheck?: boolean;
  performRestoringHealthCheck?: boolean;
}

/**
 * @class
 * Initializes a new instance of the RepairTaskApproveDescription class.
 * @constructor
 * Describes a request for forced approval of a repair task.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} taskId The ID of the repair task.
 * @member {string} [version] The current version number of the repair task. If
 * non-zero, then the request will only succeed if this value matches the
 * actual current version of the repair task. If zero, then no version check is
 * performed.
 */
export interface RepairTaskApproveDescription {
  taskId: string;
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the RepairTaskCancelDescription class.
 * @constructor
 * Describes a request to cancel a repair task.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} taskId The ID of the repair task.
 * @member {string} [version] The current version number of the repair task. If
 * non-zero, then the request will only succeed if this value matches the
 * actual current version of the repair task. If zero, then no version check is
 * performed.
 * @member {boolean} [requestAbort] _True_ if the repair should be stopped as
 * soon as possible even if it has already started executing. _False_ if the
 * repair should be cancelled only if execution has not yet started.
 */
export interface RepairTaskCancelDescription {
  taskId: string;
  version?: string;
  requestAbort?: boolean;
}

/**
 * @class
 * Initializes a new instance of the RepairTaskDeleteDescription class.
 * @constructor
 * Describes a request to delete a completed repair task.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} taskId The ID of the completed repair task to be deleted.
 * @member {string} [version] The current version number of the repair task. If
 * non-zero, then the request will only succeed if this value matches the
 * actual current version of the repair task. If zero, then no version check is
 * performed.
 */
export interface RepairTaskDeleteDescription {
  taskId: string;
  version?: string;
}

/**
 * @class
 * Initializes a new instance of the RepairTaskUpdateHealthPolicyDescription class.
 * @constructor
 * Describes a request to update the health policy of a repair task.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} taskId The ID of the repair task to be updated.
 * @member {string} [version] The current version number of the repair task. If
 * non-zero, then the request will only succeed if this value matches the
 * actual current value of the repair task. If zero, then no version check is
 * performed.
 * @member {boolean} [performPreparingHealthCheck] A boolean indicating if
 * health check is to be performed in the Preparing stage of the repair task.
 * If not specified the existing value should not be altered. Otherwise,
 * specify the desired new value.
 * @member {boolean} [performRestoringHealthCheck] A boolean indicating if
 * health check is to be performed in the Restoring stage of the repair task.
 * If not specified the existing value should not be altered. Otherwise,
 * specify the desired new value.
 */
export interface RepairTaskUpdateHealthPolicyDescription {
  taskId: string;
  version?: string;
  performPreparingHealthCheck?: boolean;
  performRestoringHealthCheck?: boolean;
}

/**
 * @class
 * Initializes a new instance of the RepairTaskUpdateInfo class.
 * @constructor
 * Describes the result of an operation that created or updated a repair task.
 *
 * This type supports the Service Fabric platform; it is not meant to be used
 * directly from your code.
 *
 * @member {string} version The new version of the repair task.
 */
export interface RepairTaskUpdateInfo {
  version: string;
}

/**
 * @class
 * Initializes a new instance of the UploadChunkRange class.
 * @constructor
 * Information about which portion of the file to upload.
 *
 * @member {string} [startPosition] The start position of the portion of the
 * file. It's represented by the number of bytes.
 * @member {string} [endPosition] The end position of the portion of the file.
 * It's represented by the number of bytes.
 */
export interface UploadChunkRange {
  startPosition?: string;
  endPosition?: string;
}

/**
 * @class
 * Initializes a new instance of the UploadSessionInfo class.
 * @constructor
 * Information about an image store upload session. A session is associated
 * with a relative path in the image store.
 *
 * @member {string} [storeRelativePath] The remote location within image store.
 * This path is relative to the image store root.
 * @member {uuid} [sessionId] A unique ID of the upload session. A session ID
 * can be reused only if the session was committed or removed.
 * @member {date} [modifiedDate] The date and time when the upload session was
 * last modified.
 * @member {string} [fileSize] The size in bytes of the uploading file.
 * @member {array} [expectedRanges] List of chunk ranges that image store has
 * not received yet.
 */
export interface UploadSessionInfo {
  storeRelativePath?: string;
  sessionId?: string;
  modifiedDate?: Date;
  fileSize?: string;
  expectedRanges?: UploadChunkRange[];
}

/**
 * @class
 * Initializes a new instance of the UploadSession class.
 * @constructor
 * Information about a image store upload session
 *
 * @member {array} [uploadSessions] When querying upload session by upload
 * session ID, the result contains only one upload session. When querying
 * upload session by image store relative path, the result might contain
 * multiple upload sessions.
 */
export interface UploadSession {
  uploadSessions?: UploadSessionInfo[];
}

/**
 * @class
 * Initializes a new instance of the AveragePartitionLoadScalingTrigger class.
 * @constructor
 * Represents a scaling trigger related to an average load of a metric/resource
 * of a partition.
 *
 * @member {string} metricName The name of the metric for which usage should be
 * tracked.
 * @member {string} lowerLoadThreshold The lower limit of the load below which
 * a scale in operation should be performed.
 * @member {string} upperLoadThreshold The upper limit of the load beyond which
 * a scale out operation should be performed.
 * @member {number} scaleIntervalInSeconds The period in seconds on which a
 * decision is made whether to scale or not.
 */
export interface AveragePartitionLoadScalingTrigger extends ScalingTriggerDescription {
  metricName: string;
  lowerLoadThreshold: string;
  upperLoadThreshold: string;
  scaleIntervalInSeconds: number;
}

/**
 * @class
 * Initializes a new instance of the AverageServiceLoadScalingTrigger class.
 * @constructor
 * Represents a scaling policy related to an average load of a metric/resource
 * of a service.
 *
 * @member {string} metricName The name of the metric for which usage should be
 * tracked.
 * @member {string} lowerLoadThreshold The lower limit of the load below which
 * a scale in operation should be performed.
 * @member {string} upperLoadThreshold The upper limit of the load beyond which
 * a scale out operation should be performed.
 * @member {number} scaleIntervalInSeconds The period in seconds on which a
 * decision is made whether to scale or not.
 */
export interface AverageServiceLoadScalingTrigger extends ScalingTriggerDescription {
  metricName: string;
  lowerLoadThreshold: string;
  upperLoadThreshold: string;
  scaleIntervalInSeconds: number;
}

/**
 * @class
 * Initializes a new instance of the PartitionInstanceCountScaleMechanism class.
 * @constructor
 * Represents a scaling mechanism for adding or removing instances of stateless
 * service partition.
 *
 * @member {number} minInstanceCount Minimum number of instances of the
 * partition.
 * @member {number} maxInstanceCount Maximum number of instances of the
 * partition.
 * @member {number} scaleIncrement The number of instances to add or remove
 * during a scaling operation.
 */
export interface PartitionInstanceCountScaleMechanism extends ScalingMechanismDescription {
  minInstanceCount: number;
  maxInstanceCount: number;
  scaleIncrement: number;
}

/**
 * @class
 * Initializes a new instance of the AddRemoveIncrementalNamedPartitionScalingMechanism class.
 * @constructor
 * Represents a scaling mechanism for adding or removing named partitions of a
 * stateless service. Partition names are in the format '0','1''N-1'
 *
 * @member {number} minPartitionCount Minimum number of named partitions of the
 * service.
 * @member {number} maxPartitionCount Maximum number of named partitions of the
 * service.
 * @member {number} scaleIncrement The number of instances to add or remove
 * during a scaling operation.
 */
export interface AddRemoveIncrementalNamedPartitionScalingMechanism extends ScalingMechanismDescription {
  minPartitionCount: number;
  maxPartitionCount: number;
  scaleIncrement: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationCreatedEvent class.
 * @constructor
 * Application Created event.
 *
 * @member {string} applicationTypeName Application type name.
 * @member {string} applicationTypeVersion Application type version.
 * @member {string} applicationDefinitionKind Application definition kind.
 */
export interface ApplicationCreatedEvent extends ApplicationEvent {
  applicationTypeName: string;
  applicationTypeVersion: string;
  applicationDefinitionKind: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationDeletedEvent class.
 * @constructor
 * Application Deleted event.
 *
 * @member {string} applicationTypeName Application type name.
 * @member {string} applicationTypeVersion Application type version.
 */
export interface ApplicationDeletedEvent extends ApplicationEvent {
  applicationTypeName: string;
  applicationTypeVersion: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationNewHealthReportEvent class.
 * @constructor
 * Application Health Report Created event.
 *
 * @member {number} applicationInstanceId Id of Application instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface ApplicationNewHealthReportEvent extends ApplicationEvent {
  applicationInstanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the ApplicationHealthReportExpiredEvent class.
 * @constructor
 * Application Health Report Expired event.
 *
 * @member {number} applicationInstanceId Id of Application instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface ApplicationHealthReportExpiredEvent extends ApplicationEvent {
  applicationInstanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeCompletedEvent class.
 * @constructor
 * Application Upgrade Completed event.
 *
 * @member {string} applicationTypeName Application type name.
 * @member {string} applicationTypeVersion Application type version.
 * @member {number} overallUpgradeElapsedTimeInMs Overall upgrade time in
 * milli-seconds.
 */
export interface ApplicationUpgradeCompletedEvent extends ApplicationEvent {
  applicationTypeName: string;
  applicationTypeVersion: string;
  overallUpgradeElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeDomainCompletedEvent class.
 * @constructor
 * Application Upgrade Domain Completed event.
 *
 * @member {string} applicationTypeName Application type name.
 * @member {string} currentApplicationTypeVersion Current Application type
 * version.
 * @member {string} applicationTypeVersion Target Application type version.
 * @member {string} upgradeState State of upgrade.
 * @member {string} upgradeDomains Upgrade domains.
 * @member {number} upgradeDomainElapsedTimeInMs Upgrade time of domain in
 * milli-seconds.
 */
export interface ApplicationUpgradeDomainCompletedEvent extends ApplicationEvent {
  applicationTypeName: string;
  currentApplicationTypeVersion: string;
  applicationTypeVersion: string;
  upgradeState: string;
  upgradeDomains: string;
  upgradeDomainElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeRollbackCompletedEvent class.
 * @constructor
 * Application Upgrade Rollback Completed event.
 *
 * @member {string} applicationTypeName Application type name.
 * @member {string} applicationTypeVersion Application type version.
 * @member {string} failureReason Describes reason of failure.
 * @member {number} overallUpgradeElapsedTimeInMs Overall upgrade time in
 * milli-seconds.
 */
export interface ApplicationUpgradeRollbackCompletedEvent extends ApplicationEvent {
  applicationTypeName: string;
  applicationTypeVersion: string;
  failureReason: string;
  overallUpgradeElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeRollbackStartedEvent class.
 * @constructor
 * Application Upgrade Rollback Started event.
 *
 * @member {string} applicationTypeName Application type name.
 * @member {string} currentApplicationTypeVersion Current Application type
 * version.
 * @member {string} applicationTypeVersion Target Application type version.
 * @member {string} failureReason Describes reason of failure.
 * @member {number} overallUpgradeElapsedTimeInMs Overall upgrade time in
 * milli-seconds.
 */
export interface ApplicationUpgradeRollbackStartedEvent extends ApplicationEvent {
  applicationTypeName: string;
  currentApplicationTypeVersion: string;
  applicationTypeVersion: string;
  failureReason: string;
  overallUpgradeElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ApplicationUpgradeStartedEvent class.
 * @constructor
 * Application Upgrade Started event.
 *
 * @member {string} applicationTypeName Application type name.
 * @member {string} currentApplicationTypeVersion Current Application type
 * version.
 * @member {string} applicationTypeVersion Target Application type version.
 * @member {string} upgradeType Type of upgrade.
 * @member {string} rollingUpgradeMode Mode of upgrade.
 * @member {string} failureAction Action if failed.
 */
export interface ApplicationUpgradeStartedEvent extends ApplicationEvent {
  applicationTypeName: string;
  currentApplicationTypeVersion: string;
  applicationTypeVersion: string;
  upgradeType: string;
  rollingUpgradeMode: string;
  failureAction: string;
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationNewHealthReportEvent class.
 * @constructor
 * Deployed Application Health Report Created event.
 *
 * @member {number} applicationInstanceId Id of Application instance.
 * @member {string} nodeName The name of a Service Fabric node.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface DeployedApplicationNewHealthReportEvent extends ApplicationEvent {
  applicationInstanceId: number;
  nodeName: string;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the DeployedApplicationHealthReportExpiredEvent class.
 * @constructor
 * Deployed Application Health Report Expired event.
 *
 * @member {number} applicationInstanceId Id of Application instance.
 * @member {string} nodeName The name of a Service Fabric node.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface DeployedApplicationHealthReportExpiredEvent extends ApplicationEvent {
  applicationInstanceId: number;
  nodeName: string;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the ApplicationProcessExitedEvent class.
 * @constructor
 * Process Exited event.
 *
 * @member {string} serviceName Name of Service.
 * @member {string} servicePackageName Name of Service package.
 * @member {string} servicePackageActivationId Activation Id of Service
 * package.
 * @member {boolean} isExclusive Indicates IsExclusive flag.
 * @member {string} codePackageName Name of Code package.
 * @member {string} entryPointType Type of EntryPoint.
 * @member {string} exeName Name of executable.
 * @member {number} processId Process Id.
 * @member {string} hostId Host Id.
 * @member {number} exitCode Exit code of process.
 * @member {boolean} unexpectedTermination Indicates if termination is
 * unexpected.
 * @member {date} startTime Start time of process.
 */
export interface ApplicationProcessExitedEvent extends ApplicationEvent {
  serviceName: string;
  servicePackageName: string;
  servicePackageActivationId: string;
  isExclusive: boolean;
  codePackageName: string;
  entryPointType: string;
  exeName: string;
  processId: number;
  hostId: string;
  exitCode: number;
  unexpectedTermination: boolean;
  startTime: Date;
}

/**
 * @class
 * Initializes a new instance of the ApplicationContainerInstanceExitedEvent class.
 * @constructor
 * Container Exited event.
 *
 * @member {string} serviceName Name of Service.
 * @member {string} servicePackageName Name of Service package.
 * @member {string} servicePackageActivationId Activation Id of Service
 * package.
 * @member {boolean} isExclusive Indicates IsExclusive flag.
 * @member {string} codePackageName Name of Code package.
 * @member {string} entryPointType Type of EntryPoint.
 * @member {string} imageName Name of Container image.
 * @member {string} containerName Name of Container.
 * @member {string} hostId Host Id.
 * @member {number} exitCode Exit code of process.
 * @member {boolean} unexpectedTermination Indicates if termination is
 * unexpected.
 * @member {date} startTime Start time of process.
 */
export interface ApplicationContainerInstanceExitedEvent extends ApplicationEvent {
  serviceName: string;
  servicePackageName: string;
  servicePackageActivationId: string;
  isExclusive: boolean;
  codePackageName: string;
  entryPointType: string;
  imageName: string;
  containerName: string;
  hostId: string;
  exitCode: number;
  unexpectedTermination: boolean;
  startTime: Date;
}

/**
 * @class
 * Initializes a new instance of the NodeAbortedEvent class.
 * @constructor
 * Node Aborted event.
 *
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} nodeId Id of Node.
 * @member {string} upgradeDomain Upgrade domain of Node.
 * @member {string} faultDomain Fault domain of Node.
 * @member {string} ipAddressOrFQDN IP address or FQDN.
 * @member {string} hostname Name of Host.
 * @member {boolean} isSeedNode Indicates if it is seed node.
 * @member {string} nodeVersion Version of Node.
 */
export interface NodeAbortedEvent extends NodeEvent {
  nodeInstance: number;
  nodeId: string;
  upgradeDomain: string;
  faultDomain: string;
  ipAddressOrFQDN: string;
  hostname: string;
  isSeedNode: boolean;
  nodeVersion: string;
}

/**
 * @class
 * Initializes a new instance of the NodeAddedToClusterEvent class.
 * @constructor
 * Node Added event.
 *
 * @member {string} nodeId Id of Node.
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} nodeType Type of Node.
 * @member {string} fabricVersion Fabric version.
 * @member {string} ipAddressOrFQDN IP address or FQDN.
 * @member {string} nodeCapacities Capacities.
 */
export interface NodeAddedToClusterEvent extends NodeEvent {
  nodeId: string;
  nodeInstance: number;
  nodeType: string;
  fabricVersion: string;
  ipAddressOrFQDN: string;
  nodeCapacities: string;
}

/**
 * @class
 * Initializes a new instance of the NodeClosedEvent class.
 * @constructor
 * Node Closed event.
 *
 * @member {string} nodeId Id of Node.
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} error Describes error.
 */
export interface NodeClosedEvent extends NodeEvent {
  nodeId: string;
  nodeInstance: number;
  error: string;
}

/**
 * @class
 * Initializes a new instance of the NodeDeactivateCompletedEvent class.
 * @constructor
 * Node Deactivate Completed event.
 *
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} effectiveDeactivateIntent Describes deactivate intent.
 * @member {string} batchIdsWithDeactivateIntent Batch Ids.
 * @member {date} startTime Start time.
 */
export interface NodeDeactivateCompletedEvent extends NodeEvent {
  nodeInstance: number;
  effectiveDeactivateIntent: string;
  batchIdsWithDeactivateIntent: string;
  startTime: Date;
}

/**
 * @class
 * Initializes a new instance of the NodeDeactivateStartedEvent class.
 * @constructor
 * Node Deactivate Started event.
 *
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} batchId Batch Id.
 * @member {string} deactivateIntent Describes deactivate intent.
 */
export interface NodeDeactivateStartedEvent extends NodeEvent {
  nodeInstance: number;
  batchId: string;
  deactivateIntent: string;
}

/**
 * @class
 * Initializes a new instance of the NodeDownEvent class.
 * @constructor
 * Node Down event.
 *
 * @member {number} nodeInstance Id of Node instance.
 * @member {date} lastNodeUpAt Time when Node was last up.
 */
export interface NodeDownEvent extends NodeEvent {
  nodeInstance: number;
  lastNodeUpAt: Date;
}

/**
 * @class
 * Initializes a new instance of the NodeNewHealthReportEvent class.
 * @constructor
 * Node Health Report Created event.
 *
 * @member {number} nodeInstanceId Id of Node instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface NodeNewHealthReportEvent extends NodeEvent {
  nodeInstanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the NodeHealthReportExpiredEvent class.
 * @constructor
 * Node Health Report Expired event.
 *
 * @member {number} nodeInstanceId Id of Node instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface NodeHealthReportExpiredEvent extends NodeEvent {
  nodeInstanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the NodeOpenSucceededEvent class.
 * @constructor
 * Node Opened Succeeded event.
 *
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} nodeId Id of Node.
 * @member {string} upgradeDomain Upgrade domain of Node.
 * @member {string} faultDomain Fault domain of Node.
 * @member {string} ipAddressOrFQDN IP address or FQDN.
 * @member {string} hostname Name of Host.
 * @member {boolean} isSeedNode Indicates if it is seed node.
 * @member {string} nodeVersion Version of Node.
 */
export interface NodeOpenSucceededEvent extends NodeEvent {
  nodeInstance: number;
  nodeId: string;
  upgradeDomain: string;
  faultDomain: string;
  ipAddressOrFQDN: string;
  hostname: string;
  isSeedNode: boolean;
  nodeVersion: string;
}

/**
 * @class
 * Initializes a new instance of the NodeOpenFailedEvent class.
 * @constructor
 * Node Open Failed event.
 *
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} nodeId Id of Node.
 * @member {string} upgradeDomain Upgrade domain of Node.
 * @member {string} faultDomain Fault domain of Node.
 * @member {string} ipAddressOrFQDN IP address or FQDN.
 * @member {string} hostname Name of Host.
 * @member {boolean} isSeedNode Indicates if it is seed node.
 * @member {string} nodeVersion Version of Node.
 * @member {string} error Describes the error.
 */
export interface NodeOpenFailedEvent extends NodeEvent {
  nodeInstance: number;
  nodeId: string;
  upgradeDomain: string;
  faultDomain: string;
  ipAddressOrFQDN: string;
  hostname: string;
  isSeedNode: boolean;
  nodeVersion: string;
  error: string;
}

/**
 * @class
 * Initializes a new instance of the NodeRemovedFromClusterEvent class.
 * @constructor
 * Node Removed event.
 *
 * @member {string} nodeId Id of Node.
 * @member {number} nodeInstance Id of Node instance.
 * @member {string} nodeType Type of Node.
 * @member {string} fabricVersion Fabric version.
 * @member {string} ipAddressOrFQDN IP address or FQDN.
 * @member {string} nodeCapacities Capacities.
 */
export interface NodeRemovedFromClusterEvent extends NodeEvent {
  nodeId: string;
  nodeInstance: number;
  nodeType: string;
  fabricVersion: string;
  ipAddressOrFQDN: string;
  nodeCapacities: string;
}

/**
 * @class
 * Initializes a new instance of the NodeUpEvent class.
 * @constructor
 * Node Up event.
 *
 * @member {number} nodeInstance Id of Node instance.
 * @member {date} lastNodeDownAt Time when Node was last down.
 */
export interface NodeUpEvent extends NodeEvent {
  nodeInstance: number;
  lastNodeDownAt: Date;
}

/**
 * @class
 * Initializes a new instance of the PartitionNewHealthReportEvent class.
 * @constructor
 * Partition Health Report Created event.
 *
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface PartitionNewHealthReportEvent extends PartitionEvent {
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the PartitionHealthReportExpiredEvent class.
 * @constructor
 * Partition Health Report Expired event.
 *
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface PartitionHealthReportExpiredEvent extends PartitionEvent {
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the PartitionReconfiguredEvent class.
 * @constructor
 * Partition Reconfiguration event.
 *
 * @member {string} nodeName The name of a Service Fabric node.
 * @member {string} nodeInstanceId Id of Node instance.
 * @member {string} serviceType Type of Service.
 * @member {number} ccEpochDataLossVersion CcEpochDataLoss version.
 * @member {number} ccEpochConfigVersion CcEpochConfig version.
 * @member {string} reconfigType Type of reconfiguration.
 * @member {string} result Describes reconfiguration result.
 * @member {number} phase0DurationMs Duration of Phase0 in milli-seconds.
 * @member {number} phase1DurationMs Duration of Phase1 in milli-seconds.
 * @member {number} phase2DurationMs Duration of Phase2 in milli-seconds.
 * @member {number} phase3DurationMs Duration of Phase3 in milli-seconds.
 * @member {number} phase4DurationMs Duration of Phase4 in milli-seconds.
 * @member {number} totalDurationMs Total duration in milli-seconds.
 */
export interface PartitionReconfiguredEvent extends PartitionEvent {
  nodeName: string;
  nodeInstanceId: string;
  serviceType: string;
  ccEpochDataLossVersion: number;
  ccEpochConfigVersion: number;
  reconfigType: string;
  result: string;
  phase0DurationMs: number;
  phase1DurationMs: number;
  phase2DurationMs: number;
  phase3DurationMs: number;
  phase4DurationMs: number;
  totalDurationMs: number;
}

/**
 * @class
 * Initializes a new instance of the PartitionPrimaryMoveAnalysisEvent class.
 * @constructor
 * Partition Primary Move Analysis event.
 *
 * @member {date} whenMoveCompleted Time when the move was completed.
 * @member {string} previousNode The name of a Service Fabric node.
 * @member {string} currentNode The name of a Service Fabric node.
 * @member {string} moveReason Move reason.
 * @member {string} relevantTraces Relevant traces.
 */
export interface PartitionPrimaryMoveAnalysisEvent extends PartitionAnalysisEvent {
  whenMoveCompleted: Date;
  previousNode: string;
  currentNode: string;
  moveReason: string;
  relevantTraces: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceCreatedEvent class.
 * @constructor
 * Service Created event.
 *
 * @member {string} serviceTypeName Service type name.
 * @member {string} applicationName Application name.
 * @member {string} applicationTypeName Application type name.
 * @member {number} serviceInstance Id of Service instance.
 * @member {boolean} isStateful Indicates if Service is stateful.
 * @member {number} partitionCount Number of partitions.
 * @member {number} targetReplicaSetSize Size of target replicas set.
 * @member {number} minReplicaSetSize Minimum size of replicas set.
 * @member {string} servicePackageVersion Version of Service package.
 * @member {uuid} partitionId An internal ID used by Service Fabric to uniquely
 * identify a partition. This is a randomly generated GUID when the service was
 * created. The partition ID is unique and does not change for the lifetime of
 * the service. If the same service was deleted and recreated the IDs of its
 * partitions would be different.
 */
export interface ServiceCreatedEvent extends ServiceEvent {
  serviceTypeName: string;
  applicationName: string;
  applicationTypeName: string;
  serviceInstance: number;
  isStateful: boolean;
  partitionCount: number;
  targetReplicaSetSize: number;
  minReplicaSetSize: number;
  servicePackageVersion: string;
  partitionId: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceDeletedEvent class.
 * @constructor
 * Service Deleted event.
 *
 * @member {string} serviceTypeName Service type name.
 * @member {string} applicationName Application name.
 * @member {string} applicationTypeName Application type name.
 * @member {number} serviceInstance Id of Service instance.
 * @member {boolean} isStateful Indicates if Service is stateful.
 * @member {number} partitionCount Number of partitions.
 * @member {number} targetReplicaSetSize Size of target replicas set.
 * @member {number} minReplicaSetSize Minimum size of replicas set.
 * @member {string} servicePackageVersion Version of Service package.
 */
export interface ServiceDeletedEvent extends ServiceEvent {
  serviceTypeName: string;
  applicationName: string;
  applicationTypeName: string;
  serviceInstance: number;
  isStateful: boolean;
  partitionCount: number;
  targetReplicaSetSize: number;
  minReplicaSetSize: number;
  servicePackageVersion: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceNewHealthReportEvent class.
 * @constructor
 * Service Health Report Created event.
 *
 * @member {number} instanceId Id of Service instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface ServiceNewHealthReportEvent extends ServiceEvent {
  instanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the ServiceHealthReportExpiredEvent class.
 * @constructor
 * Service Health Report Expired event.
 *
 * @member {number} instanceId Id of Service instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface ServiceHealthReportExpiredEvent extends ServiceEvent {
  instanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageNewHealthReportEvent class.
 * @constructor
 * Deployed Service Health Report Created event.
 *
 * @member {string} serviceManifestName Service manifest name.
 * @member {number} servicePackageInstanceId Id of Service package instance.
 * @member {string} servicePackageActivationId Id of Service package
 * activation.
 * @member {string} nodeName The name of a Service Fabric node.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface DeployedServicePackageNewHealthReportEvent extends ApplicationEvent {
  serviceManifestName: string;
  servicePackageInstanceId: number;
  servicePackageActivationId: string;
  nodeName: string;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the DeployedServicePackageHealthReportExpiredEvent class.
 * @constructor
 * Deployed Service Health Report Expired event.
 *
 * @member {string} serviceManifest Service manifest name.
 * @member {number} servicePackageInstanceId Id of Service package instance.
 * @member {string} servicePackageActivationId Id of Service package
 * activation.
 * @member {string} nodeName The name of a Service Fabric node.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface DeployedServicePackageHealthReportExpiredEvent extends ApplicationEvent {
  serviceManifest: string;
  servicePackageInstanceId: number;
  servicePackageActivationId: string;
  nodeName: string;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the StatefulReplicaNewHealthReportEvent class.
 * @constructor
 * Stateful Replica Health Report Created event.
 *
 * @member {number} replicaInstanceId Id of Replica instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface StatefulReplicaNewHealthReportEvent extends ReplicaEvent {
  replicaInstanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the StatefulReplicaHealthReportExpiredEvent class.
 * @constructor
 * Stateful Replica Health Report Expired event.
 *
 * @member {number} replicaInstanceId Id of Replica instance.
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface StatefulReplicaHealthReportExpiredEvent extends ReplicaEvent {
  replicaInstanceId: number;
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the StatelessReplicaNewHealthReportEvent class.
 * @constructor
 * Stateless Replica Health Report Created event.
 *
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface StatelessReplicaNewHealthReportEvent extends ReplicaEvent {
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the StatelessReplicaHealthReportExpiredEvent class.
 * @constructor
 * Stateless Replica Health Report Expired event.
 *
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface StatelessReplicaHealthReportExpiredEvent extends ReplicaEvent {
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the ClusterNewHealthReportEvent class.
 * @constructor
 * Cluster Health Report Created event.
 *
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface ClusterNewHealthReportEvent extends ClusterEvent {
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the ClusterHealthReportExpiredEvent class.
 * @constructor
 * Cluster Health Report Expired event.
 *
 * @member {string} sourceId Id of report source.
 * @member {string} property Describes the property.
 * @member {string} healthState Describes the property health state.
 * @member {number} timeToLiveMs Time to live in milli-seconds.
 * @member {number} sequenceNumber Sequence number of report.
 * @member {string} description Description of report.
 * @member {boolean} removeWhenExpired Indicates the removal when it expires.
 * @member {date} sourceUtcTimestamp Source time.
 */
export interface ClusterHealthReportExpiredEvent extends ClusterEvent {
  sourceId: string;
  property: string;
  healthState: string;
  timeToLiveMs: number;
  sequenceNumber: number;
  description: string;
  removeWhenExpired: boolean;
  sourceUtcTimestamp: Date;
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeCompletedEvent class.
 * @constructor
 * Cluster Upgrade Completed event.
 *
 * @member {string} targetClusterVersion Target Cluster version.
 * @member {number} overallUpgradeElapsedTimeInMs Overall duration of upgrade
 * in milli-seconds.
 */
export interface ClusterUpgradeCompletedEvent extends ClusterEvent {
  targetClusterVersion: string;
  overallUpgradeElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeDomainCompletedEvent class.
 * @constructor
 * Cluster Upgrade Domain Completed event.
 *
 * @member {string} targetClusterVersion Target Cluster version.
 * @member {string} upgradeState State of upgrade.
 * @member {string} upgradeDomains Upgrade domains.
 * @member {number} upgradeDomainElapsedTimeInMs Duration of domain upgrade in
 * milli-seconds.
 */
export interface ClusterUpgradeDomainCompletedEvent extends ClusterEvent {
  targetClusterVersion: string;
  upgradeState: string;
  upgradeDomains: string;
  upgradeDomainElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeRollbackCompletedEvent class.
 * @constructor
 * Cluster Upgrade Rollback Completed event.
 *
 * @member {string} targetClusterVersion Target Cluster version.
 * @member {string} failureReason Describes failure.
 * @member {number} overallUpgradeElapsedTimeInMs Overall duration of upgrade
 * in milli-seconds.
 */
export interface ClusterUpgradeRollbackCompletedEvent extends ClusterEvent {
  targetClusterVersion: string;
  failureReason: string;
  overallUpgradeElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeRollbackStartedEvent class.
 * @constructor
 * Cluster Upgrade Rollback Started event.
 *
 * @member {string} targetClusterVersion Target Cluster version.
 * @member {string} failureReason Describes failure.
 * @member {number} overallUpgradeElapsedTimeInMs Overall duration of upgrade
 * in milli-seconds.
 */
export interface ClusterUpgradeRollbackStartedEvent extends ClusterEvent {
  targetClusterVersion: string;
  failureReason: string;
  overallUpgradeElapsedTimeInMs: number;
}

/**
 * @class
 * Initializes a new instance of the ClusterUpgradeStartedEvent class.
 * @constructor
 * Cluster Upgrade Started event.
 *
 * @member {string} currentClusterVersion Current Cluster version.
 * @member {string} targetClusterVersion Target Cluster version.
 * @member {string} upgradeType Type of upgrade.
 * @member {string} rollingUpgradeMode Mode of upgrade.
 * @member {string} failureAction Action if failed.
 */
export interface ClusterUpgradeStartedEvent extends ClusterEvent {
  currentClusterVersion: string;
  targetClusterVersion: string;
  upgradeType: string;
  rollingUpgradeMode: string;
  failureAction: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosStoppedEvent class.
 * @constructor
 * Chaos Stopped event.
 *
 * @member {string} reason Describes reason.
 */
export interface ChaosStoppedEvent extends ClusterEvent {
  reason: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosStartedEvent class.
 * @constructor
 * Chaos Started event.
 *
 * @member {number} maxConcurrentFaults Maximum number of concurrent faults.
 * @member {number} timeToRunInSeconds Time to run in seconds.
 * @member {number} maxClusterStabilizationTimeoutInSeconds Maximum timeout for
 * cluster stabilization in seconds.
 * @member {number} waitTimeBetweenIterationsInSeconds Wait time between
 * iterations in seconds.
 * @member {number} waitTimeBetweenFautlsInSeconds Wait time between faults in
 * seconds.
 * @member {boolean} moveReplicaFaultEnabled Indicates MoveReplica fault is
 * enabled.
 * @member {string} includedNodeTypeList List of included Node types.
 * @member {string} includedApplicationList List of included Applications.
 * @member {string} clusterHealthPolicy Health policy.
 * @member {string} chaosContext Chaos Context.
 */
export interface ChaosStartedEvent extends ClusterEvent {
  maxConcurrentFaults: number;
  timeToRunInSeconds: number;
  maxClusterStabilizationTimeoutInSeconds: number;
  waitTimeBetweenIterationsInSeconds: number;
  waitTimeBetweenFautlsInSeconds: number;
  moveReplicaFaultEnabled: boolean;
  includedNodeTypeList: string;
  includedApplicationList: string;
  clusterHealthPolicy: string;
  chaosContext: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosCodePackageRestartScheduledEvent class.
 * @constructor
 * Chaos Restart Code Package Fault Scheduled event.
 *
 * @member {uuid} faultGroupId Id of fault group.
 * @member {uuid} faultId Id of fault.
 * @member {string} nodeName The name of a Service Fabric node.
 * @member {string} serviceManifestName Service manifest name.
 * @member {string} codePackageName Code package name.
 * @member {string} servicePackageActivationId Id of Service package
 * activation.
 */
export interface ChaosCodePackageRestartScheduledEvent extends ApplicationEvent {
  faultGroupId: string;
  faultId: string;
  nodeName: string;
  serviceManifestName: string;
  codePackageName: string;
  servicePackageActivationId: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosReplicaRemovalScheduledEvent class.
 * @constructor
 * Chaos Remove Replica Fault Scheduled event.
 *
 * @member {uuid} faultGroupId Id of fault group.
 * @member {uuid} faultId Id of fault.
 * @member {string} serviceUri Service name.
 */
export interface ChaosReplicaRemovalScheduledEvent extends ReplicaEvent {
  faultGroupId: string;
  faultId: string;
  serviceUri: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosPartitionSecondaryMoveScheduledEvent class.
 * @constructor
 * Chaos Move Secondary Fault Scheduled event.
 *
 * @member {uuid} faultGroupId Id of fault group.
 * @member {uuid} faultId Id of fault.
 * @member {string} serviceName Service name.
 * @member {string} sourceNode The name of a Service Fabric node.
 * @member {string} destinationNode The name of a Service Fabric node.
 * @member {boolean} forcedMove Indicates a forced move.
 */
export interface ChaosPartitionSecondaryMoveScheduledEvent extends PartitionEvent {
  faultGroupId: string;
  faultId: string;
  serviceName: string;
  sourceNode: string;
  destinationNode: string;
  forcedMove: boolean;
}

/**
 * @class
 * Initializes a new instance of the ChaosPartitionPrimaryMoveScheduledEvent class.
 * @constructor
 * Chaos Move Primary Fault Scheduled event.
 *
 * @member {uuid} faultGroupId Id of fault group.
 * @member {uuid} faultId Id of fault.
 * @member {string} serviceName Service name.
 * @member {string} nodeTo The name of a Service Fabric node.
 * @member {boolean} forcedMove Indicates a forced move.
 */
export interface ChaosPartitionPrimaryMoveScheduledEvent extends PartitionEvent {
  faultGroupId: string;
  faultId: string;
  serviceName: string;
  nodeTo: string;
  forcedMove: boolean;
}

/**
 * @class
 * Initializes a new instance of the ChaosReplicaRestartScheduledEvent class.
 * @constructor
 * Chaos Restart Replica Fault Scheduled event.
 *
 * @member {uuid} faultGroupId Id of fault group.
 * @member {uuid} faultId Id of fault.
 * @member {string} serviceUri Service name.
 */
export interface ChaosReplicaRestartScheduledEvent extends ReplicaEvent {
  faultGroupId: string;
  faultId: string;
  serviceUri: string;
}

/**
 * @class
 * Initializes a new instance of the ChaosNodeRestartScheduledEvent class.
 * @constructor
 * Chaos Restart Node Fault Scheduled event.
 *
 * @member {number} nodeInstanceId Id of Node instance.
 * @member {uuid} faultGroupId Id of fault group.
 * @member {uuid} faultId Id of fault.
 */
export interface ChaosNodeRestartScheduledEvent extends NodeEvent {
  nodeInstanceId: number;
  faultGroupId: string;
  faultId: string;
}

/**
 * @class
 * Initializes a new instance of the SecretResourcePropertiesBase class.
 * @constructor
 * This type describes the properties of a secret resource, including its kind.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface SecretResourcePropertiesBase {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the SecretResourceProperties class.
 * @constructor
 * Describes the properties of a secret resource.
 *
 * @member {string} [description] User readable description of the secret.
 * @member {string} [status] Status of the resource. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [statusDetails] Gives additional information about the
 * current status of the secret.
 * @member {string} [contentType] The type of the content stored in the secret
 * value. The value of this property is opaque to Service Fabric. Once set, the
 * value of this property cannot be changed.
 */
export interface SecretResourceProperties extends SecretResourcePropertiesBase {
  description?: string;
  readonly status?: string;
  readonly statusDetails?: string;
  contentType?: string;
}

/**
 * @class
 * Initializes a new instance of the InlinedValueSecretResourceProperties class.
 * @constructor
 * Describes the properties of a secret resource whose value is provided
 * explicitly as plaintext. The secret resource may have multiple values, each
 * being uniquely versioned. The secret value of each version is stored
 * encrypted, and delivered as plaintext into the context of applications
 * referencing it.
 *
 */
export interface InlinedValueSecretResourceProperties extends SecretResourceProperties {
}

/**
 * @class
 * Initializes a new instance of the SecretResourceDescription class.
 * @constructor
 * This type describes a secret resource.
 *
 * @member {object} properties Describes the properties of a secret resource.
 * @member {string} [properties.description] User readable description of the
 * secret.
 * @member {string} [properties.status] Status of the resource. Possible values
 * include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [properties.statusDetails] Gives additional information
 * about the current status of the secret.
 * @member {string} [properties.contentType] The type of the content stored in
 * the secret value. The value of this property is opaque to Service Fabric.
 * Once set, the value of this property cannot be changed.
 * @member {string} name Name of the Secret resource.
 */
export interface SecretResourceDescription {
  properties: SecretResourceProperties;
  name: string;
}

/**
 * @class
 * Initializes a new instance of the PagedSecretResourceDescriptionList class.
 * @constructor
 * The list of secret resources. The list is paged when all of the results
 * cannot fit in a single message. The next set of results can be obtained by
 * executing the same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] One page of the list.
 */
export interface PagedSecretResourceDescriptionList {
  continuationToken?: string;
  items?: SecretResourceDescription[];
}

/**
 * @class
 * Initializes a new instance of the SecretValue class.
 * @constructor
 * This type represents the unencrypted value of the secret.
 *
 * @member {string} [value] The actual value of the secret.
 */
export interface SecretValue {
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the SecretValueProperties class.
 * @constructor
 * This type describes properties of secret value resource.
 *
 * @member {string} [value] The actual value of the secret.
 */
export interface SecretValueProperties {
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the SecretValueResourceDescription class.
 * @constructor
 * This type describes a value of a secret resource. The name of this resource
 * is the version identifier corresponding to this secret value.
 *
 * @member {string} name Version identifier of the secret value.
 * @member {string} [value] The actual value of the secret.
 */
export interface SecretValueResourceDescription {
  name: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the PagedSecretValueResourceDescriptionList class.
 * @constructor
 * The list of values of a secret resource, paged if the number of results
 * exceeds the limits of a single message. The next set of results can be
 * obtained by executing the same query with the continuation token provided in
 * the previous page.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] One page of the list.
 */
export interface PagedSecretValueResourceDescriptionList {
  continuationToken?: string;
  items?: SecretValueResourceDescription[];
}

/**
 * @class
 * Initializes a new instance of the VolumeProviderParametersAzureFile class.
 * @constructor
 * This type describes a volume provided by an Azure Files file share.
 *
 * @member {string} accountName Name of the Azure storage account for the File
 * Share.
 * @member {string} [accountKey] Access key of the Azure storage account for
 * the File Share.
 * @member {string} shareName Name of the Azure Files file share that provides
 * storage for the volume.
 */
export interface VolumeProviderParametersAzureFile {
  accountName: string;
  accountKey?: string;
  shareName: string;
}

/**
 * @class
 * Initializes a new instance of the VolumeReference class.
 * @constructor
 * Describes a reference to a volume resource.
 *
 * @member {string} name Name of the volume being referenced.
 * @member {boolean} [readOnly] The flag indicating whether the volume is read
 * only. Default is 'false'.
 * @member {string} destinationPath The path within the container at which the
 * volume should be mounted. Only valid path characters are allowed.
 */
export interface VolumeReference {
  name: string;
  readOnly?: boolean;
  destinationPath: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationScopedVolumeCreationParameters class.
 * @constructor
 * Describes parameters for creating application-scoped volumes.
 *
 * @member {string} [description] User readable description of the volume.
 * @member {string} kind Polymorphic Discriminator
 */
export interface ApplicationScopedVolumeCreationParameters {
  description?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationScopedVolume class.
 * @constructor
 * Describes a volume whose lifetime is scoped to the application's lifetime.
 *
 * @member {object} creationParameters Describes parameters for creating
 * application-scoped volumes.
 * @member {string} [creationParameters.description] User readable description
 * of the volume.
 * @member {string} [creationParameters.kind] Polymorphic Discriminator
 */
export interface ApplicationScopedVolume extends VolumeReference {
  creationParameters: ApplicationScopedVolumeCreationParameters;
}

/**
 * @class
 * Initializes a new instance of the ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk class.
 * @constructor
 * Describes parameters for creating application-scoped volumes provided by
 * Service Fabric Volume Disks
 *
 * @member {string} sizeDisk Volume size. Possible values include: 'Small',
 * 'Medium', 'Large'
 */
export interface ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk extends ApplicationScopedVolumeCreationParameters {
  sizeDisk: string;
}

/**
 * @class
 * Initializes a new instance of the VolumeResourceDescription class.
 * @constructor
 * This type describes a volume resource.
 *
 * @member {string} name Name of the Volume resource.
 * @member {string} [description] User readable description of the volume.
 * @member {string} [status] Status of the volume. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [statusDetails] Gives additional information about the
 * current status of the volume.
 * @member {object} [azureFileParameters] This type describes a volume provided
 * by an Azure Files file share.
 * @member {string} [azureFileParameters.accountName] Name of the Azure storage
 * account for the File Share.
 * @member {string} [azureFileParameters.accountKey] Access key of the Azure
 * storage account for the File Share.
 * @member {string} [azureFileParameters.shareName] Name of the Azure Files
 * file share that provides storage for the volume.
 */
export interface VolumeResourceDescription {
  name: string;
  description?: string;
  readonly status?: string;
  readonly statusDetails?: string;
  azureFileParameters?: VolumeProviderParametersAzureFile;
}

/**
 * @class
 * Initializes a new instance of the PagedVolumeResourceDescriptionList class.
 * @constructor
 * The list of volume resources. The list is paged when all of the results
 * cannot fit in a single message. The next set of results can be obtained by
 * executing the same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] One page of the list.
 */
export interface PagedVolumeResourceDescriptionList {
  continuationToken?: string;
  items?: VolumeResourceDescription[];
}

/**
 * @class
 * Initializes a new instance of the NetworkResourcePropertiesBase class.
 * @constructor
 * This type describes the properties of a network resource, including its
 * kind.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface NetworkResourcePropertiesBase {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkResourceProperties class.
 * @constructor
 * Describes properties of a network resource.
 *
 * @member {string} [description] User readable description of the network.
 * @member {string} [status] Status of the network. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [statusDetails] Gives additional information about the
 * current status of the network.
 */
export interface NetworkResourceProperties extends NetworkResourcePropertiesBase {
  description?: string;
  readonly status?: string;
  readonly statusDetails?: string;
}

/**
 * @class
 * Initializes a new instance of the LocalNetworkResourceProperties class.
 * @constructor
 * Information about a Service Fabric container network local to a single
 * Service Fabric cluster.
 *
 * @member {string} [networkAddressPrefix] Address space for the local
 * container network.
 */
export interface LocalNetworkResourceProperties extends NetworkResourceProperties {
  networkAddressPrefix?: string;
}

/**
 * @class
 * Initializes a new instance of the EndpointRef class.
 * @constructor
 * Describes a reference to a service endpoint.
 *
 * @member {string} [name] Name of the endpoint.
 */
export interface EndpointRef {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkRef class.
 * @constructor
 * Describes a network reference in a service.
 *
 * @member {string} [name] Name of the network
 * @member {array} [endpointRefs] A list of endpoints that are exposed on this
 * network.
 */
export interface NetworkRef {
  name?: string;
  endpointRefs?: EndpointRef[];
}

/**
 * @class
 * Initializes a new instance of the NetworkResourceDescription class.
 * @constructor
 * This type describes a network resource.
 *
 * @member {string} name Name of the Network resource.
 * @member {object} properties Describes properties of a network resource.
 * @member {string} [properties.description] User readable description of the
 * network.
 * @member {string} [properties.status] Status of the network. Possible values
 * include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [properties.statusDetails] Gives additional information
 * about the current status of the network.
 */
export interface NetworkResourceDescription {
  name: string;
  properties: NetworkResourceProperties;
}

/**
 * @class
 * Initializes a new instance of the PagedNetworkResourceDescriptionList class.
 * @constructor
 * The list of network resources. The list is paged when all of the results
 * cannot fit in a single message. The next set of results can be obtained by
 * executing the same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] One page of the list.
 */
export interface PagedNetworkResourceDescriptionList {
  continuationToken?: string;
  items?: NetworkResourceDescription[];
}

/**
 * @class
 * Initializes a new instance of the GatewayDestination class.
 * @constructor
 * Describes destination endpoint for routing traffic.
 *
 * @member {string} applicationName Name of the service fabric Mesh
 * application.
 * @member {string} serviceName service that contains the endpoint.
 * @member {string} endpointName name of the endpoint in the service.
 */
export interface GatewayDestination {
  applicationName: string;
  serviceName: string;
  endpointName: string;
}

/**
 * @class
 * Initializes a new instance of the TcpConfig class.
 * @constructor
 * Describes the tcp configuration for external connectivity for this network.
 *
 * @member {string} name tcp gateway config name.
 * @member {number} port Specifies the port at which the service endpoint below
 * needs to be exposed.
 * @member {object} destination Describes destination endpoint for routing
 * traffic.
 * @member {string} [destination.applicationName] Name of the service fabric
 * Mesh application.
 * @member {string} [destination.serviceName] service that contains the
 * endpoint.
 * @member {string} [destination.endpointName] name of the endpoint in the
 * service.
 */
export interface TcpConfig {
  name: string;
  port: number;
  destination: GatewayDestination;
}

/**
 * @class
 * Initializes a new instance of the HttpRouteMatchPath class.
 * @constructor
 * Path to match for routing.
 *
 * @member {string} value Uri path to match for request.
 * @member {string} [rewrite] replacement string for matched part of the Uri.
 */
export interface HttpRouteMatchPath {
  value: string;
  rewrite?: string;
}

/**
 * @class
 * Initializes a new instance of the HttpRouteMatchHeader class.
 * @constructor
 * Describes header information for http route matching.
 *
 * @member {string} name Name of header to match in request.
 * @member {string} [value] Value of header to match in request.
 * @member {string} [type] how to match header value. Possible values include:
 * 'exact'
 */
export interface HttpRouteMatchHeader {
  name: string;
  value?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the HttpRouteMatchRule class.
 * @constructor
 * Describes a rule for http route matching.
 *
 * @member {object} path Path to match for routing.
 * @member {string} [path.value] Uri path to match for request.
 * @member {string} [path.rewrite] replacement string for matched part of the
 * Uri.
 * @member {array} [headers] headers and their values to match in request.
 */
export interface HttpRouteMatchRule {
  path: HttpRouteMatchPath;
  headers?: HttpRouteMatchHeader[];
}

/**
 * @class
 * Initializes a new instance of the HttpRouteConfig class.
 * @constructor
 * Describes the hostname properties for http routing.
 *
 * @member {string} name http route name.
 * @member {object} match Describes a rule for http route matching.
 * @member {object} [match.path] Path to match for routing.
 * @member {string} [match.path.value] Uri path to match for request.
 * @member {string} [match.path.rewrite] replacement string for matched part of
 * the Uri.
 * @member {array} [match.headers] headers and their values to match in
 * request.
 * @member {object} destination Describes destination endpoint for routing
 * traffic.
 * @member {string} [destination.applicationName] Name of the service fabric
 * Mesh application.
 * @member {string} [destination.serviceName] service that contains the
 * endpoint.
 * @member {string} [destination.endpointName] name of the endpoint in the
 * service.
 */
export interface HttpRouteConfig {
  name: string;
  match: HttpRouteMatchRule;
  destination: GatewayDestination;
}

/**
 * @class
 * Initializes a new instance of the HttpHostConfig class.
 * @constructor
 * Describes the hostname properties for http routing.
 *
 * @member {string} name http hostname config name.
 * @member {array} routes Route information to use for routing. Routes are
 * processed in the order they are specified. Specify routes that are more
 * specific before routes that can handle general cases.
 */
export interface HttpHostConfig {
  name: string;
  routes: HttpRouteConfig[];
}

/**
 * @class
 * Initializes a new instance of the HttpConfig class.
 * @constructor
 * Describes the http configuration for external connectivity for this network.
 *
 * @member {string} name http gateway config name.
 * @member {number} port Specifies the port at which the service endpoint below
 * needs to be exposed.
 * @member {array} hosts description for routing.
 */
export interface HttpConfig {
  name: string;
  port: number;
  hosts: HttpHostConfig[];
}

/**
 * @class
 * Initializes a new instance of the GatewayResourceDescription class.
 * @constructor
 * This type describes a gateway resource.
 *
 * @member {string} name Name of the Gateway resource.
 * @member {string} [description] User readable description of the gateway.
 * @member {object} sourceNetwork Network the gateway should listen on for
 * requests.
 * @member {string} [sourceNetwork.name] Name of the network
 * @member {array} [sourceNetwork.endpointRefs] A list of endpoints that are
 * exposed on this network.
 * @member {object} destinationNetwork Network that the Application is using.
 * @member {string} [destinationNetwork.name] Name of the network
 * @member {array} [destinationNetwork.endpointRefs] A list of endpoints that
 * are exposed on this network.
 * @member {array} [tcp] Configuration for tcp connectivity for this gateway.
 * @member {array} [http] Configuration for http connectivity for this gateway.
 * @member {string} [status] Status of the resource. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [statusDetails] Gives additional information about the
 * current status of the gateway.
 * @member {string} [ipAddress] IP address of the gateway. This is populated in
 * the response and is ignored for incoming requests.
 */
export interface GatewayResourceDescription {
  name: string;
  description?: string;
  sourceNetwork: NetworkRef;
  destinationNetwork: NetworkRef;
  tcp?: TcpConfig[];
  http?: HttpConfig[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly ipAddress?: string;
}

/**
 * @class
 * Initializes a new instance of the PagedGatewayResourceDescriptionList class.
 * @constructor
 * The list of gateway resources. The list is paged when all of the results
 * cannot fit in a single message. The next set of results can be obtained by
 * executing the same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] One page of the list.
 */
export interface PagedGatewayResourceDescriptionList {
  continuationToken?: string;
  items?: GatewayResourceDescription[];
}

/**
 * @class
 * Initializes a new instance of the ImageRegistryCredential class.
 * @constructor
 * Image registry credential.
 *
 * @member {string} server Docker image registry server, without protocol such
 * as `http` and `https`.
 * @member {string} username The username for the private registry.
 * @member {string} [password] The password for the private registry. The
 * password is required for create or update operations, however it is not
 * returned in the get or list operations.
 */
export interface ImageRegistryCredential {
  server: string;
  username: string;
  password?: string;
}

/**
 * @class
 * Initializes a new instance of the EnvironmentVariable class.
 * @constructor
 * Describes an environment variable for the container.
 *
 * @member {string} [name] The name of the environment variable.
 * @member {string} [value] The value of the environment variable.
 */
export interface EnvironmentVariable {
  name?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the Setting class.
 * @constructor
 * Describes a setting for the container. The setting file path can be fetched
 * from environment variable "Fabric_SettingPath". The path for Windows
 * container is "C:\\secrets". The path for Linux container is "/var/secrets".
 *
 * @member {string} [name] The name of the setting.
 * @member {string} [value] The value of the setting.
 */
export interface Setting {
  name?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerLabel class.
 * @constructor
 * Describes a container label.
 *
 * @member {string} name The name of the container label.
 * @member {string} value The value of the container label.
 */
export interface ContainerLabel {
  name: string;
  value: string;
}

/**
 * @class
 * Initializes a new instance of the EndpointProperties class.
 * @constructor
 * Describes a container endpoint.
 *
 * @member {string} name The name of the endpoint.
 * @member {number} [port] Port used by the container.
 */
export interface EndpointProperties {
  name: string;
  port?: number;
}

/**
 * @class
 * Initializes a new instance of the ResourceRequests class.
 * @constructor
 * This type describes the requested resources for a given container. It
 * describes the least amount of resources required for the container. A
 * container can consume more than requested resources up to the specified
 * limits before being restarted. Currently, the requested resources are
 * treated as limits.
 *
 * @member {number} memoryInGB The memory request in GB for this container.
 * @member {number} cpu Requested number of CPU cores. At present, only full
 * cores are supported.
 */
export interface ResourceRequests {
  memoryInGB: number;
  cpu: number;
}

/**
 * @class
 * Initializes a new instance of the ResourceLimits class.
 * @constructor
 * This type describes the resource limits for a given container. It describes
 * the most amount of resources a container is allowed to use before being
 * restarted.
 *
 * @member {number} [memoryInGB] The memory limit in GB.
 * @member {number} [cpu] CPU limits in cores. At present, only full cores are
 * supported.
 */
export interface ResourceLimits {
  memoryInGB?: number;
  cpu?: number;
}

/**
 * @class
 * Initializes a new instance of the ResourceRequirements class.
 * @constructor
 * This type describes the resource requirements for a container or a service.
 *
 * @member {object} requests Describes the requested resources for a given
 * container.
 * @member {number} [requests.memoryInGB] The memory request in GB for this
 * container.
 * @member {number} [requests.cpu] Requested number of CPU cores. At present,
 * only full cores are supported.
 * @member {object} [limits] Describes the maximum limits on the resources for
 * a given container.
 * @member {number} [limits.memoryInGB] The memory limit in GB.
 * @member {number} [limits.cpu] CPU limits in cores. At present, only full
 * cores are supported.
 */
export interface ResourceRequirements {
  requests: ResourceRequests;
  limits?: ResourceLimits;
}

/**
 * @class
 * Initializes a new instance of the DiagnosticsRef class.
 * @constructor
 * Reference to sinks in DiagnosticsDescription.
 *
 * @member {boolean} [enabled] Status of whether or not sinks are enabled.
 * @member {array} [sinkRefs] List of sinks to be used if enabled. References
 * the list of sinks in DiagnosticsDescription.
 */
export interface DiagnosticsRef {
  enabled?: boolean;
  sinkRefs?: string[];
}

/**
 * @class
 * Initializes a new instance of the ReliableCollectionsRef class.
 * @constructor
 * Specifying this parameter adds support for reliable collections
 *
 * @member {string} name Name of ReliableCollection resource. Right now it's
 * not used and you can use any string.
 * @member {boolean} [doNotPersistState] False (the default) if
 * ReliableCollections state is persisted to disk as usual. True if you do not
 * want to persist state, in which case replication is still enabled and you
 * can use ReliableCollections as distributed cache.
 */
export interface ReliableCollectionsRef {
  name: string;
  doNotPersistState?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ContainerState class.
 * @constructor
 * The container state.
 *
 * @member {string} [state] The state of this container
 * @member {date} [startTime] Date/time when the container state started.
 * @member {string} [exitCode] The container exit code.
 * @member {date} [finishTime] Date/time when the container state finished.
 * @member {string} [detailStatus] Human-readable status of this state.
 */
export interface ContainerState {
  state?: string;
  startTime?: Date;
  exitCode?: string;
  finishTime?: Date;
  detailStatus?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerEvent class.
 * @constructor
 * A container event.
 *
 * @member {string} [name] The name of the container event.
 * @member {number} [count] The count of the event.
 * @member {string} [firstTimestamp] Date/time of the first event.
 * @member {string} [lastTimestamp] Date/time of the last event.
 * @member {string} [message] The event message
 * @member {string} [type] The event type.
 */
export interface ContainerEvent {
  name?: string;
  count?: number;
  firstTimestamp?: string;
  lastTimestamp?: string;
  message?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the ContainerInstanceView class.
 * @constructor
 * Runtime information of a container instance.
 *
 * @member {number} [restartCount] The number of times the container has been
 * restarted.
 * @member {object} [currentState] Current container instance state.
 * @member {string} [currentState.state] The state of this container
 * @member {date} [currentState.startTime] Date/time when the container state
 * started.
 * @member {string} [currentState.exitCode] The container exit code.
 * @member {date} [currentState.finishTime] Date/time when the container state
 * finished.
 * @member {string} [currentState.detailStatus] Human-readable status of this
 * state.
 * @member {object} [previousState] Previous container instance state.
 * @member {string} [previousState.state] The state of this container
 * @member {date} [previousState.startTime] Date/time when the container state
 * started.
 * @member {string} [previousState.exitCode] The container exit code.
 * @member {date} [previousState.finishTime] Date/time when the container state
 * finished.
 * @member {string} [previousState.detailStatus] Human-readable status of this
 * state.
 * @member {array} [events] The events of this container instance.
 */
export interface ContainerInstanceView {
  restartCount?: number;
  currentState?: ContainerState;
  previousState?: ContainerState;
  events?: ContainerEvent[];
}

/**
 * @class
 * Initializes a new instance of the ContainerCodePackageProperties class.
 * @constructor
 * Describes a container and its runtime properties.
 *
 * @member {string} name The name of the code package.
 * @member {string} image The Container image to use.
 * @member {object} [imageRegistryCredential] Image registry credential.
 * @member {string} [imageRegistryCredential.server] Docker image registry
 * server, without protocol such as `http` and `https`.
 * @member {string} [imageRegistryCredential.username] The username for the
 * private registry.
 * @member {string} [imageRegistryCredential.password] The password for the
 * private registry. The password is required for create or update operations,
 * however it is not returned in the get or list operations.
 * @member {string} [entrypoint] Override for the default entry point in the
 * container.
 * @member {array} [commands] Command array to execute within the container in
 * exec form.
 * @member {array} [environmentVariables] The environment variables to set in
 * this container
 * @member {array} [settings] The settings to set in this container. The
 * setting file path can be fetched from environment variable
 * "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The
 * path for Linux container is "/var/secrets".
 * @member {array} [labels] The labels to set in this container.
 * @member {array} [endpoints] The endpoints exposed by this container.
 * @member {object} resources The resources required by this container.
 * @member {object} [resources.requests] Describes the requested resources for
 * a given container.
 * @member {number} [resources.requests.memoryInGB] The memory request in GB
 * for this container.
 * @member {number} [resources.requests.cpu] Requested number of CPU cores. At
 * present, only full cores are supported.
 * @member {object} [resources.limits] Describes the maximum limits on the
 * resources for a given container.
 * @member {number} [resources.limits.memoryInGB] The memory limit in GB.
 * @member {number} [resources.limits.cpu] CPU limits in cores. At present,
 * only full cores are supported.
 * @member {array} [volumeRefs] Volumes to be attached to the container. The
 * lifetime of these volumes is independent of the application's lifetime.
 * @member {array} [volumes] Volumes to be attached to the container. The
 * lifetime of these volumes is scoped to the application's lifetime.
 * @member {object} [diagnostics] Reference to sinks in DiagnosticsDescription.
 * @member {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @member {array} [diagnostics.sinkRefs] List of sinks to be used if enabled.
 * References the list of sinks in DiagnosticsDescription.
 * @member {array} [reliableCollectionsRefs] A list of ReliableCollection
 * resources used by this particular code package. Please refer to
 * ReliableCollectionsRef for more details.
 * @member {object} [instanceView] Runtime information of a container instance.
 * @member {number} [instanceView.restartCount] The number of times the
 * container has been restarted.
 * @member {object} [instanceView.currentState] Current container instance
 * state.
 * @member {string} [instanceView.currentState.state] The state of this
 * container
 * @member {date} [instanceView.currentState.startTime] Date/time when the
 * container state started.
 * @member {string} [instanceView.currentState.exitCode] The container exit
 * code.
 * @member {date} [instanceView.currentState.finishTime] Date/time when the
 * container state finished.
 * @member {string} [instanceView.currentState.detailStatus] Human-readable
 * status of this state.
 * @member {object} [instanceView.previousState] Previous container instance
 * state.
 * @member {string} [instanceView.previousState.state] The state of this
 * container
 * @member {date} [instanceView.previousState.startTime] Date/time when the
 * container state started.
 * @member {string} [instanceView.previousState.exitCode] The container exit
 * code.
 * @member {date} [instanceView.previousState.finishTime] Date/time when the
 * container state finished.
 * @member {string} [instanceView.previousState.detailStatus] Human-readable
 * status of this state.
 * @member {array} [instanceView.events] The events of this container instance.
 */
export interface ContainerCodePackageProperties {
  name: string;
  image: string;
  imageRegistryCredential?: ImageRegistryCredential;
  entrypoint?: string;
  commands?: string[];
  environmentVariables?: EnvironmentVariable[];
  settings?: Setting[];
  labels?: ContainerLabel[];
  endpoints?: EndpointProperties[];
  resources: ResourceRequirements;
  volumeRefs?: VolumeReference[];
  volumes?: ApplicationScopedVolume[];
  diagnostics?: DiagnosticsRef;
  reliableCollectionsRefs?: ReliableCollectionsRef[];
  readonly instanceView?: ContainerInstanceView;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingTrigger class.
 * @constructor
 * Describes the trigger for performing auto scaling operation.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface AutoScalingTrigger {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingMechanism class.
 * @constructor
 * Describes the mechanism for performing auto scaling operation. Derived
 * classes will describe the actual mechanism.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface AutoScalingMechanism {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingPolicy class.
 * @constructor
 * Describes the auto scaling policy
 *
 * @member {string} name The name of the auto scaling policy.
 * @member {object} trigger Determines when auto scaling operation will be
 * invoked.
 * @member {string} [trigger.kind] Polymorphic Discriminator
 * @member {object} mechanism The mechanism that is used to scale when auto
 * scaling operation is invoked.
 * @member {string} [mechanism.kind] Polymorphic Discriminator
 */
export interface AutoScalingPolicy {
  name: string;
  trigger: AutoScalingTrigger;
  mechanism: AutoScalingMechanism;
}

/**
 * @class
 * Initializes a new instance of the ServiceResourceDescription class.
 * @constructor
 * This type describes a service resource.
 *
 * @member {string} name Name of the Service resource.
 * @member {string} osType The operation system required by the code in
 * service. Possible values include: 'Linux', 'Windows'
 * @member {array} codePackages Describes the set of code packages that forms
 * the service. A code package describes the container and the properties for
 * running it. All the code packages are started together on the same host and
 * share the same context (network, process etc.).
 * @member {array} [networkRefs] The names of the private networks that this
 * service needs to be part of.
 * @member {object} [diagnostics] Reference to sinks in DiagnosticsDescription.
 * @member {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @member {array} [diagnostics.sinkRefs] List of sinks to be used if enabled.
 * References the list of sinks in DiagnosticsDescription.
 * @member {string} [description] User readable description of the service.
 * @member {number} [replicaCount] The number of replicas of the service to
 * create. Defaults to 1 if not specified.
 * @member {array} [autoScalingPolicies] Auto scaling policies
 * @member {string} [status] Status of the service. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [statusDetails] Gives additional information about the
 * current status of the service.
 * @member {string} [healthState] Describes the health state of an application
 * resource. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
 * 'Unknown'
 * @member {string} [unhealthyEvaluation] When the service's health state is
 * not 'Ok', this additional details from service fabric Health Manager for the
 * user to know why the service is marked unhealthy.
 */
export interface ServiceResourceDescription {
  name: string;
  osType: string;
  codePackages: ContainerCodePackageProperties[];
  networkRefs?: NetworkRef[];
  diagnostics?: DiagnosticsRef;
  description?: string;
  replicaCount?: number;
  autoScalingPolicies?: AutoScalingPolicy[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly healthState?: string;
  readonly unhealthyEvaluation?: string;
}

/**
 * @class
 * Initializes a new instance of the DiagnosticsSinkProperties class.
 * @constructor
 * Properties of a DiagnosticsSink.
 *
 * @member {string} [name] Name of the sink. This value is referenced by
 * DiagnosticsReferenceDescription
 * @member {string} [description] A description of the sink.
 * @member {string} kind Polymorphic Discriminator
 */
export interface DiagnosticsSinkProperties {
  name?: string;
  description?: string;
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the DiagnosticsDescription class.
 * @constructor
 * Describes the diagnostics options available
 *
 * @member {array} [sinks] List of supported sinks that can be referenced.
 * @member {boolean} [enabled] Status of whether or not sinks are enabled.
 * @member {array} [defaultSinkRefs] The sinks to be used if diagnostics is
 * enabled. Sink choices can be overridden at the service and code package
 * level.
 */
export interface DiagnosticsDescription {
  sinks?: DiagnosticsSinkProperties[];
  enabled?: boolean;
  defaultSinkRefs?: string[];
}

/**
 * @class
 * Initializes a new instance of the AzureInternalMonitoringPipelineSinkDescription class.
 * @constructor
 * Diagnostics settings for Geneva.
 *
 * @member {string} [accountName] Azure Internal monitoring pipeline account.
 * @member {string} [namespace] Azure Internal monitoring pipeline account
 * namespace.
 * @member {string} [maConfigUrl] Azure Internal monitoring agent
 * configuration.
 * @member {object} [fluentdConfigUrl] Azure Internal monitoring agent fluentd
 * configuration.
 * @member {string} [autoKeyConfigUrl] Azure Internal monitoring pipeline
 * autokey associated with the certificate.
 */
export interface AzureInternalMonitoringPipelineSinkDescription extends DiagnosticsSinkProperties {
  accountName?: string;
  namespace?: string;
  maConfigUrl?: string;
  fluentdConfigUrl?: any;
  autoKeyConfigUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the AddRemoveReplicaScalingMechanism class.
 * @constructor
 * Describes the horizontal auto scaling mechanism that adds or removes
 * replicas (containers or container groups).
 *
 * @member {number} minCount Minimum number of containers (scale down won't be
 * performed below this number).
 * @member {number} maxCount Maximum number of containers (scale up won't be
 * performed above this number).
 * @member {number} scaleIncrement Each time auto scaling is performed, this
 * number of containers will be added or removed.
 */
export interface AddRemoveReplicaScalingMechanism extends AutoScalingMechanism {
  minCount: number;
  maxCount: number;
  scaleIncrement: number;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingMetric class.
 * @constructor
 * Describes the metric that is used for triggering auto scaling operation.
 * Derived classes will describe resources or metrics.
 *
 * @member {string} kind Polymorphic Discriminator
 */
export interface AutoScalingMetric {
  kind: string;
}

/**
 * @class
 * Initializes a new instance of the AutoScalingResourceMetric class.
 * @constructor
 * Describes the resource that is used for triggering auto scaling.
 *
 * @member {string} name Name of the resource. Possible values include: 'cpu',
 * 'memoryInGB'
 */
export interface AutoScalingResourceMetric extends AutoScalingMetric {
  name: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceProperties class.
 * @constructor
 * Describes properties of a service resource.
 *
 * @member {string} [description] User readable description of the service.
 * @member {number} [replicaCount] The number of replicas of the service to
 * create. Defaults to 1 if not specified.
 * @member {array} [autoScalingPolicies] Auto scaling policies
 * @member {string} [status] Status of the service. Possible values include:
 * 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [statusDetails] Gives additional information about the
 * current status of the service.
 * @member {string} [healthState] Describes the health state of an application
 * resource. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
 * 'Unknown'
 * @member {string} [unhealthyEvaluation] When the service's health state is
 * not 'Ok', this additional details from service fabric Health Manager for the
 * user to know why the service is marked unhealthy.
 */
export interface ServiceProperties {
  description?: string;
  replicaCount?: number;
  autoScalingPolicies?: AutoScalingPolicy[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly healthState?: string;
  readonly unhealthyEvaluation?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceReplicaProperties class.
 * @constructor
 * Describes the properties of a service replica.
 *
 * @member {string} osType The operation system required by the code in
 * service. Possible values include: 'Linux', 'Windows'
 * @member {array} codePackages Describes the set of code packages that forms
 * the service. A code package describes the container and the properties for
 * running it. All the code packages are started together on the same host and
 * share the same context (network, process etc.).
 * @member {array} [networkRefs] The names of the private networks that this
 * service needs to be part of.
 * @member {object} [diagnostics] Reference to sinks in DiagnosticsDescription.
 * @member {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @member {array} [diagnostics.sinkRefs] List of sinks to be used if enabled.
 * References the list of sinks in DiagnosticsDescription.
 */
export interface ServiceReplicaProperties {
  osType: string;
  codePackages: ContainerCodePackageProperties[];
  networkRefs?: NetworkRef[];
  diagnostics?: DiagnosticsRef;
}

/**
 * @class
 * Initializes a new instance of the ServiceReplicaDescription class.
 * @constructor
 * Describes a replica of a service resource.
 *
 * @member {string} replicaName Name of the replica.
 */
export interface ServiceReplicaDescription extends ServiceReplicaProperties {
  replicaName: string;
}

/**
 * @class
 * Initializes a new instance of the AverageLoadScalingTrigger class.
 * @constructor
 * Describes the average load trigger used for auto scaling.
 *
 * @member {object} metric Description of the metric that is used for scaling.
 * @member {string} [metric.kind] Polymorphic Discriminator
 * @member {number} lowerLoadThreshold Lower load threshold (if average load is
 * below this threshold, service will scale down).
 * @member {number} upperLoadThreshold Upper load threshold (if average load is
 * above this threshold, service will scale up).
 * @member {number} scaleIntervalInSeconds Scale interval that indicates how
 * often will this trigger be checked.
 */
export interface AverageLoadScalingTrigger extends AutoScalingTrigger {
  metric: AutoScalingMetric;
  lowerLoadThreshold: number;
  upperLoadThreshold: number;
  scaleIntervalInSeconds: number;
}

/**
 * @class
 * Initializes a new instance of the PagedServiceResourceDescriptionList class.
 * @constructor
 * The list of service resources. The list is paged when all of the results
 * cannot fit in a single message. The next set of results can be obtained by
 * executing the same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] One page of the list.
 */
export interface PagedServiceResourceDescriptionList {
  continuationToken?: string;
  items?: ServiceResourceDescription[];
}

/**
 * @class
 * Initializes a new instance of the PagedServiceReplicaDescriptionList class.
 * @constructor
 * The list of service resource replicas in the cluster. The list is paged when
 * all of the results cannot fit in a single message. The next set of results
 * can be obtained by executing the same query with the continuation token
 * provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] List of service resource replica description.
 */
export interface PagedServiceReplicaDescriptionList {
  continuationToken?: string;
  items?: ServiceReplicaDescription[];
}

/**
 * @class
 * Initializes a new instance of the ApplicationResourceDescription class.
 * @constructor
 * This type describes a application resource.
 *
 * @member {string} name Name of the Application resource.
 * @member {string} [description] User readable description of the application.
 * @member {array} [services] Describes the services in the application. This
 * property is used to create or modify services of the application. On get
 * only the name of the service is returned. The service description can be
 * obtained by querying for the service resource.
 * @member {object} [diagnostics] Describes the diagnostics definition and
 * usage for an application resource.
 * @member {array} [diagnostics.sinks] List of supported sinks that can be
 * referenced.
 * @member {boolean} [diagnostics.enabled] Status of whether or not sinks are
 * enabled.
 * @member {array} [diagnostics.defaultSinkRefs] The sinks to be used if
 * diagnostics is enabled. Sink choices can be overridden at the service and
 * code package level.
 * @member {string} [debugParams] Internal - used by Visual Studio to setup the
 * debugging session on the local development environment.
 * @member {array} [serviceNames] Names of the services in the application.
 * @member {string} [status] Status of the application. Possible values
 * include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
 * @member {string} [statusDetails] Gives additional information about the
 * current status of the application.
 * @member {string} [healthState] Describes the health state of an application
 * resource. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
 * 'Unknown'
 * @member {string} [unhealthyEvaluation] When the application's health state
 * is not 'Ok', this additional details from service fabric Health Manager for
 * the user to know why the application is marked unhealthy.
 */
export interface ApplicationResourceDescription {
  name: string;
  description?: string;
  services?: ServiceResourceDescription[];
  diagnostics?: DiagnosticsDescription;
  debugParams?: string;
  readonly serviceNames?: string[];
  readonly status?: string;
  readonly statusDetails?: string;
  readonly healthState?: string;
  readonly unhealthyEvaluation?: string;
}

/**
 * @class
 * Initializes a new instance of the PagedApplicationResourceDescriptionList class.
 * @constructor
 * The list of application resources. The list is paged when all of the results
 * cannot fit in a single message. The next set of results can be obtained by
 * executing the same query with the continuation token provided in this list.
 *
 * @member {string} [continuationToken] The continuation token parameter is
 * used to obtain next set of results. The continuation token is included in
 * the response of the API when the results from the system do not fit in a
 * single response. When this value is passed to the next API call, the API
 * returns next set of results. If there are no further results, then the
 * continuation token is not included in the response.
 * @member {array} [items] One page of the list.
 */
export interface PagedApplicationResourceDescriptionList {
  continuationToken?: string;
  items?: ApplicationResourceDescription[];
}
