/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the UpdateClusterUpgrade class.
 * @constructor
 * The description of the update cluster upgrade
 *
 * @member {string} [upgradeKind] The kind of the upgrade
 *
 * @member {object} [updateDescription] The description of the update
 *
 * @member {string} [updateDescription.rollingUpgradeMode] The mode of the
 * rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'
 *
 * @member {boolean} [updateDescription.forceRestart] The flag of the force
 * restart
 *
 * @member {string} [updateDescription.failureAction] The action of the failure
 *
 * @member {number} [updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
 * The seconds of the upgrade replica set check timeout
 *
 * @member {string} [updateDescription.healthCheckWaitDurationInMilliseconds]
 * The seconds of the health check wait duration
 *
 * @member {string} [updateDescription.healthCheckStableDurationInMilliseconds]
 * The seconds of the health check stable duration
 *
 * @member {string} [updateDescription.healthCheckRetryTimeoutInMilliseconds]
 * The milliseconds of the health check retry timeout
 *
 * @member {string} [updateDescription.upgradeTimeoutInMilliseconds] The
 * milliseconds of the upgrade timeout
 *
 * @member {string} [updateDescription.upgradeDomainTimeoutInMilliseconds] The
 * milliseconds of the upgrade domain timeout
 *
 * @member {object} [clusterHealthPolicy] The policy of the cluster health
 *
 * @member {string} [clusterHealthPolicy.rollingUpgradeMode] The mode of the
 * rolling upgrade. Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'
 *
 * @member {boolean} [clusterHealthPolicy.forceRestart] The flag of the force
 * restart
 *
 * @member {string} [clusterHealthPolicy.failureAction] The action of the
 * failure
 *
 * @member {number}
 * [clusterHealthPolicy.upgradeReplicaSetCheckTimeoutInSeconds] The seconds of
 * the upgrade replica set check timeout
 *
 * @member {string} [clusterHealthPolicy.healthCheckWaitDurationInMilliseconds]
 * The milliseconds of the health check wait duration
 *
 * @member {string}
 * [clusterHealthPolicy.healthCheckStableDurationInMilliseconds] The
 * milliseconds of the health check stable duration
 *
 * @member {string} [clusterHealthPolicy.healthCheckRetryTimeoutInMilliseconds]
 * The milliseconds of the health check retry timeout
 *
 * @member {string} [clusterHealthPolicy.upgradeTimeoutInMilliseconds] The
 * milliseconds of the upgrade timeout
 *
 * @member {string} [clusterHealthPolicy.upgradeDomainTimeoutInMilliseconds]
 * The milliseconds of the upgrade domain timeout
 *
 * @member {boolean} [enableDeltaHealthEvaluations] The evaluations of the
 * enable delta health
 *
 */
function UpdateClusterUpgrade() {
}

/**
 * Defines the metadata of UpdateClusterUpgrade
 *
 * @returns {object} metadata of UpdateClusterUpgrade
 *
 */
UpdateClusterUpgrade.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'UpdateClusterUpgrade',
    type: {
      name: 'Composite',
      className: 'UpdateClusterUpgrade',
      modelProperties: {
        upgradeKind: {
          required: false,
          serializedName: 'UpgradeKind',
          type: {
            name: 'String'
          }
        },
        updateDescription: {
          required: false,
          serializedName: 'UpdateDescription',
          type: {
            name: 'Composite',
            className: 'UpdateDescription'
          }
        },
        clusterHealthPolicy: {
          required: false,
          serializedName: 'ClusterHealthPolicy',
          type: {
            name: 'Composite',
            className: 'ClusterHealthPolicy'
          }
        },
        enableDeltaHealthEvaluations: {
          required: false,
          serializedName: 'EnableDeltaHealthEvaluations',
          type: {
            name: 'Boolean'
          }
        }
      }
    }
  };
};

module.exports = UpdateClusterUpgrade;
