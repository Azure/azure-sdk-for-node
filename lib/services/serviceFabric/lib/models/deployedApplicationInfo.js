/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Information about application deployed on the node.
 *
 */
class DeployedApplicationInfo {
  /**
   * Create a DeployedApplicationInfo.
   * @member {string} [id]
   * @member {string} [name]
   * @member {string} [typeName]
   * @member {string} [status] Possible values include: 'Invalid',
   * 'Downloading', 'Activating', 'Active', 'Upgrading', 'Deactivating'
   * @member {string} [workDirectory] The work directory of the application on
   * the node. The work directory can be used to store application data.
   * @member {string} [logDirectory] The log directory of the application on
   * the node. The log directory can be used to store application logs.
   * @member {string} [tempDirectory] The temp directory of the application on
   * the node. The code packages belonging to the application are forked with
   * this directory set as their temporary directory.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DeployedApplicationInfo
   *
   * @returns {object} metadata of DeployedApplicationInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeployedApplicationInfo',
      type: {
        name: 'Composite',
        className: 'DeployedApplicationInfo',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'Id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          typeName: {
            required: false,
            serializedName: 'TypeName',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'Status',
            type: {
              name: 'String'
            }
          },
          workDirectory: {
            required: false,
            serializedName: 'WorkDirectory',
            type: {
              name: 'String'
            }
          },
          logDirectory: {
            required: false,
            serializedName: 'LogDirectory',
            type: {
              name: 'String'
            }
          },
          tempDirectory: {
            required: false,
            serializedName: 'TempDirectory',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DeployedApplicationInfo;
