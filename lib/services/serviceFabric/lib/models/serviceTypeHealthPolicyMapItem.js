/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines an item in ServiceTypeHealthPolicyMap.
 *
 *
 */
class ServiceTypeHealthPolicyMapItem {
  /**
   * Create a ServiceTypeHealthPolicyMapItem.
   * @member {string} key The key of the service type health policy map item.
   * This is the name of the service type.
   * @member {object} value
   * @member {number} [value.maxPercentUnhealthyPartitionsPerService] The
   * maximum allowed percentage of unhealthy partitions per service. Allowed
   * values are Byte values from zero to 100
   *
   * The percentage represents the maximum tolerated percentage of partitions
   * that can be unhealthy before the service is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * partition, the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy
   * partitions over the total number of partitions in the service.
   * The computation rounds up to tolerate one failure on small numbers of
   * partitions. Default percentage is zero.
   * @member {number} [value.maxPercentUnhealthyReplicasPerPartition] The
   * maximum allowed percentage of unhealthy replicas per partition. Allowed
   * values are Byte values from zero to 100.
   *
   * The percentage represents the maximum tolerated percentage of replicas
   * that can be unhealthy before the partition is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * replica, the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy replicas
   * over the total number of replicas in the partition.
   * The computation rounds up to tolerate one failure on small numbers of
   * replicas. Default percentage is zero.
   * @member {number} [value.maxPercentUnhealthyServices] The maximum maximum
   * allowed percentage of unhealthy services. Allowed values are Byte values
   * from zero to 100.
   *
   * The percentage represents the maximum tolerated percentage of services
   * that can be unhealthy before the application is considered in error.
   * If the percentage is respected but there is at least one unhealthy
   * service, the health is evaluated as Warning.
   * This is calculated by dividing the number of unhealthy services of the
   * specific service type over the total number of services of the specific
   * service type.
   * The computation rounds up to tolerate one failure on small numbers of
   * services. Default percentage is zero.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ServiceTypeHealthPolicyMapItem
   *
   * @returns {object} metadata of ServiceTypeHealthPolicyMapItem
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServiceTypeHealthPolicyMapItem',
      type: {
        name: 'Composite',
        className: 'ServiceTypeHealthPolicyMapItem',
        modelProperties: {
          key: {
            required: true,
            serializedName: 'Key',
            type: {
              name: 'String'
            }
          },
          value: {
            required: true,
            serializedName: 'Value',
            type: {
              name: 'Composite',
              className: 'ServiceTypeHealthPolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = ServiceTypeHealthPolicyMapItem;
