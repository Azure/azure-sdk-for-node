/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Captures the VM by copying virtual hard disks of the VM and outputs a
 * template that can be used to create similar VMs.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} parameters Parameters supplied to the Capture Virtual
 * Machine operation.
 *
 * @param {string} parameters.vhdPrefix The captured virtual hard disk's name
 * prefix.
 *
 * @param {string} parameters.destinationContainerName The destination
 * container name.
 *
 * @param {boolean} parameters.overwriteVhds Specifies whether to overwrite the
 * destination virtual hard disk, in case of conflict.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineCaptureResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _capture(resourceGroupName, vmName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCapture(resourceGroupName, vmName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineCaptureResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * The operation to create or update a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} parameters Parameters supplied to the Create Virtual Machine
 * operation.
 *
 * @param {object} [parameters.plan] The purchase plan when deploying virtual
 * machine from VM Marketplace images.
 *
 * @param {string} [parameters.plan.name] The plan ID.
 *
 * @param {string} [parameters.plan.publisher] The publisher ID.
 *
 * @param {string} [parameters.plan.product] The offer ID.
 *
 * @param {string} [parameters.plan.promotionCode] The promotion code.
 *
 * @param {object} [parameters.hardwareProfile] The hardware profile.
 *
 * @param {string} [parameters.hardwareProfile.vmSize] The virtual machine size
 * name. Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2',
 * 'Basic_A3', 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2',
 * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
 * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
 * 'Standard_A1_v2', 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2',
 * 'Standard_A2m_v2', 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1',
 * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
 * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
 * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
 * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
 * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
 * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
 * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
 * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
 * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
 * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
 * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
 * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
 * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
 * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
 * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
 * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
 * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
 * 'Standard_NV12', 'Standard_NV24'
 *
 * @param {object} [parameters.storageProfile] The storage profile.
 *
 * @param {object} [parameters.storageProfile.imageReference] The image
 * reference.
 *
 * @param {string} [parameters.storageProfile.imageReference.publisher] The
 * image publisher.
 *
 * @param {string} [parameters.storageProfile.imageReference.offer] The image
 * offer.
 *
 * @param {string} [parameters.storageProfile.imageReference.sku] The image
 * SKU.
 *
 * @param {string} [parameters.storageProfile.imageReference.version] The image
 * version. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor
 * and Build are decimal numbers. Specify 'latest' to use the latest version of
 * the image.
 *
 * @param {string} [parameters.storageProfile.imageReference.id] Resource Id
 *
 * @param {object} [parameters.storageProfile.osDisk] The OS disk.
 *
 * @param {string} [parameters.storageProfile.osDisk.osType] The Operating
 * System type. Possible values include: 'Windows', 'Linux'
 *
 * @param {object} [parameters.storageProfile.osDisk.encryptionSettings] The
 * disk encryption settings.
 *
 * @param {object}
 * [parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey] The
 * disk encryption key which is a Key Vault Secret.
 *
 * @param {string}
 * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.secretUrl
 * The URL referencing a secret in a Key Vault.
 *
 * @param {object}
 * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault
 * The relative URL of the Key Vault containing the secret.
 *
 * @param {object}
 * [parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey] The
 * key encryption key which is Key Vault Key.
 *
 * @param {string}
 * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.keyUrl
 * The URL referencing a key in a Key Vault.
 *
 * @param {object}
 * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault
 * The relative URL of the Key Vault containing the key.
 *
 * @param {boolean}
 * [parameters.storageProfile.osDisk.encryptionSettings.enabled] Specifies
 * whether disk encryption should be enabled on the virtual machine.
 *
 * @param {string} [parameters.storageProfile.osDisk.name] The disk name.
 *
 * @param {object} [parameters.storageProfile.osDisk.vhd] The virtual hard
 * disk.
 *
 * @param {object} [parameters.storageProfile.osDisk.image] The source user
 * image virtual hard disk. The virtual hard disk will be copied before using
 * it to attach to the virtual machine. If SourceImage is provided, the
 * destination virtual hard disk must not exist.
 *
 * @param {string} [parameters.storageProfile.osDisk.image.uri] The virtual
 * hard disk's URI. Must be a valid URI to a virtual hard disk.
 *
 * @param {string} [parameters.storageProfile.osDisk.caching] The caching type.
 * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 *
 * @param {string} parameters.storageProfile.osDisk.createOption The create
 * option. Possible values include: 'fromImage', 'empty', 'attach'
 *
 * @param {number} [parameters.storageProfile.osDisk.diskSizeGB] The initial
 * disk size, in GB, for blank data disks, and the new desired size for
 * resizing existing OS and data disks.
 *
 * @param {object} [parameters.storageProfile.osDisk.managedDisk] The managed
 * disk parameters.
 *
 * @param {string}
 * [parameters.storageProfile.osDisk.managedDisk.storageAccountType] The
 * Storage Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
 *
 * @param {string} [parameters.storageProfile.osDisk.managedDisk.id] Resource
 * Id
 *
 * @param {array} [parameters.storageProfile.dataDisks] The data disks.
 *
 * @param {object} [parameters.osProfile] The OS profile.
 *
 * @param {string} [parameters.osProfile.computerName] Specifies the host OS
 * name of the virtual machine.
 *
 * @param {string} [parameters.osProfile.adminUsername] Specifies the name of
 * the administrator account.
 *
 * @param {string} [parameters.osProfile.adminPassword] Specifies the password
 * of the administrator account.
 *
 * @param {string} [parameters.osProfile.customData] Specifies a base-64
 * encoded string of custom data. The base-64 encoded string is decoded to a
 * binary array that is saved as a file on the Virtual Machine. The maximum
 * length of the binary array is 65535 bytes
 *
 * @param {object} [parameters.osProfile.windowsConfiguration] The Windows
 * configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.osProfile.windowsConfiguration.provisionVMAgent] Indicates
 * whether the virtual machine agent should be provisioned on the Virtual
 * Machine. If not specified, then the default behavior is to set it to true.
 *
 * @param {boolean}
 * [parameters.osProfile.windowsConfiguration.enableAutomaticUpdates] Indicates
 * whether Windows updates are automatically installed on the VM.
 *
 * @param {string} [parameters.osProfile.windowsConfiguration.timeZone] The
 * time zone of the VM
 *
 * @param {array}
 * [parameters.osProfile.windowsConfiguration.additionalUnattendContent]
 * Additional base-64 encoded XML formatted information that can be included in
 * the Unattend.xml file.
 *
 * @param {object} [parameters.osProfile.windowsConfiguration.winRM] The
 * Windows Remote Management configuration of the VM
 *
 * @param {array} [parameters.osProfile.windowsConfiguration.winRM.listeners]
 * The list of Windows Remote Management listeners
 *
 * @param {object} [parameters.osProfile.linuxConfiguration] The Linux
 * configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.osProfile.linuxConfiguration.disablePasswordAuthentication]
 * Specifies whether password authentication should be disabled.
 *
 * @param {object} [parameters.osProfile.linuxConfiguration.ssh] The SSH
 * configuration for linux VMs.
 *
 * @param {array} [parameters.osProfile.linuxConfiguration.ssh.publicKeys] The
 * list of SSH public keys used to authenticate with linux based VMs.
 *
 * @param {array} [parameters.osProfile.secrets] The list of certificates for
 * addition to the VM.
 *
 * @param {object} [parameters.networkProfile] The network profile.
 *
 * @param {array} [parameters.networkProfile.networkInterfaces] Specifies the
 * list of resource IDs for the network interfaces associated with the virtual
 * machine.
 *
 * @param {object} [parameters.diagnosticsProfile] The diagnostics profile.
 *
 * @param {object} [parameters.diagnosticsProfile.bootDiagnostics] Boot
 * Diagnostics is a debugging feature which allows the user to view console
 * output and/or a screenshot of the virtual machine from the hypervisor.
 *
 * @param {boolean} [parameters.diagnosticsProfile.bootDiagnostics.enabled]
 * Whether boot diagnostics should be enabled on the Virtual Machine.
 *
 * @param {string} [parameters.diagnosticsProfile.bootDiagnostics.storageUri]
 * URI of the storage account to use for placing the console output and
 * screenshot.
 *
 * @param {object} [parameters.availabilitySet] The reference Id of the
 * availability set to which the virtual machine belongs.
 *
 * @param {string} [parameters.availabilitySet.id] Resource Id
 *
 * @param {string} [parameters.licenseType] Specifies that the image or disk
 * that is being used was licensed on-premises. This element is only used for
 * images that contain the Windows Server operating system.
 *
 * @param {object} [parameters.identity] The identity of the virtual machine,
 * if configured.
 *
 * @param {string} [parameters.identity.type] The type of identity used for the
 * virtual machine. Currently, the only supported type is 'SystemAssigned',
 * which implicitly creates an identity. Possible values include:
 * 'SystemAssigned'
 *
 * @param {string} parameters.location Resource location
 *
 * @param {object} [parameters.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, vmName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, vmName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * The operation to delete a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Retrieves information about the model view or the instance view of a virtual
 * machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.expand] The expand expression to apply on the
 * operation. Possible values include: 'instanceView'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (expand) {
      let allowedValues = [ 'instanceView' ];
      if (!allowedValues.some( function(item) { return item === expand; })) {
        throw new Error(expand + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand));
  }
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Converts virtual machine disks from blob-based to managed disks. Virtual
 * machine must be stop-deallocated before invoking this operation.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _convertToManagedDisks(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginConvertToManagedDisks(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Shuts down the virtual machine and releases the compute resources. You are
 * not billed for the compute resources that this virtual machine uses.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deallocate(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeallocate(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Sets the state of the virtual machine to generalized.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _generalize(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all of the virtual machines in the specified resource group. Use the
 * nextLink property in the response to get the next page of virtual machines.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all of the virtual machines in the specified subscription. Use the
 * nextLink property in the response to get the next page of virtual machines.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listAll(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all available virtual machine sizes to which the specified virtual
 * machine can be resized.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineSizeListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listAvailableSizes(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineSizeListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * The operation to power off (stop) a virtual machine. The virtual machine can
 * be restarted with the same provisioned resources. You are still charged for
 * this virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _powerOff(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPowerOff(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * The operation to restart a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _restart(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginRestart(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * The operation to start a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _start(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginStart(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * The operation to redeploy a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _redeploy(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginRedeploy(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * The operation to perform maintenance on a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _performMaintenance(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPerformMaintenance(resourceGroupName, vmName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Run command on the VM.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} parameters Parameters supplied to the Run command operation.
 *
 * @param {string} parameters.commandId The run command id.
 *
 * @param {array} [parameters.parameters] The run command parameters.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RunCommandResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _runCommand(resourceGroupName, vmName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginRunCommand(resourceGroupName, vmName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RunCommandResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Captures the VM by copying virtual hard disks of the VM and outputs a
 * template that can be used to create similar VMs.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} parameters Parameters supplied to the Capture Virtual
 * Machine operation.
 *
 * @param {string} parameters.vhdPrefix The captured virtual hard disk's name
 * prefix.
 *
 * @param {string} parameters.destinationContainerName The destination
 * container name.
 *
 * @param {boolean} parameters.overwriteVhds Specifies whether to overwrite the
 * destination virtual hard disk, in case of conflict.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineCaptureResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCapture(resourceGroupName, vmName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineCaptureParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineCaptureResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to create or update a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} parameters Parameters supplied to the Create Virtual Machine
 * operation.
 *
 * @param {object} [parameters.plan] The purchase plan when deploying virtual
 * machine from VM Marketplace images.
 *
 * @param {string} [parameters.plan.name] The plan ID.
 *
 * @param {string} [parameters.plan.publisher] The publisher ID.
 *
 * @param {string} [parameters.plan.product] The offer ID.
 *
 * @param {string} [parameters.plan.promotionCode] The promotion code.
 *
 * @param {object} [parameters.hardwareProfile] The hardware profile.
 *
 * @param {string} [parameters.hardwareProfile.vmSize] The virtual machine size
 * name. Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2',
 * 'Basic_A3', 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2',
 * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
 * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
 * 'Standard_A1_v2', 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2',
 * 'Standard_A2m_v2', 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1',
 * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
 * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
 * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
 * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
 * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
 * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
 * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
 * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
 * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
 * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
 * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
 * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
 * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
 * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
 * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
 * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
 * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
 * 'Standard_NV12', 'Standard_NV24'
 *
 * @param {object} [parameters.storageProfile] The storage profile.
 *
 * @param {object} [parameters.storageProfile.imageReference] The image
 * reference.
 *
 * @param {string} [parameters.storageProfile.imageReference.publisher] The
 * image publisher.
 *
 * @param {string} [parameters.storageProfile.imageReference.offer] The image
 * offer.
 *
 * @param {string} [parameters.storageProfile.imageReference.sku] The image
 * SKU.
 *
 * @param {string} [parameters.storageProfile.imageReference.version] The image
 * version. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor
 * and Build are decimal numbers. Specify 'latest' to use the latest version of
 * the image.
 *
 * @param {string} [parameters.storageProfile.imageReference.id] Resource Id
 *
 * @param {object} [parameters.storageProfile.osDisk] The OS disk.
 *
 * @param {string} [parameters.storageProfile.osDisk.osType] The Operating
 * System type. Possible values include: 'Windows', 'Linux'
 *
 * @param {object} [parameters.storageProfile.osDisk.encryptionSettings] The
 * disk encryption settings.
 *
 * @param {object}
 * [parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey] The
 * disk encryption key which is a Key Vault Secret.
 *
 * @param {string}
 * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.secretUrl
 * The URL referencing a secret in a Key Vault.
 *
 * @param {object}
 * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault
 * The relative URL of the Key Vault containing the secret.
 *
 * @param {object}
 * [parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey] The
 * key encryption key which is Key Vault Key.
 *
 * @param {string}
 * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.keyUrl
 * The URL referencing a key in a Key Vault.
 *
 * @param {object}
 * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault
 * The relative URL of the Key Vault containing the key.
 *
 * @param {boolean}
 * [parameters.storageProfile.osDisk.encryptionSettings.enabled] Specifies
 * whether disk encryption should be enabled on the virtual machine.
 *
 * @param {string} [parameters.storageProfile.osDisk.name] The disk name.
 *
 * @param {object} [parameters.storageProfile.osDisk.vhd] The virtual hard
 * disk.
 *
 * @param {object} [parameters.storageProfile.osDisk.image] The source user
 * image virtual hard disk. The virtual hard disk will be copied before using
 * it to attach to the virtual machine. If SourceImage is provided, the
 * destination virtual hard disk must not exist.
 *
 * @param {string} [parameters.storageProfile.osDisk.image.uri] The virtual
 * hard disk's URI. Must be a valid URI to a virtual hard disk.
 *
 * @param {string} [parameters.storageProfile.osDisk.caching] The caching type.
 * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 *
 * @param {string} parameters.storageProfile.osDisk.createOption The create
 * option. Possible values include: 'fromImage', 'empty', 'attach'
 *
 * @param {number} [parameters.storageProfile.osDisk.diskSizeGB] The initial
 * disk size, in GB, for blank data disks, and the new desired size for
 * resizing existing OS and data disks.
 *
 * @param {object} [parameters.storageProfile.osDisk.managedDisk] The managed
 * disk parameters.
 *
 * @param {string}
 * [parameters.storageProfile.osDisk.managedDisk.storageAccountType] The
 * Storage Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
 *
 * @param {string} [parameters.storageProfile.osDisk.managedDisk.id] Resource
 * Id
 *
 * @param {array} [parameters.storageProfile.dataDisks] The data disks.
 *
 * @param {object} [parameters.osProfile] The OS profile.
 *
 * @param {string} [parameters.osProfile.computerName] Specifies the host OS
 * name of the virtual machine.
 *
 * @param {string} [parameters.osProfile.adminUsername] Specifies the name of
 * the administrator account.
 *
 * @param {string} [parameters.osProfile.adminPassword] Specifies the password
 * of the administrator account.
 *
 * @param {string} [parameters.osProfile.customData] Specifies a base-64
 * encoded string of custom data. The base-64 encoded string is decoded to a
 * binary array that is saved as a file on the Virtual Machine. The maximum
 * length of the binary array is 65535 bytes
 *
 * @param {object} [parameters.osProfile.windowsConfiguration] The Windows
 * configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.osProfile.windowsConfiguration.provisionVMAgent] Indicates
 * whether the virtual machine agent should be provisioned on the Virtual
 * Machine. If not specified, then the default behavior is to set it to true.
 *
 * @param {boolean}
 * [parameters.osProfile.windowsConfiguration.enableAutomaticUpdates] Indicates
 * whether Windows updates are automatically installed on the VM.
 *
 * @param {string} [parameters.osProfile.windowsConfiguration.timeZone] The
 * time zone of the VM
 *
 * @param {array}
 * [parameters.osProfile.windowsConfiguration.additionalUnattendContent]
 * Additional base-64 encoded XML formatted information that can be included in
 * the Unattend.xml file.
 *
 * @param {object} [parameters.osProfile.windowsConfiguration.winRM] The
 * Windows Remote Management configuration of the VM
 *
 * @param {array} [parameters.osProfile.windowsConfiguration.winRM.listeners]
 * The list of Windows Remote Management listeners
 *
 * @param {object} [parameters.osProfile.linuxConfiguration] The Linux
 * configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.osProfile.linuxConfiguration.disablePasswordAuthentication]
 * Specifies whether password authentication should be disabled.
 *
 * @param {object} [parameters.osProfile.linuxConfiguration.ssh] The SSH
 * configuration for linux VMs.
 *
 * @param {array} [parameters.osProfile.linuxConfiguration.ssh.publicKeys] The
 * list of SSH public keys used to authenticate with linux based VMs.
 *
 * @param {array} [parameters.osProfile.secrets] The list of certificates for
 * addition to the VM.
 *
 * @param {object} [parameters.networkProfile] The network profile.
 *
 * @param {array} [parameters.networkProfile.networkInterfaces] Specifies the
 * list of resource IDs for the network interfaces associated with the virtual
 * machine.
 *
 * @param {object} [parameters.diagnosticsProfile] The diagnostics profile.
 *
 * @param {object} [parameters.diagnosticsProfile.bootDiagnostics] Boot
 * Diagnostics is a debugging feature which allows the user to view console
 * output and/or a screenshot of the virtual machine from the hypervisor.
 *
 * @param {boolean} [parameters.diagnosticsProfile.bootDiagnostics.enabled]
 * Whether boot diagnostics should be enabled on the Virtual Machine.
 *
 * @param {string} [parameters.diagnosticsProfile.bootDiagnostics.storageUri]
 * URI of the storage account to use for placing the console output and
 * screenshot.
 *
 * @param {object} [parameters.availabilitySet] The reference Id of the
 * availability set to which the virtual machine belongs.
 *
 * @param {string} [parameters.availabilitySet.id] Resource Id
 *
 * @param {string} [parameters.licenseType] Specifies that the image or disk
 * that is being used was licensed on-premises. This element is only used for
 * images that contain the Windows Server operating system.
 *
 * @param {object} [parameters.identity] The identity of the virtual machine,
 * if configured.
 *
 * @param {string} [parameters.identity.type] The type of identity used for the
 * virtual machine. Currently, the only supported type is 'SystemAssigned',
 * which implicitly creates an identity. Possible values include:
 * 'SystemAssigned'
 *
 * @param {string} parameters.location Resource location
 *
 * @param {object} [parameters.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, vmName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['VirtualMachine']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to delete a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Converts virtual machine disks from blob-based to managed disks. Virtual
 * machine must be stop-deallocated before invoking this operation.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginConvertToManagedDisks(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Shuts down the virtual machine and releases the compute resources. You are
 * not billed for the compute resources that this virtual machine uses.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeallocate(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to power off (stop) a virtual machine. The virtual machine can
 * be restarted with the same provisioned resources. You are still charged for
 * this virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPowerOff(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to restart a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginRestart(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to start a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginStart(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to redeploy a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginRedeploy(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * The operation to perform maintenance on a virtual machine.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPerformMaintenance(resourceGroupName, vmName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Run command on the VM.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmName The name of the virtual machine.
 *
 * @param {object} parameters Parameters supplied to the Run command operation.
 *
 * @param {string} parameters.commandId The run command id.
 *
 * @param {array} [parameters.parameters] The run command parameters.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RunCommandResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginRunCommand(resourceGroupName, vmName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmName === null || vmName === undefined || typeof vmName.valueOf() !== 'string') {
      throw new Error('vmName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommand';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmName}', encodeURIComponent(vmName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['RunCommandInput']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RunCommandResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all of the virtual machines in the specified resource group. Use the
 * nextLink property in the response to get the next page of virtual machines.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all of the virtual machines in the specified subscription. Use the
 * nextLink property in the response to get the next page of virtual machines.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listAllNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * VirtualMachines
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ComputeManagementClient.
 * Initializes a new instance of the VirtualMachines class.
 * @constructor
 *
 * @param {ComputeManagementClient} client Reference to the service client.
 */
class VirtualMachines {
  constructor(client) {
    this.client = client;
    this._capture = _capture;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._convertToManagedDisks = _convertToManagedDisks;
    this._deallocate = _deallocate;
    this._generalize = _generalize;
    this._list = _list;
    this._listAll = _listAll;
    this._listAvailableSizes = _listAvailableSizes;
    this._powerOff = _powerOff;
    this._restart = _restart;
    this._start = _start;
    this._redeploy = _redeploy;
    this._performMaintenance = _performMaintenance;
    this._runCommand = _runCommand;
    this._beginCapture = _beginCapture;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginConvertToManagedDisks = _beginConvertToManagedDisks;
    this._beginDeallocate = _beginDeallocate;
    this._beginPowerOff = _beginPowerOff;
    this._beginRestart = _beginRestart;
    this._beginStart = _beginStart;
    this._beginRedeploy = _beginRedeploy;
    this._beginPerformMaintenance = _beginPerformMaintenance;
    this._beginRunCommand = _beginRunCommand;
    this._listNext = _listNext;
    this._listAllNext = _listAllNext;
  }

  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a
   * template that can be used to create similar VMs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Capture Virtual
   * Machine operation.
   *
   * @param {string} parameters.vhdPrefix The captured virtual hard disk's name
   * prefix.
   *
   * @param {string} parameters.destinationContainerName The destination
   * container name.
   *
   * @param {boolean} parameters.overwriteVhds Specifies whether to overwrite the
   * destination virtual hard disk, in case of conflict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineCaptureResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  captureWithHttpOperationResponse(resourceGroupName, vmName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._capture(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a
   * template that can be used to create similar VMs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Capture Virtual
   * Machine operation.
   *
   * @param {string} parameters.vhdPrefix The captured virtual hard disk's name
   * prefix.
   *
   * @param {string} parameters.destinationContainerName The destination
   * container name.
   *
   * @param {boolean} parameters.overwriteVhds Specifies whether to overwrite the
   * destination virtual hard disk, in case of conflict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineCaptureResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineCaptureResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  capture(resourceGroupName, vmName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._capture(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._capture(resourceGroupName, vmName, parameters, options, optionalCallback);
    }
  }

  /**
   * The operation to create or update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Create Virtual Machine
   * operation.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying virtual
   * machine from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.hardwareProfile] The hardware profile.
   *
   * @param {string} [parameters.hardwareProfile.vmSize] The virtual machine size
   * name. Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2',
   * 'Basic_A3', 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
   * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2',
   * 'Standard_A2m_v2', 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1',
   * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
   * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
   * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
   * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
   * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
   * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
   * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
   * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
   * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
   * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
   * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
   * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
   * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
   * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
   * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
   * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
   * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
   * 'Standard_NV12', 'Standard_NV24'
   *
   * @param {object} [parameters.storageProfile] The storage profile.
   *
   * @param {object} [parameters.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string} [parameters.storageProfile.imageReference.publisher] The
   * image publisher.
   *
   * @param {string} [parameters.storageProfile.imageReference.offer] The image
   * offer.
   *
   * @param {string} [parameters.storageProfile.imageReference.sku] The image
   * SKU.
   *
   * @param {string} [parameters.storageProfile.imageReference.version] The image
   * version. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor
   * and Build are decimal numbers. Specify 'latest' to use the latest version of
   * the image.
   *
   * @param {string} [parameters.storageProfile.imageReference.id] Resource Id
   *
   * @param {object} [parameters.storageProfile.osDisk] The OS disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.osType] The Operating
   * System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object} [parameters.storageProfile.osDisk.encryptionSettings] The
   * disk encryption settings.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey] The
   * disk encryption key which is a Key Vault Secret.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.secretUrl
   * The URL referencing a secret in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the secret.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey] The
   * key encryption key which is Key Vault Key.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.keyUrl
   * The URL referencing a key in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the key.
   *
   * @param {boolean}
   * [parameters.storageProfile.osDisk.encryptionSettings.enabled] Specifies
   * whether disk encryption should be enabled on the virtual machine.
   *
   * @param {string} [parameters.storageProfile.osDisk.name] The disk name.
   *
   * @param {object} [parameters.storageProfile.osDisk.vhd] The virtual hard
   * disk.
   *
   * @param {object} [parameters.storageProfile.osDisk.image] The source user
   * image virtual hard disk. The virtual hard disk will be copied before using
   * it to attach to the virtual machine. If SourceImage is provided, the
   * destination virtual hard disk must not exist.
   *
   * @param {string} [parameters.storageProfile.osDisk.image.uri] The virtual
   * hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.caching] The caching type.
   * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string} parameters.storageProfile.osDisk.createOption The create
   * option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {number} [parameters.storageProfile.osDisk.diskSizeGB] The initial
   * disk size, in GB, for blank data disks, and the new desired size for
   * resizing existing OS and data disks.
   *
   * @param {object} [parameters.storageProfile.osDisk.managedDisk] The managed
   * disk parameters.
   *
   * @param {string}
   * [parameters.storageProfile.osDisk.managedDisk.storageAccountType] The
   * Storage Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
   *
   * @param {string} [parameters.storageProfile.osDisk.managedDisk.id] Resource
   * Id
   *
   * @param {array} [parameters.storageProfile.dataDisks] The data disks.
   *
   * @param {object} [parameters.osProfile] The OS profile.
   *
   * @param {string} [parameters.osProfile.computerName] Specifies the host OS
   * name of the virtual machine.
   *
   * @param {string} [parameters.osProfile.adminUsername] Specifies the name of
   * the administrator account.
   *
   * @param {string} [parameters.osProfile.adminPassword] Specifies the password
   * of the administrator account.
   *
   * @param {string} [parameters.osProfile.customData] Specifies a base-64
   * encoded string of custom data. The base-64 encoded string is decoded to a
   * binary array that is saved as a file on the Virtual Machine. The maximum
   * length of the binary array is 65535 bytes
   *
   * @param {object} [parameters.osProfile.windowsConfiguration] The Windows
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.provisionVMAgent] Indicates
   * whether the virtual machine agent should be provisioned on the Virtual
   * Machine. If not specified, then the default behavior is to set it to true.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.enableAutomaticUpdates] Indicates
   * whether Windows updates are automatically installed on the VM.
   *
   * @param {string} [parameters.osProfile.windowsConfiguration.timeZone] The
   * time zone of the VM
   *
   * @param {array}
   * [parameters.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object} [parameters.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array} [parameters.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object} [parameters.osProfile.linuxConfiguration] The Linux
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object} [parameters.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array} [parameters.osProfile.linuxConfiguration.ssh.publicKeys] The
   * list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.osProfile.secrets] The list of certificates for
   * addition to the VM.
   *
   * @param {object} [parameters.networkProfile] The network profile.
   *
   * @param {array} [parameters.networkProfile.networkInterfaces] Specifies the
   * list of resource IDs for the network interfaces associated with the virtual
   * machine.
   *
   * @param {object} [parameters.diagnosticsProfile] The diagnostics profile.
   *
   * @param {object} [parameters.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean} [parameters.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string} [parameters.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.availabilitySet] The reference Id of the
   * availability set to which the virtual machine belongs.
   *
   * @param {string} [parameters.availabilitySet.id] Resource Id
   *
   * @param {string} [parameters.licenseType] Specifies that the image or disk
   * that is being used was licensed on-premises. This element is only used for
   * images that contain the Windows Server operating system.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine,
   * if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine. Currently, the only supported type is 'SystemAssigned',
   * which implicitly creates an identity. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, vmName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to create or update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Create Virtual Machine
   * operation.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying virtual
   * machine from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.hardwareProfile] The hardware profile.
   *
   * @param {string} [parameters.hardwareProfile.vmSize] The virtual machine size
   * name. Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2',
   * 'Basic_A3', 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
   * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2',
   * 'Standard_A2m_v2', 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1',
   * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
   * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
   * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
   * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
   * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
   * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
   * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
   * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
   * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
   * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
   * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
   * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
   * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
   * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
   * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
   * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
   * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
   * 'Standard_NV12', 'Standard_NV24'
   *
   * @param {object} [parameters.storageProfile] The storage profile.
   *
   * @param {object} [parameters.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string} [parameters.storageProfile.imageReference.publisher] The
   * image publisher.
   *
   * @param {string} [parameters.storageProfile.imageReference.offer] The image
   * offer.
   *
   * @param {string} [parameters.storageProfile.imageReference.sku] The image
   * SKU.
   *
   * @param {string} [parameters.storageProfile.imageReference.version] The image
   * version. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor
   * and Build are decimal numbers. Specify 'latest' to use the latest version of
   * the image.
   *
   * @param {string} [parameters.storageProfile.imageReference.id] Resource Id
   *
   * @param {object} [parameters.storageProfile.osDisk] The OS disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.osType] The Operating
   * System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object} [parameters.storageProfile.osDisk.encryptionSettings] The
   * disk encryption settings.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey] The
   * disk encryption key which is a Key Vault Secret.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.secretUrl
   * The URL referencing a secret in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the secret.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey] The
   * key encryption key which is Key Vault Key.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.keyUrl
   * The URL referencing a key in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the key.
   *
   * @param {boolean}
   * [parameters.storageProfile.osDisk.encryptionSettings.enabled] Specifies
   * whether disk encryption should be enabled on the virtual machine.
   *
   * @param {string} [parameters.storageProfile.osDisk.name] The disk name.
   *
   * @param {object} [parameters.storageProfile.osDisk.vhd] The virtual hard
   * disk.
   *
   * @param {object} [parameters.storageProfile.osDisk.image] The source user
   * image virtual hard disk. The virtual hard disk will be copied before using
   * it to attach to the virtual machine. If SourceImage is provided, the
   * destination virtual hard disk must not exist.
   *
   * @param {string} [parameters.storageProfile.osDisk.image.uri] The virtual
   * hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.caching] The caching type.
   * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string} parameters.storageProfile.osDisk.createOption The create
   * option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {number} [parameters.storageProfile.osDisk.diskSizeGB] The initial
   * disk size, in GB, for blank data disks, and the new desired size for
   * resizing existing OS and data disks.
   *
   * @param {object} [parameters.storageProfile.osDisk.managedDisk] The managed
   * disk parameters.
   *
   * @param {string}
   * [parameters.storageProfile.osDisk.managedDisk.storageAccountType] The
   * Storage Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
   *
   * @param {string} [parameters.storageProfile.osDisk.managedDisk.id] Resource
   * Id
   *
   * @param {array} [parameters.storageProfile.dataDisks] The data disks.
   *
   * @param {object} [parameters.osProfile] The OS profile.
   *
   * @param {string} [parameters.osProfile.computerName] Specifies the host OS
   * name of the virtual machine.
   *
   * @param {string} [parameters.osProfile.adminUsername] Specifies the name of
   * the administrator account.
   *
   * @param {string} [parameters.osProfile.adminPassword] Specifies the password
   * of the administrator account.
   *
   * @param {string} [parameters.osProfile.customData] Specifies a base-64
   * encoded string of custom data. The base-64 encoded string is decoded to a
   * binary array that is saved as a file on the Virtual Machine. The maximum
   * length of the binary array is 65535 bytes
   *
   * @param {object} [parameters.osProfile.windowsConfiguration] The Windows
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.provisionVMAgent] Indicates
   * whether the virtual machine agent should be provisioned on the Virtual
   * Machine. If not specified, then the default behavior is to set it to true.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.enableAutomaticUpdates] Indicates
   * whether Windows updates are automatically installed on the VM.
   *
   * @param {string} [parameters.osProfile.windowsConfiguration.timeZone] The
   * time zone of the VM
   *
   * @param {array}
   * [parameters.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object} [parameters.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array} [parameters.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object} [parameters.osProfile.linuxConfiguration] The Linux
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object} [parameters.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array} [parameters.osProfile.linuxConfiguration.ssh.publicKeys] The
   * list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.osProfile.secrets] The list of certificates for
   * addition to the VM.
   *
   * @param {object} [parameters.networkProfile] The network profile.
   *
   * @param {array} [parameters.networkProfile.networkInterfaces] Specifies the
   * list of resource IDs for the network interfaces associated with the virtual
   * machine.
   *
   * @param {object} [parameters.diagnosticsProfile] The diagnostics profile.
   *
   * @param {object} [parameters.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean} [parameters.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string} [parameters.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.availabilitySet] The reference Id of the
   * availability set to which the virtual machine belongs.
   *
   * @param {string} [parameters.availabilitySet.id] Resource Id
   *
   * @param {string} [parameters.licenseType] Specifies that the image or disk
   * that is being used was licensed on-premises. This element is only used for
   * images that contain the Windows Server operating system.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine,
   * if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine. Currently, the only supported type is 'SystemAssigned',
   * which implicitly creates an identity. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, vmName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, vmName, parameters, options, optionalCallback);
    }
  }

  /**
   * The operation to delete a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to delete a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Retrieves information about the model view or the instance view of a virtual
   * machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] The expand expression to apply on the
   * operation. Possible values include: 'instanceView'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieves information about the model view or the instance view of a virtual
   * machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] The expand expression to apply on the
   * operation. Possible values include: 'instanceView'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual
   * machine must be stop-deallocated before invoking this operation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  convertToManagedDisksWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._convertToManagedDisks(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual
   * machine must be stop-deallocated before invoking this operation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  convertToManagedDisks(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._convertToManagedDisks(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._convertToManagedDisks(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Shuts down the virtual machine and releases the compute resources. You are
   * not billed for the compute resources that this virtual machine uses.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deallocateWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deallocate(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Shuts down the virtual machine and releases the compute resources. You are
   * not billed for the compute resources that this virtual machine uses.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deallocate(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deallocate(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deallocate(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Sets the state of the virtual machine to generalized.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  generalizeWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._generalize(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Sets the state of the virtual machine to generalized.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  generalize(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._generalize(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._generalize(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Lists all of the virtual machines in the specified resource group. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all of the virtual machines in the specified resource group. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Lists all of the virtual machines in the specified subscription. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listAllWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listAll(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all of the virtual machines in the specified subscription. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listAll(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listAll(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listAll(options, optionalCallback);
    }
  }

  /**
   * Lists all available virtual machine sizes to which the specified virtual
   * machine can be resized.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineSizeListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listAvailableSizesWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listAvailableSizes(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all available virtual machine sizes to which the specified virtual
   * machine can be resized.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineSizeListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineSizeListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableSizes(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listAvailableSizes(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listAvailableSizes(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can
   * be restarted with the same provisioned resources. You are still charged for
   * this virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  powerOffWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._powerOff(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can
   * be restarted with the same provisioned resources. You are still charged for
   * this virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  powerOff(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._powerOff(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._powerOff(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to restart a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  restartWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._restart(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to restart a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  restart(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._restart(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._restart(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to start a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  startWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._start(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to start a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  start(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._start(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._start(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to redeploy a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  redeployWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._redeploy(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to redeploy a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  redeploy(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._redeploy(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._redeploy(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to perform maintenance on a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  performMaintenanceWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._performMaintenance(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to perform maintenance on a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  performMaintenance(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._performMaintenance(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._performMaintenance(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Run command on the VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Run command operation.
   *
   * @param {string} parameters.commandId The run command id.
   *
   * @param {array} [parameters.parameters] The run command parameters.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RunCommandResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  runCommandWithHttpOperationResponse(resourceGroupName, vmName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._runCommand(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Run command on the VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Run command operation.
   *
   * @param {string} parameters.commandId The run command id.
   *
   * @param {array} [parameters.parameters] The run command parameters.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RunCommandResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RunCommandResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  runCommand(resourceGroupName, vmName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._runCommand(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._runCommand(resourceGroupName, vmName, parameters, options, optionalCallback);
    }
  }

  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a
   * template that can be used to create similar VMs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Capture Virtual
   * Machine operation.
   *
   * @param {string} parameters.vhdPrefix The captured virtual hard disk's name
   * prefix.
   *
   * @param {string} parameters.destinationContainerName The destination
   * container name.
   *
   * @param {boolean} parameters.overwriteVhds Specifies whether to overwrite the
   * destination virtual hard disk, in case of conflict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineCaptureResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCaptureWithHttpOperationResponse(resourceGroupName, vmName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCapture(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a
   * template that can be used to create similar VMs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Capture Virtual
   * Machine operation.
   *
   * @param {string} parameters.vhdPrefix The captured virtual hard disk's name
   * prefix.
   *
   * @param {string} parameters.destinationContainerName The destination
   * container name.
   *
   * @param {boolean} parameters.overwriteVhds Specifies whether to overwrite the
   * destination virtual hard disk, in case of conflict.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineCaptureResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineCaptureResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCapture(resourceGroupName, vmName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCapture(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCapture(resourceGroupName, vmName, parameters, options, optionalCallback);
    }
  }

  /**
   * The operation to create or update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Create Virtual Machine
   * operation.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying virtual
   * machine from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.hardwareProfile] The hardware profile.
   *
   * @param {string} [parameters.hardwareProfile.vmSize] The virtual machine size
   * name. Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2',
   * 'Basic_A3', 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
   * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2',
   * 'Standard_A2m_v2', 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1',
   * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
   * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
   * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
   * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
   * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
   * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
   * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
   * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
   * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
   * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
   * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
   * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
   * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
   * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
   * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
   * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
   * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
   * 'Standard_NV12', 'Standard_NV24'
   *
   * @param {object} [parameters.storageProfile] The storage profile.
   *
   * @param {object} [parameters.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string} [parameters.storageProfile.imageReference.publisher] The
   * image publisher.
   *
   * @param {string} [parameters.storageProfile.imageReference.offer] The image
   * offer.
   *
   * @param {string} [parameters.storageProfile.imageReference.sku] The image
   * SKU.
   *
   * @param {string} [parameters.storageProfile.imageReference.version] The image
   * version. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor
   * and Build are decimal numbers. Specify 'latest' to use the latest version of
   * the image.
   *
   * @param {string} [parameters.storageProfile.imageReference.id] Resource Id
   *
   * @param {object} [parameters.storageProfile.osDisk] The OS disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.osType] The Operating
   * System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object} [parameters.storageProfile.osDisk.encryptionSettings] The
   * disk encryption settings.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey] The
   * disk encryption key which is a Key Vault Secret.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.secretUrl
   * The URL referencing a secret in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the secret.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey] The
   * key encryption key which is Key Vault Key.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.keyUrl
   * The URL referencing a key in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the key.
   *
   * @param {boolean}
   * [parameters.storageProfile.osDisk.encryptionSettings.enabled] Specifies
   * whether disk encryption should be enabled on the virtual machine.
   *
   * @param {string} [parameters.storageProfile.osDisk.name] The disk name.
   *
   * @param {object} [parameters.storageProfile.osDisk.vhd] The virtual hard
   * disk.
   *
   * @param {object} [parameters.storageProfile.osDisk.image] The source user
   * image virtual hard disk. The virtual hard disk will be copied before using
   * it to attach to the virtual machine. If SourceImage is provided, the
   * destination virtual hard disk must not exist.
   *
   * @param {string} [parameters.storageProfile.osDisk.image.uri] The virtual
   * hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.caching] The caching type.
   * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string} parameters.storageProfile.osDisk.createOption The create
   * option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {number} [parameters.storageProfile.osDisk.diskSizeGB] The initial
   * disk size, in GB, for blank data disks, and the new desired size for
   * resizing existing OS and data disks.
   *
   * @param {object} [parameters.storageProfile.osDisk.managedDisk] The managed
   * disk parameters.
   *
   * @param {string}
   * [parameters.storageProfile.osDisk.managedDisk.storageAccountType] The
   * Storage Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
   *
   * @param {string} [parameters.storageProfile.osDisk.managedDisk.id] Resource
   * Id
   *
   * @param {array} [parameters.storageProfile.dataDisks] The data disks.
   *
   * @param {object} [parameters.osProfile] The OS profile.
   *
   * @param {string} [parameters.osProfile.computerName] Specifies the host OS
   * name of the virtual machine.
   *
   * @param {string} [parameters.osProfile.adminUsername] Specifies the name of
   * the administrator account.
   *
   * @param {string} [parameters.osProfile.adminPassword] Specifies the password
   * of the administrator account.
   *
   * @param {string} [parameters.osProfile.customData] Specifies a base-64
   * encoded string of custom data. The base-64 encoded string is decoded to a
   * binary array that is saved as a file on the Virtual Machine. The maximum
   * length of the binary array is 65535 bytes
   *
   * @param {object} [parameters.osProfile.windowsConfiguration] The Windows
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.provisionVMAgent] Indicates
   * whether the virtual machine agent should be provisioned on the Virtual
   * Machine. If not specified, then the default behavior is to set it to true.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.enableAutomaticUpdates] Indicates
   * whether Windows updates are automatically installed on the VM.
   *
   * @param {string} [parameters.osProfile.windowsConfiguration.timeZone] The
   * time zone of the VM
   *
   * @param {array}
   * [parameters.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object} [parameters.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array} [parameters.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object} [parameters.osProfile.linuxConfiguration] The Linux
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object} [parameters.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array} [parameters.osProfile.linuxConfiguration.ssh.publicKeys] The
   * list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.osProfile.secrets] The list of certificates for
   * addition to the VM.
   *
   * @param {object} [parameters.networkProfile] The network profile.
   *
   * @param {array} [parameters.networkProfile.networkInterfaces] Specifies the
   * list of resource IDs for the network interfaces associated with the virtual
   * machine.
   *
   * @param {object} [parameters.diagnosticsProfile] The diagnostics profile.
   *
   * @param {object} [parameters.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean} [parameters.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string} [parameters.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.availabilitySet] The reference Id of the
   * availability set to which the virtual machine belongs.
   *
   * @param {string} [parameters.availabilitySet.id] Resource Id
   *
   * @param {string} [parameters.licenseType] Specifies that the image or disk
   * that is being used was licensed on-premises. This element is only used for
   * images that contain the Windows Server operating system.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine,
   * if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine. Currently, the only supported type is 'SystemAssigned',
   * which implicitly creates an identity. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, vmName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to create or update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Create Virtual Machine
   * operation.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying virtual
   * machine from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.hardwareProfile] The hardware profile.
   *
   * @param {string} [parameters.hardwareProfile.vmSize] The virtual machine size
   * name. Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2',
   * 'Basic_A3', 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
   * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2',
   * 'Standard_A2m_v2', 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1',
   * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
   * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
   * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
   * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
   * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
   * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
   * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
   * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
   * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
   * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
   * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
   * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
   * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
   * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
   * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
   * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
   * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
   * 'Standard_NV12', 'Standard_NV24'
   *
   * @param {object} [parameters.storageProfile] The storage profile.
   *
   * @param {object} [parameters.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string} [parameters.storageProfile.imageReference.publisher] The
   * image publisher.
   *
   * @param {string} [parameters.storageProfile.imageReference.offer] The image
   * offer.
   *
   * @param {string} [parameters.storageProfile.imageReference.sku] The image
   * SKU.
   *
   * @param {string} [parameters.storageProfile.imageReference.version] The image
   * version. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor
   * and Build are decimal numbers. Specify 'latest' to use the latest version of
   * the image.
   *
   * @param {string} [parameters.storageProfile.imageReference.id] Resource Id
   *
   * @param {object} [parameters.storageProfile.osDisk] The OS disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.osType] The Operating
   * System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object} [parameters.storageProfile.osDisk.encryptionSettings] The
   * disk encryption settings.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey] The
   * disk encryption key which is a Key Vault Secret.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.secretUrl
   * The URL referencing a secret in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the secret.
   *
   * @param {object}
   * [parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey] The
   * key encryption key which is Key Vault Key.
   *
   * @param {string}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.keyUrl
   * The URL referencing a key in a Key Vault.
   *
   * @param {object}
   * parameters.storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault
   * The relative URL of the Key Vault containing the key.
   *
   * @param {boolean}
   * [parameters.storageProfile.osDisk.encryptionSettings.enabled] Specifies
   * whether disk encryption should be enabled on the virtual machine.
   *
   * @param {string} [parameters.storageProfile.osDisk.name] The disk name.
   *
   * @param {object} [parameters.storageProfile.osDisk.vhd] The virtual hard
   * disk.
   *
   * @param {object} [parameters.storageProfile.osDisk.image] The source user
   * image virtual hard disk. The virtual hard disk will be copied before using
   * it to attach to the virtual machine. If SourceImage is provided, the
   * destination virtual hard disk must not exist.
   *
   * @param {string} [parameters.storageProfile.osDisk.image.uri] The virtual
   * hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {string} [parameters.storageProfile.osDisk.caching] The caching type.
   * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string} parameters.storageProfile.osDisk.createOption The create
   * option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {number} [parameters.storageProfile.osDisk.diskSizeGB] The initial
   * disk size, in GB, for blank data disks, and the new desired size for
   * resizing existing OS and data disks.
   *
   * @param {object} [parameters.storageProfile.osDisk.managedDisk] The managed
   * disk parameters.
   *
   * @param {string}
   * [parameters.storageProfile.osDisk.managedDisk.storageAccountType] The
   * Storage Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
   *
   * @param {string} [parameters.storageProfile.osDisk.managedDisk.id] Resource
   * Id
   *
   * @param {array} [parameters.storageProfile.dataDisks] The data disks.
   *
   * @param {object} [parameters.osProfile] The OS profile.
   *
   * @param {string} [parameters.osProfile.computerName] Specifies the host OS
   * name of the virtual machine.
   *
   * @param {string} [parameters.osProfile.adminUsername] Specifies the name of
   * the administrator account.
   *
   * @param {string} [parameters.osProfile.adminPassword] Specifies the password
   * of the administrator account.
   *
   * @param {string} [parameters.osProfile.customData] Specifies a base-64
   * encoded string of custom data. The base-64 encoded string is decoded to a
   * binary array that is saved as a file on the Virtual Machine. The maximum
   * length of the binary array is 65535 bytes
   *
   * @param {object} [parameters.osProfile.windowsConfiguration] The Windows
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.provisionVMAgent] Indicates
   * whether the virtual machine agent should be provisioned on the Virtual
   * Machine. If not specified, then the default behavior is to set it to true.
   *
   * @param {boolean}
   * [parameters.osProfile.windowsConfiguration.enableAutomaticUpdates] Indicates
   * whether Windows updates are automatically installed on the VM.
   *
   * @param {string} [parameters.osProfile.windowsConfiguration.timeZone] The
   * time zone of the VM
   *
   * @param {array}
   * [parameters.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object} [parameters.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array} [parameters.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object} [parameters.osProfile.linuxConfiguration] The Linux
   * configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object} [parameters.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array} [parameters.osProfile.linuxConfiguration.ssh.publicKeys] The
   * list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.osProfile.secrets] The list of certificates for
   * addition to the VM.
   *
   * @param {object} [parameters.networkProfile] The network profile.
   *
   * @param {array} [parameters.networkProfile.networkInterfaces] Specifies the
   * list of resource IDs for the network interfaces associated with the virtual
   * machine.
   *
   * @param {object} [parameters.diagnosticsProfile] The diagnostics profile.
   *
   * @param {object} [parameters.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean} [parameters.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string} [parameters.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.availabilitySet] The reference Id of the
   * availability set to which the virtual machine belongs.
   *
   * @param {string} [parameters.availabilitySet.id] Resource Id
   *
   * @param {string} [parameters.licenseType] Specifies that the image or disk
   * that is being used was licensed on-premises. This element is only used for
   * images that contain the Windows Server operating system.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine,
   * if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine. Currently, the only supported type is 'SystemAssigned',
   * which implicitly creates an identity. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, vmName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, vmName, parameters, options, optionalCallback);
    }
  }

  /**
   * The operation to delete a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to delete a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual
   * machine must be stop-deallocated before invoking this operation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginConvertToManagedDisksWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginConvertToManagedDisks(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual
   * machine must be stop-deallocated before invoking this operation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginConvertToManagedDisks(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginConvertToManagedDisks(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginConvertToManagedDisks(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Shuts down the virtual machine and releases the compute resources. You are
   * not billed for the compute resources that this virtual machine uses.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeallocateWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeallocate(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Shuts down the virtual machine and releases the compute resources. You are
   * not billed for the compute resources that this virtual machine uses.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeallocate(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeallocate(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeallocate(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can
   * be restarted with the same provisioned resources. You are still charged for
   * this virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPowerOffWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPowerOff(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can
   * be restarted with the same provisioned resources. You are still charged for
   * this virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPowerOff(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPowerOff(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPowerOff(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to restart a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginRestartWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginRestart(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to restart a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginRestart(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginRestart(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginRestart(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to start a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginStartWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginStart(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to start a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginStart(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginStart(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginStart(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to redeploy a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginRedeployWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginRedeploy(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to redeploy a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginRedeploy(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginRedeploy(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginRedeploy(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * The operation to perform maintenance on a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPerformMaintenanceWithHttpOperationResponse(resourceGroupName, vmName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPerformMaintenance(resourceGroupName, vmName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * The operation to perform maintenance on a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPerformMaintenance(resourceGroupName, vmName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPerformMaintenance(resourceGroupName, vmName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPerformMaintenance(resourceGroupName, vmName, options, optionalCallback);
    }
  }

  /**
   * Run command on the VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Run command operation.
   *
   * @param {string} parameters.commandId The run command id.
   *
   * @param {array} [parameters.parameters] The run command parameters.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RunCommandResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginRunCommandWithHttpOperationResponse(resourceGroupName, vmName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginRunCommand(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Run command on the VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {object} parameters Parameters supplied to the Run command operation.
   *
   * @param {string} parameters.commandId The run command id.
   *
   * @param {array} [parameters.parameters] The run command parameters.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RunCommandResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RunCommandResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginRunCommand(resourceGroupName, vmName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginRunCommand(resourceGroupName, vmName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginRunCommand(resourceGroupName, vmName, parameters, options, optionalCallback);
    }
  }

  /**
   * Lists all of the virtual machines in the specified resource group. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all of the virtual machines in the specified resource group. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * Lists all of the virtual machines in the specified subscription. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listAllNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listAllNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all of the virtual machines in the specified subscription. Use the
   * nextLink property in the response to get the next page of virtual machines.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listAllNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listAllNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listAllNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = VirtualMachines;
