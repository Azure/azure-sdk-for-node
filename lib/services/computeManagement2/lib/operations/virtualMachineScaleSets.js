/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Create or update a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set to create or
 * update.
 *
 * @param {object} parameters The scale set object.
 *
 * @param {object} [parameters.sku] The virtual machine scale set sku.
 *
 * @param {string} [parameters.sku.name] The sku name.
 *
 * @param {string} [parameters.sku.tier] The sku tier.
 *
 * @param {number} [parameters.sku.capacity] The sku capacity.
 *
 * @param {object} [parameters.plan] The purchase plan when deploying a virtual
 * machine scale set from VM Marketplace images.
 *
 * @param {string} [parameters.plan.name] The plan ID.
 *
 * @param {string} [parameters.plan.publisher] The publisher ID.
 *
 * @param {string} [parameters.plan.product] The offer ID.
 *
 * @param {string} [parameters.plan.promotionCode] The promotion code.
 *
 * @param {object} [parameters.upgradePolicy] The upgrade policy.
 *
 * @param {string} [parameters.upgradePolicy.mode] The upgrade mode. Possible
 * values include: 'Automatic', 'Manual'
 *
 * @param {object} [parameters.recoveryPolicy] The recovery policy.
 *
 * @param {string} [parameters.recoveryPolicy.mode] The recovery mode. Possible
 * values include: 'None', 'OverProvision', 'Reprovision'
 *
 * @param {object} [parameters.virtualMachineProfile] The virtual machine
 * profile.
 *
 * @param {object} [parameters.virtualMachineProfile.osProfile] The virtual
 * machine scale set OS profile.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.osProfile.computerNamePrefix] The computer
 * name prefix.
 *
 * @param {string} [parameters.virtualMachineProfile.osProfile.adminUsername]
 * The admin user name.
 *
 * @param {string} [parameters.virtualMachineProfile.osProfile.adminPassword]
 * The admin user password.
 *
 * @param {string} [parameters.virtualMachineProfile.osProfile.customData] A
 * base-64 encoded string of custom data.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration] The
 * Windows Configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent]
 * Indicates whether the virtual machine agent should be provisioned on the
 * Virtual Machine. If not specified, then the default behavior is to set it to
 * true.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates]
 * Indicates whether Windows updates are automatically installed on the VM.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.timeZone]
 * The time zone of the VM
 *
 * @param {array}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent]
 * Additional base-64 encoded XML formatted information that can be included in
 * the Unattend.xml file.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM] The
 * Windows Remote Management configuration of the VM
 *
 * @param {array}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners]
 * The list of Windows Remote Management listeners
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration] The Linux
 * Configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication]
 * Specifies whether password authentication should be disabled.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh] The SSH
 * configuration for linux VMs.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys]
 * The list of SSH public keys used to authenticate with linux based VMs.
 *
 * @param {array} [parameters.virtualMachineProfile.osProfile.secrets] The List
 * of certificates for addition to the VM.
 *
 * @param {object} [parameters.virtualMachineProfile.storageProfile] The
 * virtual machine scale set storage profile.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.storageProfile.imageReference] The image
 * reference.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.publisher]
 * The image publisher.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.offer] The
 * image offer.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.sku] The
 * image SKU.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.version] The
 * image version. The allowed formats are Major.Minor.Build or 'latest'. Major,
 * Minor and Build are decimal numbers. Specify 'latest' to use the latest
 * version of the image.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.id] Resource
 * Id
 *
 * @param {object} [parameters.virtualMachineProfile.storageProfile.osDisk] The
 * OS disk.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.name] The disk name.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.caching] The caching
 * type. Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 *
 * @param {string}
 * parameters.virtualMachineProfile.storageProfile.osDisk.createOption The
 * create option. Possible values include: 'fromImage', 'empty', 'attach'
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.osType] The
 * Operating System type. Possible values include: 'Windows', 'Linux'
 *
 * @param {object}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.image] The Source
 * User Image VirtualHardDisk. This VirtualHardDisk will be copied before using
 * it to attach to the Virtual Machine. If SourceImage is provided, the
 * destination VirtualHardDisk should not exist.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.image.uri] The
 * virtual hard disk's URI. Must be a valid URI to a virtual hard disk.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.vhdContainers] The
 * list of virtual hard disk container uris.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk] The
 * managed disk parameters.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType]
 * The Storage Account type. Possible values include: 'Standard_LRS',
 * 'Premium_LRS'
 *
 * @param {array} [parameters.virtualMachineProfile.storageProfile.dataDisks]
 * The data disks.
 *
 * @param {object} [parameters.virtualMachineProfile.networkProfile] The
 * virtual machine scale set network profile.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.networkProfile.networkInterfaceConfigurations]
 * The list of network configurations.
 *
 * @param {object} [parameters.virtualMachineProfile.diagnosticsProfile] The
 * virtual machine scale set diagnostics profile.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics] Boot
 * Diagnostics is a debugging feature which allows the user to view console
 * output and/or a screenshot of the virtual machine from the hypervisor.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled]
 * Whether boot diagnostics should be enabled on the Virtual Machine.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri]
 * URI of the storage account to use for placing the console output and
 * screenshot.
 *
 * @param {object} [parameters.virtualMachineProfile.extensionProfile] The
 * virtual machine scale set extension profile.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.extensionProfile.extensions] The virtual
 * machine scale set child extension resources.
 *
 * @param {string} [parameters.virtualMachineProfile.licenseType] The license
 * type, which is for bring your own license scenario.
 *
 * @param {boolean} [parameters.overprovision] Specifies whether the Virtual
 * Machine Scale Set should be overprovisioned.
 *
 * @param {string} [parameters.uniqueId] Specifies the ID which uniquely
 * identifies a Virtual Machine Scale Set.
 *
 * @param {boolean} [parameters.singlePlacementGroup] When true this limits the
 * scale set to a single placement group, of max size 100 virtual machines.
 *
 * @param {object} [parameters.identity] The identity of the virtual machine
 * scale set, if configured.
 *
 * @param {string} [parameters.identity.type] The type of identity used for the
 * virtual machine scale set. Currently, the only supported type is
 * 'SystemAssigned', which implicitly creates an identity. Possible values
 * include: 'SystemAssigned'
 *
 * @param {string} parameters.location Resource location
 *
 * @param {object} [parameters.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSet} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSet']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Deletes a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, vmScaleSetName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Display information about a virtual machine scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSet} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSet']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Deallocates specific virtual machines in a VM scale set. Shuts down the
 * virtual machines and releases the compute resources. You are not billed for
 * the compute resources that this virtual machine scale set deallocates.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deallocate(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeallocate(resourceGroupName, vmScaleSetName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Deletes virtual machines in a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {array} instanceIds The virtual machine scale set instance ids.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets the status of a VM scale set instance.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSetInstanceView} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getInstanceView(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/instanceView';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSetInstanceView']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a list of all VM scale sets under a resource group.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSetListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSetListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a list of all VM Scale Sets in the subscription, regardless of the
 * associated resource group. Use nextLink property in the response to get the
 * next page of VM Scale Sets. Do this till nextLink is not null to fetch all
 * the VM Scale Sets.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSetListWithLinkResult}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listAll(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachineScaleSets';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSetListWithLinkResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a list of SKUs available for your VM scale set, including the minimum
 * and maximum VM instances allowed for each SKU.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSetListSkusResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listSkus(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/skus';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSetListSkusResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Power off (stop) one or more virtual machines in a VM scale set. Note that
 * resources are still attached and you are getting charged for the resources.
 * Instead, use deallocate to release resources and avoid charges.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _powerOff(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPowerOff(resourceGroupName, vmScaleSetName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Restarts one or more virtual machines in a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _restart(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginRestart(resourceGroupName, vmScaleSetName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Starts one or more virtual machines in a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _start(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginStart(resourceGroupName, vmScaleSetName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Upgrades one or more virtual machines to the latest SKU set in the VM scale
 * set model.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {array} instanceIds The virtual machine scale set instance ids.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginUpdateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Reimages (upgrade the operating system) one or more virtual machines in a VM
 * scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _reimage(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginReimage(resourceGroupName, vmScaleSetName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Reimages all the disks ( including data disks ) in the virtual machines in a
 * VM scale set. This operation is only supported for managed disks.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _reimageAll(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginReimageAll(resourceGroupName, vmScaleSetName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Create or update a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set to create or
 * update.
 *
 * @param {object} parameters The scale set object.
 *
 * @param {object} [parameters.sku] The virtual machine scale set sku.
 *
 * @param {string} [parameters.sku.name] The sku name.
 *
 * @param {string} [parameters.sku.tier] The sku tier.
 *
 * @param {number} [parameters.sku.capacity] The sku capacity.
 *
 * @param {object} [parameters.plan] The purchase plan when deploying a virtual
 * machine scale set from VM Marketplace images.
 *
 * @param {string} [parameters.plan.name] The plan ID.
 *
 * @param {string} [parameters.plan.publisher] The publisher ID.
 *
 * @param {string} [parameters.plan.product] The offer ID.
 *
 * @param {string} [parameters.plan.promotionCode] The promotion code.
 *
 * @param {object} [parameters.upgradePolicy] The upgrade policy.
 *
 * @param {string} [parameters.upgradePolicy.mode] The upgrade mode. Possible
 * values include: 'Automatic', 'Manual'
 *
 * @param {object} [parameters.recoveryPolicy] The recovery policy.
 *
 * @param {string} [parameters.recoveryPolicy.mode] The recovery mode. Possible
 * values include: 'None', 'OverProvision', 'Reprovision'
 *
 * @param {object} [parameters.virtualMachineProfile] The virtual machine
 * profile.
 *
 * @param {object} [parameters.virtualMachineProfile.osProfile] The virtual
 * machine scale set OS profile.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.osProfile.computerNamePrefix] The computer
 * name prefix.
 *
 * @param {string} [parameters.virtualMachineProfile.osProfile.adminUsername]
 * The admin user name.
 *
 * @param {string} [parameters.virtualMachineProfile.osProfile.adminPassword]
 * The admin user password.
 *
 * @param {string} [parameters.virtualMachineProfile.osProfile.customData] A
 * base-64 encoded string of custom data.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration] The
 * Windows Configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent]
 * Indicates whether the virtual machine agent should be provisioned on the
 * Virtual Machine. If not specified, then the default behavior is to set it to
 * true.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates]
 * Indicates whether Windows updates are automatically installed on the VM.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.timeZone]
 * The time zone of the VM
 *
 * @param {array}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent]
 * Additional base-64 encoded XML formatted information that can be included in
 * the Unattend.xml file.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM] The
 * Windows Remote Management configuration of the VM
 *
 * @param {array}
 * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners]
 * The list of Windows Remote Management listeners
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration] The Linux
 * Configuration of the OS profile.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication]
 * Specifies whether password authentication should be disabled.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh] The SSH
 * configuration for linux VMs.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys]
 * The list of SSH public keys used to authenticate with linux based VMs.
 *
 * @param {array} [parameters.virtualMachineProfile.osProfile.secrets] The List
 * of certificates for addition to the VM.
 *
 * @param {object} [parameters.virtualMachineProfile.storageProfile] The
 * virtual machine scale set storage profile.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.storageProfile.imageReference] The image
 * reference.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.publisher]
 * The image publisher.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.offer] The
 * image offer.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.sku] The
 * image SKU.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.version] The
 * image version. The allowed formats are Major.Minor.Build or 'latest'. Major,
 * Minor and Build are decimal numbers. Specify 'latest' to use the latest
 * version of the image.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.imageReference.id] Resource
 * Id
 *
 * @param {object} [parameters.virtualMachineProfile.storageProfile.osDisk] The
 * OS disk.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.name] The disk name.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.caching] The caching
 * type. Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 *
 * @param {string}
 * parameters.virtualMachineProfile.storageProfile.osDisk.createOption The
 * create option. Possible values include: 'fromImage', 'empty', 'attach'
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.osType] The
 * Operating System type. Possible values include: 'Windows', 'Linux'
 *
 * @param {object}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.image] The Source
 * User Image VirtualHardDisk. This VirtualHardDisk will be copied before using
 * it to attach to the Virtual Machine. If SourceImage is provided, the
 * destination VirtualHardDisk should not exist.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.image.uri] The
 * virtual hard disk's URI. Must be a valid URI to a virtual hard disk.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.vhdContainers] The
 * list of virtual hard disk container uris.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk] The
 * managed disk parameters.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType]
 * The Storage Account type. Possible values include: 'Standard_LRS',
 * 'Premium_LRS'
 *
 * @param {array} [parameters.virtualMachineProfile.storageProfile.dataDisks]
 * The data disks.
 *
 * @param {object} [parameters.virtualMachineProfile.networkProfile] The
 * virtual machine scale set network profile.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.networkProfile.networkInterfaceConfigurations]
 * The list of network configurations.
 *
 * @param {object} [parameters.virtualMachineProfile.diagnosticsProfile] The
 * virtual machine scale set diagnostics profile.
 *
 * @param {object}
 * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics] Boot
 * Diagnostics is a debugging feature which allows the user to view console
 * output and/or a screenshot of the virtual machine from the hypervisor.
 *
 * @param {boolean}
 * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled]
 * Whether boot diagnostics should be enabled on the Virtual Machine.
 *
 * @param {string}
 * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri]
 * URI of the storage account to use for placing the console output and
 * screenshot.
 *
 * @param {object} [parameters.virtualMachineProfile.extensionProfile] The
 * virtual machine scale set extension profile.
 *
 * @param {array}
 * [parameters.virtualMachineProfile.extensionProfile.extensions] The virtual
 * machine scale set child extension resources.
 *
 * @param {string} [parameters.virtualMachineProfile.licenseType] The license
 * type, which is for bring your own license scenario.
 *
 * @param {boolean} [parameters.overprovision] Specifies whether the Virtual
 * Machine Scale Set should be overprovisioned.
 *
 * @param {string} [parameters.uniqueId] Specifies the ID which uniquely
 * identifies a Virtual Machine Scale Set.
 *
 * @param {boolean} [parameters.singlePlacementGroup] When true this limits the
 * scale set to a single placement group, of max size 100 virtual machines.
 *
 * @param {object} [parameters.identity] The identity of the virtual machine
 * scale set, if configured.
 *
 * @param {string} [parameters.identity.type] The type of identity used for the
 * virtual machine scale set. Currently, the only supported type is
 * 'SystemAssigned', which implicitly creates an identity. Possible values
 * include: 'SystemAssigned'
 *
 * @param {string} parameters.location Resource location
 *
 * @param {object} [parameters.tags] Resource tags
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSet} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineScaleSet']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSet']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSet']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deallocates specific virtual machines in a VM scale set. Shuts down the
 * virtual machines and releases the compute resources. You are not billed for
 * the compute resources that this virtual machine scale set deallocates.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeallocate(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let instanceIds = (options && options.instanceIds !== undefined) ? options.instanceIds : undefined;
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (Array.isArray(instanceIds)) {
      for (let i = 0; i < instanceIds.length; i++) {
        if (instanceIds[i] !== null && instanceIds[i] !== undefined && typeof instanceIds[i].valueOf() !== 'string') {
          throw new Error('instanceIds[i] must be of type string.');
        }
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let vmInstanceIDs;
  if (instanceIds !== null && instanceIds !== undefined) {
    vmInstanceIDs = new client.models['VirtualMachineScaleSetVMInstanceIDs']();
    vmInstanceIDs.instanceIds = instanceIds;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/deallocate';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (vmInstanceIDs !== null && vmInstanceIDs !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineScaleSetVMInstanceIDs']().mapper();
      requestModel = client.serialize(requestModelMapper, vmInstanceIDs, 'vmInstanceIDs');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(vmInstanceIDs, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes virtual machines in a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {array} instanceIds The virtual machine scale set instance ids.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (!Array.isArray(instanceIds)) {
      throw new Error('instanceIds cannot be null or undefined and it must be of type array.');
    }
    for (let i = 0; i < instanceIds.length; i++) {
      if (instanceIds[i] !== null && instanceIds[i] !== undefined && typeof instanceIds[i].valueOf() !== 'string') {
        throw new Error('instanceIds[i] must be of type string.');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let vmInstanceIDs;
  if (instanceIds !== null && instanceIds !== undefined) {
    vmInstanceIDs = new client.models['VirtualMachineScaleSetVMInstanceRequiredIDs']();
    vmInstanceIDs.instanceIds = instanceIds;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/delete';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (vmInstanceIDs !== null && vmInstanceIDs !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineScaleSetVMInstanceRequiredIDs']().mapper();
      requestModel = client.serialize(requestModelMapper, vmInstanceIDs, 'vmInstanceIDs');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(vmInstanceIDs, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Power off (stop) one or more virtual machines in a VM scale set. Note that
 * resources are still attached and you are getting charged for the resources.
 * Instead, use deallocate to release resources and avoid charges.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPowerOff(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let instanceIds = (options && options.instanceIds !== undefined) ? options.instanceIds : undefined;
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (Array.isArray(instanceIds)) {
      for (let i = 0; i < instanceIds.length; i++) {
        if (instanceIds[i] !== null && instanceIds[i] !== undefined && typeof instanceIds[i].valueOf() !== 'string') {
          throw new Error('instanceIds[i] must be of type string.');
        }
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let vmInstanceIDs;
  if (instanceIds !== null && instanceIds !== undefined) {
    vmInstanceIDs = new client.models['VirtualMachineScaleSetVMInstanceIDs']();
    vmInstanceIDs.instanceIds = instanceIds;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/poweroff';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (vmInstanceIDs !== null && vmInstanceIDs !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineScaleSetVMInstanceIDs']().mapper();
      requestModel = client.serialize(requestModelMapper, vmInstanceIDs, 'vmInstanceIDs');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(vmInstanceIDs, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Restarts one or more virtual machines in a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginRestart(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let instanceIds = (options && options.instanceIds !== undefined) ? options.instanceIds : undefined;
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (Array.isArray(instanceIds)) {
      for (let i = 0; i < instanceIds.length; i++) {
        if (instanceIds[i] !== null && instanceIds[i] !== undefined && typeof instanceIds[i].valueOf() !== 'string') {
          throw new Error('instanceIds[i] must be of type string.');
        }
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let vmInstanceIDs;
  if (instanceIds !== null && instanceIds !== undefined) {
    vmInstanceIDs = new client.models['VirtualMachineScaleSetVMInstanceIDs']();
    vmInstanceIDs.instanceIds = instanceIds;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/restart';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (vmInstanceIDs !== null && vmInstanceIDs !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineScaleSetVMInstanceIDs']().mapper();
      requestModel = client.serialize(requestModelMapper, vmInstanceIDs, 'vmInstanceIDs');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(vmInstanceIDs, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Starts one or more virtual machines in a VM scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.instanceIds] The virtual machine scale set instance
 * ids.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginStart(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let instanceIds = (options && options.instanceIds !== undefined) ? options.instanceIds : undefined;
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (Array.isArray(instanceIds)) {
      for (let i = 0; i < instanceIds.length; i++) {
        if (instanceIds[i] !== null && instanceIds[i] !== undefined && typeof instanceIds[i].valueOf() !== 'string') {
          throw new Error('instanceIds[i] must be of type string.');
        }
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let vmInstanceIDs;
  if (instanceIds !== null && instanceIds !== undefined) {
    vmInstanceIDs = new client.models['VirtualMachineScaleSetVMInstanceIDs']();
    vmInstanceIDs.instanceIds = instanceIds;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/start';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (vmInstanceIDs !== null && vmInstanceIDs !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineScaleSetVMInstanceIDs']().mapper();
      requestModel = client.serialize(requestModelMapper, vmInstanceIDs, 'vmInstanceIDs');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(vmInstanceIDs, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Upgrades one or more virtual machines to the latest SKU set in the VM scale
 * set model.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {array} instanceIds The virtual machine scale set instance ids.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginUpdateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (!Array.isArray(instanceIds)) {
      throw new Error('instanceIds cannot be null or undefined and it must be of type array.');
    }
    for (let i = 0; i < instanceIds.length; i++) {
      if (instanceIds[i] !== null && instanceIds[i] !== undefined && typeof instanceIds[i].valueOf() !== 'string') {
        throw new Error('instanceIds[i] must be of type string.');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let vmInstanceIDs;
  if (instanceIds !== null && instanceIds !== undefined) {
    vmInstanceIDs = new client.models['VirtualMachineScaleSetVMInstanceRequiredIDs']();
    vmInstanceIDs.instanceIds = instanceIds;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/manualupgrade';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (vmInstanceIDs !== null && vmInstanceIDs !== undefined) {
      let requestModelMapper = new client.models['VirtualMachineScaleSetVMInstanceRequiredIDs']().mapper();
      requestModel = client.serialize(requestModelMapper, vmInstanceIDs, 'vmInstanceIDs');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(vmInstanceIDs, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Reimages (upgrade the operating system) one or more virtual machines in a VM
 * scale set.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginReimage(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimage';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Reimages all the disks ( including data disks ) in the virtual machines in a
 * VM scale set. This operation is only supported for managed disks.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} vmScaleSetName The name of the VM scale set.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatusResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginReimageAll(resourceGroupName, vmScaleSetName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (vmScaleSetName === null || vmScaleSetName === undefined || typeof vmScaleSetName.valueOf() !== 'string') {
      throw new Error('vmScaleSetName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimageall';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{vmScaleSetName}', encodeURIComponent(vmScaleSetName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatusResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a list of all VM scale sets under a resource group.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSetListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSetListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a list of all VM Scale Sets in the subscription, regardless of the
 * associated resource group. Use nextLink property in the response to get the
 * next page of VM Scale Sets. Do this till nextLink is not null to fetch all
 * the VM Scale Sets.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSetListWithLinkResult}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listAllNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSetListWithLinkResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a list of SKUs available for your VM scale set, including the minimum
 * and maximum VM instances allowed for each SKU.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VirtualMachineScaleSetListSkusResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listSkusNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VirtualMachineScaleSetListSkusResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * VirtualMachineScaleSets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ComputeManagementClient.
 * Initializes a new instance of the VirtualMachineScaleSets class.
 * @constructor
 *
 * @param {ComputeManagementClient} client Reference to the service client.
 */
class VirtualMachineScaleSets {
  constructor(client) {
    this.client = client;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._deallocate = _deallocate;
    this._deleteInstances = _deleteInstances;
    this._getInstanceView = _getInstanceView;
    this._list = _list;
    this._listAll = _listAll;
    this._listSkus = _listSkus;
    this._powerOff = _powerOff;
    this._restart = _restart;
    this._start = _start;
    this._updateInstances = _updateInstances;
    this._reimage = _reimage;
    this._reimageAll = _reimageAll;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginDeallocate = _beginDeallocate;
    this._beginDeleteInstances = _beginDeleteInstances;
    this._beginPowerOff = _beginPowerOff;
    this._beginRestart = _beginRestart;
    this._beginStart = _beginStart;
    this._beginUpdateInstances = _beginUpdateInstances;
    this._beginReimage = _beginReimage;
    this._beginReimageAll = _beginReimageAll;
    this._listNext = _listNext;
    this._listAllNext = _listAllNext;
    this._listSkusNext = _listSkusNext;
  }

  /**
   * Create or update a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set to create or
   * update.
   *
   * @param {object} parameters The scale set object.
   *
   * @param {object} [parameters.sku] The virtual machine scale set sku.
   *
   * @param {string} [parameters.sku.name] The sku name.
   *
   * @param {string} [parameters.sku.tier] The sku tier.
   *
   * @param {number} [parameters.sku.capacity] The sku capacity.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying a virtual
   * machine scale set from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.upgradePolicy] The upgrade policy.
   *
   * @param {string} [parameters.upgradePolicy.mode] The upgrade mode. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {object} [parameters.recoveryPolicy] The recovery policy.
   *
   * @param {string} [parameters.recoveryPolicy.mode] The recovery mode. Possible
   * values include: 'None', 'OverProvision', 'Reprovision'
   *
   * @param {object} [parameters.virtualMachineProfile] The virtual machine
   * profile.
   *
   * @param {object} [parameters.virtualMachineProfile.osProfile] The virtual
   * machine scale set OS profile.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.computerNamePrefix] The computer
   * name prefix.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminUsername]
   * The admin user name.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminPassword]
   * The admin user password.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.customData] A
   * base-64 encoded string of custom data.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration] The
   * Windows Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent]
   * Indicates whether the virtual machine agent should be provisioned on the
   * Virtual Machine. If not specified, then the default behavior is to set it to
   * true.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates]
   * Indicates whether Windows updates are automatically installed on the VM.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.timeZone]
   * The time zone of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration] The Linux
   * Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys]
   * The list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.virtualMachineProfile.osProfile.secrets] The List
   * of certificates for addition to the VM.
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile] The
   * virtual machine scale set storage profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.publisher]
   * The image publisher.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.offer] The
   * image offer.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.sku] The
   * image SKU.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.version] The
   * image version. The allowed formats are Major.Minor.Build or 'latest'. Major,
   * Minor and Build are decimal numbers. Specify 'latest' to use the latest
   * version of the image.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.id] Resource
   * Id
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile.osDisk] The
   * OS disk.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.name] The disk name.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.caching] The caching
   * type. Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string}
   * parameters.virtualMachineProfile.storageProfile.osDisk.createOption The
   * create option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.osType] The
   * Operating System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image] The Source
   * User Image VirtualHardDisk. This VirtualHardDisk will be copied before using
   * it to attach to the Virtual Machine. If SourceImage is provided, the
   * destination VirtualHardDisk should not exist.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image.uri] The
   * virtual hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.vhdContainers] The
   * list of virtual hard disk container uris.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk] The
   * managed disk parameters.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType]
   * The Storage Account type. Possible values include: 'Standard_LRS',
   * 'Premium_LRS'
   *
   * @param {array} [parameters.virtualMachineProfile.storageProfile.dataDisks]
   * The data disks.
   *
   * @param {object} [parameters.virtualMachineProfile.networkProfile] The
   * virtual machine scale set network profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.networkProfile.networkInterfaceConfigurations]
   * The list of network configurations.
   *
   * @param {object} [parameters.virtualMachineProfile.diagnosticsProfile] The
   * virtual machine scale set diagnostics profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.virtualMachineProfile.extensionProfile] The
   * virtual machine scale set extension profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.extensionProfile.extensions] The virtual
   * machine scale set child extension resources.
   *
   * @param {string} [parameters.virtualMachineProfile.licenseType] The license
   * type, which is for bring your own license scenario.
   *
   * @param {boolean} [parameters.overprovision] Specifies whether the Virtual
   * Machine Scale Set should be overprovisioned.
   *
   * @param {string} [parameters.uniqueId] Specifies the ID which uniquely
   * identifies a Virtual Machine Scale Set.
   *
   * @param {boolean} [parameters.singlePlacementGroup] When true this limits the
   * scale set to a single placement group, of max size 100 virtual machines.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine
   * scale set, if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine scale set. Currently, the only supported type is
   * 'SystemAssigned', which implicitly creates an identity. Possible values
   * include: 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSet>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, vmScaleSetName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or update a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set to create or
   * update.
   *
   * @param {object} parameters The scale set object.
   *
   * @param {object} [parameters.sku] The virtual machine scale set sku.
   *
   * @param {string} [parameters.sku.name] The sku name.
   *
   * @param {string} [parameters.sku.tier] The sku tier.
   *
   * @param {number} [parameters.sku.capacity] The sku capacity.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying a virtual
   * machine scale set from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.upgradePolicy] The upgrade policy.
   *
   * @param {string} [parameters.upgradePolicy.mode] The upgrade mode. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {object} [parameters.recoveryPolicy] The recovery policy.
   *
   * @param {string} [parameters.recoveryPolicy.mode] The recovery mode. Possible
   * values include: 'None', 'OverProvision', 'Reprovision'
   *
   * @param {object} [parameters.virtualMachineProfile] The virtual machine
   * profile.
   *
   * @param {object} [parameters.virtualMachineProfile.osProfile] The virtual
   * machine scale set OS profile.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.computerNamePrefix] The computer
   * name prefix.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminUsername]
   * The admin user name.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminPassword]
   * The admin user password.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.customData] A
   * base-64 encoded string of custom data.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration] The
   * Windows Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent]
   * Indicates whether the virtual machine agent should be provisioned on the
   * Virtual Machine. If not specified, then the default behavior is to set it to
   * true.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates]
   * Indicates whether Windows updates are automatically installed on the VM.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.timeZone]
   * The time zone of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration] The Linux
   * Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys]
   * The list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.virtualMachineProfile.osProfile.secrets] The List
   * of certificates for addition to the VM.
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile] The
   * virtual machine scale set storage profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.publisher]
   * The image publisher.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.offer] The
   * image offer.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.sku] The
   * image SKU.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.version] The
   * image version. The allowed formats are Major.Minor.Build or 'latest'. Major,
   * Minor and Build are decimal numbers. Specify 'latest' to use the latest
   * version of the image.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.id] Resource
   * Id
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile.osDisk] The
   * OS disk.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.name] The disk name.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.caching] The caching
   * type. Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string}
   * parameters.virtualMachineProfile.storageProfile.osDisk.createOption The
   * create option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.osType] The
   * Operating System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image] The Source
   * User Image VirtualHardDisk. This VirtualHardDisk will be copied before using
   * it to attach to the Virtual Machine. If SourceImage is provided, the
   * destination VirtualHardDisk should not exist.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image.uri] The
   * virtual hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.vhdContainers] The
   * list of virtual hard disk container uris.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk] The
   * managed disk parameters.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType]
   * The Storage Account type. Possible values include: 'Standard_LRS',
   * 'Premium_LRS'
   *
   * @param {array} [parameters.virtualMachineProfile.storageProfile.dataDisks]
   * The data disks.
   *
   * @param {object} [parameters.virtualMachineProfile.networkProfile] The
   * virtual machine scale set network profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.networkProfile.networkInterfaceConfigurations]
   * The list of network configurations.
   *
   * @param {object} [parameters.virtualMachineProfile.diagnosticsProfile] The
   * virtual machine scale set diagnostics profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.virtualMachineProfile.extensionProfile] The
   * virtual machine scale set extension profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.extensionProfile.extensions] The virtual
   * machine scale set child extension resources.
   *
   * @param {string} [parameters.virtualMachineProfile.licenseType] The license
   * type, which is for bring your own license scenario.
   *
   * @param {boolean} [parameters.overprovision] Specifies whether the Virtual
   * Machine Scale Set should be overprovisioned.
   *
   * @param {string} [parameters.uniqueId] Specifies the ID which uniquely
   * identifies a Virtual Machine Scale Set.
   *
   * @param {boolean} [parameters.singlePlacementGroup] When true this limits the
   * scale set to a single placement group, of max size 100 virtual machines.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine
   * scale set, if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine scale set. Currently, the only supported type is
   * 'SystemAssigned', which implicitly creates an identity. Possible values
   * include: 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSet} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSet} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Display information about a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSet>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Display information about a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSet} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSet} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Deallocates specific virtual machines in a VM scale set. Shuts down the
   * virtual machines and releases the compute resources. You are not billed for
   * the compute resources that this virtual machine scale set deallocates.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deallocateWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deallocate(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deallocates specific virtual machines in a VM scale set. Shuts down the
   * virtual machines and releases the compute resources. You are not billed for
   * the compute resources that this virtual machine scale set deallocates.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deallocate(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deallocate(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deallocate(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Deletes virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteInstancesWithHttpOperationResponse(resourceGroupName, vmScaleSetName, instanceIds, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback);
    }
  }

  /**
   * Gets the status of a VM scale set instance.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSetInstanceView>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getInstanceViewWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getInstanceView(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the status of a VM scale set instance.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSetInstanceView} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSetInstanceView} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getInstanceView(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getInstanceView(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getInstanceView(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Gets a list of all VM scale sets under a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSetListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a list of all VM scale sets under a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSetListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSetListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Gets a list of all VM Scale Sets in the subscription, regardless of the
   * associated resource group. Use nextLink property in the response to get the
   * next page of VM Scale Sets. Do this till nextLink is not null to fetch all
   * the VM Scale Sets.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSetListWithLinkResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listAllWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listAll(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a list of all VM Scale Sets in the subscription, regardless of the
   * associated resource group. Use nextLink property in the response to get the
   * next page of VM Scale Sets. Do this till nextLink is not null to fetch all
   * the VM Scale Sets.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSetListWithLinkResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSetListWithLinkResult}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listAll(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listAll(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listAll(options, optionalCallback);
    }
  }

  /**
   * Gets a list of SKUs available for your VM scale set, including the minimum
   * and maximum VM instances allowed for each SKU.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSetListSkusResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listSkusWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listSkus(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a list of SKUs available for your VM scale set, including the minimum
   * and maximum VM instances allowed for each SKU.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSetListSkusResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSetListSkusResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listSkus(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listSkus(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listSkus(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Power off (stop) one or more virtual machines in a VM scale set. Note that
   * resources are still attached and you are getting charged for the resources.
   * Instead, use deallocate to release resources and avoid charges.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  powerOffWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._powerOff(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Power off (stop) one or more virtual machines in a VM scale set. Note that
   * resources are still attached and you are getting charged for the resources.
   * Instead, use deallocate to release resources and avoid charges.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  powerOff(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._powerOff(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._powerOff(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Restarts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  restartWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._restart(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Restarts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  restart(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._restart(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._restart(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Starts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  startWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._start(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Starts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  start(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._start(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._start(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Upgrades one or more virtual machines to the latest SKU set in the VM scale
   * set model.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateInstancesWithHttpOperationResponse(resourceGroupName, vmScaleSetName, instanceIds, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Upgrades one or more virtual machines to the latest SKU set in the VM scale
   * set model.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback);
    }
  }

  /**
   * Reimages (upgrade the operating system) one or more virtual machines in a VM
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  reimageWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._reimage(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Reimages (upgrade the operating system) one or more virtual machines in a VM
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  reimage(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._reimage(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._reimage(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Reimages all the disks ( including data disks ) in the virtual machines in a
   * VM scale set. This operation is only supported for managed disks.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  reimageAllWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._reimageAll(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Reimages all the disks ( including data disks ) in the virtual machines in a
   * VM scale set. This operation is only supported for managed disks.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  reimageAll(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._reimageAll(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._reimageAll(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Create or update a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set to create or
   * update.
   *
   * @param {object} parameters The scale set object.
   *
   * @param {object} [parameters.sku] The virtual machine scale set sku.
   *
   * @param {string} [parameters.sku.name] The sku name.
   *
   * @param {string} [parameters.sku.tier] The sku tier.
   *
   * @param {number} [parameters.sku.capacity] The sku capacity.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying a virtual
   * machine scale set from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.upgradePolicy] The upgrade policy.
   *
   * @param {string} [parameters.upgradePolicy.mode] The upgrade mode. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {object} [parameters.recoveryPolicy] The recovery policy.
   *
   * @param {string} [parameters.recoveryPolicy.mode] The recovery mode. Possible
   * values include: 'None', 'OverProvision', 'Reprovision'
   *
   * @param {object} [parameters.virtualMachineProfile] The virtual machine
   * profile.
   *
   * @param {object} [parameters.virtualMachineProfile.osProfile] The virtual
   * machine scale set OS profile.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.computerNamePrefix] The computer
   * name prefix.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminUsername]
   * The admin user name.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminPassword]
   * The admin user password.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.customData] A
   * base-64 encoded string of custom data.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration] The
   * Windows Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent]
   * Indicates whether the virtual machine agent should be provisioned on the
   * Virtual Machine. If not specified, then the default behavior is to set it to
   * true.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates]
   * Indicates whether Windows updates are automatically installed on the VM.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.timeZone]
   * The time zone of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration] The Linux
   * Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys]
   * The list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.virtualMachineProfile.osProfile.secrets] The List
   * of certificates for addition to the VM.
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile] The
   * virtual machine scale set storage profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.publisher]
   * The image publisher.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.offer] The
   * image offer.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.sku] The
   * image SKU.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.version] The
   * image version. The allowed formats are Major.Minor.Build or 'latest'. Major,
   * Minor and Build are decimal numbers. Specify 'latest' to use the latest
   * version of the image.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.id] Resource
   * Id
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile.osDisk] The
   * OS disk.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.name] The disk name.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.caching] The caching
   * type. Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string}
   * parameters.virtualMachineProfile.storageProfile.osDisk.createOption The
   * create option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.osType] The
   * Operating System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image] The Source
   * User Image VirtualHardDisk. This VirtualHardDisk will be copied before using
   * it to attach to the Virtual Machine. If SourceImage is provided, the
   * destination VirtualHardDisk should not exist.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image.uri] The
   * virtual hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.vhdContainers] The
   * list of virtual hard disk container uris.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk] The
   * managed disk parameters.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType]
   * The Storage Account type. Possible values include: 'Standard_LRS',
   * 'Premium_LRS'
   *
   * @param {array} [parameters.virtualMachineProfile.storageProfile.dataDisks]
   * The data disks.
   *
   * @param {object} [parameters.virtualMachineProfile.networkProfile] The
   * virtual machine scale set network profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.networkProfile.networkInterfaceConfigurations]
   * The list of network configurations.
   *
   * @param {object} [parameters.virtualMachineProfile.diagnosticsProfile] The
   * virtual machine scale set diagnostics profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.virtualMachineProfile.extensionProfile] The
   * virtual machine scale set extension profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.extensionProfile.extensions] The virtual
   * machine scale set child extension resources.
   *
   * @param {string} [parameters.virtualMachineProfile.licenseType] The license
   * type, which is for bring your own license scenario.
   *
   * @param {boolean} [parameters.overprovision] Specifies whether the Virtual
   * Machine Scale Set should be overprovisioned.
   *
   * @param {string} [parameters.uniqueId] Specifies the ID which uniquely
   * identifies a Virtual Machine Scale Set.
   *
   * @param {boolean} [parameters.singlePlacementGroup] When true this limits the
   * scale set to a single placement group, of max size 100 virtual machines.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine
   * scale set, if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine scale set. Currently, the only supported type is
   * 'SystemAssigned', which implicitly creates an identity. Possible values
   * include: 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSet>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, vmScaleSetName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or update a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set to create or
   * update.
   *
   * @param {object} parameters The scale set object.
   *
   * @param {object} [parameters.sku] The virtual machine scale set sku.
   *
   * @param {string} [parameters.sku.name] The sku name.
   *
   * @param {string} [parameters.sku.tier] The sku tier.
   *
   * @param {number} [parameters.sku.capacity] The sku capacity.
   *
   * @param {object} [parameters.plan] The purchase plan when deploying a virtual
   * machine scale set from VM Marketplace images.
   *
   * @param {string} [parameters.plan.name] The plan ID.
   *
   * @param {string} [parameters.plan.publisher] The publisher ID.
   *
   * @param {string} [parameters.plan.product] The offer ID.
   *
   * @param {string} [parameters.plan.promotionCode] The promotion code.
   *
   * @param {object} [parameters.upgradePolicy] The upgrade policy.
   *
   * @param {string} [parameters.upgradePolicy.mode] The upgrade mode. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {object} [parameters.recoveryPolicy] The recovery policy.
   *
   * @param {string} [parameters.recoveryPolicy.mode] The recovery mode. Possible
   * values include: 'None', 'OverProvision', 'Reprovision'
   *
   * @param {object} [parameters.virtualMachineProfile] The virtual machine
   * profile.
   *
   * @param {object} [parameters.virtualMachineProfile.osProfile] The virtual
   * machine scale set OS profile.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.computerNamePrefix] The computer
   * name prefix.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminUsername]
   * The admin user name.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.adminPassword]
   * The admin user password.
   *
   * @param {string} [parameters.virtualMachineProfile.osProfile.customData] A
   * base-64 encoded string of custom data.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration] The
   * Windows Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent]
   * Indicates whether the virtual machine agent should be provisioned on the
   * Virtual Machine. If not specified, then the default behavior is to set it to
   * true.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates]
   * Indicates whether Windows updates are automatically installed on the VM.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.timeZone]
   * The time zone of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent]
   * Additional base-64 encoded XML formatted information that can be included in
   * the Unattend.xml file.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM] The
   * Windows Remote Management configuration of the VM
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners]
   * The list of Windows Remote Management listeners
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration] The Linux
   * Configuration of the OS profile.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication]
   * Specifies whether password authentication should be disabled.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh] The SSH
   * configuration for linux VMs.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys]
   * The list of SSH public keys used to authenticate with linux based VMs.
   *
   * @param {array} [parameters.virtualMachineProfile.osProfile.secrets] The List
   * of certificates for addition to the VM.
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile] The
   * virtual machine scale set storage profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.imageReference] The image
   * reference.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.publisher]
   * The image publisher.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.offer] The
   * image offer.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.sku] The
   * image SKU.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.version] The
   * image version. The allowed formats are Major.Minor.Build or 'latest'. Major,
   * Minor and Build are decimal numbers. Specify 'latest' to use the latest
   * version of the image.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.imageReference.id] Resource
   * Id
   *
   * @param {object} [parameters.virtualMachineProfile.storageProfile.osDisk] The
   * OS disk.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.name] The disk name.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.caching] The caching
   * type. Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   *
   * @param {string}
   * parameters.virtualMachineProfile.storageProfile.osDisk.createOption The
   * create option. Possible values include: 'fromImage', 'empty', 'attach'
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.osType] The
   * Operating System type. Possible values include: 'Windows', 'Linux'
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image] The Source
   * User Image VirtualHardDisk. This VirtualHardDisk will be copied before using
   * it to attach to the Virtual Machine. If SourceImage is provided, the
   * destination VirtualHardDisk should not exist.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.image.uri] The
   * virtual hard disk's URI. Must be a valid URI to a virtual hard disk.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.vhdContainers] The
   * list of virtual hard disk container uris.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk] The
   * managed disk parameters.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.storageProfile.osDisk.managedDisk.storageAccountType]
   * The Storage Account type. Possible values include: 'Standard_LRS',
   * 'Premium_LRS'
   *
   * @param {array} [parameters.virtualMachineProfile.storageProfile.dataDisks]
   * The data disks.
   *
   * @param {object} [parameters.virtualMachineProfile.networkProfile] The
   * virtual machine scale set network profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.networkProfile.networkInterfaceConfigurations]
   * The list of network configurations.
   *
   * @param {object} [parameters.virtualMachineProfile.diagnosticsProfile] The
   * virtual machine scale set diagnostics profile.
   *
   * @param {object}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics] Boot
   * Diagnostics is a debugging feature which allows the user to view console
   * output and/or a screenshot of the virtual machine from the hypervisor.
   *
   * @param {boolean}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled]
   * Whether boot diagnostics should be enabled on the Virtual Machine.
   *
   * @param {string}
   * [parameters.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri]
   * URI of the storage account to use for placing the console output and
   * screenshot.
   *
   * @param {object} [parameters.virtualMachineProfile.extensionProfile] The
   * virtual machine scale set extension profile.
   *
   * @param {array}
   * [parameters.virtualMachineProfile.extensionProfile.extensions] The virtual
   * machine scale set child extension resources.
   *
   * @param {string} [parameters.virtualMachineProfile.licenseType] The license
   * type, which is for bring your own license scenario.
   *
   * @param {boolean} [parameters.overprovision] Specifies whether the Virtual
   * Machine Scale Set should be overprovisioned.
   *
   * @param {string} [parameters.uniqueId] Specifies the ID which uniquely
   * identifies a Virtual Machine Scale Set.
   *
   * @param {boolean} [parameters.singlePlacementGroup] When true this limits the
   * scale set to a single placement group, of max size 100 virtual machines.
   *
   * @param {object} [parameters.identity] The identity of the virtual machine
   * scale set, if configured.
   *
   * @param {string} [parameters.identity.type] The type of identity used for the
   * virtual machine scale set. Currently, the only supported type is
   * 'SystemAssigned', which implicitly creates an identity. Possible values
   * include: 'SystemAssigned'
   *
   * @param {string} parameters.location Resource location
   *
   * @param {object} [parameters.tags] Resource tags
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSet} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSet} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Deallocates specific virtual machines in a VM scale set. Shuts down the
   * virtual machines and releases the compute resources. You are not billed for
   * the compute resources that this virtual machine scale set deallocates.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeallocateWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeallocate(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deallocates specific virtual machines in a VM scale set. Shuts down the
   * virtual machines and releases the compute resources. You are not billed for
   * the compute resources that this virtual machine scale set deallocates.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeallocate(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeallocate(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeallocate(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Deletes virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteInstancesWithHttpOperationResponse(resourceGroupName, vmScaleSetName, instanceIds, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback);
    }
  }

  /**
   * Power off (stop) one or more virtual machines in a VM scale set. Note that
   * resources are still attached and you are getting charged for the resources.
   * Instead, use deallocate to release resources and avoid charges.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPowerOffWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPowerOff(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Power off (stop) one or more virtual machines in a VM scale set. Note that
   * resources are still attached and you are getting charged for the resources.
   * Instead, use deallocate to release resources and avoid charges.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPowerOff(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPowerOff(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPowerOff(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Restarts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginRestartWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginRestart(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Restarts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginRestart(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginRestart(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginRestart(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Starts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginStartWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginStart(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Starts one or more virtual machines in a VM scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.instanceIds] The virtual machine scale set instance
   * ids.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginStart(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginStart(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginStart(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Upgrades one or more virtual machines to the latest SKU set in the VM scale
   * set model.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginUpdateInstancesWithHttpOperationResponse(resourceGroupName, vmScaleSetName, instanceIds, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginUpdateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Upgrades one or more virtual machines to the latest SKU set in the VM scale
   * set model.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {array} instanceIds The virtual machine scale set instance ids.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginUpdateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginUpdateInstances(resourceGroupName, vmScaleSetName, instanceIds, options, optionalCallback);
    }
  }

  /**
   * Reimages (upgrade the operating system) one or more virtual machines in a VM
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginReimageWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginReimage(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Reimages (upgrade the operating system) one or more virtual machines in a VM
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginReimage(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginReimage(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginReimage(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Reimages all the disks ( including data disks ) in the virtual machines in a
   * VM scale set. This operation is only supported for managed disks.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginReimageAllWithHttpOperationResponse(resourceGroupName, vmScaleSetName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginReimageAll(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Reimages all the disks ( including data disks ) in the virtual machines in a
   * VM scale set. This operation is only supported for managed disks.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmScaleSetName The name of the VM scale set.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatusResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginReimageAll(resourceGroupName, vmScaleSetName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginReimageAll(resourceGroupName, vmScaleSetName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginReimageAll(resourceGroupName, vmScaleSetName, options, optionalCallback);
    }
  }

  /**
   * Gets a list of all VM scale sets under a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSetListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a list of all VM scale sets under a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSetListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSetListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * Gets a list of all VM Scale Sets in the subscription, regardless of the
   * associated resource group. Use nextLink property in the response to get the
   * next page of VM Scale Sets. Do this till nextLink is not null to fetch all
   * the VM Scale Sets.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSetListWithLinkResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listAllNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listAllNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a list of all VM Scale Sets in the subscription, regardless of the
   * associated resource group. Use nextLink property in the response to get the
   * next page of VM Scale Sets. Do this till nextLink is not null to fetch all
   * the VM Scale Sets.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSetListWithLinkResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSetListWithLinkResult}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listAllNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listAllNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listAllNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * Gets a list of SKUs available for your VM scale set, including the minimum
   * and maximum VM instances allowed for each SKU.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VirtualMachineScaleSetListSkusResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listSkusNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listSkusNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a list of SKUs available for your VM scale set, including the minimum
   * and maximum VM instances allowed for each SKU.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VirtualMachineScaleSetListSkusResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VirtualMachineScaleSetListSkusResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listSkusNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listSkusNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listSkusNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = VirtualMachineScaleSets;
