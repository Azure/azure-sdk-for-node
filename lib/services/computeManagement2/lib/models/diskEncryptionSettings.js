/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes a Encryption Settings for a Disk
 *
 */
class DiskEncryptionSettings {
  /**
   * Create a DiskEncryptionSettings.
   * @property {object} [diskEncryptionKey] Specifies the location of the disk
   * encryption key, which is a Key Vault Secret.
   * @property {string} [diskEncryptionKey.secretUrl] The URL referencing a
   * secret in a Key Vault.
   * @property {object} [diskEncryptionKey.sourceVault] The relative URL of the
   * Key Vault containing the secret.
   * @property {string} [diskEncryptionKey.sourceVault.id] Resource Id
   * @property {object} [keyEncryptionKey] Specifies the location of the key
   * encryption key in Key Vault.
   * @property {string} [keyEncryptionKey.keyUrl] The URL referencing a key
   * encryption key in Key Vault.
   * @property {object} [keyEncryptionKey.sourceVault] The relative URL of the
   * Key Vault containing the key.
   * @property {string} [keyEncryptionKey.sourceVault.id] Resource Id
   * @property {boolean} [enabled] Specifies whether disk encryption should be
   * enabled on the virtual machine.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DiskEncryptionSettings
   *
   * @returns {object} metadata of DiskEncryptionSettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DiskEncryptionSettings',
      type: {
        name: 'Composite',
        className: 'DiskEncryptionSettings',
        modelProperties: {
          diskEncryptionKey: {
            required: false,
            serializedName: 'diskEncryptionKey',
            type: {
              name: 'Composite',
              className: 'KeyVaultSecretReference'
            }
          },
          keyEncryptionKey: {
            required: false,
            serializedName: 'keyEncryptionKey',
            type: {
              name: 'Composite',
              className: 'KeyVaultKeyReference'
            }
          },
          enabled: {
            required: false,
            serializedName: 'enabled',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = DiskEncryptionSettings;
