/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DiskEncryptionSettings class.
 * @constructor
 * Describes a Encryption Settings for a Disk
 * @member {object} [diskEncryptionKey] Gets or sets the disk encryption key
 * which is a KeyVault Secret.
 * 
 * @member {string} [diskEncryptionKey.secretUrl] Gets or sets the URL
 * referencing a secret in a Key Vault.
 * 
 * @member {object} [diskEncryptionKey.sourceVault] Gets or sets the Relative
 * URL of the Key Vault containing the secret.
 * 
 * @member {string} [diskEncryptionKey.sourceVault.id] Resource Id
 * 
 * @member {object} [keyEncryptionKey] Gets or sets the key encryption key
 * which is KeyVault Key.
 * 
 * @member {string} [keyEncryptionKey.keyUrl] Gets or sets the URL referencing
 * a key in a Key Vault.
 * 
 * @member {object} [keyEncryptionKey.sourceVault] Gets or sets the Relative
 * URL of the Key Vault containing the key
 * 
 * @member {string} [keyEncryptionKey.sourceVault.id] Resource Id
 * 
 * @member {boolean} [enabled] Gets or sets whether disk encryption should be
 * enabled on the Virtual Machine.
 * 
 */
function DiskEncryptionSettings() {
}

/**
 * Defines the metadata of DiskEncryptionSettings
 *
 * @returns {object} metadata of DiskEncryptionSettings
 *
 */
DiskEncryptionSettings.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DiskEncryptionSettings',
    type: {
      name: 'Composite',
      className: 'DiskEncryptionSettings',
      modelProperties: {
        diskEncryptionKey: {
          required: false,
          serializedName: 'diskEncryptionKey',
          type: {
            name: 'Composite',
            className: 'KeyVaultSecretReference'
          }
        },
        keyEncryptionKey: {
          required: false,
          serializedName: 'keyEncryptionKey',
          type: {
            name: 'Composite',
            className: 'KeyVaultKeyReference'
          }
        },
        enabled: {
          required: false,
          serializedName: 'enabled',
          type: {
            name: 'Boolean'
          }
        }
      }
    }
  };
};

module.exports = DiskEncryptionSettings;
