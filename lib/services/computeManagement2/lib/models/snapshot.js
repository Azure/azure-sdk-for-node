/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Snapshot resource.
 *
 * @extends models['Resource']
 */
class Snapshot extends models['Resource'] {
  /**
   * Create a Snapshot.
   * @property {string} [managedBy] Unused. Always Null.
   * @property {object} [sku]
   * @property {string} [sku.name] The sku name. Possible values include:
   * 'Standard_LRS', 'Premium_LRS', 'Standard_ZRS'
   * @property {string} [sku.tier] The sku tier.
   * @property {date} [timeCreated] The time when the disk was created.
   * @property {string} [osType] The Operating System type. Possible values
   * include: 'Windows', 'Linux'
   * @property {string} [hyperVGeneration] The hypervisor generation of the
   * Virtual Machine. Applicable to OS disks only. Possible values include:
   * 'V1', 'V2'
   * @property {object} creationData Disk source information. CreationData
   * information cannot be changed after the disk has been created.
   * @property {string} [creationData.createOption] This enumerates the
   * possible sources of a disk's creation. Possible values include: 'Empty',
   * 'Attach', 'FromImage', 'Import', 'Copy', 'Restore', 'Upload'
   * @property {string} [creationData.storageAccountId] If createOption is
   * Import, the Azure Resource Manager identifier of the storage account
   * containing the blob to import as a disk. Required only if the blob is in a
   * different subscription
   * @property {object} [creationData.imageReference] Disk source information.
   * @property {string} [creationData.imageReference.id] A relative uri
   * containing either a Platform Image Repository or user image reference.
   * @property {number} [creationData.imageReference.lun] If the disk is
   * created from an image's data disk, this is an index that indicates which
   * of the data disks in the image to use. For OS disks, this field is null.
   * @property {string} [creationData.sourceUri] If createOption is Import,
   * this is the URI of a blob to be imported into a managed disk.
   * @property {string} [creationData.sourceResourceId] If createOption is
   * Copy, this is the ARM id of the source snapshot or disk.
   * @property {number} [diskSizeGB] If creationData.createOption is Empty,
   * this field is mandatory and it indicates the size of the VHD to create. If
   * this field is present for updates or creation with other options, it
   * indicates a resize. Resizes are only allowed if the disk is not attached
   * to a running VM, and can only increase the disk's size.
   * @property {object} [encryptionSettingsCollection] Encryption settings
   * collection used be Azure Disk Encryption, can contain multiple encryption
   * settings per disk or snapshot.
   * @property {boolean} [encryptionSettingsCollection.enabled] Set this flag
   * to true and provide DiskEncryptionKey and optional KeyEncryptionKey to
   * enable encryption. Set this flag to false and remove DiskEncryptionKey and
   * KeyEncryptionKey to disable encryption. If EncryptionSettings is null in
   * the request object, the existing settings remain unchanged.
   * @property {array} [encryptionSettingsCollection.encryptionSettings] A
   * collection of encryption settings, one for each disk volume.
   * @property {string} [provisioningState] The disk provisioning state.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Snapshot
   *
   * @returns {object} metadata of Snapshot
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Snapshot',
      type: {
        name: 'Composite',
        className: 'Snapshot',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          managedBy: {
            required: false,
            readOnly: true,
            serializedName: 'managedBy',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'SnapshotSku'
            }
          },
          timeCreated: {
            required: false,
            readOnly: true,
            serializedName: 'properties.timeCreated',
            type: {
              name: 'DateTime'
            }
          },
          osType: {
            required: false,
            serializedName: 'properties.osType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Windows', 'Linux' ]
            }
          },
          hyperVGeneration: {
            required: false,
            serializedName: 'properties.hyperVGeneration',
            type: {
              name: 'String'
            }
          },
          creationData: {
            required: true,
            serializedName: 'properties.creationData',
            type: {
              name: 'Composite',
              className: 'CreationData'
            }
          },
          diskSizeGB: {
            required: false,
            serializedName: 'properties.diskSizeGB',
            type: {
              name: 'Number'
            }
          },
          encryptionSettingsCollection: {
            required: false,
            serializedName: 'properties.encryptionSettingsCollection',
            type: {
              name: 'Composite',
              className: 'EncryptionSettingsCollection'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Snapshot;
