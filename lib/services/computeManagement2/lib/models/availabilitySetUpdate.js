/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Specifies information about the availability set that the virtual machine
 * should be assigned to. Only tags may be updated.
 *
 * @extends models['UpdateResource']
 */
class AvailabilitySetUpdate extends models['UpdateResource'] {
  /**
   * Create a AvailabilitySetUpdate.
   * @property {number} [platformUpdateDomainCount] Update Domain count.
   * @property {number} [platformFaultDomainCount] Fault Domain count.
   * @property {array} [virtualMachines] A list of references to all virtual
   * machines in the availability set.
   * @property {array} [statuses] The resource status information.
   * @property {object} [sku] Sku of the availability set
   * @property {string} [sku.name] The sku name.
   * @property {string} [sku.tier] Specifies the tier of virtual machines in a
   * scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br
   * /> **Basic**
   * @property {number} [sku.capacity] Specifies the number of virtual machines
   * in the scale set.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of AvailabilitySetUpdate
   *
   * @returns {object} metadata of AvailabilitySetUpdate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AvailabilitySetUpdate',
      type: {
        name: 'Composite',
        className: 'AvailabilitySetUpdate',
        modelProperties: {
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          platformUpdateDomainCount: {
            required: false,
            serializedName: 'properties.platformUpdateDomainCount',
            type: {
              name: 'Number'
            }
          },
          platformFaultDomainCount: {
            required: false,
            serializedName: 'properties.platformFaultDomainCount',
            type: {
              name: 'Number'
            }
          },
          virtualMachines: {
            required: false,
            serializedName: 'properties.virtualMachines',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SubResourceElementType',
                  type: {
                    name: 'Composite',
                    className: 'SubResource'
                  }
              }
            }
          },
          statuses: {
            required: false,
            readOnly: true,
            serializedName: 'properties.statuses',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'InstanceViewStatusElementType',
                  type: {
                    name: 'Composite',
                    className: 'InstanceViewStatus'
                  }
              }
            }
          },
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          }
        }
      }
    };
  }
}

module.exports = AvailabilitySetUpdate;
