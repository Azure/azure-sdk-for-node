/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the DataDisk class.
 * @constructor
 * Describes a data disk.
 *
 * @member {number} lun The logical unit number.
 *
 * @member {string} [name] The disk name.
 *
 * @member {object} [vhd] The virtual hard disk.
 *
 * @member {string} [vhd.uri] The virtual hard disk's URI. Must be a valid URI
 * to a virtual hard disk.
 *
 * @member {object} [image] The source user image virtual hard disk. This
 * virtual hard disk will be copied before using it to attach to the virtual
 * machine. If SourceImage is provided, the destination virtual hard disk must
 * not exist.
 *
 * @member {string} [image.uri] The virtual hard disk's URI. Must be a valid
 * URI to a virtual hard disk.
 *
 * @member {string} [caching] The caching type. Possible values include:
 * 'None', 'ReadOnly', 'ReadWrite'
 *
 * @member {string} createOption The create option. Possible values include:
 * 'fromImage', 'empty', 'attach'
 *
 * @member {number} [diskSizeGB] The initial disk size in GB for blank data
 * disks, and the new desired size for resizing existing OS and data disks.
 *
 * @member {object} [managedDisk] The managed disk parameters.
 *
 * @member {string} [managedDisk.storageAccountType] The Storage Account type.
 * Possible values include: 'Standard_LRS', 'Premium_LRS'
 *
 */
class DataDisk {
  constructor() {
  }

  /**
   * Defines the metadata of DataDisk
   *
   * @returns {object} metadata of DataDisk
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataDisk',
      type: {
        name: 'Composite',
        className: 'DataDisk',
        modelProperties: {
          lun: {
            required: true,
            serializedName: 'lun',
            type: {
              name: 'Number'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          vhd: {
            required: false,
            serializedName: 'vhd',
            type: {
              name: 'Composite',
              className: 'VirtualHardDisk'
            }
          },
          image: {
            required: false,
            serializedName: 'image',
            type: {
              name: 'Composite',
              className: 'VirtualHardDisk'
            }
          },
          caching: {
            required: false,
            serializedName: 'caching',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'ReadOnly', 'ReadWrite' ]
            }
          },
          createOption: {
            required: true,
            serializedName: 'createOption',
            type: {
              name: 'Enum',
              allowedValues: [ 'fromImage', 'empty', 'attach' ]
            }
          },
          diskSizeGB: {
            required: false,
            serializedName: 'diskSizeGB',
            type: {
              name: 'Number'
            }
          },
          managedDisk: {
            required: false,
            serializedName: 'managedDisk',
            type: {
              name: 'Composite',
              className: 'ManagedDiskParameters'
            }
          }
        }
      }
    };
  }
}

module.exports = DataDisk;
