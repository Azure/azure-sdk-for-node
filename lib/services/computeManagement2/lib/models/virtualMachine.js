/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the VirtualMachine class.
 * @constructor
 * Describes a Virtual Machine.
 *
 * @member {object} [plan] The purchase plan when deploying virtual machine
 * from VM Marketplace images.
 *
 * @member {string} [plan.name] The plan ID.
 *
 * @member {string} [plan.publisher] The publisher ID.
 *
 * @member {string} [plan.product] The offer ID.
 *
 * @member {string} [plan.promotionCode] The promotion code.
 *
 * @member {object} [hardwareProfile] The hardware profile.
 *
 * @member {string} [hardwareProfile.vmSize] The virtual machine size name.
 * Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2', 'Basic_A3',
 * 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2', 'Standard_A2m_v2',
 * 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_D1', 'Standard_D2',
 * 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
 * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
 * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
 * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_D15_v2',
 * 'Standard_DS1', 'Standard_DS2', 'Standard_DS3', 'Standard_DS4',
 * 'Standard_DS11', 'Standard_DS12', 'Standard_DS13', 'Standard_DS14',
 * 'Standard_DS1_v2', 'Standard_DS2_v2', 'Standard_DS3_v2', 'Standard_DS4_v2',
 * 'Standard_DS5_v2', 'Standard_DS11_v2', 'Standard_DS12_v2',
 * 'Standard_DS13_v2', 'Standard_DS14_v2', 'Standard_DS15_v2', 'Standard_F1',
 * 'Standard_F2', 'Standard_F4', 'Standard_F8', 'Standard_F16', 'Standard_F1s',
 * 'Standard_F2s', 'Standard_F4s', 'Standard_F8s', 'Standard_F16s',
 * 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5',
 * 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
 * 'Standard_GS5', 'Standard_H8', 'Standard_H16', 'Standard_H8m',
 * 'Standard_H16m', 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s',
 * 'Standard_L8s', 'Standard_L16s', 'Standard_L32s', 'Standard_NC6',
 * 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r', 'Standard_NV6',
 * 'Standard_NV12', 'Standard_NV24'
 *
 * @member {object} [storageProfile] The storage profile.
 *
 * @member {object} [storageProfile.imageReference] The image reference.
 *
 * @member {string} [storageProfile.imageReference.publisher] The image
 * publisher.
 *
 * @member {string} [storageProfile.imageReference.offer] The image offer.
 *
 * @member {string} [storageProfile.imageReference.sku] The image SKU.
 *
 * @member {string} [storageProfile.imageReference.version] The image version.
 * The allowed formats are Major.Minor.Build or 'latest'. Major, Minor and
 * Build are decimal numbers. Specify 'latest' to use the latest version of the
 * image.
 *
 * @member {object} [storageProfile.osDisk] The OS disk.
 *
 * @member {string} [storageProfile.osDisk.osType] The Operating System type.
 * Possible values include: 'Windows', 'Linux'
 *
 * @member {object} [storageProfile.osDisk.encryptionSettings] The disk
 * encryption settings.
 *
 * @member {object}
 * [storageProfile.osDisk.encryptionSettings.diskEncryptionKey] The disk
 * encryption key which is a Key Vault Secret.
 *
 * @member {string}
 * [storageProfile.osDisk.encryptionSettings.diskEncryptionKey.secretUrl] The
 * URL referencing a secret in a Key Vault.
 *
 * @member {object}
 * [storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault] The
 * relative URL of the Key Vault containing the secret.
 *
 * @member {string}
 * [storageProfile.osDisk.encryptionSettings.diskEncryptionKey.sourceVault.id]
 * Resource Id
 *
 * @member {object} [storageProfile.osDisk.encryptionSettings.keyEncryptionKey]
 * The key encryption key which is Key Vault Key.
 *
 * @member {string}
 * [storageProfile.osDisk.encryptionSettings.keyEncryptionKey.keyUrl] The URL
 * referencing a key in a Key Vault.
 *
 * @member {object}
 * [storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault] The
 * relative URL of the Key Vault containing the key.
 *
 * @member {string}
 * [storageProfile.osDisk.encryptionSettings.keyEncryptionKey.sourceVault.id]
 * Resource Id
 *
 * @member {boolean} [storageProfile.osDisk.encryptionSettings.enabled]
 * Specifies whether disk encryption should be enabled on the virtual machine.
 *
 * @member {string} [storageProfile.osDisk.name] The disk name.
 *
 * @member {object} [storageProfile.osDisk.vhd] The virtual hard disk.
 *
 * @member {string} [storageProfile.osDisk.vhd.uri] The virtual hard disk's
 * URI. Must be a valid URI to a virtual hard disk.
 *
 * @member {object} [storageProfile.osDisk.image] The source user image virtual
 * hard disk. The virtual hard disk will be copied before using it to attach to
 * the virtual machine. If SourceImage is provided, the destination virtual
 * hard disk must not exist.
 *
 * @member {string} [storageProfile.osDisk.image.uri] The virtual hard disk's
 * URI. Must be a valid URI to a virtual hard disk.
 *
 * @member {string} [storageProfile.osDisk.caching] The caching type. Possible
 * values include: 'None', 'ReadOnly', 'ReadWrite'
 *
 * @member {string} [storageProfile.osDisk.createOption] The create option.
 * Possible values include: 'fromImage', 'empty', 'attach'
 *
 * @member {number} [storageProfile.osDisk.diskSizeGB] The initial disk size,
 * in GB, for blank data disks, and the new desired size for resizing existing
 * OS and data disks.
 *
 * @member {object} [storageProfile.osDisk.managedDisk] The managed disk
 * parameters.
 *
 * @member {string} [storageProfile.osDisk.managedDisk.storageAccountType] The
 * Storage Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
 *
 * @member {array} [storageProfile.dataDisks] The data disks.
 *
 * @member {object} [osProfile] The OS profile.
 *
 * @member {string} [osProfile.computerName] Specifies the host OS name of the
 * virtual machine.
 *
 * @member {string} [osProfile.adminUsername] Specifies the name of the
 * administrator account.
 *
 * @member {string} [osProfile.adminPassword] Specifies the password of the
 * administrator account.
 *
 * @member {string} [osProfile.customData] Specifies a base-64 encoded string
 * of custom data. The base-64 encoded string is decoded to a binary array that
 * is saved as a file on the Virtual Machine. The maximum length of the binary
 * array is 65535 bytes
 *
 * @member {object} [osProfile.windowsConfiguration] The Windows configuration
 * of the OS profile.
 *
 * @member {boolean} [osProfile.windowsConfiguration.provisionVMAgent]
 * Indicates whether the virtual machine agent should be provisioned on the
 * Virtual Machine. If not specified, then the default behavior is to set it to
 * true.
 *
 * @member {boolean} [osProfile.windowsConfiguration.enableAutomaticUpdates]
 * Indicates whether Windows updates are automatically installed on the VM.
 *
 * @member {string} [osProfile.windowsConfiguration.timeZone] The time zone of
 * the VM
 *
 * @member {array} [osProfile.windowsConfiguration.additionalUnattendContent]
 * Additional base-64 encoded XML formatted information that can be included in
 * the Unattend.xml file.
 *
 * @member {object} [osProfile.windowsConfiguration.winRM] The Windows Remote
 * Management configuration of the VM
 *
 * @member {array} [osProfile.windowsConfiguration.winRM.listeners] The list of
 * Windows Remote Management listeners
 *
 * @member {object} [osProfile.linuxConfiguration] The Linux configuration of
 * the OS profile.
 *
 * @member {boolean}
 * [osProfile.linuxConfiguration.disablePasswordAuthentication] Specifies
 * whether password authentication should be disabled.
 *
 * @member {object} [osProfile.linuxConfiguration.ssh] The SSH configuration
 * for linux VMs.
 *
 * @member {array} [osProfile.linuxConfiguration.ssh.publicKeys] The list of
 * SSH public keys used to authenticate with linux based VMs.
 *
 * @member {array} [osProfile.secrets] The list of certificates for addition to
 * the VM.
 *
 * @member {object} [networkProfile] The network profile.
 *
 * @member {array} [networkProfile.networkInterfaces] Specifies the list of
 * resource IDs for the network interfaces associated with the virtual machine.
 *
 * @member {object} [diagnosticsProfile] The diagnostics profile.
 *
 * @member {object} [diagnosticsProfile.bootDiagnostics] Boot Diagnostics is a
 * debugging feature which allows the user to view console output and/or a
 * screenshot of the virtual machine from the hypervisor.
 *
 * @member {boolean} [diagnosticsProfile.bootDiagnostics.enabled] Whether boot
 * diagnostics should be enabled on the Virtual Machine.
 *
 * @member {string} [diagnosticsProfile.bootDiagnostics.storageUri] URI of the
 * storage account to use for placing the console output and screenshot.
 *
 * @member {object} [availabilitySet] The reference Id of the availability set
 * to which the virtual machine belongs.
 *
 * @member {string} [availabilitySet.id] Resource Id
 *
 * @member {string} [provisioningState] The provisioning state, which only
 * appears in the response.
 *
 * @member {object} [instanceView] The virtual machine instance view.
 *
 * @member {number} [instanceView.platformUpdateDomain] Specifies the update
 * domain of the virtual machine.
 *
 * @member {number} [instanceView.platformFaultDomain] Specifies the fault
 * domain of the virtual machine.
 *
 * @member {string} [instanceView.rdpThumbPrint] The Remote desktop certificate
 * thumbprint.
 *
 * @member {object} [instanceView.vmAgent] The VM Agent running on the virtual
 * machine.
 *
 * @member {string} [instanceView.vmAgent.vmAgentVersion] The VM Agent full
 * version.
 *
 * @member {array} [instanceView.vmAgent.extensionHandlers] The virtual machine
 * extension handler instance view.
 *
 * @member {array} [instanceView.vmAgent.statuses] The resource status
 * information.
 *
 * @member {object} [instanceView.maintenanceRedeployStatus] The Maintenance
 * Operation status on the virtual machine.
 *
 * @member {boolean}
 * [instanceView.maintenanceRedeployStatus.isCustomerInitiatedMaintenanceAllowed]
 * True, if customer is allowed to perform Maintenance.
 *
 * @member {date}
 * [instanceView.maintenanceRedeployStatus.preMaintenanceWindowStartTime] Start
 * Time for the Pre Maintenance Window.
 *
 * @member {date}
 * [instanceView.maintenanceRedeployStatus.preMaintenanceWindowEndTime] End
 * Time for the Pre Maintenance Window.
 *
 * @member {date}
 * [instanceView.maintenanceRedeployStatus.maintenanceWindowStartTime] Start
 * Time for the Maintenance Window.
 *
 * @member {date}
 * [instanceView.maintenanceRedeployStatus.maintenanceWindowEndTime] End Time
 * for the Maintenance Window.
 *
 * @member {string}
 * [instanceView.maintenanceRedeployStatus.lastOperationResultCode] The Last
 * Maintenance Operation Result Code. Possible values include: 'None',
 * 'RetryLater', 'MaintenanceAborted', 'MaintenanceCompleted'
 *
 * @member {string}
 * [instanceView.maintenanceRedeployStatus.lastOperationMessage] Message
 * returned for the last Maintenance Operation.
 *
 * @member {array} [instanceView.disks] The virtual machine disk information.
 *
 * @member {array} [instanceView.extensions] The extensions information.
 *
 * @member {object} [instanceView.bootDiagnostics] The boot diagnostics.
 *
 * @member {string} [instanceView.bootDiagnostics.consoleScreenshotBlobUri] The
 * console screenshot blob URI.
 *
 * @member {string} [instanceView.bootDiagnostics.serialConsoleLogBlobUri] The
 * Linux serial console log blob Uri.
 *
 * @member {array} [instanceView.statuses] The resource status information.
 *
 * @member {string} [licenseType] Specifies that the image or disk that is
 * being used was licensed on-premises. This element is only used for images
 * that contain the Windows Server operating system.
 *
 * @member {string} [vmId] Specifies the VM unique ID which is a 128-bits
 * identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can
 * be read using platform BIOS commands.
 *
 * @member {array} [resources] The virtual machine child extension resources.
 *
 * @member {object} [identity] The identity of the virtual machine, if
 * configured.
 *
 * @member {string} [identity.principalId] The principal id of virtual machine
 * identity.
 *
 * @member {string} [identity.tenantId] The tenant id associated with the
 * virtual machine.
 *
 * @member {string} [identity.type] The type of identity used for the virtual
 * machine. Currently, the only supported type is 'SystemAssigned', which
 * implicitly creates an identity. Possible values include: 'SystemAssigned'
 *
 */
class VirtualMachine extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VirtualMachine
   *
   * @returns {object} metadata of VirtualMachine
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VirtualMachine',
      type: {
        name: 'Composite',
        className: 'VirtualMachine',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          plan: {
            required: false,
            serializedName: 'plan',
            type: {
              name: 'Composite',
              className: 'Plan'
            }
          },
          hardwareProfile: {
            required: false,
            serializedName: 'properties.hardwareProfile',
            type: {
              name: 'Composite',
              className: 'HardwareProfile'
            }
          },
          storageProfile: {
            required: false,
            serializedName: 'properties.storageProfile',
            type: {
              name: 'Composite',
              className: 'StorageProfile'
            }
          },
          osProfile: {
            required: false,
            serializedName: 'properties.osProfile',
            type: {
              name: 'Composite',
              className: 'OSProfile'
            }
          },
          networkProfile: {
            required: false,
            serializedName: 'properties.networkProfile',
            type: {
              name: 'Composite',
              className: 'NetworkProfile'
            }
          },
          diagnosticsProfile: {
            required: false,
            serializedName: 'properties.diagnosticsProfile',
            type: {
              name: 'Composite',
              className: 'DiagnosticsProfile'
            }
          },
          availabilitySet: {
            required: false,
            serializedName: 'properties.availabilitySet',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          instanceView: {
            required: false,
            readOnly: true,
            serializedName: 'properties.instanceView',
            type: {
              name: 'Composite',
              className: 'VirtualMachineInstanceView'
            }
          },
          licenseType: {
            required: false,
            serializedName: 'properties.licenseType',
            type: {
              name: 'String'
            }
          },
          vmId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.vmId',
            type: {
              name: 'String'
            }
          },
          resources: {
            required: false,
            readOnly: true,
            serializedName: 'resources',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VirtualMachineExtensionElementType',
                  type: {
                    name: 'Composite',
                    className: 'VirtualMachineExtension'
                  }
              }
            }
          },
          identity: {
            required: false,
            serializedName: 'identity',
            type: {
              name: 'Composite',
              className: 'VirtualMachineIdentity'
            }
          }
        }
      }
    };
  }
}

module.exports = VirtualMachine;
