/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The source user image virtual hard disk. Only tags may be updated.
 *
 * @extends models['UpdateResource']
 */
class ImageUpdate extends models['UpdateResource'] {
  /**
   * Create a ImageUpdate.
   * @property {object} [sourceVirtualMachine] The source virtual machine from
   * which Image is created.
   * @property {string} [sourceVirtualMachine.id] Resource Id
   * @property {object} [storageProfile] Specifies the storage settings for the
   * virtual machine disks.
   * @property {object} [storageProfile.osDisk] Specifies information about the
   * operating system disk used by the virtual machine. <br><br> For more
   * information about disks, see [About disks and VHDs for Azure virtual
   * machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   * @property {string} [storageProfile.osDisk.osType] This property allows you
   * to specify the type of the OS that is included in the disk if creating a
   * VM from a custom image. <br><br> Possible values are: <br><br> **Windows**
   * <br><br> **Linux**. Possible values include: 'Windows', 'Linux'
   * @property {string} [storageProfile.osDisk.osState] The OS State. Possible
   * values include: 'Generalized', 'Specialized'
   * @property {object} [storageProfile.osDisk.snapshot] The snapshot.
   * @property {string} [storageProfile.osDisk.snapshot.id] Resource Id
   * @property {object} [storageProfile.osDisk.managedDisk] The managedDisk.
   * @property {string} [storageProfile.osDisk.managedDisk.id] Resource Id
   * @property {string} [storageProfile.osDisk.blobUri] The Virtual Hard Disk.
   * @property {string} [storageProfile.osDisk.caching] Specifies the caching
   * requirements. <br><br> Possible values are: <br><br> **None** <br><br>
   * **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard
   * storage. ReadOnly for Premium storage**. Possible values include: 'None',
   * 'ReadOnly', 'ReadWrite'
   * @property {number} [storageProfile.osDisk.diskSizeGB] Specifies the size
   * of empty data disks in gigabytes. This element can be used to overwrite
   * the name of the disk in a virtual machine image. <br><br> This value
   * cannot be larger than 1023 GB
   * @property {string} [storageProfile.osDisk.storageAccountType] Specifies
   * the storage account type for the managed disk. UltraSSD_LRS cannot be used
   * with OS Disk. Possible values include: 'Standard_LRS', 'Premium_LRS',
   * 'StandardSSD_LRS', 'UltraSSD_LRS'
   * @property {array} [storageProfile.dataDisks] Specifies the parameters that
   * are used to add a data disk to a virtual machine. <br><br> For more
   * information about disks, see [About disks and VHDs for Azure virtual
   * machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
   * @property {boolean} [storageProfile.zoneResilient] Specifies whether an
   * image is zone resilient or not. Default is false. Zone resilient images
   * can be created only in regions that provide Zone Redundant Storage (ZRS).
   * @property {string} [provisioningState] The provisioning state.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ImageUpdate
   *
   * @returns {object} metadata of ImageUpdate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImageUpdate',
      type: {
        name: 'Composite',
        className: 'ImageUpdate',
        modelProperties: {
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          sourceVirtualMachine: {
            required: false,
            serializedName: 'properties.sourceVirtualMachine',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          storageProfile: {
            required: false,
            serializedName: 'properties.storageProfile',
            type: {
              name: 'Composite',
              className: 'ImageStorageProfile'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ImageUpdate;
