/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the StorageProfile class.
 * @constructor
 * Describes a storage profile.
 *
 * @member {object} [imageReference] The image reference.
 *
 * @member {string} [imageReference.publisher] The image publisher.
 *
 * @member {string} [imageReference.offer] The image offer.
 *
 * @member {string} [imageReference.sku] The image SKU.
 *
 * @member {string} [imageReference.version] The image version. The allowed
 * formats are Major.Minor.Build or 'latest'. Major, Minor and Build are
 * decimal numbers. Specify 'latest' to use the latest version of the image.
 *
 * @member {object} [osDisk] The OS disk.
 *
 * @member {string} [osDisk.osType] The Operating System type. Possible values
 * include: 'Windows', 'Linux'
 *
 * @member {object} [osDisk.encryptionSettings] The disk encryption settings.
 *
 * @member {object} [osDisk.encryptionSettings.diskEncryptionKey] The disk
 * encryption key which is a Key Vault Secret.
 *
 * @member {string} [osDisk.encryptionSettings.diskEncryptionKey.secretUrl] The
 * URL referencing a secret in a Key Vault.
 *
 * @member {object} [osDisk.encryptionSettings.diskEncryptionKey.sourceVault]
 * The relative URL of the Key Vault containing the secret.
 *
 * @member {string}
 * [osDisk.encryptionSettings.diskEncryptionKey.sourceVault.id] Resource Id
 *
 * @member {object} [osDisk.encryptionSettings.keyEncryptionKey] The key
 * encryption key which is Key Vault Key.
 *
 * @member {string} [osDisk.encryptionSettings.keyEncryptionKey.keyUrl] The URL
 * referencing a key in a Key Vault.
 *
 * @member {object} [osDisk.encryptionSettings.keyEncryptionKey.sourceVault]
 * The relative URL of the Key Vault containing the key.
 *
 * @member {string} [osDisk.encryptionSettings.keyEncryptionKey.sourceVault.id]
 * Resource Id
 *
 * @member {boolean} [osDisk.encryptionSettings.enabled] Specifies whether disk
 * encryption should be enabled on the virtual machine.
 *
 * @member {string} [osDisk.name] The disk name.
 *
 * @member {object} [osDisk.vhd] The virtual hard disk.
 *
 * @member {string} [osDisk.vhd.uri] The virtual hard disk's URI. Must be a
 * valid URI to a virtual hard disk.
 *
 * @member {object} [osDisk.image] The source user image virtual hard disk. The
 * virtual hard disk will be copied before using it to attach to the virtual
 * machine. If SourceImage is provided, the destination virtual hard disk must
 * not exist.
 *
 * @member {string} [osDisk.image.uri] The virtual hard disk's URI. Must be a
 * valid URI to a virtual hard disk.
 *
 * @member {string} [osDisk.caching] The caching type. Possible values include:
 * 'None', 'ReadOnly', 'ReadWrite'
 *
 * @member {string} [osDisk.createOption] The create option. Possible values
 * include: 'fromImage', 'empty', 'attach'
 *
 * @member {number} [osDisk.diskSizeGB] The initial disk size, in GB, for blank
 * data disks, and the new desired size for resizing existing OS and data
 * disks.
 *
 * @member {object} [osDisk.managedDisk] The managed disk parameters.
 *
 * @member {string} [osDisk.managedDisk.storageAccountType] The Storage Account
 * type. Possible values include: 'Standard_LRS', 'Premium_LRS'
 *
 * @member {array} [dataDisks] The data disks.
 *
 */
class StorageProfile {
  constructor() {
  }

  /**
   * Defines the metadata of StorageProfile
   *
   * @returns {object} metadata of StorageProfile
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StorageProfile',
      type: {
        name: 'Composite',
        className: 'StorageProfile',
        modelProperties: {
          imageReference: {
            required: false,
            serializedName: 'imageReference',
            type: {
              name: 'Composite',
              className: 'ImageReference'
            }
          },
          osDisk: {
            required: false,
            serializedName: 'osDisk',
            type: {
              name: 'Composite',
              className: 'OSDisk'
            }
          },
          dataDisks: {
            required: false,
            serializedName: 'dataDisks',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DataDiskElementType',
                  type: {
                    name: 'Composite',
                    className: 'DataDisk'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = StorageProfile;
