/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes Protocol and thumbprint of Windows Remote Management listener
 *
 */
class WinRMListener {
  /**
   * Create a WinRMListener.
   * @member {string} [protocol] Specifies the protocol of listener. <br><br>
   * Possible values are: <br>**http** <br><br> **https**. Possible values
   * include: 'Http', 'Https'
   * @member {string} [certificateUrl] This is the URL of a certificate that
   * has been uploaded to Key Vault as a secret. For adding a secret to the Key
   * Vault, see [Add a key or secret to the key
   * vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
   * In this case, your certificate needs to be It is the Base64 encoding of
   * the following JSON Object which is encoded in UTF-8: <br><br> {<br>
   * "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>
   * "password":"<pfx-file-password>"<br>}
   */
  constructor() {
  }

  /**
   * Defines the metadata of WinRMListener
   *
   * @returns {object} metadata of WinRMListener
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'WinRMListener',
      type: {
        name: 'Composite',
        className: 'WinRMListener',
        modelProperties: {
          protocol: {
            required: false,
            serializedName: 'protocol',
            type: {
              name: 'Enum',
              allowedValues: [ 'Http', 'Https' ]
            }
          },
          certificateUrl: {
            required: false,
            serializedName: 'certificateUrl',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = WinRMListener;
