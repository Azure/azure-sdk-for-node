/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Specifies information about the gallery Image Definition that you want to
 * create or update.
 *
 * @extends models['Resource']
 */
class GalleryImage extends models['Resource'] {
  /**
   * Create a GalleryImage.
   * @property {string} [description] The description of this gallery Image
   * Definition resource. This property is updatable.
   * @property {string} [eula] The Eula agreement for the gallery Image
   * Definition.
   * @property {string} [privacyStatementUri] The privacy statement uri.
   * @property {string} [releaseNoteUri] The release note uri.
   * @property {string} osType This property allows you to specify the type of
   * the OS that is included in the disk when creating a VM from a managed
   * image. <br><br> Possible values are: <br><br> **Windows** <br><br>
   * **Linux**. Possible values include: 'Windows', 'Linux'
   * @property {string} osState The allowed values for OS State are
   * 'Generalized'. Possible values include: 'Generalized', 'Specialized'
   * @property {date} [endOfLifeDate] The end of life date of the gallery Image
   * Definition. This property can be used for decommissioning purposes. This
   * property is updatable.
   * @property {object} identifier
   * @property {string} [identifier.publisher] The name of the gallery Image
   * Definition publisher.
   * @property {string} [identifier.offer] The name of the gallery Image
   * Definition offer.
   * @property {string} [identifier.sku] The name of the gallery Image
   * Definition SKU.
   * @property {object} [recommended]
   * @property {object} [recommended.vCPUs]
   * @property {number} [recommended.vCPUs.min] The minimum number of the
   * resource.
   * @property {number} [recommended.vCPUs.max] The maximum number of the
   * resource.
   * @property {object} [recommended.memory]
   * @property {number} [recommended.memory.min] The minimum number of the
   * resource.
   * @property {number} [recommended.memory.max] The maximum number of the
   * resource.
   * @property {object} [disallowed]
   * @property {array} [disallowed.diskTypes] A list of disk types.
   * @property {object} [purchasePlan]
   * @property {string} [purchasePlan.name] The plan ID.
   * @property {string} [purchasePlan.publisher] The publisher ID.
   * @property {string} [purchasePlan.product] The product ID.
   * @property {string} [provisioningState] The current state of the gallery
   * Image Definition. The provisioning state, which only appears in the
   * response. Possible values include: 'Creating', 'Updating', 'Failed',
   * 'Succeeded', 'Deleting', 'Migrating'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of GalleryImage
   *
   * @returns {object} metadata of GalleryImage
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GalleryImage',
      type: {
        name: 'Composite',
        className: 'GalleryImage',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          eula: {
            required: false,
            serializedName: 'properties.eula',
            type: {
              name: 'String'
            }
          },
          privacyStatementUri: {
            required: false,
            serializedName: 'properties.privacyStatementUri',
            type: {
              name: 'String'
            }
          },
          releaseNoteUri: {
            required: false,
            serializedName: 'properties.releaseNoteUri',
            type: {
              name: 'String'
            }
          },
          osType: {
            required: true,
            serializedName: 'properties.osType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Windows', 'Linux' ]
            }
          },
          osState: {
            required: true,
            serializedName: 'properties.osState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Generalized', 'Specialized' ]
            }
          },
          endOfLifeDate: {
            required: false,
            serializedName: 'properties.endOfLifeDate',
            type: {
              name: 'DateTime'
            }
          },
          identifier: {
            required: true,
            serializedName: 'properties.identifier',
            type: {
              name: 'Composite',
              className: 'GalleryImageIdentifier'
            }
          },
          recommended: {
            required: false,
            serializedName: 'properties.recommended',
            type: {
              name: 'Composite',
              className: 'RecommendedMachineConfiguration'
            }
          },
          disallowed: {
            required: false,
            serializedName: 'properties.disallowed',
            type: {
              name: 'Composite',
              className: 'Disallowed'
            }
          },
          purchasePlan: {
            required: false,
            serializedName: 'properties.purchasePlan',
            type: {
              name: 'Composite',
              className: 'ImagePurchasePlan'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = GalleryImage;
