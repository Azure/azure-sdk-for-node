/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ContainerService class.
 * @constructor
 * Container service
 * @member {string} [provisioningState] Gets the provisioning state, which
 * only appears in the response.
 * 
 * @member {object} [orchestratorProfile] Properties of orchestrator
 * 
 * @member {string} [orchestratorProfile.orchestratorType] Specifies what
 * orchestrator will be used to manage container cluster resources. Possible
 * values include: 'Swarm', 'DCOS'
 * 
 * @member {object} masterProfile Properties of master agents
 * 
 * @member {number} [masterProfile.count] Number of masters (VMs) in the
 * container cluster
 * 
 * @member {string} [masterProfile.dnsPrefix] DNS prefix to be used to create
 * FQDN for master
 * 
 * @member {string} [masterProfile.fqdn] FDQN for the master
 * 
 * @member {array} agentPoolProfiles Properties of agent pools
 * 
 * @member {object} [windowsProfile] Properties of Windows VMs
 * 
 * @member {string} [windowsProfile.adminUsername] The administrator username
 * to use for Windows VMs
 * 
 * @member {string} [windowsProfile.adminPassword] The administrator password
 * to use for Windows VMs
 * 
 * @member {object} linuxProfile Properties for Linux VMs
 * 
 * @member {string} [linuxProfile.adminUsername] The administrator username to
 * use for all Linux VMs
 * 
 * @member {object} [linuxProfile.ssh] Specifies the ssh key configuration for
 * Linux VMs
 * 
 * @member {array} [linuxProfile.ssh.publicKeys] Gets or sets the list of SSH
 * public keys used to authenticate with Linux based VMs
 * 
 * @member {object} [diagnosticsProfile] Properties for Diagnostic Agent
 * 
 * @member {object} [diagnosticsProfile.vmDiagnostics] Profile for container
 * service VM diagnostic agent
 * 
 * @member {boolean} [diagnosticsProfile.vmDiagnostics.enabled] Gets or sets
 * whether VM Diagnostic Agent should be provisioned on the Virtual Machine.
 * 
 * @member {string} [diagnosticsProfile.vmDiagnostics.storageUri] Gets or sets
 * whether VM Diagnostic Agent should be provisioned on the Virtual Machine.
 * 
 */
function ContainerService() {
  ContainerService['super_'].call(this);
}

util.inherits(ContainerService, models['Resource']);

/**
 * Defines the metadata of ContainerService
 *
 * @returns {object} metadata of ContainerService
 *
 */
ContainerService.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ContainerService',
    type: {
      name: 'Composite',
      className: 'ContainerService',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        provisioningState: {
          required: false,
          readOnly: true,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        orchestratorProfile: {
          required: false,
          serializedName: 'properties.orchestratorProfile',
          type: {
            name: 'Composite',
            className: 'ContainerServiceOrchestratorProfile'
          }
        },
        masterProfile: {
          required: true,
          serializedName: 'properties.masterProfile',
          type: {
            name: 'Composite',
            className: 'ContainerServiceMasterProfile'
          }
        },
        agentPoolProfiles: {
          required: true,
          serializedName: 'properties.agentPoolProfiles',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ContainerServiceAgentPoolProfileElementType',
                type: {
                  name: 'Composite',
                  className: 'ContainerServiceAgentPoolProfile'
                }
            }
          }
        },
        windowsProfile: {
          required: false,
          serializedName: 'properties.windowsProfile',
          type: {
            name: 'Composite',
            className: 'ContainerServiceWindowsProfile'
          }
        },
        linuxProfile: {
          required: true,
          serializedName: 'properties.linuxProfile',
          type: {
            name: 'Composite',
            className: 'ContainerServiceLinuxProfile'
          }
        },
        diagnosticsProfile: {
          required: false,
          serializedName: 'properties.diagnosticsProfile',
          type: {
            name: 'Composite',
            className: 'ContainerServiceDiagnosticsProfile'
          }
        }
      }
    }
  };
};

module.exports = ContainerService;
