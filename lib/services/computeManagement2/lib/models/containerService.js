/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Container service.
 *
 * @extends models['Resource']
 */
class ContainerService extends models['Resource'] {
  /**
   * Create a ContainerService.
   * @property {string} [provisioningState] the current deployment or
   * provisioning state, which only appears in the response.
   * @property {object} [orchestratorProfile] Properties of the orchestrator.
   * @property {string} [orchestratorProfile.orchestratorType] The orchestrator
   * to use to manage container service cluster resources. Valid values are
   * Swarm, DCOS, and Custom. Possible values include: 'Swarm', 'DCOS',
   * 'Custom', 'Kubernetes'
   * @property {object} [customProfile] Properties for custom clusters.
   * @property {string} [customProfile.orchestrator] The name of the custom
   * orchestrator to use.
   * @property {object} [servicePrincipalProfile] Properties for cluster
   * service principals.
   * @property {string} [servicePrincipalProfile.clientId] The ID for the
   * service principal.
   * @property {string} [servicePrincipalProfile.secret] The secret password
   * associated with the service principal.
   * @property {object} masterProfile Properties of master agents.
   * @property {number} [masterProfile.count] Number of masters (VMs) in the
   * container service cluster. Allowed values are 1, 3, and 5. The default
   * value is 1.
   * @property {string} [masterProfile.dnsPrefix] DNS prefix to be used to
   * create the FQDN for master.
   * @property {string} [masterProfile.fqdn] FQDN for the master.
   * @property {array} agentPoolProfiles Properties of the agent pool.
   * @property {object} [windowsProfile] Properties of Windows VMs.
   * @property {string} [windowsProfile.adminUsername] The administrator
   * username to use for Windows VMs.
   * @property {string} [windowsProfile.adminPassword] The administrator
   * password to use for Windows VMs.
   * @property {object} linuxProfile Properties of Linux VMs.
   * @property {string} [linuxProfile.adminUsername] The administrator username
   * to use for Linux VMs.
   * @property {object} [linuxProfile.ssh] The ssh key configuration for Linux
   * VMs.
   * @property {array} [linuxProfile.ssh.publicKeys] the list of SSH public
   * keys used to authenticate with Linux-based VMs.
   * @property {object} [diagnosticsProfile] Properties of the diagnostic
   * agent.
   * @property {object} [diagnosticsProfile.vmDiagnostics] Profile for the
   * container service VM diagnostic agent.
   * @property {boolean} [diagnosticsProfile.vmDiagnostics.enabled] Whether the
   * VM diagnostic agent is provisioned on the VM.
   * @property {string} [diagnosticsProfile.vmDiagnostics.storageUri] The URI
   * of the storage account where diagnostics are stored.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ContainerService
   *
   * @returns {object} metadata of ContainerService
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerService',
      type: {
        name: 'Composite',
        className: 'ContainerService',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          orchestratorProfile: {
            required: false,
            serializedName: 'properties.orchestratorProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceOrchestratorProfile'
            }
          },
          customProfile: {
            required: false,
            serializedName: 'properties.customProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceCustomProfile'
            }
          },
          servicePrincipalProfile: {
            required: false,
            serializedName: 'properties.servicePrincipalProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceServicePrincipalProfile'
            }
          },
          masterProfile: {
            required: true,
            serializedName: 'properties.masterProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceMasterProfile'
            }
          },
          agentPoolProfiles: {
            required: true,
            serializedName: 'properties.agentPoolProfiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerServiceAgentPoolProfileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerServiceAgentPoolProfile'
                  }
              }
            }
          },
          windowsProfile: {
            required: false,
            serializedName: 'properties.windowsProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceWindowsProfile'
            }
          },
          linuxProfile: {
            required: true,
            serializedName: 'properties.linuxProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceLinuxProfile'
            }
          },
          diagnosticsProfile: {
            required: false,
            serializedName: 'properties.diagnosticsProfile',
            type: {
              name: 'Composite',
              className: 'ContainerServiceDiagnosticsProfile'
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerService;
