/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ImageDataDisk class.
 * @constructor
 * Describes a data disk.
 *
 * @member {number} lun The logical unit number.
 *
 * @member {object} [snapshot] The snapshot.
 *
 * @member {string} [snapshot.id] Resource Id
 *
 * @member {object} [managedDisk] The managedDisk.
 *
 * @member {string} [managedDisk.id] Resource Id
 *
 * @member {string} [blobUri] The Virtual Hard Disk.
 *
 * @member {string} [caching] The caching type. Possible values include:
 * 'None', 'ReadOnly', 'ReadWrite'
 *
 * @member {number} [diskSizeGB] The initial disk size in GB for blank data
 * disks, and the new desired size for existing OS and Data disks.
 *
 * @member {string} [storageAccountType] The Storage Account type. Possible
 * values include: 'Standard_LRS', 'Premium_LRS'
 *
 */
class ImageDataDisk {
  constructor() {
  }

  /**
   * Defines the metadata of ImageDataDisk
   *
   * @returns {object} metadata of ImageDataDisk
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImageDataDisk',
      type: {
        name: 'Composite',
        className: 'ImageDataDisk',
        modelProperties: {
          lun: {
            required: true,
            serializedName: 'lun',
            type: {
              name: 'Number'
            }
          },
          snapshot: {
            required: false,
            serializedName: 'snapshot',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          managedDisk: {
            required: false,
            serializedName: 'managedDisk',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          blobUri: {
            required: false,
            serializedName: 'blobUri',
            type: {
              name: 'String'
            }
          },
          caching: {
            required: false,
            serializedName: 'caching',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'ReadOnly', 'ReadWrite' ]
            }
          },
          diskSizeGB: {
            required: false,
            serializedName: 'diskSizeGB',
            type: {
              name: 'Number'
            }
          },
          storageAccountType: {
            required: false,
            serializedName: 'storageAccountType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Standard_LRS', 'Premium_LRS' ]
            }
          }
        }
      }
    };
  }
}

module.exports = ImageDataDisk;
