/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes an Operating System disk.
 *
 */
class ImageOSDisk {
  /**
   * Create a ImageOSDisk.
   * @property {string} osType This property allows you to specify the type of
   * the OS that is included in the disk if creating a VM from a custom image.
   * <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**.
   * Possible values include: 'Windows', 'Linux'
   * @property {string} osState The OS State. Possible values include:
   * 'Generalized', 'Specialized'
   * @property {object} [snapshot] The snapshot.
   * @property {string} [snapshot.id] Resource Id
   * @property {object} [managedDisk] The managedDisk.
   * @property {string} [managedDisk.id] Resource Id
   * @property {string} [blobUri] The Virtual Hard Disk.
   * @property {string} [caching] Specifies the caching requirements. <br><br>
   * Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br>
   * **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for
   * Premium storage**. Possible values include: 'None', 'ReadOnly',
   * 'ReadWrite'
   * @property {number} [diskSizeGB] Specifies the size of empty data disks in
   * gigabytes. This element can be used to overwrite the name of the disk in a
   * virtual machine image. <br><br> This value cannot be larger than 1023 GB
   * @property {string} [storageAccountType] Specifies the storage account type
   * for the managed disk. UltraSSD_LRS cannot be used with OS Disk. Possible
   * values include: 'Standard_LRS', 'Premium_LRS', 'StandardSSD_LRS',
   * 'UltraSSD_LRS'
   */
  constructor() {
  }

  /**
   * Defines the metadata of ImageOSDisk
   *
   * @returns {object} metadata of ImageOSDisk
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImageOSDisk',
      type: {
        name: 'Composite',
        className: 'ImageOSDisk',
        modelProperties: {
          osType: {
            required: true,
            serializedName: 'osType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Windows', 'Linux' ]
            }
          },
          osState: {
            required: true,
            serializedName: 'osState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Generalized', 'Specialized' ]
            }
          },
          snapshot: {
            required: false,
            serializedName: 'snapshot',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          managedDisk: {
            required: false,
            serializedName: 'managedDisk',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          blobUri: {
            required: false,
            serializedName: 'blobUri',
            type: {
              name: 'String'
            }
          },
          caching: {
            required: false,
            serializedName: 'caching',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'ReadOnly', 'ReadWrite' ]
            }
          },
          diskSizeGB: {
            required: false,
            serializedName: 'diskSizeGB',
            type: {
              name: 'Number'
            }
          },
          storageAccountType: {
            required: false,
            serializedName: 'storageAccountType',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ImageOSDisk;
