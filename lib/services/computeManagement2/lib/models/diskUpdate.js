/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DiskUpdate class.
 * @constructor
 * Disk update resource.
 *
 * @member {string} [accountType] the storage account type of the disk.
 * Possible values include: 'Standard_LRS', 'Premium_LRS'
 *
 * @member {string} [osType] the Operating System type. Possible values
 * include: 'Windows', 'Linux'
 *
 * @member {object} [creationData] disk source information. CreationData
 * information cannot be changed after the disk has been created.
 *
 * @member {string} [creationData.createOption] Possible values include:
 * 'Empty', 'Attach', 'FromImage', 'Import', 'Copy', 'Restore'
 *
 * @member {string} [creationData.storageAccountId] If createOption is Import,
 * the Azure Resource Manager identifier of the storage account containing the
 * blob to import as a disk. Required only if the blob is in a different
 * subscription
 *
 * @member {object} [creationData.imageReference] Disk source information.
 *
 * @member {string} [creationData.imageReference.id] A relative uri containing
 * either a Platform Imgage Repository or user image reference.
 *
 * @member {number} [creationData.imageReference.lun] If the disk is created
 * from an image's data disk, this is an index that indicates which of the data
 * disks in the image to use. For OS disks, this field is null.
 *
 * @member {string} [creationData.sourceUri] If creationOption is Import, this
 * is a SAS URI to a blob to be imported into a managed disk. If creationOption
 * is Copy, this is a relative Uri containing the id of the source snapshot to
 * be copied into a managed disk.
 *
 * @member {string} [creationData.sourceResourceId] If createOption is Copy,
 * this is the ARM id of the source snapshot or disk. If creationOption is
 * Restore, this is the ARM-like id of the source disk restore point.
 *
 * @member {number} [diskSizeGB] If creationData.createOption is Empty, this
 * field is mandatory and it indicates the size of the VHD to create. If this
 * field is present for updates or creation with other options, it indicates a
 * resize. Resizes are only allowed if the disk is not attached to a running
 * VM, and can only increase the disk's size.
 *
 * @member {object} [encryptionSettings] Encryption settings for disk or
 * snapshot
 *
 * @member {boolean} [encryptionSettings.enabled] Set this flag to true and
 * provide DiskEncryptionKey and optional KeyEncryptionKey to enable
 * encryption. Set this flag to false and remove DiskEncryptionKey and
 * KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the
 * request object, the existing settings remain unchanged.
 *
 * @member {object} [encryptionSettings.diskEncryptionKey] Key Vault Secret Url
 * and vault id of the disk encryption key
 *
 * @member {object} [encryptionSettings.diskEncryptionKey.sourceVault] Resource
 * id of the KeyVault containing the key or secret
 *
 * @member {string} [encryptionSettings.diskEncryptionKey.sourceVault.id]
 * Resource Id
 *
 * @member {string} [encryptionSettings.diskEncryptionKey.secretUrl] Url
 * pointing to a key or secret in KeyVault
 *
 * @member {object} [encryptionSettings.keyEncryptionKey] Key Vault Key Url and
 * vault id of the key encryption key
 *
 * @member {object} [encryptionSettings.keyEncryptionKey.sourceVault] Resource
 * id of the KeyVault containing the key or secret
 *
 * @member {string} [encryptionSettings.keyEncryptionKey.sourceVault.id]
 * Resource Id
 *
 * @member {string} [encryptionSettings.keyEncryptionKey.keyUrl] Url pointing
 * to a key or secret in KeyVault
 *
 */
function DiskUpdate() {
  DiskUpdate['super_'].call(this);
}

util.inherits(DiskUpdate, models['ResourceUpdate']);

/**
 * Defines the metadata of DiskUpdate
 *
 * @returns {object} metadata of DiskUpdate
 *
 */
DiskUpdate.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DiskUpdate',
    type: {
      name: 'Composite',
      className: 'DiskUpdate',
      modelProperties: {
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        accountType: {
          required: false,
          serializedName: 'properties.accountType',
          type: {
            name: 'Enum',
            allowedValues: [ 'Standard_LRS', 'Premium_LRS' ]
          }
        },
        osType: {
          required: false,
          serializedName: 'properties.osType',
          type: {
            name: 'Enum',
            allowedValues: [ 'Windows', 'Linux' ]
          }
        },
        creationData: {
          required: false,
          serializedName: 'properties.creationData',
          type: {
            name: 'Composite',
            className: 'CreationData'
          }
        },
        diskSizeGB: {
          required: false,
          serializedName: 'properties.diskSizeGB',
          type: {
            name: 'Number'
          }
        },
        encryptionSettings: {
          required: false,
          serializedName: 'properties.encryptionSettings',
          type: {
            name: 'Composite',
            className: 'EncryptionSettings'
          }
        }
      }
    }
  };
};

module.exports = DiskUpdate;
