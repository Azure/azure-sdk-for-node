/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the VirtualMachineSize class.
 * @constructor
 * Describes the properties of a VM size.
 * @member {string} [name] Gets or sets the VM size name.
 * 
 * @member {number} [numberOfCores] Gets or sets the Number of cores supported
 * by a VM size.
 * 
 * @member {number} [osDiskSizeInMB] Gets or sets the OS disk size allowed by
 * a VM size.
 * 
 * @member {number} [resourceDiskSizeInMB] Gets or sets the Resource disk size
 * allowed by a VM size.
 * 
 * @member {number} [memoryInMB] Gets or sets the Memory size supported by a
 * VM size.
 * 
 * @member {number} [maxDataDiskCount] Gets or sets the Maximum number of data
 * disks allowed by a VM size.
 * 
 */
function VirtualMachineSize() {
}

/**
 * Defines the metadata of VirtualMachineSize
 *
 * @returns {object} metadata of VirtualMachineSize
 *
 */
VirtualMachineSize.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VirtualMachineSize',
    type: {
      name: 'Composite',
      className: 'VirtualMachineSize',
      modelProperties: {
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        numberOfCores: {
          required: false,
          serializedName: 'numberOfCores',
          type: {
            name: 'Number'
          }
        },
        osDiskSizeInMB: {
          required: false,
          serializedName: 'osDiskSizeInMB',
          type: {
            name: 'Number'
          }
        },
        resourceDiskSizeInMB: {
          required: false,
          serializedName: 'resourceDiskSizeInMB',
          type: {
            name: 'Number'
          }
        },
        memoryInMB: {
          required: false,
          serializedName: 'memoryInMB',
          type: {
            name: 'Number'
          }
        },
        maxDataDiskCount: {
          required: false,
          serializedName: 'maxDataDiskCount',
          type: {
            name: 'Number'
          }
        }
      }
    }
  };
};

module.exports = VirtualMachineSize;
