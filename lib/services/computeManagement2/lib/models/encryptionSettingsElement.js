/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Encryption settings for one disk volume.
 *
 */
class EncryptionSettingsElement {
  /**
   * Create a EncryptionSettingsElement.
   * @property {object} [diskEncryptionKey] Key Vault Secret Url and vault id
   * of the disk encryption key
   * @property {object} [diskEncryptionKey.sourceVault] Resource id of the
   * KeyVault containing the key or secret
   * @property {string} [diskEncryptionKey.sourceVault.id] Resource Id
   * @property {string} [diskEncryptionKey.secretUrl] Url pointing to a key or
   * secret in KeyVault
   * @property {object} [keyEncryptionKey] Key Vault Key Url and vault id of
   * the key encryption key. KeyEncryptionKey is optional and when provided is
   * used to unwrap the disk encryption key.
   * @property {object} [keyEncryptionKey.sourceVault] Resource id of the
   * KeyVault containing the key or secret
   * @property {string} [keyEncryptionKey.sourceVault.id] Resource Id
   * @property {string} [keyEncryptionKey.keyUrl] Url pointing to a key or
   * secret in KeyVault
   */
  constructor() {
  }

  /**
   * Defines the metadata of EncryptionSettingsElement
   *
   * @returns {object} metadata of EncryptionSettingsElement
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EncryptionSettingsElement',
      type: {
        name: 'Composite',
        className: 'EncryptionSettingsElement',
        modelProperties: {
          diskEncryptionKey: {
            required: false,
            serializedName: 'diskEncryptionKey',
            type: {
              name: 'Composite',
              className: 'KeyVaultAndSecretReference'
            }
          },
          keyEncryptionKey: {
            required: false,
            serializedName: 'keyEncryptionKey',
            type: {
              name: 'Composite',
              className: 'KeyVaultAndKeyReference'
            }
          }
        }
      }
    };
  }
}

module.exports = EncryptionSettingsElement;
