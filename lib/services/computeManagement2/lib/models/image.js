/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the Image class.
 * @constructor
 * Describes an Image.
 *
 * @member {object} [sourceVirtualMachine] The source virtual machine from
 * which Image is created.
 *
 * @member {string} [sourceVirtualMachine.id] Resource Id
 *
 * @member {object} [storageProfile] The storage profile.
 *
 * @member {object} [storageProfile.osDisk] The OS disk.
 *
 * @member {string} [storageProfile.osDisk.osType] The Operating System type.
 * Possible values include: 'Windows', 'Linux'
 *
 * @member {string} [storageProfile.osDisk.osState] The OS State. Possible
 * values include: 'Generalized', 'Specialized'
 *
 * @member {object} [storageProfile.osDisk.snapshot] The snapshot.
 *
 * @member {string} [storageProfile.osDisk.snapshot.id] Resource Id
 *
 * @member {object} [storageProfile.osDisk.managedDisk] The managedDisk.
 *
 * @member {string} [storageProfile.osDisk.managedDisk.id] Resource Id
 *
 * @member {string} [storageProfile.osDisk.blobUri] The Virtual Hard Disk.
 *
 * @member {string} [storageProfile.osDisk.caching] The caching type. Possible
 * values include: 'None', 'ReadOnly', 'ReadWrite'
 *
 * @member {number} [storageProfile.osDisk.diskSizeGB] The initial managed disk
 * size in GB for blank data disks, and the new desired size for existing OS
 * and Data disks.
 *
 * @member {string} [storageProfile.osDisk.storageAccountType] The Storage
 * Account type. Possible values include: 'Standard_LRS', 'Premium_LRS'
 *
 * @member {array} [storageProfile.dataDisks] The data disks.
 *
 * @member {string} [provisioningState] The provisioning state.
 *
 */
class Image extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Image
   *
   * @returns {object} metadata of Image
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Image',
      type: {
        name: 'Composite',
        className: 'Image',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          sourceVirtualMachine: {
            required: false,
            serializedName: 'properties.sourceVirtualMachine',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          storageProfile: {
            required: false,
            serializedName: 'properties.storageProfile',
            type: {
              name: 'Composite',
              className: 'ImageStorageProfile'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Image;
