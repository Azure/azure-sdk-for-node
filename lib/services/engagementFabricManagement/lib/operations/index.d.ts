/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Accounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EngagementFabric.
 */
export interface Accounts {


    /**
     * @summary Get the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Account>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Account>>;

    /**
     * @summary Get the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Account} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Account} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Account} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Account>;
    get(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.Account>): void;
    get(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Account>): void;


    /**
     * @summary Create or Update the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} account The EngagementFabric account description
     *
     * @param {string} account.location The location of the resource
     *
     * @param {object} [account.tags] The tags of the resource
     *
     * @param {object} account.sku The SKU of the resource
     *
     * @param {string} account.sku.name The name of the SKU
     *
     * @param {string} [account.sku.tier] The price tier of the SKU
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Account>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, accountName: string, account: models.Account, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Account>>;

    /**
     * @summary Create or Update the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} account The EngagementFabric account description
     *
     * @param {string} account.location The location of the resource
     *
     * @param {object} [account.tags] The tags of the resource
     *
     * @param {object} account.sku The SKU of the resource
     *
     * @param {string} account.sku.name The name of the SKU
     *
     * @param {string} [account.sku.tier] The price tier of the SKU
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Account} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Account} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Account} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, account: models.Account, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Account>;
    createOrUpdate(resourceGroupName: string, accountName: string, account: models.Account, callback: ServiceCallback<models.Account>): void;
    createOrUpdate(resourceGroupName: string, accountName: string, account: models.Account, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Account>): void;


    /**
     * @summary Delete the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, accountName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} accountPatch The account patch
     *
     * @param {object} [accountPatch.tags] The tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Account>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, accountName: string, accountPatch: models.AccountPatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Account>>;

    /**
     * @summary Update EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} accountPatch The account patch
     *
     * @param {object} [accountPatch.tags] The tags of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Account} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Account} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Account} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, accountName: string, accountPatch: models.AccountPatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Account>;
    update(resourceGroupName: string, accountName: string, accountPatch: models.AccountPatch, callback: ServiceCallback<models.Account>): void;
    update(resourceGroupName: string, accountName: string, accountPatch: models.AccountPatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Account>): void;


    /**
     * @summary List the EngagementFabric accounts in given subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccountList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccountList>>;

    /**
     * @summary List the EngagementFabric accounts in given subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccountList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccountList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccountList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccountList>;
    list(callback: ServiceCallback<models.AccountList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccountList>): void;


    /**
     * @summary List EngagementFabric accounts in given resource group
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccountList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccountList>>;

    /**
     * @summary List EngagementFabric accounts in given resource group
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccountList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccountList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccountList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccountList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.AccountList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccountList>): void;


    /**
     * @summary List keys of the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KeyDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyDescriptionList>>;

    /**
     * @summary List keys of the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KeyDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KeyDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KeyDescriptionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyDescriptionList>;
    listKeys(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.KeyDescriptionList>): void;
    listKeys(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyDescriptionList>): void;


    /**
     * @summary Regenerate key of the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} parameter Parameters specifying the key to be regenerated
     *
     * @param {string} parameter.name The name of key to be regenerated
     *
     * @param {string} parameter.rank The rank of the key to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KeyDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeyWithHttpOperationResponse(resourceGroupName: string, accountName: string, parameter: models.RegenerateKeyParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyDescription>>;

    /**
     * @summary Regenerate key of the EngagementFabric account
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} parameter Parameters specifying the key to be regenerated
     *
     * @param {string} parameter.name The name of key to be regenerated
     *
     * @param {string} parameter.rank The rank of the key to be regenerated.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KeyDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KeyDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KeyDescription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKey(resourceGroupName: string, accountName: string, parameter: models.RegenerateKeyParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyDescription>;
    regenerateKey(resourceGroupName: string, accountName: string, parameter: models.RegenerateKeyParameter, callback: ServiceCallback<models.KeyDescription>): void;
    regenerateKey(resourceGroupName: string, accountName: string, parameter: models.RegenerateKeyParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyDescription>): void;


    /**
     * @summary List available EngagementFabric channel types and functions
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ChannelTypeDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listChannelTypesWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChannelTypeDescriptionList>>;

    /**
     * @summary List available EngagementFabric channel types and functions
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ChannelTypeDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ChannelTypeDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ChannelTypeDescriptionList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listChannelTypes(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChannelTypeDescriptionList>;
    listChannelTypes(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.ChannelTypeDescriptionList>): void;
    listChannelTypes(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChannelTypeDescriptionList>): void;
}

/**
 * @class
 * Channels
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EngagementFabric.
 */
export interface Channels {


    /**
     * @summary Get the EngagementFabric channel
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {string} channelName Channel Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Channel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, accountName: string, channelName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Channel>>;

    /**
     * @summary Get the EngagementFabric channel
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {string} channelName Channel Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Channel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Channel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Channel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, accountName: string, channelName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Channel>;
    get(resourceGroupName: string, accountName: string, channelName: string, callback: ServiceCallback<models.Channel>): void;
    get(resourceGroupName: string, accountName: string, channelName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Channel>): void;


    /**
     * @summary Create or Update the EngagementFabric channel
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {string} channelName Channel Name
     *
     * @param {object} channel The EngagementFabric channel description
     *
     * @param {string} channel.channelType The channel type
     *
     * @param {array} [channel.channelFunctions] The functions to be enabled for
     * the channel
     *
     * @param {object} [channel.credentials] The channel credentials
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Channel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, accountName: string, channelName: string, channel: models.Channel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Channel>>;

    /**
     * @summary Create or Update the EngagementFabric channel
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {string} channelName Channel Name
     *
     * @param {object} channel The EngagementFabric channel description
     *
     * @param {string} channel.channelType The channel type
     *
     * @param {array} [channel.channelFunctions] The functions to be enabled for
     * the channel
     *
     * @param {object} [channel.credentials] The channel credentials
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Channel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Channel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Channel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, channelName: string, channel: models.Channel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Channel>;
    createOrUpdate(resourceGroupName: string, accountName: string, channelName: string, channel: models.Channel, callback: ServiceCallback<models.Channel>): void;
    createOrUpdate(resourceGroupName: string, accountName: string, channelName: string, channel: models.Channel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Channel>): void;


    /**
     * @summary Delete the EngagementFabric channel
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {string} channelName The EngagementFabric channel name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, channelName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete the EngagementFabric channel
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {string} channelName The EngagementFabric channel name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, accountName: string, channelName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, accountName: string, channelName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, accountName: string, channelName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List the EngagementFabric channels
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ChannelList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAccountWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChannelList>>;

    /**
     * @summary List the EngagementFabric channels
     *
     * @param {string} resourceGroupName Resource Group Name
     *
     * @param {string} accountName Account Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ChannelList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ChannelList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ChannelList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAccount(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChannelList>;
    listByAccount(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.ChannelList>): void;
    listByAccount(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChannelList>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EngagementFabric.
 */
export interface Operations {


    /**
     * @summary List operation of EngagementFabric resources
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationList>>;

    /**
     * @summary List operation of EngagementFabric resources
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationList>;
    list(callback: ServiceCallback<models.OperationList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationList>): void;
}

/**
 * @class
 * SKUs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the EngagementFabric.
 */
export interface SKUs {


    /**
     * @summary List available SKUs of EngagementFabric resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SkuDescriptionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SkuDescriptionList>>;

    /**
     * @summary List available SKUs of EngagementFabric resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SkuDescriptionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SkuDescriptionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SkuDescriptionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SkuDescriptionList>;
    list(callback: ServiceCallback<models.SkuDescriptionList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuDescriptionList>): void;
}
