/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Azure Migrate Project.
 *
 * @extends models['BaseResource']
 */
class Project extends models['BaseResource'] {
  /**
   * Create a Project.
   * @member {string} [id] Path reference to this project
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/projects/{projectName}
   * @member {string} [name] Name of the project.
   * @member {string} [type] Type of the object = [Microsoft.Migrate/projects].
   * @member {string} [eTag] For optimistic concurrency control.
   * @member {string} [location] Azure location in which project is created.
   * @member {object} [tags] Tags provided by Azure Tagging service.
   * @member {date} [createdTimestamp] Time when this project was created.
   * Date-Time represented in ISO-8601 format.
   * @member {date} [updatedTimestamp] Time when this project was last updated.
   * Date-Time represented in ISO-8601 format.
   * @member {string} [discoveryStatus] Reports whether project is under
   * discovery. Possible values include: 'Unknown', 'NotStarted', 'InProgress',
   * 'Completed'
   * @member {string} [customerWorkspaceId] ARM ID of the Service Map workspace
   * created by user.
   * @member {string} [customerWorkspaceLocation] Location of the Service Map
   * workspace created by user.
   * @member {date} [lastDiscoveryTimestamp] Time when this project was
   * created. Date-Time represented in ISO-8601 format. This value will be null
   * until discovery is complete.
   * @member {string} [lastDiscoverySessionId] Session id of the last
   * discovery.
   * @member {number} [numberOfGroups] Number of groups created in the project.
   * @member {number} [numberOfMachines] Number of machines in the project.
   * @member {number} [numberOfAssessments] Number of assessments created in
   * the project.
   * @member {date} [lastAssessmentTimestamp] Time when last assessment was
   * created. Date-Time represented in ISO-8601 format. This value will be null
   * until assessment is created.
   * @member {string} [provisioningState] Provisioning state of the project.
   * Possible values include: 'Accepted', 'Creating', 'Deleting', 'Failed',
   * 'Moving', 'Succeeded'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Project
   *
   * @returns {object} metadata of Project
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Project',
      type: {
        name: 'Composite',
        className: 'Project',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Object'
            }
          },
          createdTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'properties.createdTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          updatedTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'properties.updatedTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          discoveryStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.discoveryStatus',
            type: {
              name: 'String'
            }
          },
          customerWorkspaceId: {
            required: false,
            serializedName: 'properties.customerWorkspaceId',
            type: {
              name: 'String'
            }
          },
          customerWorkspaceLocation: {
            required: false,
            serializedName: 'properties.customerWorkspaceLocation',
            type: {
              name: 'String'
            }
          },
          lastDiscoveryTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastDiscoveryTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          lastDiscoverySessionId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastDiscoverySessionId',
            type: {
              name: 'String'
            }
          },
          numberOfGroups: {
            required: false,
            readOnly: true,
            serializedName: 'properties.numberOfGroups',
            type: {
              name: 'Number'
            }
          },
          numberOfMachines: {
            required: false,
            readOnly: true,
            serializedName: 'properties.numberOfMachines',
            type: {
              name: 'Number'
            }
          },
          numberOfAssessments: {
            required: false,
            readOnly: true,
            serializedName: 'properties.numberOfAssessments',
            type: {
              name: 'Number'
            }
          },
          lastAssessmentTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastAssessmentTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Project;
