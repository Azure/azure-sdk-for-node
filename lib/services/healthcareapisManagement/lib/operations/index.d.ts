/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Services
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HealthcareApisManagementClient.
 */
export interface Services {


    /**
     * Get the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescription>>;

    /**
     * Get the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescription>;
    get(resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.ServicesDescription>): void;
    get(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescription>): void;


    /**
     * Create or update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} serviceDescription The service instance metadata.
     *
     * @param {object} [serviceDescription.properties] The common properties of a
     * service.
     *
     * @param {array} serviceDescription.properties.accessPolicies The access
     * policies of the service instance.
     *
     * @param {object} [serviceDescription.properties.cosmosDbConfiguration] The
     * settings for the Cosmos DB database backing the service.
     *
     * @param {number}
     * [serviceDescription.properties.cosmosDbConfiguration.offerThroughput] The
     * provisioned throughput for the backing database.
     *
     * @param {string} serviceDescription.location The resource location.
     *
     * @param {object} [serviceDescription.tags] The resource tags.
     *
     * @param {string} [serviceDescription.etag] An etag associated with the
     * resource, used for optimistic concurrency when editing it.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescription>>;

    /**
     * Create or update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} serviceDescription The service instance metadata.
     *
     * @param {object} [serviceDescription.properties] The common properties of a
     * service.
     *
     * @param {array} serviceDescription.properties.accessPolicies The access
     * policies of the service instance.
     *
     * @param {object} [serviceDescription.properties.cosmosDbConfiguration] The
     * settings for the Cosmos DB database backing the service.
     *
     * @param {number}
     * [serviceDescription.properties.cosmosDbConfiguration.offerThroughput] The
     * provisioned throughput for the backing database.
     *
     * @param {string} serviceDescription.location The resource location.
     *
     * @param {object} [serviceDescription.tags] The resource tags.
     *
     * @param {string} [serviceDescription.etag] An etag associated with the
     * resource, used for optimistic concurrency when editing it.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescription>;
    createOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, callback: ServiceCallback<models.ServicesDescription>): void;
    createOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescription>): void;


    /**
     * Update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} servicePatchDescription The service instance metadata and
     * security metadata.
     *
     * @param {object} [servicePatchDescription.tags] Instance tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescription>>;

    /**
     * Update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} servicePatchDescription The service instance metadata and
     * security metadata.
     *
     * @param {object} [servicePatchDescription.tags] Instance tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescription>;
    update(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, callback: ServiceCallback<models.ServicesDescription>): void;
    update(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescription>): void;


    /**
     * Delete a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get all the service instances in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescriptionListResult>>;

    /**
     * Get all the service instances in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescriptionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescriptionListResult>;
    list(callback: ServiceCallback<models.ServicesDescriptionListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescriptionListResult>): void;


    /**
     * Get all the service instances in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescriptionListResult>>;

    /**
     * Get all the service instances in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescriptionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescriptionListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ServicesDescriptionListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescriptionListResult>): void;


    /**
     * Check if a service instance name is available.
     *
     * @param {object} checkNameAvailabilityInputs Set the name parameter in the
     * CheckNameAvailabilityParameters structure to the name of the service
     * instance to check.
     *
     * @param {string} checkNameAvailabilityInputs.name The name of the service
     * instance to check.
     *
     * @param {string} checkNameAvailabilityInputs.type The fully qualified
     * resource type which includes provider namespace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesNameAvailabilityInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(checkNameAvailabilityInputs: models.CheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesNameAvailabilityInfo>>;

    /**
     * Check if a service instance name is available.
     *
     * @param {object} checkNameAvailabilityInputs Set the name parameter in the
     * CheckNameAvailabilityParameters structure to the name of the service
     * instance to check.
     *
     * @param {string} checkNameAvailabilityInputs.name The name of the service
     * instance to check.
     *
     * @param {string} checkNameAvailabilityInputs.type The fully qualified
     * resource type which includes provider namespace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesNameAvailabilityInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesNameAvailabilityInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesNameAvailabilityInfo} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(checkNameAvailabilityInputs: models.CheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesNameAvailabilityInfo>;
    checkNameAvailability(checkNameAvailabilityInputs: models.CheckNameAvailabilityParameters, callback: ServiceCallback<models.ServicesNameAvailabilityInfo>): void;
    checkNameAvailability(checkNameAvailabilityInputs: models.CheckNameAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesNameAvailabilityInfo>): void;


    /**
     * Moves resources to another subscription and/or resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {object} moveResourcesInputs Set the move resource structure to the
     * name of the service instance to check.
     *
     * @param {string} moveResourcesInputs.targetSubscriptionId The target
     * subscription to move resources to.
     *
     * @param {string} moveResourcesInputs.targetResourceGroupName The target
     * resource group to move resources to.
     *
     * @param {array} moveResourcesInputs.resourceIdsToMove The list of resources
     * to move.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    moveResourcesWithHttpOperationResponse(resourceGroupName: string, moveResourcesInputs: models.MoveResourcesParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Moves resources to another subscription and/or resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {object} moveResourcesInputs Set the move resource structure to the
     * name of the service instance to check.
     *
     * @param {string} moveResourcesInputs.targetSubscriptionId The target
     * subscription to move resources to.
     *
     * @param {string} moveResourcesInputs.targetResourceGroupName The target
     * resource group to move resources to.
     *
     * @param {array} moveResourcesInputs.resourceIdsToMove The list of resources
     * to move.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    moveResources(resourceGroupName: string, moveResourcesInputs: models.MoveResourcesParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    moveResources(resourceGroupName: string, moveResourcesInputs: models.MoveResourcesParameters, callback: ServiceCallback<void>): void;
    moveResources(resourceGroupName: string, moveResourcesInputs: models.MoveResourcesParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} serviceDescription The service instance metadata.
     *
     * @param {object} [serviceDescription.properties] The common properties of a
     * service.
     *
     * @param {array} serviceDescription.properties.accessPolicies The access
     * policies of the service instance.
     *
     * @param {object} [serviceDescription.properties.cosmosDbConfiguration] The
     * settings for the Cosmos DB database backing the service.
     *
     * @param {number}
     * [serviceDescription.properties.cosmosDbConfiguration.offerThroughput] The
     * provisioned throughput for the backing database.
     *
     * @param {string} serviceDescription.location The resource location.
     *
     * @param {object} [serviceDescription.tags] The resource tags.
     *
     * @param {string} [serviceDescription.etag] An etag associated with the
     * resource, used for optimistic concurrency when editing it.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescription>>;

    /**
     * Create or update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} serviceDescription The service instance metadata.
     *
     * @param {object} [serviceDescription.properties] The common properties of a
     * service.
     *
     * @param {array} serviceDescription.properties.accessPolicies The access
     * policies of the service instance.
     *
     * @param {object} [serviceDescription.properties.cosmosDbConfiguration] The
     * settings for the Cosmos DB database backing the service.
     *
     * @param {number}
     * [serviceDescription.properties.cosmosDbConfiguration.offerThroughput] The
     * provisioned throughput for the backing database.
     *
     * @param {string} serviceDescription.location The resource location.
     *
     * @param {object} [serviceDescription.tags] The resource tags.
     *
     * @param {string} [serviceDescription.etag] An etag associated with the
     * resource, used for optimistic concurrency when editing it.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescription>;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, callback: ServiceCallback<models.ServicesDescription>): void;
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: models.ServicesDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescription>): void;


    /**
     * Update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} servicePatchDescription The service instance metadata and
     * security metadata.
     *
     * @param {object} [servicePatchDescription.tags] Instance tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescription>>;

    /**
     * Update the metadata of a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} servicePatchDescription The service instance metadata and
     * security metadata.
     *
     * @param {object} [servicePatchDescription.tags] Instance tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescription} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescription>;
    beginUpdate(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, callback: ServiceCallback<models.ServicesDescription>): void;
    beginUpdate(resourceGroupName: string, resourceName: string, servicePatchDescription: models.ServicesPatchDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescription>): void;


    /**
     * Delete a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the service instance.
     *
     * @param {string} resourceName The name of the service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get all the service instances in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescriptionListResult>>;

    /**
     * Get all the service instances in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescriptionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescriptionListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ServicesDescriptionListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescriptionListResult>): void;


    /**
     * Get all the service instances in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicesDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicesDescriptionListResult>>;

    /**
     * Get all the service instances in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicesDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicesDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicesDescriptionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicesDescriptionListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ServicesDescriptionListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicesDescriptionListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HealthcareApisManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Healthcare service REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Healthcare service REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Healthcare service REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Healthcare service REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * OperationResults
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HealthcareApisManagementClient.
 */
export interface OperationResults {


    /**
     * Get the operation result for a long running operation.
     *
     * @param {string} locationName The location of the operation.
     *
     * @param {string} operationResultId The ID of the operation result to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(locationName: string, operationResultId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Get the operation result for a long running operation.
     *
     * @param {string} locationName The location of the operation.
     *
     * @param {string} operationResultId The ID of the operation result to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(locationName: string, operationResultId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get(locationName: string, operationResultId: string, callback: ServiceCallback<any>): void;
    get(locationName: string, operationResultId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * MoveResourcesStatus
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HealthcareApisManagementClient.
 */
export interface MoveResourcesStatus {


    /**
     * Get the operation result for a long running move operation.
     *
     * @param {string} locationName The location of the operation.
     *
     * @param {string} operationResultId The ID of the operation result to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(locationName: string, operationResultId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Get the operation result for a long running move operation.
     *
     * @param {string} locationName The location of the operation.
     *
     * @param {string} operationResultId The ID of the operation result to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(locationName: string, operationResultId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    get(locationName: string, operationResultId: string, callback: ServiceCallback<any>): void;
    get(locationName: string, operationResultId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}
