/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The description of the service.
 *
 * @extends models['Resource']
 */
class ServicesDescription extends models['Resource'] {
  /**
   * Create a ServicesDescription.
   * @property {object} [properties] The common properties of a service.
   * @property {string} [properties.provisioningState] The provisioning state.
   * Possible values include: 'Deleting', 'Succeeded', 'Creating', 'Accepted',
   * 'Verifying', 'Updating', 'Failed', 'Canceled', 'Deprovisioned'
   * @property {array} [properties.accessPolicies] The access policies of the
   * service instance.
   * @property {object} [properties.cosmosDbConfiguration] The settings for the
   * Cosmos DB database backing the service.
   * @property {number} [properties.cosmosDbConfiguration.offerThroughput] The
   * provisioned throughput for the backing database.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ServicesDescription
   *
   * @returns {object} metadata of ServicesDescription
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServicesDescription',
      type: {
        name: 'Composite',
        className: 'ServicesDescription',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            constraints: {
              Pattern: /^[a-z0-9][a-z0-9-]{1,21}[a-z0-9]$/
            },
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            isConstant: true,
            serializedName: 'kind',
            defaultValue: 'fhir',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'ServicesProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = ServicesDescription;
