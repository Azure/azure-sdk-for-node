/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const ServiceClient = msRestAzure.AzureServiceClient;

const models = require('./models');
const operations = require('./operations');


/** Class representing a RecoveryServicesBackupClient. */
class RecoveryServicesBackupClient extends ServiceClient {
  /**
   * Create a RecoveryServicesBackupClient.
   * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
   * @param {string} subscriptionId - The subscription Id.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
   * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
   * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
   */
  constructor(credentials, subscriptionId, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (subscriptionId === null || subscriptionId === undefined) {
      throw new Error('\'subscriptionId\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.acceptLanguage = 'en-US';
    this.longRunningOperationRetryTimeout = 30;
    this.generateClientRequestId = true;
    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://management.azure.com';
    }
    this.credentials = credentials;
    this.subscriptionId = subscriptionId;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
      this.acceptLanguage = options.acceptLanguage;
    }
    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
    }
    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {
      this.generateClientRequestId = options.generateClientRequestId;
    }
    this.backupJobs = new operations.BackupJobs(this);
    this.jobDetails = new operations.JobDetails(this);
    this.backupResourceVaultConfigs = new operations.BackupResourceVaultConfigs(this);
    this.backupEngines = new operations.BackupEngines(this);
    this.protectionContainerRefreshOperationResults = new operations.ProtectionContainerRefreshOperationResults(this);
    this.protectionContainers = new operations.ProtectionContainers(this);
    this.protectionContainerOperationResults = new operations.ProtectionContainerOperationResults(this);
    this.protectedItems = new operations.ProtectedItems(this);
    this.backups = new operations.Backups(this);
    this.protectedItemOperationResults = new operations.ProtectedItemOperationResults(this);
    this.protectedItemOperationStatuses = new operations.ProtectedItemOperationStatuses(this);
    this.recoveryPoints = new operations.RecoveryPoints(this);
    this.itemLevelRecoveryConnections = new operations.ItemLevelRecoveryConnections(this);
    this.restores = new operations.Restores(this);
    this.jobCancellations = new operations.JobCancellations(this);
    this.jobOperationResults = new operations.JobOperationResults(this);
    this.exportJobsOperationResults = new operations.ExportJobsOperationResults(this);
    this.jobs = new operations.Jobs(this);
    this.backupOperationResults = new operations.BackupOperationResults(this);
    this.backupOperationStatuses = new operations.BackupOperationStatuses(this);
    this.backupPolicies = new operations.BackupPolicies(this);
    this.protectionPolicies = new operations.ProtectionPolicies(this);
    this.protectionPolicyOperationResults = new operations.ProtectionPolicyOperationResults(this);
    this.protectionPolicyOperationStatuses = new operations.ProtectionPolicyOperationStatuses(this);
    this.backupProtectableItems = new operations.BackupProtectableItems(this);
    this.backupProtectedItems = new operations.BackupProtectedItems(this);
    this.backupProtectionContainers = new operations.BackupProtectionContainers(this);
    this.securityPINs = new operations.SecurityPINs(this);
    this.backupResourceStorageConfigs = new operations.BackupResourceStorageConfigs(this);
    this.backupUsageSummaries = new operations.BackupUsageSummaries(this);
    this.operations = new operations.Operations(this);
    this.models = models;
    msRest.addSerializationMixin(this);
  }

}

module.exports = RecoveryServicesBackupClient;
