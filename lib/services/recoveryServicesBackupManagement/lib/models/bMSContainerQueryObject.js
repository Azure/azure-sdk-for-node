/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The query filters that can be used with the list containers API.
 *
 */
class BMSContainerQueryObject {
  /**
   * Create a BMSContainerQueryObject.
   * @member {string} backupManagementType Backup management type for this
   * container. Possible values include: 'Invalid', 'AzureIaasVM', 'MAB',
   * 'DPM', 'AzureBackupServer', 'AzureSql'
   * @member {string} [containerType] Type of container for filter. Possible
   * values include: 'Invalid', 'Unknown', 'IaasVMContainer',
   * 'IaasVMServiceContainer', 'DPMContainer', 'AzureBackupServerContainer',
   * 'MABContainer', 'Cluster', 'AzureSqlContainer', 'Windows', 'VCenter'
   * @member {string} [backupEngineName] Backup engine name
   * @member {string} [status] Status of registration of this container with
   * the Recovery Services Vault.
   * @member {string} [friendlyName] Friendly name of this container.
   */
  constructor() {
  }

  /**
   * Defines the metadata of BMSContainerQueryObject
   *
   * @returns {object} metadata of BMSContainerQueryObject
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'BMSContainerQueryObject',
      type: {
        name: 'Composite',
        className: 'BMSContainerQueryObject',
        modelProperties: {
          backupManagementType: {
            required: true,
            serializedName: 'backupManagementType',
            type: {
              name: 'String'
            }
          },
          containerType: {
            required: false,
            serializedName: 'containerType',
            type: {
              name: 'String'
            }
          },
          backupEngineName: {
            required: false,
            serializedName: 'backupEngineName',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          friendlyName: {
            required: false,
            serializedName: 'friendlyName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = BMSContainerQueryObject;
