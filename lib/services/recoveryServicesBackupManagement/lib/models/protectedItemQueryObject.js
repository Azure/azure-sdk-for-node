/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Filters to list backup items.
 *
 */
class ProtectedItemQueryObject {
  /**
   * Create a ProtectedItemQueryObject.
   * @member {string} [healthState] Health State for the backed up item.
   * Possible values include: 'Passed', 'ActionRequired', 'ActionSuggested',
   * 'Invalid'
   * @member {string} [backupManagementType] Backup management type for the
   * backed up item. Possible values include: 'Invalid', 'AzureIaasVM', 'MAB',
   * 'DPM', 'AzureBackupServer', 'AzureSql'
   * @member {string} [itemType] Type of workload this item represents.
   * Possible values include: 'Invalid', 'VM', 'FileFolder', 'AzureSqlDb',
   * 'SQLDB', 'Exchange', 'Sharepoint', 'VMwareVM', 'SystemState', 'Client',
   * 'GenericDataSource'
   * @member {string} [policyName] Backup policy name associated with the
   * backup item.
   * @member {string} [containerName] Name of the container.
   * @member {string} [backupEngineName] Backup Engine name
   * @member {string} [friendlyName] Friendly name of protected item
   */
  constructor() {
  }

  /**
   * Defines the metadata of ProtectedItemQueryObject
   *
   * @returns {object} metadata of ProtectedItemQueryObject
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ProtectedItemQueryObject',
      type: {
        name: 'Composite',
        className: 'ProtectedItemQueryObject',
        modelProperties: {
          healthState: {
            required: false,
            serializedName: 'healthState',
            type: {
              name: 'String'
            }
          },
          backupManagementType: {
            required: false,
            serializedName: 'backupManagementType',
            type: {
              name: 'String'
            }
          },
          itemType: {
            required: false,
            serializedName: 'itemType',
            type: {
              name: 'String'
            }
          },
          policyName: {
            required: false,
            serializedName: 'policyName',
            type: {
              name: 'String'
            }
          },
          containerName: {
            required: false,
            serializedName: 'containerName',
            type: {
              name: 'String'
            }
          },
          backupEngineName: {
            required: false,
            serializedName: 'backupEngineName',
            type: {
              name: 'String'
            }
          },
          friendlyName: {
            required: false,
            serializedName: 'friendlyName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ProtectedItemQueryObject;
