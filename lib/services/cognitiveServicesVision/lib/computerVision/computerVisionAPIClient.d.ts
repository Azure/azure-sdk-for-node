/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

declare class ComputerVisionAPIClient extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the ComputerVisionAPIClient class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {azureRegions} azureRegion - Supported Azure regions for Cognitive Services endpoints. Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, azureRegion: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;

  azureRegion: string;


  /**
   * This operation returns the list of domain-specific models that are supported
   * by the Computer Vision API.  Currently, the API only supports one
   * domain-specific model: a celebrity recognizer. A successful response will be
   * returned in JSON.  If the request failed, the response will contain an error
   * code and a message to help understand what went wrong.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListModelsResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listModelsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListModelsResult>>;

  /**
   * This operation returns the list of domain-specific models that are supported
   * by the Computer Vision API.  Currently, the API only supports one
   * domain-specific model: a celebrity recognizer. A successful response will be
   * returned in JSON.  If the request failed, the response will contain an error
   * code and a message to help understand what went wrong.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ListModelsResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ListModelsResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListModelsResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listModels(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListModelsResult>;
  listModels(callback: ServiceCallback<models.ListModelsResult>): void;
  listModels(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListModelsResult>): void;


  /**
   * This operation extracts a rich set of visual features based on the image
   * content. Two input methods are supported -- (1) Uploading an image or (2)
   * specifying an image URL.  Within your request, there is an optional
   * parameter to allow you to choose which features to return.  By default,
   * image categories are returned in the response.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.visualFeatures] A string indicating what visual
   * feature types to return. Multiple values should be comma-separated. Valid
   * visual feature types include:Categories - categorizes image content
   * according to a taxonomy defined in documentation. Tags - tags the image with
   * a detailed list of words related to the image content. Description -
   * describes the image content with a complete English sentence. Faces -
   * detects if faces are present. If present, generate coordinates, gender and
   * age. ImageType - detects if image is clipart or a line drawing. Color -
   * determines the accent color, dominant color, and whether an image is
   * black&white.Adult - detects if the image is pornographic in nature (depicts
   * nudity or a sex act).  Sexually suggestive content is also detected.
   *
   * @param {array} [options.details] A string indicating which domain-specific
   * details to return. Multiple values should be comma-separated. Valid visual
   * feature types include:Celebrities - identifies celebrities if detected in
   * the image.
   *
   * @param {string} [options.language] A string indicating which language to
   * return. The service will return recognition results in specified language.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default.zh - Simplified
   * Chinese. Possible values include: 'en', 'zh'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageAnalysis>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  analyzeImageWithHttpOperationResponse(url: string, options?: { visualFeatures? : string[], details? : string[], language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageAnalysis>>;

  /**
   * This operation extracts a rich set of visual features based on the image
   * content. Two input methods are supported -- (1) Uploading an image or (2)
   * specifying an image URL.  Within your request, there is an optional
   * parameter to allow you to choose which features to return.  By default,
   * image categories are returned in the response.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.visualFeatures] A string indicating what visual
   * feature types to return. Multiple values should be comma-separated. Valid
   * visual feature types include:Categories - categorizes image content
   * according to a taxonomy defined in documentation. Tags - tags the image with
   * a detailed list of words related to the image content. Description -
   * describes the image content with a complete English sentence. Faces -
   * detects if faces are present. If present, generate coordinates, gender and
   * age. ImageType - detects if image is clipart or a line drawing. Color -
   * determines the accent color, dominant color, and whether an image is
   * black&white.Adult - detects if the image is pornographic in nature (depicts
   * nudity or a sex act).  Sexually suggestive content is also detected.
   *
   * @param {array} [options.details] A string indicating which domain-specific
   * details to return. Multiple values should be comma-separated. Valid visual
   * feature types include:Celebrities - identifies celebrities if detected in
   * the image.
   *
   * @param {string} [options.language] A string indicating which language to
   * return. The service will return recognition results in specified language.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default.zh - Simplified
   * Chinese. Possible values include: 'en', 'zh'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageAnalysis} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageAnalysis} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageAnalysis} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  analyzeImage(url: string, options?: { visualFeatures? : string[], details? : string[], language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageAnalysis>;
  analyzeImage(url: string, callback: ServiceCallback<models.ImageAnalysis>): void;
  analyzeImage(url: string, options: { visualFeatures? : string[], details? : string[], language? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageAnalysis>): void;


  /**
   * This operation generates a thumbnail image with the user-specified width and
   * height. By default, the service analyzes the image, identifies the region of
   * interest (ROI), and generates smart cropping coordinates based on the ROI.
   * Smart cropping helps when you specify an aspect ratio that differs from that
   * of the input image. A successful response contains the thumbnail image
   * binary. If the request failed, the response contains an error code and a
   * message to help determine what went wrong.
   *
   * @param {number} width Width of the thumbnail. It must be between 1 and 1024.
   * Recommended minimum of 50.
   *
   * @param {number} height Height of the thumbnail. It must be between 1 and
   * 1024. Recommended minimum of 50.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.smartCropping] Boolean flag for enabling smart
   * cropping.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  generateThumbnailWithHttpOperationResponse(width: number, height: number, url: string, options?: { smartCropping? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

  /**
   * This operation generates a thumbnail image with the user-specified width and
   * height. By default, the service analyzes the image, identifies the region of
   * interest (ROI), and generates smart cropping coordinates based on the ROI.
   * Smart cropping helps when you specify an aspect ratio that differs from that
   * of the input image. A successful response contains the thumbnail image
   * binary. If the request failed, the response contains an error code and a
   * message to help determine what went wrong.
   *
   * @param {number} width Width of the thumbnail. It must be between 1 and 1024.
   * Recommended minimum of 50.
   *
   * @param {number} height Height of the thumbnail. It must be between 1 and
   * 1024. Recommended minimum of 50.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.smartCropping] Boolean flag for enabling smart
   * cropping.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  generateThumbnail(width: number, height: number, url: string, options?: { smartCropping? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
  generateThumbnail(width: number, height: number, url: string, callback: ServiceCallback<stream.Readable>): void;
  generateThumbnail(width: number, height: number, url: string, options: { smartCropping? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


  /**
   * Optical Character Recognition (OCR) detects printed text in an image and
   * extracts the recognized characters into a machine-usable character stream.
   * Upon success, the OCR results will be returned. Upon failure, the error code
   * together with an error message will be returned. The error code can be one
   * of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
   * NotSupportedLanguage, or InternalServerError.
   *
   * @param {boolean} detectOrientation Whether detect the text orientation in
   * the image. With detectOrientation=true the OCR service tries to detect the
   * image orientation and correct it before further processing (e.g. if it's
   * upside-down).
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.language] The BCP-47 language code of the text to
   * be detected in the image. The default value is 'unk'. Possible values
   * include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',
   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv',
   * 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OcrResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recognizePrintedTextWithHttpOperationResponse(detectOrientation: boolean, url: string, options?: { language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OcrResult>>;

  /**
   * Optical Character Recognition (OCR) detects printed text in an image and
   * extracts the recognized characters into a machine-usable character stream.
   * Upon success, the OCR results will be returned. Upon failure, the error code
   * together with an error message will be returned. The error code can be one
   * of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
   * NotSupportedLanguage, or InternalServerError.
   *
   * @param {boolean} detectOrientation Whether detect the text orientation in
   * the image. With detectOrientation=true the OCR service tries to detect the
   * image orientation and correct it before further processing (e.g. if it's
   * upside-down).
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.language] The BCP-47 language code of the text to
   * be detected in the image. The default value is 'unk'. Possible values
   * include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',
   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv',
   * 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {OcrResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {OcrResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OcrResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recognizePrintedText(detectOrientation: boolean, url: string, options?: { language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.OcrResult>;
  recognizePrintedText(detectOrientation: boolean, url: string, callback: ServiceCallback<models.OcrResult>): void;
  recognizePrintedText(detectOrientation: boolean, url: string, options: { language? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OcrResult>): void;


  /**
   * This operation generates a description of an image in human readable
   * language with complete sentences.  The description is based on a collection
   * of content tags, which are also returned by the operation. More than one
   * description can be generated for each image.  Descriptions are ordered by
   * their confidence score. All descriptions are in English. Two input methods
   * are supported -- (1) Uploading an image or (2) specifying an image URL.A
   * successful response will be returned in JSON.  If the request failed, the
   * response will contain an error code and a message to help understand what
   * went wrong.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.maxCandidates] Maximum number of candidate
   * descriptions to be returned.  The default is 1.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageDescription>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  describeImageWithHttpOperationResponse(url: string, options?: { maxCandidates? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageDescription>>;

  /**
   * This operation generates a description of an image in human readable
   * language with complete sentences.  The description is based on a collection
   * of content tags, which are also returned by the operation. More than one
   * description can be generated for each image.  Descriptions are ordered by
   * their confidence score. All descriptions are in English. Two input methods
   * are supported -- (1) Uploading an image or (2) specifying an image URL.A
   * successful response will be returned in JSON.  If the request failed, the
   * response will contain an error code and a message to help understand what
   * went wrong.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.maxCandidates] Maximum number of candidate
   * descriptions to be returned.  The default is 1.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageDescription} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageDescription} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageDescription} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  describeImage(url: string, options?: { maxCandidates? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageDescription>;
  describeImage(url: string, callback: ServiceCallback<models.ImageDescription>): void;
  describeImage(url: string, options: { maxCandidates? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageDescription>): void;


  /**
   * This operation generates a list of words, or tags, that are relevant to the
   * content of the supplied image. The Computer Vision API can return tags based
   * on objects, living beings, scenery or actions found in images. Unlike
   * categories, tags are not organized according to a hierarchical
   * classification system, but correspond to image content. Tags may contain
   * hints to avoid ambiguity or provide context, for example the tag “cello” may
   * be accompanied by the hint “musical instrument”. All tags are in English.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TagResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  tagImageWithHttpOperationResponse(url: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResult>>;

  /**
   * This operation generates a list of words, or tags, that are relevant to the
   * content of the supplied image. The Computer Vision API can return tags based
   * on objects, living beings, scenery or actions found in images. Unlike
   * categories, tags are not organized according to a hierarchical
   * classification system, but correspond to image content. Tags may contain
   * hints to avoid ambiguity or provide context, for example the tag “cello” may
   * be accompanied by the hint “musical instrument”. All tags are in English.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TagResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TagResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TagResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  tagImage(url: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResult>;
  tagImage(url: string, callback: ServiceCallback<models.TagResult>): void;
  tagImage(url: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResult>): void;


  /**
   * This operation recognizes content within an image by applying a
   * domain-specific model.  The list of domain-specific models that are
   * supported by the Computer Vision API can be retrieved using the /models GET
   * request.  Currently, the API only provides a single domain-specific model:
   * celebrities. Two input methods are supported -- (1) Uploading an image or
   * (2) specifying an image URL. A successful response will be returned in JSON.
   * If the request failed, the response will contain an error code and a message
   * to help understand what went wrong.
   *
   * @param {string} model The domain-specific content to recognize. Possible
   * values include: 'Celebrities', 'Landmarks'
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DomainModelResults>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  analyzeImageByDomainWithHttpOperationResponse(model: string, url: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainModelResults>>;

  /**
   * This operation recognizes content within an image by applying a
   * domain-specific model.  The list of domain-specific models that are
   * supported by the Computer Vision API can be retrieved using the /models GET
   * request.  Currently, the API only provides a single domain-specific model:
   * celebrities. Two input methods are supported -- (1) Uploading an image or
   * (2) specifying an image URL. A successful response will be returned in JSON.
   * If the request failed, the response will contain an error code and a message
   * to help understand what went wrong.
   *
   * @param {string} model The domain-specific content to recognize. Possible
   * values include: 'Celebrities', 'Landmarks'
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DomainModelResults} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DomainModelResults} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DomainModelResults} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  analyzeImageByDomain(model: string, url: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainModelResults>;
  analyzeImageByDomain(model: string, url: string, callback: ServiceCallback<models.DomainModelResults>): void;
  analyzeImageByDomain(model: string, url: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainModelResults>): void;


  /**
   * Recognize Text operation. When you use the Recognize Text interface, the
   * response contains a field called “Operation-Location”. The
   * “Operation-Location” field contains the URL that you must use for your Get
   * Handwritten Text Operation Result operation.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.detectHandwriting] If “true” is specified,
   * handwriting recognition is performed. If this parameter is set to “false” or
   * is not specified, printed text recognition is performed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recognizeTextWithHttpOperationResponse(url: string, options?: { detectHandwriting? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * Recognize Text operation. When you use the Recognize Text interface, the
   * response contains a field called “Operation-Location”. The
   * “Operation-Location” field contains the URL that you must use for your Get
   * Handwritten Text Operation Result operation.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.detectHandwriting] If “true” is specified,
   * handwriting recognition is performed. If this parameter is set to “false” or
   * is not specified, printed text recognition is performed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recognizeText(url: string, options?: { detectHandwriting? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  recognizeText(url: string, callback: ServiceCallback<void>): void;
  recognizeText(url: string, options: { detectHandwriting? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * This interface is used for getting text operation result. The URL to this
   * interface should be retrieved from 'Operation-Location' field returned from
   * Recognize Text interface.
   *
   * @param {string} operationId Id of the text operation returned in the
   * response of the 'Recognize Handwritten Text'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TextOperationResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTextOperationResultWithHttpOperationResponse(operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TextOperationResult>>;

  /**
   * This interface is used for getting text operation result. The URL to this
   * interface should be retrieved from 'Operation-Location' field returned from
   * Recognize Text interface.
   *
   * @param {string} operationId Id of the text operation returned in the
   * response of the 'Recognize Handwritten Text'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TextOperationResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TextOperationResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TextOperationResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTextOperationResult(operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TextOperationResult>;
  getTextOperationResult(operationId: string, callback: ServiceCallback<models.TextOperationResult>): void;
  getTextOperationResult(operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TextOperationResult>): void;


  /**
   * This operation extracts a rich set of visual features based on the image
   * content.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.visualFeatures] A string indicating what visual
   * feature types to return. Multiple values should be comma-separated. Valid
   * visual feature types include:Categories - categorizes image content
   * according to a taxonomy defined in documentation. Tags - tags the image with
   * a detailed list of words related to the image content. Description -
   * describes the image content with a complete English sentence. Faces -
   * detects if faces are present. If present, generate coordinates, gender and
   * age. ImageType - detects if image is clipart or a line drawing. Color -
   * determines the accent color, dominant color, and whether an image is
   * black&white.Adult - detects if the image is pornographic in nature (depicts
   * nudity or a sex act).  Sexually suggestive content is also detected.
   *
   * @param {string} [options.details] A string indicating which domain-specific
   * details to return. Multiple values should be comma-separated. Valid visual
   * feature types include:Celebrities - identifies celebrities if detected in
   * the image. Possible values include: 'Celebrities', 'Landmarks'
   *
   * @param {string} [options.language] A string indicating which language to
   * return. The service will return recognition results in specified language.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default.zh - Simplified
   * Chinese. Possible values include: 'en', 'zh'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageAnalysis>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  analyzeImageInStreamWithHttpOperationResponse(image: stream.Readable, options?: { visualFeatures? : string[], details? : string, language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageAnalysis>>;

  /**
   * This operation extracts a rich set of visual features based on the image
   * content.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.visualFeatures] A string indicating what visual
   * feature types to return. Multiple values should be comma-separated. Valid
   * visual feature types include:Categories - categorizes image content
   * according to a taxonomy defined in documentation. Tags - tags the image with
   * a detailed list of words related to the image content. Description -
   * describes the image content with a complete English sentence. Faces -
   * detects if faces are present. If present, generate coordinates, gender and
   * age. ImageType - detects if image is clipart or a line drawing. Color -
   * determines the accent color, dominant color, and whether an image is
   * black&white.Adult - detects if the image is pornographic in nature (depicts
   * nudity or a sex act).  Sexually suggestive content is also detected.
   *
   * @param {string} [options.details] A string indicating which domain-specific
   * details to return. Multiple values should be comma-separated. Valid visual
   * feature types include:Celebrities - identifies celebrities if detected in
   * the image. Possible values include: 'Celebrities', 'Landmarks'
   *
   * @param {string} [options.language] A string indicating which language to
   * return. The service will return recognition results in specified language.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default.zh - Simplified
   * Chinese. Possible values include: 'en', 'zh'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageAnalysis} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageAnalysis} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageAnalysis} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  analyzeImageInStream(image: stream.Readable, options?: { visualFeatures? : string[], details? : string, language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageAnalysis>;
  analyzeImageInStream(image: stream.Readable, callback: ServiceCallback<models.ImageAnalysis>): void;
  analyzeImageInStream(image: stream.Readable, options: { visualFeatures? : string[], details? : string, language? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageAnalysis>): void;


  /**
   * This operation generates a thumbnail image with the user-specified width and
   * height. By default, the service analyzes the image, identifies the region of
   * interest (ROI), and generates smart cropping coordinates based on the ROI.
   * Smart cropping helps when you specify an aspect ratio that differs from that
   * of the input image. A successful response contains the thumbnail image
   * binary. If the request failed, the response contains an error code and a
   * message to help determine what went wrong.
   *
   * @param {number} width Width of the thumbnail. It must be between 1 and 1024.
   * Recommended minimum of 50.
   *
   * @param {number} height Height of the thumbnail. It must be between 1 and
   * 1024. Recommended minimum of 50.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.smartCropping] Boolean flag for enabling smart
   * cropping.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  generateThumbnailInStreamWithHttpOperationResponse(width: number, height: number, image: stream.Readable, options?: { smartCropping? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

  /**
   * This operation generates a thumbnail image with the user-specified width and
   * height. By default, the service analyzes the image, identifies the region of
   * interest (ROI), and generates smart cropping coordinates based on the ROI.
   * Smart cropping helps when you specify an aspect ratio that differs from that
   * of the input image. A successful response contains the thumbnail image
   * binary. If the request failed, the response contains an error code and a
   * message to help determine what went wrong.
   *
   * @param {number} width Width of the thumbnail. It must be between 1 and 1024.
   * Recommended minimum of 50.
   *
   * @param {number} height Height of the thumbnail. It must be between 1 and
   * 1024. Recommended minimum of 50.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.smartCropping] Boolean flag for enabling smart
   * cropping.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  generateThumbnailInStream(width: number, height: number, image: stream.Readable, options?: { smartCropping? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
  generateThumbnailInStream(width: number, height: number, image: stream.Readable, callback: ServiceCallback<stream.Readable>): void;
  generateThumbnailInStream(width: number, height: number, image: stream.Readable, options: { smartCropping? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


  /**
   * Optical Character Recognition (OCR) detects printed text in an image and
   * extracts the recognized characters into a machine-usable character stream.
   * Upon success, the OCR results will be returned. Upon failure, the error code
   * together with an error message will be returned. The error code can be one
   * of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
   * NotSupportedLanguage, or InternalServerError.
   *
   * @param {boolean} detectOrientation Whether detect the text orientation in
   * the image. With detectOrientation=true the OCR service tries to detect the
   * image orientation and correct it before further processing (e.g. if it's
   * upside-down).
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.language] The BCP-47 language code of the text to
   * be detected in the image. The default value is 'unk'. Possible values
   * include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',
   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv',
   * 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OcrResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recognizePrintedTextInStreamWithHttpOperationResponse(detectOrientation: boolean, image: stream.Readable, options?: { language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OcrResult>>;

  /**
   * Optical Character Recognition (OCR) detects printed text in an image and
   * extracts the recognized characters into a machine-usable character stream.
   * Upon success, the OCR results will be returned. Upon failure, the error code
   * together with an error message will be returned. The error code can be one
   * of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
   * NotSupportedLanguage, or InternalServerError.
   *
   * @param {boolean} detectOrientation Whether detect the text orientation in
   * the image. With detectOrientation=true the OCR service tries to detect the
   * image orientation and correct it before further processing (e.g. if it's
   * upside-down).
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.language] The BCP-47 language code of the text to
   * be detected in the image. The default value is 'unk'. Possible values
   * include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',
   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv',
   * 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {OcrResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {OcrResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OcrResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recognizePrintedTextInStream(detectOrientation: boolean, image: stream.Readable, options?: { language? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.OcrResult>;
  recognizePrintedTextInStream(detectOrientation: boolean, image: stream.Readable, callback: ServiceCallback<models.OcrResult>): void;
  recognizePrintedTextInStream(detectOrientation: boolean, image: stream.Readable, options: { language? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OcrResult>): void;


  /**
   * This operation generates a description of an image in human readable
   * language with complete sentences.  The description is based on a collection
   * of content tags, which are also returned by the operation. More than one
   * description can be generated for each image.  Descriptions are ordered by
   * their confidence score. All descriptions are in English. Two input methods
   * are supported -- (1) Uploading an image or (2) specifying an image URL.A
   * successful response will be returned in JSON.  If the request failed, the
   * response will contain an error code and a message to help understand what
   * went wrong.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.maxCandidates] Maximum number of candidate
   * descriptions to be returned.  The default is 1.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageDescription>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  describeImageInStreamWithHttpOperationResponse(image: stream.Readable, options?: { maxCandidates? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageDescription>>;

  /**
   * This operation generates a description of an image in human readable
   * language with complete sentences.  The description is based on a collection
   * of content tags, which are also returned by the operation. More than one
   * description can be generated for each image.  Descriptions are ordered by
   * their confidence score. All descriptions are in English. Two input methods
   * are supported -- (1) Uploading an image or (2) specifying an image URL.A
   * successful response will be returned in JSON.  If the request failed, the
   * response will contain an error code and a message to help understand what
   * went wrong.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.maxCandidates] Maximum number of candidate
   * descriptions to be returned.  The default is 1.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageDescription} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageDescription} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageDescription} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  describeImageInStream(image: stream.Readable, options?: { maxCandidates? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageDescription>;
  describeImageInStream(image: stream.Readable, callback: ServiceCallback<models.ImageDescription>): void;
  describeImageInStream(image: stream.Readable, options: { maxCandidates? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageDescription>): void;


  /**
   * This operation generates a list of words, or tags, that are relevant to the
   * content of the supplied image. The Computer Vision API can return tags based
   * on objects, living beings, scenery or actions found in images. Unlike
   * categories, tags are not organized according to a hierarchical
   * classification system, but correspond to image content. Tags may contain
   * hints to avoid ambiguity or provide context, for example the tag “cello” may
   * be accompanied by the hint “musical instrument”. All tags are in English.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TagResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  tagImageInStreamWithHttpOperationResponse(image: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResult>>;

  /**
   * This operation generates a list of words, or tags, that are relevant to the
   * content of the supplied image. The Computer Vision API can return tags based
   * on objects, living beings, scenery or actions found in images. Unlike
   * categories, tags are not organized according to a hierarchical
   * classification system, but correspond to image content. Tags may contain
   * hints to avoid ambiguity or provide context, for example the tag “cello” may
   * be accompanied by the hint “musical instrument”. All tags are in English.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TagResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TagResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TagResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  tagImageInStream(image: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResult>;
  tagImageInStream(image: stream.Readable, callback: ServiceCallback<models.TagResult>): void;
  tagImageInStream(image: stream.Readable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResult>): void;


  /**
   * This operation recognizes content within an image by applying a
   * domain-specific model.  The list of domain-specific models that are
   * supported by the Computer Vision API can be retrieved using the /models GET
   * request.  Currently, the API only provides a single domain-specific model:
   * celebrities. Two input methods are supported -- (1) Uploading an image or
   * (2) specifying an image URL. A successful response will be returned in JSON.
   * If the request failed, the response will contain an error code and a message
   * to help understand what went wrong.
   *
   * @param {string} model The domain-specific content to recognize.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DomainModelResults>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  analyzeImageByDomainInStreamWithHttpOperationResponse(model: string, image: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainModelResults>>;

  /**
   * This operation recognizes content within an image by applying a
   * domain-specific model.  The list of domain-specific models that are
   * supported by the Computer Vision API can be retrieved using the /models GET
   * request.  Currently, the API only provides a single domain-specific model:
   * celebrities. Two input methods are supported -- (1) Uploading an image or
   * (2) specifying an image URL. A successful response will be returned in JSON.
   * If the request failed, the response will contain an error code and a message
   * to help understand what went wrong.
   *
   * @param {string} model The domain-specific content to recognize.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DomainModelResults} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DomainModelResults} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DomainModelResults} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  analyzeImageByDomainInStream(model: string, image: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainModelResults>;
  analyzeImageByDomainInStream(model: string, image: stream.Readable, callback: ServiceCallback<models.DomainModelResults>): void;
  analyzeImageByDomainInStream(model: string, image: stream.Readable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainModelResults>): void;


  /**
   * Recognize Text operation. When you use the Recognize Text interface, the
   * response contains a field called “Operation-Location”. The
   * “Operation-Location” field contains the URL that you must use for your Get
   * Handwritten Text Operation Result operation.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.detectHandwriting] If “true” is specified,
   * handwriting recognition is performed. If this parameter is set to “false” or
   * is not specified, printed text recognition is performed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recognizeTextInStreamWithHttpOperationResponse(image: stream.Readable, options?: { detectHandwriting? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * Recognize Text operation. When you use the Recognize Text interface, the
   * response contains a field called “Operation-Location”. The
   * “Operation-Location” field contains the URL that you must use for your Get
   * Handwritten Text Operation Result operation.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.detectHandwriting] If “true” is specified,
   * handwriting recognition is performed. If this parameter is set to “false” or
   * is not specified, printed text recognition is performed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recognizeTextInStream(image: stream.Readable, options?: { detectHandwriting? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  recognizeTextInStream(image: stream.Readable, callback: ServiceCallback<void>): void;
  recognizeTextInStream(image: stream.Readable, options: { detectHandwriting? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

export = ComputerVisionAPIClient;
