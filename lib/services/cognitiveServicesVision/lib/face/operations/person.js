/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Create a new person in a specified person group.
 *
 * @param {string} personGroupId Specifying the target person group to create
 * the person.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.name] Display name of the target person. The
 * maximum length is 128.
 *
 * @param {string} [options.userData] Optional fields for user-provided data
 * attached to a person. Size limit is 16KB.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CreatePersonResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let name = (options && options.name !== undefined) ? options.name : undefined;
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (name !== null && name !== undefined && typeof name.valueOf() !== 'string') {
      throw new Error('name must be of type string.');
    }
    if (name !== null && name !== undefined) {
      if (name.length > 128)
      {
        throw new Error('"name" should satisfy the constraint - "MaxLength": 128');
      }
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (userData !== null && userData !== undefined) {
      if (userData.length > 16384)
      {
        throw new Error('"userData" should satisfy the constraint - "MaxLength": 16384');
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((name !== null && name !== undefined) || (userData !== null && userData !== undefined)) {
    body = new client.models['CreatePersonRequest']();
    body.name = name;
    body.userData = userData;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['CreatePersonRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CreatePersonResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List all persons in a person group, and retrieve person information
 * (including personId, name, userData and persistedFaceIds of registered faces
 * of the person).
 *
 * @param {string} personGroupId personGroupId of the target person group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.start] Starting person id to return (used to list a
 * range of persons).
 *
 * @param {number} [options.top] Number of persons to return starting with the
 * person id indicated by the 'start' parameter.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let start = (options && options.start !== undefined) ? options.start : undefined;
  let top = (options && options.top !== undefined) ? options.top : undefined;
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (start !== null && start !== undefined && typeof start.valueOf() !== 'string') {
      throw new Error('start must be of type string.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (top !== null && top !== undefined) {
      if (top > 1000)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMaximum": 1000');
      }
      if (top < 1)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMinimum": 1');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  let queryParameters = [];
  if (start !== null && start !== undefined) {
    queryParameters.push('start=' + encodeURIComponent(start));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('top=' + encodeURIComponent(top.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PersonResultElementType',
                  type: {
                    name: 'Composite',
                    className: 'PersonResult'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Delete an existing person from a person group. Persisted face images of the
 * person will also be deleted.
 *
 * @param {string} personGroupId Specifying the person group containing the
 * person.
 *
 * @param {string} personId The target personId to delete.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(personGroupId, personId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieve a person's information, including registered persisted faces, name
 * and userData.
 *
 * @param {string} personGroupId Specifying the person group containing the
 * target person.
 *
 * @param {string} personId Specifying the target person.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PersonResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(personGroupId, personId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PersonResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Update name or userData of a person.
 *
 * @param {string} personGroupId Specifying the person group containing the
 * target person.
 *
 * @param {string} personId personId of the target person.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.name] Display name of the target person. The
 * maximum length is 128.
 *
 * @param {string} [options.userData] Optional fields for user-provided data
 * attached to a person. Size limit is 16KB.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(personGroupId, personId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let name = (options && options.name !== undefined) ? options.name : undefined;
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
    if (name !== null && name !== undefined && typeof name.valueOf() !== 'string') {
      throw new Error('name must be of type string.');
    }
    if (name !== null && name !== undefined) {
      if (name.length > 128)
      {
        throw new Error('"name" should satisfy the constraint - "MaxLength": 128');
      }
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (userData !== null && userData !== undefined) {
      if (userData.length > 16384)
      {
        throw new Error('"userData" should satisfy the constraint - "MaxLength": 16384');
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((name !== null && name !== undefined) || (userData !== null && userData !== undefined)) {
    body = new client.models['CreatePersonRequest']();
    body.name = name;
    body.userData = userData;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['CreatePersonRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Delete a face from a person. Relative image for the persisted face will also
 * be deleted.
 *
 * @param {string} personGroupId Specifying the person group containing the
 * target person.
 *
 * @param {string} personId Specifying the person that the target persisted
 * face belong to.
 *
 * @param {string} persistedFaceId The persisted face to remove.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteFace(personGroupId, personId, persistedFaceId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
    if (persistedFaceId === null || persistedFaceId === undefined || typeof persistedFaceId.valueOf() !== 'string') {
      throw new Error('persistedFaceId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));
  requestUrl = requestUrl.replace('{persistedFaceId}', encodeURIComponent(persistedFaceId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieve information about a persisted face (specified by persistedFaceId,
 * personId and its belonging personGroupId).
 *
 * @param {string} personGroupId Specifying the person group containing the
 * target person.
 *
 * @param {string} personId Specifying the target person that the face belongs
 * to.
 *
 * @param {string} persistedFaceId The persistedFaceId of the target persisted
 * face of the person.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PersonFaceResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFace(personGroupId, personId, persistedFaceId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
    if (persistedFaceId === null || persistedFaceId === undefined || typeof persistedFaceId.valueOf() !== 'string') {
      throw new Error('persistedFaceId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));
  requestUrl = requestUrl.replace('{persistedFaceId}', encodeURIComponent(persistedFaceId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PersonFaceResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Update a person persisted face's userData field.
 *
 * @param {string} personGroupId Specifying the person group containing the
 * target person.
 *
 * @param {string} personId personId of the target person.
 *
 * @param {string} persistedFaceId persistedFaceId of target face, which is
 * persisted and will not expire.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.userData] User-provided data attached to the face.
 * The size limit is 1KB
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateFace(personGroupId, personId, persistedFaceId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
    if (persistedFaceId === null || persistedFaceId === undefined || typeof persistedFaceId.valueOf() !== 'string') {
      throw new Error('persistedFaceId cannot be null or undefined and it must be of type string.');
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (userData !== null && userData !== undefined) {
      if (userData.length > 1024)
      {
        throw new Error('"userData" should satisfy the constraint - "MaxLength": 1024');
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if (userData !== null && userData !== undefined) {
    body = new client.models['UpdatePersonFaceDataRequest']();
    body.userData = userData;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));
  requestUrl = requestUrl.replace('{persistedFaceId}', encodeURIComponent(persistedFaceId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['UpdatePersonFaceDataRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Add a representative face to a person for identification. The input face is
 * specified as an image with a targetFace rectangle.
 *
 * @param {string} personGroupId Specifying the person group containing the
 * target person.
 *
 * @param {string} personId Target person that the face is added to.
 *
 * @param {string} url
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.userData] User-specified data about the target face
 * to add for any purpose. The maximum length is 1KB.
 *
 * @param {array} [options.targetFace] A face rectangle to specify the target
 * face to be added to a person in the format of
 * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
 * there is more than one face in the image, targetFace is required to specify
 * which face to add. No targetFace means there is only one face detected in
 * the entire image.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PersistedFaceResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addPersonFace(personGroupId, personId, url, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  let targetFace = (options && options.targetFace !== undefined) ? options.targetFace : undefined;
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (Array.isArray(targetFace)) {
      for (let i = 0; i < targetFace.length; i++) {
        if (targetFace[i] !== null && targetFace[i] !== undefined && typeof targetFace[i] !== 'number') {
          throw new Error('targetFace[i] must be of type number.');
        }
      }
    }
    if (url === null || url === undefined || typeof url.valueOf() !== 'string') {
      throw new Error('url cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let imageUrl;
  if (url !== null && url !== undefined) {
    imageUrl = new client.models['ImageUrl']();
    imageUrl.url = url;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}/persistedFaces';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));
  let queryParameters = [];
  if (userData !== null && userData !== undefined) {
    queryParameters.push('userData=' + encodeURIComponent(userData));
  }
  if (targetFace !== null && targetFace !== undefined) {
    queryParameters.push('targetFace=' + encodeURIComponent(targetFace.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['ImageUrl']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PersistedFaceResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Add a representative face to a person for identification. The input face is
 * specified as an image with a targetFace rectangle.
 *
 * @param {string} personGroupId Specifying the person group containing the
 * target person.
 *
 * @param {string} personId Target person that the face is added to.
 *
 * @param {object} image An image stream.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.userData] User-specified data about the target face
 * to add for any purpose. The maximum length is 1KB.
 *
 * @param {array} [options.targetFace] A face rectangle to specify the target
 * face to be added to a person in the format of
 * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
 * there is more than one face in the image, targetFace is required to specify
 * which face to add. No targetFace means there is only one face detected in
 * the entire image.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PersistedFaceResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addPersonFaceFromStream(personGroupId, personId, image, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  let targetFace = (options && options.targetFace !== undefined) ? options.targetFace : undefined;
  // Validate
  try {
    if (this.client.azureRegion) {
      let allowedValues = [ 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth' ];
      let enumValue = this.client.azureRegion;
      if (!allowedValues.some( function(item) { return item === enumValue; })) {
        throw new Error(enumValue + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('this.client.azureRegion cannot be null or undefined.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string') {
      throw new Error('personId cannot be null or undefined and it must be of type string.');
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (Array.isArray(targetFace)) {
      for (let i = 0; i < targetFace.length; i++) {
        if (targetFace[i] !== null && targetFace[i] !== undefined && typeof targetFace[i] !== 'number') {
          throw new Error('targetFace[i] must be of type number.');
        }
      }
    }
    if (image === null || image === undefined) {
      throw new Error('image cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/persons/{personId}/persistedFaces';
  requestUrl = requestUrl.replace('{AzureRegion}', this.client.azureRegion);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));
  requestUrl = requestUrl.replace('{personId}', encodeURIComponent(personId));
  let queryParameters = [];
  if (userData !== null && userData !== undefined) {
    queryParameters.push('userData=' + encodeURIComponent(userData));
  }
  if (targetFace !== null && targetFace !== undefined) {
    queryParameters.push('targetFace=' + encodeURIComponent(targetFace.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/octet-stream';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = image;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PersistedFaceResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Person. */
class Person {
  /**
   * Create a Person.
   * @param {FaceAPIClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._create = _create;
    this._list = _list;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._update = _update;
    this._deleteFace = _deleteFace;
    this._getFace = _getFace;
    this._updateFace = _updateFace;
    this._addPersonFace = _addPersonFace;
    this._addPersonFaceFromStream = _addPersonFaceFromStream;
  }

  /**
   * Create a new person in a specified person group.
   *
   * @param {string} personGroupId Specifying the target person group to create
   * the person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] Display name of the target person. The
   * maximum length is 128.
   *
   * @param {string} [options.userData] Optional fields for user-provided data
   * attached to a person. Size limit is 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CreatePersonResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create a new person in a specified person group.
   *
   * @param {string} personGroupId Specifying the target person group to create
   * the person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] Display name of the target person. The
   * maximum length is 128.
   *
   * @param {string} [options.userData] Optional fields for user-provided data
   * attached to a person. Size limit is 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CreatePersonResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CreatePersonResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(personGroupId, options, optionalCallback);
    }
  }

  /**
   * List all persons in a person group, and retrieve person information
   * (including personId, name, userData and persistedFaceIds of registered faces
   * of the person).
   *
   * @param {string} personGroupId personGroupId of the target person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.start] Starting person id to return (used to list a
   * range of persons).
   *
   * @param {number} [options.top] Number of persons to return starting with the
   * person id indicated by the 'start' parameter.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List all persons in a person group, and retrieve person information
   * (including personId, name, userData and persistedFaceIds of registered faces
   * of the person).
   *
   * @param {string} personGroupId personGroupId of the target person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.start] Starting person id to return (used to list a
   * range of persons).
   *
   * @param {number} [options.top] Number of persons to return starting with the
   * person id indicated by the 'start' parameter.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(personGroupId, options, optionalCallback);
    }
  }

  /**
   * Delete an existing person from a person group. Persisted face images of the
   * person will also be deleted.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * person.
   *
   * @param {string} personId The target personId to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(personGroupId, personId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(personGroupId, personId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete an existing person from a person group. Persisted face images of the
   * person will also be deleted.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * person.
   *
   * @param {string} personId The target personId to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(personGroupId, personId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(personGroupId, personId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(personGroupId, personId, options, optionalCallback);
    }
  }

  /**
   * Retrieve a person's information, including registered persisted faces, name
   * and userData.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Specifying the target person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PersonResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(personGroupId, personId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(personGroupId, personId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieve a person's information, including registered persisted faces, name
   * and userData.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Specifying the target person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PersonResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PersonResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(personGroupId, personId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(personGroupId, personId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(personGroupId, personId, options, optionalCallback);
    }
  }

  /**
   * Update name or userData of a person.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId personId of the target person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] Display name of the target person. The
   * maximum length is 128.
   *
   * @param {string} [options.userData] Optional fields for user-provided data
   * attached to a person. Size limit is 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(personGroupId, personId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(personGroupId, personId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update name or userData of a person.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId personId of the target person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] Display name of the target person. The
   * maximum length is 128.
   *
   * @param {string} [options.userData] Optional fields for user-provided data
   * attached to a person. Size limit is 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(personGroupId, personId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(personGroupId, personId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(personGroupId, personId, options, optionalCallback);
    }
  }

  /**
   * Delete a face from a person. Relative image for the persisted face will also
   * be deleted.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Specifying the person that the target persisted
   * face belong to.
   *
   * @param {string} persistedFaceId The persisted face to remove.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteFaceWithHttpOperationResponse(personGroupId, personId, persistedFaceId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteFace(personGroupId, personId, persistedFaceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete a face from a person. Relative image for the persisted face will also
   * be deleted.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Specifying the person that the target persisted
   * face belong to.
   *
   * @param {string} persistedFaceId The persisted face to remove.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteFace(personGroupId, personId, persistedFaceId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteFace(personGroupId, personId, persistedFaceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteFace(personGroupId, personId, persistedFaceId, options, optionalCallback);
    }
  }

  /**
   * Retrieve information about a persisted face (specified by persistedFaceId,
   * personId and its belonging personGroupId).
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Specifying the target person that the face belongs
   * to.
   *
   * @param {string} persistedFaceId The persistedFaceId of the target persisted
   * face of the person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PersonFaceResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFaceWithHttpOperationResponse(personGroupId, personId, persistedFaceId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFace(personGroupId, personId, persistedFaceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieve information about a persisted face (specified by persistedFaceId,
   * personId and its belonging personGroupId).
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Specifying the target person that the face belongs
   * to.
   *
   * @param {string} persistedFaceId The persistedFaceId of the target persisted
   * face of the person.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PersonFaceResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PersonFaceResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFace(personGroupId, personId, persistedFaceId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFace(personGroupId, personId, persistedFaceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFace(personGroupId, personId, persistedFaceId, options, optionalCallback);
    }
  }

  /**
   * Update a person persisted face's userData field.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId personId of the target person.
   *
   * @param {string} persistedFaceId persistedFaceId of target face, which is
   * persisted and will not expire.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User-provided data attached to the face.
   * The size limit is 1KB
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateFaceWithHttpOperationResponse(personGroupId, personId, persistedFaceId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateFace(personGroupId, personId, persistedFaceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update a person persisted face's userData field.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId personId of the target person.
   *
   * @param {string} persistedFaceId persistedFaceId of target face, which is
   * persisted and will not expire.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User-provided data attached to the face.
   * The size limit is 1KB
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateFace(personGroupId, personId, persistedFaceId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateFace(personGroupId, personId, persistedFaceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateFace(personGroupId, personId, persistedFaceId, options, optionalCallback);
    }
  }

  /**
   * Add a representative face to a person for identification. The input face is
   * specified as an image with a targetFace rectangle.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Target person that the face is added to.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User-specified data about the target face
   * to add for any purpose. The maximum length is 1KB.
   *
   * @param {array} [options.targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to specify
   * which face to add. No targetFace means there is only one face detected in
   * the entire image.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PersistedFaceResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addPersonFaceWithHttpOperationResponse(personGroupId, personId, url, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addPersonFace(personGroupId, personId, url, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Add a representative face to a person for identification. The input face is
   * specified as an image with a targetFace rectangle.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Target person that the face is added to.
   *
   * @param {string} url
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User-specified data about the target face
   * to add for any purpose. The maximum length is 1KB.
   *
   * @param {array} [options.targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to specify
   * which face to add. No targetFace means there is only one face detected in
   * the entire image.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PersistedFaceResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PersistedFaceResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addPersonFace(personGroupId, personId, url, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addPersonFace(personGroupId, personId, url, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addPersonFace(personGroupId, personId, url, options, optionalCallback);
    }
  }

  /**
   * Add a representative face to a person for identification. The input face is
   * specified as an image with a targetFace rectangle.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Target person that the face is added to.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User-specified data about the target face
   * to add for any purpose. The maximum length is 1KB.
   *
   * @param {array} [options.targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to specify
   * which face to add. No targetFace means there is only one face detected in
   * the entire image.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PersistedFaceResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addPersonFaceFromStreamWithHttpOperationResponse(personGroupId, personId, image, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addPersonFaceFromStream(personGroupId, personId, image, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Add a representative face to a person for identification. The input face is
   * specified as an image with a targetFace rectangle.
   *
   * @param {string} personGroupId Specifying the person group containing the
   * target person.
   *
   * @param {string} personId Target person that the face is added to.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User-specified data about the target face
   * to add for any purpose. The maximum length is 1KB.
   *
   * @param {array} [options.targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to specify
   * which face to add. No targetFace means there is only one face detected in
   * the entire image.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PersistedFaceResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PersistedFaceResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addPersonFaceFromStream(personGroupId, personId, image, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addPersonFaceFromStream(personGroupId, personId, image, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addPersonFaceFromStream(personGroupId, personId, image, options, optionalCallback);
    }
  }

}

module.exports = Person;
