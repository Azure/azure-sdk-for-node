/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * Face
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the FaceAPIClient.
 */
export interface Face {


    /**
     * Given query face's faceId, find the similar-looking faces from a faceId
     * array or a faceListId.
     *
     * @param {string} faceId FaceId of the query face. User needs to call Face -
     * Detect first to get a valid faceId. Note that this faceId is not persisted
     * and will expire 24 hours after the detection call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.faceListId] An existing user-specified unique
     * candidate face list, created in Face List - Create a Face List. Face list
     * contains a set of persistedFaceIds which are persisted and will never
     * expire. Parameter faceListId and faceIds should not be provided at the same
     * time
     *
     * @param {array} [options.faceIds] An array of candidate faceIds. All of them
     * are created by Face - Detect and the faceIds will expire 24 hours after the
     * detection call.
     *
     * @param {number} [options.maxNumOfCandidatesReturned] The number of top
     * similar faces returned. The valid range is [1, 1000].
     *
     * @param {string} [options.mode] Similar face searching mode. It can be
     * "matchPerson" or "matchFace". Possible values include: 'matchPerson',
     * 'matchFace'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    findSimilarWithHttpOperationResponse(faceId: string, options?: { faceListId? : string, faceIds? : string[], maxNumOfCandidatesReturned? : number, mode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SimilarFaceResult[]>>;

    /**
     * Given query face's faceId, find the similar-looking faces from a faceId
     * array or a faceListId.
     *
     * @param {string} faceId FaceId of the query face. User needs to call Face -
     * Detect first to get a valid faceId. Note that this faceId is not persisted
     * and will expire 24 hours after the detection call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.faceListId] An existing user-specified unique
     * candidate face list, created in Face List - Create a Face List. Face list
     * contains a set of persistedFaceIds which are persisted and will never
     * expire. Parameter faceListId and faceIds should not be provided at the same
     * time
     *
     * @param {array} [options.faceIds] An array of candidate faceIds. All of them
     * are created by Face - Detect and the faceIds will expire 24 hours after the
     * detection call.
     *
     * @param {number} [options.maxNumOfCandidatesReturned] The number of top
     * similar faces returned. The valid range is [1, 1000].
     *
     * @param {string} [options.mode] Similar face searching mode. It can be
     * "matchPerson" or "matchFace". Possible values include: 'matchPerson',
     * 'matchFace'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    findSimilar(faceId: string, options?: { faceListId? : string, faceIds? : string[], maxNumOfCandidatesReturned? : number, mode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SimilarFaceResult[]>;
    findSimilar(faceId: string, callback: ServiceCallback<models.SimilarFaceResult[]>): void;
    findSimilar(faceId: string, options: { faceListId? : string, faceIds? : string[], maxNumOfCandidatesReturned? : number, mode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SimilarFaceResult[]>): void;


    /**
     * Divide candidate faces into groups based on face similarity.
     *
     * @param {array} faceIds Array of candidate faceId created by Face - Detect.
     * The maximum is 1000 faces
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    groupWithHttpOperationResponse(faceIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupResponse>>;

    /**
     * Divide candidate faces into groups based on face similarity.
     *
     * @param {array} faceIds Array of candidate faceId created by Face - Detect.
     * The maximum is 1000 faces
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    group(faceIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupResponse>;
    group(faceIds: string[], callback: ServiceCallback<models.GroupResponse>): void;
    group(faceIds: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupResponse>): void;


    /**
     * Identify unknown faces from a person group.
     *
     * @param {string} personGroupId personGroupId of the target person group,
     * created by PersonGroups.Create
     *
     * @param {array} faceIds Array of candidate faceId created by Face - Detect.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.maxNumOfCandidatesReturned] The number of top
     * similar faces returned.
     *
     * @param {number} [options.confidenceThreshold]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    identifyWithHttpOperationResponse(personGroupId: string, faceIds: string[], options?: { maxNumOfCandidatesReturned? : number, confidenceThreshold? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentifyResultItem[]>>;

    /**
     * Identify unknown faces from a person group.
     *
     * @param {string} personGroupId personGroupId of the target person group,
     * created by PersonGroups.Create
     *
     * @param {array} faceIds Array of candidate faceId created by Face - Detect.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.maxNumOfCandidatesReturned] The number of top
     * similar faces returned.
     *
     * @param {number} [options.confidenceThreshold]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    identify(personGroupId: string, faceIds: string[], options?: { maxNumOfCandidatesReturned? : number, confidenceThreshold? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentifyResultItem[]>;
    identify(personGroupId: string, faceIds: string[], callback: ServiceCallback<models.IdentifyResultItem[]>): void;
    identify(personGroupId: string, faceIds: string[], options: { maxNumOfCandidatesReturned? : number, confidenceThreshold? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentifyResultItem[]>): void;


    /**
     * Verify whether two faces belong to a same person or whether one face belongs
     * to a person.
     *
     * @param {string} faceId1 faceId of the first face, comes from Face - Detect
     *
     * @param {string} faceId2 faceId of the second face, comes from Face - Detect
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VerifyResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    verifyWithHttpOperationResponse(faceId1: string, faceId2: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VerifyResult>>;

    /**
     * Verify whether two faces belong to a same person or whether one face belongs
     * to a person.
     *
     * @param {string} faceId1 faceId of the first face, comes from Face - Detect
     *
     * @param {string} faceId2 faceId of the second face, comes from Face - Detect
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VerifyResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VerifyResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VerifyResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    verify(faceId1: string, faceId2: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VerifyResult>;
    verify(faceId1: string, faceId2: string, callback: ServiceCallback<models.VerifyResult>): void;
    verify(faceId1: string, faceId2: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VerifyResult>): void;


    /**
     * Detect human faces in an image and returns face locations, and optionally
     * with faceIds, landmarks, and attributes.
     *
     * @param {string} url
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.returnFaceId] A value indicating whether the
     * operation should return faceIds of detected faces.
     *
     * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
     * the operation should return landmarks of the detected faces.
     *
     * @param {array} [options.returnFaceAttributes] Analyze and return the one or
     * more specified face attributes in the comma-separated string like
     * "returnFaceAttributes=age,gender". Supported face attributes include age,
     * gender, headPose, smile, facialHair, glasses and emotion. Note that each
     * face attribute analysis has additional computational and time cost.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detectWithHttpOperationResponse(url: string, options?: { returnFaceId? : boolean, returnFaceLandmarks? : boolean, returnFaceAttributes? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectedFace[]>>;

    /**
     * Detect human faces in an image and returns face locations, and optionally
     * with faceIds, landmarks, and attributes.
     *
     * @param {string} url
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.returnFaceId] A value indicating whether the
     * operation should return faceIds of detected faces.
     *
     * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
     * the operation should return landmarks of the detected faces.
     *
     * @param {array} [options.returnFaceAttributes] Analyze and return the one or
     * more specified face attributes in the comma-separated string like
     * "returnFaceAttributes=age,gender". Supported face attributes include age,
     * gender, headPose, smile, facialHair, glasses and emotion. Note that each
     * face attribute analysis has additional computational and time cost.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detect(url: string, options?: { returnFaceId? : boolean, returnFaceLandmarks? : boolean, returnFaceAttributes? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectedFace[]>;
    detect(url: string, callback: ServiceCallback<models.DetectedFace[]>): void;
    detect(url: string, options: { returnFaceId? : boolean, returnFaceLandmarks? : boolean, returnFaceAttributes? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectedFace[]>): void;


    /**
     * Verify whether two faces belong to a same person. Compares a face Id with a
     * Person Id
     *
     * @param {string} faceId faceId the face, comes from Face - Detect
     *
     * @param {string} personId Specify a certain person in a person group.
     * personId is created in Persons.Create.
     *
     * @param {string} personGroupId Using existing personGroupId and personId for
     * fast loading a specified person. personGroupId is created in Person
     * Groups.Create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VerifyResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    verifyWithPersonGroupWithHttpOperationResponse(faceId: string, personId: string, personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VerifyResult>>;

    /**
     * Verify whether two faces belong to a same person. Compares a face Id with a
     * Person Id
     *
     * @param {string} faceId faceId the face, comes from Face - Detect
     *
     * @param {string} personId Specify a certain person in a person group.
     * personId is created in Persons.Create.
     *
     * @param {string} personGroupId Using existing personGroupId and personId for
     * fast loading a specified person. personGroupId is created in Person
     * Groups.Create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VerifyResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VerifyResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VerifyResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VerifyResult>;
    verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, callback: ServiceCallback<models.VerifyResult>): void;
    verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VerifyResult>): void;


    /**
     * Detect human faces in an image and returns face locations, and optionally
     * with faceIds, landmarks, and attributes.
     *
     * @param {object} image An image stream.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.returnFaceId] A value indicating whether the
     * operation should return faceIds of detected faces.
     *
     * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
     * the operation should return landmarks of the detected faces.
     *
     * @param {array} [options.returnFaceAttributes] Analyze and return the one or
     * more specified face attributes in the comma-separated string like
     * "returnFaceAttributes=age,gender". Supported face attributes include age,
     * gender, headPose, smile, facialHair, glasses and emotion. Note that each
     * face attribute analysis has additional computational and time cost.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detectInStreamWithHttpOperationResponse(image: stream.Readable, options?: { returnFaceId? : boolean, returnFaceLandmarks? : boolean, returnFaceAttributes? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectedFace[]>>;

    /**
     * Detect human faces in an image and returns face locations, and optionally
     * with faceIds, landmarks, and attributes.
     *
     * @param {object} image An image stream.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.returnFaceId] A value indicating whether the
     * operation should return faceIds of detected faces.
     *
     * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
     * the operation should return landmarks of the detected faces.
     *
     * @param {array} [options.returnFaceAttributes] Analyze and return the one or
     * more specified face attributes in the comma-separated string like
     * "returnFaceAttributes=age,gender". Supported face attributes include age,
     * gender, headPose, smile, facialHair, glasses and emotion. Note that each
     * face attribute analysis has additional computational and time cost.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detectInStream(image: stream.Readable, options?: { returnFaceId? : boolean, returnFaceLandmarks? : boolean, returnFaceAttributes? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectedFace[]>;
    detectInStream(image: stream.Readable, callback: ServiceCallback<models.DetectedFace[]>): void;
    detectInStream(image: stream.Readable, options: { returnFaceId? : boolean, returnFaceLandmarks? : boolean, returnFaceAttributes? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectedFace[]>): void;
}

/**
 * @class
 * Person
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the FaceAPIClient.
 */
export interface Person {


    /**
     * Create a new person in a specified person group.
     *
     * @param {string} personGroupId Specifying the target person group to create
     * the person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Display name of the target person. The
     * maximum length is 128.
     *
     * @param {string} [options.userData] Optional fields for user-provided data
     * attached to a person. Size limit is 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CreatePersonResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(personGroupId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CreatePersonResult>>;

    /**
     * Create a new person in a specified person group.
     *
     * @param {string} personGroupId Specifying the target person group to create
     * the person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Display name of the target person. The
     * maximum length is 128.
     *
     * @param {string} [options.userData] Optional fields for user-provided data
     * attached to a person. Size limit is 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CreatePersonResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CreatePersonResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CreatePersonResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(personGroupId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CreatePersonResult>;
    create(personGroupId: string, callback: ServiceCallback<models.CreatePersonResult>): void;
    create(personGroupId: string, options: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CreatePersonResult>): void;


    /**
     * List all persons in a person group, and retrieve person information
     * (including personId, name, userData and persistedFaceIds of registered faces
     * of the person).
     *
     * @param {string} personGroupId personGroupId of the target person group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.start] Starting person id to return (used to list a
     * range of persons).
     *
     * @param {number} [options.top] Number of persons to return starting with the
     * person id indicated by the 'start' parameter.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(personGroupId: string, options?: { start? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersonResult[]>>;

    /**
     * List all persons in a person group, and retrieve person information
     * (including personId, name, userData and persistedFaceIds of registered faces
     * of the person).
     *
     * @param {string} personGroupId personGroupId of the target person group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.start] Starting person id to return (used to list a
     * range of persons).
     *
     * @param {number} [options.top] Number of persons to return starting with the
     * person id indicated by the 'start' parameter.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(personGroupId: string, options?: { start? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.PersonResult[]>;
    list(personGroupId: string, callback: ServiceCallback<models.PersonResult[]>): void;
    list(personGroupId: string, options: { start? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersonResult[]>): void;


    /**
     * Delete an existing person from a person group. Persisted face images of the
     * person will also be deleted.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * person.
     *
     * @param {string} personId The target personId to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(personGroupId: string, personId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an existing person from a person group. Persisted face images of the
     * person will also be deleted.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * person.
     *
     * @param {string} personId The target personId to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(personGroupId: string, personId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(personGroupId: string, personId: string, callback: ServiceCallback<void>): void;
    deleteMethod(personGroupId: string, personId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieve a person's information, including registered persisted faces, name
     * and userData.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Specifying the target person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PersonResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(personGroupId: string, personId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersonResult>>;

    /**
     * Retrieve a person's information, including registered persisted faces, name
     * and userData.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Specifying the target person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PersonResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PersonResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PersonResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(personGroupId: string, personId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PersonResult>;
    get(personGroupId: string, personId: string, callback: ServiceCallback<models.PersonResult>): void;
    get(personGroupId: string, personId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersonResult>): void;


    /**
     * Update name or userData of a person.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId personId of the target person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Display name of the target person. The
     * maximum length is 128.
     *
     * @param {string} [options.userData] Optional fields for user-provided data
     * attached to a person. Size limit is 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(personGroupId: string, personId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update name or userData of a person.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId personId of the target person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Display name of the target person. The
     * maximum length is 128.
     *
     * @param {string} [options.userData] Optional fields for user-provided data
     * attached to a person. Size limit is 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(personGroupId: string, personId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(personGroupId: string, personId: string, callback: ServiceCallback<void>): void;
    update(personGroupId: string, personId: string, options: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete a face from a person. Relative image for the persisted face will also
     * be deleted.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Specifying the person that the target persisted
     * face belong to.
     *
     * @param {string} persistedFaceId The persisted face to remove.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteFaceWithHttpOperationResponse(personGroupId: string, personId: string, persistedFaceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a face from a person. Relative image for the persisted face will also
     * be deleted.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Specifying the person that the target persisted
     * face belong to.
     *
     * @param {string} persistedFaceId The persisted face to remove.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteFace(personGroupId: string, personId: string, persistedFaceId: string, callback: ServiceCallback<void>): void;
    deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieve information about a persisted face (specified by persistedFaceId,
     * personId and its belonging personGroupId).
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Specifying the target person that the face belongs
     * to.
     *
     * @param {string} persistedFaceId The persistedFaceId of the target persisted
     * face of the person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PersonFaceResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFaceWithHttpOperationResponse(personGroupId: string, personId: string, persistedFaceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersonFaceResult>>;

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId,
     * personId and its belonging personGroupId).
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Specifying the target person that the face belongs
     * to.
     *
     * @param {string} persistedFaceId The persistedFaceId of the target persisted
     * face of the person.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PersonFaceResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PersonFaceResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PersonFaceResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getFace(personGroupId: string, personId: string, persistedFaceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PersonFaceResult>;
    getFace(personGroupId: string, personId: string, persistedFaceId: string, callback: ServiceCallback<models.PersonFaceResult>): void;
    getFace(personGroupId: string, personId: string, persistedFaceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersonFaceResult>): void;


    /**
     * Update a person persisted face's userData field.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId personId of the target person.
     *
     * @param {string} persistedFaceId persistedFaceId of target face, which is
     * persisted and will not expire.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-provided data attached to the face.
     * The size limit is 1KB
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateFaceWithHttpOperationResponse(personGroupId: string, personId: string, persistedFaceId: string, options?: { userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update a person persisted face's userData field.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId personId of the target person.
     *
     * @param {string} persistedFaceId persistedFaceId of target face, which is
     * persisted and will not expire.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-provided data attached to the face.
     * The size limit is 1KB
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateFace(personGroupId: string, personId: string, persistedFaceId: string, options?: { userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateFace(personGroupId: string, personId: string, persistedFaceId: string, callback: ServiceCallback<void>): void;
    updateFace(personGroupId: string, personId: string, persistedFaceId: string, options: { userData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Add a representative face to a person for identification. The input face is
     * specified as an image with a targetFace rectangle.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Target person that the face is added to.
     *
     * @param {string} url
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the target face
     * to add for any purpose. The maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PersistedFaceResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPersonFaceWithHttpOperationResponse(personGroupId: string, personId: string, url: string, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersistedFaceResult>>;

    /**
     * Add a representative face to a person for identification. The input face is
     * specified as an image with a targetFace rectangle.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Target person that the face is added to.
     *
     * @param {string} url
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the target face
     * to add for any purpose. The maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PersistedFaceResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PersistedFaceResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PersistedFaceResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addPersonFace(personGroupId: string, personId: string, url: string, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<models.PersistedFaceResult>;
    addPersonFace(personGroupId: string, personId: string, url: string, callback: ServiceCallback<models.PersistedFaceResult>): void;
    addPersonFace(personGroupId: string, personId: string, url: string, options: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersistedFaceResult>): void;


    /**
     * Add a representative face to a person for identification. The input face is
     * specified as an image with a targetFace rectangle.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Target person that the face is added to.
     *
     * @param {object} image An image stream.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the target face
     * to add for any purpose. The maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PersistedFaceResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPersonFaceFromStreamWithHttpOperationResponse(personGroupId: string, personId: string, image: stream.Readable, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersistedFaceResult>>;

    /**
     * Add a representative face to a person for identification. The input face is
     * specified as an image with a targetFace rectangle.
     *
     * @param {string} personGroupId Specifying the person group containing the
     * target person.
     *
     * @param {string} personId Target person that the face is added to.
     *
     * @param {object} image An image stream.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the target face
     * to add for any purpose. The maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PersistedFaceResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PersistedFaceResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PersistedFaceResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addPersonFaceFromStream(personGroupId: string, personId: string, image: stream.Readable, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<models.PersistedFaceResult>;
    addPersonFaceFromStream(personGroupId: string, personId: string, image: stream.Readable, callback: ServiceCallback<models.PersistedFaceResult>): void;
    addPersonFaceFromStream(personGroupId: string, personId: string, image: stream.Readable, options: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersistedFaceResult>): void;
}

/**
 * @class
 * PersonGroup
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the FaceAPIClient.
 */
export interface PersonGroup {


    /**
     * Create a new person group with specified personGroupId, name and
     * user-provided userData.
     *
     * @param {string} personGroupId User-provided personGroupId as a string.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(personGroupId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Create a new person group with specified personGroupId, name and
     * user-provided userData.
     *
     * @param {string} personGroupId User-provided personGroupId as a string.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(personGroupId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(personGroupId: string, callback: ServiceCallback<void>): void;
    create(personGroupId: string, options: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete an existing person group. Persisted face images of all people in the
     * person group will also be deleted.
     *
     * @param {string} personGroupId The personGroupId of the person group to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an existing person group. Persisted face images of all people in the
     * person group will also be deleted.
     *
     * @param {string} personGroupId The personGroupId of the person group to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(personGroupId: string, callback: ServiceCallback<void>): void;
    deleteMethod(personGroupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieve the information of a person group, including its name and userData.
     *
     * @param {string} personGroupId personGroupId of the target person group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PersonGroupResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersonGroupResult>>;

    /**
     * Retrieve the information of a person group, including its name and userData.
     *
     * @param {string} personGroupId personGroupId of the target person group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PersonGroupResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PersonGroupResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PersonGroupResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PersonGroupResult>;
    get(personGroupId: string, callback: ServiceCallback<models.PersonGroupResult>): void;
    get(personGroupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersonGroupResult>): void;


    /**
     * Update an existing person group's display name and userData. The properties
     * which does not appear in request body will not be updated.
     *
     * @param {string} personGroupId personGroupId of the person group to be
     * updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(personGroupId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update an existing person group's display name and userData. The properties
     * which does not appear in request body will not be updated.
     *
     * @param {string} personGroupId personGroupId of the person group to be
     * updated.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(personGroupId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(personGroupId: string, callback: ServiceCallback<void>): void;
    update(personGroupId: string, options: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param {string} personGroupId personGroupId of target person group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TrainingStatus1>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTrainingStatusWithHttpOperationResponse(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrainingStatus1>>;

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param {string} personGroupId personGroupId of target person group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TrainingStatus1} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TrainingStatus1} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TrainingStatus1} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTrainingStatus(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TrainingStatus1>;
    getTrainingStatus(personGroupId: string, callback: ServiceCallback<models.TrainingStatus1>): void;
    getTrainingStatus(personGroupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrainingStatus1>): void;


    /**
     * List person groups and their information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.start] List person groups from the least
     * personGroupId greater than the "start".
     *
     * @param {number} [options.top] The number of person groups to list.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { start? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersonGroupResult[]>>;

    /**
     * List person groups and their information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.start] List person groups from the least
     * personGroupId greater than the "start".
     *
     * @param {number} [options.top] The number of person groups to list.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { start? : string, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.PersonGroupResult[]>;
    list(callback: ServiceCallback<models.PersonGroupResult[]>): void;
    list(options: { start? : string, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersonGroupResult[]>): void;


    /**
     * Queue a person group training task, the training task may not be started
     * immediately.
     *
     * @param {string} personGroupId Target person group to be trained.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    trainWithHttpOperationResponse(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Queue a person group training task, the training task may not be started
     * immediately.
     *
     * @param {string} personGroupId Target person group to be trained.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    train(personGroupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    train(personGroupId: string, callback: ServiceCallback<void>): void;
    train(personGroupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * FaceList
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the FaceAPIClient.
 */
export interface FaceList {


    /**
     * Create an empty face list. Up to 64 face lists are allowed to exist in one
     * subscription.
     *
     * @param {string} faceListId Id referencing a particular face list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(faceListId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Create an empty face list. Up to 64 face lists are allowed to exist in one
     * subscription.
     *
     * @param {string} faceListId Id referencing a particular face list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(faceListId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(faceListId: string, callback: ServiceCallback<void>): void;
    create(faceListId: string, options: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieve a face list's information.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetFaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(faceListId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetFaceListResult>>;

    /**
     * Retrieve a face list's information.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetFaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetFaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetFaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(faceListId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetFaceListResult>;
    get(faceListId: string, callback: ServiceCallback<models.GetFaceListResult>): void;
    get(faceListId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetFaceListResult>): void;


    /**
     * Update information of a face list.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(faceListId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update information of a face list.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the face list, maximum length is 128.
     *
     * @param {string} [options.userData] Optional user defined data for the face
     * list. Length should not exceed 16KB.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(faceListId: string, options?: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(faceListId: string, callback: ServiceCallback<void>): void;
    update(faceListId: string, options: { name? : string, userData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete an existing face list according to faceListId. Persisted face images
     * in the face list will also be deleted.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(faceListId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an existing face list according to faceListId. Persisted face images
     * in the face list will also be deleted.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(faceListId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(faceListId: string, callback: ServiceCallback<void>): void;
    deleteMethod(faceListId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieve information about all existing face lists. Only faceListId, name
     * and userData will be returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetFaceListResult[]>>;

    /**
     * Retrieve information about all existing face lists. Only faceListId, name
     * and userData will be returned.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetFaceListResult[]>;
    list(callback: ServiceCallback<models.GetFaceListResult[]>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetFaceListResult[]>): void;


    /**
     * Delete an existing face from a face list (given by a persisitedFaceId and a
     * faceListId). Persisted image related to the face will also be deleted.
     *
     * @param {string} faceListId faceListId of an existing face list.
     *
     * @param {string} persistedFaceId persistedFaceId of an existing face.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteFaceWithHttpOperationResponse(faceListId: string, persistedFaceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an existing face from a face list (given by a persisitedFaceId and a
     * faceListId). Persisted image related to the face will also be deleted.
     *
     * @param {string} faceListId faceListId of an existing face list.
     *
     * @param {string} persistedFaceId persistedFaceId of an existing face.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteFace(faceListId: string, persistedFaceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteFace(faceListId: string, persistedFaceId: string, callback: ServiceCallback<void>): void;
    deleteFace(faceListId: string, persistedFaceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Add a face to a face list. The input face is specified as an image with a
     * targetFace rectangle. It returns a persistedFaceId representing the added
     * face, and persistedFaceId will not expire.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {string} url
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the face list
     * for any purpose. The  maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PersistedFaceResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addFaceWithHttpOperationResponse(faceListId: string, url: string, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersistedFaceResult>>;

    /**
     * Add a face to a face list. The input face is specified as an image with a
     * targetFace rectangle. It returns a persistedFaceId representing the added
     * face, and persistedFaceId will not expire.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {string} url
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the face list
     * for any purpose. The  maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PersistedFaceResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PersistedFaceResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PersistedFaceResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addFace(faceListId: string, url: string, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<models.PersistedFaceResult>;
    addFace(faceListId: string, url: string, callback: ServiceCallback<models.PersistedFaceResult>): void;
    addFace(faceListId: string, url: string, options: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersistedFaceResult>): void;


    /**
     * Add a face to a face list. The input face is specified as an image with a
     * targetFace rectangle. It returns a persistedFaceId representing the added
     * face, and persistedFaceId will not expire.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the face list
     * for any purpose. The  maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PersistedFaceResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addFaceFromStreamWithHttpOperationResponse(faceListId: string, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PersistedFaceResult>>;

    /**
     * Add a face to a face list. The input face is specified as an image with a
     * targetFace rectangle. It returns a persistedFaceId representing the added
     * face, and persistedFaceId will not expire.
     *
     * @param {string} faceListId Id referencing a Face List.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userData] User-specified data about the face list
     * for any purpose. The  maximum length is 1KB.
     *
     * @param {array} [options.targetFace] A face rectangle to specify the target
     * face to be added to a person in the format of
     * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
     * there is more than one face in the image, targetFace is required to specify
     * which face to add. No targetFace means there is only one face detected in
     * the entire image.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PersistedFaceResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PersistedFaceResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PersistedFaceResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addFaceFromStream(faceListId: string, options?: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<models.PersistedFaceResult>;
    addFaceFromStream(faceListId: string, callback: ServiceCallback<models.PersistedFaceResult>): void;
    addFaceFromStream(faceListId: string, options: { userData? : string, targetFace? : number[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PersistedFaceResult>): void;
}
