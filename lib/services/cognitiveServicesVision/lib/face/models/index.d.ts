/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Error body.
 *
 * @member {string} [code]
 * @member {string} [message]
 */
export interface ErrorModel {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the APIError class.
 * @constructor
 * Error information returned by the API
 *
 * @member {object} [error]
 * @member {string} [error.code]
 * @member {string} [error.message]
 */
export interface APIError {
  error?: ErrorModel;
}

/**
 * @class
 * Initializes a new instance of the FaceRectangle class.
 * @constructor
 * A rectangle within which a face can be found
 *
 * @member {number} width The width of the rectangle, in pixels.
 * @member {number} height The height of the rectangle, in pixels.
 * @member {number} left The distance from the left edge if the image to the
 * left edge of the rectangle, in pixels.
 * @member {number} top The distance from the top edge if the image to the top
 * edge of the rectangle, in pixels.
 */
export interface FaceRectangle {
  width: number;
  height: number;
  left: number;
  top: number;
}

/**
 * @class
 * Initializes a new instance of the Position class.
 * @constructor
 * Coordinates within an image
 *
 * @member {number} x The horizontal component, in pixels.
 * @member {number} y The vertical component, in pixels.
 */
export interface Position {
  x: number;
  y: number;
}

/**
 * @class
 * Initializes a new instance of the FaceLandmarks class.
 * @constructor
 * A collection of 27-point face landmarks pointing to the important positions
 * of face components.
 *
 * @member {object} [pupilLeft]
 * @member {number} [pupilLeft.x] The horizontal component, in pixels.
 * @member {number} [pupilLeft.y] The vertical component, in pixels.
 * @member {object} [pupilRight]
 * @member {number} [pupilRight.x] The horizontal component, in pixels.
 * @member {number} [pupilRight.y] The vertical component, in pixels.
 * @member {object} [noseTip]
 * @member {number} [noseTip.x] The horizontal component, in pixels.
 * @member {number} [noseTip.y] The vertical component, in pixels.
 * @member {object} [mouthLeft]
 * @member {number} [mouthLeft.x] The horizontal component, in pixels.
 * @member {number} [mouthLeft.y] The vertical component, in pixels.
 * @member {object} [mouthRight]
 * @member {number} [mouthRight.x] The horizontal component, in pixels.
 * @member {number} [mouthRight.y] The vertical component, in pixels.
 * @member {object} [eyebrowLeftOuter]
 * @member {number} [eyebrowLeftOuter.x] The horizontal component, in pixels.
 * @member {number} [eyebrowLeftOuter.y] The vertical component, in pixels.
 * @member {object} [eyebrowLeftInner]
 * @member {number} [eyebrowLeftInner.x] The horizontal component, in pixels.
 * @member {number} [eyebrowLeftInner.y] The vertical component, in pixels.
 * @member {object} [eyeLeftOuter]
 * @member {number} [eyeLeftOuter.x] The horizontal component, in pixels.
 * @member {number} [eyeLeftOuter.y] The vertical component, in pixels.
 * @member {object} [eyeLeftTop]
 * @member {number} [eyeLeftTop.x] The horizontal component, in pixels.
 * @member {number} [eyeLeftTop.y] The vertical component, in pixels.
 * @member {object} [eyeLeftBottom]
 * @member {number} [eyeLeftBottom.x] The horizontal component, in pixels.
 * @member {number} [eyeLeftBottom.y] The vertical component, in pixels.
 * @member {object} [eyeLeftInner]
 * @member {number} [eyeLeftInner.x] The horizontal component, in pixels.
 * @member {number} [eyeLeftInner.y] The vertical component, in pixels.
 * @member {object} [eyebrowRightInner]
 * @member {number} [eyebrowRightInner.x] The horizontal component, in pixels.
 * @member {number} [eyebrowRightInner.y] The vertical component, in pixels.
 * @member {object} [eyebrowRightOuter]
 * @member {number} [eyebrowRightOuter.x] The horizontal component, in pixels.
 * @member {number} [eyebrowRightOuter.y] The vertical component, in pixels.
 * @member {object} [eyeRightInner]
 * @member {number} [eyeRightInner.x] The horizontal component, in pixels.
 * @member {number} [eyeRightInner.y] The vertical component, in pixels.
 * @member {object} [eyeRightTop]
 * @member {number} [eyeRightTop.x] The horizontal component, in pixels.
 * @member {number} [eyeRightTop.y] The vertical component, in pixels.
 * @member {object} [eyeRightBottom]
 * @member {number} [eyeRightBottom.x] The horizontal component, in pixels.
 * @member {number} [eyeRightBottom.y] The vertical component, in pixels.
 * @member {object} [eyeRightOuter]
 * @member {number} [eyeRightOuter.x] The horizontal component, in pixels.
 * @member {number} [eyeRightOuter.y] The vertical component, in pixels.
 * @member {object} [noseRootLeft]
 * @member {number} [noseRootLeft.x] The horizontal component, in pixels.
 * @member {number} [noseRootLeft.y] The vertical component, in pixels.
 * @member {object} [noseRootRight]
 * @member {number} [noseRootRight.x] The horizontal component, in pixels.
 * @member {number} [noseRootRight.y] The vertical component, in pixels.
 * @member {object} [noseLeftAlarTop]
 * @member {number} [noseLeftAlarTop.x] The horizontal component, in pixels.
 * @member {number} [noseLeftAlarTop.y] The vertical component, in pixels.
 * @member {object} [noseRightAlarTop]
 * @member {number} [noseRightAlarTop.x] The horizontal component, in pixels.
 * @member {number} [noseRightAlarTop.y] The vertical component, in pixels.
 * @member {object} [noseLeftAlarOutTip]
 * @member {number} [noseLeftAlarOutTip.x] The horizontal component, in pixels.
 * @member {number} [noseLeftAlarOutTip.y] The vertical component, in pixels.
 * @member {object} [noseRightAlarOutTip]
 * @member {number} [noseRightAlarOutTip.x] The horizontal component, in
 * pixels.
 * @member {number} [noseRightAlarOutTip.y] The vertical component, in pixels.
 * @member {object} [upperLipTop]
 * @member {number} [upperLipTop.x] The horizontal component, in pixels.
 * @member {number} [upperLipTop.y] The vertical component, in pixels.
 * @member {object} [upperLipBottom]
 * @member {number} [upperLipBottom.x] The horizontal component, in pixels.
 * @member {number} [upperLipBottom.y] The vertical component, in pixels.
 * @member {object} [underLipTop]
 * @member {number} [underLipTop.x] The horizontal component, in pixels.
 * @member {number} [underLipTop.y] The vertical component, in pixels.
 * @member {object} [underLipBottom]
 * @member {number} [underLipBottom.x] The horizontal component, in pixels.
 * @member {number} [underLipBottom.y] The vertical component, in pixels.
 */
export interface FaceLandmarks {
  pupilLeft?: Position;
  pupilRight?: Position;
  noseTip?: Position;
  mouthLeft?: Position;
  mouthRight?: Position;
  eyebrowLeftOuter?: Position;
  eyebrowLeftInner?: Position;
  eyeLeftOuter?: Position;
  eyeLeftTop?: Position;
  eyeLeftBottom?: Position;
  eyeLeftInner?: Position;
  eyebrowRightInner?: Position;
  eyebrowRightOuter?: Position;
  eyeRightInner?: Position;
  eyeRightTop?: Position;
  eyeRightBottom?: Position;
  eyeRightOuter?: Position;
  noseRootLeft?: Position;
  noseRootRight?: Position;
  noseLeftAlarTop?: Position;
  noseRightAlarTop?: Position;
  noseLeftAlarOutTip?: Position;
  noseRightAlarOutTip?: Position;
  upperLipTop?: Position;
  upperLipBottom?: Position;
  underLipTop?: Position;
  underLipBottom?: Position;
}

/**
 * @class
 * Initializes a new instance of the DetectedFace class.
 * @constructor
 * Detected Face object.
 *
 * @member {string} [faceId]
 * @member {object} faceRectangle
 * @member {number} [faceRectangle.width] The width of the rectangle, in
 * pixels.
 * @member {number} [faceRectangle.height] The height of the rectangle, in
 * pixels.
 * @member {number} [faceRectangle.left] The distance from the left edge if the
 * image to the left edge of the rectangle, in pixels.
 * @member {number} [faceRectangle.top] The distance from the top edge if the
 * image to the top edge of the rectangle, in pixels.
 * @member {object} [faceLandmarks]
 * @member {object} [faceLandmarks.pupilLeft]
 * @member {number} [faceLandmarks.pupilLeft.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.pupilLeft.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.pupilRight]
 * @member {number} [faceLandmarks.pupilRight.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.pupilRight.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.noseTip]
 * @member {number} [faceLandmarks.noseTip.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.noseTip.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.mouthLeft]
 * @member {number} [faceLandmarks.mouthLeft.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.mouthLeft.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.mouthRight]
 * @member {number} [faceLandmarks.mouthRight.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.mouthRight.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyebrowLeftOuter]
 * @member {number} [faceLandmarks.eyebrowLeftOuter.x] The horizontal
 * component, in pixels.
 * @member {number} [faceLandmarks.eyebrowLeftOuter.y] The vertical component,
 * in pixels.
 * @member {object} [faceLandmarks.eyebrowLeftInner]
 * @member {number} [faceLandmarks.eyebrowLeftInner.x] The horizontal
 * component, in pixels.
 * @member {number} [faceLandmarks.eyebrowLeftInner.y] The vertical component,
 * in pixels.
 * @member {object} [faceLandmarks.eyeLeftOuter]
 * @member {number} [faceLandmarks.eyeLeftOuter.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.eyeLeftOuter.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyeLeftTop]
 * @member {number} [faceLandmarks.eyeLeftTop.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.eyeLeftTop.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyeLeftBottom]
 * @member {number} [faceLandmarks.eyeLeftBottom.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.eyeLeftBottom.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyeLeftInner]
 * @member {number} [faceLandmarks.eyeLeftInner.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.eyeLeftInner.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyebrowRightInner]
 * @member {number} [faceLandmarks.eyebrowRightInner.x] The horizontal
 * component, in pixels.
 * @member {number} [faceLandmarks.eyebrowRightInner.y] The vertical component,
 * in pixels.
 * @member {object} [faceLandmarks.eyebrowRightOuter]
 * @member {number} [faceLandmarks.eyebrowRightOuter.x] The horizontal
 * component, in pixels.
 * @member {number} [faceLandmarks.eyebrowRightOuter.y] The vertical component,
 * in pixels.
 * @member {object} [faceLandmarks.eyeRightInner]
 * @member {number} [faceLandmarks.eyeRightInner.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.eyeRightInner.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyeRightTop]
 * @member {number} [faceLandmarks.eyeRightTop.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.eyeRightTop.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyeRightBottom]
 * @member {number} [faceLandmarks.eyeRightBottom.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.eyeRightBottom.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.eyeRightOuter]
 * @member {number} [faceLandmarks.eyeRightOuter.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.eyeRightOuter.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.noseRootLeft]
 * @member {number} [faceLandmarks.noseRootLeft.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.noseRootLeft.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.noseRootRight]
 * @member {number} [faceLandmarks.noseRootRight.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.noseRootRight.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.noseLeftAlarTop]
 * @member {number} [faceLandmarks.noseLeftAlarTop.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.noseLeftAlarTop.y] The vertical component,
 * in pixels.
 * @member {object} [faceLandmarks.noseRightAlarTop]
 * @member {number} [faceLandmarks.noseRightAlarTop.x] The horizontal
 * component, in pixels.
 * @member {number} [faceLandmarks.noseRightAlarTop.y] The vertical component,
 * in pixels.
 * @member {object} [faceLandmarks.noseLeftAlarOutTip]
 * @member {number} [faceLandmarks.noseLeftAlarOutTip.x] The horizontal
 * component, in pixels.
 * @member {number} [faceLandmarks.noseLeftAlarOutTip.y] The vertical
 * component, in pixels.
 * @member {object} [faceLandmarks.noseRightAlarOutTip]
 * @member {number} [faceLandmarks.noseRightAlarOutTip.x] The horizontal
 * component, in pixels.
 * @member {number} [faceLandmarks.noseRightAlarOutTip.y] The vertical
 * component, in pixels.
 * @member {object} [faceLandmarks.upperLipTop]
 * @member {number} [faceLandmarks.upperLipTop.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.upperLipTop.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.upperLipBottom]
 * @member {number} [faceLandmarks.upperLipBottom.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.upperLipBottom.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.underLipTop]
 * @member {number} [faceLandmarks.underLipTop.x] The horizontal component, in
 * pixels.
 * @member {number} [faceLandmarks.underLipTop.y] The vertical component, in
 * pixels.
 * @member {object} [faceLandmarks.underLipBottom]
 * @member {number} [faceLandmarks.underLipBottom.x] The horizontal component,
 * in pixels.
 * @member {number} [faceLandmarks.underLipBottom.y] The vertical component, in
 * pixels.
 */
export interface DetectedFace {
  faceId?: string;
  faceRectangle: FaceRectangle;
  faceLandmarks?: FaceLandmarks;
}

/**
 * @class
 * Initializes a new instance of the FacialHairProperties class.
 * @constructor
 * Properties describing facial hair attributes.
 *
 * @member {number} [mustache]
 * @member {number} [beard]
 * @member {number} [sideburns]
 */
export interface FacialHairProperties {
  mustache?: number;
  beard?: number;
  sideburns?: number;
}

/**
 * @class
 * Initializes a new instance of the HeadPoseProperties class.
 * @constructor
 * Properties indicating head pose of the face.
 *
 * @member {number} [roll]
 * @member {number} [yaw]
 * @member {number} [pitch]
 */
export interface HeadPoseProperties {
  roll?: number;
  yaw?: number;
  pitch?: number;
}

/**
 * @class
 * Initializes a new instance of the EmotionProperties class.
 * @constructor
 * Properties describing facial emotion.
 *
 * @member {number} [anger]
 * @member {number} [contempt]
 * @member {number} [disgust]
 * @member {number} [fear]
 * @member {number} [happiness]
 * @member {number} [neutral]
 * @member {number} [sadness]
 * @member {number} [surprise]
 */
export interface EmotionProperties {
  anger?: number;
  contempt?: number;
  disgust?: number;
  fear?: number;
  happiness?: number;
  neutral?: number;
  sadness?: number;
  surprise?: number;
}

/**
 * @class
 * Initializes a new instance of the FaceAttributes class.
 * @constructor
 * Face Attributes
 *
 * @member {number} [age] Age in years
 * @member {string} [gender] Gender: male or female. Possible values include:
 * 'male', 'female'
 * @member {number} [smile] Smile intensity, a number between [0,1]
 * @member {string} [glasses] Glasses type. Possible values are 'noGlasses',
 * 'readingGlasses', 'sunglasses', 'swimmingGoggles'. Possible values include:
 * 'noGlasses', 'readingGlasses', 'sunglasses', 'swimmingGoggles'
 * @member {object} [facialHair]
 * @member {number} [facialHair.mustache]
 * @member {number} [facialHair.beard]
 * @member {number} [facialHair.sideburns]
 * @member {object} [headPose]
 * @member {number} [headPose.roll]
 * @member {number} [headPose.yaw]
 * @member {number} [headPose.pitch]
 * @member {object} [emotion]
 * @member {number} [emotion.anger]
 * @member {number} [emotion.contempt]
 * @member {number} [emotion.disgust]
 * @member {number} [emotion.fear]
 * @member {number} [emotion.happiness]
 * @member {number} [emotion.neutral]
 * @member {number} [emotion.sadness]
 * @member {number} [emotion.surprise]
 */
export interface FaceAttributes {
  age?: number;
  gender?: string;
  smile?: number;
  glasses?: string;
  facialHair?: FacialHairProperties;
  headPose?: HeadPoseProperties;
  emotion?: EmotionProperties;
}

/**
 * @class
 * Initializes a new instance of the FindSimilarRequest class.
 * @constructor
 * Request body for find similar operation.
 *
 * @member {string} faceId FaceId of the query face. User needs to call Face -
 * Detect first to get a valid faceId. Note that this faceId is not persisted
 * and will expire 24 hours after the detection call
 * @member {string} [faceListId] An existing user-specified unique candidate
 * face list, created in Face List - Create a Face List. Face list contains a
 * set of persistedFaceIds which are persisted and will never expire. Parameter
 * faceListId and faceIds should not be provided at the same time
 * @member {array} [faceIds] An array of candidate faceIds. All of them are
 * created by Face - Detect and the faceIds will expire 24 hours after the
 * detection call.
 * @member {number} [maxNumOfCandidatesReturned] The number of top similar
 * faces returned. The valid range is [1, 1000]. Default value: 20 .
 * @member {string} [mode] Similar face searching mode. It can be "matchPerson"
 * or "matchFace". Possible values include: 'matchPerson', 'matchFace'. Default
 * value: 'matchPerson' .
 */
export interface FindSimilarRequest {
  faceId: string;
  faceListId?: string;
  faceIds?: string[];
  maxNumOfCandidatesReturned?: number;
  mode?: string;
}

/**
 * @class
 * Initializes a new instance of the SimilarFaceResult class.
 * @constructor
 * Response body for find similar face operation.
 *
 * @member {string} faceId faceId of candidate face when find by faceIds.
 * faceId is created by Face - Detect and will expire 24 hours after the
 * detection call
 * @member {string} persistedFaceId persistedFaceId of candidate face when find
 * by faceListId. persistedFaceId in face list is persisted and will not
 * expire. As showed in below response
 * @member {number} [confidence] Similarity confidence of the candidate face.
 * The higher confidence, the more similar. Range between [0,1
 */
export interface SimilarFaceResult {
  faceId: string;
  persistedFaceId: string;
  confidence?: number;
}

/**
 * @class
 * Initializes a new instance of the GroupRequest class.
 * @constructor
 * Request body for group request.
 *
 * @member {array} faceIds Array of candidate faceId created by Face - Detect.
 * The maximum is 1000 faces
 */
export interface GroupRequest {
  faceIds: string[];
}

/**
 * @class
 * Initializes a new instance of the GroupResponse class.
 * @constructor
 * An array of face groups based on face similarity.
 *
 * @member {array} groups A partition of the original faces based on face
 * similarity. Groups are ranked by number of faces
 * @member {array} [messyGroup] Face ids array of faces that cannot find any
 * similar faces from original faces.
 */
export interface GroupResponse {
  groups: string[][];
  messyGroup?: string[];
}

/**
 * @class
 * Initializes a new instance of the IdentifyRequest class.
 * @constructor
 * Request body for identify face operation.
 *
 * @member {string} personGroupId personGroupId of the target person group,
 * created by PersonGroups.Create
 * @member {array} faceIds Array of candidate faceId created by Face - Detect.
 * @member {number} [maxNumOfCandidatesReturned] The number of top similar
 * faces returned. Default value: 1 .
 * @member {number} [confidenceThreshold] Confidence threshold of
 * identification, used to judge whether one face belong to one person.
 */
export interface IdentifyRequest {
  personGroupId: string;
  faceIds: string[];
  maxNumOfCandidatesReturned?: number;
  confidenceThreshold?: number;
}

/**
 * @class
 * Initializes a new instance of the IdentifyResultCandidate class.
 * @constructor
 * All possible faces that may qualify.
 *
 * @member {string} personId Id of candidate
 * @member {number} confidence Confidence level in the candidate person: a
 * float number between 0.0 and 1.0.
 */
export interface IdentifyResultCandidate {
  personId: string;
  confidence: number;
}

/**
 * @class
 * Initializes a new instance of the IdentifyResultItem class.
 * @constructor
 * Response body for identify face operation.
 *
 * @member {string} faceId faceId of the query face
 * @member {array} candidates
 */
export interface IdentifyResultItem {
  faceId: string;
  candidates: IdentifyResultCandidate[];
}

/**
 * @class
 * Initializes a new instance of the VerifyRequest class.
 * @constructor
 * Request body for verify operation.
 *
 * @member {string} faceId faceId the face, comes from Face - Detect
 * @member {string} personId Specify a certain person in a person group.
 * personId is created in Persons.Create.
 * @member {string} personGroupId Using existing personGroupId and personId for
 * fast loading a specified person. personGroupId is created in Person
 * Groups.Create.
 */
export interface VerifyRequest {
  faceId: string;
  personId: string;
  personGroupId: string;
}

/**
 * @class
 * Initializes a new instance of the VerifyResult class.
 * @constructor
 * Result of the verify operation.
 *
 * @member {boolean} isIdentical True if the two faces belong to the same
 * person or the face belongs to the person, otherwise false.
 * @member {number} [confidence] "A number indicates the similarity confidence
 * of whether two faces belong to the same person, or whether the face belongs
 * to the person. By default, isIdentical is set to True if similarity
 * confidence is greater than or equal to 0.5. This is useful for advanced
 * users to override "isIdentical" and fine-tune the result on their own data"
 */
export interface VerifyResult {
  isIdentical: boolean;
  confidence?: number;
}

/**
 * @class
 * Initializes a new instance of the CreateFaceListRequest class.
 * @constructor
 * Request to create a face list.
 *
 * @member {string} [name] Name of the face list, maximum length is 128.
 * @member {string} [userData] Optional user defined data for the face list.
 * Length should not exceed 16KB.
 */
export interface CreateFaceListRequest {
  name?: string;
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the GetFaceListResult class.
 * @constructor
 * Result of the GetFaceList operation.
 *
 * @member {string} faceListId faceListId of the target face list.
 * @member {string} [name] Face list's display name.
 * @member {string} [userData] User-provided data attached to this face list.
 */
export interface GetFaceListResult {
  faceListId: string;
  name?: string;
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the CreatePersonGroupRequest class.
 * @constructor
 * Request to create a person group.
 *
 * @member {string} [name] Name of the face list, maximum length is 128.
 * @member {string} [userData] Optional user defined data for the face list.
 * Length should not exceed 16KB.
 */
export interface CreatePersonGroupRequest {
  name?: string;
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the PersonGroupResult class.
 * @constructor
 * Person group object.
 *
 * @member {string} personGroupId faceListId of the target face list.
 * @member {string} [name] Face list's display name.
 * @member {string} [userData] User-provided data attached to this face list.
 */
export interface PersonGroupResult {
  personGroupId: string;
  name?: string;
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the CreatePersonRequest class.
 * @constructor
 * Request to create a person object.
 *
 * @member {string} [name] Display name of the target person. The maximum
 * length is 128.
 * @member {string} [userData] Optional fields for user-provided data attached
 * to a person. Size limit is 16KB.
 */
export interface CreatePersonRequest {
  name?: string;
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the CreatePersonResult class.
 * @constructor
 * Result of creating person.
 *
 * @member {string} personId personID of the new created person.
 */
export interface CreatePersonResult {
  personId: string;
}

/**
 * @class
 * Initializes a new instance of the PersonResult class.
 * @constructor
 * Person object.
 *
 * @member {string} personId personId of the target face list.
 * @member {array} [persistedFaceIds] persistedFaceIds of registered faces in
 * the person. These persistedFaceIds are returned from Person - Add a Person
 * Face, and will not expire.
 * @member {string} [name] Person's display name.
 * @member {string} [userData] User-provided data attached to this person.
 */
export interface PersonResult {
  personId: string;
  persistedFaceIds?: string[];
  name?: string;
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the PersonFaceResult class.
 * @constructor
 * PersonFace object.
 *
 * @member {string} persistedFaceId The persistedFaceId of the target face,
 * which is persisted and will not expire. Different from faceId created by
 * Face - Detect and will expire in 24 hours after the detection call.
 * @member {string} [userData] User-provided data attached to the face.
 */
export interface PersonFaceResult {
  persistedFaceId: string;
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the UpdatePersonFaceDataRequest class.
 * @constructor
 * Request to update person face data.
 *
 * @member {string} [userData] User-provided data attached to the face. The
 * size limit is 1KB
 */
export interface UpdatePersonFaceDataRequest {
  userData?: string;
}

/**
 * @class
 * Initializes a new instance of the TrainingStatus class.
 * @constructor
 * Training status object.
 *
 * @member {string} status Training status: notstarted, running, succeeded,
 * failed. If the training process is waiting to perform, the status is
 * notstarted. If the training is ongoing, the status is running. Status
 * succeed means this person group is ready for Face - Identify. Status failed
 * is often caused by no person or no persisted face exist in the person group.
 * Possible values include: 'nonstarted', 'running', 'succeeded', 'failed'
 * @member {date} [created] A combined UTC date and time string that describes
 * person group created time.
 * @member {date} [lastAction] Person group last modify time in the UTC, could
 * be null value when the person group is not successfully trained.
 * @member {string} [message] Show failure message when training failed
 * (omitted when training succeed).
 */
export interface TrainingStatus {
  status: string;
  created?: Date;
  lastAction?: Date;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ImageUrl class.
 * @constructor
 * @member {string} url
 */
export interface ImageUrl {
  url: string;
}
