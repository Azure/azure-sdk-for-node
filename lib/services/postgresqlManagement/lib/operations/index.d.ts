/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Servers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface Servers {


    /**
     * Creates a new server, or will overwrite an existing server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} parameters.properties Properties of the server.
     *
     * @param {string} [parameters.properties.version] Server version. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.properties.sslEnforcement] Enable ssl
     * enforcement or not when connect to server. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.properties.storageProfile] Storage profile of a
     * server.
     *
     * @param {number} [parameters.properties.storageProfile.backupRetentionDays]
     * Backup retention days for the server.
     *
     * @param {string} [parameters.properties.storageProfile.geoRedundantBackup]
     * Enable Geo-redundant or not for server backup. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.properties.storageProfile.storageMB] Max storage
     * allowed for a server.
     *
     * @param {string} parameters.properties.createMode Polymorphic Discriminator
     *
     * @param {string} parameters.location The location the resource resides in.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Creates a new server, or will overwrite an existing server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} parameters.properties Properties of the server.
     *
     * @param {string} [parameters.properties.version] Server version. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.properties.sslEnforcement] Enable ssl
     * enforcement or not when connect to server. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.properties.storageProfile] Storage profile of a
     * server.
     *
     * @param {number} [parameters.properties.storageProfile.backupRetentionDays]
     * Backup retention days for the server.
     *
     * @param {string} [parameters.properties.storageProfile.geoRedundantBackup]
     * Enable Geo-redundant or not for server backup. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.properties.storageProfile.storageMB] Max storage
     * allowed for a server.
     *
     * @param {string} parameters.properties.createMode Polymorphic Discriminator
     *
     * @param {string} parameters.location The location the resource resides in.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    create(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, callback: ServiceCallback<models.Server>): void;
    create(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Updates an existing server. The request body can contain one to many of the
     * properties present in the normal server definition.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for updating a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} [parameters.storageProfile] Storage profile of a server.
     *
     * @param {number} [parameters.storageProfile.backupRetentionDays] Backup
     * retention days for the server.
     *
     * @param {string} [parameters.storageProfile.geoRedundantBackup] Enable
     * Geo-redundant or not for server backup. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {number} [parameters.storageProfile.storageMB] Max storage allowed
     * for a server.
     *
     * @param {string} [parameters.administratorLoginPassword] The password of the
     * administrator login.
     *
     * @param {string} [parameters.version] The version of a server. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.sslEnforcement] Enable ssl enforcement or not
     * when connect to server. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.replicationRole] The replication role of the
     * server.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Updates an existing server. The request body can contain one to many of the
     * properties present in the normal server definition.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for updating a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} [parameters.storageProfile] Storage profile of a server.
     *
     * @param {number} [parameters.storageProfile.backupRetentionDays] Backup
     * retention days for the server.
     *
     * @param {string} [parameters.storageProfile.geoRedundantBackup] Enable
     * Geo-redundant or not for server backup. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {number} [parameters.storageProfile.storageMB] Max storage allowed
     * for a server.
     *
     * @param {string} [parameters.administratorLoginPassword] The password of the
     * administrator login.
     *
     * @param {string} [parameters.version] The version of a server. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.sslEnforcement] Enable ssl enforcement or not
     * when connect to server. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.replicationRole] The replication role of the
     * server.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    update(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, callback: ServiceCallback<models.Server>): void;
    update(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Gets information about a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.Server>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * List all the servers in a given resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * List all the servers in a given resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ServerListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;


    /**
     * List all the servers in a given subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * List all the servers in a given subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    list(callback: ServiceCallback<models.ServerListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;


    /**
     * Restarts a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restartWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Restarts a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restart(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restart(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    restart(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new server, or will overwrite an existing server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} parameters.properties Properties of the server.
     *
     * @param {string} [parameters.properties.version] Server version. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.properties.sslEnforcement] Enable ssl
     * enforcement or not when connect to server. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.properties.storageProfile] Storage profile of a
     * server.
     *
     * @param {number} [parameters.properties.storageProfile.backupRetentionDays]
     * Backup retention days for the server.
     *
     * @param {string} [parameters.properties.storageProfile.geoRedundantBackup]
     * Enable Geo-redundant or not for server backup. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.properties.storageProfile.storageMB] Max storage
     * allowed for a server.
     *
     * @param {string} parameters.properties.createMode Polymorphic Discriminator
     *
     * @param {string} parameters.location The location the resource resides in.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Creates a new server, or will overwrite an existing server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} parameters.properties Properties of the server.
     *
     * @param {string} [parameters.properties.version] Server version. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.properties.sslEnforcement] Enable ssl
     * enforcement or not when connect to server. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.properties.storageProfile] Storage profile of a
     * server.
     *
     * @param {number} [parameters.properties.storageProfile.backupRetentionDays]
     * Backup retention days for the server.
     *
     * @param {string} [parameters.properties.storageProfile.geoRedundantBackup]
     * Enable Geo-redundant or not for server backup. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.properties.storageProfile.storageMB] Max storage
     * allowed for a server.
     *
     * @param {string} parameters.properties.createMode Polymorphic Discriminator
     *
     * @param {string} parameters.location The location the resource resides in.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    beginCreate(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, callback: ServiceCallback<models.Server>): void;
    beginCreate(resourceGroupName: string, serverName: string, parameters: models.ServerForCreate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Updates an existing server. The request body can contain one to many of the
     * properties present in the normal server definition.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for updating a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} [parameters.storageProfile] Storage profile of a server.
     *
     * @param {number} [parameters.storageProfile.backupRetentionDays] Backup
     * retention days for the server.
     *
     * @param {string} [parameters.storageProfile.geoRedundantBackup] Enable
     * Geo-redundant or not for server backup. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {number} [parameters.storageProfile.storageMB] Max storage allowed
     * for a server.
     *
     * @param {string} [parameters.administratorLoginPassword] The password of the
     * administrator login.
     *
     * @param {string} [parameters.version] The version of a server. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.sslEnforcement] Enable ssl enforcement or not
     * when connect to server. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.replicationRole] The replication role of the
     * server.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Updates an existing server. The request body can contain one to many of the
     * properties present in the normal server definition.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for updating a server.
     *
     * @param {object} [parameters.sku] The SKU (pricing tier) of the server.
     *
     * @param {string} [parameters.sku.name] The name of the sku, typically, tier +
     * family + cores, e.g. B_Gen4_1, GP_Gen5_8.
     *
     * @param {string} [parameters.sku.tier] The tier of the particular SKU, e.g.
     * Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     *
     * @param {number} [parameters.sku.capacity] The scale up/out capacity,
     * representing server's compute units.
     *
     * @param {string} [parameters.sku.size] The size code, to be interpreted by
     * resource as appropriate.
     *
     * @param {string} [parameters.sku.family] The family of hardware.
     *
     * @param {object} [parameters.storageProfile] Storage profile of a server.
     *
     * @param {number} [parameters.storageProfile.backupRetentionDays] Backup
     * retention days for the server.
     *
     * @param {string} [parameters.storageProfile.geoRedundantBackup] Enable
     * Geo-redundant or not for server backup. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {number} [parameters.storageProfile.storageMB] Max storage allowed
     * for a server.
     *
     * @param {string} [parameters.administratorLoginPassword] The password of the
     * administrator login.
     *
     * @param {string} [parameters.version] The version of a server. Possible
     * values include: '9.5', '9.6', '10', '10.0', '10.2'
     *
     * @param {string} [parameters.sslEnforcement] Enable ssl enforcement or not
     * when connect to server. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.replicationRole] The replication role of the
     * server.
     *
     * @param {object} [parameters.tags] Application-specific metadata in the form
     * of key-value pairs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    beginUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, callback: ServiceCallback<models.Server>): void;
    beginUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Restarts a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestartWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Restarts a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestart(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestart(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    beginRestart(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Replicas
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface Replicas {


    /**
     * List all the replicas for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * List all the replicas for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;
}

/**
 * @class
 * FirewallRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface FirewallRules {


    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {string} parameters.endIpAddress The end IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRule>>;

    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {string} parameters.endIpAddress The end IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRule>;
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, callback: ServiceCallback<models.FirewallRule>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRule>): void;


    /**
     * Deletes a server firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a server firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about a server firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRule>>;

    /**
     * Gets information about a server firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRule>;
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, callback: ServiceCallback<models.FirewallRule>): void;
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRule>): void;


    /**
     * List all the firewall rules in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRuleListResult>>;

    /**
     * List all the firewall rules in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRuleListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.FirewallRuleListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRuleListResult>): void;


    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {string} parameters.endIpAddress The end IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRule>>;

    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {string} parameters.endIpAddress The end IP address of the server
     * firewall rule. Must be IPv4 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRule>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, callback: ServiceCallback<models.FirewallRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRule>): void;


    /**
     * Deletes a server firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a server firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the server firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * VirtualNetworkRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface VirtualNetworkRules {


    /**
     * Gets a virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRule>>;

    /**
     * Gets a virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRule>;
    get(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, callback: ServiceCallback<models.VirtualNetworkRule>): void;
    get(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRule>): void;


    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRule>>;

    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRule>;
    createOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, callback: ServiceCallback<models.VirtualNetworkRule>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRule>): void;


    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRuleListResult>>;

    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRuleListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;


    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRule>>;

    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRule>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, callback: ServiceCallback<models.VirtualNetworkRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRule>): void;


    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRuleListResult>>;

    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRuleListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;
}

/**
 * @class
 * Databases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface Databases {


    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.charset] The charset of the database.
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.charset] The charset of the database.
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, callback: ServiceCallback<models.Database>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Deletes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Gets information about a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * List all the databases in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * List all the databases in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;


    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.charset] The charset of the database.
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a database.
     *
     * @param {string} [parameters.charset] The charset of the database.
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, callback: ServiceCallback<models.Database>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Deletes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Configurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface Configurations {


    /**
     * Updates a configuration of a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} configurationName The name of the server configuration.
     *
     * @param {object} parameters The required parameters for updating a server
     * configuration.
     *
     * @param {string} [parameters.value] Value of the configuration.
     *
     * @param {string} [parameters.source] Source of the configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Configuration>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Configuration>>;

    /**
     * Updates a configuration of a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} configurationName The name of the server configuration.
     *
     * @param {object} parameters The required parameters for updating a server
     * configuration.
     *
     * @param {string} [parameters.value] Value of the configuration.
     *
     * @param {string} [parameters.source] Source of the configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Configuration} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Configuration} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Configuration} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Configuration>;
    createOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, callback: ServiceCallback<models.Configuration>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Configuration>): void;


    /**
     * Gets information about a configuration of server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} configurationName The name of the server configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Configuration>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, configurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Configuration>>;

    /**
     * Gets information about a configuration of server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} configurationName The name of the server configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Configuration} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Configuration} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Configuration} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, configurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Configuration>;
    get(resourceGroupName: string, serverName: string, configurationName: string, callback: ServiceCallback<models.Configuration>): void;
    get(resourceGroupName: string, serverName: string, configurationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Configuration>): void;


    /**
     * List all the configurations in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConfigurationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConfigurationListResult>>;

    /**
     * List all the configurations in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConfigurationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConfigurationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConfigurationListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ConfigurationListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConfigurationListResult>): void;


    /**
     * Updates a configuration of a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} configurationName The name of the server configuration.
     *
     * @param {object} parameters The required parameters for updating a server
     * configuration.
     *
     * @param {string} [parameters.value] Value of the configuration.
     *
     * @param {string} [parameters.source] Source of the configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Configuration>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Configuration>>;

    /**
     * Updates a configuration of a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} configurationName The name of the server configuration.
     *
     * @param {object} parameters The required parameters for updating a server
     * configuration.
     *
     * @param {string} [parameters.value] Value of the configuration.
     *
     * @param {string} [parameters.source] Source of the configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Configuration} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Configuration} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Configuration} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Configuration>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, callback: ServiceCallback<models.Configuration>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: models.Configuration, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Configuration>): void;
}

/**
 * @class
 * LogFiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface LogFiles {


    /**
     * List all the log files in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LogFileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LogFileListResult>>;

    /**
     * List all the log files in a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LogFileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LogFileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LogFileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LogFileListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.LogFileListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogFileListResult>): void;
}

/**
 * @class
 * LocationBasedPerformanceTier
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface LocationBasedPerformanceTier {


    /**
     * List all the performance tiers at specified location in a given
     * subscription.
     *
     * @param {string} locationName The name of the location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PerformanceTierListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PerformanceTierListResult>>;

    /**
     * List all the performance tiers at specified location in a given
     * subscription.
     *
     * @param {string} locationName The name of the location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PerformanceTierListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PerformanceTierListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PerformanceTierListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PerformanceTierListResult>;
    list(locationName: string, callback: ServiceCallback<models.PerformanceTierListResult>): void;
    list(locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PerformanceTierListResult>): void;
}

/**
 * @class
 * CheckNameAvailability
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface CheckNameAvailability {


    /**
     * Check the availability of name for resource
     *
     * @param {object} nameAvailabilityRequest The required parameters for checking
     * if resource name is available.
     *
     * @param {string} nameAvailabilityRequest.name Resource name to verify.
     *
     * @param {string} [nameAvailabilityRequest.type] Resource type used for
     * verification.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NameAvailability>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeWithHttpOperationResponse(nameAvailabilityRequest: models.NameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NameAvailability>>;

    /**
     * Check the availability of name for resource
     *
     * @param {object} nameAvailabilityRequest The required parameters for checking
     * if resource name is available.
     *
     * @param {string} nameAvailabilityRequest.name Resource name to verify.
     *
     * @param {string} [nameAvailabilityRequest.type] Resource type used for
     * verification.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NameAvailability} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NameAvailability} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NameAvailability} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    execute(nameAvailabilityRequest: models.NameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NameAvailability>;
    execute(nameAvailabilityRequest: models.NameAvailabilityRequest, callback: ServiceCallback<models.NameAvailability>): void;
    execute(nameAvailabilityRequest: models.NameAvailabilityRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameAvailability>): void;
}

/**
 * @class
 * ServerSecurityAlertPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface ServerSecurityAlertPolicies {


    /**
     * Get a server's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerSecurityAlertPolicy>>;

    /**
     * Get a server's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerSecurityAlertPolicy>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;


    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerSecurityAlertPolicy>>;

    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerSecurityAlertPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;


    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerSecurityAlertPolicy>>;

    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerSecurityAlertPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PostgreSQLManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}
