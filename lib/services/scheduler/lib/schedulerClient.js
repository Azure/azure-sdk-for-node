/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var SchedulerClient = ( /** @lends SchedulerClient */ function() {
  /**
   * @class
   * Initializes a new instance of the SchedulerClient class.
   * @constructor
   * 
   * @param {string} cloudServiceName
   * 
   * @param {string} jobCollectionName
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function SchedulerClient(cloudServiceName, jobCollectionName, credentials, baseUri, filters) {
    if (cloudServiceName === null || cloudServiceName === undefined) {
      throw new Error('cloudServiceName cannot be null.');
    }
    if (jobCollectionName === null || jobCollectionName === undefined) {
      throw new Error('jobCollectionName cannot be null.');
    }
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    SchedulerClient['super_'].call(this, credentials, filters);
    
    this.cloudServiceName = cloudServiceName;
    this.jobCollectionName = jobCollectionName;
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2013-03-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [JobOperations](-JobOperations.html) object.
     * @type {object}
     */
    this.jobs = new JobOperations(this);
  }
  
  util.inherits(SchedulerClient, Service);
  
  
  return SchedulerClient;
})();
exports.SchedulerClient = SchedulerClient;

var JobOperations = ( /** @lends JobOperations */ function() {
  /**
   * @class
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [SchedulerClient] {@link SchedulerClient~SchedulerClient}.
   * See [jobs] {@link SchedulerClient~SchedulerClient#jobs}.
   * Initializes a new instance of the JobOperations class.
   * @constructor
   * 
   * @param {SchedulerClient} client Reference to the service client.
   */
  function JobOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates a new Job, allowing the service to generate a job id. Use
   * CreateOrUpdate if a user-chosen job id is required.
   * 
   * @param {JobCreateParameters} parameters Parameters specifying the job
   * definition for a Create Job operation.
   * 
   * @param {date} [parameters.startTime] Start time for the job.  Defined as
   * ISO-8601.
   * 
   * @param {JobAction} parameters.action Action to invoke for the job.
   * 
   * @param {JobActionType} parameters.action.type Type of action. Can be one
   * of http, https, storageQueue.
   * 
   * @param {RetryPolicy} [parameters.action.retryPolicy] Retry Policy for the
   * job action.
   * 
   * @param {RetryType} [parameters.action.retryPolicy.retryType]  The Retry
   * Type of the Retry Policy. Can be either 'fixed' or 'none'.
   * 
   * @param {TimeSpan} [parameters.action.retryPolicy.retryInterval] The
   * interval between retries.
   * 
   * @param {number} [parameters.action.retryPolicy.retryCount] Number of times
   * a retry should be attempted.
   * 
   * @param {JobErrorAction} [parameters.action.errorAction] Error Action for
   * the job.
   * 
   * @param {JobActionType} [parameters.action.errorAction.type] Type of
   * action. Can be one of http, https, storageQueue.
   * 
   * @param {JobHttpRequest} [parameters.action.errorAction.request] Request
   * for a http or https action type.
   * 
   * @param {string} [parameters.action.errorAction.request.uri] Uri of the
   * endpoint to invoke.
   * 
   * @param {string} [parameters.action.errorAction.request.method] Http method
   * e.g. GET, PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.errorAction.request.headers] Header
   * name value pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.errorAction.request.body] Request body.
   * 
   * @param {JobQueueMessage} [parameters.action.errorAction.queueMessage]
   * Queue and content for a queue message action type.
   * 
   * @param {string}
   * [parameters.action.errorAction.queueMessage.storageAccountName] Name of
   * the storage account for the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.queueName]
   * Name of the queue to send to.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.sasToken] SAS
   * key for the storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.message]
   * Content of the message to send to the queue.
   * 
   * @param {JobHttpRequest} [parameters.action.request] Request for a http or
   * https action type.
   * 
   * @param {string} [parameters.action.request.uri] Uri of the endpoint to
   * invoke.
   * 
   * @param {string} [parameters.action.request.method] Http method e.g. GET,
   * PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.request.headers] Header name value
   * pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.request.body] Request body.
   * 
   * @param {JobQueueMessage} [parameters.action.queueMessage] Queue and
   * content for a queue message action type.
   * 
   * @param {string} [parameters.action.queueMessage.storageAccountName] Name
   * of the storage account for the queue.
   * 
   * @param {string} [parameters.action.queueMessage.queueName] Name of the
   * queue to send to.
   * 
   * @param {string} [parameters.action.queueMessage.sasToken] SAS key for the
   * storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.queueMessage.message] Content of the
   * message to send to the queue.
   * 
   * @param {JobRecurrence} [parameters.recurrence] Recurrence schedule for the
   * job.
   * 
   * @param {JobRecurrenceFrequency} [parameters.recurrence.frequency] The
   * frequency of recurrence.
   * 
   * @param {number} [parameters.recurrence.interval] Interval of the
   * recurrence at the given frequency.
   * 
   * @param {number} [parameters.recurrence.count] Count of occurrences that
   * will execute. Optional. Default will recur infinitely
   * 
   * @param {date} [parameters.recurrence.endTime] Time in ISO-8601 format
   * after which no more occurrences will execute.
   * 
   * @param {JobRecurrenceSchedule} [parameters.recurrence.schedule] Recurrence
   * schedule for the job.
   * 
   * @param {array} [parameters.recurrence.schedule.minutes] Minutes of the
   * hour that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.hours] Hours of the day
   * that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.days] Days of the week that
   * the job should execute on.
   * 
   * @param {array} [parameters.recurrence.schedule.months] Months that the job
   * should execute in.  Must be between 1 and 12.
   * 
   * @param {array} [parameters.recurrence.schedule.monthDays] Days of the
   * month that the job should execute on.  Must be between 1 and 31.
   * 
   * @param {array} [parameters.recurrence.schedule.monthlyOccurrences]
   * Occurrences of days within a month.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.create = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.action === null || parameters.action === undefined) {
      return callback(new Error('parameters.action cannot be null.'));
    }
    if (parameters.action.errorAction) {
      if (parameters.action.errorAction.queueMessage) {
        if (parameters.action.errorAction.queueMessage.message === null || parameters.action.errorAction.queueMessage.message === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.message cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.queueName === null || parameters.action.errorAction.queueMessage.queueName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.queueName cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.sasToken === null || parameters.action.errorAction.queueMessage.sasToken === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.sasToken cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.storageAccountName === null || parameters.action.errorAction.queueMessage.storageAccountName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.storageAccountName cannot be null.'));
        }
      }
      if (parameters.action.errorAction.request) {
        if (parameters.action.errorAction.request.method === null || parameters.action.errorAction.request.method === undefined) {
          return callback(new Error('parameters.action.errorAction.request.method cannot be null.'));
        }
        if (parameters.action.errorAction.request.uri === null || parameters.action.errorAction.request.uri === undefined) {
          return callback(new Error('parameters.action.errorAction.request.uri cannot be null.'));
        }
      }
    }
    if (parameters.action.queueMessage) {
      if (parameters.action.queueMessage.message === null || parameters.action.queueMessage.message === undefined) {
        return callback(new Error('parameters.action.queueMessage.message cannot be null.'));
      }
      if (parameters.action.queueMessage.queueName === null || parameters.action.queueMessage.queueName === undefined) {
        return callback(new Error('parameters.action.queueMessage.queueName cannot be null.'));
      }
      if (parameters.action.queueMessage.sasToken === null || parameters.action.queueMessage.sasToken === undefined) {
        return callback(new Error('parameters.action.queueMessage.sasToken cannot be null.'));
      }
      if (parameters.action.queueMessage.storageAccountName === null || parameters.action.queueMessage.storageAccountName === undefined) {
        return callback(new Error('parameters.action.queueMessage.storageAccountName cannot be null.'));
      }
    }
    if (parameters.action.request) {
      if (parameters.action.request.method === null || parameters.action.request.method === undefined) {
        return callback(new Error('parameters.action.request.method cannot be null.'));
      }
      if (parameters.action.request.uri === null || parameters.action.request.uri === undefined) {
        return callback(new Error('parameters.action.request.uri cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobCreateParametersValue = {};
    requestDoc = jobCreateParametersValue;
    
    if (parameters.startTime) {
      jobCreateParametersValue['startTime'] = parameters.startTime;
    }
    
    var actionValue = {};
    jobCreateParametersValue['action'] = actionValue;
    
    actionValue['type'] = parameters.action.type ? parameters.action.type.toString() : 'Http';
    
    if (parameters.action.retryPolicy) {
      var retryPolicyValue = {};
      actionValue['retryPolicy'] = retryPolicyValue;
      
      retryPolicyValue['retryType'] = parameters.action.retryPolicy.retryType ? parameters.action.retryPolicy.retryType.toString() : 'None';
      
      if (parameters.action.retryPolicy.retryInterval) {
        retryPolicyValue['retryInterval'] = parameters.action.retryPolicy.retryInterval.toIsoString();
      }
      
      if (parameters.action.retryPolicy.retryCount) {
        retryPolicyValue['retryCount'] = parameters.action.retryPolicy.retryCount;
      }
    }
    
    if (parameters.action.errorAction) {
      var errorActionValue = {};
      actionValue['errorAction'] = errorActionValue;
      
      errorActionValue['type'] = parameters.action.errorAction.type ? parameters.action.errorAction.type.toString() : 'Http';
      
      if (parameters.action.errorAction.request) {
        var requestValue = {};
        errorActionValue['request'] = requestValue;
        
        requestValue['uri'] = parameters.action.errorAction.request.uri;
        
        requestValue['method'] = parameters.action.errorAction.request.method;
        
        var headersDictionary = {};
        if (parameters.action.errorAction.request.headers) {
          for (var headersKey in parameters.action.errorAction.request.headers) {
            var headersValue = parameters.action.errorAction.request.headers[headersKey];
            headersDictionary[headersKey] = headersValue;
          }
        }
        requestValue['headers'] = headersDictionary;
        
        if (parameters.action.errorAction.request.body) {
          requestValue['body'] = parameters.action.errorAction.request.body;
        }
      }
      
      if (parameters.action.errorAction.queueMessage) {
        var queueMessageValue = {};
        errorActionValue['queueMessage'] = queueMessageValue;
        
        queueMessageValue['storageAccount'] = parameters.action.errorAction.queueMessage.storageAccountName;
        
        queueMessageValue['queueName'] = parameters.action.errorAction.queueMessage.queueName;
        
        queueMessageValue['sasToken'] = parameters.action.errorAction.queueMessage.sasToken;
        
        queueMessageValue['message'] = parameters.action.errorAction.queueMessage.message;
      }
    }
    
    if (parameters.action.request) {
      var requestValue2 = {};
      actionValue['request'] = requestValue2;
      
      requestValue2['uri'] = parameters.action.request.uri;
      
      requestValue2['method'] = parameters.action.request.method;
      
      var headersDictionary2 = {};
      if (parameters.action.request.headers) {
        for (var headersKey2 in parameters.action.request.headers) {
          var headersValue2 = parameters.action.request.headers[headersKey2];
          headersDictionary2[headersKey2] = headersValue2;
        }
      }
      requestValue2['headers'] = headersDictionary2;
      
      if (parameters.action.request.body) {
        requestValue2['body'] = parameters.action.request.body;
      }
    }
    
    if (parameters.action.queueMessage) {
      var queueMessageValue2 = {};
      actionValue['queueMessage'] = queueMessageValue2;
      
      queueMessageValue2['storageAccount'] = parameters.action.queueMessage.storageAccountName;
      
      queueMessageValue2['queueName'] = parameters.action.queueMessage.queueName;
      
      queueMessageValue2['sasToken'] = parameters.action.queueMessage.sasToken;
      
      queueMessageValue2['message'] = parameters.action.queueMessage.message;
    }
    
    if (parameters.recurrence) {
      var recurrenceValue = {};
      jobCreateParametersValue['recurrence'] = recurrenceValue;
      
      recurrenceValue['frequency'] = parameters.recurrence.frequency ? parameters.recurrence.frequency.toString() : 'Minute';
      
      if (parameters.recurrence.interval) {
        recurrenceValue['interval'] = parameters.recurrence.interval;
      }
      
      if (parameters.recurrence.count) {
        recurrenceValue['count'] = parameters.recurrence.count;
      }
      
      if (parameters.recurrence.endTime) {
        recurrenceValue['endTime'] = parameters.recurrence.endTime;
      }
      
      if (parameters.recurrence.schedule) {
        var scheduleValue = {};
        recurrenceValue['schedule'] = scheduleValue;
        
        if (parameters.recurrence.schedule.minutes) {
          var minutesArray = [];
          for (var loweredIndex1 = 0; loweredIndex1 < parameters.recurrence.schedule.minutes.length; loweredIndex1 = loweredIndex1 + 1) {
            var minutesItem = parameters.recurrence.schedule.minutes[loweredIndex1];
            minutesArray.push(minutesItem);
          }
          scheduleValue['minutes'] = minutesArray;
        }
        
        if (parameters.recurrence.schedule.hours) {
          var hoursArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < parameters.recurrence.schedule.hours.length; loweredIndex2 = loweredIndex2 + 1) {
            var hoursItem = parameters.recurrence.schedule.hours[loweredIndex2];
            hoursArray.push(hoursItem);
          }
          scheduleValue['hours'] = hoursArray;
        }
        
        if (parameters.recurrence.schedule.days) {
          var weekDaysArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.recurrence.schedule.days.length; loweredIndex3 = loweredIndex3 + 1) {
            var weekDaysItem = parameters.recurrence.schedule.days[loweredIndex3];
            weekDaysArray.push(weekDaysItem ? weekDaysItem.toString() : 'Monday');
          }
          scheduleValue['weekDays'] = weekDaysArray;
        }
        
        if (parameters.recurrence.schedule.months) {
          var monthsArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < parameters.recurrence.schedule.months.length; loweredIndex4 = loweredIndex4 + 1) {
            var monthsItem = parameters.recurrence.schedule.months[loweredIndex4];
            monthsArray.push(monthsItem);
          }
          scheduleValue['months'] = monthsArray;
        }
        
        if (parameters.recurrence.schedule.monthDays) {
          var monthDaysArray = [];
          for (var loweredIndex5 = 0; loweredIndex5 < parameters.recurrence.schedule.monthDays.length; loweredIndex5 = loweredIndex5 + 1) {
            var monthDaysItem = parameters.recurrence.schedule.monthDays[loweredIndex5];
            monthDaysArray.push(monthDaysItem);
          }
          scheduleValue['monthDays'] = monthDaysArray;
        }
        
        if (parameters.recurrence.schedule.monthlyOccurrences) {
          var monthlyOccurrencesArray = [];
          for (var loweredIndex6 = 0; loweredIndex6 < parameters.recurrence.schedule.monthlyOccurrences.length; loweredIndex6 = loweredIndex6 + 1) {
            var monthlyOccurrencesItem = parameters.recurrence.schedule.monthlyOccurrences[loweredIndex6];
            var jobScheduleMonthlyOccurrenceValue = {};
            monthlyOccurrencesArray.push(jobScheduleMonthlyOccurrenceValue);
            
            jobScheduleMonthlyOccurrenceValue['day'] = monthlyOccurrencesItem.day ? monthlyOccurrencesItem.day.toString() : 'Monday';
            
            if (monthlyOccurrencesItem.occurrence) {
              jobScheduleMonthlyOccurrenceValue['occurrence'] = monthlyOccurrencesItem.occurrence;
            }
          }
          scheduleValue['monthlyOccurrences'] = monthlyOccurrencesArray;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobInstance = {};
        result.job = jobInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          jobInstance.id = idInstance;
        }
        
        var startTimeValue = responseDoc['startTime'];
        if (startTimeValue) {
          var startTimeInstance = startTimeValue;
          jobInstance.startTime = startTimeInstance;
        }
        
        var actionValue2 = responseDoc['action'];
        if (actionValue2) {
          var actionInstance = {};
          jobInstance.action = actionInstance;
          
          var typeValue = actionValue2['type'];
          if (typeValue) {
            var typeInstance = typeValue;
            actionInstance.type = typeInstance;
          }
          
          var retryPolicyValue2 = actionValue2['retryPolicy'];
          if (retryPolicyValue2) {
            var retryPolicyInstance = {};
            actionInstance.retryPolicy = retryPolicyInstance;
            
            var retryTypeValue = retryPolicyValue2['retryType'];
            if (retryTypeValue) {
              var retryTypeInstance = retryTypeValue;
              retryPolicyInstance.retryType = retryTypeInstance;
            }
            
            var retryIntervalValue = retryPolicyValue2['retryInterval'];
            if (retryIntervalValue) {
              var retryIntervalInstance = moment.duration(retryIntervalValue);
              retryPolicyInstance.retryInterval = retryIntervalInstance;
            }
            
            var retryCountValue = retryPolicyValue2['retryCount'];
            if (retryCountValue) {
              var retryCountInstance = retryCountValue;
              retryPolicyInstance.retryCount = retryCountInstance;
            }
          }
          
          var errorActionValue2 = actionValue2['errorAction'];
          if (errorActionValue2) {
            var errorActionInstance = {};
            actionInstance.errorAction = errorActionInstance;
            
            var typeValue2 = errorActionValue2['type'];
            if (typeValue2) {
              var typeInstance2 = typeValue2;
              errorActionInstance.type = typeInstance2;
            }
            
            var requestValue3 = errorActionValue2['request'];
            if (requestValue3) {
              var requestInstance = { headers: {} };
              errorActionInstance.request = requestInstance;
              
              var uriValue = requestValue3['uri'];
              if (uriValue) {
                var uriInstance = uriValue;
                requestInstance.uri = uriInstance;
              }
              
              var methodValue = requestValue3['method'];
              if (methodValue) {
                var methodInstance = methodValue;
                requestInstance.method = methodInstance;
              }
              
              var headersSequenceElement = requestValue3['headers'];
              if (headersSequenceElement) {
                for (var property in headersSequenceElement) {
                  var headersKey3 = property;
                  var headersValue3 = headersSequenceElement[property];
                  requestInstance.headers[headersKey3] = headersValue3;
                }
              }
              
              var bodyValue = requestValue3['body'];
              if (bodyValue) {
                var bodyInstance = bodyValue;
                requestInstance.body = bodyInstance;
              }
            }
            
            var queueMessageValue3 = errorActionValue2['queueMessage'];
            if (queueMessageValue3) {
              var queueMessageInstance = {};
              errorActionInstance.queueMessage = queueMessageInstance;
              
              var storageAccountValue = queueMessageValue3['storageAccount'];
              if (storageAccountValue) {
                var storageAccountInstance = storageAccountValue;
                queueMessageInstance.storageAccountName = storageAccountInstance;
              }
              
              var queueNameValue = queueMessageValue3['queueName'];
              if (queueNameValue) {
                var queueNameInstance = queueNameValue;
                queueMessageInstance.queueName = queueNameInstance;
              }
              
              var sasTokenValue = queueMessageValue3['sasToken'];
              if (sasTokenValue) {
                var sasTokenInstance = sasTokenValue;
                queueMessageInstance.sasToken = sasTokenInstance;
              }
              
              var messageValue = queueMessageValue3['message'];
              if (messageValue) {
                var messageInstance = messageValue;
                queueMessageInstance.message = messageInstance;
              }
            }
          }
          
          var requestValue4 = actionValue2['request'];
          if (requestValue4) {
            var requestInstance2 = { headers: {} };
            actionInstance.request = requestInstance2;
            
            var uriValue2 = requestValue4['uri'];
            if (uriValue2) {
              var uriInstance2 = uriValue2;
              requestInstance2.uri = uriInstance2;
            }
            
            var methodValue2 = requestValue4['method'];
            if (methodValue2) {
              var methodInstance2 = methodValue2;
              requestInstance2.method = methodInstance2;
            }
            
            var headersSequenceElement2 = requestValue4['headers'];
            if (headersSequenceElement2) {
              for (var property2 in headersSequenceElement2) {
                var headersKey4 = property2;
                var headersValue4 = headersSequenceElement2[property2];
                requestInstance2.headers[headersKey4] = headersValue4;
              }
            }
            
            var bodyValue2 = requestValue4['body'];
            if (bodyValue2) {
              var bodyInstance2 = bodyValue2;
              requestInstance2.body = bodyInstance2;
            }
          }
          
          var queueMessageValue4 = actionValue2['queueMessage'];
          if (queueMessageValue4) {
            var queueMessageInstance2 = {};
            actionInstance.queueMessage = queueMessageInstance2;
            
            var storageAccountValue2 = queueMessageValue4['storageAccount'];
            if (storageAccountValue2) {
              var storageAccountInstance2 = storageAccountValue2;
              queueMessageInstance2.storageAccountName = storageAccountInstance2;
            }
            
            var queueNameValue2 = queueMessageValue4['queueName'];
            if (queueNameValue2) {
              var queueNameInstance2 = queueNameValue2;
              queueMessageInstance2.queueName = queueNameInstance2;
            }
            
            var sasTokenValue2 = queueMessageValue4['sasToken'];
            if (sasTokenValue2) {
              var sasTokenInstance2 = sasTokenValue2;
              queueMessageInstance2.sasToken = sasTokenInstance2;
            }
            
            var messageValue2 = queueMessageValue4['message'];
            if (messageValue2) {
              var messageInstance2 = messageValue2;
              queueMessageInstance2.message = messageInstance2;
            }
          }
        }
        
        var recurrenceValue2 = responseDoc['recurrence'];
        if (recurrenceValue2) {
          var recurrenceInstance = {};
          jobInstance.recurrence = recurrenceInstance;
          
          var frequencyValue = recurrenceValue2['frequency'];
          if (frequencyValue) {
            var frequencyInstance = frequencyValue;
            recurrenceInstance.frequency = frequencyInstance;
          }
          
          var intervalValue = recurrenceValue2['interval'];
          if (intervalValue) {
            var intervalInstance = intervalValue;
            recurrenceInstance.interval = intervalInstance;
          }
          
          var countValue = recurrenceValue2['count'];
          if (countValue) {
            var countInstance = countValue;
            recurrenceInstance.count = countInstance;
          }
          
          var endTimeValue = recurrenceValue2['endTime'];
          if (endTimeValue) {
            var endTimeInstance = endTimeValue;
            recurrenceInstance.endTime = endTimeInstance;
          }
          
          var scheduleValue2 = recurrenceValue2['schedule'];
          if (scheduleValue2) {
            var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
            recurrenceInstance.schedule = scheduleInstance;
            
            var minutesArray2 = scheduleValue2['minutes'];
            if (minutesArray2) {
              for (var loweredIndex7 = 0; loweredIndex7 < minutesArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                var minutesValue = minutesArray2[loweredIndex7];
                scheduleInstance.minutes.push(minutesValue);
              }
            }
            
            var hoursArray2 = scheduleValue2['hours'];
            if (hoursArray2) {
              for (var loweredIndex8 = 0; loweredIndex8 < hoursArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                var hoursValue = hoursArray2[loweredIndex8];
                scheduleInstance.hours.push(hoursValue);
              }
            }
            
            var weekDaysArray2 = scheduleValue2['weekDays'];
            if (weekDaysArray2) {
              for (var loweredIndex9 = 0; loweredIndex9 < weekDaysArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                var weekDaysValue = weekDaysArray2[loweredIndex9];
                scheduleInstance.days.push(weekDaysValue);
              }
            }
            
            var monthsArray2 = scheduleValue2['months'];
            if (monthsArray2) {
              for (var loweredIndex10 = 0; loweredIndex10 < monthsArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                var monthsValue = monthsArray2[loweredIndex10];
                scheduleInstance.months.push(monthsValue);
              }
            }
            
            var monthDaysArray2 = scheduleValue2['monthDays'];
            if (monthDaysArray2) {
              for (var loweredIndex11 = 0; loweredIndex11 < monthDaysArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                var monthDaysValue = monthDaysArray2[loweredIndex11];
                scheduleInstance.monthDays.push(monthDaysValue);
              }
            }
            
            var monthlyOccurrencesArray2 = scheduleValue2['monthlyOccurrences'];
            if (monthlyOccurrencesArray2) {
              for (var loweredIndex12 = 0; loweredIndex12 < monthlyOccurrencesArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                var monthlyOccurrencesValue = monthlyOccurrencesArray2[loweredIndex12];
                var jobScheduleMonthlyOccurrenceInstance = {};
                scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                
                var dayValue = monthlyOccurrencesValue['day'];
                if (dayValue) {
                  var dayInstance = dayValue;
                  jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                }
                
                var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                if (occurrenceValue) {
                  var occurrenceInstance = occurrenceValue;
                  jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                }
              }
            }
          }
        }
        
        var statusValue = responseDoc['status'];
        if (statusValue) {
          var statusInstance = {};
          jobInstance.status = statusInstance;
          
          var lastExecutionTimeValue = statusValue['lastExecutionTime'];
          if (lastExecutionTimeValue) {
            var lastExecutionTimeInstance = lastExecutionTimeValue;
            statusInstance.lastExecutionTime = lastExecutionTimeInstance;
          }
          
          var nextExecutionTimeValue = statusValue['nextExecutionTime'];
          if (nextExecutionTimeValue) {
            var nextExecutionTimeInstance = nextExecutionTimeValue;
            statusInstance.nextExecutionTime = nextExecutionTimeInstance;
          }
          
          var executionCountValue = statusValue['executionCount'];
          if (executionCountValue) {
            var executionCountInstance = executionCountValue;
            statusInstance.executionCount = executionCountInstance;
          }
          
          var failureCountValue = statusValue['failureCount'];
          if (failureCountValue) {
            var failureCountInstance = failureCountValue;
            statusInstance.failureCount = failureCountInstance;
          }
          
          var faultedCountValue = statusValue['faultedCount'];
          if (faultedCountValue) {
            var faultedCountInstance = faultedCountValue;
            statusInstance.faultedCount = faultedCountInstance;
          }
        }
        
        var stateValue = responseDoc['state'];
        if (stateValue) {
          var stateInstance = stateValue;
          jobInstance.state = stateInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates a new Job with a user-provided job id, or updates an existing job,
   * replacing its definition with that specified.
   * 
   * @param {string} jobId Id of the job to create or update.
   * 
   * @param {JobCreateOrUpdateParameters} parameters Parameters specifying the
   * job definition for a CreateOrUpdate Job operation.
   * 
   * @param {date} [parameters.startTime] Start time for the job. Defined as
   * ISO-8601.
   * 
   * @param {JobAction} parameters.action Action to invoke for the job.
   * 
   * @param {JobActionType} parameters.action.type Type of action. Can be one
   * of http, https, storageQueue.
   * 
   * @param {RetryPolicy} [parameters.action.retryPolicy] Retry Policy for the
   * job action.
   * 
   * @param {RetryType} [parameters.action.retryPolicy.retryType]  The Retry
   * Type of the Retry Policy. Can be either 'fixed' or 'none'.
   * 
   * @param {TimeSpan} [parameters.action.retryPolicy.retryInterval] The
   * interval between retries.
   * 
   * @param {number} [parameters.action.retryPolicy.retryCount] Number of times
   * a retry should be attempted.
   * 
   * @param {JobErrorAction} [parameters.action.errorAction] Error Action for
   * the job.
   * 
   * @param {JobActionType} [parameters.action.errorAction.type] Type of
   * action. Can be one of http, https, storageQueue.
   * 
   * @param {JobHttpRequest} [parameters.action.errorAction.request] Request
   * for a http or https action type.
   * 
   * @param {string} [parameters.action.errorAction.request.uri] Uri of the
   * endpoint to invoke.
   * 
   * @param {string} [parameters.action.errorAction.request.method] Http method
   * e.g. GET, PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.errorAction.request.headers] Header
   * name value pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.errorAction.request.body] Request body.
   * 
   * @param {JobQueueMessage} [parameters.action.errorAction.queueMessage]
   * Queue and content for a queue message action type.
   * 
   * @param {string}
   * [parameters.action.errorAction.queueMessage.storageAccountName] Name of
   * the storage account for the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.queueName]
   * Name of the queue to send to.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.sasToken] SAS
   * key for the storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.message]
   * Content of the message to send to the queue.
   * 
   * @param {JobHttpRequest} [parameters.action.request] Request for a http or
   * https action type.
   * 
   * @param {string} [parameters.action.request.uri] Uri of the endpoint to
   * invoke.
   * 
   * @param {string} [parameters.action.request.method] Http method e.g. GET,
   * PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.request.headers] Header name value
   * pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.request.body] Request body.
   * 
   * @param {JobQueueMessage} [parameters.action.queueMessage] Queue and
   * content for a queue message action type.
   * 
   * @param {string} [parameters.action.queueMessage.storageAccountName] Name
   * of the storage account for the queue.
   * 
   * @param {string} [parameters.action.queueMessage.queueName] Name of the
   * queue to send to.
   * 
   * @param {string} [parameters.action.queueMessage.sasToken] SAS key for the
   * storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.queueMessage.message] Content of the
   * message to send to the queue.
   * 
   * @param {JobRecurrence} [parameters.recurrence] Recurrence schedule for the
   * job.
   * 
   * @param {JobRecurrenceFrequency} [parameters.recurrence.frequency] The
   * frequency of recurrence.
   * 
   * @param {number} [parameters.recurrence.interval] Interval of the
   * recurrence at the given frequency.
   * 
   * @param {number} [parameters.recurrence.count] Count of occurrences that
   * will execute. Optional. Default will recur infinitely
   * 
   * @param {date} [parameters.recurrence.endTime] Time in ISO-8601 format
   * after which no more occurrences will execute.
   * 
   * @param {JobRecurrenceSchedule} [parameters.recurrence.schedule] Recurrence
   * schedule for the job.
   * 
   * @param {array} [parameters.recurrence.schedule.minutes] Minutes of the
   * hour that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.hours] Hours of the day
   * that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.days] Days of the week that
   * the job should execute on.
   * 
   * @param {array} [parameters.recurrence.schedule.months] Months that the job
   * should execute in.  Must be between 1 and 12.
   * 
   * @param {array} [parameters.recurrence.schedule.monthDays] Days of the
   * month that the job should execute on.  Must be between 1 and 31.
   * 
   * @param {array} [parameters.recurrence.schedule.monthlyOccurrences]
   * Occurrences of days within a month.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.createOrUpdate = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.action === null || parameters.action === undefined) {
      return callback(new Error('parameters.action cannot be null.'));
    }
    if (parameters.action.errorAction) {
      if (parameters.action.errorAction.queueMessage) {
        if (parameters.action.errorAction.queueMessage.message === null || parameters.action.errorAction.queueMessage.message === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.message cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.queueName === null || parameters.action.errorAction.queueMessage.queueName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.queueName cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.sasToken === null || parameters.action.errorAction.queueMessage.sasToken === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.sasToken cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.storageAccountName === null || parameters.action.errorAction.queueMessage.storageAccountName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.storageAccountName cannot be null.'));
        }
      }
      if (parameters.action.errorAction.request) {
        if (parameters.action.errorAction.request.method === null || parameters.action.errorAction.request.method === undefined) {
          return callback(new Error('parameters.action.errorAction.request.method cannot be null.'));
        }
        if (parameters.action.errorAction.request.uri === null || parameters.action.errorAction.request.uri === undefined) {
          return callback(new Error('parameters.action.errorAction.request.uri cannot be null.'));
        }
      }
    }
    if (parameters.action.queueMessage) {
      if (parameters.action.queueMessage.message === null || parameters.action.queueMessage.message === undefined) {
        return callback(new Error('parameters.action.queueMessage.message cannot be null.'));
      }
      if (parameters.action.queueMessage.queueName === null || parameters.action.queueMessage.queueName === undefined) {
        return callback(new Error('parameters.action.queueMessage.queueName cannot be null.'));
      }
      if (parameters.action.queueMessage.sasToken === null || parameters.action.queueMessage.sasToken === undefined) {
        return callback(new Error('parameters.action.queueMessage.sasToken cannot be null.'));
      }
      if (parameters.action.queueMessage.storageAccountName === null || parameters.action.queueMessage.storageAccountName === undefined) {
        return callback(new Error('parameters.action.queueMessage.storageAccountName cannot be null.'));
      }
    }
    if (parameters.action.request) {
      if (parameters.action.request.method === null || parameters.action.request.method === undefined) {
        return callback(new Error('parameters.action.request.method cannot be null.'));
      }
      if (parameters.action.request.uri === null || parameters.action.request.uri === undefined) {
        return callback(new Error('parameters.action.request.uri cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs/' + jobId.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobCreateOrUpdateParametersValue = {};
    requestDoc = jobCreateOrUpdateParametersValue;
    
    if (parameters.startTime) {
      jobCreateOrUpdateParametersValue['startTime'] = parameters.startTime;
    }
    
    var actionValue = {};
    jobCreateOrUpdateParametersValue['action'] = actionValue;
    
    actionValue['type'] = parameters.action.type ? parameters.action.type.toString() : 'Http';
    
    if (parameters.action.retryPolicy) {
      var retryPolicyValue = {};
      actionValue['retryPolicy'] = retryPolicyValue;
      
      retryPolicyValue['retryType'] = parameters.action.retryPolicy.retryType ? parameters.action.retryPolicy.retryType.toString() : 'None';
      
      if (parameters.action.retryPolicy.retryInterval) {
        retryPolicyValue['retryInterval'] = parameters.action.retryPolicy.retryInterval.toIsoString();
      }
      
      if (parameters.action.retryPolicy.retryCount) {
        retryPolicyValue['retryCount'] = parameters.action.retryPolicy.retryCount;
      }
    }
    
    if (parameters.action.errorAction) {
      var errorActionValue = {};
      actionValue['errorAction'] = errorActionValue;
      
      errorActionValue['type'] = parameters.action.errorAction.type ? parameters.action.errorAction.type.toString() : 'Http';
      
      if (parameters.action.errorAction.request) {
        var requestValue = {};
        errorActionValue['request'] = requestValue;
        
        requestValue['uri'] = parameters.action.errorAction.request.uri;
        
        requestValue['method'] = parameters.action.errorAction.request.method;
        
        var headersDictionary = {};
        if (parameters.action.errorAction.request.headers) {
          for (var headersKey in parameters.action.errorAction.request.headers) {
            var headersValue = parameters.action.errorAction.request.headers[headersKey];
            headersDictionary[headersKey] = headersValue;
          }
        }
        requestValue['headers'] = headersDictionary;
        
        if (parameters.action.errorAction.request.body) {
          requestValue['body'] = parameters.action.errorAction.request.body;
        }
      }
      
      if (parameters.action.errorAction.queueMessage) {
        var queueMessageValue = {};
        errorActionValue['queueMessage'] = queueMessageValue;
        
        queueMessageValue['storageAccount'] = parameters.action.errorAction.queueMessage.storageAccountName;
        
        queueMessageValue['queueName'] = parameters.action.errorAction.queueMessage.queueName;
        
        queueMessageValue['sasToken'] = parameters.action.errorAction.queueMessage.sasToken;
        
        queueMessageValue['message'] = parameters.action.errorAction.queueMessage.message;
      }
    }
    
    if (parameters.action.request) {
      var requestValue2 = {};
      actionValue['request'] = requestValue2;
      
      requestValue2['uri'] = parameters.action.request.uri;
      
      requestValue2['method'] = parameters.action.request.method;
      
      var headersDictionary2 = {};
      if (parameters.action.request.headers) {
        for (var headersKey2 in parameters.action.request.headers) {
          var headersValue2 = parameters.action.request.headers[headersKey2];
          headersDictionary2[headersKey2] = headersValue2;
        }
      }
      requestValue2['headers'] = headersDictionary2;
      
      if (parameters.action.request.body) {
        requestValue2['body'] = parameters.action.request.body;
      }
    }
    
    if (parameters.action.queueMessage) {
      var queueMessageValue2 = {};
      actionValue['queueMessage'] = queueMessageValue2;
      
      queueMessageValue2['storageAccount'] = parameters.action.queueMessage.storageAccountName;
      
      queueMessageValue2['queueName'] = parameters.action.queueMessage.queueName;
      
      queueMessageValue2['sasToken'] = parameters.action.queueMessage.sasToken;
      
      queueMessageValue2['message'] = parameters.action.queueMessage.message;
    }
    
    if (parameters.recurrence) {
      var recurrenceValue = {};
      jobCreateOrUpdateParametersValue['recurrence'] = recurrenceValue;
      
      recurrenceValue['frequency'] = parameters.recurrence.frequency ? parameters.recurrence.frequency.toString() : 'Minute';
      
      if (parameters.recurrence.interval) {
        recurrenceValue['interval'] = parameters.recurrence.interval;
      }
      
      if (parameters.recurrence.count) {
        recurrenceValue['count'] = parameters.recurrence.count;
      }
      
      if (parameters.recurrence.endTime) {
        recurrenceValue['endTime'] = parameters.recurrence.endTime;
      }
      
      if (parameters.recurrence.schedule) {
        var scheduleValue = {};
        recurrenceValue['schedule'] = scheduleValue;
        
        if (parameters.recurrence.schedule.minutes) {
          var minutesArray = [];
          for (var loweredIndex1 = 0; loweredIndex1 < parameters.recurrence.schedule.minutes.length; loweredIndex1 = loweredIndex1 + 1) {
            var minutesItem = parameters.recurrence.schedule.minutes[loweredIndex1];
            minutesArray.push(minutesItem);
          }
          scheduleValue['minutes'] = minutesArray;
        }
        
        if (parameters.recurrence.schedule.hours) {
          var hoursArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < parameters.recurrence.schedule.hours.length; loweredIndex2 = loweredIndex2 + 1) {
            var hoursItem = parameters.recurrence.schedule.hours[loweredIndex2];
            hoursArray.push(hoursItem);
          }
          scheduleValue['hours'] = hoursArray;
        }
        
        if (parameters.recurrence.schedule.days) {
          var weekDaysArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.recurrence.schedule.days.length; loweredIndex3 = loweredIndex3 + 1) {
            var weekDaysItem = parameters.recurrence.schedule.days[loweredIndex3];
            weekDaysArray.push(weekDaysItem ? weekDaysItem.toString() : 'Monday');
          }
          scheduleValue['weekDays'] = weekDaysArray;
        }
        
        if (parameters.recurrence.schedule.months) {
          var monthsArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < parameters.recurrence.schedule.months.length; loweredIndex4 = loweredIndex4 + 1) {
            var monthsItem = parameters.recurrence.schedule.months[loweredIndex4];
            monthsArray.push(monthsItem);
          }
          scheduleValue['months'] = monthsArray;
        }
        
        if (parameters.recurrence.schedule.monthDays) {
          var monthDaysArray = [];
          for (var loweredIndex5 = 0; loweredIndex5 < parameters.recurrence.schedule.monthDays.length; loweredIndex5 = loweredIndex5 + 1) {
            var monthDaysItem = parameters.recurrence.schedule.monthDays[loweredIndex5];
            monthDaysArray.push(monthDaysItem);
          }
          scheduleValue['monthDays'] = monthDaysArray;
        }
        
        if (parameters.recurrence.schedule.monthlyOccurrences) {
          var monthlyOccurrencesArray = [];
          for (var loweredIndex6 = 0; loweredIndex6 < parameters.recurrence.schedule.monthlyOccurrences.length; loweredIndex6 = loweredIndex6 + 1) {
            var monthlyOccurrencesItem = parameters.recurrence.schedule.monthlyOccurrences[loweredIndex6];
            var jobScheduleMonthlyOccurrenceValue = {};
            monthlyOccurrencesArray.push(jobScheduleMonthlyOccurrenceValue);
            
            jobScheduleMonthlyOccurrenceValue['day'] = monthlyOccurrencesItem.day ? monthlyOccurrencesItem.day.toString() : 'Monday';
            
            if (monthlyOccurrencesItem.occurrence) {
              jobScheduleMonthlyOccurrenceValue['occurrence'] = monthlyOccurrencesItem.occurrence;
            }
          }
          scheduleValue['monthlyOccurrences'] = monthlyOccurrencesArray;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobInstance = {};
        result.job = jobInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          jobInstance.id = idInstance;
        }
        
        var startTimeValue = responseDoc['startTime'];
        if (startTimeValue) {
          var startTimeInstance = startTimeValue;
          jobInstance.startTime = startTimeInstance;
        }
        
        var actionValue2 = responseDoc['action'];
        if (actionValue2) {
          var actionInstance = {};
          jobInstance.action = actionInstance;
          
          var typeValue = actionValue2['type'];
          if (typeValue) {
            var typeInstance = typeValue;
            actionInstance.type = typeInstance;
          }
          
          var retryPolicyValue2 = actionValue2['retryPolicy'];
          if (retryPolicyValue2) {
            var retryPolicyInstance = {};
            actionInstance.retryPolicy = retryPolicyInstance;
            
            var retryTypeValue = retryPolicyValue2['retryType'];
            if (retryTypeValue) {
              var retryTypeInstance = retryTypeValue;
              retryPolicyInstance.retryType = retryTypeInstance;
            }
            
            var retryIntervalValue = retryPolicyValue2['retryInterval'];
            if (retryIntervalValue) {
              var retryIntervalInstance = moment.duration(retryIntervalValue);
              retryPolicyInstance.retryInterval = retryIntervalInstance;
            }
            
            var retryCountValue = retryPolicyValue2['retryCount'];
            if (retryCountValue) {
              var retryCountInstance = retryCountValue;
              retryPolicyInstance.retryCount = retryCountInstance;
            }
          }
          
          var errorActionValue2 = actionValue2['errorAction'];
          if (errorActionValue2) {
            var errorActionInstance = {};
            actionInstance.errorAction = errorActionInstance;
            
            var typeValue2 = errorActionValue2['type'];
            if (typeValue2) {
              var typeInstance2 = typeValue2;
              errorActionInstance.type = typeInstance2;
            }
            
            var requestValue3 = errorActionValue2['request'];
            if (requestValue3) {
              var requestInstance = { headers: {} };
              errorActionInstance.request = requestInstance;
              
              var uriValue = requestValue3['uri'];
              if (uriValue) {
                var uriInstance = uriValue;
                requestInstance.uri = uriInstance;
              }
              
              var methodValue = requestValue3['method'];
              if (methodValue) {
                var methodInstance = methodValue;
                requestInstance.method = methodInstance;
              }
              
              var headersSequenceElement = requestValue3['headers'];
              if (headersSequenceElement) {
                for (var property in headersSequenceElement) {
                  var headersKey3 = property;
                  var headersValue3 = headersSequenceElement[property];
                  requestInstance.headers[headersKey3] = headersValue3;
                }
              }
              
              var bodyValue = requestValue3['body'];
              if (bodyValue) {
                var bodyInstance = bodyValue;
                requestInstance.body = bodyInstance;
              }
            }
            
            var queueMessageValue3 = errorActionValue2['queueMessage'];
            if (queueMessageValue3) {
              var queueMessageInstance = {};
              errorActionInstance.queueMessage = queueMessageInstance;
              
              var storageAccountValue = queueMessageValue3['storageAccount'];
              if (storageAccountValue) {
                var storageAccountInstance = storageAccountValue;
                queueMessageInstance.storageAccountName = storageAccountInstance;
              }
              
              var queueNameValue = queueMessageValue3['queueName'];
              if (queueNameValue) {
                var queueNameInstance = queueNameValue;
                queueMessageInstance.queueName = queueNameInstance;
              }
              
              var sasTokenValue = queueMessageValue3['sasToken'];
              if (sasTokenValue) {
                var sasTokenInstance = sasTokenValue;
                queueMessageInstance.sasToken = sasTokenInstance;
              }
              
              var messageValue = queueMessageValue3['message'];
              if (messageValue) {
                var messageInstance = messageValue;
                queueMessageInstance.message = messageInstance;
              }
            }
          }
          
          var requestValue4 = actionValue2['request'];
          if (requestValue4) {
            var requestInstance2 = { headers: {} };
            actionInstance.request = requestInstance2;
            
            var uriValue2 = requestValue4['uri'];
            if (uriValue2) {
              var uriInstance2 = uriValue2;
              requestInstance2.uri = uriInstance2;
            }
            
            var methodValue2 = requestValue4['method'];
            if (methodValue2) {
              var methodInstance2 = methodValue2;
              requestInstance2.method = methodInstance2;
            }
            
            var headersSequenceElement2 = requestValue4['headers'];
            if (headersSequenceElement2) {
              for (var property2 in headersSequenceElement2) {
                var headersKey4 = property2;
                var headersValue4 = headersSequenceElement2[property2];
                requestInstance2.headers[headersKey4] = headersValue4;
              }
            }
            
            var bodyValue2 = requestValue4['body'];
            if (bodyValue2) {
              var bodyInstance2 = bodyValue2;
              requestInstance2.body = bodyInstance2;
            }
          }
          
          var queueMessageValue4 = actionValue2['queueMessage'];
          if (queueMessageValue4) {
            var queueMessageInstance2 = {};
            actionInstance.queueMessage = queueMessageInstance2;
            
            var storageAccountValue2 = queueMessageValue4['storageAccount'];
            if (storageAccountValue2) {
              var storageAccountInstance2 = storageAccountValue2;
              queueMessageInstance2.storageAccountName = storageAccountInstance2;
            }
            
            var queueNameValue2 = queueMessageValue4['queueName'];
            if (queueNameValue2) {
              var queueNameInstance2 = queueNameValue2;
              queueMessageInstance2.queueName = queueNameInstance2;
            }
            
            var sasTokenValue2 = queueMessageValue4['sasToken'];
            if (sasTokenValue2) {
              var sasTokenInstance2 = sasTokenValue2;
              queueMessageInstance2.sasToken = sasTokenInstance2;
            }
            
            var messageValue2 = queueMessageValue4['message'];
            if (messageValue2) {
              var messageInstance2 = messageValue2;
              queueMessageInstance2.message = messageInstance2;
            }
          }
        }
        
        var recurrenceValue2 = responseDoc['recurrence'];
        if (recurrenceValue2) {
          var recurrenceInstance = {};
          jobInstance.recurrence = recurrenceInstance;
          
          var frequencyValue = recurrenceValue2['frequency'];
          if (frequencyValue) {
            var frequencyInstance = frequencyValue;
            recurrenceInstance.frequency = frequencyInstance;
          }
          
          var intervalValue = recurrenceValue2['interval'];
          if (intervalValue) {
            var intervalInstance = intervalValue;
            recurrenceInstance.interval = intervalInstance;
          }
          
          var countValue = recurrenceValue2['count'];
          if (countValue) {
            var countInstance = countValue;
            recurrenceInstance.count = countInstance;
          }
          
          var endTimeValue = recurrenceValue2['endTime'];
          if (endTimeValue) {
            var endTimeInstance = endTimeValue;
            recurrenceInstance.endTime = endTimeInstance;
          }
          
          var scheduleValue2 = recurrenceValue2['schedule'];
          if (scheduleValue2) {
            var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
            recurrenceInstance.schedule = scheduleInstance;
            
            var minutesArray2 = scheduleValue2['minutes'];
            if (minutesArray2) {
              for (var loweredIndex7 = 0; loweredIndex7 < minutesArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                var minutesValue = minutesArray2[loweredIndex7];
                scheduleInstance.minutes.push(minutesValue);
              }
            }
            
            var hoursArray2 = scheduleValue2['hours'];
            if (hoursArray2) {
              for (var loweredIndex8 = 0; loweredIndex8 < hoursArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                var hoursValue = hoursArray2[loweredIndex8];
                scheduleInstance.hours.push(hoursValue);
              }
            }
            
            var weekDaysArray2 = scheduleValue2['weekDays'];
            if (weekDaysArray2) {
              for (var loweredIndex9 = 0; loweredIndex9 < weekDaysArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                var weekDaysValue = weekDaysArray2[loweredIndex9];
                scheduleInstance.days.push(weekDaysValue);
              }
            }
            
            var monthsArray2 = scheduleValue2['months'];
            if (monthsArray2) {
              for (var loweredIndex10 = 0; loweredIndex10 < monthsArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                var monthsValue = monthsArray2[loweredIndex10];
                scheduleInstance.months.push(monthsValue);
              }
            }
            
            var monthDaysArray2 = scheduleValue2['monthDays'];
            if (monthDaysArray2) {
              for (var loweredIndex11 = 0; loweredIndex11 < monthDaysArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                var monthDaysValue = monthDaysArray2[loweredIndex11];
                scheduleInstance.monthDays.push(monthDaysValue);
              }
            }
            
            var monthlyOccurrencesArray2 = scheduleValue2['monthlyOccurrences'];
            if (monthlyOccurrencesArray2) {
              for (var loweredIndex12 = 0; loweredIndex12 < monthlyOccurrencesArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                var monthlyOccurrencesValue = monthlyOccurrencesArray2[loweredIndex12];
                var jobScheduleMonthlyOccurrenceInstance = {};
                scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                
                var dayValue = monthlyOccurrencesValue['day'];
                if (dayValue) {
                  var dayInstance = dayValue;
                  jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                }
                
                var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                if (occurrenceValue) {
                  var occurrenceInstance = occurrenceValue;
                  jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                }
              }
            }
          }
        }
        
        var statusValue = responseDoc['status'];
        if (statusValue) {
          var statusInstance = {};
          jobInstance.status = statusInstance;
          
          var lastExecutionTimeValue = statusValue['lastExecutionTime'];
          if (lastExecutionTimeValue) {
            var lastExecutionTimeInstance = lastExecutionTimeValue;
            statusInstance.lastExecutionTime = lastExecutionTimeInstance;
          }
          
          var nextExecutionTimeValue = statusValue['nextExecutionTime'];
          if (nextExecutionTimeValue) {
            var nextExecutionTimeInstance = nextExecutionTimeValue;
            statusInstance.nextExecutionTime = nextExecutionTimeInstance;
          }
          
          var executionCountValue = statusValue['executionCount'];
          if (executionCountValue) {
            var executionCountInstance = executionCountValue;
            statusInstance.executionCount = executionCountInstance;
          }
          
          var failureCountValue = statusValue['failureCount'];
          if (failureCountValue) {
            var failureCountInstance = failureCountValue;
            statusInstance.failureCount = failureCountInstance;
          }
          
          var faultedCountValue = statusValue['faultedCount'];
          if (faultedCountValue) {
            var faultedCountInstance = faultedCountValue;
            statusInstance.faultedCount = faultedCountInstance;
          }
        }
        
        var stateValue = responseDoc['state'];
        if (stateValue) {
          var stateInstance = stateValue;
          jobInstance.state = stateInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes a job.
   * 
   * @param {string} jobId Id of the job to delete.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.delete = function(jobId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs/' + jobId.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the definition and status of a job.
   * 
   * @param {string} jobId Id of the job to get.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.get = function(jobId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs/' + jobId.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobInstance = {};
        result.job = jobInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          jobInstance.id = idInstance;
        }
        
        var startTimeValue = responseDoc['startTime'];
        if (startTimeValue) {
          var startTimeInstance = startTimeValue;
          jobInstance.startTime = startTimeInstance;
        }
        
        var actionValue = responseDoc['action'];
        if (actionValue) {
          var actionInstance = {};
          jobInstance.action = actionInstance;
          
          var typeValue = actionValue['type'];
          if (typeValue) {
            var typeInstance = typeValue;
            actionInstance.type = typeInstance;
          }
          
          var retryPolicyValue = actionValue['retryPolicy'];
          if (retryPolicyValue) {
            var retryPolicyInstance = {};
            actionInstance.retryPolicy = retryPolicyInstance;
            
            var retryTypeValue = retryPolicyValue['retryType'];
            if (retryTypeValue) {
              var retryTypeInstance = retryTypeValue;
              retryPolicyInstance.retryType = retryTypeInstance;
            }
            
            var retryIntervalValue = retryPolicyValue['retryInterval'];
            if (retryIntervalValue) {
              var retryIntervalInstance = moment.duration(retryIntervalValue);
              retryPolicyInstance.retryInterval = retryIntervalInstance;
            }
            
            var retryCountValue = retryPolicyValue['retryCount'];
            if (retryCountValue) {
              var retryCountInstance = retryCountValue;
              retryPolicyInstance.retryCount = retryCountInstance;
            }
          }
          
          var errorActionValue = actionValue['errorAction'];
          if (errorActionValue) {
            var errorActionInstance = {};
            actionInstance.errorAction = errorActionInstance;
            
            var typeValue2 = errorActionValue['type'];
            if (typeValue2) {
              var typeInstance2 = typeValue2;
              errorActionInstance.type = typeInstance2;
            }
            
            var requestValue = errorActionValue['request'];
            if (requestValue) {
              var requestInstance = { headers: {} };
              errorActionInstance.request = requestInstance;
              
              var uriValue = requestValue['uri'];
              if (uriValue) {
                var uriInstance = uriValue;
                requestInstance.uri = uriInstance;
              }
              
              var methodValue = requestValue['method'];
              if (methodValue) {
                var methodInstance = methodValue;
                requestInstance.method = methodInstance;
              }
              
              var headersSequenceElement = requestValue['headers'];
              if (headersSequenceElement) {
                for (var property in headersSequenceElement) {
                  var headersKey = property;
                  var headersValue = headersSequenceElement[property];
                  requestInstance.headers[headersKey] = headersValue;
                }
              }
              
              var bodyValue = requestValue['body'];
              if (bodyValue) {
                var bodyInstance = bodyValue;
                requestInstance.body = bodyInstance;
              }
            }
            
            var queueMessageValue = errorActionValue['queueMessage'];
            if (queueMessageValue) {
              var queueMessageInstance = {};
              errorActionInstance.queueMessage = queueMessageInstance;
              
              var storageAccountValue = queueMessageValue['storageAccount'];
              if (storageAccountValue) {
                var storageAccountInstance = storageAccountValue;
                queueMessageInstance.storageAccountName = storageAccountInstance;
              }
              
              var queueNameValue = queueMessageValue['queueName'];
              if (queueNameValue) {
                var queueNameInstance = queueNameValue;
                queueMessageInstance.queueName = queueNameInstance;
              }
              
              var sasTokenValue = queueMessageValue['sasToken'];
              if (sasTokenValue) {
                var sasTokenInstance = sasTokenValue;
                queueMessageInstance.sasToken = sasTokenInstance;
              }
              
              var messageValue = queueMessageValue['message'];
              if (messageValue) {
                var messageInstance = messageValue;
                queueMessageInstance.message = messageInstance;
              }
            }
          }
          
          var requestValue2 = actionValue['request'];
          if (requestValue2) {
            var requestInstance2 = { headers: {} };
            actionInstance.request = requestInstance2;
            
            var uriValue2 = requestValue2['uri'];
            if (uriValue2) {
              var uriInstance2 = uriValue2;
              requestInstance2.uri = uriInstance2;
            }
            
            var methodValue2 = requestValue2['method'];
            if (methodValue2) {
              var methodInstance2 = methodValue2;
              requestInstance2.method = methodInstance2;
            }
            
            var headersSequenceElement2 = requestValue2['headers'];
            if (headersSequenceElement2) {
              for (var property2 in headersSequenceElement2) {
                var headersKey2 = property2;
                var headersValue2 = headersSequenceElement2[property2];
                requestInstance2.headers[headersKey2] = headersValue2;
              }
            }
            
            var bodyValue2 = requestValue2['body'];
            if (bodyValue2) {
              var bodyInstance2 = bodyValue2;
              requestInstance2.body = bodyInstance2;
            }
          }
          
          var queueMessageValue2 = actionValue['queueMessage'];
          if (queueMessageValue2) {
            var queueMessageInstance2 = {};
            actionInstance.queueMessage = queueMessageInstance2;
            
            var storageAccountValue2 = queueMessageValue2['storageAccount'];
            if (storageAccountValue2) {
              var storageAccountInstance2 = storageAccountValue2;
              queueMessageInstance2.storageAccountName = storageAccountInstance2;
            }
            
            var queueNameValue2 = queueMessageValue2['queueName'];
            if (queueNameValue2) {
              var queueNameInstance2 = queueNameValue2;
              queueMessageInstance2.queueName = queueNameInstance2;
            }
            
            var sasTokenValue2 = queueMessageValue2['sasToken'];
            if (sasTokenValue2) {
              var sasTokenInstance2 = sasTokenValue2;
              queueMessageInstance2.sasToken = sasTokenInstance2;
            }
            
            var messageValue2 = queueMessageValue2['message'];
            if (messageValue2) {
              var messageInstance2 = messageValue2;
              queueMessageInstance2.message = messageInstance2;
            }
          }
        }
        
        var recurrenceValue = responseDoc['recurrence'];
        if (recurrenceValue) {
          var recurrenceInstance = {};
          jobInstance.recurrence = recurrenceInstance;
          
          var frequencyValue = recurrenceValue['frequency'];
          if (frequencyValue) {
            var frequencyInstance = frequencyValue;
            recurrenceInstance.frequency = frequencyInstance;
          }
          
          var intervalValue = recurrenceValue['interval'];
          if (intervalValue) {
            var intervalInstance = intervalValue;
            recurrenceInstance.interval = intervalInstance;
          }
          
          var countValue = recurrenceValue['count'];
          if (countValue) {
            var countInstance = countValue;
            recurrenceInstance.count = countInstance;
          }
          
          var endTimeValue = recurrenceValue['endTime'];
          if (endTimeValue) {
            var endTimeInstance = endTimeValue;
            recurrenceInstance.endTime = endTimeInstance;
          }
          
          var scheduleValue = recurrenceValue['schedule'];
          if (scheduleValue) {
            var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
            recurrenceInstance.schedule = scheduleInstance;
            
            var minutesArray = scheduleValue['minutes'];
            if (minutesArray) {
              for (var loweredIndex1 = 0; loweredIndex1 < minutesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var minutesValue = minutesArray[loweredIndex1];
                scheduleInstance.minutes.push(minutesValue);
              }
            }
            
            var hoursArray = scheduleValue['hours'];
            if (hoursArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < hoursArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var hoursValue = hoursArray[loweredIndex2];
                scheduleInstance.hours.push(hoursValue);
              }
            }
            
            var weekDaysArray = scheduleValue['weekDays'];
            if (weekDaysArray) {
              for (var loweredIndex3 = 0; loweredIndex3 < weekDaysArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var weekDaysValue = weekDaysArray[loweredIndex3];
                scheduleInstance.days.push(weekDaysValue);
              }
            }
            
            var monthsArray = scheduleValue['months'];
            if (monthsArray) {
              for (var loweredIndex4 = 0; loweredIndex4 < monthsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                var monthsValue = monthsArray[loweredIndex4];
                scheduleInstance.months.push(monthsValue);
              }
            }
            
            var monthDaysArray = scheduleValue['monthDays'];
            if (monthDaysArray) {
              for (var loweredIndex5 = 0; loweredIndex5 < monthDaysArray.length; loweredIndex5 = loweredIndex5 + 1) {
                var monthDaysValue = monthDaysArray[loweredIndex5];
                scheduleInstance.monthDays.push(monthDaysValue);
              }
            }
            
            var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
            if (monthlyOccurrencesArray) {
              for (var loweredIndex6 = 0; loweredIndex6 < monthlyOccurrencesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex6];
                var jobScheduleMonthlyOccurrenceInstance = {};
                scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                
                var dayValue = monthlyOccurrencesValue['day'];
                if (dayValue) {
                  var dayInstance = dayValue;
                  jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                }
                
                var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                if (occurrenceValue) {
                  var occurrenceInstance = occurrenceValue;
                  jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                }
              }
            }
          }
        }
        
        var statusValue = responseDoc['status'];
        if (statusValue) {
          var statusInstance = {};
          jobInstance.status = statusInstance;
          
          var lastExecutionTimeValue = statusValue['lastExecutionTime'];
          if (lastExecutionTimeValue) {
            var lastExecutionTimeInstance = lastExecutionTimeValue;
            statusInstance.lastExecutionTime = lastExecutionTimeInstance;
          }
          
          var nextExecutionTimeValue = statusValue['nextExecutionTime'];
          if (nextExecutionTimeValue) {
            var nextExecutionTimeInstance = nextExecutionTimeValue;
            statusInstance.nextExecutionTime = nextExecutionTimeInstance;
          }
          
          var executionCountValue = statusValue['executionCount'];
          if (executionCountValue) {
            var executionCountInstance = executionCountValue;
            statusInstance.executionCount = executionCountInstance;
          }
          
          var failureCountValue = statusValue['failureCount'];
          if (failureCountValue) {
            var failureCountInstance = failureCountValue;
            statusInstance.failureCount = failureCountInstance;
          }
          
          var faultedCountValue = statusValue['faultedCount'];
          if (faultedCountValue) {
            var faultedCountInstance = faultedCountValue;
            statusInstance.faultedCount = faultedCountInstance;
          }
        }
        
        var stateValue = responseDoc['state'];
        if (stateValue) {
          var stateInstance = stateValue;
          jobInstance.state = stateInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the execution history of a Job.
   * 
   * @param {string} jobId Id of the job to get the history of.
   * 
   * @param {JobGetHistoryParameters} parameters Parameters supplied to the Get
   * Job History operation.
   * 
   * @param {number} parameters.skip Specify the (0-based) index of the history
   * list from which to begin requesting entries.
   * 
   * @param {number} parameters.top Specify the number of history entries to
   * request, in the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.getHistory = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.skip === null || parameters.skip === undefined) {
      return callback(new Error('parameters.skip cannot be null.'));
    }
    if (parameters.top === null || parameters.top === undefined) {
      return callback(new Error('parameters.top cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs/' + jobId.trim() + '/history?';
    url2 = url2 + 'api-version=2014-04-01';
    url2 = url2 + '&$skip=' + encodeURIComponent(parameters.skip.toString());
    url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { jobHistory: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobHistoryArray = responseDoc;
        if (jobHistoryArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < jobHistoryArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var jobHistoryValue = jobHistoryArray[loweredIndex1];
            var jobHistoryEntryInstance = {};
            result.jobHistory.push(jobHistoryEntryInstance);
            
            var jobIdValue = jobHistoryValue['jobId'];
            if (jobIdValue) {
              var jobIdInstance = jobIdValue;
              jobHistoryEntryInstance.id = jobIdInstance;
            }
            
            var timestampValue = jobHistoryValue['timestamp'];
            if (timestampValue) {
              var timestampInstance = timestampValue;
              jobHistoryEntryInstance.timestamp = timestampInstance;
            }
            
            var startTimeValue = jobHistoryValue['startTime'];
            if (startTimeValue) {
              var startTimeInstance = startTimeValue;
              jobHistoryEntryInstance.startTime = startTimeInstance;
            }
            
            var endTimeValue = jobHistoryValue['endTime'];
            if (endTimeValue) {
              var endTimeInstance = endTimeValue;
              jobHistoryEntryInstance.endTime = endTimeInstance;
            }
            
            var stateValue = jobHistoryValue['state'];
            if (stateValue) {
              var stateInstance = stateValue;
              jobHistoryEntryInstance.state = stateInstance;
            }
            
            var messageValue = jobHistoryValue['message'];
            if (messageValue) {
              var messageInstance = messageValue;
              jobHistoryEntryInstance.message = messageInstance;
            }
            
            var statusValue = jobHistoryValue['status'];
            if (statusValue) {
              var statusInstance = statusValue;
              jobHistoryEntryInstance.status = statusInstance;
            }
            
            var actionNameValue = jobHistoryValue['actionName'];
            if (actionNameValue) {
              var actionNameInstance = actionNameValue;
              jobHistoryEntryInstance.actionName = actionNameInstance;
            }
            
            var repeatCountValue = jobHistoryValue['repeatCount'];
            if (repeatCountValue) {
              var repeatCountInstance = repeatCountValue;
              jobHistoryEntryInstance.repeatCount = repeatCountInstance;
            }
            
            var retryCountValue = jobHistoryValue['retryCount'];
            if (retryCountValue) {
              var retryCountInstance = retryCountValue;
              jobHistoryEntryInstance.retryCount = retryCountInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the execution history of a Job with a filter on the job Status.
   * 
   * @param {string} jobId Id of the job to get the history of.
   * 
   * @param {JobGetHistoryWithFilterParameters} parameters Parameters supplied
   * to the Get Job History With Filter operation.
   * 
   * @param {JobHistoryStatus} parameters.status Filter the job history to have
   * it only return job execution attempts having a particular Status,
   * 'completed' or 'failed'.
   * 
   * @param {number} parameters.skip Specify the (0-based) index of the history
   * list from which to begin requesting entries.
   * 
   * @param {number} parameters.top Specify the number of history entries to
   * request, in the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.getHistoryWithFilter = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.skip === null || parameters.skip === undefined) {
      return callback(new Error('parameters.skip cannot be null.'));
    }
    if (parameters.top === null || parameters.top === undefined) {
      return callback(new Error('parameters.top cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs/' + jobId.trim() + '/history?';
    url2 = url2 + 'api-version=2014-04-01';
    url2 = url2 + '&$filter=status eq ' + encodeURIComponent(parameters.status ? parameters.status.toString() : 'Completed');
    url2 = url2 + '&$skip=' + encodeURIComponent(parameters.skip.toString());
    url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { jobHistory: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobHistoryArray = responseDoc;
        if (jobHistoryArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < jobHistoryArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var jobHistoryValue = jobHistoryArray[loweredIndex1];
            var jobHistoryEntryInstance = {};
            result.jobHistory.push(jobHistoryEntryInstance);
            
            var jobIdValue = jobHistoryValue['jobId'];
            if (jobIdValue) {
              var jobIdInstance = jobIdValue;
              jobHistoryEntryInstance.id = jobIdInstance;
            }
            
            var timestampValue = jobHistoryValue['timestamp'];
            if (timestampValue) {
              var timestampInstance = timestampValue;
              jobHistoryEntryInstance.timestamp = timestampInstance;
            }
            
            var startTimeValue = jobHistoryValue['startTime'];
            if (startTimeValue) {
              var startTimeInstance = startTimeValue;
              jobHistoryEntryInstance.startTime = startTimeInstance;
            }
            
            var endTimeValue = jobHistoryValue['endTime'];
            if (endTimeValue) {
              var endTimeInstance = endTimeValue;
              jobHistoryEntryInstance.endTime = endTimeInstance;
            }
            
            var stateValue = jobHistoryValue['state'];
            if (stateValue) {
              var stateInstance = stateValue;
              jobHistoryEntryInstance.state = stateInstance;
            }
            
            var messageValue = jobHistoryValue['message'];
            if (messageValue) {
              var messageInstance = messageValue;
              jobHistoryEntryInstance.message = messageInstance;
            }
            
            var statusValue = jobHistoryValue['status'];
            if (statusValue) {
              var statusInstance = statusValue;
              jobHistoryEntryInstance.status = statusInstance;
            }
            
            var actionNameValue = jobHistoryValue['actionName'];
            if (actionNameValue) {
              var actionNameInstance = actionNameValue;
              jobHistoryEntryInstance.actionName = actionNameInstance;
            }
            
            var repeatCountValue = jobHistoryValue['repeatCount'];
            if (repeatCountValue) {
              var repeatCountInstance = repeatCountValue;
              jobHistoryEntryInstance.repeatCount = repeatCountInstance;
            }
            
            var retryCountValue = jobHistoryValue['retryCount'];
            if (retryCountValue) {
              var retryCountInstance = retryCountValue;
              jobHistoryEntryInstance.retryCount = retryCountInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all jobs in a job collection.
   * 
   * @param {JobListParameters} parameters Parameters supplied to the List Jobs
   * operation.
   * 
   * @param {number} [parameters.skip] Specify the (0-based) index of the job
   * list from which to begin requesting entries.
   * 
   * @param {number} [parameters.top] Specify the number of jobs to request, in
   * the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.list = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs?';
    url2 = url2 + 'api-version=2014-04-01';
    if (parameters.skip) {
      url2 = url2 + '&$skip=' + encodeURIComponent(parameters.skip.toString());
    }
    if (parameters.top) {
      url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { jobs: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobsArray = responseDoc;
        if (jobsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < jobsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var jobsValue = jobsArray[loweredIndex1];
            var jobInstance = {};
            result.jobs.push(jobInstance);
            
            var idValue = jobsValue['id'];
            if (idValue) {
              var idInstance = idValue;
              jobInstance.id = idInstance;
            }
            
            var startTimeValue = jobsValue['startTime'];
            if (startTimeValue) {
              var startTimeInstance = startTimeValue;
              jobInstance.startTime = startTimeInstance;
            }
            
            var actionValue = jobsValue['action'];
            if (actionValue) {
              var actionInstance = {};
              jobInstance.action = actionInstance;
              
              var typeValue = actionValue['type'];
              if (typeValue) {
                var typeInstance = typeValue;
                actionInstance.type = typeInstance;
              }
              
              var retryPolicyValue = actionValue['retryPolicy'];
              if (retryPolicyValue) {
                var retryPolicyInstance = {};
                actionInstance.retryPolicy = retryPolicyInstance;
                
                var retryTypeValue = retryPolicyValue['retryType'];
                if (retryTypeValue) {
                  var retryTypeInstance = retryTypeValue;
                  retryPolicyInstance.retryType = retryTypeInstance;
                }
                
                var retryIntervalValue = retryPolicyValue['retryInterval'];
                if (retryIntervalValue) {
                  var retryIntervalInstance = moment.duration(retryIntervalValue);
                  retryPolicyInstance.retryInterval = retryIntervalInstance;
                }
                
                var retryCountValue = retryPolicyValue['retryCount'];
                if (retryCountValue) {
                  var retryCountInstance = retryCountValue;
                  retryPolicyInstance.retryCount = retryCountInstance;
                }
              }
              
              var errorActionValue = actionValue['errorAction'];
              if (errorActionValue) {
                var errorActionInstance = {};
                actionInstance.errorAction = errorActionInstance;
                
                var typeValue2 = errorActionValue['type'];
                if (typeValue2) {
                  var typeInstance2 = typeValue2;
                  errorActionInstance.type = typeInstance2;
                }
                
                var requestValue = errorActionValue['request'];
                if (requestValue) {
                  var requestInstance = { headers: {} };
                  errorActionInstance.request = requestInstance;
                  
                  var uriValue = requestValue['uri'];
                  if (uriValue) {
                    var uriInstance = uriValue;
                    requestInstance.uri = uriInstance;
                  }
                  
                  var methodValue = requestValue['method'];
                  if (methodValue) {
                    var methodInstance = methodValue;
                    requestInstance.method = methodInstance;
                  }
                  
                  var headersSequenceElement = requestValue['headers'];
                  if (headersSequenceElement) {
                    for (var property in headersSequenceElement) {
                      var headersKey = property;
                      var headersValue = headersSequenceElement[property];
                      requestInstance.headers[headersKey] = headersValue;
                    }
                  }
                  
                  var bodyValue = requestValue['body'];
                  if (bodyValue) {
                    var bodyInstance = bodyValue;
                    requestInstance.body = bodyInstance;
                  }
                }
                
                var queueMessageValue = errorActionValue['queueMessage'];
                if (queueMessageValue) {
                  var queueMessageInstance = {};
                  errorActionInstance.queueMessage = queueMessageInstance;
                  
                  var storageAccountValue = queueMessageValue['storageAccount'];
                  if (storageAccountValue) {
                    var storageAccountInstance = storageAccountValue;
                    queueMessageInstance.storageAccountName = storageAccountInstance;
                  }
                  
                  var queueNameValue = queueMessageValue['queueName'];
                  if (queueNameValue) {
                    var queueNameInstance = queueNameValue;
                    queueMessageInstance.queueName = queueNameInstance;
                  }
                  
                  var sasTokenValue = queueMessageValue['sasToken'];
                  if (sasTokenValue) {
                    var sasTokenInstance = sasTokenValue;
                    queueMessageInstance.sasToken = sasTokenInstance;
                  }
                  
                  var messageValue = queueMessageValue['message'];
                  if (messageValue) {
                    var messageInstance = messageValue;
                    queueMessageInstance.message = messageInstance;
                  }
                }
              }
              
              var requestValue2 = actionValue['request'];
              if (requestValue2) {
                var requestInstance2 = { headers: {} };
                actionInstance.request = requestInstance2;
                
                var uriValue2 = requestValue2['uri'];
                if (uriValue2) {
                  var uriInstance2 = uriValue2;
                  requestInstance2.uri = uriInstance2;
                }
                
                var methodValue2 = requestValue2['method'];
                if (methodValue2) {
                  var methodInstance2 = methodValue2;
                  requestInstance2.method = methodInstance2;
                }
                
                var headersSequenceElement2 = requestValue2['headers'];
                if (headersSequenceElement2) {
                  for (var property2 in headersSequenceElement2) {
                    var headersKey2 = property2;
                    var headersValue2 = headersSequenceElement2[property2];
                    requestInstance2.headers[headersKey2] = headersValue2;
                  }
                }
                
                var bodyValue2 = requestValue2['body'];
                if (bodyValue2) {
                  var bodyInstance2 = bodyValue2;
                  requestInstance2.body = bodyInstance2;
                }
              }
              
              var queueMessageValue2 = actionValue['queueMessage'];
              if (queueMessageValue2) {
                var queueMessageInstance2 = {};
                actionInstance.queueMessage = queueMessageInstance2;
                
                var storageAccountValue2 = queueMessageValue2['storageAccount'];
                if (storageAccountValue2) {
                  var storageAccountInstance2 = storageAccountValue2;
                  queueMessageInstance2.storageAccountName = storageAccountInstance2;
                }
                
                var queueNameValue2 = queueMessageValue2['queueName'];
                if (queueNameValue2) {
                  var queueNameInstance2 = queueNameValue2;
                  queueMessageInstance2.queueName = queueNameInstance2;
                }
                
                var sasTokenValue2 = queueMessageValue2['sasToken'];
                if (sasTokenValue2) {
                  var sasTokenInstance2 = sasTokenValue2;
                  queueMessageInstance2.sasToken = sasTokenInstance2;
                }
                
                var messageValue2 = queueMessageValue2['message'];
                if (messageValue2) {
                  var messageInstance2 = messageValue2;
                  queueMessageInstance2.message = messageInstance2;
                }
              }
            }
            
            var recurrenceValue = jobsValue['recurrence'];
            if (recurrenceValue) {
              var recurrenceInstance = {};
              jobInstance.recurrence = recurrenceInstance;
              
              var frequencyValue = recurrenceValue['frequency'];
              if (frequencyValue) {
                var frequencyInstance = frequencyValue;
                recurrenceInstance.frequency = frequencyInstance;
              }
              
              var intervalValue = recurrenceValue['interval'];
              if (intervalValue) {
                var intervalInstance = intervalValue;
                recurrenceInstance.interval = intervalInstance;
              }
              
              var countValue = recurrenceValue['count'];
              if (countValue) {
                var countInstance = countValue;
                recurrenceInstance.count = countInstance;
              }
              
              var endTimeValue = recurrenceValue['endTime'];
              if (endTimeValue) {
                var endTimeInstance = endTimeValue;
                recurrenceInstance.endTime = endTimeInstance;
              }
              
              var scheduleValue = recurrenceValue['schedule'];
              if (scheduleValue) {
                var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
                recurrenceInstance.schedule = scheduleInstance;
                
                var minutesArray = scheduleValue['minutes'];
                if (minutesArray) {
                  for (var loweredIndex2 = 0; loweredIndex2 < minutesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var minutesValue = minutesArray[loweredIndex2];
                    scheduleInstance.minutes.push(minutesValue);
                  }
                }
                
                var hoursArray = scheduleValue['hours'];
                if (hoursArray) {
                  for (var loweredIndex3 = 0; loweredIndex3 < hoursArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var hoursValue = hoursArray[loweredIndex3];
                    scheduleInstance.hours.push(hoursValue);
                  }
                }
                
                var weekDaysArray = scheduleValue['weekDays'];
                if (weekDaysArray) {
                  for (var loweredIndex4 = 0; loweredIndex4 < weekDaysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var weekDaysValue = weekDaysArray[loweredIndex4];
                    scheduleInstance.days.push(weekDaysValue);
                  }
                }
                
                var monthsArray = scheduleValue['months'];
                if (monthsArray) {
                  for (var loweredIndex5 = 0; loweredIndex5 < monthsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var monthsValue = monthsArray[loweredIndex5];
                    scheduleInstance.months.push(monthsValue);
                  }
                }
                
                var monthDaysArray = scheduleValue['monthDays'];
                if (monthDaysArray) {
                  for (var loweredIndex6 = 0; loweredIndex6 < monthDaysArray.length; loweredIndex6 = loweredIndex6 + 1) {
                    var monthDaysValue = monthDaysArray[loweredIndex6];
                    scheduleInstance.monthDays.push(monthDaysValue);
                  }
                }
                
                var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
                if (monthlyOccurrencesArray) {
                  for (var loweredIndex7 = 0; loweredIndex7 < monthlyOccurrencesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                    var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex7];
                    var jobScheduleMonthlyOccurrenceInstance = {};
                    scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                    
                    var dayValue = monthlyOccurrencesValue['day'];
                    if (dayValue) {
                      var dayInstance = dayValue;
                      jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                    }
                    
                    var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                    if (occurrenceValue) {
                      var occurrenceInstance = occurrenceValue;
                      jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                    }
                  }
                }
              }
            }
            
            var statusValue = jobsValue['status'];
            if (statusValue) {
              var statusInstance = {};
              jobInstance.status = statusInstance;
              
              var lastExecutionTimeValue = statusValue['lastExecutionTime'];
              if (lastExecutionTimeValue) {
                var lastExecutionTimeInstance = lastExecutionTimeValue;
                statusInstance.lastExecutionTime = lastExecutionTimeInstance;
              }
              
              var nextExecutionTimeValue = statusValue['nextExecutionTime'];
              if (nextExecutionTimeValue) {
                var nextExecutionTimeInstance = nextExecutionTimeValue;
                statusInstance.nextExecutionTime = nextExecutionTimeInstance;
              }
              
              var executionCountValue = statusValue['executionCount'];
              if (executionCountValue) {
                var executionCountInstance = executionCountValue;
                statusInstance.executionCount = executionCountInstance;
              }
              
              var failureCountValue = statusValue['failureCount'];
              if (failureCountValue) {
                var failureCountInstance = failureCountValue;
                statusInstance.failureCount = failureCountInstance;
              }
              
              var faultedCountValue = statusValue['faultedCount'];
              if (faultedCountValue) {
                var faultedCountInstance = faultedCountValue;
                statusInstance.faultedCount = faultedCountInstance;
              }
            }
            
            var stateValue = jobsValue['state'];
            if (stateValue) {
              var stateInstance = stateValue;
              jobInstance.state = stateInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of jobs in a job collection matching a filter on job state.
   * 
   * @param {JobListWithFilterParameters} parameters Parameters supplied to the
   * List Jobs with filter operation.
   * 
   * @param {JobState} parameters.state Filter the job history to have it only
   * return job execution attempts having a particular State, enabled,
   * disabled, faulted, or completed.
   * 
   * @param {number} [parameters.skip] Specify the (0-based) index of the job
   * list from which to begin requesting entries.
   * 
   * @param {number} [parameters.top] Specify the number of jobs to request, in
   * the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.listWithFilter = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs?';
    url2 = url2 + 'api-version=2014-04-01';
    url2 = url2 + '&$filter=state eq ' + encodeURIComponent(parameters.state ? parameters.state.toString() : 'Enabled');
    if (parameters.skip) {
      url2 = url2 + '&$skip=' + encodeURIComponent(parameters.skip.toString());
    }
    if (parameters.top) {
      url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { jobs: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobsArray = responseDoc;
        if (jobsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < jobsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var jobsValue = jobsArray[loweredIndex1];
            var jobInstance = {};
            result.jobs.push(jobInstance);
            
            var idValue = jobsValue['id'];
            if (idValue) {
              var idInstance = idValue;
              jobInstance.id = idInstance;
            }
            
            var startTimeValue = jobsValue['startTime'];
            if (startTimeValue) {
              var startTimeInstance = startTimeValue;
              jobInstance.startTime = startTimeInstance;
            }
            
            var actionValue = jobsValue['action'];
            if (actionValue) {
              var actionInstance = {};
              jobInstance.action = actionInstance;
              
              var typeValue = actionValue['type'];
              if (typeValue) {
                var typeInstance = typeValue;
                actionInstance.type = typeInstance;
              }
              
              var retryPolicyValue = actionValue['retryPolicy'];
              if (retryPolicyValue) {
                var retryPolicyInstance = {};
                actionInstance.retryPolicy = retryPolicyInstance;
                
                var retryTypeValue = retryPolicyValue['retryType'];
                if (retryTypeValue) {
                  var retryTypeInstance = retryTypeValue;
                  retryPolicyInstance.retryType = retryTypeInstance;
                }
                
                var retryIntervalValue = retryPolicyValue['retryInterval'];
                if (retryIntervalValue) {
                  var retryIntervalInstance = moment.duration(retryIntervalValue);
                  retryPolicyInstance.retryInterval = retryIntervalInstance;
                }
                
                var retryCountValue = retryPolicyValue['retryCount'];
                if (retryCountValue) {
                  var retryCountInstance = retryCountValue;
                  retryPolicyInstance.retryCount = retryCountInstance;
                }
              }
              
              var errorActionValue = actionValue['errorAction'];
              if (errorActionValue) {
                var errorActionInstance = {};
                actionInstance.errorAction = errorActionInstance;
                
                var typeValue2 = errorActionValue['type'];
                if (typeValue2) {
                  var typeInstance2 = typeValue2;
                  errorActionInstance.type = typeInstance2;
                }
                
                var requestValue = errorActionValue['request'];
                if (requestValue) {
                  var requestInstance = { headers: {} };
                  errorActionInstance.request = requestInstance;
                  
                  var uriValue = requestValue['uri'];
                  if (uriValue) {
                    var uriInstance = uriValue;
                    requestInstance.uri = uriInstance;
                  }
                  
                  var methodValue = requestValue['method'];
                  if (methodValue) {
                    var methodInstance = methodValue;
                    requestInstance.method = methodInstance;
                  }
                  
                  var headersSequenceElement = requestValue['headers'];
                  if (headersSequenceElement) {
                    for (var property in headersSequenceElement) {
                      var headersKey = property;
                      var headersValue = headersSequenceElement[property];
                      requestInstance.headers[headersKey] = headersValue;
                    }
                  }
                  
                  var bodyValue = requestValue['body'];
                  if (bodyValue) {
                    var bodyInstance = bodyValue;
                    requestInstance.body = bodyInstance;
                  }
                }
                
                var queueMessageValue = errorActionValue['queueMessage'];
                if (queueMessageValue) {
                  var queueMessageInstance = {};
                  errorActionInstance.queueMessage = queueMessageInstance;
                  
                  var storageAccountValue = queueMessageValue['storageAccount'];
                  if (storageAccountValue) {
                    var storageAccountInstance = storageAccountValue;
                    queueMessageInstance.storageAccountName = storageAccountInstance;
                  }
                  
                  var queueNameValue = queueMessageValue['queueName'];
                  if (queueNameValue) {
                    var queueNameInstance = queueNameValue;
                    queueMessageInstance.queueName = queueNameInstance;
                  }
                  
                  var sasTokenValue = queueMessageValue['sasToken'];
                  if (sasTokenValue) {
                    var sasTokenInstance = sasTokenValue;
                    queueMessageInstance.sasToken = sasTokenInstance;
                  }
                  
                  var messageValue = queueMessageValue['message'];
                  if (messageValue) {
                    var messageInstance = messageValue;
                    queueMessageInstance.message = messageInstance;
                  }
                }
              }
              
              var requestValue2 = actionValue['request'];
              if (requestValue2) {
                var requestInstance2 = { headers: {} };
                actionInstance.request = requestInstance2;
                
                var uriValue2 = requestValue2['uri'];
                if (uriValue2) {
                  var uriInstance2 = uriValue2;
                  requestInstance2.uri = uriInstance2;
                }
                
                var methodValue2 = requestValue2['method'];
                if (methodValue2) {
                  var methodInstance2 = methodValue2;
                  requestInstance2.method = methodInstance2;
                }
                
                var headersSequenceElement2 = requestValue2['headers'];
                if (headersSequenceElement2) {
                  for (var property2 in headersSequenceElement2) {
                    var headersKey2 = property2;
                    var headersValue2 = headersSequenceElement2[property2];
                    requestInstance2.headers[headersKey2] = headersValue2;
                  }
                }
                
                var bodyValue2 = requestValue2['body'];
                if (bodyValue2) {
                  var bodyInstance2 = bodyValue2;
                  requestInstance2.body = bodyInstance2;
                }
              }
              
              var queueMessageValue2 = actionValue['queueMessage'];
              if (queueMessageValue2) {
                var queueMessageInstance2 = {};
                actionInstance.queueMessage = queueMessageInstance2;
                
                var storageAccountValue2 = queueMessageValue2['storageAccount'];
                if (storageAccountValue2) {
                  var storageAccountInstance2 = storageAccountValue2;
                  queueMessageInstance2.storageAccountName = storageAccountInstance2;
                }
                
                var queueNameValue2 = queueMessageValue2['queueName'];
                if (queueNameValue2) {
                  var queueNameInstance2 = queueNameValue2;
                  queueMessageInstance2.queueName = queueNameInstance2;
                }
                
                var sasTokenValue2 = queueMessageValue2['sasToken'];
                if (sasTokenValue2) {
                  var sasTokenInstance2 = sasTokenValue2;
                  queueMessageInstance2.sasToken = sasTokenInstance2;
                }
                
                var messageValue2 = queueMessageValue2['message'];
                if (messageValue2) {
                  var messageInstance2 = messageValue2;
                  queueMessageInstance2.message = messageInstance2;
                }
              }
            }
            
            var recurrenceValue = jobsValue['recurrence'];
            if (recurrenceValue) {
              var recurrenceInstance = {};
              jobInstance.recurrence = recurrenceInstance;
              
              var frequencyValue = recurrenceValue['frequency'];
              if (frequencyValue) {
                var frequencyInstance = frequencyValue;
                recurrenceInstance.frequency = frequencyInstance;
              }
              
              var intervalValue = recurrenceValue['interval'];
              if (intervalValue) {
                var intervalInstance = intervalValue;
                recurrenceInstance.interval = intervalInstance;
              }
              
              var countValue = recurrenceValue['count'];
              if (countValue) {
                var countInstance = countValue;
                recurrenceInstance.count = countInstance;
              }
              
              var endTimeValue = recurrenceValue['endTime'];
              if (endTimeValue) {
                var endTimeInstance = endTimeValue;
                recurrenceInstance.endTime = endTimeInstance;
              }
              
              var scheduleValue = recurrenceValue['schedule'];
              if (scheduleValue) {
                var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
                recurrenceInstance.schedule = scheduleInstance;
                
                var minutesArray = scheduleValue['minutes'];
                if (minutesArray) {
                  for (var loweredIndex2 = 0; loweredIndex2 < minutesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var minutesValue = minutesArray[loweredIndex2];
                    scheduleInstance.minutes.push(minutesValue);
                  }
                }
                
                var hoursArray = scheduleValue['hours'];
                if (hoursArray) {
                  for (var loweredIndex3 = 0; loweredIndex3 < hoursArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var hoursValue = hoursArray[loweredIndex3];
                    scheduleInstance.hours.push(hoursValue);
                  }
                }
                
                var weekDaysArray = scheduleValue['weekDays'];
                if (weekDaysArray) {
                  for (var loweredIndex4 = 0; loweredIndex4 < weekDaysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var weekDaysValue = weekDaysArray[loweredIndex4];
                    scheduleInstance.days.push(weekDaysValue);
                  }
                }
                
                var monthsArray = scheduleValue['months'];
                if (monthsArray) {
                  for (var loweredIndex5 = 0; loweredIndex5 < monthsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var monthsValue = monthsArray[loweredIndex5];
                    scheduleInstance.months.push(monthsValue);
                  }
                }
                
                var monthDaysArray = scheduleValue['monthDays'];
                if (monthDaysArray) {
                  for (var loweredIndex6 = 0; loweredIndex6 < monthDaysArray.length; loweredIndex6 = loweredIndex6 + 1) {
                    var monthDaysValue = monthDaysArray[loweredIndex6];
                    scheduleInstance.monthDays.push(monthDaysValue);
                  }
                }
                
                var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
                if (monthlyOccurrencesArray) {
                  for (var loweredIndex7 = 0; loweredIndex7 < monthlyOccurrencesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                    var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex7];
                    var jobScheduleMonthlyOccurrenceInstance = {};
                    scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                    
                    var dayValue = monthlyOccurrencesValue['day'];
                    if (dayValue) {
                      var dayInstance = dayValue;
                      jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                    }
                    
                    var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                    if (occurrenceValue) {
                      var occurrenceInstance = occurrenceValue;
                      jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                    }
                  }
                }
              }
            }
            
            var statusValue = jobsValue['status'];
            if (statusValue) {
              var statusInstance = {};
              jobInstance.status = statusInstance;
              
              var lastExecutionTimeValue = statusValue['lastExecutionTime'];
              if (lastExecutionTimeValue) {
                var lastExecutionTimeInstance = lastExecutionTimeValue;
                statusInstance.lastExecutionTime = lastExecutionTimeInstance;
              }
              
              var nextExecutionTimeValue = statusValue['nextExecutionTime'];
              if (nextExecutionTimeValue) {
                var nextExecutionTimeInstance = nextExecutionTimeValue;
                statusInstance.nextExecutionTime = nextExecutionTimeInstance;
              }
              
              var executionCountValue = statusValue['executionCount'];
              if (executionCountValue) {
                var executionCountInstance = executionCountValue;
                statusInstance.executionCount = executionCountInstance;
              }
              
              var failureCountValue = statusValue['failureCount'];
              if (failureCountValue) {
                var failureCountInstance = failureCountValue;
                statusInstance.failureCount = failureCountInstance;
              }
              
              var faultedCountValue = statusValue['faultedCount'];
              if (faultedCountValue) {
                var faultedCountInstance = faultedCountValue;
                statusInstance.faultedCount = faultedCountInstance;
              }
            }
            
            var stateValue = jobsValue['state'];
            if (stateValue) {
              var stateInstance = stateValue;
              jobInstance.state = stateInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Update the state of all jobs in a job collections.
   * 
   * @param {JobCollectionJobsUpdateStateParameters} parameters Parameters
   * supplied to the Update Jobs State operation.
   * 
   * @param {JobState} parameters.state New state to update to: 'enabled' or
   * 'disabled'.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.updateJobCollectionState = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobCollectionJobsUpdateStateParametersValue = {};
    requestDoc = jobCollectionJobsUpdateStateParametersValue;
    
    if (typeof(parameters.state) !== 'undefined') {
      jobCollectionJobsUpdateStateParametersValue['state'] = parameters.state ? parameters.state.toString() : 'Enabled';
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { jobs: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobsArray = responseDoc;
        if (jobsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < jobsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var jobsValue = jobsArray[loweredIndex1];
            var jobInstance = {};
            result.jobs.push(jobInstance);
            
            var idValue = jobsValue['id'];
            if (idValue) {
              var idInstance = idValue;
              jobInstance.id = idInstance;
            }
            
            var startTimeValue = jobsValue['startTime'];
            if (startTimeValue) {
              var startTimeInstance = startTimeValue;
              jobInstance.startTime = startTimeInstance;
            }
            
            var actionValue = jobsValue['action'];
            if (actionValue) {
              var actionInstance = {};
              jobInstance.action = actionInstance;
              
              var typeValue = actionValue['type'];
              if (typeValue) {
                var typeInstance = typeValue;
                actionInstance.type = typeInstance;
              }
              
              var retryPolicyValue = actionValue['retryPolicy'];
              if (retryPolicyValue) {
                var retryPolicyInstance = {};
                actionInstance.retryPolicy = retryPolicyInstance;
                
                var retryTypeValue = retryPolicyValue['retryType'];
                if (retryTypeValue) {
                  var retryTypeInstance = retryTypeValue;
                  retryPolicyInstance.retryType = retryTypeInstance;
                }
                
                var retryIntervalValue = retryPolicyValue['retryInterval'];
                if (retryIntervalValue) {
                  var retryIntervalInstance = moment.duration(retryIntervalValue);
                  retryPolicyInstance.retryInterval = retryIntervalInstance;
                }
                
                var retryCountValue = retryPolicyValue['retryCount'];
                if (retryCountValue) {
                  var retryCountInstance = retryCountValue;
                  retryPolicyInstance.retryCount = retryCountInstance;
                }
              }
              
              var errorActionValue = actionValue['errorAction'];
              if (errorActionValue) {
                var errorActionInstance = {};
                actionInstance.errorAction = errorActionInstance;
                
                var typeValue2 = errorActionValue['type'];
                if (typeValue2) {
                  var typeInstance2 = typeValue2;
                  errorActionInstance.type = typeInstance2;
                }
                
                var requestValue = errorActionValue['request'];
                if (requestValue) {
                  var requestInstance = { headers: {} };
                  errorActionInstance.request = requestInstance;
                  
                  var uriValue = requestValue['uri'];
                  if (uriValue) {
                    var uriInstance = uriValue;
                    requestInstance.uri = uriInstance;
                  }
                  
                  var methodValue = requestValue['method'];
                  if (methodValue) {
                    var methodInstance = methodValue;
                    requestInstance.method = methodInstance;
                  }
                  
                  var headersSequenceElement = requestValue['headers'];
                  if (headersSequenceElement) {
                    for (var property in headersSequenceElement) {
                      var headersKey = property;
                      var headersValue = headersSequenceElement[property];
                      requestInstance.headers[headersKey] = headersValue;
                    }
                  }
                  
                  var bodyValue = requestValue['body'];
                  if (bodyValue) {
                    var bodyInstance = bodyValue;
                    requestInstance.body = bodyInstance;
                  }
                }
                
                var queueMessageValue = errorActionValue['queueMessage'];
                if (queueMessageValue) {
                  var queueMessageInstance = {};
                  errorActionInstance.queueMessage = queueMessageInstance;
                  
                  var storageAccountValue = queueMessageValue['storageAccount'];
                  if (storageAccountValue) {
                    var storageAccountInstance = storageAccountValue;
                    queueMessageInstance.storageAccountName = storageAccountInstance;
                  }
                  
                  var queueNameValue = queueMessageValue['queueName'];
                  if (queueNameValue) {
                    var queueNameInstance = queueNameValue;
                    queueMessageInstance.queueName = queueNameInstance;
                  }
                  
                  var sasTokenValue = queueMessageValue['sasToken'];
                  if (sasTokenValue) {
                    var sasTokenInstance = sasTokenValue;
                    queueMessageInstance.sasToken = sasTokenInstance;
                  }
                  
                  var messageValue = queueMessageValue['message'];
                  if (messageValue) {
                    var messageInstance = messageValue;
                    queueMessageInstance.message = messageInstance;
                  }
                }
              }
              
              var requestValue2 = actionValue['request'];
              if (requestValue2) {
                var requestInstance2 = { headers: {} };
                actionInstance.request = requestInstance2;
                
                var uriValue2 = requestValue2['uri'];
                if (uriValue2) {
                  var uriInstance2 = uriValue2;
                  requestInstance2.uri = uriInstance2;
                }
                
                var methodValue2 = requestValue2['method'];
                if (methodValue2) {
                  var methodInstance2 = methodValue2;
                  requestInstance2.method = methodInstance2;
                }
                
                var headersSequenceElement2 = requestValue2['headers'];
                if (headersSequenceElement2) {
                  for (var property2 in headersSequenceElement2) {
                    var headersKey2 = property2;
                    var headersValue2 = headersSequenceElement2[property2];
                    requestInstance2.headers[headersKey2] = headersValue2;
                  }
                }
                
                var bodyValue2 = requestValue2['body'];
                if (bodyValue2) {
                  var bodyInstance2 = bodyValue2;
                  requestInstance2.body = bodyInstance2;
                }
              }
              
              var queueMessageValue2 = actionValue['queueMessage'];
              if (queueMessageValue2) {
                var queueMessageInstance2 = {};
                actionInstance.queueMessage = queueMessageInstance2;
                
                var storageAccountValue2 = queueMessageValue2['storageAccount'];
                if (storageAccountValue2) {
                  var storageAccountInstance2 = storageAccountValue2;
                  queueMessageInstance2.storageAccountName = storageAccountInstance2;
                }
                
                var queueNameValue2 = queueMessageValue2['queueName'];
                if (queueNameValue2) {
                  var queueNameInstance2 = queueNameValue2;
                  queueMessageInstance2.queueName = queueNameInstance2;
                }
                
                var sasTokenValue2 = queueMessageValue2['sasToken'];
                if (sasTokenValue2) {
                  var sasTokenInstance2 = sasTokenValue2;
                  queueMessageInstance2.sasToken = sasTokenInstance2;
                }
                
                var messageValue2 = queueMessageValue2['message'];
                if (messageValue2) {
                  var messageInstance2 = messageValue2;
                  queueMessageInstance2.message = messageInstance2;
                }
              }
            }
            
            var recurrenceValue = jobsValue['recurrence'];
            if (recurrenceValue) {
              var recurrenceInstance = {};
              jobInstance.recurrence = recurrenceInstance;
              
              var frequencyValue = recurrenceValue['frequency'];
              if (frequencyValue) {
                var frequencyInstance = frequencyValue;
                recurrenceInstance.frequency = frequencyInstance;
              }
              
              var intervalValue = recurrenceValue['interval'];
              if (intervalValue) {
                var intervalInstance = intervalValue;
                recurrenceInstance.interval = intervalInstance;
              }
              
              var countValue = recurrenceValue['count'];
              if (countValue) {
                var countInstance = countValue;
                recurrenceInstance.count = countInstance;
              }
              
              var endTimeValue = recurrenceValue['endTime'];
              if (endTimeValue) {
                var endTimeInstance = endTimeValue;
                recurrenceInstance.endTime = endTimeInstance;
              }
              
              var scheduleValue = recurrenceValue['schedule'];
              if (scheduleValue) {
                var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
                recurrenceInstance.schedule = scheduleInstance;
                
                var minutesArray = scheduleValue['minutes'];
                if (minutesArray) {
                  for (var loweredIndex2 = 0; loweredIndex2 < minutesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var minutesValue = minutesArray[loweredIndex2];
                    scheduleInstance.minutes.push(minutesValue);
                  }
                }
                
                var hoursArray = scheduleValue['hours'];
                if (hoursArray) {
                  for (var loweredIndex3 = 0; loweredIndex3 < hoursArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var hoursValue = hoursArray[loweredIndex3];
                    scheduleInstance.hours.push(hoursValue);
                  }
                }
                
                var weekDaysArray = scheduleValue['weekDays'];
                if (weekDaysArray) {
                  for (var loweredIndex4 = 0; loweredIndex4 < weekDaysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var weekDaysValue = weekDaysArray[loweredIndex4];
                    scheduleInstance.days.push(weekDaysValue);
                  }
                }
                
                var monthsArray = scheduleValue['months'];
                if (monthsArray) {
                  for (var loweredIndex5 = 0; loweredIndex5 < monthsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var monthsValue = monthsArray[loweredIndex5];
                    scheduleInstance.months.push(monthsValue);
                  }
                }
                
                var monthDaysArray = scheduleValue['monthDays'];
                if (monthDaysArray) {
                  for (var loweredIndex6 = 0; loweredIndex6 < monthDaysArray.length; loweredIndex6 = loweredIndex6 + 1) {
                    var monthDaysValue = monthDaysArray[loweredIndex6];
                    scheduleInstance.monthDays.push(monthDaysValue);
                  }
                }
                
                var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
                if (monthlyOccurrencesArray) {
                  for (var loweredIndex7 = 0; loweredIndex7 < monthlyOccurrencesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                    var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex7];
                    var jobScheduleMonthlyOccurrenceInstance = {};
                    scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                    
                    var dayValue = monthlyOccurrencesValue['day'];
                    if (dayValue) {
                      var dayInstance = dayValue;
                      jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                    }
                    
                    var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                    if (occurrenceValue) {
                      var occurrenceInstance = occurrenceValue;
                      jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                    }
                  }
                }
              }
            }
            
            var statusValue = jobsValue['status'];
            if (statusValue) {
              var statusInstance = {};
              jobInstance.status = statusInstance;
              
              var lastExecutionTimeValue = statusValue['lastExecutionTime'];
              if (lastExecutionTimeValue) {
                var lastExecutionTimeInstance = lastExecutionTimeValue;
                statusInstance.lastExecutionTime = lastExecutionTimeInstance;
              }
              
              var nextExecutionTimeValue = statusValue['nextExecutionTime'];
              if (nextExecutionTimeValue) {
                var nextExecutionTimeInstance = nextExecutionTimeValue;
                statusInstance.nextExecutionTime = nextExecutionTimeInstance;
              }
              
              var executionCountValue = statusValue['executionCount'];
              if (executionCountValue) {
                var executionCountInstance = executionCountValue;
                statusInstance.executionCount = executionCountInstance;
              }
              
              var failureCountValue = statusValue['failureCount'];
              if (failureCountValue) {
                var failureCountInstance = failureCountValue;
                statusInstance.failureCount = failureCountInstance;
              }
              
              var faultedCountValue = statusValue['faultedCount'];
              if (faultedCountValue) {
                var faultedCountInstance = faultedCountValue;
                statusInstance.faultedCount = faultedCountInstance;
              }
            }
            
            var stateValue = jobsValue['state'];
            if (stateValue) {
              var stateInstance = stateValue;
              jobInstance.state = stateInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Update the state of a job.
   * 
   * @param {string} jobId Id of the job to update.
   * 
   * @param {JobUpdateStateParameters} parameters Parameters supplied to the
   * Update Job State operation.
   * 
   * @param {JobState} parameters.state New state to update to: 'enabled' or
   * 'disabled'.
   * 
   * @param {string} [parameters.updateStateReason] A description of the
   * circumstances associated with this job state update.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.updateState = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/cloudservices/' + this.client.cloudServiceName.trim() + '/resources/scheduler/~/JobCollections/' + this.client.jobCollectionName.trim() + '/jobs/' + jobId.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobUpdateStateParametersValue = {};
    requestDoc = jobUpdateStateParametersValue;
    
    jobUpdateStateParametersValue['state'] = parameters.state ? parameters.state.toString() : 'Enabled';
    
    if (parameters.updateStateReason) {
      jobUpdateStateParametersValue['stateDetails'] = parameters.updateStateReason;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var jobInstance = {};
        result.job = jobInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          jobInstance.id = idInstance;
        }
        
        var startTimeValue = responseDoc['startTime'];
        if (startTimeValue) {
          var startTimeInstance = startTimeValue;
          jobInstance.startTime = startTimeInstance;
        }
        
        var actionValue = responseDoc['action'];
        if (actionValue) {
          var actionInstance = {};
          jobInstance.action = actionInstance;
          
          var typeValue = actionValue['type'];
          if (typeValue) {
            var typeInstance = typeValue;
            actionInstance.type = typeInstance;
          }
          
          var retryPolicyValue = actionValue['retryPolicy'];
          if (retryPolicyValue) {
            var retryPolicyInstance = {};
            actionInstance.retryPolicy = retryPolicyInstance;
            
            var retryTypeValue = retryPolicyValue['retryType'];
            if (retryTypeValue) {
              var retryTypeInstance = retryTypeValue;
              retryPolicyInstance.retryType = retryTypeInstance;
            }
            
            var retryIntervalValue = retryPolicyValue['retryInterval'];
            if (retryIntervalValue) {
              var retryIntervalInstance = moment.duration(retryIntervalValue);
              retryPolicyInstance.retryInterval = retryIntervalInstance;
            }
            
            var retryCountValue = retryPolicyValue['retryCount'];
            if (retryCountValue) {
              var retryCountInstance = retryCountValue;
              retryPolicyInstance.retryCount = retryCountInstance;
            }
          }
          
          var errorActionValue = actionValue['errorAction'];
          if (errorActionValue) {
            var errorActionInstance = {};
            actionInstance.errorAction = errorActionInstance;
            
            var typeValue2 = errorActionValue['type'];
            if (typeValue2) {
              var typeInstance2 = typeValue2;
              errorActionInstance.type = typeInstance2;
            }
            
            var requestValue = errorActionValue['request'];
            if (requestValue) {
              var requestInstance = { headers: {} };
              errorActionInstance.request = requestInstance;
              
              var uriValue = requestValue['uri'];
              if (uriValue) {
                var uriInstance = uriValue;
                requestInstance.uri = uriInstance;
              }
              
              var methodValue = requestValue['method'];
              if (methodValue) {
                var methodInstance = methodValue;
                requestInstance.method = methodInstance;
              }
              
              var headersSequenceElement = requestValue['headers'];
              if (headersSequenceElement) {
                for (var property in headersSequenceElement) {
                  var headersKey = property;
                  var headersValue = headersSequenceElement[property];
                  requestInstance.headers[headersKey] = headersValue;
                }
              }
              
              var bodyValue = requestValue['body'];
              if (bodyValue) {
                var bodyInstance = bodyValue;
                requestInstance.body = bodyInstance;
              }
            }
            
            var queueMessageValue = errorActionValue['queueMessage'];
            if (queueMessageValue) {
              var queueMessageInstance = {};
              errorActionInstance.queueMessage = queueMessageInstance;
              
              var storageAccountValue = queueMessageValue['storageAccount'];
              if (storageAccountValue) {
                var storageAccountInstance = storageAccountValue;
                queueMessageInstance.storageAccountName = storageAccountInstance;
              }
              
              var queueNameValue = queueMessageValue['queueName'];
              if (queueNameValue) {
                var queueNameInstance = queueNameValue;
                queueMessageInstance.queueName = queueNameInstance;
              }
              
              var sasTokenValue = queueMessageValue['sasToken'];
              if (sasTokenValue) {
                var sasTokenInstance = sasTokenValue;
                queueMessageInstance.sasToken = sasTokenInstance;
              }
              
              var messageValue = queueMessageValue['message'];
              if (messageValue) {
                var messageInstance = messageValue;
                queueMessageInstance.message = messageInstance;
              }
            }
          }
          
          var requestValue2 = actionValue['request'];
          if (requestValue2) {
            var requestInstance2 = { headers: {} };
            actionInstance.request = requestInstance2;
            
            var uriValue2 = requestValue2['uri'];
            if (uriValue2) {
              var uriInstance2 = uriValue2;
              requestInstance2.uri = uriInstance2;
            }
            
            var methodValue2 = requestValue2['method'];
            if (methodValue2) {
              var methodInstance2 = methodValue2;
              requestInstance2.method = methodInstance2;
            }
            
            var headersSequenceElement2 = requestValue2['headers'];
            if (headersSequenceElement2) {
              for (var property2 in headersSequenceElement2) {
                var headersKey2 = property2;
                var headersValue2 = headersSequenceElement2[property2];
                requestInstance2.headers[headersKey2] = headersValue2;
              }
            }
            
            var bodyValue2 = requestValue2['body'];
            if (bodyValue2) {
              var bodyInstance2 = bodyValue2;
              requestInstance2.body = bodyInstance2;
            }
          }
          
          var queueMessageValue2 = actionValue['queueMessage'];
          if (queueMessageValue2) {
            var queueMessageInstance2 = {};
            actionInstance.queueMessage = queueMessageInstance2;
            
            var storageAccountValue2 = queueMessageValue2['storageAccount'];
            if (storageAccountValue2) {
              var storageAccountInstance2 = storageAccountValue2;
              queueMessageInstance2.storageAccountName = storageAccountInstance2;
            }
            
            var queueNameValue2 = queueMessageValue2['queueName'];
            if (queueNameValue2) {
              var queueNameInstance2 = queueNameValue2;
              queueMessageInstance2.queueName = queueNameInstance2;
            }
            
            var sasTokenValue2 = queueMessageValue2['sasToken'];
            if (sasTokenValue2) {
              var sasTokenInstance2 = sasTokenValue2;
              queueMessageInstance2.sasToken = sasTokenInstance2;
            }
            
            var messageValue2 = queueMessageValue2['message'];
            if (messageValue2) {
              var messageInstance2 = messageValue2;
              queueMessageInstance2.message = messageInstance2;
            }
          }
        }
        
        var recurrenceValue = responseDoc['recurrence'];
        if (recurrenceValue) {
          var recurrenceInstance = {};
          jobInstance.recurrence = recurrenceInstance;
          
          var frequencyValue = recurrenceValue['frequency'];
          if (frequencyValue) {
            var frequencyInstance = frequencyValue;
            recurrenceInstance.frequency = frequencyInstance;
          }
          
          var intervalValue = recurrenceValue['interval'];
          if (intervalValue) {
            var intervalInstance = intervalValue;
            recurrenceInstance.interval = intervalInstance;
          }
          
          var countValue = recurrenceValue['count'];
          if (countValue) {
            var countInstance = countValue;
            recurrenceInstance.count = countInstance;
          }
          
          var endTimeValue = recurrenceValue['endTime'];
          if (endTimeValue) {
            var endTimeInstance = endTimeValue;
            recurrenceInstance.endTime = endTimeInstance;
          }
          
          var scheduleValue = recurrenceValue['schedule'];
          if (scheduleValue) {
            var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
            recurrenceInstance.schedule = scheduleInstance;
            
            var minutesArray = scheduleValue['minutes'];
            if (minutesArray) {
              for (var loweredIndex1 = 0; loweredIndex1 < minutesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var minutesValue = minutesArray[loweredIndex1];
                scheduleInstance.minutes.push(minutesValue);
              }
            }
            
            var hoursArray = scheduleValue['hours'];
            if (hoursArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < hoursArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var hoursValue = hoursArray[loweredIndex2];
                scheduleInstance.hours.push(hoursValue);
              }
            }
            
            var weekDaysArray = scheduleValue['weekDays'];
            if (weekDaysArray) {
              for (var loweredIndex3 = 0; loweredIndex3 < weekDaysArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var weekDaysValue = weekDaysArray[loweredIndex3];
                scheduleInstance.days.push(weekDaysValue);
              }
            }
            
            var monthsArray = scheduleValue['months'];
            if (monthsArray) {
              for (var loweredIndex4 = 0; loweredIndex4 < monthsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                var monthsValue = monthsArray[loweredIndex4];
                scheduleInstance.months.push(monthsValue);
              }
            }
            
            var monthDaysArray = scheduleValue['monthDays'];
            if (monthDaysArray) {
              for (var loweredIndex5 = 0; loweredIndex5 < monthDaysArray.length; loweredIndex5 = loweredIndex5 + 1) {
                var monthDaysValue = monthDaysArray[loweredIndex5];
                scheduleInstance.monthDays.push(monthDaysValue);
              }
            }
            
            var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
            if (monthlyOccurrencesArray) {
              for (var loweredIndex6 = 0; loweredIndex6 < monthlyOccurrencesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex6];
                var jobScheduleMonthlyOccurrenceInstance = {};
                scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                
                var dayValue = monthlyOccurrencesValue['day'];
                if (dayValue) {
                  var dayInstance = dayValue;
                  jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                }
                
                var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                if (occurrenceValue) {
                  var occurrenceInstance = occurrenceValue;
                  jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                }
              }
            }
          }
        }
        
        var statusValue = responseDoc['status'];
        if (statusValue) {
          var statusInstance = {};
          jobInstance.status = statusInstance;
          
          var lastExecutionTimeValue = statusValue['lastExecutionTime'];
          if (lastExecutionTimeValue) {
            var lastExecutionTimeInstance = lastExecutionTimeValue;
            statusInstance.lastExecutionTime = lastExecutionTimeInstance;
          }
          
          var nextExecutionTimeValue = statusValue['nextExecutionTime'];
          if (nextExecutionTimeValue) {
            var nextExecutionTimeInstance = nextExecutionTimeValue;
            statusInstance.nextExecutionTime = nextExecutionTimeInstance;
          }
          
          var executionCountValue = statusValue['executionCount'];
          if (executionCountValue) {
            var executionCountInstance = executionCountValue;
            statusInstance.executionCount = executionCountInstance;
          }
          
          var failureCountValue = statusValue['failureCount'];
          if (failureCountValue) {
            var failureCountInstance = failureCountValue;
            statusInstance.failureCount = failureCountInstance;
          }
          
          var faultedCountValue = statusValue['faultedCount'];
          if (faultedCountValue) {
            var faultedCountInstance = faultedCountValue;
            statusInstance.faultedCount = faultedCountInstance;
          }
        }
        
        var stateValue = responseDoc['state'];
        if (stateValue) {
          var stateInstance = stateValue;
          jobInstance.state = stateInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return JobOperations;
})();
