/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * An object that represents the local timestamp property. It contains the
 * format of local timestamp that needs to be used and the corresponding
 * timezone offset information. If a value isn't specified for localTimestamp,
 * or if null, then the local timestamp will not be ingressed with the events.
 *
 */
class LocalTimestamp {
  /**
   * Create a LocalTimestamp.
   * @property {string} [format] An enum that represents the format of the
   * local timestamp property that needs to be set. Possible values include:
   * 'Embedded', 'Iana', 'TimeSpan'
   * @property {object} [timeZoneOffset] An object that represents the offset
   * information for the local timestamp format specified. Should not be
   * specified for LocalTimestampFormat - Embedded.
   * @property {string} [timeZoneOffset.propertyName] The event property that
   * will be contain the offset information to calculate the local timestamp.
   * When the LocalTimestampFormat is Iana, the property name will contain the
   * name of the column which contains IANA Timezone Name (eg: Americas/Los
   * Angeles). When LocalTimestampFormat is Timespan, it contains the name of
   * property which contains values representing the offset (eg: P1D or
   * 1.00:00:00)
   */
  constructor() {
  }

  /**
   * Defines the metadata of LocalTimestamp
   *
   * @returns {object} metadata of LocalTimestamp
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'LocalTimestamp',
      type: {
        name: 'Composite',
        className: 'LocalTimestamp',
        modelProperties: {
          format: {
            required: false,
            serializedName: 'format',
            type: {
              name: 'Enum',
              allowedValues: [ 'Embedded', 'Iana', 'TimeSpan' ]
            }
          },
          timeZoneOffset: {
            required: false,
            serializedName: 'timeZoneOffset',
            type: {
              name: 'Composite',
              className: 'LocalTimestampTimeZoneOffset'
            }
          }
        }
      }
    };
  }
}

module.exports = LocalTimestamp;
