/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Given query face's faceId, find the similar-looking faces from a faceId
 * array, a face list or a large face list.
 *
 * @param {uuid} faceId FaceId of the query face. User needs to call Face -
 * Detect first to get a valid faceId. Note that this faceId is not persisted
 * and will expire 24 hours after the detection call
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.faceListId] An existing user-specified unique
 * candidate face list, created in Face List - Create a Face List. Face list
 * contains a set of persistedFaceIds which are persisted and will never
 * expire. Parameter faceListId, largeFaceListId and faceIds should not be
 * provided at the same time.
 *
 * @param {string} [options.largeFaceListId] An existing user-specified unique
 * candidate large face list, created in LargeFaceList - Create. Large face
 * list contains a set of persistedFaceIds which are persisted and will never
 * expire. Parameter faceListId, largeFaceListId and faceIds should not be
 * provided at the same time.
 *
 * @param {array} [options.faceIds] An array of candidate faceIds. All of them
 * are created by Face - Detect and the faceIds will expire 24 hours after the
 * detection call. The number of faceIds is limited to 1000. Parameter
 * faceListId, largeFaceListId and faceIds should not be provided at the same
 * time.
 *
 * @param {number} [options.maxNumOfCandidatesReturned] The number of top
 * similar faces returned. The valid range is [1, 1000].
 *
 * @param {string} [options.mode] Similar face searching mode. It can be
 * "matchPerson" or "matchFace". Possible values include: 'matchPerson',
 * 'matchFace'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _findSimilar(faceId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let faceListId = (options && options.faceListId !== undefined) ? options.faceListId : undefined;
  let largeFaceListId = (options && options.largeFaceListId !== undefined) ? options.largeFaceListId : undefined;
  let faceIds = (options && options.faceIds !== undefined) ? options.faceIds : undefined;
  let maxNumOfCandidatesReturned = (options && options.maxNumOfCandidatesReturned !== undefined) ? options.maxNumOfCandidatesReturned : 20;
  let mode = (options && options.mode !== undefined) ? options.mode : 'matchPerson';
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (faceId === null || faceId === undefined || typeof faceId.valueOf() !== 'string' || !msRest.isValidUuid(faceId)) {
      throw new Error('faceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (faceListId !== null && faceListId !== undefined && typeof faceListId.valueOf() !== 'string') {
      throw new Error('faceListId must be of type string.');
    }
    if (faceListId !== null && faceListId !== undefined) {
      if (faceListId.length > 64)
      {
        throw new Error('"faceListId" should satisfy the constraint - "MaxLength": 64');
      }
      if (faceListId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"faceListId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (largeFaceListId !== null && largeFaceListId !== undefined && typeof largeFaceListId.valueOf() !== 'string') {
      throw new Error('largeFaceListId must be of type string.');
    }
    if (largeFaceListId !== null && largeFaceListId !== undefined) {
      if (largeFaceListId.length > 64)
      {
        throw new Error('"largeFaceListId" should satisfy the constraint - "MaxLength": 64');
      }
      if (largeFaceListId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"largeFaceListId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (Array.isArray(faceIds)) {
      for (let i = 0; i < faceIds.length; i++) {
        if (faceIds[i] !== null && faceIds[i] !== undefined && !(typeof faceIds[i].valueOf() === 'string' && msRest.isValidUuid(faceIds[i]))) {
          throw new Error('faceIds[i] must be of type string and must be a valid uuid.');
        }
      }
    }
    if (faceIds !== null && faceIds !== undefined) {
      if (faceIds.length > 1000)
      {
        throw new Error('"faceIds" should satisfy the constraint - "MaxItems": 1000');
      }
    }
    if (maxNumOfCandidatesReturned !== null && maxNumOfCandidatesReturned !== undefined && typeof maxNumOfCandidatesReturned !== 'number') {
      throw new Error('maxNumOfCandidatesReturned must be of type number.');
    }
    if (maxNumOfCandidatesReturned !== null && maxNumOfCandidatesReturned !== undefined) {
      if (maxNumOfCandidatesReturned > 1000)
      {
        throw new Error('"maxNumOfCandidatesReturned" should satisfy the constraint - "InclusiveMaximum": 1000');
      }
      if (maxNumOfCandidatesReturned < 1)
      {
        throw new Error('"maxNumOfCandidatesReturned" should satisfy the constraint - "InclusiveMinimum": 1');
      }
    }
    if (mode) {
      let allowedValues = [ 'matchPerson', 'matchFace' ];
      if (!allowedValues.some( function(item) { return item === mode; })) {
        throw new Error(mode + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((faceId !== null && faceId !== undefined) || (faceListId !== null && faceListId !== undefined) || (largeFaceListId !== null && largeFaceListId !== undefined) || (faceIds !== null && faceIds !== undefined) || (maxNumOfCandidatesReturned !== null && maxNumOfCandidatesReturned !== undefined) || (mode !== null && mode !== undefined)) {
    body = new client.models['FindSimilarRequest']();
    body.faceId = faceId;
    body.faceListId = faceListId;
    body.largeFaceListId = largeFaceListId;
    body.faceIds = faceIds;
    body.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
    body.mode = mode;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'findsimilars';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['FindSimilarRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SimilarFaceElementType',
                  type: {
                    name: 'Composite',
                    className: 'SimilarFace'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Divide candidate faces into groups based on face similarity.
 *
 * @param {array} faceIds Array of candidate faceId created by Face - Detect.
 * The maximum is 1000 faces
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GroupResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _group(faceIds, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (!Array.isArray(faceIds)) {
      throw new Error('faceIds cannot be null or undefined and it must be of type array.');
    }
    for (let i = 0; i < faceIds.length; i++) {
      if (faceIds[i] !== null && faceIds[i] !== undefined && !(typeof faceIds[i].valueOf() === 'string' && msRest.isValidUuid(faceIds[i]))) {
        throw new Error('faceIds[i] must be of type string and must be a valid uuid.');
      }
    }
    if (faceIds !== null && faceIds !== undefined) {
      if (faceIds.length > 1000)
      {
        throw new Error('"faceIds" should satisfy the constraint - "MaxItems": 1000');
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if (faceIds !== null && faceIds !== undefined) {
    body = new client.models['GroupRequest']();
    body.faceIds = faceIds;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'group';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['GroupRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GroupResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * 1-to-many identification to find the closest matches of the specific query
 * person face from a person group or large person group.
 *
 * @param {array} faceIds Array of query faces faceIds, created by the Face -
 * Detect. Each of the faces are identified independently. The valid number of
 * faceIds is between [1, 10].
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.personGroupId] PersonGroupId of the target person
 * group, created by PersonGroup - Create. Parameter personGroupId and
 * largePersonGroupId should not be provided at the same time.
 *
 * @param {string} [options.largePersonGroupId] LargePersonGroupId of the
 * target large person group, created by LargePersonGroup - Create. Parameter
 * personGroupId and largePersonGroupId should not be provided at the same
 * time.
 *
 * @param {number} [options.maxNumOfCandidatesReturned] The range of
 * maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
 *
 * @param {number} [options.confidenceThreshold] Confidence threshold of
 * identification, used to judge whether one face belong to one person. The
 * range of confidenceThreshold is [0, 1] (default specified by algorithm).
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _identify(faceIds, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let personGroupId = (options && options.personGroupId !== undefined) ? options.personGroupId : undefined;
  let largePersonGroupId = (options && options.largePersonGroupId !== undefined) ? options.largePersonGroupId : undefined;
  let maxNumOfCandidatesReturned = (options && options.maxNumOfCandidatesReturned !== undefined) ? options.maxNumOfCandidatesReturned : 1;
  let confidenceThreshold = (options && options.confidenceThreshold !== undefined) ? options.confidenceThreshold : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (!Array.isArray(faceIds)) {
      throw new Error('faceIds cannot be null or undefined and it must be of type array.');
    }
    for (let i = 0; i < faceIds.length; i++) {
      if (faceIds[i] !== null && faceIds[i] !== undefined && !(typeof faceIds[i].valueOf() === 'string' && msRest.isValidUuid(faceIds[i]))) {
        throw new Error('faceIds[i] must be of type string and must be a valid uuid.');
      }
    }
    if (faceIds !== null && faceIds !== undefined) {
      if (faceIds.length > 10)
      {
        throw new Error('"faceIds" should satisfy the constraint - "MaxItems": 10');
      }
    }
    if (personGroupId !== null && personGroupId !== undefined && typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (largePersonGroupId !== null && largePersonGroupId !== undefined && typeof largePersonGroupId.valueOf() !== 'string') {
      throw new Error('largePersonGroupId must be of type string.');
    }
    if (largePersonGroupId !== null && largePersonGroupId !== undefined) {
      if (largePersonGroupId.length > 64)
      {
        throw new Error('"largePersonGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (largePersonGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"largePersonGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (maxNumOfCandidatesReturned !== null && maxNumOfCandidatesReturned !== undefined && typeof maxNumOfCandidatesReturned !== 'number') {
      throw new Error('maxNumOfCandidatesReturned must be of type number.');
    }
    if (maxNumOfCandidatesReturned !== null && maxNumOfCandidatesReturned !== undefined) {
      if (maxNumOfCandidatesReturned > 5)
      {
        throw new Error('"maxNumOfCandidatesReturned" should satisfy the constraint - "InclusiveMaximum": 5');
      }
      if (maxNumOfCandidatesReturned < 1)
      {
        throw new Error('"maxNumOfCandidatesReturned" should satisfy the constraint - "InclusiveMinimum": 1');
      }
    }
    if (confidenceThreshold !== null && confidenceThreshold !== undefined && typeof confidenceThreshold !== 'number') {
      throw new Error('confidenceThreshold must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((faceIds !== null && faceIds !== undefined) || (personGroupId !== null && personGroupId !== undefined) || (largePersonGroupId !== null && largePersonGroupId !== undefined) || (maxNumOfCandidatesReturned !== null && maxNumOfCandidatesReturned !== undefined) || (confidenceThreshold !== null && confidenceThreshold !== undefined)) {
    body = new client.models['IdentifyRequest']();
    body.faceIds = faceIds;
    body.personGroupId = personGroupId;
    body.largePersonGroupId = largePersonGroupId;
    body.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
    body.confidenceThreshold = confidenceThreshold;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'identify';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['IdentifyRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'IdentifyResultElementType',
                  type: {
                    name: 'Composite',
                    className: 'IdentifyResult'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Verify whether two faces belong to a same person or whether one face belongs
 * to a person.
 *
 * @param {uuid} faceId1 FaceId of the first face, comes from Face - Detect
 *
 * @param {uuid} faceId2 FaceId of the second face, comes from Face - Detect
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VerifyResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _verifyFaceToFace(faceId1, faceId2, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (faceId1 === null || faceId1 === undefined || typeof faceId1.valueOf() !== 'string' || !msRest.isValidUuid(faceId1)) {
      throw new Error('faceId1 cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (faceId2 === null || faceId2 === undefined || typeof faceId2.valueOf() !== 'string' || !msRest.isValidUuid(faceId2)) {
      throw new Error('faceId2 cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((faceId1 !== null && faceId1 !== undefined) || (faceId2 !== null && faceId2 !== undefined)) {
    body = new client.models['VerifyFaceToFaceRequest']();
    body.faceId1 = faceId1;
    body.faceId2 = faceId2;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'verify';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['VerifyFaceToFaceRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VerifyResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Detect human faces in an image and returns face locations, and optionally
 * with faceIds, landmarks, and attributes.
 *
 * @param {string} url Publicly reachable URL of an image
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.returnFaceId] A value indicating whether the
 * operation should return faceIds of detected faces.
 *
 * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
 * the operation should return landmarks of the detected faces.
 *
 * @param {array} [options.returnFaceAttributes] Analyze and return the one or
 * more specified face attributes in the comma-separated string like
 * "returnFaceAttributes=age,gender". Supported face attributes include age,
 * gender, headPose, smile, facialHair, glasses and emotion. Note that each
 * face attribute analysis has additional computational and time cost.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _detectWithUrl(url, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let returnFaceId = (options && options.returnFaceId !== undefined) ? options.returnFaceId : true;
  let returnFaceLandmarks = (options && options.returnFaceLandmarks !== undefined) ? options.returnFaceLandmarks : false;
  let returnFaceAttributes = (options && options.returnFaceAttributes !== undefined) ? options.returnFaceAttributes : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (returnFaceId !== null && returnFaceId !== undefined && typeof returnFaceId !== 'boolean') {
      throw new Error('returnFaceId must be of type boolean.');
    }
    if (returnFaceLandmarks !== null && returnFaceLandmarks !== undefined && typeof returnFaceLandmarks !== 'boolean') {
      throw new Error('returnFaceLandmarks must be of type boolean.');
    }
    if (Array.isArray(returnFaceAttributes)) {
      for (let i = 0; i < returnFaceAttributes.length; i++) {
        if (returnFaceAttributes[i]) {
          let allowedValues = [ 'age', 'gender', 'headPose', 'smile', 'facialHair', 'glasses', 'emotion', 'hair', 'makeup', 'occlusion', 'accessories', 'blur', 'exposure', 'noise' ];
          if (!allowedValues.some( function(item) { return item === returnFaceAttributes[i]; })) {
            throw new Error(returnFaceAttributes[i] + ' is not a valid value. The valid values are: ' + allowedValues);
          }
        }
      }
    }
    if (url === null || url === undefined || typeof url.valueOf() !== 'string') {
      throw new Error('url cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let imageUrl;
  if (url !== null && url !== undefined) {
    imageUrl = new client.models['ImageUrl']();
    imageUrl.url = url;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'detect';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (returnFaceId !== null && returnFaceId !== undefined) {
    queryParameters.push('returnFaceId=' + encodeURIComponent(returnFaceId.toString()));
  }
  if (returnFaceLandmarks !== null && returnFaceLandmarks !== undefined) {
    queryParameters.push('returnFaceLandmarks=' + encodeURIComponent(returnFaceLandmarks.toString()));
  }
  if (returnFaceAttributes !== null && returnFaceAttributes !== undefined) {
    queryParameters.push('returnFaceAttributes=' + encodeURIComponent(returnFaceAttributes.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['ImageUrl']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DetectedFaceElementType',
                  type: {
                    name: 'Composite',
                    className: 'DetectedFace'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Verify whether two faces belong to a same person. Compares a face Id with a
 * Person Id
 *
 * @param {uuid} faceId FaceId of the face, comes from Face - Detect
 *
 * @param {uuid} personId Specify a certain person in a person group or a large
 * person group. personId is created in PersonGroup Person - Create or
 * LargePersonGroup Person - Create.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.personGroupId] Using existing personGroupId and
 * personId for fast loading a specified person. personGroupId is created in
 * PersonGroup - Create. Parameter personGroupId and largePersonGroupId should
 * not be provided at the same time.
 *
 * @param {string} [options.largePersonGroupId] Using existing
 * largePersonGroupId and personId for fast loading a specified person.
 * largePersonGroupId is created in LargePersonGroup - Create. Parameter
 * personGroupId and largePersonGroupId should not be provided at the same
 * time.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VerifyResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _verifyFaceToPerson(faceId, personId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let personGroupId = (options && options.personGroupId !== undefined) ? options.personGroupId : undefined;
  let largePersonGroupId = (options && options.largePersonGroupId !== undefined) ? options.largePersonGroupId : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (faceId === null || faceId === undefined || typeof faceId.valueOf() !== 'string' || !msRest.isValidUuid(faceId)) {
      throw new Error('faceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (personGroupId !== null && personGroupId !== undefined && typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (largePersonGroupId !== null && largePersonGroupId !== undefined && typeof largePersonGroupId.valueOf() !== 'string') {
      throw new Error('largePersonGroupId must be of type string.');
    }
    if (largePersonGroupId !== null && largePersonGroupId !== undefined) {
      if (largePersonGroupId.length > 64)
      {
        throw new Error('"largePersonGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (largePersonGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"largePersonGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (personId === null || personId === undefined || typeof personId.valueOf() !== 'string' || !msRest.isValidUuid(personId)) {
      throw new Error('personId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((faceId !== null && faceId !== undefined) || (personGroupId !== null && personGroupId !== undefined) || (largePersonGroupId !== null && largePersonGroupId !== undefined) || (personId !== null && personId !== undefined)) {
    body = new client.models['VerifyFaceToPersonRequest']();
    body.faceId = faceId;
    body.personGroupId = personGroupId;
    body.largePersonGroupId = largePersonGroupId;
    body.personId = personId;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'verify';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['VerifyFaceToPersonRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VerifyResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Detect human faces in an image and returns face locations, and optionally
 * with faceIds, landmarks, and attributes.
 *
 * @param {object} image An image stream.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.returnFaceId] A value indicating whether the
 * operation should return faceIds of detected faces.
 *
 * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
 * the operation should return landmarks of the detected faces.
 *
 * @param {array} [options.returnFaceAttributes] Analyze and return the one or
 * more specified face attributes in the comma-separated string like
 * "returnFaceAttributes=age,gender". Supported face attributes include age,
 * gender, headPose, smile, facialHair, glasses and emotion. Note that each
 * face attribute analysis has additional computational and time cost.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _detectWithStream(image, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let returnFaceId = (options && options.returnFaceId !== undefined) ? options.returnFaceId : true;
  let returnFaceLandmarks = (options && options.returnFaceLandmarks !== undefined) ? options.returnFaceLandmarks : false;
  let returnFaceAttributes = (options && options.returnFaceAttributes !== undefined) ? options.returnFaceAttributes : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (returnFaceId !== null && returnFaceId !== undefined && typeof returnFaceId !== 'boolean') {
      throw new Error('returnFaceId must be of type boolean.');
    }
    if (returnFaceLandmarks !== null && returnFaceLandmarks !== undefined && typeof returnFaceLandmarks !== 'boolean') {
      throw new Error('returnFaceLandmarks must be of type boolean.');
    }
    if (Array.isArray(returnFaceAttributes)) {
      for (let i = 0; i < returnFaceAttributes.length; i++) {
        if (returnFaceAttributes[i]) {
          let allowedValues = [ 'age', 'gender', 'headPose', 'smile', 'facialHair', 'glasses', 'emotion', 'hair', 'makeup', 'occlusion', 'accessories', 'blur', 'exposure', 'noise' ];
          if (!allowedValues.some( function(item) { return item === returnFaceAttributes[i]; })) {
            throw new Error(returnFaceAttributes[i] + ' is not a valid value. The valid values are: ' + allowedValues);
          }
        }
      }
    }
    if (image === null || image === undefined) {
      throw new Error('image cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'detect';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (returnFaceId !== null && returnFaceId !== undefined) {
    queryParameters.push('returnFaceId=' + encodeURIComponent(returnFaceId.toString()));
  }
  if (returnFaceLandmarks !== null && returnFaceLandmarks !== undefined) {
    queryParameters.push('returnFaceLandmarks=' + encodeURIComponent(returnFaceLandmarks.toString()));
  }
  if (returnFaceAttributes !== null && returnFaceAttributes !== undefined) {
    queryParameters.push('returnFaceAttributes=' + encodeURIComponent(returnFaceAttributes.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/octet-stream';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = image;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DetectedFaceElementType',
                  type: {
                    name: 'Composite',
                    className: 'DetectedFace'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Face. */
class Face {
  /**
   * Create a Face.
   * @param {FaceClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._findSimilar = _findSimilar;
    this._group = _group;
    this._identify = _identify;
    this._verifyFaceToFace = _verifyFaceToFace;
    this._detectWithUrl = _detectWithUrl;
    this._verifyFaceToPerson = _verifyFaceToPerson;
    this._detectWithStream = _detectWithStream;
  }

  /**
   * Given query face's faceId, find the similar-looking faces from a faceId
   * array, a face list or a large face list.
   *
   * @param {uuid} faceId FaceId of the query face. User needs to call Face -
   * Detect first to get a valid faceId. Note that this faceId is not persisted
   * and will expire 24 hours after the detection call
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.faceListId] An existing user-specified unique
   * candidate face list, created in Face List - Create a Face List. Face list
   * contains a set of persistedFaceIds which are persisted and will never
   * expire. Parameter faceListId, largeFaceListId and faceIds should not be
   * provided at the same time.
   *
   * @param {string} [options.largeFaceListId] An existing user-specified unique
   * candidate large face list, created in LargeFaceList - Create. Large face
   * list contains a set of persistedFaceIds which are persisted and will never
   * expire. Parameter faceListId, largeFaceListId and faceIds should not be
   * provided at the same time.
   *
   * @param {array} [options.faceIds] An array of candidate faceIds. All of them
   * are created by Face - Detect and the faceIds will expire 24 hours after the
   * detection call. The number of faceIds is limited to 1000. Parameter
   * faceListId, largeFaceListId and faceIds should not be provided at the same
   * time.
   *
   * @param {number} [options.maxNumOfCandidatesReturned] The number of top
   * similar faces returned. The valid range is [1, 1000].
   *
   * @param {string} [options.mode] Similar face searching mode. It can be
   * "matchPerson" or "matchFace". Possible values include: 'matchPerson',
   * 'matchFace'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  findSimilarWithHttpOperationResponse(faceId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._findSimilar(faceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Given query face's faceId, find the similar-looking faces from a faceId
   * array, a face list or a large face list.
   *
   * @param {uuid} faceId FaceId of the query face. User needs to call Face -
   * Detect first to get a valid faceId. Note that this faceId is not persisted
   * and will expire 24 hours after the detection call
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.faceListId] An existing user-specified unique
   * candidate face list, created in Face List - Create a Face List. Face list
   * contains a set of persistedFaceIds which are persisted and will never
   * expire. Parameter faceListId, largeFaceListId and faceIds should not be
   * provided at the same time.
   *
   * @param {string} [options.largeFaceListId] An existing user-specified unique
   * candidate large face list, created in LargeFaceList - Create. Large face
   * list contains a set of persistedFaceIds which are persisted and will never
   * expire. Parameter faceListId, largeFaceListId and faceIds should not be
   * provided at the same time.
   *
   * @param {array} [options.faceIds] An array of candidate faceIds. All of them
   * are created by Face - Detect and the faceIds will expire 24 hours after the
   * detection call. The number of faceIds is limited to 1000. Parameter
   * faceListId, largeFaceListId and faceIds should not be provided at the same
   * time.
   *
   * @param {number} [options.maxNumOfCandidatesReturned] The number of top
   * similar faces returned. The valid range is [1, 1000].
   *
   * @param {string} [options.mode] Similar face searching mode. It can be
   * "matchPerson" or "matchFace". Possible values include: 'matchPerson',
   * 'matchFace'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  findSimilar(faceId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._findSimilar(faceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._findSimilar(faceId, options, optionalCallback);
    }
  }

  /**
   * Divide candidate faces into groups based on face similarity.
   *
   * @param {array} faceIds Array of candidate faceId created by Face - Detect.
   * The maximum is 1000 faces
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GroupResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  groupWithHttpOperationResponse(faceIds, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._group(faceIds, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Divide candidate faces into groups based on face similarity.
   *
   * @param {array} faceIds Array of candidate faceId created by Face - Detect.
   * The maximum is 1000 faces
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GroupResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GroupResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  group(faceIds, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._group(faceIds, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._group(faceIds, options, optionalCallback);
    }
  }

  /**
   * 1-to-many identification to find the closest matches of the specific query
   * person face from a person group or large person group.
   *
   * @param {array} faceIds Array of query faces faceIds, created by the Face -
   * Detect. Each of the faces are identified independently. The valid number of
   * faceIds is between [1, 10].
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.personGroupId] PersonGroupId of the target person
   * group, created by PersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
   *
   * @param {string} [options.largePersonGroupId] LargePersonGroupId of the
   * target large person group, created by LargePersonGroup - Create. Parameter
   * personGroupId and largePersonGroupId should not be provided at the same
   * time.
   *
   * @param {number} [options.maxNumOfCandidatesReturned] The range of
   * maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
   *
   * @param {number} [options.confidenceThreshold] Confidence threshold of
   * identification, used to judge whether one face belong to one person. The
   * range of confidenceThreshold is [0, 1] (default specified by algorithm).
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  identifyWithHttpOperationResponse(faceIds, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._identify(faceIds, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * 1-to-many identification to find the closest matches of the specific query
   * person face from a person group or large person group.
   *
   * @param {array} faceIds Array of query faces faceIds, created by the Face -
   * Detect. Each of the faces are identified independently. The valid number of
   * faceIds is between [1, 10].
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.personGroupId] PersonGroupId of the target person
   * group, created by PersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
   *
   * @param {string} [options.largePersonGroupId] LargePersonGroupId of the
   * target large person group, created by LargePersonGroup - Create. Parameter
   * personGroupId and largePersonGroupId should not be provided at the same
   * time.
   *
   * @param {number} [options.maxNumOfCandidatesReturned] The range of
   * maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
   *
   * @param {number} [options.confidenceThreshold] Confidence threshold of
   * identification, used to judge whether one face belong to one person. The
   * range of confidenceThreshold is [0, 1] (default specified by algorithm).
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  identify(faceIds, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._identify(faceIds, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._identify(faceIds, options, optionalCallback);
    }
  }

  /**
   * Verify whether two faces belong to a same person or whether one face belongs
   * to a person.
   *
   * @param {uuid} faceId1 FaceId of the first face, comes from Face - Detect
   *
   * @param {uuid} faceId2 FaceId of the second face, comes from Face - Detect
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VerifyResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  verifyFaceToFaceWithHttpOperationResponse(faceId1, faceId2, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._verifyFaceToFace(faceId1, faceId2, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Verify whether two faces belong to a same person or whether one face belongs
   * to a person.
   *
   * @param {uuid} faceId1 FaceId of the first face, comes from Face - Detect
   *
   * @param {uuid} faceId2 FaceId of the second face, comes from Face - Detect
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VerifyResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VerifyResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  verifyFaceToFace(faceId1, faceId2, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._verifyFaceToFace(faceId1, faceId2, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._verifyFaceToFace(faceId1, faceId2, options, optionalCallback);
    }
  }

  /**
   * Detect human faces in an image and returns face locations, and optionally
   * with faceIds, landmarks, and attributes.
   *
   * @param {string} url Publicly reachable URL of an image
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.returnFaceId] A value indicating whether the
   * operation should return faceIds of detected faces.
   *
   * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
   * the operation should return landmarks of the detected faces.
   *
   * @param {array} [options.returnFaceAttributes] Analyze and return the one or
   * more specified face attributes in the comma-separated string like
   * "returnFaceAttributes=age,gender". Supported face attributes include age,
   * gender, headPose, smile, facialHair, glasses and emotion. Note that each
   * face attribute analysis has additional computational and time cost.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  detectWithUrlWithHttpOperationResponse(url, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._detectWithUrl(url, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Detect human faces in an image and returns face locations, and optionally
   * with faceIds, landmarks, and attributes.
   *
   * @param {string} url Publicly reachable URL of an image
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.returnFaceId] A value indicating whether the
   * operation should return faceIds of detected faces.
   *
   * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
   * the operation should return landmarks of the detected faces.
   *
   * @param {array} [options.returnFaceAttributes] Analyze and return the one or
   * more specified face attributes in the comma-separated string like
   * "returnFaceAttributes=age,gender". Supported face attributes include age,
   * gender, headPose, smile, facialHair, glasses and emotion. Note that each
   * face attribute analysis has additional computational and time cost.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  detectWithUrl(url, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._detectWithUrl(url, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._detectWithUrl(url, options, optionalCallback);
    }
  }

  /**
   * Verify whether two faces belong to a same person. Compares a face Id with a
   * Person Id
   *
   * @param {uuid} faceId FaceId of the face, comes from Face - Detect
   *
   * @param {uuid} personId Specify a certain person in a person group or a large
   * person group. personId is created in PersonGroup Person - Create or
   * LargePersonGroup Person - Create.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.personGroupId] Using existing personGroupId and
   * personId for fast loading a specified person. personGroupId is created in
   * PersonGroup - Create. Parameter personGroupId and largePersonGroupId should
   * not be provided at the same time.
   *
   * @param {string} [options.largePersonGroupId] Using existing
   * largePersonGroupId and personId for fast loading a specified person.
   * largePersonGroupId is created in LargePersonGroup - Create. Parameter
   * personGroupId and largePersonGroupId should not be provided at the same
   * time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VerifyResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  verifyFaceToPersonWithHttpOperationResponse(faceId, personId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._verifyFaceToPerson(faceId, personId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Verify whether two faces belong to a same person. Compares a face Id with a
   * Person Id
   *
   * @param {uuid} faceId FaceId of the face, comes from Face - Detect
   *
   * @param {uuid} personId Specify a certain person in a person group or a large
   * person group. personId is created in PersonGroup Person - Create or
   * LargePersonGroup Person - Create.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.personGroupId] Using existing personGroupId and
   * personId for fast loading a specified person. personGroupId is created in
   * PersonGroup - Create. Parameter personGroupId and largePersonGroupId should
   * not be provided at the same time.
   *
   * @param {string} [options.largePersonGroupId] Using existing
   * largePersonGroupId and personId for fast loading a specified person.
   * largePersonGroupId is created in LargePersonGroup - Create. Parameter
   * personGroupId and largePersonGroupId should not be provided at the same
   * time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VerifyResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VerifyResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  verifyFaceToPerson(faceId, personId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._verifyFaceToPerson(faceId, personId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._verifyFaceToPerson(faceId, personId, options, optionalCallback);
    }
  }

  /**
   * Detect human faces in an image and returns face locations, and optionally
   * with faceIds, landmarks, and attributes.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.returnFaceId] A value indicating whether the
   * operation should return faceIds of detected faces.
   *
   * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
   * the operation should return landmarks of the detected faces.
   *
   * @param {array} [options.returnFaceAttributes] Analyze and return the one or
   * more specified face attributes in the comma-separated string like
   * "returnFaceAttributes=age,gender". Supported face attributes include age,
   * gender, headPose, smile, facialHair, glasses and emotion. Note that each
   * face attribute analysis has additional computational and time cost.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  detectWithStreamWithHttpOperationResponse(image, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._detectWithStream(image, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Detect human faces in an image and returns face locations, and optionally
   * with faceIds, landmarks, and attributes.
   *
   * @param {object} image An image stream.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.returnFaceId] A value indicating whether the
   * operation should return faceIds of detected faces.
   *
   * @param {boolean} [options.returnFaceLandmarks] A value indicating whether
   * the operation should return landmarks of the detected faces.
   *
   * @param {array} [options.returnFaceAttributes] Analyze and return the one or
   * more specified face attributes in the comma-separated string like
   * "returnFaceAttributes=age,gender". Supported face attributes include age,
   * gender, headPose, smile, facialHair, glasses and emotion. Note that each
   * face attribute analysis has additional computational and time cost.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  detectWithStream(image, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._detectWithStream(image, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._detectWithStream(image, options, optionalCallback);
    }
  }

}

module.exports = Face;
