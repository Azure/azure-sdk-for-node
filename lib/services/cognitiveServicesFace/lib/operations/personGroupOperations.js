/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Create a new person group with specified personGroupId, name, user-provided
 * userData and recognitionModel.
 * <br /> A person group is the container of the uploaded person data,
 * including face images and face recognition features.
 * <br /> After creation, use [PersonGroup Person -
 * Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)
 * to add persons into the group, and then call [PersonGroup -
 * Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
 * to get this group ready for [Face -
 * Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
 * <br /> The person's face, image, and userData will be stored on server until
 * [PersonGroup Person -
 * Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
 * or [PersonGroup -
 * Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
 * is called.
 * <br />
 * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000
 * persons.
 * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to
 * 10,000 persons.
 * * to handle larger scale face identification problem, please consider using
 * [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
 * <br />
 * 'recognitionModel' should be specified to associate with this person group.
 * The default value for 'recognitionModel' is 'recognition_01', if the latest
 * model needed, please explicitly specify the model you need in this
 * parameter. New faces that are added to an existing person group will use the
 * recognition model that's already associated with the collection. Existing
 * face features in a person group can't be updated to features extracted by
 * another version of recognition model.
 *
 *
 * @param {string} personGroupId Id referencing a particular person group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.name] User defined name, maximum length is 128.
 *
 * @param {string} [options.userData] User specified data. Length should not
 * exceed 16KB.
 *
 * @param {string} [options.recognitionModel] Possible values include:
 * 'recognition_01', 'recognition_02'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let name = (options && options.name !== undefined) ? options.name : undefined;
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  let recognitionModel = (options && options.recognitionModel !== undefined) ? options.recognitionModel : 'recognition_01';
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (name !== null && name !== undefined && typeof name.valueOf() !== 'string') {
      throw new Error('name must be of type string.');
    }
    if (name !== null && name !== undefined) {
      if (name.length > 128)
      {
        throw new Error('"name" should satisfy the constraint - "MaxLength": 128');
      }
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (userData !== null && userData !== undefined) {
      if (userData.length > 16384)
      {
        throw new Error('"userData" should satisfy the constraint - "MaxLength": 16384');
      }
    }
    if (recognitionModel !== null && recognitionModel !== undefined && typeof recognitionModel.valueOf() !== 'string') {
      throw new Error('recognitionModel must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((name !== null && name !== undefined) || (userData !== null && userData !== undefined) || (recognitionModel !== null && recognitionModel !== undefined)) {
    body = new client.models['MetaDataContract']();
    body.name = name;
    body.userData = userData;
    body.recognitionModel = recognitionModel;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['MetaDataContract']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Delete an existing person group. Persisted face features of all people in
 * the person group will also be deleted.
 *
 * @param {string} personGroupId Id referencing a particular person group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieve person group name, userData and recognitionModel. To get person
 * information under this personGroup, use [PersonGroup Person -
 * List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
 *
 * @param {string} personGroupId Id referencing a particular person group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PersonGroup} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PersonGroup']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Update an existing person group's display name and userData. The properties
 * which does not appear in request body will not be updated.
 *
 * @param {string} personGroupId Id referencing a particular person group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.name] User defined name, maximum length is 128.
 *
 * @param {string} [options.userData] User specified data. Length should not
 * exceed 16KB.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let name = (options && options.name !== undefined) ? options.name : undefined;
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (name !== null && name !== undefined && typeof name.valueOf() !== 'string') {
      throw new Error('name must be of type string.');
    }
    if (name !== null && name !== undefined) {
      if (name.length > 128)
      {
        throw new Error('"name" should satisfy the constraint - "MaxLength": 128');
      }
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (userData !== null && userData !== undefined) {
      if (userData.length > 16384)
      {
        throw new Error('"userData" should satisfy the constraint - "MaxLength": 16384');
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((name !== null && name !== undefined) || (userData !== null && userData !== undefined)) {
    body = new client.models['NameAndUserDataContract']();
    body.name = name;
    body.userData = userData;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['NameAndUserDataContract']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieve the training status of a person group (completed or ongoing).
 *
 * @param {string} personGroupId Id referencing a particular person group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TrainingStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTrainingStatus(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/training';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TrainingStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List person groups’s personGroupId, name, userData and recognitionModel.<br
 * />
 * * Person groups are stored in alphabetical order of personGroupId.
 * * "start" parameter (string, optional) is a user-provided personGroupId
 * value that returned entries have larger ids by string comparison. "start"
 * set to empty to indicate return from the first item.
 * * "top" parameter (int, optional) specifies the number of entries to return.
 * A maximal of 1000 entries can be returned in one call. To fetch more, you
 * can specify "start" with the last retuned entry’s Id of the current call.
 * <br />
 * For example, total 5 person groups: "group1", ..., "group5".
 * <br /> "start=&top=" will return all 5 groups.
 * <br /> "start=&top=2" will return "group1", "group2".
 * <br /> "start=group2&top=3" will return "group3", "group4", "group5".
 *
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.start] List person groups from the least
 * personGroupId greater than the "start".
 *
 * @param {number} [options.top] The number of person groups to list.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let start = (options && options.start !== undefined) ? options.start : undefined;
  let top = (options && options.top !== undefined) ? options.top : 1000;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (start !== null && start !== undefined && typeof start.valueOf() !== 'string') {
      throw new Error('start must be of type string.');
    }
    if (start !== null && start !== undefined) {
      if (start.length > 64)
      {
        throw new Error('"start" should satisfy the constraint - "MaxLength": 64');
      }
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (top !== null && top !== undefined) {
      if (top > 1000)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMaximum": 1000');
      }
      if (top < 1)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMinimum": 1');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (start !== null && start !== undefined) {
    queryParameters.push('start=' + encodeURIComponent(start));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('top=' + encodeURIComponent(top.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PersonGroupElementType',
                  type: {
                    name: 'Composite',
                    className: 'PersonGroup'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Queue a person group training task, the training task may not be started
 * immediately.
 *
 * @param {string} personGroupId Id referencing a particular person group.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _train(personGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId === null || personGroupId === undefined || typeof personGroupId.valueOf() !== 'string') {
      throw new Error('personGroupId cannot be null or undefined and it must be of type string.');
    }
    if (personGroupId !== null && personGroupId !== undefined) {
      if (personGroupId.length > 64)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "MaxLength": 64');
      }
      if (personGroupId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"personGroupId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'persongroups/{personGroupId}/train';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{personGroupId}', encodeURIComponent(personGroupId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a PersonGroupOperations. */
class PersonGroupOperations {
  /**
   * Create a PersonGroupOperations.
   * @param {FaceClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._create = _create;
    this._deleteMethod = _deleteMethod;
    this._get = _get;
    this._update = _update;
    this._getTrainingStatus = _getTrainingStatus;
    this._list = _list;
    this._train = _train;
  }

  /**
   * Create a new person group with specified personGroupId, name, user-provided
   * userData and recognitionModel.
   * <br /> A person group is the container of the uploaded person data,
   * including face images and face recognition features.
   * <br /> After creation, use [PersonGroup Person -
   * Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)
   * to add persons into the group, and then call [PersonGroup -
   * Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
   * to get this group ready for [Face -
   * Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
   * <br /> The person's face, image, and userData will be stored on server until
   * [PersonGroup Person -
   * Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
   * or [PersonGroup -
   * Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
   * is called.
   * <br />
   * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000
   * persons.
   * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to
   * 10,000 persons.
   * * to handle larger scale face identification problem, please consider using
   * [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
   * <br />
   * 'recognitionModel' should be specified to associate with this person group.
   * The default value for 'recognitionModel' is 'recognition_01', if the latest
   * model needed, please explicitly specify the model you need in this
   * parameter. New faces that are added to an existing person group will use the
   * recognition model that's already associated with the collection. Existing
   * face features in a person group can't be updated to features extracted by
   * another version of recognition model.
   *
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] User defined name, maximum length is 128.
   *
   * @param {string} [options.userData] User specified data. Length should not
   * exceed 16KB.
   *
   * @param {string} [options.recognitionModel] Possible values include:
   * 'recognition_01', 'recognition_02'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create a new person group with specified personGroupId, name, user-provided
   * userData and recognitionModel.
   * <br /> A person group is the container of the uploaded person data,
   * including face images and face recognition features.
   * <br /> After creation, use [PersonGroup Person -
   * Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)
   * to add persons into the group, and then call [PersonGroup -
   * Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
   * to get this group ready for [Face -
   * Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
   * <br /> The person's face, image, and userData will be stored on server until
   * [PersonGroup Person -
   * Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
   * or [PersonGroup -
   * Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
   * is called.
   * <br />
   * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000
   * persons.
   * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to
   * 10,000 persons.
   * * to handle larger scale face identification problem, please consider using
   * [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
   * <br />
   * 'recognitionModel' should be specified to associate with this person group.
   * The default value for 'recognitionModel' is 'recognition_01', if the latest
   * model needed, please explicitly specify the model you need in this
   * parameter. New faces that are added to an existing person group will use the
   * recognition model that's already associated with the collection. Existing
   * face features in a person group can't be updated to features extracted by
   * another version of recognition model.
   *
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] User defined name, maximum length is 128.
   *
   * @param {string} [options.userData] User specified data. Length should not
   * exceed 16KB.
   *
   * @param {string} [options.recognitionModel] Possible values include:
   * 'recognition_01', 'recognition_02'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(personGroupId, options, optionalCallback);
    }
  }

  /**
   * Delete an existing person group. Persisted face features of all people in
   * the person group will also be deleted.
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete an existing person group. Persisted face features of all people in
   * the person group will also be deleted.
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(personGroupId, options, optionalCallback);
    }
  }

  /**
   * Retrieve person group name, userData and recognitionModel. To get person
   * information under this personGroup, use [PersonGroup Person -
   * List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PersonGroup>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieve person group name, userData and recognitionModel. To get person
   * information under this personGroup, use [PersonGroup Person -
   * List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PersonGroup} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PersonGroup} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(personGroupId, options, optionalCallback);
    }
  }

  /**
   * Update an existing person group's display name and userData. The properties
   * which does not appear in request body will not be updated.
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] User defined name, maximum length is 128.
   *
   * @param {string} [options.userData] User specified data. Length should not
   * exceed 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update an existing person group's display name and userData. The properties
   * which does not appear in request body will not be updated.
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] User defined name, maximum length is 128.
   *
   * @param {string} [options.userData] User specified data. Length should not
   * exceed 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(personGroupId, options, optionalCallback);
    }
  }

  /**
   * Retrieve the training status of a person group (completed or ongoing).
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TrainingStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTrainingStatusWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTrainingStatus(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieve the training status of a person group (completed or ongoing).
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TrainingStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TrainingStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTrainingStatus(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTrainingStatus(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTrainingStatus(personGroupId, options, optionalCallback);
    }
  }

  /**
   * List person groups’s personGroupId, name, userData and recognitionModel.<br
   * />
   * * Person groups are stored in alphabetical order of personGroupId.
   * * "start" parameter (string, optional) is a user-provided personGroupId
   * value that returned entries have larger ids by string comparison. "start"
   * set to empty to indicate return from the first item.
   * * "top" parameter (int, optional) specifies the number of entries to return.
   * A maximal of 1000 entries can be returned in one call. To fetch more, you
   * can specify "start" with the last retuned entry’s Id of the current call.
   * <br />
   * For example, total 5 person groups: "group1", ..., "group5".
   * <br /> "start=&top=" will return all 5 groups.
   * <br /> "start=&top=2" will return "group1", "group2".
   * <br /> "start=group2&top=3" will return "group3", "group4", "group5".
   *
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.start] List person groups from the least
   * personGroupId greater than the "start".
   *
   * @param {number} [options.top] The number of person groups to list.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List person groups’s personGroupId, name, userData and recognitionModel.<br
   * />
   * * Person groups are stored in alphabetical order of personGroupId.
   * * "start" parameter (string, optional) is a user-provided personGroupId
   * value that returned entries have larger ids by string comparison. "start"
   * set to empty to indicate return from the first item.
   * * "top" parameter (int, optional) specifies the number of entries to return.
   * A maximal of 1000 entries can be returned in one call. To fetch more, you
   * can specify "start" with the last retuned entry’s Id of the current call.
   * <br />
   * For example, total 5 person groups: "group1", ..., "group5".
   * <br /> "start=&top=" will return all 5 groups.
   * <br /> "start=&top=2" will return "group1", "group2".
   * <br /> "start=group2&top=3" will return "group3", "group4", "group5".
   *
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.start] List person groups from the least
   * personGroupId greater than the "start".
   *
   * @param {number} [options.top] The number of person groups to list.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Queue a person group training task, the training task may not be started
   * immediately.
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  trainWithHttpOperationResponse(personGroupId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._train(personGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Queue a person group training task, the training task may not be started
   * immediately.
   *
   * @param {string} personGroupId Id referencing a particular person group.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  train(personGroupId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._train(personGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._train(personGroupId, options, optionalCallback);
    }
  }

}

module.exports = PersonGroupOperations;
