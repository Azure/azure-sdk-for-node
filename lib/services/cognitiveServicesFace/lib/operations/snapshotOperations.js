/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Submit an operation to take a snapshot of face list, large face list, person
 * group or large person group, with user-specified snapshot type, source
 * object id, apply scope and an optional user data.<br />
 * The snapshot interfaces are for users to backup and restore their face data
 * from one face subscription to another, inside same region or across regions.
 * The workflow contains two phases, user first calls Snapshot - Take to create
 * a copy of the source object and store it as a snapshot, then calls Snapshot
 * - Apply to paste the snapshot to target subscription. The snapshots are
 * stored in a centralized location (per Azure instance), so that they can be
 * applied cross accounts and regions.<br />
 * Taking snapshot is an asynchronous operation. An operation id can be
 * obtained from the "Operation-Location" field in response header, to be used
 * in OperationStatus - Get for tracking the progress of creating the snapshot.
 * The snapshot id will be included in the "resourceLocation" field in
 * OperationStatus - Get response when the operation status is "succeeded".<br
 * />
 * Snapshot taking time depends on the number of person and face entries in the
 * source object. It could be in seconds, or up to several hours for 1,000,000
 * persons with multiple faces.<br />
 * Snapshots will be automatically expired and cleaned in 48 hours after it is
 * created by Snapshot - Take. User can delete the snapshot using Snapshot -
 * Delete by themselves any time before expiration.<br />
 * Taking snapshot for a certain object will not block any other operations
 * against the object. All read-only operations (Get/List and
 * Identify/FindSimilar/Verify) can be conducted as usual. For all writable
 * operations, including Add/Update/Delete the source object or its
 * persons/faces and Train, they are not blocked but not recommended because
 * writable updates may not be reflected on the snapshot during its taking.
 * After snapshot taking is completed, all readable and writable operations can
 * work as normal. Snapshot will also include the training results of the
 * source object, which means target subscription the snapshot applied to does
 * not need re-train the target object before calling Identify/FindSimilar.<br
 * />
 * * Free-tier subscription quota: 100 take operations per month.
 * * S0-tier subscription quota: 100 take operations per day.
 *
 * @param {string} type User specified type for the source object to take
 * snapshot from. Currently FaceList, PersonGroup, LargeFaceList and
 * LargePersonGroup are supported. Possible values include: 'FaceList',
 * 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
 *
 * @param {string} objectId User specified source object id to take snapshot
 * from.
 *
 * @param {array} applyScope User specified array of target Face subscription
 * ids for the snapshot. For each snapshot, only subscriptions included in the
 * applyScope of Snapshot - Take can apply it.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.userData] User specified data about the snapshot
 * for any purpose. Length should not exceed 16KB.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _take(type, objectId, applyScope, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (type) {
      let allowedValues = [ 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup' ];
      if (!allowedValues.some( function(item) { return item === type; })) {
        throw new Error(type + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('type cannot be null or undefined.');
    }
    if (objectId === null || objectId === undefined || typeof objectId.valueOf() !== 'string') {
      throw new Error('objectId cannot be null or undefined and it must be of type string.');
    }
    if (objectId !== null && objectId !== undefined) {
      if (objectId.length > 64)
      {
        throw new Error('"objectId" should satisfy the constraint - "MaxLength": 64');
      }
      if (objectId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"objectId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (!Array.isArray(applyScope)) {
      throw new Error('applyScope cannot be null or undefined and it must be of type array.');
    }
    for (let i = 0; i < applyScope.length; i++) {
      if (applyScope[i] !== null && applyScope[i] !== undefined && !(typeof applyScope[i].valueOf() === 'string' && msRest.isValidUuid(applyScope[i]))) {
        throw new Error('applyScope[i] must be of type string and must be a valid uuid.');
      }
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (userData !== null && userData !== undefined) {
      if (userData.length > 16384)
      {
        throw new Error('"userData" should satisfy the constraint - "MaxLength": 16384');
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((type !== null && type !== undefined) || (objectId !== null && objectId !== undefined) || (applyScope !== null && applyScope !== undefined) || (userData !== null && userData !== undefined)) {
    body = new client.models['TakeSnapshotRequest']();
    body.type = type;
    body.objectId = objectId;
    body.applyScope = applyScope;
    body.userData = userData;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'snapshots';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['TakeSnapshotRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List all accessible snapshots with related information, including snapshots
 * that were taken by the user, or snapshots to be applied to the user
 * (subscription id was included in the applyScope in Snapshot - Take).
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.type] User specified object type as a search
 * filter. Possible values include: 'FaceList', 'LargeFaceList',
 * 'LargePersonGroup', 'PersonGroup'
 *
 * @param {array} [options.applyScope] User specified snapshot apply scopes as
 * a search filter. ApplyScope is an array of the target Azure subscription ids
 * for the snapshot, specified by the user who created the snapshot by Snapshot
 * - Take.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let type = (options && options.type !== undefined) ? options.type : undefined;
  let applyScope = (options && options.applyScope !== undefined) ? options.applyScope : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (type) {
      let allowedValues = [ 'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup' ];
      if (!allowedValues.some( function(item) { return item === type; })) {
        throw new Error(type + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (Array.isArray(applyScope)) {
      for (let i = 0; i < applyScope.length; i++) {
        if (applyScope[i] !== null && applyScope[i] !== undefined && !(typeof applyScope[i].valueOf() === 'string' && msRest.isValidUuid(applyScope[i]))) {
          throw new Error('applyScope[i] must be of type string and must be a valid uuid.');
        }
      }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'snapshots';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (type !== null && type !== undefined) {
    queryParameters.push('type=' + encodeURIComponent(type));
  }
  if (applyScope !== null && applyScope !== undefined) {
    queryParameters.push('applyScope=' + encodeURIComponent(applyScope.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SnapshotElementType',
                  type: {
                    name: 'Composite',
                    className: 'Snapshot'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieve information about a snapshot. Snapshot is only accessible to the
 * source subscription who took it, and target subscriptions included in the
 * applyScope in Snapshot - Take.
 *
 * @param {uuid} snapshotId Id referencing a particular snapshot.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Snapshot} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(snapshotId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (snapshotId === null || snapshotId === undefined || typeof snapshotId.valueOf() !== 'string' || !msRest.isValidUuid(snapshotId)) {
      throw new Error('snapshotId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'snapshots/{snapshotId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{snapshotId}', encodeURIComponent(snapshotId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Snapshot']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Update the information of a snapshot. Only the source subscription who took
 * the snapshot can update the snapshot.
 *
 * @param {uuid} snapshotId Id referencing a particular snapshot.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.applyScope] Array of the target Face subscription
 * ids for the snapshot, specified by the user who created the snapshot when
 * calling Snapshot - Take. For each snapshot, only subscriptions included in
 * the applyScope of Snapshot - Take can apply it.
 *
 * @param {string} [options.userData] User specified data about the snapshot
 * for any purpose. Length should not exceed 16KB.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(snapshotId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let applyScope = (options && options.applyScope !== undefined) ? options.applyScope : undefined;
  let userData = (options && options.userData !== undefined) ? options.userData : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (snapshotId === null || snapshotId === undefined || typeof snapshotId.valueOf() !== 'string' || !msRest.isValidUuid(snapshotId)) {
      throw new Error('snapshotId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (Array.isArray(applyScope)) {
      for (let i = 0; i < applyScope.length; i++) {
        if (applyScope[i] !== null && applyScope[i] !== undefined && !(typeof applyScope[i].valueOf() === 'string' && msRest.isValidUuid(applyScope[i]))) {
          throw new Error('applyScope[i] must be of type string and must be a valid uuid.');
        }
      }
    }
    if (userData !== null && userData !== undefined && typeof userData.valueOf() !== 'string') {
      throw new Error('userData must be of type string.');
    }
    if (userData !== null && userData !== undefined) {
      if (userData.length > 16384)
      {
        throw new Error('"userData" should satisfy the constraint - "MaxLength": 16384');
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((applyScope !== null && applyScope !== undefined) || (userData !== null && userData !== undefined)) {
    body = new client.models['UpdateSnapshotRequest']();
    body.applyScope = applyScope;
    body.userData = userData;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'snapshots/{snapshotId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{snapshotId}', encodeURIComponent(snapshotId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['UpdateSnapshotRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Delete an existing snapshot according to the snapshotId. All object data and
 * information in the snapshot will also be deleted. Only the source
 * subscription who took the snapshot can delete the snapshot. If the user does
 * not delete a snapshot with this API, the snapshot will still be
 * automatically deleted in 48 hours after creation.
 *
 * @param {uuid} snapshotId Id referencing a particular snapshot.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(snapshotId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (snapshotId === null || snapshotId === undefined || typeof snapshotId.valueOf() !== 'string' || !msRest.isValidUuid(snapshotId)) {
      throw new Error('snapshotId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'snapshots/{snapshotId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{snapshotId}', encodeURIComponent(snapshotId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Submit an operation to apply a snapshot to current subscription. For each
 * snapshot, only subscriptions included in the applyScope of Snapshot - Take
 * can apply it.<br />
 * The snapshot interfaces are for users to backup and restore their face data
 * from one face subscription to another, inside same region or across regions.
 * The workflow contains two phases, user first calls Snapshot - Take to create
 * a copy of the source object and store it as a snapshot, then calls Snapshot
 * - Apply to paste the snapshot to target subscription. The snapshots are
 * stored in a centralized location (per Azure instance), so that they can be
 * applied cross accounts and regions.<br />
 * Applying snapshot is an asynchronous operation. An operation id can be
 * obtained from the "Operation-Location" field in response header, to be used
 * in OperationStatus - Get for tracking the progress of applying the snapshot.
 * The target object id will be included in the "resourceLocation" field in
 * OperationStatus - Get response when the operation status is "succeeded".<br
 * />
 * Snapshot applying time depends on the number of person and face entries in
 * the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000
 * persons with multiple faces.<br />
 * Snapshots will be automatically expired and cleaned in 48 hours after it is
 * created by Snapshot - Take. So the target subscription is required to apply
 * the snapshot in 48 hours since its creation.<br />
 * Applying a snapshot will not block any other operations against the target
 * object, however it is not recommended because the correctness cannot be
 * guaranteed during snapshot applying. After snapshot applying is completed,
 * all operations towards the target object can work as normal. Snapshot also
 * includes the training results of the source object, which means target
 * subscription the snapshot applied to does not need re-train the target
 * object before calling Identify/FindSimilar.<br />
 * One snapshot can be applied multiple times in parallel, while currently only
 * CreateNew apply mode is supported, which means the apply operation will fail
 * if target subscription already contains an object of same type and using the
 * same objectId. Users can specify the "objectId" in request body to avoid
 * such conflicts.<br />
 * * Free-tier subscription quota: 100 apply operations per month.
 * * S0-tier subscription quota: 100 apply operations per day.
 *
 * @param {uuid} snapshotId Id referencing a particular snapshot.
 *
 * @param {string} objectId User specified target object id to be created from
 * the snapshot.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.mode] Snapshot applying mode. Currently only
 * CreateNew is supported, which means the apply operation will fail if target
 * subscription already contains an object of same type and using the same
 * objectId. Users can specify the "objectId" in request body to avoid such
 * conflicts. Possible values include: 'CreateNew'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _apply(snapshotId, objectId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let mode = (options && options.mode !== undefined) ? options.mode : 'CreateNew';
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (snapshotId === null || snapshotId === undefined || typeof snapshotId.valueOf() !== 'string' || !msRest.isValidUuid(snapshotId)) {
      throw new Error('snapshotId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (objectId === null || objectId === undefined || typeof objectId.valueOf() !== 'string') {
      throw new Error('objectId cannot be null or undefined and it must be of type string.');
    }
    if (objectId !== null && objectId !== undefined) {
      if (objectId.length > 64)
      {
        throw new Error('"objectId" should satisfy the constraint - "MaxLength": 64');
      }
      if (objectId.match(/^[a-z0-9-_]+$/) === null)
      {
        throw new Error('"objectId" should satisfy the constraint - "Pattern": /^[a-z0-9-_]+$/');
      }
    }
    if (mode) {
      let allowedValues = [ 'CreateNew' ];
      if (!allowedValues.some( function(item) { return item === mode; })) {
        throw new Error(mode + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
  } catch (error) {
    return callback(error);
  }
  let body;
  if ((objectId !== null && objectId !== undefined) || (mode !== null && mode !== undefined)) {
    body = new client.models['ApplySnapshotRequest']();
    body.objectId = objectId;
    body.mode = mode;
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'snapshots/{snapshotId}/apply';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{snapshotId}', encodeURIComponent(snapshotId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ApplySnapshotRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Retrieve the status of a take/apply snapshot operation.
 *
 * @param {uuid} operationId Id referencing a particular take/apply snapshot
 * operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OperationStatus} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getOperationStatus(operationId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (operationId === null || operationId === undefined || typeof operationId.valueOf() !== 'string' || !msRest.isValidUuid(operationId)) {
      throw new Error('operationId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'operations/{operationId}';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  requestUrl = requestUrl.replace('{operationId}', encodeURIComponent(operationId.toString()));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OperationStatus']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a SnapshotOperations. */
class SnapshotOperations {
  /**
   * Create a SnapshotOperations.
   * @param {FaceClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._take = _take;
    this._list = _list;
    this._get = _get;
    this._update = _update;
    this._deleteMethod = _deleteMethod;
    this._apply = _apply;
    this._getOperationStatus = _getOperationStatus;
  }

  /**
   * Submit an operation to take a snapshot of face list, large face list, person
   * group or large person group, with user-specified snapshot type, source
   * object id, apply scope and an optional user data.<br />
   * The snapshot interfaces are for users to backup and restore their face data
   * from one face subscription to another, inside same region or across regions.
   * The workflow contains two phases, user first calls Snapshot - Take to create
   * a copy of the source object and store it as a snapshot, then calls Snapshot
   * - Apply to paste the snapshot to target subscription. The snapshots are
   * stored in a centralized location (per Azure instance), so that they can be
   * applied cross accounts and regions.<br />
   * Taking snapshot is an asynchronous operation. An operation id can be
   * obtained from the "Operation-Location" field in response header, to be used
   * in OperationStatus - Get for tracking the progress of creating the snapshot.
   * The snapshot id will be included in the "resourceLocation" field in
   * OperationStatus - Get response when the operation status is "succeeded".<br
   * />
   * Snapshot taking time depends on the number of person and face entries in the
   * source object. It could be in seconds, or up to several hours for 1,000,000
   * persons with multiple faces.<br />
   * Snapshots will be automatically expired and cleaned in 48 hours after it is
   * created by Snapshot - Take. User can delete the snapshot using Snapshot -
   * Delete by themselves any time before expiration.<br />
   * Taking snapshot for a certain object will not block any other operations
   * against the object. All read-only operations (Get/List and
   * Identify/FindSimilar/Verify) can be conducted as usual. For all writable
   * operations, including Add/Update/Delete the source object or its
   * persons/faces and Train, they are not blocked but not recommended because
   * writable updates may not be reflected on the snapshot during its taking.
   * After snapshot taking is completed, all readable and writable operations can
   * work as normal. Snapshot will also include the training results of the
   * source object, which means target subscription the snapshot applied to does
   * not need re-train the target object before calling Identify/FindSimilar.<br
   * />
   * * Free-tier subscription quota: 100 take operations per month.
   * * S0-tier subscription quota: 100 take operations per day.
   *
   * @param {string} type User specified type for the source object to take
   * snapshot from. Currently FaceList, PersonGroup, LargeFaceList and
   * LargePersonGroup are supported. Possible values include: 'FaceList',
   * 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
   *
   * @param {string} objectId User specified source object id to take snapshot
   * from.
   *
   * @param {array} applyScope User specified array of target Face subscription
   * ids for the snapshot. For each snapshot, only subscriptions included in the
   * applyScope of Snapshot - Take can apply it.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User specified data about the snapshot
   * for any purpose. Length should not exceed 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  takeWithHttpOperationResponse(type, objectId, applyScope, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._take(type, objectId, applyScope, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Submit an operation to take a snapshot of face list, large face list, person
   * group or large person group, with user-specified snapshot type, source
   * object id, apply scope and an optional user data.<br />
   * The snapshot interfaces are for users to backup and restore their face data
   * from one face subscription to another, inside same region or across regions.
   * The workflow contains two phases, user first calls Snapshot - Take to create
   * a copy of the source object and store it as a snapshot, then calls Snapshot
   * - Apply to paste the snapshot to target subscription. The snapshots are
   * stored in a centralized location (per Azure instance), so that they can be
   * applied cross accounts and regions.<br />
   * Taking snapshot is an asynchronous operation. An operation id can be
   * obtained from the "Operation-Location" field in response header, to be used
   * in OperationStatus - Get for tracking the progress of creating the snapshot.
   * The snapshot id will be included in the "resourceLocation" field in
   * OperationStatus - Get response when the operation status is "succeeded".<br
   * />
   * Snapshot taking time depends on the number of person and face entries in the
   * source object. It could be in seconds, or up to several hours for 1,000,000
   * persons with multiple faces.<br />
   * Snapshots will be automatically expired and cleaned in 48 hours after it is
   * created by Snapshot - Take. User can delete the snapshot using Snapshot -
   * Delete by themselves any time before expiration.<br />
   * Taking snapshot for a certain object will not block any other operations
   * against the object. All read-only operations (Get/List and
   * Identify/FindSimilar/Verify) can be conducted as usual. For all writable
   * operations, including Add/Update/Delete the source object or its
   * persons/faces and Train, they are not blocked but not recommended because
   * writable updates may not be reflected on the snapshot during its taking.
   * After snapshot taking is completed, all readable and writable operations can
   * work as normal. Snapshot will also include the training results of the
   * source object, which means target subscription the snapshot applied to does
   * not need re-train the target object before calling Identify/FindSimilar.<br
   * />
   * * Free-tier subscription quota: 100 take operations per month.
   * * S0-tier subscription quota: 100 take operations per day.
   *
   * @param {string} type User specified type for the source object to take
   * snapshot from. Currently FaceList, PersonGroup, LargeFaceList and
   * LargePersonGroup are supported. Possible values include: 'FaceList',
   * 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
   *
   * @param {string} objectId User specified source object id to take snapshot
   * from.
   *
   * @param {array} applyScope User specified array of target Face subscription
   * ids for the snapshot. For each snapshot, only subscriptions included in the
   * applyScope of Snapshot - Take can apply it.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userData] User specified data about the snapshot
   * for any purpose. Length should not exceed 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  take(type, objectId, applyScope, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._take(type, objectId, applyScope, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._take(type, objectId, applyScope, options, optionalCallback);
    }
  }

  /**
   * List all accessible snapshots with related information, including snapshots
   * that were taken by the user, or snapshots to be applied to the user
   * (subscription id was included in the applyScope in Snapshot - Take).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] User specified object type as a search
   * filter. Possible values include: 'FaceList', 'LargeFaceList',
   * 'LargePersonGroup', 'PersonGroup'
   *
   * @param {array} [options.applyScope] User specified snapshot apply scopes as
   * a search filter. ApplyScope is an array of the target Azure subscription ids
   * for the snapshot, specified by the user who created the snapshot by Snapshot
   * - Take.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List all accessible snapshots with related information, including snapshots
   * that were taken by the user, or snapshots to be applied to the user
   * (subscription id was included in the applyScope in Snapshot - Take).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] User specified object type as a search
   * filter. Possible values include: 'FaceList', 'LargeFaceList',
   * 'LargePersonGroup', 'PersonGroup'
   *
   * @param {array} [options.applyScope] User specified snapshot apply scopes as
   * a search filter. ApplyScope is an array of the target Azure subscription ids
   * for the snapshot, specified by the user who created the snapshot by Snapshot
   * - Take.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Retrieve information about a snapshot. Snapshot is only accessible to the
   * source subscription who took it, and target subscriptions included in the
   * applyScope in Snapshot - Take.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Snapshot>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(snapshotId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(snapshotId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieve information about a snapshot. Snapshot is only accessible to the
   * source subscription who took it, and target subscriptions included in the
   * applyScope in Snapshot - Take.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Snapshot} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Snapshot} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(snapshotId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(snapshotId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(snapshotId, options, optionalCallback);
    }
  }

  /**
   * Update the information of a snapshot. Only the source subscription who took
   * the snapshot can update the snapshot.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.applyScope] Array of the target Face subscription
   * ids for the snapshot, specified by the user who created the snapshot when
   * calling Snapshot - Take. For each snapshot, only subscriptions included in
   * the applyScope of Snapshot - Take can apply it.
   *
   * @param {string} [options.userData] User specified data about the snapshot
   * for any purpose. Length should not exceed 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(snapshotId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(snapshotId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update the information of a snapshot. Only the source subscription who took
   * the snapshot can update the snapshot.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.applyScope] Array of the target Face subscription
   * ids for the snapshot, specified by the user who created the snapshot when
   * calling Snapshot - Take. For each snapshot, only subscriptions included in
   * the applyScope of Snapshot - Take can apply it.
   *
   * @param {string} [options.userData] User specified data about the snapshot
   * for any purpose. Length should not exceed 16KB.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(snapshotId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(snapshotId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(snapshotId, options, optionalCallback);
    }
  }

  /**
   * Delete an existing snapshot according to the snapshotId. All object data and
   * information in the snapshot will also be deleted. Only the source
   * subscription who took the snapshot can delete the snapshot. If the user does
   * not delete a snapshot with this API, the snapshot will still be
   * automatically deleted in 48 hours after creation.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(snapshotId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(snapshotId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete an existing snapshot according to the snapshotId. All object data and
   * information in the snapshot will also be deleted. Only the source
   * subscription who took the snapshot can delete the snapshot. If the user does
   * not delete a snapshot with this API, the snapshot will still be
   * automatically deleted in 48 hours after creation.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(snapshotId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(snapshotId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(snapshotId, options, optionalCallback);
    }
  }

  /**
   * Submit an operation to apply a snapshot to current subscription. For each
   * snapshot, only subscriptions included in the applyScope of Snapshot - Take
   * can apply it.<br />
   * The snapshot interfaces are for users to backup and restore their face data
   * from one face subscription to another, inside same region or across regions.
   * The workflow contains two phases, user first calls Snapshot - Take to create
   * a copy of the source object and store it as a snapshot, then calls Snapshot
   * - Apply to paste the snapshot to target subscription. The snapshots are
   * stored in a centralized location (per Azure instance), so that they can be
   * applied cross accounts and regions.<br />
   * Applying snapshot is an asynchronous operation. An operation id can be
   * obtained from the "Operation-Location" field in response header, to be used
   * in OperationStatus - Get for tracking the progress of applying the snapshot.
   * The target object id will be included in the "resourceLocation" field in
   * OperationStatus - Get response when the operation status is "succeeded".<br
   * />
   * Snapshot applying time depends on the number of person and face entries in
   * the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000
   * persons with multiple faces.<br />
   * Snapshots will be automatically expired and cleaned in 48 hours after it is
   * created by Snapshot - Take. So the target subscription is required to apply
   * the snapshot in 48 hours since its creation.<br />
   * Applying a snapshot will not block any other operations against the target
   * object, however it is not recommended because the correctness cannot be
   * guaranteed during snapshot applying. After snapshot applying is completed,
   * all operations towards the target object can work as normal. Snapshot also
   * includes the training results of the source object, which means target
   * subscription the snapshot applied to does not need re-train the target
   * object before calling Identify/FindSimilar.<br />
   * One snapshot can be applied multiple times in parallel, while currently only
   * CreateNew apply mode is supported, which means the apply operation will fail
   * if target subscription already contains an object of same type and using the
   * same objectId. Users can specify the "objectId" in request body to avoid
   * such conflicts.<br />
   * * Free-tier subscription quota: 100 apply operations per month.
   * * S0-tier subscription quota: 100 apply operations per day.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {string} objectId User specified target object id to be created from
   * the snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.mode] Snapshot applying mode. Currently only
   * CreateNew is supported, which means the apply operation will fail if target
   * subscription already contains an object of same type and using the same
   * objectId. Users can specify the "objectId" in request body to avoid such
   * conflicts. Possible values include: 'CreateNew'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  applyWithHttpOperationResponse(snapshotId, objectId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._apply(snapshotId, objectId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Submit an operation to apply a snapshot to current subscription. For each
   * snapshot, only subscriptions included in the applyScope of Snapshot - Take
   * can apply it.<br />
   * The snapshot interfaces are for users to backup and restore their face data
   * from one face subscription to another, inside same region or across regions.
   * The workflow contains two phases, user first calls Snapshot - Take to create
   * a copy of the source object and store it as a snapshot, then calls Snapshot
   * - Apply to paste the snapshot to target subscription. The snapshots are
   * stored in a centralized location (per Azure instance), so that they can be
   * applied cross accounts and regions.<br />
   * Applying snapshot is an asynchronous operation. An operation id can be
   * obtained from the "Operation-Location" field in response header, to be used
   * in OperationStatus - Get for tracking the progress of applying the snapshot.
   * The target object id will be included in the "resourceLocation" field in
   * OperationStatus - Get response when the operation status is "succeeded".<br
   * />
   * Snapshot applying time depends on the number of person and face entries in
   * the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000
   * persons with multiple faces.<br />
   * Snapshots will be automatically expired and cleaned in 48 hours after it is
   * created by Snapshot - Take. So the target subscription is required to apply
   * the snapshot in 48 hours since its creation.<br />
   * Applying a snapshot will not block any other operations against the target
   * object, however it is not recommended because the correctness cannot be
   * guaranteed during snapshot applying. After snapshot applying is completed,
   * all operations towards the target object can work as normal. Snapshot also
   * includes the training results of the source object, which means target
   * subscription the snapshot applied to does not need re-train the target
   * object before calling Identify/FindSimilar.<br />
   * One snapshot can be applied multiple times in parallel, while currently only
   * CreateNew apply mode is supported, which means the apply operation will fail
   * if target subscription already contains an object of same type and using the
   * same objectId. Users can specify the "objectId" in request body to avoid
   * such conflicts.<br />
   * * Free-tier subscription quota: 100 apply operations per month.
   * * S0-tier subscription quota: 100 apply operations per day.
   *
   * @param {uuid} snapshotId Id referencing a particular snapshot.
   *
   * @param {string} objectId User specified target object id to be created from
   * the snapshot.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.mode] Snapshot applying mode. Currently only
   * CreateNew is supported, which means the apply operation will fail if target
   * subscription already contains an object of same type and using the same
   * objectId. Users can specify the "objectId" in request body to avoid such
   * conflicts. Possible values include: 'CreateNew'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  apply(snapshotId, objectId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._apply(snapshotId, objectId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._apply(snapshotId, objectId, options, optionalCallback);
    }
  }

  /**
   * Retrieve the status of a take/apply snapshot operation.
   *
   * @param {uuid} operationId Id referencing a particular take/apply snapshot
   * operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OperationStatus>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getOperationStatusWithHttpOperationResponse(operationId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getOperationStatus(operationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Retrieve the status of a take/apply snapshot operation.
   *
   * @param {uuid} operationId Id referencing a particular take/apply snapshot
   * operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OperationStatus} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OperationStatus} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getOperationStatus(operationId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getOperationStatus(operationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getOperationStatus(operationId, options, optionalCallback);
    }
  }

}

module.exports = SnapshotOperations;
