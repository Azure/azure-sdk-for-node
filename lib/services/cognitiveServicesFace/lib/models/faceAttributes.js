/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Face Attributes
 *
 */
class FaceAttributes {
  /**
   * Create a FaceAttributes.
   * @property {number} [age] Age in years
   * @property {string} [gender] Possible gender of the face. Possible values
   * include: 'male', 'female', 'genderless'
   * @property {number} [smile] Smile intensity, a number between [0,1]
   * @property {object} [facialHair] Properties describing facial hair
   * attributes.
   * @property {number} [facialHair.moustache]
   * @property {number} [facialHair.beard]
   * @property {number} [facialHair.sideburns]
   * @property {string} [glasses] Glasses type if any of the face. Possible
   * values include: 'noGlasses', 'readingGlasses', 'sunglasses',
   * 'swimmingGoggles'
   * @property {object} [headPose] Properties indicating head pose of the face.
   * @property {number} [headPose.roll]
   * @property {number} [headPose.yaw]
   * @property {number} [headPose.pitch]
   * @property {object} [emotion] Properties describing facial emotion in form
   * of confidence ranging from 0 to 1.
   * @property {number} [emotion.anger]
   * @property {number} [emotion.contempt]
   * @property {number} [emotion.disgust]
   * @property {number} [emotion.fear]
   * @property {number} [emotion.happiness]
   * @property {number} [emotion.neutral]
   * @property {number} [emotion.sadness]
   * @property {number} [emotion.surprise]
   * @property {object} [hair] Properties describing hair attributes.
   * @property {number} [hair.bald] A number describing confidence level of
   * whether the person is bald.
   * @property {boolean} [hair.invisible] A boolean value describing whether
   * the hair is visible in the image.
   * @property {array} [hair.hairColor] An array of candidate colors and
   * confidence level in the presence of each.
   * @property {object} [makeup] Properties describing present makeups on a
   * given face.
   * @property {boolean} [makeup.eyeMakeup] A boolean value describing whether
   * eye makeup is present on a face.
   * @property {boolean} [makeup.lipMakeup] A boolean value describing whether
   * lip makeup is present on a face.
   * @property {object} [occlusion] Properties describing occlusions on a given
   * face.
   * @property {boolean} [occlusion.foreheadOccluded] A boolean value
   * indicating whether forehead is occluded.
   * @property {boolean} [occlusion.eyeOccluded] A boolean value indicating
   * whether eyes are occluded.
   * @property {boolean} [occlusion.mouthOccluded] A boolean value indicating
   * whether the mouth is occluded.
   * @property {array} [accessories] Properties describing any accessories on a
   * given face.
   * @property {object} [blur] Properties describing any presence of blur
   * within the image.
   * @property {string} [blur.blurLevel] An enum value indicating level of
   * blurriness. Possible values include: 'Low', 'Medium', 'High'
   * @property {number} [blur.value] A number indicating level of blurriness
   * ranging from 0 to 1.
   * @property {object} [exposure] Properties describing exposure level of the
   * image.
   * @property {string} [exposure.exposureLevel] An enum value indicating level
   * of exposure. Possible values include: 'UnderExposure', 'GoodExposure',
   * 'OverExposure'
   * @property {number} [exposure.value] A number indicating level of exposure
   * level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is
   * good exposure. [0.75, 1] is over exposure.
   * @property {object} [noise] Properties describing noise level of the image.
   * @property {string} [noise.noiseLevel] An enum value indicating level of
   * noise. Possible values include: 'Low', 'Medium', 'High'
   * @property {number} [noise.value] A number indicating level of noise level
   * ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good
   * exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3,
   * 0.7) is medium noise level. [0.7, 1] is high noise level.
   */
  constructor() {
  }

  /**
   * Defines the metadata of FaceAttributes
   *
   * @returns {object} metadata of FaceAttributes
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FaceAttributes',
      type: {
        name: 'Composite',
        className: 'FaceAttributes',
        modelProperties: {
          age: {
            required: false,
            serializedName: 'age',
            type: {
              name: 'Number'
            }
          },
          gender: {
            required: false,
            serializedName: 'gender',
            type: {
              name: 'Enum',
              allowedValues: [ 'male', 'female', 'genderless' ]
            }
          },
          smile: {
            required: false,
            serializedName: 'smile',
            type: {
              name: 'Number'
            }
          },
          facialHair: {
            required: false,
            serializedName: 'facialHair',
            type: {
              name: 'Composite',
              className: 'FacialHair'
            }
          },
          glasses: {
            required: false,
            serializedName: 'glasses',
            type: {
              name: 'Enum',
              allowedValues: [ 'noGlasses', 'readingGlasses', 'sunglasses', 'swimmingGoggles' ]
            }
          },
          headPose: {
            required: false,
            serializedName: 'headPose',
            type: {
              name: 'Composite',
              className: 'HeadPose'
            }
          },
          emotion: {
            required: false,
            serializedName: 'emotion',
            type: {
              name: 'Composite',
              className: 'Emotion'
            }
          },
          hair: {
            required: false,
            serializedName: 'hair',
            type: {
              name: 'Composite',
              className: 'Hair'
            }
          },
          makeup: {
            required: false,
            serializedName: 'makeup',
            type: {
              name: 'Composite',
              className: 'Makeup'
            }
          },
          occlusion: {
            required: false,
            serializedName: 'occlusion',
            type: {
              name: 'Composite',
              className: 'Occlusion'
            }
          },
          accessories: {
            required: false,
            serializedName: 'accessories',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AccessoryElementType',
                  type: {
                    name: 'Composite',
                    className: 'Accessory'
                  }
              }
            }
          },
          blur: {
            required: false,
            serializedName: 'blur',
            type: {
              name: 'Composite',
              className: 'Blur'
            }
          },
          exposure: {
            required: false,
            serializedName: 'exposure',
            type: {
              name: 'Composite',
              className: 'Exposure'
            }
          },
          noise: {
            required: false,
            serializedName: 'noise',
            type: {
              name: 'Composite',
              className: 'Noise'
            }
          }
        }
      }
    };
  }
}

module.exports = FaceAttributes;
