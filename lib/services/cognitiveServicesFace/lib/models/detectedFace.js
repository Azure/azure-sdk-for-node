/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Detected Face object.
 *
 */
class DetectedFace {
  /**
   * Create a DetectedFace.
   * @property {uuid} [faceId]
   * @property {object} faceRectangle
   * @property {number} [faceRectangle.width] The width of the rectangle, in
   * pixels.
   * @property {number} [faceRectangle.height] The height of the rectangle, in
   * pixels.
   * @property {number} [faceRectangle.left] The distance from the left edge if
   * the image to the left edge of the rectangle, in pixels.
   * @property {number} [faceRectangle.top] The distance from the top edge if
   * the image to the top edge of the rectangle, in pixels.
   * @property {object} [faceLandmarks]
   * @property {object} [faceLandmarks.pupilLeft]
   * @property {number} [faceLandmarks.pupilLeft.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.pupilLeft.y] The vertical component, in
   * pixels.
   * @property {object} [faceLandmarks.pupilRight]
   * @property {number} [faceLandmarks.pupilRight.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.pupilRight.y] The vertical component, in
   * pixels.
   * @property {object} [faceLandmarks.noseTip]
   * @property {number} [faceLandmarks.noseTip.x] The horizontal component, in
   * pixels.
   * @property {number} [faceLandmarks.noseTip.y] The vertical component, in
   * pixels.
   * @property {object} [faceLandmarks.mouthLeft]
   * @property {number} [faceLandmarks.mouthLeft.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.mouthLeft.y] The vertical component, in
   * pixels.
   * @property {object} [faceLandmarks.mouthRight]
   * @property {number} [faceLandmarks.mouthRight.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.mouthRight.y] The vertical component, in
   * pixels.
   * @property {object} [faceLandmarks.eyebrowLeftOuter]
   * @property {number} [faceLandmarks.eyebrowLeftOuter.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyebrowLeftOuter.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.eyebrowLeftInner]
   * @property {number} [faceLandmarks.eyebrowLeftInner.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyebrowLeftInner.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.eyeLeftOuter]
   * @property {number} [faceLandmarks.eyeLeftOuter.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyeLeftOuter.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.eyeLeftTop]
   * @property {number} [faceLandmarks.eyeLeftTop.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.eyeLeftTop.y] The vertical component, in
   * pixels.
   * @property {object} [faceLandmarks.eyeLeftBottom]
   * @property {number} [faceLandmarks.eyeLeftBottom.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyeLeftBottom.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.eyeLeftInner]
   * @property {number} [faceLandmarks.eyeLeftInner.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyeLeftInner.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.eyebrowRightInner]
   * @property {number} [faceLandmarks.eyebrowRightInner.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyebrowRightInner.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.eyebrowRightOuter]
   * @property {number} [faceLandmarks.eyebrowRightOuter.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyebrowRightOuter.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.eyeRightInner]
   * @property {number} [faceLandmarks.eyeRightInner.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyeRightInner.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.eyeRightTop]
   * @property {number} [faceLandmarks.eyeRightTop.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.eyeRightTop.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.eyeRightBottom]
   * @property {number} [faceLandmarks.eyeRightBottom.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyeRightBottom.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.eyeRightOuter]
   * @property {number} [faceLandmarks.eyeRightOuter.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.eyeRightOuter.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.noseRootLeft]
   * @property {number} [faceLandmarks.noseRootLeft.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.noseRootLeft.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.noseRootRight]
   * @property {number} [faceLandmarks.noseRootRight.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.noseRootRight.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.noseLeftAlarTop]
   * @property {number} [faceLandmarks.noseLeftAlarTop.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.noseLeftAlarTop.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.noseRightAlarTop]
   * @property {number} [faceLandmarks.noseRightAlarTop.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.noseRightAlarTop.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.noseLeftAlarOutTip]
   * @property {number} [faceLandmarks.noseLeftAlarOutTip.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.noseLeftAlarOutTip.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.noseRightAlarOutTip]
   * @property {number} [faceLandmarks.noseRightAlarOutTip.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.noseRightAlarOutTip.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.upperLipTop]
   * @property {number} [faceLandmarks.upperLipTop.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.upperLipTop.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.upperLipBottom]
   * @property {number} [faceLandmarks.upperLipBottom.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.upperLipBottom.y] The vertical
   * component, in pixels.
   * @property {object} [faceLandmarks.underLipTop]
   * @property {number} [faceLandmarks.underLipTop.x] The horizontal component,
   * in pixels.
   * @property {number} [faceLandmarks.underLipTop.y] The vertical component,
   * in pixels.
   * @property {object} [faceLandmarks.underLipBottom]
   * @property {number} [faceLandmarks.underLipBottom.x] The horizontal
   * component, in pixels.
   * @property {number} [faceLandmarks.underLipBottom.y] The vertical
   * component, in pixels.
   * @property {object} [faceAttributes]
   * @property {number} [faceAttributes.age] Age in years
   * @property {string} [faceAttributes.gender] Possible gender of the face.
   * Possible values include: 'male', 'female', 'genderless'
   * @property {number} [faceAttributes.smile] Smile intensity, a number
   * between [0,1]
   * @property {object} [faceAttributes.facialHair] Properties describing
   * facial hair attributes.
   * @property {number} [faceAttributes.facialHair.moustache]
   * @property {number} [faceAttributes.facialHair.beard]
   * @property {number} [faceAttributes.facialHair.sideburns]
   * @property {string} [faceAttributes.glasses] Glasses type if any of the
   * face. Possible values include: 'noGlasses', 'readingGlasses',
   * 'sunglasses', 'swimmingGoggles'
   * @property {object} [faceAttributes.headPose] Properties indicating head
   * pose of the face.
   * @property {number} [faceAttributes.headPose.roll]
   * @property {number} [faceAttributes.headPose.yaw]
   * @property {number} [faceAttributes.headPose.pitch]
   * @property {object} [faceAttributes.emotion] Properties describing facial
   * emotion in form of confidence ranging from 0 to 1.
   * @property {number} [faceAttributes.emotion.anger]
   * @property {number} [faceAttributes.emotion.contempt]
   * @property {number} [faceAttributes.emotion.disgust]
   * @property {number} [faceAttributes.emotion.fear]
   * @property {number} [faceAttributes.emotion.happiness]
   * @property {number} [faceAttributes.emotion.neutral]
   * @property {number} [faceAttributes.emotion.sadness]
   * @property {number} [faceAttributes.emotion.surprise]
   * @property {object} [faceAttributes.hair] Properties describing hair
   * attributes.
   * @property {number} [faceAttributes.hair.bald] A number describing
   * confidence level of whether the person is bald.
   * @property {boolean} [faceAttributes.hair.invisible] A boolean value
   * describing whether the hair is visible in the image.
   * @property {array} [faceAttributes.hair.hairColor] An array of candidate
   * colors and confidence level in the presence of each.
   * @property {object} [faceAttributes.makeup] Properties describing present
   * makeups on a given face.
   * @property {boolean} [faceAttributes.makeup.eyeMakeup] A boolean value
   * describing whether eye makeup is present on a face.
   * @property {boolean} [faceAttributes.makeup.lipMakeup] A boolean value
   * describing whether lip makeup is present on a face.
   * @property {object} [faceAttributes.occlusion] Properties describing
   * occlusions on a given face.
   * @property {boolean} [faceAttributes.occlusion.foreheadOccluded] A boolean
   * value indicating whether forehead is occluded.
   * @property {boolean} [faceAttributes.occlusion.eyeOccluded] A boolean value
   * indicating whether eyes are occluded.
   * @property {boolean} [faceAttributes.occlusion.mouthOccluded] A boolean
   * value indicating whether the mouth is occluded.
   * @property {array} [faceAttributes.accessories] Properties describing any
   * accessories on a given face.
   * @property {object} [faceAttributes.blur] Properties describing any
   * presence of blur within the image.
   * @property {string} [faceAttributes.blur.blurLevel] An enum value
   * indicating level of blurriness. Possible values include: 'Low', 'Medium',
   * 'High'
   * @property {number} [faceAttributes.blur.value] A number indicating level
   * of blurriness ranging from 0 to 1.
   * @property {object} [faceAttributes.exposure] Properties describing
   * exposure level of the image.
   * @property {string} [faceAttributes.exposure.exposureLevel] An enum value
   * indicating level of exposure. Possible values include: 'UnderExposure',
   * 'GoodExposure', 'OverExposure'
   * @property {number} [faceAttributes.exposure.value] A number indicating
   * level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure.
   * [0.25, 0.75) is good exposure. [0.75, 1] is over exposure.
   * @property {object} [faceAttributes.noise] Properties describing noise
   * level of the image.
   * @property {string} [faceAttributes.noise.noiseLevel] An enum value
   * indicating level of noise. Possible values include: 'Low', 'Medium',
   * 'High'
   * @property {number} [faceAttributes.noise.value] A number indicating level
   * of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25,
   * 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise
   * level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DetectedFace
   *
   * @returns {object} metadata of DetectedFace
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DetectedFace',
      type: {
        name: 'Composite',
        className: 'DetectedFace',
        modelProperties: {
          faceId: {
            required: false,
            serializedName: 'faceId',
            type: {
              name: 'String'
            }
          },
          faceRectangle: {
            required: true,
            serializedName: 'faceRectangle',
            type: {
              name: 'Composite',
              className: 'FaceRectangle'
            }
          },
          faceLandmarks: {
            required: false,
            serializedName: 'faceLandmarks',
            type: {
              name: 'Composite',
              className: 'FaceLandmarks'
            }
          },
          faceAttributes: {
            required: false,
            serializedName: 'faceAttributes',
            type: {
              name: 'Composite',
              className: 'FaceAttributes'
            }
          }
        }
      }
    };
  }
}

module.exports = DetectedFace;
