/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Request body for face to person verification.
 *
 */
class VerifyFaceToPersonRequest {
  /**
   * Create a VerifyFaceToPersonRequest.
   * @property {uuid} faceId FaceId of the face, comes from Face - Detect
   * @property {string} [personGroupId] Using existing personGroupId and
   * personId for fast loading a specified person. personGroupId is created in
   * PersonGroup - Create. Parameter personGroupId and largePersonGroupId
   * should not be provided at the same time.
   * @property {string} [largePersonGroupId] Using existing largePersonGroupId
   * and personId for fast loading a specified person. largePersonGroupId is
   * created in LargePersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
   * @property {uuid} personId Specify a certain person in a person group or a
   * large person group. personId is created in PersonGroup Person - Create or
   * LargePersonGroup Person - Create.
   */
  constructor() {
  }

  /**
   * Defines the metadata of VerifyFaceToPersonRequest
   *
   * @returns {object} metadata of VerifyFaceToPersonRequest
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VerifyFaceToPersonRequest',
      type: {
        name: 'Composite',
        className: 'VerifyFaceToPersonRequest',
        modelProperties: {
          faceId: {
            required: true,
            serializedName: 'faceId',
            type: {
              name: 'String'
            }
          },
          personGroupId: {
            required: false,
            serializedName: 'personGroupId',
            constraints: {
              MaxLength: 64,
              Pattern: /^[a-z0-9-_]+$/
            },
            type: {
              name: 'String'
            }
          },
          largePersonGroupId: {
            required: false,
            serializedName: 'largePersonGroupId',
            constraints: {
              MaxLength: 64,
              Pattern: /^[a-z0-9-_]+$/
            },
            type: {
              name: 'String'
            }
          },
          personId: {
            required: true,
            serializedName: 'personId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = VerifyFaceToPersonRequest;
