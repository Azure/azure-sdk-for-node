/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Error body.
 */
export interface ErrorModel {
  code?: string;
  message?: string;
}

/**
 * Error information returned by the API
*/
export interface APIError {
  error?: ErrorModel;
}

/**
 * A rectangle within which a face can be found
*/
export interface FaceRectangle {
  /**
   * The width of the rectangle, in pixels.
  */
  width: number;
  /**
   * The height of the rectangle, in pixels.
  */
  height: number;
  /**
   * The distance from the left edge if the image to the left edge of the rectangle, in pixels.
  */
  left: number;
  /**
   * The distance from the top edge if the image to the top edge of the rectangle, in pixels.
  */
  top: number;
}

/**
 * Coordinates within an image
*/
export interface Coordinate {
  /**
   * The horizontal component, in pixels.
  */
  x: number;
  /**
   * The vertical component, in pixels.
  */
  y: number;
}

/**
 * A collection of 27-point face landmarks pointing to the important positions of face components.
*/
export interface FaceLandmarks {
  pupilLeft?: Coordinate;
  pupilRight?: Coordinate;
  noseTip?: Coordinate;
  mouthLeft?: Coordinate;
  mouthRight?: Coordinate;
  eyebrowLeftOuter?: Coordinate;
  eyebrowLeftInner?: Coordinate;
  eyeLeftOuter?: Coordinate;
  eyeLeftTop?: Coordinate;
  eyeLeftBottom?: Coordinate;
  eyeLeftInner?: Coordinate;
  eyebrowRightInner?: Coordinate;
  eyebrowRightOuter?: Coordinate;
  eyeRightInner?: Coordinate;
  eyeRightTop?: Coordinate;
  eyeRightBottom?: Coordinate;
  eyeRightOuter?: Coordinate;
  noseRootLeft?: Coordinate;
  noseRootRight?: Coordinate;
  noseLeftAlarTop?: Coordinate;
  noseRightAlarTop?: Coordinate;
  noseLeftAlarOutTip?: Coordinate;
  noseRightAlarOutTip?: Coordinate;
  upperLipTop?: Coordinate;
  upperLipBottom?: Coordinate;
  underLipTop?: Coordinate;
  underLipBottom?: Coordinate;
}

/**
 * Properties describing facial hair attributes.
*/
export interface FacialHair {
  moustache?: number;
  beard?: number;
  sideburns?: number;
}

/**
 * Properties indicating head pose of the face.
*/
export interface HeadPose {
  roll?: number;
  yaw?: number;
  pitch?: number;
}

/**
 * Properties describing facial emotion in form of confidence ranging from 0 to 1.
*/
export interface Emotion {
  anger?: number;
  contempt?: number;
  disgust?: number;
  fear?: number;
  happiness?: number;
  neutral?: number;
  sadness?: number;
  surprise?: number;
}

/**
 * Hair color and associated confidence
*/
export interface HairColor {
  /**
   * Name of the hair color. Possible values include: 'unknown', 'white', 'gray', 'blond', 'brown',
   * 'red', 'black', 'other'
  */
  color?: string;
  /**
   * Confidence level of the color
  */
  confidence?: number;
}

/**
 * Properties describing hair attributes.
*/
export interface Hair {
  /**
   * A number describing confidence level of whether the person is bald.
  */
  bald?: number;
  /**
   * A boolean value describing whether the hair is visible in the image.
  */
  invisible?: boolean;
  /**
   * An array of candidate colors and confidence level in the presence of each.
  */
  hairColor?: HairColor[];
}

/**
 * Properties describing present makeups on a given face.
*/
export interface Makeup {
  /**
   * A boolean value describing whether eye makeup is present on a face.
  */
  eyeMakeup?: boolean;
  /**
   * A boolean value describing whether lip makeup is present on a face.
  */
  lipMakeup?: boolean;
}

/**
 * Properties describing occlusions on a given face.
*/
export interface Occlusion {
  /**
   * A boolean value indicating whether forehead is occluded.
  */
  foreheadOccluded?: boolean;
  /**
   * A boolean value indicating whether eyes are occluded.
  */
  eyeOccluded?: boolean;
  /**
   * A boolean value indicating whether the mouth is occluded.
  */
  mouthOccluded?: boolean;
}

/**
 * Accessory item and corresponding confidence level.
*/
export interface Accessory {
  /**
   * Type of an accessory. Possible values include: 'headWear', 'glasses', 'mask'
  */
  type?: string;
  /**
   * Confidence level of an accessory
  */
  confidence?: number;
}

/**
 * Properties describing any presence of blur within the image.
*/
export interface Blur {
  /**
   * An enum value indicating level of blurriness. Possible values include: 'Low', 'Medium', 'High'
  */
  blurLevel?: string;
  /**
   * A number indicating level of blurriness ranging from 0 to 1.
  */
  value?: number;
}

/**
 * Properties describing exposure level of the image.
*/
export interface Exposure {
  /**
   * An enum value indicating level of exposure. Possible values include: 'UnderExposure',
   * 'GoodExposure', 'OverExposure'
  */
  exposureLevel?: string;
  /**
   * A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure.
   * [0.25, 0.75) is good exposure. [0.75, 1] is over exposure.
  */
  value?: number;
}

/**
 * Properties describing noise level of the image.
*/
export interface Noise {
  /**
   * An enum value indicating level of noise. Possible values include: 'Low', 'Medium', 'High'
  */
  noiseLevel?: string;
  /**
   * A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure.
   * [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3,
   * 0.7) is medium noise level. [0.7, 1] is high noise level.
  */
  value?: number;
}

/**
 * Face Attributes
*/
export interface FaceAttributes {
  /**
   * Age in years
  */
  age?: number;
  /**
   * Possible gender of the face. Possible values include: 'male', 'female', 'genderless'
  */
  gender?: string;
  /**
   * Smile intensity, a number between [0,1]
  */
  smile?: number;
  /**
   * Properties describing facial hair attributes.
  */
  facialHair?: FacialHair;
  /**
   * Glasses type if any of the face. Possible values include: 'noGlasses', 'readingGlasses',
   * 'sunglasses', 'swimmingGoggles'
  */
  glasses?: string;
  /**
   * Properties indicating head pose of the face.
  */
  headPose?: HeadPose;
  /**
   * Properties describing facial emotion in form of confidence ranging from 0 to 1.
  */
  emotion?: Emotion;
  /**
   * Properties describing hair attributes.
  */
  hair?: Hair;
  /**
   * Properties describing present makeups on a given face.
  */
  makeup?: Makeup;
  /**
   * Properties describing occlusions on a given face.
  */
  occlusion?: Occlusion;
  /**
   * Properties describing any accessories on a given face.
  */
  accessories?: Accessory[];
  /**
   * Properties describing any presence of blur within the image.
  */
  blur?: Blur;
  /**
   * Properties describing exposure level of the image.
  */
  exposure?: Exposure;
  /**
   * Properties describing noise level of the image.
  */
  noise?: Noise;
}

/**
 * Detected Face object.
*/
export interface DetectedFace {
  faceId?: string;
  faceRectangle: FaceRectangle;
  faceLandmarks?: FaceLandmarks;
  faceAttributes?: FaceAttributes;
}

/**
 * Request body for find similar operation.
*/
export interface FindSimilarRequest {
  /**
   * FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note
   * that this faceId is not persisted and will expire 24 hours after the detection call
  */
  faceId: string;
  /**
   * An existing user-specified unique candidate face list, created in Face List - Create a Face
   * List. Face list contains a set of persistedFaceIds which are persisted and will never expire.
   * Parameter faceListId, largeFaceListId and faceIds should not be provided at the same timeã€‚
  */
  faceListId?: string;
  /**
   * An existing user-specified unique candidate large face list, created in LargeFaceList -
   * Create. Large face list contains a set of persistedFaceIds which are persisted and will never
   * expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same
   * time.
  */
  largeFaceListId?: string;
  /**
   * An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will
   * expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter
   * faceListId, largeFaceListId and faceIds should not be provided at the same time.
  */
  faceIds?: string[];
  /**
   * The number of top similar faces returned. The valid range is [1, 1000].
  */
  maxNumOfCandidatesReturned?: number;
  /**
   * Similar face searching mode. It can be "matchPerson" or "matchFace". Possible values include:
   * 'matchPerson', 'matchFace'
  */
  mode?: string;
}

/**
 * Response body for find similar face operation.
*/
export interface SimilarFace {
  /**
   * FaceId of candidate face when find by faceIds. faceId is created by Face - Detect and will
   * expire 24 hours after the detection call
  */
  faceId?: string;
  /**
   * PersistedFaceId of candidate face when find by faceListId. persistedFaceId in face list is
   * persisted and will not expire. As showed in below response
  */
  persistedFaceId?: string;
  /**
   * Similarity confidence of the candidate face. The higher confidence, the more similar. Range
   * between [0,1].
  */
  confidence: number;
}

/**
 * Request body for group request.
*/
export interface GroupRequest {
  /**
   * Array of candidate faceId created by Face - Detect. The maximum is 1000 faces
  */
  faceIds: string[];
}

/**
 * An array of face groups based on face similarity.
*/
export interface GroupResult {
  /**
   * A partition of the original faces based on face similarity. Groups are ranked by number of
   * faces
  */
  groups: string[][];
  /**
   * Face ids array of faces that cannot find any similar faces from original faces.
  */
  messyGroup?: string[];
}

/**
 * Request body for identify face operation.
*/
export interface IdentifyRequest {
  /**
   * Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
   * independently. The valid number of faceIds is between [1, 10].
  */
  faceIds: string[];
  /**
   * PersonGroupId of the target person group, created by PersonGroup - Create. Parameter
   * personGroupId and largePersonGroupId should not be provided at the same time.
  */
  personGroupId?: string;
  /**
   * LargePersonGroupId of the target large person group, created by LargePersonGroup - Create.
   * Parameter personGroupId and largePersonGroupId should not be provided at the same time.
  */
  largePersonGroupId?: string;
  /**
   * The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
  */
  maxNumOfCandidatesReturned?: number;
  /**
   * Confidence threshold of identification, used to judge whether one face belong to one person.
   * The range of confidenceThreshold is [0, 1] (default specified by algorithm).
  */
  confidenceThreshold?: number;
}

/**
 * All possible faces that may qualify.
*/
export interface IdentifyCandidate {
  /**
   * Id of candidate
  */
  personId: string;
  /**
   * Confidence threshold of identification, used to judge whether one face belong to one person.
   * The range of confidenceThreshold is [0, 1] (default specified by algorithm).
  */
  confidence: number;
}

/**
 * Response body for identify face operation.
*/
export interface IdentifyResult {
  /**
   * FaceId of the query face
  */
  faceId: string;
  /**
   * Identified person candidates for that face (ranked by confidence). Array size should be no
   * larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty
   * array.
  */
  candidates: IdentifyCandidate[];
}

/**
 * Request body for face to person verification.
*/
export interface VerifyFaceToPersonRequest {
  /**
   * FaceId of the face, comes from Face - Detect
  */
  faceId: string;
  /**
   * Using existing personGroupId and personId for fast loading a specified person. personGroupId
   * is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not
   * be provided at the same time.
  */
  personGroupId?: string;
  /**
   * Using existing largePersonGroupId and personId for fast loading a specified person.
   * largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
  */
  largePersonGroupId?: string;
  /**
   * Specify a certain person in a person group or a large person group. personId is created in
   * PersonGroup Person - Create or LargePersonGroup Person - Create.
  */
  personId: string;
}

/**
 * Request body for face to face verification.
*/
export interface VerifyFaceToFaceRequest {
  /**
   * FaceId of the first face, comes from Face - Detect
  */
  faceId1: string;
  /**
   * FaceId of the second face, comes from Face - Detect
  */
  faceId2: string;
}

/**
 * Result of the verify operation.
*/
export interface VerifyResult {
  /**
   * True if the two faces belong to the same person or the face belongs to the person, otherwise
   * false.
  */
  isIdentical: boolean;
  /**
   * A number indicates the similarity confidence of whether two faces belong to the same person,
   * or whether the face belongs to the person. By default, isIdentical is set to True if
   * similarity confidence is greater than or equal to 0.5. This is useful for advanced users to
   * override "isIdentical" and fine-tune the result on their own data.
  */
  confidence: number;
}

/**
 * PersonFace object.
*/
export interface PersistedFace {
  /**
   * The persistedFaceId of the target face, which is persisted and will not expire. Different from
   * faceId created by Face - Detect and will expire in 24 hours after the detection call.
  */
  persistedFaceId: string;
  /**
   * User-provided data attached to the face. The size limit is 1KB.
  */
  userData?: string;
}

/**
 * A combination of user defined name and user specified data for the person,
 * largePersonGroup/personGroup, and largeFaceList/faceList.
*/
export interface NameAndUserDataContract {
  /**
   * User defined name, maximum length is 128.
  */
  name?: string;
  /**
   * User specified data. Length should not exceed 16KB.
  */
  userData?: string;
}

/**
 * Face list object.
*/
export interface FaceList extends NameAndUserDataContract {
  /**
   * FaceListId of the target face list.
  */
  faceListId: string;
  /**
   * Persisted faces within the face list.
  */
  persistedFaces?: PersistedFace[];
}

/**
 * Person group object.
*/
export interface PersonGroup extends NameAndUserDataContract {
  /**
   * PersonGroupId of the target person group.
  */
  personGroupId: string;
}

/**
 * Person object.
*/
export interface Person extends NameAndUserDataContract {
  /**
   * PersonId of the target face list.
  */
  personId: string;
  /**
   * PersistedFaceIds of registered faces in the person. These persistedFaceIds are returned from
   * Person - Add a Person Face, and will not expire.
  */
  persistedFaceIds?: string[];
}

/**
 * Large face list object.
*/
export interface LargeFaceList extends NameAndUserDataContract {
  /**
   * LargeFaceListId of the target large face list.
  */
  largeFaceListId: string;
}

/**
 * Large person group object.
*/
export interface LargePersonGroup extends NameAndUserDataContract {
  /**
   * LargePersonGroupId of the target large person groups
  */
  largePersonGroupId: string;
}

/**
 * Request to update face data.
*/
export interface UpdateFaceRequest {
  /**
   * User-provided data attached to the face. The size limit is 1KB.
  */
  userData?: string;
}

/**
 * Training status object.
*/
export interface TrainingStatus {
  /**
   * Training status: notstarted, running, succeeded, failed. If the training process is waiting to
   * perform, the status is notstarted. If the training is ongoing, the status is running. Status
   * succeed means this person group or large person group is ready for Face - Identify, or this
   * large face list is ready for Face - Find Similar. Status failed is often caused by no person
   * or no persisted face exist in the person group or large person group, or no persisted face
   * exist in the large face list. Possible values include: 'nonstarted', 'running', 'succeeded',
   * 'failed'
  */
  status: string;
  /**
   * A combined UTC date and time string that describes the created time of the person group, large
   * person group or large face list.
  */
  created: Date;
  /**
   * A combined UTC date and time string that describes the last modify time of the person group,
   * large person group or large face list, could be null value when the group is not successfully
   * trained.
  */
  lastAction?: Date;
  /**
   * A combined UTC date and time string that describes the last successful training time of the
   * person group, large person group or large face list.
  */
  lastSuccessfulTraining?: Date;
  /**
   * Show failure message when training failed (omitted when training succeed).
  */
  message?: string;
}

export interface ImageUrl {
  /**
   * Publicly reachable URL of an image
  */
  url: string;
}
