/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * User details.
 *
 * @extends models['Resource']
 */
class UserContract extends models['Resource'] {
  /**
   * Create a UserContract.
   * @member {string} [state] Account state. Specifies whether the user is
   * active or not. Blocked users are unable to sign into the developer portal
   * or call any APIs of subscribed products. Default state is Active. Possible
   * values include: 'active', 'blocked'. Default value: 'active' .
   * @member {string} [note] Optional note about a user set by the
   * administrator.
   * @member {array} [identities] Collection of user identities.
   * @member {string} [firstName] First name.
   * @member {string} [lastName] Last name.
   * @member {string} [email] Email address.
   * @member {date} [registrationDate] Date of user registration. The date
   * conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
   * the ISO 8601 standard.
   * @member {array} [groups] Collection of groups user is part of.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of UserContract
   *
   * @returns {object} metadata of UserContract
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'UserContract',
      type: {
        name: 'Composite',
        className: 'UserContract',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            serializedName: 'properties.state',
            defaultValue: 'active',
            type: {
              name: 'Enum',
              allowedValues: [ 'active', 'blocked' ]
            }
          },
          note: {
            required: false,
            serializedName: 'properties.note',
            type: {
              name: 'String'
            }
          },
          identities: {
            required: false,
            readOnly: true,
            serializedName: 'properties.identities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'UserIdentityContractElementType',
                  type: {
                    name: 'Composite',
                    className: 'UserIdentityContract'
                  }
              }
            }
          },
          firstName: {
            required: false,
            serializedName: 'properties.firstName',
            type: {
              name: 'String'
            }
          },
          lastName: {
            required: false,
            serializedName: 'properties.lastName',
            type: {
              name: 'String'
            }
          },
          email: {
            required: false,
            serializedName: 'properties.email',
            type: {
              name: 'String'
            }
          },
          registrationDate: {
            required: false,
            serializedName: 'properties.registrationDate',
            type: {
              name: 'DateTime'
            }
          },
          groups: {
            required: false,
            readOnly: true,
            serializedName: 'properties.groups',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'GroupContractElementType',
                  type: {
                    name: 'Composite',
                    className: 'GroupContract'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = UserContract;
