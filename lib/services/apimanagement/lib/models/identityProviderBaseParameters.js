/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Identity Provider Base Parameter Properties.
 *
 */
class IdentityProviderBaseParameters {
  /**
   * Create a IdentityProviderBaseParameters.
   * @property {string} [type] Identity Provider Type identifier. Possible
   * values include: 'facebook', 'google', 'microsoft', 'twitter', 'aad',
   * 'aadB2C'
   * @property {array} [allowedTenants] List of Allowed Tenants when
   * configuring Azure Active Directory login.
   * @property {string} [authority] OpenID Connect discovery endpoint hostname
   * for AAD or AAD B2C.
   * @property {string} [signupPolicyName] Signup Policy Name. Only applies to
   * AAD B2C Identity Provider.
   * @property {string} [signinPolicyName] Signin Policy Name. Only applies to
   * AAD B2C Identity Provider.
   * @property {string} [profileEditingPolicyName] Profile Editing Policy Name.
   * Only applies to AAD B2C Identity Provider.
   * @property {string} [passwordResetPolicyName] Password Reset Policy Name.
   * Only applies to AAD B2C Identity Provider.
   */
  constructor() {
  }

  /**
   * Defines the metadata of IdentityProviderBaseParameters
   *
   * @returns {object} metadata of IdentityProviderBaseParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'IdentityProviderBaseParameters',
      type: {
        name: 'Composite',
        className: 'IdentityProviderBaseParameters',
        modelProperties: {
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          allowedTenants: {
            required: false,
            serializedName: 'allowedTenants',
            constraints: {
              MaxItems: 32
            },
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          authority: {
            required: false,
            serializedName: 'authority',
            type: {
              name: 'String'
            }
          },
          signupPolicyName: {
            required: false,
            serializedName: 'signupPolicyName',
            constraints: {
              MinLength: 1
            },
            type: {
              name: 'String'
            }
          },
          signinPolicyName: {
            required: false,
            serializedName: 'signinPolicyName',
            constraints: {
              MinLength: 1
            },
            type: {
              name: 'String'
            }
          },
          profileEditingPolicyName: {
            required: false,
            serializedName: 'profileEditingPolicyName',
            constraints: {
              MinLength: 1
            },
            type: {
              name: 'String'
            }
          },
          passwordResetPolicyName: {
            required: false,
            serializedName: 'passwordResetPolicyName',
            constraints: {
              MinLength: 1
            },
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = IdentityProviderBaseParameters;
