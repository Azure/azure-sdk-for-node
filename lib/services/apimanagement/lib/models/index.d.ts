/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * Error Field contract.
 */
export interface ErrorFieldContract {
  /**
   * Property level error code.
   */
  code?: string;
  /**
   * Human-readable representation of property-level error.
   */
  message?: string;
  /**
   * Property name.
   */
  target?: string;
}

/**
 * Error Body contract.
 */
export interface ErrorResponseBody {
  /**
   * Service-defined error code. This code serves as a sub-status for the HTTP error code specified
   * in the response.
   */
  code?: string;
  /**
   * Human-readable representation of the error.
   */
  message?: string;
  /**
   * The list of invalid fields send in request, in case of validation error.
   */
  details?: ErrorFieldContract[];
}

/**
 * Error Response.
 */
export interface ErrorResponse {
  /**
   * Service-defined error code. This code serves as a sub-status for the HTTP error code specified
   * in the response.
   */
  code?: string;
  /**
   * Human-readable representation of the error.
   */
  message?: string;
  /**
   * The list of invalid fields send in request, in case of validation error.
   */
  details?: ErrorFieldContract[];
}

/**
 * Region profile.
 */
export interface RegionContract {
  /**
   * Region name.
   */
  readonly name?: string;
  /**
   * whether Region is the master region.
   */
  isMasterRegion?: boolean;
  /**
   * whether Region is deleted.
   */
  isDeleted?: boolean;
}

/**
 * The Resource definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type for API Management resource.
   */
  readonly type?: string;
}

/**
 * The object defining the schema of the exported Api Detail
 */
export interface ApiExportResultValue {
  /**
   * Link to the Storage Blob containing the result of the export operation. The Blob Uri is only
   * valid for 5 minutes.
   */
  link?: string;
}

/**
 * API Export result.
 */
export interface ApiExportResult {
  /**
   * ResourceId of the API which was exported.
   */
  id?: string;
  /**
   * Format in which the Api Details are exported to the Storage Blob with Sas Key valid for 5
   * minutes. Possible values include: 'Swagger', 'Wsdl', 'Wadl', 'OpenApi'
   */
  exportResultFormat?: string;
  /**
   * The object defining the schema of the exported Api Detail
   */
  value?: ApiExportResultValue;
}

/**
 * Product Entity Base Parameters
 */
export interface ProductEntityBaseParameters {
  /**
   * Product description. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Product terms of use. Developers trying to subscribe to the product will be presented and
   * required to accept these terms before they can complete the subscription process.
   */
  terms?: string;
  /**
   * Whether a product subscription is required for accessing APIs included in this product. If
   * true, the product is referred to as "protected" and a valid subscription key is required for a
   * request to an API included in the product to succeed. If false, the product is referred to as
   * "open" and requests to an API included in the product can be made without a subscription key.
   * If property is omitted when creating a new product it's value is assumed to be true.
   */
  subscriptionRequired?: boolean;
  /**
   * whether subscription approval is required. If false, new subscriptions will be approved
   * automatically enabling developers to call the product’s APIs immediately after subscribing. If
   * true, administrators must manually approve the subscription before the developer can any of
   * the product’s APIs. Can be present only if subscriptionRequired property is present and has a
   * value of false.
   */
  approvalRequired?: boolean;
  /**
   * Whether the number of subscriptions a user can have to this product at the same time. Set to
   * null or omit to allow unlimited per user subscriptions. Can be present only if
   * subscriptionRequired property is present and has a value of false.
   */
  subscriptionsLimit?: number;
  /**
   * whether product is published or not. Published products are discoverable by users of developer
   * portal. Non published products are visible only to administrators. Default state of Product is
   * notPublished. Possible values include: 'notPublished', 'published'
   */
  state?: string;
}

/**
 * Product profile.
 */
export interface ProductTagResourceContractProperties extends ProductEntityBaseParameters {
  /**
   * Identifier of the product in the form of /products/{productId}
   */
  id?: string;
  /**
   * Product name.
   */
  name: string;
}

/**
 * Operation Entity contract Properties.
 */
export interface OperationTagResourceContractProperties {
  /**
   * Identifier of the operation in form /operations/{operationId}.
   */
  id?: string;
  /**
   * Operation name.
   */
  readonly name?: string;
  /**
   * Api Name.
   */
  readonly apiName?: string;
  /**
   * Api Revision.
   */
  readonly apiRevision?: string;
  /**
   * Api Version.
   */
  readonly apiVersion?: string;
  /**
   * Operation Description.
   */
  readonly description?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by
   * only them.
   */
  readonly method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include
   * parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  readonly urlTemplate?: string;
}

/**
 * Subscription key parameter names details.
 */
export interface SubscriptionKeyParameterNamesContract {
  /**
   * Subscription key header name.
   */
  header?: string;
  /**
   * Subscription key query string parameter name.
   */
  query?: string;
}

/**
 * API OAuth2 Authentication settings details.
 */
export interface OpenIdAuthenticationSettingsContract {
  /**
   * OAuth authorization server identifier.
   */
  openidProviderId?: string;
  /**
   * How to send token to the server.
   */
  bearerTokenSendingMethods?: string[];
}

/**
 * API OAuth2 Authentication settings details.
 */
export interface OAuth2AuthenticationSettingsContract {
  /**
   * OAuth authorization server identifier.
   */
  authorizationServerId?: string;
  /**
   * operations scope.
   */
  scope?: string;
}

/**
 * API Authentication Settings.
 */
export interface AuthenticationSettingsContract {
  /**
   * OAuth2 Authentication settings
   */
  oAuth2?: OAuth2AuthenticationSettingsContract;
  /**
   * OpenID Connect Authentication Settings
   */
  openid?: OpenIdAuthenticationSettingsContract;
  /**
   * Specifies whether subscription key is required during call to this API, true - API is included
   * into closed products only, false - API is included into open products alone, null - there is a
   * mix of products.
   */
  subscriptionKeyRequired?: boolean;
}

/**
 * An API Version Set contains the common configuration for a set of API Versions relating
 */
export interface ApiVersionSetContractDetails {
  /**
   * Identifier for existing API Version Set. Omit this value to create a new Version Set.
   */
  id?: string;
  /**
   * The display Name of the API Version Set.
   */
  name?: string;
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   * Possible values include: 'Segment', 'Query', 'Header'
   */
  versioningScheme?: string;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to
   * `header`.
   */
  versionHeaderName?: string;
}

/**
 * Criteria to limit import of WSDL to a subset of the document.
 */
export interface ApiCreateOrUpdatePropertiesWsdlSelector {
  /**
   * Name of service to import from WSDL
   */
  wsdlServiceName?: string;
  /**
   * Name of endpoint(port) to import from WSDL
   */
  wsdlEndpointName?: string;
}

/**
 * API base contract details.
 */
export interface ApiEntityBaseContract {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API. Possible values include: 'http', 'soap'
   */
  apiType?: string;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
}

/**
 * Api Entity Properties
 */
export interface ApiContractProperties extends ApiEntityBaseContract {
  /**
   * API identifier of the source API.
   */
  sourceApiId?: string;
  /**
   * API name. Must be 1 to 300 characters long.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters
   * long.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API
   * Management service instance. It is appended to the API endpoint base URL specified during the
   * service instance creation to form a public URL for this API.
   */
  path: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: string[];
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
}

/**
 * API contract properties for the Tag Resources.
 */
export interface ApiTagResourceContractProperties extends ApiEntityBaseContract {
  /**
   * API identifier in the form /apis/{apiId}.
   */
  id?: string;
  /**
   * API name.
   */
  name?: string;
  /**
   * Absolute URL of the backend service implementing this API.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API
   * Management service instance. It is appended to the API endpoint base URL specified during the
   * service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: string[];
}

/**
 * Contract defining the Tag property in the Tag Resource Contract
 */
export interface TagTagResourceContractProperties {
  /**
   * Tag identifier
   */
  id?: string;
  /**
   * Tag Name
   */
  name?: string;
}

/**
 * TagResource contract properties.
 */
export interface TagResourceContract {
  /**
   * Tag associated with the resource.
   */
  tag: TagTagResourceContractProperties;
  /**
   * Api associated with the tag.
   */
  api?: ApiTagResourceContractProperties;
  /**
   * Operation associated with the tag.
   */
  operation?: OperationTagResourceContractProperties;
  /**
   * Product associated with the tag.
   */
  product?: ProductTagResourceContractProperties;
}

/**
 * Tag Contract details.
 */
export interface TagContract extends Resource {
  /**
   * Tag name.
   */
  displayName: string;
}

/**
 * Contract details.
 */
export interface TagDescriptionContract extends Resource {
  /**
   * Description of the Tag.
   */
  description?: string;
  /**
   * Absolute URL of external resources describing the tag.
   */
  externalDocsUrl?: string;
  /**
   * Description of the external resources describing the tag.
   */
  externalDocsDescription?: string;
  /**
   * Tag name.
   */
  displayName?: string;
}

/**
 * Parameters supplied to the Create TagDescription operation.
 */
export interface TagDescriptionCreateParameters {
  /**
   * Description of the Tag.
   */
  description?: string;
  /**
   * Absolute URL of external resources describing the tag.
   */
  externalDocsUrl?: string;
  /**
   * Description of the external resources describing the tag.
   */
  externalDocsDescription?: string;
}

/**
 * Issue Attachment Contract details.
 */
export interface IssueAttachmentContract extends Resource {
  /**
   * Filename by which the binary data will be saved.
   */
  title: string;
  /**
   * Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded
   * binary data provided in the 'content' property.
   */
  contentFormat: string;
  /**
   * An HTTP link or Base64-encoded binary data.
   */
  content: string;
}

/**
 * Issue Comment Contract details.
 */
export interface IssueCommentContract extends Resource {
  /**
   * Comment text.
   */
  text: string;
  /**
   * Date and time when the comment was created.
   */
  createdDate?: Date;
  /**
   * A resource identifier for the user who left the comment.
   */
  userId: string;
}

/**
 * Issue contract Base Properties.
 */
export interface IssueContractBaseProperties {
  /**
   * Date and time when the issue was created.
   */
  createdDate?: Date;
  /**
   * Status of the issue. Possible values include: 'proposed', 'open', 'removed', 'resolved',
   * 'closed'
   */
  state?: string;
  /**
   * A resource identifier for the API the issue was created for.
   */
  apiId?: string;
}

/**
 * Issue update Parameters.
 */
export interface IssueUpdateContract {
  /**
   * Date and time when the issue was created.
   */
  createdDate?: Date;
  /**
   * Status of the issue. Possible values include: 'proposed', 'open', 'removed', 'resolved',
   * 'closed'
   */
  state?: string;
  /**
   * A resource identifier for the API the issue was created for.
   */
  apiId?: string;
  /**
   * The issue title.
   */
  title?: string;
  /**
   * Text describing the issue.
   */
  description?: string;
  /**
   * A resource identifier for the user created the issue.
   */
  userId?: string;
}

/**
 * Issue Contract details.
 */
export interface IssueContract extends Resource {
  /**
   * Date and time when the issue was created.
   */
  createdDate?: Date;
  /**
   * Status of the issue. Possible values include: 'proposed', 'open', 'removed', 'resolved',
   * 'closed'
   */
  state?: string;
  /**
   * A resource identifier for the API the issue was created for.
   */
  apiId?: string;
  /**
   * The issue title.
   */
  title: string;
  /**
   * Text describing the issue.
   */
  description: string;
  /**
   * A resource identifier for the user created the issue.
   */
  userId: string;
}

/**
 * Body logging settings.
 */
export interface BodyDiagnosticSettings {
  /**
   * Number of request body bytes to log.
   */
  bytes?: number;
}

/**
 * Http message diagnostic settings.
 */
export interface HttpMessageDiagnostic {
  /**
   * Array of HTTP Headers to log.
   */
  headers?: string[];
  /**
   * Body logging settings.
   */
  body?: BodyDiagnosticSettings;
}

/**
 * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
 */
export interface PipelineDiagnosticSettings {
  /**
   * Diagnostic settings for request.
   */
  request?: HttpMessageDiagnostic;
  /**
   * Diagnostic settings for response.
   */
  response?: HttpMessageDiagnostic;
}

/**
 * Sampling settings for Diagnostic.
 */
export interface SamplingSettings {
  /**
   * Sampling type. Possible values include: 'fixed'
   */
  samplingType?: string;
  /**
   * Rate of sampling for fixed-rate sampling.
   */
  percentage?: number;
}

/**
 * Diagnostic details.
 */
export interface DiagnosticContract extends Resource {
  /**
   * Specifies for what type of messages sampling settings should not apply. Possible values
   * include: 'allErrors'
   */
  alwaysLog?: string;
  /**
   * Resource Id of a target logger.
   */
  loggerId: string;
  /**
   * Sampling settings for Diagnostic.
   */
  sampling?: SamplingSettings;
  /**
   * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
   */
  frontend?: PipelineDiagnosticSettings;
  /**
   * Diagnostic settings for incoming/outgoing HTTP messages to the Backend
   */
  backend?: PipelineDiagnosticSettings;
  /**
   * Whether to process Correlation Headers coming to Api Management Service. Only applicable to
   * Application Insights diagnostics. Default is true.
   */
  enableHttpCorrelationHeaders?: boolean;
}

/**
 * Schema Contract details.
 */
export interface SchemaContract extends Resource {
  /**
   * Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media
   * type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema
   * use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use
   * `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use
   * `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use
   * `application/vnd.ms-azure-apim.wadl.grammars+xml`.
   */
  contentType: string;
  /**
   * Properties of the Schema Document.
   */
  document?: any;
}

/**
 * Schema Contract details.
 */
export interface SchemaCreateOrUpdateContract extends Resource {
  /**
   * Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media
   * type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema
   * use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use
   * `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use
   * `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use
   * `application/vnd.ms-azure-apim.wadl.grammars+xml`.
   */
  contentType: string;
  /**
   * Json escaped string defining the document representing the Schema.
   */
  value?: string;
}

/**
 * Policy Contract details.
 */
export interface PolicyContract extends Resource {
  /**
   * Contents of the Policy as defined by the format.
   */
  value: string;
  /**
   * Format of the policyContent. Possible values include: 'xml', 'xml-link', 'rawxml',
   * 'rawxml-link'
   */
  format?: string;
}

/**
 * The response of the list policy operation.
 */
export interface PolicyCollection {
  /**
   * Policy Contract value.
   */
  value?: PolicyContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Product details.
 */
export interface ProductContract extends Resource {
  /**
   * Product description. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Product terms of use. Developers trying to subscribe to the product will be presented and
   * required to accept these terms before they can complete the subscription process.
   */
  terms?: string;
  /**
   * Whether a product subscription is required for accessing APIs included in this product. If
   * true, the product is referred to as "protected" and a valid subscription key is required for a
   * request to an API included in the product to succeed. If false, the product is referred to as
   * "open" and requests to an API included in the product can be made without a subscription key.
   * If property is omitted when creating a new product it's value is assumed to be true.
   */
  subscriptionRequired?: boolean;
  /**
   * whether subscription approval is required. If false, new subscriptions will be approved
   * automatically enabling developers to call the product’s APIs immediately after subscribing. If
   * true, administrators must manually approve the subscription before the developer can any of
   * the product’s APIs. Can be present only if subscriptionRequired property is present and has a
   * value of false.
   */
  approvalRequired?: boolean;
  /**
   * Whether the number of subscriptions a user can have to this product at the same time. Set to
   * null or omit to allow unlimited per user subscriptions. Can be present only if
   * subscriptionRequired property is present and has a value of false.
   */
  subscriptionsLimit?: number;
  /**
   * whether product is published or not. Published products are discoverable by users of developer
   * portal. Non published products are visible only to administrators. Default state of Product is
   * notPublished. Possible values include: 'notPublished', 'published'
   */
  state?: string;
  /**
   * Product name.
   */
  displayName: string;
}

/**
 * Operation parameters details.
 */
export interface ParameterContract {
  /**
   * Parameter name.
   */
  name: string;
  /**
   * Parameter description.
   */
  description?: string;
  /**
   * Parameter type.
   */
  type: string;
  /**
   * Default parameter value.
   */
  defaultValue?: string;
  /**
   * Specifies whether parameter is required or not.
   */
  required?: boolean;
  /**
   * Parameter values.
   */
  values?: string[];
}

/**
 * Operation request/response representation details.
 */
export interface RepresentationContract {
  /**
   * Specifies a registered or custom content type for this representation, e.g. application/xml.
   */
  contentType: string;
  /**
   * An example of the representation.
   */
  sample?: string;
  /**
   * Schema identifier. Applicable only if 'contentType' value is neither
   * 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
   */
  schemaId?: string;
  /**
   * Type name defined by the schema. Applicable only if 'contentType' value is neither
   * 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
   */
  typeName?: string;
  /**
   * Collection of form parameters. Required if 'contentType' value is either
   * 'application/x-www-form-urlencoded' or 'multipart/form-data'..
   */
  formParameters?: ParameterContract[];
}

/**
 * Operation response details.
 */
export interface ResponseContract {
  /**
   * Operation response HTTP status code.
   */
  statusCode: number;
  /**
   * Operation response description.
   */
  description?: string;
  /**
   * Collection of operation response representations.
   */
  representations?: RepresentationContract[];
  /**
   * Collection of operation response headers.
   */
  headers?: ParameterContract[];
}

/**
 * Operation request details.
 */
export interface RequestContract {
  /**
   * Operation request description.
   */
  description?: string;
  /**
   * Collection of operation request query parameters.
   */
  queryParameters?: ParameterContract[];
  /**
   * Collection of operation request headers.
   */
  headers?: ParameterContract[];
  /**
   * Collection of operation request representations.
   */
  representations?: RepresentationContract[];
}

/**
 * Api Operation Entity Base Contract details.
 */
export interface OperationEntityBaseContract {
  /**
   * Collection of URL template parameters.
   */
  templateParameters?: ParameterContract[];
  /**
   * Description of the operation. May include HTML formatting tags.
   */
  description?: string;
  /**
   * An entity containing request details.
   */
  request?: RequestContract;
  /**
   * Array of Operation responses.
   */
  responses?: ResponseContract[];
  /**
   * Operation Policies
   */
  policies?: string;
}

/**
 * Api Operation Update Contract details.
 */
export interface OperationUpdateContract {
  /**
   * Collection of URL template parameters.
   */
  templateParameters?: ParameterContract[];
  /**
   * Description of the operation. May include HTML formatting tags.
   */
  description?: string;
  /**
   * An entity containing request details.
   */
  request?: RequestContract;
  /**
   * Array of Operation responses.
   */
  responses?: ResponseContract[];
  /**
   * Operation Policies
   */
  policies?: string;
  /**
   * Operation Name.
   */
  displayName?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by
   * only them.
   */
  method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include
   * parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate?: string;
}

/**
 * Api Operation details.
 */
export interface OperationContract extends Resource {
  /**
   * Collection of URL template parameters.
   */
  templateParameters?: ParameterContract[];
  /**
   * Description of the operation. May include HTML formatting tags.
   */
  description?: string;
  /**
   * An entity containing request details.
   */
  request?: RequestContract;
  /**
   * Array of Operation responses.
   */
  responses?: ResponseContract[];
  /**
   * Operation Policies
   */
  policies?: string;
  /**
   * Operation Name.
   */
  displayName: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by
   * only them.
   */
  method: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include
   * parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   */
  urlTemplate: string;
}

/**
 * ApiRelease details.
 */
export interface ApiReleaseContract extends Resource {
  /**
   * Identifier of the API the release belongs to.
   */
  apiId?: string;
  /**
   * The time the API was released. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ
   * as specified by the ISO 8601 standard.
   */
  readonly createdDateTime?: Date;
  /**
   * The time the API release was updated.
   */
  readonly updatedDateTime?: Date;
  /**
   * Release Notes
   */
  notes?: string;
}

/**
 * Summary of revision metadata.
 */
export interface ApiRevisionContract {
  /**
   * Identifier of the API Revision.
   */
  readonly apiId?: string;
  /**
   * Revision number of API.
   */
  readonly apiRevision?: string;
  /**
   * The time the API Revision was created. The date conforms to the following format:
   * yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   */
  readonly createdDateTime?: Date;
  /**
   * The time the API Revision were updated. The date conforms to the following format:
   * yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   */
  readonly updatedDateTime?: Date;
  /**
   * Description of the API Revision.
   */
  readonly description?: string;
  /**
   * Gateway URL for accessing the non-current API Revision.
   */
  readonly privateUrl?: string;
  /**
   * Indicates if API revision is the current api revision.
   */
  readonly isOnline?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isCurrent?: boolean;
}

/**
 * API update contract details.
 */
export interface ApiUpdateContract {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API. Possible values include: 'http', 'soap'
   */
  apiType?: string;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
  /**
   * API name.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API
   * Management service instance. It is appended to the API endpoint base URL specified during the
   * service instance creation to form a public URL for this API.
   */
  path?: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: string[];
}

/**
 * Api details.
 */
export interface ApiContract extends Resource {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API. Possible values include: 'http', 'soap'
   */
  apiType?: string;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
  /**
   * API identifier of the source API.
   */
  sourceApiId?: string;
  /**
   * API name. Must be 1 to 300 characters long.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters
   * long.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API
   * Management service instance. It is appended to the API endpoint base URL specified during the
   * service instance creation to form a public URL for this API.
   */
  path: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: string[];
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
}

/**
 * API Create or Update Parameters.
 */
export interface ApiCreateOrUpdateParameter {
  /**
   * Description of the API. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Collection of authentication settings included into this API.
   */
  authenticationSettings?: AuthenticationSettingsContract;
  /**
   * Protocols over which API is made available.
   */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /**
   * Type of API. Possible values include: 'http', 'soap'
   */
  apiType?: string;
  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   */
  apiRevision?: string;
  /**
   * Indicates the Version identifier of the API if the API is versioned
   */
  apiVersion?: string;
  /**
   * Indicates if API revision is current api revision.
   */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   */
  readonly isOnline?: boolean;
  /**
   * Description of the Api Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Description of the Api Version.
   */
  apiVersionDescription?: string;
  /**
   * A resource identifier for the related ApiVersionSet.
   */
  apiVersionSetId?: string;
  /**
   * Specifies whether an API or Product subscription is required for accessing the API.
   */
  subscriptionRequired?: boolean;
  /**
   * API identifier of the source API.
   */
  sourceApiId?: string;
  /**
   * API name. Must be 1 to 300 characters long.
   */
  displayName?: string;
  /**
   * Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters
   * long.
   */
  serviceUrl?: string;
  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API
   * Management service instance. It is appended to the API endpoint base URL specified during the
   * service instance creation to form a public URL for this API.
   */
  path: string;
  /**
   * Describes on which protocols the operations in this API can be invoked.
   */
  protocols?: string[];
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
  /**
   * Content value when Importing an API.
   */
  value?: string;
  /**
   * Format of the Content in which the API is getting imported. Possible values include:
   * 'wadl-xml', 'wadl-link-json', 'swagger-json', 'swagger-link-json', 'wsdl', 'wsdl-link',
   * 'openapi', 'openapi+json', 'openapi-link'
   */
  format?: string;
  /**
   * Criteria to limit import of WSDL to a subset of the document.
   */
  wsdlSelector?: ApiCreateOrUpdatePropertiesWsdlSelector;
  /**
   * Type of Api to create.
   * * `http` creates a SOAP to REST API
   * * `soap` creates a SOAP pass-through API. Possible values include: 'SoapToRest',
   * 'SoapPassThrough'
   */
  soapApiType?: string;
}

/**
 * Api Version set base parameters
 */
export interface ApiVersionSetEntityBase {
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to
   * `header`.
   */
  versionHeaderName?: string;
}

/**
 * Parameters to update or create an Api Version Set Contract.
 */
export interface ApiVersionSetUpdateParameters {
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to
   * `header`.
   */
  versionHeaderName?: string;
  /**
   * Name of API Version Set
   */
  displayName?: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   * Possible values include: 'Segment', 'Query', 'Header'
   */
  versioningScheme?: string;
}

/**
 * Api Version Set Contract details.
 */
export interface ApiVersionSetContract extends Resource {
  /**
   * Description of API Version Set.
   */
  description?: string;
  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
   */
  versionQueryName?: string;
  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to
   * `header`.
   */
  versionHeaderName?: string;
  /**
   * Name of API Version Set
   */
  displayName: string;
  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   * Possible values include: 'Segment', 'Query', 'Header'
   */
  versioningScheme: string;
}

/**
 * OAuth acquire token request body parameter (www-url-form-encoded).
 */
export interface TokenBodyParameterContract {
  /**
   * body parameter name.
   */
  name: string;
  /**
   * body parameter value.
   */
  value: string;
}

/**
 * External OAuth authorization server Update settings contract.
 */
export interface AuthorizationServerContractBaseProperties {
  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is
   * optional.
   */
  authorizationMethods?: string[];
  /**
   * Method of authentication supported by the token endpoint of this authorization server.
   * Possible values are Basic and/or Body. When Body is specified, client credentials and other
   * parameters are passed within the request body in the application/x-www-form-urlencoded format.
   */
  clientAuthenticationMethod?: string[];
  /**
   * Additional parameters required by the token endpoint of this authorization server represented
   * as an array of JSON objects with name and value string properties, i.e. {"name" : "name
   * value", "value": "a value"}.
   */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   */
  tokenEndpoint?: string;
  /**
   * If true, authorization server will include state parameter from the authorization request to
   * its response. Client may use state parameter to raise protocol security.
   */
  supportState?: boolean;
  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API
   * level. Should be provided in the form of a string containing space-delimited values.
   */
  defaultScope?: string;
  /**
   * Specifies the mechanism by which access token is passed to the API.
   */
  bearerTokenSendingMethods?: string[];
  /**
   * Client or app secret registered with this authorization server.
   */
  clientSecret?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this
   * authorization server. Default resource owner username.
   */
  resourceOwnerUsername?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this
   * authorization server. Default resource owner password.
   */
  resourceOwnerPassword?: string;
}

/**
 * External OAuth authorization server settings.
 */
export interface AuthorizationServerUpdateContract extends Resource {
  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is
   * optional.
   */
  authorizationMethods?: string[];
  /**
   * Method of authentication supported by the token endpoint of this authorization server.
   * Possible values are Basic and/or Body. When Body is specified, client credentials and other
   * parameters are passed within the request body in the application/x-www-form-urlencoded format.
   */
  clientAuthenticationMethod?: string[];
  /**
   * Additional parameters required by the token endpoint of this authorization server represented
   * as an array of JSON objects with name and value string properties, i.e. {"name" : "name
   * value", "value": "a value"}.
   */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   */
  tokenEndpoint?: string;
  /**
   * If true, authorization server will include state parameter from the authorization request to
   * its response. Client may use state parameter to raise protocol security.
   */
  supportState?: boolean;
  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API
   * level. Should be provided in the form of a string containing space-delimited values.
   */
  defaultScope?: string;
  /**
   * Specifies the mechanism by which access token is passed to the API.
   */
  bearerTokenSendingMethods?: string[];
  /**
   * Client or app secret registered with this authorization server.
   */
  clientSecret?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this
   * authorization server. Default resource owner username.
   */
  resourceOwnerUsername?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this
   * authorization server. Default resource owner password.
   */
  resourceOwnerPassword?: string;
  /**
   * User-friendly authorization server name.
   */
  displayName?: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is
   * performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint?: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint?: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes?: string[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId?: string;
}

/**
 * External OAuth authorization server settings.
 */
export interface AuthorizationServerContract extends Resource {
  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is
   * optional.
   */
  authorizationMethods?: string[];
  /**
   * Method of authentication supported by the token endpoint of this authorization server.
   * Possible values are Basic and/or Body. When Body is specified, client credentials and other
   * parameters are passed within the request body in the application/x-www-form-urlencoded format.
   */
  clientAuthenticationMethod?: string[];
  /**
   * Additional parameters required by the token endpoint of this authorization server represented
   * as an array of JSON objects with name and value string properties, i.e. {"name" : "name
   * value", "value": "a value"}.
   */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   */
  tokenEndpoint?: string;
  /**
   * If true, authorization server will include state parameter from the authorization request to
   * its response. Client may use state parameter to raise protocol security.
   */
  supportState?: boolean;
  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API
   * level. Should be provided in the form of a string containing space-delimited values.
   */
  defaultScope?: string;
  /**
   * Specifies the mechanism by which access token is passed to the API.
   */
  bearerTokenSendingMethods?: string[];
  /**
   * Client or app secret registered with this authorization server.
   */
  clientSecret?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this
   * authorization server. Default resource owner username.
   */
  resourceOwnerUsername?: string;
  /**
   * Can be optionally specified when resource owner password grant type is supported by this
   * authorization server. Default resource owner password.
   */
  resourceOwnerPassword?: string;
  /**
   * User-friendly authorization server name.
   */
  displayName: string;
  /**
   * Optional reference to a page where client or app registration for this authorization server is
   * performed. Contains absolute URL to entity being referenced.
   */
  clientRegistrationEndpoint: string;
  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   */
  authorizationEndpoint: string;
  /**
   * Form of an authorization grant, which the client uses to request the access token.
   */
  grantTypes: string[];
  /**
   * Client or app id registered with this authorization server.
   */
  clientId: string;
}

/**
 * Reconnect request parameters.
 */
export interface BackendReconnectContract extends Resource {
  /**
   * Duration in ISO8601 format after which reconnect will be initiated. Minimum duration of the
   * Reconnect is PT2M.
   */
  after?: moment.Duration;
}

/**
 * Properties controlling TLS Certificate Validation.
 */
export interface BackendTlsProperties {
  /**
   * Flag indicating whether SSL certificate chain validation should be done when using self-signed
   * certificates for this backend host.
   */
  validateCertificateChain?: boolean;
  /**
   * Flag indicating whether SSL certificate name validation should be done when using self-signed
   * certificates for this backend host.
   */
  validateCertificateName?: boolean;
}

/**
 * Details of the Backend WebProxy Server to use in the Request to Backend.
 */
export interface BackendProxyContract {
  /**
   * WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance,
   * including all fragments and query strings.
   */
  url: string;
  /**
   * Username to connect to the WebProxy server
   */
  username?: string;
  /**
   * Password to connect to the WebProxy Server
   */
  password?: string;
}

/**
 * Authorization header information.
 */
export interface BackendAuthorizationHeaderCredentials {
  /**
   * Authentication Scheme name.
   */
  scheme: string;
  /**
   * Authentication Parameter value.
   */
  parameter: string;
}

/**
 * Details of the Credentials used to connect to Backend.
 */
export interface BackendCredentialsContract {
  /**
   * List of Client Certificate Thumbprint.
   */
  certificate?: string[];
  /**
   * Query Parameter description.
   */
  query?: { [propertyName: string]: string[] };
  /**
   * Header Parameter description.
   */
  header?: { [propertyName: string]: string[] };
  /**
   * Authorization header authentication
   */
  authorization?: BackendAuthorizationHeaderCredentials;
}

/**
 * Properties of server X509Names.
 */
export interface X509CertificateName {
  /**
   * Common Name of the Certificate.
   */
  name?: string;
  /**
   * Thumbprint for the Issuer of the Certificate.
   */
  issuerCertificateThumbprint?: string;
}

/**
 * Properties of the Service Fabric Type Backend.
 */
export interface BackendServiceFabricClusterProperties {
  /**
   * The client certificate thumbprint for the management endpoint.
   */
  clientCertificatethumbprint: string;
  /**
   * Maximum number of retries while attempting resolve the partition.
   */
  maxPartitionResolutionRetries?: number;
  /**
   * The cluster management endpoint.
   */
  managementEndpoints: string[];
  /**
   * Thumbprints of certificates cluster management service uses for tls communication
   */
  serverCertificateThumbprints?: string[];
  /**
   * Server X509 Certificate Names Collection
   */
  serverX509Names?: X509CertificateName[];
}

/**
 * Properties specific to the Backend Type.
 */
export interface BackendProperties {
  /**
   * Backend Service Fabric Cluster Properties
   */
  serviceFabricCluster?: BackendServiceFabricClusterProperties;
}

/**
 * Backend entity base Parameter set.
 */
export interface BackendBaseParameters {
  /**
   * Backend Title.
   */
  title?: string;
  /**
   * Backend Description.
   */
  description?: string;
  /**
   * Management Uri of the Resource in External System. This url can be the Arm Resource Id of
   * Logic Apps, Function Apps or Api Apps.
   */
  resourceId?: string;
  /**
   * Backend Properties contract
   */
  properties?: BackendProperties;
  /**
   * Backend Credentials Contract Properties
   */
  credentials?: BackendCredentialsContract;
  /**
   * Backend Proxy Contract Properties
   */
  proxy?: BackendProxyContract;
  /**
   * Backend TLS Properties
   */
  tls?: BackendTlsProperties;
}

/**
 * Backend update parameters.
 */
export interface BackendUpdateParameters {
  /**
   * Backend Title.
   */
  title?: string;
  /**
   * Backend Description.
   */
  description?: string;
  /**
   * Management Uri of the Resource in External System. This url can be the Arm Resource Id of
   * Logic Apps, Function Apps or Api Apps.
   */
  resourceId?: string;
  /**
   * Backend Properties contract
   */
  properties?: BackendProperties;
  /**
   * Backend Credentials Contract Properties
   */
  credentials?: BackendCredentialsContract;
  /**
   * Backend Proxy Contract Properties
   */
  proxy?: BackendProxyContract;
  /**
   * Backend TLS Properties
   */
  tls?: BackendTlsProperties;
  /**
   * Runtime Url of the Backend.
   */
  url?: string;
  /**
   * Backend communication protocol. Possible values include: 'http', 'soap'
   */
  protocol?: string;
}

/**
 * Backend details.
 */
export interface BackendContract extends Resource {
  /**
   * Backend Title.
   */
  title?: string;
  /**
   * Backend Description.
   */
  description?: string;
  /**
   * Management Uri of the Resource in External System. This url can be the Arm Resource Id of
   * Logic Apps, Function Apps or Api Apps.
   */
  resourceId?: string;
  /**
   * Backend Properties contract
   */
  properties?: BackendProperties;
  /**
   * Backend Credentials Contract Properties
   */
  credentials?: BackendCredentialsContract;
  /**
   * Backend Proxy Contract Properties
   */
  proxy?: BackendProxyContract;
  /**
   * Backend TLS Properties
   */
  tls?: BackendTlsProperties;
  /**
   * Runtime Url of the Backend.
   */
  url: string;
  /**
   * Backend communication protocol. Possible values include: 'http', 'soap'
   */
  protocol: string;
}

/**
 * Cache update details.
 */
export interface CacheUpdateParameters {
  /**
   * Cache description
   */
  description?: string;
  /**
   * Runtime connection string to cache
   */
  connectionString?: string;
  /**
   * Original uri of entity in external system cache points to
   */
  resourceId?: string;
}

/**
 * Cache details.
 */
export interface CacheContract extends Resource {
  /**
   * Cache description
   */
  description?: string;
  /**
   * Runtime connection string to cache
   */
  connectionString: string;
  /**
   * Original uri of entity in external system cache points to
   */
  resourceId?: string;
}

/**
 * Certificate details.
 */
export interface CertificateContract extends Resource {
  /**
   * Subject attribute of the certificate.
   */
  subject: string;
  /**
   * Thumbprint of the certificate.
   */
  thumbprint: string;
  /**
   * Expiration date of the certificate. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  expirationDate: Date;
}

/**
 * Certificate create or update details.
 */
export interface CertificateCreateOrUpdateParameters {
  /**
   * Base 64 encoded certificate using the application/x-pkcs12 representation.
   */
  data: string;
  /**
   * Password for the Certificate
   */
  password: string;
}

/**
 * Describes an available API Management SKU.
 */
export interface ResourceSku {
  /**
   * Name of the Sku. Possible values include: 'Developer', 'Standard', 'Premium', 'Basic',
   * 'Consumption'
   */
  name?: string;
}

/**
 * Describes scaling information of a SKU.
 */
export interface ResourceSkuCapacity {
  /**
   * The minimum capacity.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity that can be set.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   */
  readonly default?: number;
  /**
   * The scale type applicable to the sku. Possible values include: 'automatic', 'manual', 'none'
   */
  readonly scaleType?: string;
}

/**
 * Describes an available API Management service SKU.
 */
export interface ResourceSkuResult {
  /**
   * The type of resource the SKU applies to.
   */
  readonly resourceType?: string;
  /**
   * Specifies API Management SKU.
   */
  readonly sku?: ResourceSku;
  /**
   * Specifies the number of API Management units.
   */
  readonly capacity?: ResourceSkuCapacity;
}

/**
 * SSL certificate information.
 */
export interface CertificateInformation {
  /**
   * Expiration date of the certificate. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  expiry: Date;
  /**
   * Thumbprint of the certificate.
   */
  thumbprint: string;
  /**
   * Subject of the certificate.
   */
  subject: string;
}

/**
 * Certificate configuration which consist of non-trusted intermediates and root certificates.
 */
export interface CertificateConfiguration {
  /**
   * Base64 Encoded certificate.
   */
  encodedCertificate?: string;
  /**
   * Certificate Password.
   */
  certificatePassword?: string;
  /**
   * The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only
   * Root and CertificateAuthority are valid locations. Possible values include:
   * 'CertificateAuthority', 'Root'
   */
  storeName: string;
  /**
   * Certificate information.
   */
  certificate?: CertificateInformation;
}

/**
 * Custom hostname configuration.
 */
export interface HostnameConfiguration {
  /**
   * Hostname type. Possible values include: 'Proxy', 'Portal', 'Management', 'Scm',
   * 'DeveloperPortal'
   */
  type: string;
  /**
   * Hostname to configure on the Api Management service.
   */
  hostName: string;
  /**
   * Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version
   * is provided, auto-update of ssl certificate will not work. This requires Api Management
   * service to be configured with MSI. The secret should be of type *application/x-pkcs12*
   */
  keyVaultId?: string;
  /**
   * Base64 Encoded certificate.
   */
  encodedCertificate?: string;
  /**
   * Certificate Password.
   */
  certificatePassword?: string;
  /**
   * Specify true to setup the certificate associated with this Hostname as the Default SSL
   * Certificate. If a client does not send the SNI header, then this will be the certificate that
   * will be challenged. The property is useful if a service has multiple custom hostname enabled
   * and it needs to decide on the default ssl certificate. The setting only applied to Proxy
   * Hostname Type.
   */
  defaultSslBinding?: boolean;
  /**
   * Specify true to always negotiate client certificate on the hostname. Default Value is false.
   */
  negotiateClientCertificate?: boolean;
  /**
   * Certificate information.
   */
  certificate?: CertificateInformation;
}

/**
 * Configuration of a virtual network to which API Management service is deployed.
 */
export interface VirtualNetworkConfiguration {
  /**
   * The virtual network ID. This is typically a GUID. Expect a null GUID by default.
   */
  readonly vnetid?: string;
  /**
   * The name of the subnet.
   */
  readonly subnetname?: string;
  /**
   * The full resource ID of a subnet in a virtual network to deploy the API Management service in.
   */
  subnetResourceId?: string;
}

/**
 * API Management service resource SKU properties.
 */
export interface ApiManagementServiceSkuProperties {
  /**
   * Name of the Sku. Possible values include: 'Developer', 'Standard', 'Premium', 'Basic',
   * 'Consumption'
   */
  name: string;
  /**
   * Capacity of the SKU (number of deployed units of the SKU).
   */
  capacity?: number;
}

/**
 * Description of an additional API Management resource location.
 */
export interface AdditionalLocation {
  /**
   * The location name of the additional region among Azure Data center regions.
   */
  location: string;
  /**
   * SKU properties of the API Management service.
   */
  sku: ApiManagementServiceSkuProperties;
  /**
   * Public Static Load Balanced IP addresses of the API Management service in the additional
   * location. Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service which is deployed in
   * an Internal Virtual Network in a particular additional location. Available only for Basic,
   * Standard and Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration for the location.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Gateway URL of the API Management service in the Region.
   */
  readonly gatewayRegionalUrl?: string;
}

/**
 * Parameters supplied to the Backup/Restore of an API Management service operation.
 */
export interface ApiManagementServiceBackupRestoreParameters {
  /**
   * Azure Cloud Storage account (used to place/retrieve the backup) name.
   */
  storageAccount: string;
  /**
   * Azure Cloud Storage account (used to place/retrieve the backup) access key.
   */
  accessKey: string;
  /**
   * Azure Cloud Storage blob container name used to place/retrieve the backup.
   */
  containerName: string;
  /**
   * The name of the backup file to create.
   */
  backupName: string;
}

/**
 * Base Properties of an API Management service resource description.
 */
export interface ApiManagementServiceBaseProperties {
  /**
   * Email address from which the notification will be sent.
   */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the
   * following:
   * Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running
   * operation started on the service.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   */
  readonly scmUrl?: string;
  /**
   * Custom hostname configuration of the API Management service.
   */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region.
   * Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region
   * which is deployed in an Internal Virtual Network. Available only for Basic, Standard and
   * Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration of the API Management service.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Additional datacenter locations of the API Management service.
   */
  additionalLocations?: AdditionalLocation[];
  /**
   * Custom properties of the API Management service. Setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the
   * cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable
   * just TLS 1.1 and setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable
   * TLS 1.0 on an API Management service.
   */
  customProperties?: { [propertyName: string]: string };
  /**
   * List of Certificates that need to be installed in the API Management service. Max supported
   * certificates that can be installed is 10.
   */
  certificates?: CertificateConfiguration[];
  /**
   * Property only meant to be used for Consumption SKU Service. This enforces a client certificate
   * to be presented on each request to the gateway. This also enables the ability to authenticate
   * the certificate in the policy on the gateway.
   */
  enableClientCertificate?: boolean;
  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default
   * Value) means the API Management service is not part of any Virtual Network, External means the
   * API Management deployment is set up inside a Virtual Network having an Internet Facing
   * Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network
   * having an Intranet Facing Endpoint only. Possible values include: 'None', 'External',
   * 'Internal'
   */
  virtualNetworkType?: string;
}

/**
 * Identity properties of the Api Management service resource.
 */
export interface ApiManagementServiceIdentity {
  /**
   * The principal id of the identity.
   */
  readonly principalId?: string;
  /**
   * The client tenant id of the identity.
   */
  readonly tenantId?: string;
}

/**
 * The Resource definition.
 */
export interface ApimResource extends BaseResource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type for API Management resource is set to Microsoft.ApiManagement.
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A single API Management service resource in List or Get response.
 */
export interface ApiManagementServiceResource extends ApimResource {
  /**
   * Email address from which the notification will be sent.
   */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the
   * following:
   * Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running
   * operation started on the service.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   */
  readonly scmUrl?: string;
  /**
   * Custom hostname configuration of the API Management service.
   */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region.
   * Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region
   * which is deployed in an Internal Virtual Network. Available only for Basic, Standard and
   * Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration of the API Management service.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Additional datacenter locations of the API Management service.
   */
  additionalLocations?: AdditionalLocation[];
  /**
   * Custom properties of the API Management service. Setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the
   * cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable
   * just TLS 1.1 and setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable
   * TLS 1.0 on an API Management service.
   */
  customProperties?: { [propertyName: string]: string };
  /**
   * List of Certificates that need to be installed in the API Management service. Max supported
   * certificates that can be installed is 10.
   */
  certificates?: CertificateConfiguration[];
  /**
   * Property only meant to be used for Consumption SKU Service. This enforces a client certificate
   * to be presented on each request to the gateway. This also enables the ability to authenticate
   * the certificate in the policy on the gateway.
   */
  enableClientCertificate?: boolean;
  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default
   * Value) means the API Management service is not part of any Virtual Network, External means the
   * API Management deployment is set up inside a Virtual Network having an Internet Facing
   * Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network
   * having an Intranet Facing Endpoint only. Possible values include: 'None', 'External',
   * 'Internal'
   */
  virtualNetworkType?: string;
  /**
   * Publisher email.
   */
  publisherEmail: string;
  /**
   * Publisher name.
   */
  publisherName: string;
  /**
   * SKU properties of the API Management service.
   */
  sku: ApiManagementServiceSkuProperties;
  /**
   * Managed service identity of the Api Management service.
   */
  identity?: ApiManagementServiceIdentity;
  /**
   * Resource location.
   */
  location: string;
  /**
   * ETag of the resource.
   */
  readonly etag?: string;
}

/**
 * Parameter supplied to Update Api Management Service.
 */
export interface ApiManagementServiceUpdateParameters extends ApimResource {
  /**
   * Email address from which the notification will be sent.
   */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the
   * following:
   * Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running
   * operation started on the service.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   */
  readonly scmUrl?: string;
  /**
   * Custom hostname configuration of the API Management service.
   */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region.
   * Available only for Basic, Standard and Premium SKU.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region
   * which is deployed in an Internal Virtual Network. Available only for Basic, Standard and
   * Premium SKU.
   */
  readonly privateIPAddresses?: string[];
  /**
   * Virtual network configuration of the API Management service.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Additional datacenter locations of the API Management service.
   */
  additionalLocations?: AdditionalLocation[];
  /**
   * Custom properties of the API Management service. Setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the
   * cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable
   * just TLS 1.1 and setting
   * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable
   * TLS 1.0 on an API Management service.
   */
  customProperties?: { [propertyName: string]: string };
  /**
   * List of Certificates that need to be installed in the API Management service. Max supported
   * certificates that can be installed is 10.
   */
  certificates?: CertificateConfiguration[];
  /**
   * Property only meant to be used for Consumption SKU Service. This enforces a client certificate
   * to be presented on each request to the gateway. This also enables the ability to authenticate
   * the certificate in the policy on the gateway.
   */
  enableClientCertificate?: boolean;
  /**
   * The type of VPN in which API Management service needs to be configured in. None (Default
   * Value) means the API Management service is not part of any Virtual Network, External means the
   * API Management deployment is set up inside a Virtual Network having an Internet Facing
   * Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network
   * having an Intranet Facing Endpoint only. Possible values include: 'None', 'External',
   * 'Internal'
   */
  virtualNetworkType?: string;
  /**
   * Publisher email.
   */
  publisherEmail?: string;
  /**
   * Publisher name.
   */
  publisherName?: string;
  /**
   * SKU properties of the API Management service.
   */
  sku?: ApiManagementServiceSkuProperties;
  /**
   * Managed service identity of the Api Management service.
   */
  identity?: ApiManagementServiceIdentity;
  /**
   * ETag of the resource.
   */
  readonly etag?: string;
}

/**
 * The response of the GetSsoToken operation.
 */
export interface ApiManagementServiceGetSsoTokenResult {
  /**
   * Redirect URL to the Publisher Portal containing the SSO token.
   */
  redirectUri?: string;
}

/**
 * Parameters supplied to the CheckNameAvailability operation.
 */
export interface ApiManagementServiceCheckNameAvailabilityParameters {
  /**
   * The name to check for availability.
   */
  name: string;
}

/**
 * Response of the CheckNameAvailability operation.
 */
export interface ApiManagementServiceNameAvailabilityResult {
  /**
   * True if the name is available and can be used to create a new API Management service;
   * otherwise false.
   */
  readonly nameAvailable?: boolean;
  /**
   * If reason == invalid, provide the user with the reason why the given name is invalid, and
   * provide the resource naming requirements so that the user can select a valid name. If reason
   * == AlreadyExists, explain that <resourceName> is already in use, and direct them to select a
   * different name.
   */
  readonly message?: string;
  /**
   * Invalid indicates the name provided does not match the resource provider’s naming requirements
   * (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the name is
   * already in use and is therefore unavailable. Possible values include: 'Valid', 'Invalid',
   * 'AlreadyExists'
   */
  reason?: string;
}

/**
 * Parameter supplied to the Apply Network configuration operation.
 */
export interface ApiManagementServiceApplyNetworkConfigurationParameters {
  /**
   * Location of the Api Management service to update for a multi-region service. For a service
   * deployed in a single region, this parameter is not required.
   */
  location?: string;
}

/**
 * The object that describes the operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider
   */
  provider?: string;
  /**
   * Operation type: read, write, delete, listKeys/action, etc.
   */
  operation?: string;
  /**
   * Resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * Friendly name of the operation
   */
  description?: string;
}

/**
 * REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * The operation origin.
   */
  origin?: string;
  /**
   * The operation properties.
   */
  properties?: any;
}

/**
 * Email Template Parameter contract.
 */
export interface EmailTemplateParametersContractProperties {
  /**
   * Template parameter name.
   */
  name?: string;
  /**
   * Template parameter title.
   */
  title?: string;
  /**
   * Template parameter description.
   */
  description?: string;
}

/**
 * Email Template update Parameters.
 */
export interface EmailTemplateUpdateParameters {
  /**
   * Subject of the Template.
   */
  subject?: string;
  /**
   * Title of the Template.
   */
  title?: string;
  /**
   * Description of the Email Template.
   */
  description?: string;
  /**
   * Email Template Body. This should be a valid XDocument
   */
  body?: string;
  /**
   * Email Template Parameter values.
   */
  parameters?: EmailTemplateParametersContractProperties[];
}

/**
 * Email Template details.
 */
export interface EmailTemplateContract extends Resource {
  /**
   * Subject of the Template.
   */
  subject: string;
  /**
   * Email Template Body. This should be a valid XDocument
   */
  body: string;
  /**
   * Title of the Template.
   */
  title?: string;
  /**
   * Description of the Email Template.
   */
  description?: string;
  /**
   * Whether the template is the default template provided by Api Management or has been edited.
   */
  readonly isDefault?: boolean;
  /**
   * Email Template Parameter values.
   */
  parameters?: EmailTemplateParametersContractProperties[];
}

/**
 * User identity details.
 */
export interface UserIdentityContract {
  /**
   * Identity provider name.
   */
  provider?: string;
  /**
   * Identifier value within provider.
   */
  id?: string;
}

/**
 * User Entity Base Parameters set.
 */
export interface UserEntityBaseParameters {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign
   * into the developer portal or call any APIs of subscribed products. Default state is Active.
   * Possible values include: 'active', 'blocked', 'pending', 'deleted'
   */
  state?: string;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
}

/**
 * Group contract Properties.
 */
export interface GroupContractProperties {
  /**
   * Group name.
   */
  displayName: string;
  /**
   * Group description. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * true if the group is one of the three system groups (Administrators, Developers, or Guests);
   * otherwise false.
   */
  readonly builtIn?: boolean;
  /**
   * Group type. Possible values include: 'custom', 'system', 'external'
   */
  type?: string;
  /**
   * For external groups, this property contains the id of the group from the external identity
   * provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object
   * id>`; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * User details.
 */
export interface UserContract extends Resource {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign
   * into the developer portal or call any APIs of subscribed products. Default state is Active.
   * Possible values include: 'active', 'blocked', 'pending', 'deleted'
   */
  state?: string;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
  /**
   * Email address.
   */
  email?: string;
  /**
   * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
   * as specified by the ISO 8601 standard.

   */
  registrationDate?: Date;
  /**
   * Collection of groups user is part of.
   */
  readonly groups?: GroupContractProperties[];
}

/**
 * Parameters supplied to the Update Group operation.
 */
export interface GroupUpdateParameters {
  /**
   * Group name.
   */
  displayName?: string;
  /**
   * Group description.
   */
  description?: string;
  /**
   * Group type. Possible values include: 'custom', 'system', 'external'
   */
  type?: string;
  /**
   * Identifier of the external groups, this property contains the id of the group from the
   * external identity provider, e.g. for Azure Active Directory
   * `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Contract details.
 */
export interface GroupContract extends Resource {
  /**
   * Group name.
   */
  displayName: string;
  /**
   * Group description. Can contain HTML formatting tags.
   */
  description?: string;
  /**
   * true if the group is one of the three system groups (Administrators, Developers, or Guests);
   * otherwise false.
   */
  readonly builtIn?: boolean;
  /**
   * Group type. Possible values include: 'custom', 'system', 'external'
   */
  groupContractType?: string;
  /**
   * For external groups, this property contains the id of the group from the external identity
   * provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object
   * id>`; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Parameters supplied to the Create Group operation.
 */
export interface GroupCreateParameters {
  /**
   * Group name.
   */
  displayName: string;
  /**
   * Group description.
   */
  description?: string;
  /**
   * Group type. Possible values include: 'custom', 'system', 'external'
   */
  type?: string;
  /**
   * Identifier of the external groups, this property contains the id of the group from the
   * external identity provider, e.g. for Azure Active Directory
   * `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
   */
  externalId?: string;
}

/**
 * Identity Provider Base Parameter Properties.
 */
export interface IdentityProviderBaseParameters {
  /**
   * Identity Provider Type identifier. Possible values include: 'facebook', 'google', 'microsoft',
   * 'twitter', 'aad', 'aadB2C'
   */
  type?: string;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
   */
  authority?: string;
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
}

/**
 * Parameters supplied to update Identity Provider
 */
export interface IdentityProviderUpdateParameters {
  /**
   * Identity Provider Type identifier. Possible values include: 'facebook', 'google', 'microsoft',
   * 'twitter', 'aad', 'aadB2C'
   */
  type?: string;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
   */
  authority?: string;
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook
   * login, Client ID for Google login, App ID for Microsoft.
   */
  clientId?: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login
   * request. For example, it is App Secret for Facebook login, API Key for Google login, Public
   * Key for Microsoft.
   */
  clientSecret?: string;
}

/**
 * Identity Provider details.
 */
export interface IdentityProviderContract extends Resource {
  /**
   * Identity Provider Type identifier. Possible values include: 'facebook', 'google', 'microsoft',
   * 'twitter', 'aad', 'aadB2C'
   */
  identityProviderContractType?: string;
  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   */
  allowedTenants?: string[];
  /**
   * OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
   */
  authority?: string;
  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signupPolicyName?: string;
  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   */
  signinPolicyName?: string;
  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   */
  profileEditingPolicyName?: string;
  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   */
  passwordResetPolicyName?: string;
  /**
   * Client Id of the Application in the external Identity Provider. It is App ID for Facebook
   * login, Client ID for Google login, App ID for Microsoft.
   */
  clientId: string;
  /**
   * Client secret of the Application in external Identity Provider, used to authenticate login
   * request. For example, it is App Secret for Facebook login, API Key for Google login, Public
   * Key for Microsoft.
   */
  clientSecret: string;
}

/**
 * Logger update contract.
 */
export interface LoggerUpdateContract {
  /**
   * Logger type. Possible values include: 'azureEventHub', 'applicationInsights'
   */
  loggerType?: string;
  /**
   * Logger description.
   */
  description?: string;
  /**
   * Logger credentials.
   */
  credentials?: { [propertyName: string]: string };
  /**
   * Whether records are buffered in the logger before publishing. Default is assumed to be true.
   */
  isBuffered?: boolean;
}

/**
 * Logger details.
 */
export interface LoggerContract extends Resource {
  /**
   * Logger type. Possible values include: 'azureEventHub', 'applicationInsights'
   */
  loggerType: string;
  /**
   * Logger description.
   */
  description?: string;
  /**
   * The name and SendRule connection string of the event hub for azureEventHub logger.
   * Instrumentation key for applicationInsights logger.
   */
  credentials: { [propertyName: string]: string };
  /**
   * Whether records are buffered in the logger before publishing. Default is assumed to be true.
   */
  isBuffered?: boolean;
  /**
   * Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application
   * Insights resource).
   */
  resourceId?: string;
}

/**
 * Details about connectivity to a resource.
 */
export interface ConnectivityStatusContract {
  /**
   * The hostname of the resource which the service depends on. This can be the database, storage
   * or any other azure resource on which the service depends upon.
   */
  name: string;
  /**
   * Resource Connectivity Status Type identifier. Possible values include: 'initializing',
   * 'success', 'failure'
   */
  status: string;
  /**
   * Error details of the connectivity to the resource.
   */
  error?: string;
  /**
   * The date when the resource connectivity status was last updated. This status should be updated
   * every 15 minutes. If this status has not been updated, then it means that the service has lost
   * network connectivity to the resource, from inside the Virtual Network.The date conforms to the
   * following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  lastUpdated: Date;
  /**
   * The date when the resource connectivity status last Changed from success to failure or
   * vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
   * the ISO 8601 standard.

   */
  lastStatusChange: Date;
}

/**
 * Network Status details.
 */
export interface NetworkStatusContract {
  /**
   * Gets the list of DNS servers IPV4 addresses.
   */
  dnsServers: string[];
  /**
   * Gets the list of Connectivity Status to the Resources on which the service depends upon.
   */
  connectivityStatus: ConnectivityStatusContract[];
}

/**
 * Network Status in the Location
 */
export interface NetworkStatusContractByLocation {
  /**
   * Location of service
   */
  location?: string;
  /**
   * Network status in Location
   */
  networkStatus?: NetworkStatusContract;
}

/**
 * Recipient Email details.
 */
export interface RecipientEmailContract extends Resource {
  /**
   * User Email subscribed to notification.
   */
  email?: string;
}

/**
 * Paged Recipient User list representation.
 */
export interface RecipientEmailCollection {
  /**
   * Page values.
   */
  value?: RecipientEmailContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Recipient User details.
 */
export interface RecipientUserContract extends Resource {
  /**
   * API Management UserId subscribed to notification.
   */
  userId?: string;
}

/**
 * Paged Recipient User list representation.
 */
export interface RecipientUserCollection {
  /**
   * Page values.
   */
  value?: RecipientUserContract[];
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Notification Parameter contract.
 */
export interface RecipientsContractProperties {
  /**
   * List of Emails subscribed for the notification.
   */
  emails?: string[];
  /**
   * List of Users subscribed for the notification.
   */
  users?: string[];
}

/**
 * Notification details.
 */
export interface NotificationContract extends Resource {
  /**
   * Title of the Notification.
   */
  title: string;
  /**
   * Description of the Notification.
   */
  description?: string;
  /**
   * Recipient Parameter values.
   */
  recipients?: RecipientsContractProperties;
}

/**
 * Parameters supplied to the Update OpenID Connect Provider operation.
 */
export interface OpenidConnectProviderUpdateContract {
  /**
   * User-friendly OpenID Connect Provider name.
   */
  displayName?: string;
  /**
   * User-friendly description of OpenID Connect Provider.
   */
  description?: string;
  /**
   * Metadata endpoint URI.
   */
  metadataEndpoint?: string;
  /**
   * Client ID of developer console which is the client application.
   */
  clientId?: string;
  /**
   * Client Secret of developer console which is the client application.
   */
  clientSecret?: string;
}

/**
 * OpenId Connect Provider details.
 */
export interface OpenidConnectProviderContract extends Resource {
  /**
   * User-friendly OpenID Connect Provider name.
   */
  displayName: string;
  /**
   * User-friendly description of OpenID Connect Provider.
   */
  description?: string;
  /**
   * Metadata endpoint URI.
   */
  metadataEndpoint: string;
  /**
   * Client ID of developer console which is the client application.
   */
  clientId: string;
  /**
   * Client Secret of developer console which is the client application.
   */
  clientSecret?: string;
}

/**
 * Policy snippet.
 */
export interface PolicySnippetContract {
  /**
   * Snippet name.
   */
  readonly name?: string;
  /**
   * Snippet content.
   */
  readonly content?: string;
  /**
   * Snippet toolTip.
   */
  readonly toolTip?: string;
  /**
   * Binary OR value of the Snippet scope.
   */
  readonly scope?: number;
}

/**
 * The response of the list policy snippets operation.
 */
export interface PolicySnippetsCollection {
  /**
   * Policy snippet value.
   */
  value?: PolicySnippetContract[];
}

/**
 * User registration delegation settings properties.
 */
export interface RegistrationDelegationSettingsProperties {
  /**
   * Enable or disable delegation for user registration.
   */
  enabled?: boolean;
}

/**
 * Subscriptions delegation settings properties.
 */
export interface SubscriptionsDelegationSettingsProperties {
  /**
   * Enable or disable delegation for subscriptions.
   */
  enabled?: boolean;
}

/**
 * Delegation settings for a developer portal.
 */
export interface PortalDelegationSettings extends Resource {
  /**
   * A delegation Url.
   */
  url?: string;
  /**
   * A base64-encoded validation key to validate, that a request is coming from Azure API
   * Management.
   */
  validationKey?: string;
  /**
   * Subscriptions delegation settings.
   */
  subscriptions?: SubscriptionsDelegationSettingsProperties;
  /**
   * User registration delegation settings.
   */
  userRegistration?: RegistrationDelegationSettingsProperties;
}

/**
 * Terms of service contract properties.
 */
export interface TermsOfServiceProperties {
  /**
   * A terms of service text.
   */
  text?: string;
  /**
   * Display terms of service during a sign-up process.
   */
  enabled?: boolean;
  /**
   * Ask user for consent to the terms of service.
   */
  consentRequired?: boolean;
}

/**
 * Sign-Up settings for a developer portal.
 */
export interface PortalSignupSettings extends Resource {
  /**
   * Allow users to sign up on a developer portal.
   */
  enabled?: boolean;
  /**
   * Terms of service contract properties.
   */
  termsOfService?: TermsOfServiceProperties;
}

/**
 * Sign-In settings for the Developer Portal.
 */
export interface PortalSigninSettings extends Resource {
  /**
   * Redirect Anonymous users to the Sign-In page.
   */
  enabled?: boolean;
}

/**
 * Subscription details.
 */
export interface SubscriptionContract extends Resource {
  /**
   * The user resource identifier of the subscription owner. The value is a valid relative URL in
   * the format of /users/{userId} where {userId} is a user identifier.
   */
  ownerId?: string;
  /**
   * Scope like /products/{productId} or /apis or /apis/{apiId}.
   */
  scope: string;
  /**
   * The name of the subscription, or null if the subscription has no name.
   */
  displayName?: string;
  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended –
   * the subscription is blocked, and the subscriber cannot call any APIs of the product, *
   * submitted – the subscription request has been made by the developer, but has not yet been
   * approved or rejected, * rejected – the subscription request has been denied by an
   * administrator, * cancelled – the subscription has been cancelled by the developer or
   * administrator, * expired – the subscription reached its expiration date and was deactivated.
   * Possible values include: 'suspended', 'active', 'expired', 'submitted', 'rejected',
   * 'cancelled'
   */
  state: string;
  /**
   * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
   * as specified by the ISO 8601 standard.

   */
  readonly createdDate?: Date;
  /**
   * Subscription activation date. The setting is for audit purposes only and the subscription is
   * not automatically activated. The subscription lifecycle can be managed by using the `state`
   * property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
   * the ISO 8601 standard.

   */
  startDate?: Date;
  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is
   * not automatically expired. The subscription lifecycle can be managed by using the `state`
   * property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
   * the ISO 8601 standard.

   */
  expirationDate?: Date;
  /**
   * Date when subscription was cancelled or expired. The setting is for audit purposes only and
   * the subscription is not automatically cancelled. The subscription lifecycle can be managed by
   * using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
   * as specified by the ISO 8601 standard.

   */
  endDate?: Date;
  /**
   * Upcoming subscription expiration notification date. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  notificationDate?: Date;
  /**
   * Subscription primary key.
   */
  primaryKey: string;
  /**
   * Subscription secondary key.
   */
  secondaryKey: string;
  /**
   * Optional subscription comment added by an administrator.
   */
  stateComment?: string;
  /**
   * Determines whether tracing is enabled
   */
  allowTracing?: boolean;
}

/**
 * Product Update parameters.
 */
export interface ProductUpdateParameters {
  /**
   * Product description. May include HTML formatting tags.
   */
  description?: string;
  /**
   * Product terms of use. Developers trying to subscribe to the product will be presented and
   * required to accept these terms before they can complete the subscription process.
   */
  terms?: string;
  /**
   * Whether a product subscription is required for accessing APIs included in this product. If
   * true, the product is referred to as "protected" and a valid subscription key is required for a
   * request to an API included in the product to succeed. If false, the product is referred to as
   * "open" and requests to an API included in the product can be made without a subscription key.
   * If property is omitted when creating a new product it's value is assumed to be true.
   */
  subscriptionRequired?: boolean;
  /**
   * whether subscription approval is required. If false, new subscriptions will be approved
   * automatically enabling developers to call the product’s APIs immediately after subscribing. If
   * true, administrators must manually approve the subscription before the developer can any of
   * the product’s APIs. Can be present only if subscriptionRequired property is present and has a
   * value of false.
   */
  approvalRequired?: boolean;
  /**
   * Whether the number of subscriptions a user can have to this product at the same time. Set to
   * null or omit to allow unlimited per user subscriptions. Can be present only if
   * subscriptionRequired property is present and has a value of false.
   */
  subscriptionsLimit?: number;
  /**
   * whether product is published or not. Published products are discoverable by users of developer
   * portal. Non published products are visible only to administrators. Default state of Product is
   * notPublished. Possible values include: 'notPublished', 'published'
   */
  state?: string;
  /**
   * Product name.
   */
  displayName?: string;
}

/**
 * Property Entity Base Parameters set.
 */
export interface PropertyEntityBaseParameters {
  /**
   * Optional tags that when provided can be used to filter the property list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is
   * false.
   */
  secret?: boolean;
}

/**
 * Property update Parameters.
 */
export interface PropertyUpdateParameters {
  /**
   * Optional tags that when provided can be used to filter the property list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is
   * false.
   */
  secret?: boolean;
  /**
   * Unique name of Property. It may contain only letters, digits, period, dash, and underscore
   * characters.
   */
  displayName?: string;
  /**
   * Value of the property. Can contain policy expressions. It may not be empty or consist only of
   * whitespace.
   */
  value?: string;
}

/**
 * Property details.
 */
export interface PropertyContract extends Resource {
  /**
   * Optional tags that when provided can be used to filter the property list.
   */
  tags?: string[];
  /**
   * Determines whether the value is a secret and should be encrypted or not. Default value is
   * false.
   */
  secret?: boolean;
  /**
   * Unique name of Property. It may contain only letters, digits, period, dash, and underscore
   * characters.
   */
  displayName: string;
  /**
   * Value of the property. Can contain policy expressions. It may not be empty or consist only of
   * whitespace.
   */
  value: string;
}

/**
 * Quota counter value details.
 */
export interface QuotaCounterValueContractProperties {
  /**
   * Number of times Counter was called.
   */
  callsCount?: number;
  /**
   * Data Transferred in KiloBytes.
   */
  kbTransferred?: number;
}

/**
 * Quota counter details.
 */
export interface QuotaCounterContract {
  /**
   * The Key value of the Counter. Must not be empty.
   */
  counterKey: string;
  /**
   * Identifier of the Period for which the counter was collected. Must not be empty.
   */
  periodKey: string;
  /**
   * The date of the start of Counter Period. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  periodStartTime: Date;
  /**
   * The date of the end of Counter Period. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  periodEndTime: Date;
  /**
   * Quota Value Properties
   */
  value?: QuotaCounterValueContractProperties;
}

/**
 * Paged Quota Counter list representation.
 */
export interface QuotaCounterCollection {
  /**
   * Quota counter values.
   */
  value?: QuotaCounterContract[];
  /**
   * Total record count number across all pages.
   */
  count?: number;
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Request Report data.
 */
export interface RequestReportRecordContract {
  /**
   * API identifier path. /apis/{apiId}
   */
  apiId?: string;
  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   */
  operationId?: string;
  /**
   * Product identifier path. /products/{productId}
   */
  readonly productId?: string;
  /**
   * User identifier path. /users/{userId}
   */
  readonly userId?: string;
  /**
   * The HTTP method associated with this request..
   */
  method?: string;
  /**
   * The full URL associated with this request.
   */
  url?: string;
  /**
   * The client IP address associated with this request.
   */
  ipAddress?: string;
  /**
   * The HTTP status code received by the gateway as a result of forwarding this request to the
   * backend.
   */
  backendResponseCode?: string;
  /**
   * The HTTP status code returned by the gateway.
   */
  responseCode?: number;
  /**
   * The size of the response returned by the gateway.
   */
  responseSize?: number;
  /**
   * The date and time when this request was received by the gateway in ISO 8601 format.
   */
  timestamp?: Date;
  /**
   * Specifies if response cache was involved in generating the response. If the value is none, the
   * cache was not used. If the value is hit, cached response was returned. If the value is miss,
   * the cache was used but lookup resulted in a miss and request was fulfilled by the backend.
   */
  cache?: string;
  /**
   * The total time it took to process this request.
   */
  apiTime?: number;
  /**
   * he time it took to forward this request to the backend and get the response back.
   */
  serviceTime?: number;
  /**
   * Azure region where the gateway that processed this request is located.
   */
  apiRegion?: string;
  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   */
  subscriptionId?: string;
  /**
   * Request Identifier.
   */
  requestId?: string;
  /**
   * The size of this request..
   */
  requestSize?: number;
}

/**
 * Report data.
 */
export interface ReportRecordContract {
  /**
   * Name depending on report endpoint specifies product, API, operation or developer name.
   */
  name?: string;
  /**
   * Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
   * as specified by the ISO 8601 standard.

   */
  timestamp?: Date;
  /**
   * Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero.
   * The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
   */
  interval?: string;
  /**
   * Country to which this record data is related.
   */
  country?: string;
  /**
   * Country region to which this record data is related.
   */
  region?: string;
  /**
   * Zip code to which this record data is related.
   */
  zip?: string;
  /**
   * User identifier path. /users/{userId}
   */
  readonly userId?: string;
  /**
   * Product identifier path. /products/{productId}
   */
  readonly productId?: string;
  /**
   * API identifier path. /apis/{apiId}
   */
  apiId?: string;
  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   */
  operationId?: string;
  /**
   * API region identifier.
   */
  apiRegion?: string;
  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   */
  subscriptionId?: string;
  /**
   * Number of successful calls. This includes calls returning HttpStatusCode <= 301 and
   * HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect
   */
  callCountSuccess?: number;
  /**
   * Number of calls blocked due to invalid credentials. This includes calls returning
   * HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests
   */
  callCountBlocked?: number;
  /**
   * Number of calls failed due to proxy or backend errors. This includes calls returning
   * HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500)
   * and 600
   */
  callCountFailed?: number;
  /**
   * Number of other calls.
   */
  callCountOther?: number;
  /**
   * Total number of calls.
   */
  callCountTotal?: number;
  /**
   * Bandwidth consumed.
   */
  bandwidth?: number;
  /**
   * Number of times when content was served from cache policy.
   */
  cacheHitCount?: number;
  /**
   * Number of times content was fetched from backend.
   */
  cacheMissCount?: number;
  /**
   * Average time it took to process request.
   */
  apiTimeAvg?: number;
  /**
   * Minimum time it took to process request.
   */
  apiTimeMin?: number;
  /**
   * Maximum time it took to process request.
   */
  apiTimeMax?: number;
  /**
   * Average time it took to process request on backend.
   */
  serviceTimeAvg?: number;
  /**
   * Minimum time it took to process request on backend.
   */
  serviceTimeMin?: number;
  /**
   * Maximum time it took to process request on backend.
   */
  serviceTimeMax?: number;
}

/**
 * Subscription update details.
 */
export interface SubscriptionUpdateParameters {
  /**
   * User identifier path: /users/{userId}
   */
  ownerId?: string;
  /**
   * Scope like /products/{productId} or /apis or /apis/{apiId}
   */
  scope?: string;
  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is
   * not automatically expired. The subscription lifecycle can be managed by using the `state`
   * property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
   * the ISO 8601 standard.
   */
  expirationDate?: Date;
  /**
   * Subscription name.
   */
  displayName?: string;
  /**
   * Primary subscription key.
   */
  primaryKey?: string;
  /**
   * Secondary subscription key.
   */
  secondaryKey?: string;
  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended –
   * the subscription is blocked, and the subscriber cannot call any APIs of the product, *
   * submitted – the subscription request has been made by the developer, but has not yet been
   * approved or rejected, * rejected – the subscription request has been denied by an
   * administrator, * cancelled – the subscription has been cancelled by the developer or
   * administrator, * expired – the subscription reached its expiration date and was deactivated.
   * Possible values include: 'suspended', 'active', 'expired', 'submitted', 'rejected',
   * 'cancelled'
   */
  state?: string;
  /**
   * Comments describing subscription state change by the administrator.
   */
  stateComment?: string;
  /**
   * Determines whether tracing can be enabled
   */
  allowTracing?: boolean;
}

/**
 * Subscription create details.
 */
export interface SubscriptionCreateParameters {
  /**
   * User (user id path) for whom subscription is being created in form /users/{userId}
   */
  ownerId?: string;
  /**
   * Scope like /products/{productId} or /apis or /apis/{apiId}.
   */
  scope: string;
  /**
   * Subscription name.
   */
  displayName: string;
  /**
   * Primary subscription key. If not specified during request key will be generated automatically.
   */
  primaryKey?: string;
  /**
   * Secondary subscription key. If not specified during request key will be generated
   * automatically.
   */
  secondaryKey?: string;
  /**
   * Initial subscription state. If no value is specified, subscription is created with Submitted
   * state. Possible states are * active – the subscription is active, * suspended – the
   * subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted –
   * the subscription request has been made by the developer, but has not yet been approved or
   * rejected, * rejected – the subscription request has been denied by an administrator, *
   * cancelled – the subscription has been cancelled by the developer or administrator, * expired –
   * the subscription reached its expiration date and was deactivated. Possible values include:
   * 'suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled'
   */
  state?: string;
  /**
   * Determines whether tracing can be enabled
   */
  allowTracing?: boolean;
}

/**
 * Parameters supplied to Create/Update Tag operations.
 */
export interface TagCreateUpdateParameters {
  /**
   * Tag name.
   */
  displayName: string;
}

/**
 * Tenant Configuration Synchronization State.
 */
export interface TenantConfigurationSyncStateContract {
  /**
   * The name of Git branch.
   */
  branch?: string;
  /**
   * The latest commit Id.
   */
  commitId?: string;
  /**
   * value indicating if last sync was save (true) or deploy (false) operation.
   */
  isExport?: boolean;
  /**
   * value indicating if last synchronization was later than the configuration change.
   */
  isSynced?: boolean;
  /**
   * value indicating whether Git configuration access is enabled.
   */
  isGitEnabled?: boolean;
  /**
   * The date of the latest synchronization. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  syncDate?: Date;
  /**
   * The date of the latest configuration change. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  configurationChangeDate?: Date;
}

/**
 * Log of the entity being created, updated or deleted.
 */
export interface OperationResultLogItemContract {
  /**
   * The type of entity contract.
   */
  objectType?: string;
  /**
   * Action like create/update/delete.
   */
  action?: string;
  /**
   * Identifier of the entity being created/updated/deleted.
   */
  objectKey?: string;
}

/**
 * Operation Result.
 */
export interface OperationResultContract {
  /**
   * Operation result identifier.
   */
  id?: string;
  /**
   * Status of an async operation. Possible values include: 'Started', 'InProgress', 'Succeeded',
   * 'Failed'
   */
  status?: string;
  /**
   * Start time of an async operation. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  started?: Date;
  /**
   * Last update time of an async operation. The date conforms to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  updated?: Date;
  /**
   * Optional result info.
   */
  resultInfo?: string;
  /**
   * Error Body Contract
   */
  error?: ErrorResponseBody;
  /**
   * This property if only provided as part of the TenantConfiguration_Validate operation. It
   * contains the log the entities which will be updated/created/deleted as part of the
   * TenantConfiguration_Deploy operation.
   */
  readonly actionLog?: OperationResultLogItemContract[];
}

/**
 * Deploy Tenant Configuration Contract.
 */
export interface DeployConfigurationParameters {
  /**
   * The name of the Git branch from which the configuration is to be deployed to the configuration
   * database.
   */
  branch: string;
  /**
   * The value enforcing deleting subscriptions to products that are deleted in this update.
   */
  force?: boolean;
}

/**
 * Save Tenant Configuration Contract details.
 */
export interface SaveConfigurationParameter {
  /**
   * The name of the Git branch in which to commit the current configuration snapshot.
   */
  branch: string;
  /**
   * The value if true, the current configuration database is committed to the Git repository, even
   * if the Git repository has newer changes that would be overwritten.
   */
  force?: boolean;
}

/**
 * Tenant access information contract of the API Management service.
 */
export interface AccessInformationContract {
  /**
   * Identifier.
   */
  id?: string;
  /**
   * Primary access key.
   */
  primaryKey?: string;
  /**
   * Secondary access key.
   */
  secondaryKey?: string;
  /**
   * Determines whether direct access is enabled.
   */
  enabled?: boolean;
}

/**
 * Tenant access information update parameters.
 */
export interface AccessInformationUpdateParameters {
  /**
   * Determines whether direct access is enabled.
   */
  enabled?: boolean;
}

/**
 * Get User Token response details.
 */
export interface UserTokenResult {
  /**
   * Shared Access Authorization token for the User.
   */
  value?: string;
}

/**
 * Get User Token parameters.
 */
export interface UserTokenParameters {
  /**
   * The Key to be used to generate token for user. Possible values include: 'primary', 'secondary'
   */
  keyType: string;
  /**
   * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms
   * to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

   */
  expiry: Date;
}

/**
 * Generate SSO Url operations response details.
 */
export interface GenerateSsoUrlResult {
  /**
   * Redirect Url containing the SSO URL value.
   */
  value?: string;
}

/**
 * User update parameters.
 */
export interface UserUpdateParameters {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign
   * into the developer portal or call any APIs of subscribed products. Default state is Active.
   * Possible values include: 'active', 'blocked', 'pending', 'deleted'
   */
  state?: string;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email?: string;
  /**
   * User Password.
   */
  password?: string;
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
}

/**
 * User create details.
 */
export interface UserCreateParameters {
  /**
   * Account state. Specifies whether the user is active or not. Blocked users are unable to sign
   * into the developer portal or call any APIs of subscribed products. Default state is Active.
   * Possible values include: 'active', 'blocked', 'pending', 'deleted'
   */
  state?: string;
  /**
   * Optional note about a user set by the administrator.
   */
  note?: string;
  /**
   * Collection of user identities.
   */
  identities?: UserIdentityContract[];
  /**
   * Email address. Must not be empty and must be unique within the service instance.
   */
  email: string;
  /**
   * First name.
   */
  firstName: string;
  /**
   * Last name.
   */
  lastName: string;
  /**
   * User Password. If no value is provided, a default password is generated.
   */
  password?: string;
  /**
   * Determines the type of confirmation e-mail that will be sent to the newly created user.
   * Possible values include: 'signup', 'invite'
   */
  confirmation?: string;
}

/**
 * Object used to create an API Revision or Version based on an existing API Revision
 */
export interface ApiRevisionInfoContract {
  /**
   * Resource identifier of API to be used to create the revision from.
   */
  sourceApiId?: string;
  /**
   * Version identifier for the new API Version.
   */
  apiVersionName?: string;
  /**
   * Description of new API Revision.
   */
  apiRevisionDescription?: string;
  /**
   * Version set details
   */
  apiVersionSet?: ApiVersionSetContractDetails;
}

/**
 * Quota counter value details.
 */
export interface QuotaCounterValueContract {
  /**
   * Number of times Counter was called.
   */
  callsCount?: number;
  /**
   * Data Transferred in KiloBytes.
   */
  kbTransferred?: number;
}

/**
 * Paged Api list representation.
 */
export interface ApiCollection extends Array<ApiContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged Tag list representation.
 */
export interface TagResourceCollection extends Array<TagResourceContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Api Revision list representation.
 */
export interface ApiRevisionCollection extends Array<ApiRevisionContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged ApiRelease list representation.
 */
export interface ApiReleaseCollection extends Array<ApiReleaseContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged Operation list representation.
 */
export interface OperationCollection extends Array<OperationContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged Tag list representation.
 */
export interface TagCollection extends Array<TagContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Products list representation.
 */
export interface ProductCollection extends Array<ProductContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * The response of the list schema operation.
 */
export interface SchemaCollection extends Array<SchemaContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged Diagnostic list representation.
 */
export interface DiagnosticCollection extends Array<DiagnosticContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Issue list representation.
 */
export interface IssueCollection extends Array<IssueContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged Issue Comment list representation.
 */
export interface IssueCommentCollection extends Array<IssueCommentContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged Issue Attachment list representation.
 */
export interface IssueAttachmentCollection extends Array<IssueAttachmentContract> {
  /**
   * Next page link if any.
   */
  readonly nextLink?: string;
}

/**
 * Paged TagDescription list representation.
 */
export interface TagDescriptionCollection extends Array<TagDescriptionContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Api Version Set list representation.
 */
export interface ApiVersionSetCollection extends Array<ApiVersionSetContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged OAuth2 Authorization Servers list representation.
 */
export interface AuthorizationServerCollection extends Array<AuthorizationServerContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Backend list representation.
 */
export interface BackendCollection extends Array<BackendContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Caches list representation.
 */
export interface CacheCollection extends Array<CacheContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Certificates list representation.
 */
export interface CertificateCollection extends Array<CertificateContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Result of the request to list REST API operations. It contains a list of operations and a URL
 * nextLink to get the next set of results.
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * The API Management service SKUs operation response.
 */
export interface ResourceSkuResults extends Array<ResourceSkuResult> {
  /**
   * The uri to fetch the next page of API Management service Skus.
   */
  nextLink?: string;
}

/**
 * The response of the List API Management services operation.
 */
export interface ApiManagementServiceListResult extends Array<ApiManagementServiceResource> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of API Management
   * services.
   */
  nextLink?: string;
}

/**
 * Paged email template list representation.
 */
export interface EmailTemplateCollection extends Array<EmailTemplateContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Group list representation.
 */
export interface GroupCollection extends Array<GroupContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Users list representation.
 */
export interface UserCollection extends Array<UserContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * List of all the Identity Providers configured on the service instance.
 */
export interface IdentityProviderList extends Array<IdentityProviderContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Logger list representation.
 */
export interface LoggerCollection extends Array<LoggerContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Notification list representation.
 */
export interface NotificationCollection extends Array<NotificationContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged OpenIdProviders list representation.
 */
export interface OpenIdConnectProviderCollection extends Array<OpenidConnectProviderContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Subscriptions list representation.
 */
export interface SubscriptionCollection extends Array<SubscriptionContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Property list representation.
 */
export interface PropertyCollection extends Array<PropertyContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Lists Regions operation response details.
 */
export interface RegionListResult extends Array<RegionContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Report records list representation.
 */
export interface ReportCollection extends Array<ReportRecordContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}

/**
 * Paged Report records list representation.
 */
export interface RequestReportCollection extends Array<RequestReportRecordContract> {
}

/**
 * List of Users Identity list representation.
 */
export interface UserIdentityCollection extends Array<UserIdentityContract> {
  /**
   * Next page link if any.
   */
  nextLink?: string;
}
