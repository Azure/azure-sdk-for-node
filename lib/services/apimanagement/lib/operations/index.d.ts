/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as moment from 'moment';
import * as models from '../models';


/**
 * @class
 * Policy
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Policy {


    /**
     * Lists all the Global Policy definitions of the Api Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.scope] Policy scope. Possible values include:
     * 'Tenant', 'Product', 'Api', 'Operation', 'All'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { scope? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyCollection>>;

    /**
     * Lists all the Global Policy definitions of the Api Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.scope] Policy scope. Possible values include:
     * 'Tenant', 'Product', 'Api', 'Operation', 'All'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { scope? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.PolicyCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { scope? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyCollection>): void;


    /**
     * Gets the entity state (Etag) version of the Global policy definition in the
     * Api Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the Global policy definition in the
     * Api Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the Global policy definition of the Api Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Get the Global policy definition of the Api Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    get(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.PolicyContract>): void;
    get(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Creates or updates the global policy configuration of the Api Management
     * service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.PolicyContract, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Creates or updates the global policy configuration of the Api Management
     * service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PolicyContract, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PolicyContract, callback: ServiceCallback<models.PolicyContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PolicyContract, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Deletes the global policy configuration of the Api Management Service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the global policy configuration of the Api Management Service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * PolicySnippets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface PolicySnippets {


    /**
     * Lists all policy snippets.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.scope] Policy scope. Possible values include:
     * 'Tenant', 'Product', 'Api', 'Operation', 'All'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicySnippetsCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { scope? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicySnippetsCollection>>;

    /**
     * Lists all policy snippets.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.scope] Policy scope. Possible values include:
     * 'Tenant', 'Product', 'Api', 'Operation', 'All'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicySnippetsCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicySnippetsCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicySnippetsCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { scope? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicySnippetsCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.PolicySnippetsCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { scope? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicySnippetsCollection>): void;
}

/**
 * @class
 * Regions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Regions {


    /**
     * Lists all azure regions in which the service exists.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegionListResult>>;

    /**
     * Lists all azure regions in which the service exists.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegionListResult>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.RegionListResult>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegionListResult>): void;


    /**
     * Lists all azure regions in which the service exists.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegionListResult>>;

    /**
     * Lists all azure regions in which the service exists.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegionListResult>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.RegionListResult>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegionListResult>): void;
}

/**
 * @class
 * Api
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Api {


    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {boolean} [options.expandApiVersionSet] Include full ApiVersionSet
     * resource in response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, expandApiVersionSet? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiCollection>>;

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {boolean} [options.expandApiVersionSet] Include full ApiVersionSet
     * resource in response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, expandApiVersionSet? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ApiCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, expandApiVersionSet? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiCollection>): void;


    /**
     * Gets the entity state (Etag) version of the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiContract>>;

    /**
     * Gets the details of the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.ApiContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiContract>): void;


    /**
     * Creates new or updates existing specified API of the API Management service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Description of the API. May include
     * HTML formatting tags.
     *
     * @param {object} [parameters.authenticationSettings] Collection of
     * authentication settings included into this API.
     *
     * @param {object} [parameters.authenticationSettings.oAuth2] OAuth2
     * Authentication settings
     *
     * @param {string}
     * [parameters.authenticationSettings.oAuth2.authorizationServerId] OAuth
     * authorization server identifier.
     *
     * @param {string} [parameters.authenticationSettings.oAuth2.scope] operations
     * scope.
     *
     * @param {object} [parameters.authenticationSettings.openid] OpenID Connect
     * Authentication Settings
     *
     * @param {string} [parameters.authenticationSettings.openid.openidProviderId]
     * OAuth authorization server identifier.
     *
     * @param {array}
     * [parameters.authenticationSettings.openid.bearerTokenSendingMethods] How to
     * send token to the server.
     *
     * @param {boolean} [parameters.authenticationSettings.subscriptionKeyRequired]
     * Specifies whether subscription key is required during call to this API, true
     * - API is included into closed products only, false - API is included into
     * open products alone, null - there is a mix of products.
     *
     * @param {object} [parameters.subscriptionKeyParameterNames] Protocols over
     * which API is made available.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.header]
     * Subscription key header name.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.query]
     * Subscription key query string parameter name.
     *
     * @param {string} [parameters.apiType] Type of API. Possible values include:
     * 'http', 'soap'
     *
     * @param {string} [parameters.apiRevision] Describes the Revision of the Api.
     * If no value is provided, default revision 1 is created
     *
     * @param {string} [parameters.apiVersion] Indicates the Version identifier of
     * the API if the API is versioned
     *
     * @param {string} [parameters.apiRevisionDescription] Description of the Api
     * Revision.
     *
     * @param {string} [parameters.apiVersionDescription] Description of the Api
     * Version.
     *
     * @param {string} [parameters.apiVersionSetId] A resource identifier for the
     * related ApiVersionSet.
     *
     * @param {string} [parameters.displayName] API name.
     *
     * @param {string} [parameters.serviceUrl] Absolute URL of the backend service
     * implementing this API.
     *
     * @param {string} parameters.path Relative URL uniquely identifying this API
     * and all of its resource paths within the API Management service instance. It
     * is appended to the API endpoint base URL specified during the service
     * instance creation to form a public URL for this API.
     *
     * @param {array} [parameters.protocols] Describes on which protocols the
     * operations in this API can be invoked.
     *
     * @param {object} [parameters.apiVersionSet]
     *
     * @param {string} [parameters.apiVersionSet.id] Identifier for existing API
     * Version Set. Omit this value to create a new Version Set.
     *
     * @param {string} [parameters.apiVersionSet.description] Description of API
     * Version Set.
     *
     * @param {string} [parameters.apiVersionSet.versioningScheme] An value that
     * determines where the API Version identifer will be located in a HTTP
     * request. Possible values include: 'Segment', 'Query', 'Header'
     *
     * @param {string} [parameters.apiVersionSet.versionQueryName] Name of query
     * parameter that indicates the API Version if versioningScheme is set to
     * `query`.
     *
     * @param {string} [parameters.apiVersionSet.versionHeaderName] Name of HTTP
     * header parameter that indicates the API Version if versioningScheme is set
     * to `header`.
     *
     * @param {string} [parameters.contentValue] Content value when Importing an
     * API.
     *
     * @param {string} [parameters.contentFormat] Format of the Content in which
     * the API is getting imported. Possible values include: 'wadl-xml',
     * 'wadl-link-json', 'swagger-json', 'swagger-link-json', 'wsdl', 'wsdl-link'
     *
     * @param {object} [parameters.wsdlSelector] Criteria to limit import of WSDL
     * to a subset of the document.
     *
     * @param {string} [parameters.wsdlSelector.wsdlServiceName] Name of service to
     * import from WSDL
     *
     * @param {string} [parameters.wsdlSelector.wsdlEndpointName] Name of
     * endpoint(port) to import from WSDL
     *
     * @param {string} [parameters.soapApiType] Type of Api to create.
     * * `http` creates a SOAP to REST API
     * * `soap` creates a SOAP pass-through API. Possible values include:
     * 'SoapToRest', 'SoapPassThrough'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiCreateOrUpdateParameter, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiContract>>;

    /**
     * Creates new or updates existing specified API of the API Management service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Description of the API. May include
     * HTML formatting tags.
     *
     * @param {object} [parameters.authenticationSettings] Collection of
     * authentication settings included into this API.
     *
     * @param {object} [parameters.authenticationSettings.oAuth2] OAuth2
     * Authentication settings
     *
     * @param {string}
     * [parameters.authenticationSettings.oAuth2.authorizationServerId] OAuth
     * authorization server identifier.
     *
     * @param {string} [parameters.authenticationSettings.oAuth2.scope] operations
     * scope.
     *
     * @param {object} [parameters.authenticationSettings.openid] OpenID Connect
     * Authentication Settings
     *
     * @param {string} [parameters.authenticationSettings.openid.openidProviderId]
     * OAuth authorization server identifier.
     *
     * @param {array}
     * [parameters.authenticationSettings.openid.bearerTokenSendingMethods] How to
     * send token to the server.
     *
     * @param {boolean} [parameters.authenticationSettings.subscriptionKeyRequired]
     * Specifies whether subscription key is required during call to this API, true
     * - API is included into closed products only, false - API is included into
     * open products alone, null - there is a mix of products.
     *
     * @param {object} [parameters.subscriptionKeyParameterNames] Protocols over
     * which API is made available.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.header]
     * Subscription key header name.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.query]
     * Subscription key query string parameter name.
     *
     * @param {string} [parameters.apiType] Type of API. Possible values include:
     * 'http', 'soap'
     *
     * @param {string} [parameters.apiRevision] Describes the Revision of the Api.
     * If no value is provided, default revision 1 is created
     *
     * @param {string} [parameters.apiVersion] Indicates the Version identifier of
     * the API if the API is versioned
     *
     * @param {string} [parameters.apiRevisionDescription] Description of the Api
     * Revision.
     *
     * @param {string} [parameters.apiVersionDescription] Description of the Api
     * Version.
     *
     * @param {string} [parameters.apiVersionSetId] A resource identifier for the
     * related ApiVersionSet.
     *
     * @param {string} [parameters.displayName] API name.
     *
     * @param {string} [parameters.serviceUrl] Absolute URL of the backend service
     * implementing this API.
     *
     * @param {string} parameters.path Relative URL uniquely identifying this API
     * and all of its resource paths within the API Management service instance. It
     * is appended to the API endpoint base URL specified during the service
     * instance creation to form a public URL for this API.
     *
     * @param {array} [parameters.protocols] Describes on which protocols the
     * operations in this API can be invoked.
     *
     * @param {object} [parameters.apiVersionSet]
     *
     * @param {string} [parameters.apiVersionSet.id] Identifier for existing API
     * Version Set. Omit this value to create a new Version Set.
     *
     * @param {string} [parameters.apiVersionSet.description] Description of API
     * Version Set.
     *
     * @param {string} [parameters.apiVersionSet.versioningScheme] An value that
     * determines where the API Version identifer will be located in a HTTP
     * request. Possible values include: 'Segment', 'Query', 'Header'
     *
     * @param {string} [parameters.apiVersionSet.versionQueryName] Name of query
     * parameter that indicates the API Version if versioningScheme is set to
     * `query`.
     *
     * @param {string} [parameters.apiVersionSet.versionHeaderName] Name of HTTP
     * header parameter that indicates the API Version if versioningScheme is set
     * to `header`.
     *
     * @param {string} [parameters.contentValue] Content value when Importing an
     * API.
     *
     * @param {string} [parameters.contentFormat] Format of the Content in which
     * the API is getting imported. Possible values include: 'wadl-xml',
     * 'wadl-link-json', 'swagger-json', 'swagger-link-json', 'wsdl', 'wsdl-link'
     *
     * @param {object} [parameters.wsdlSelector] Criteria to limit import of WSDL
     * to a subset of the document.
     *
     * @param {string} [parameters.wsdlSelector.wsdlServiceName] Name of service to
     * import from WSDL
     *
     * @param {string} [parameters.wsdlSelector.wsdlEndpointName] Name of
     * endpoint(port) to import from WSDL
     *
     * @param {string} [parameters.soapApiType] Type of Api to create.
     * * `http` creates a SOAP to REST API
     * * `soap` creates a SOAP pass-through API. Possible values include:
     * 'SoapToRest', 'SoapPassThrough'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiCreateOrUpdateParameter, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiCreateOrUpdateParameter, callback: ServiceCallback<models.ApiContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiCreateOrUpdateParameter, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiContract>): void;


    /**
     * Updates the specified API of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} parameters API Update Contract parameters.
     *
     * @param {string} [parameters.description] Description of the API. May include
     * HTML formatting tags.
     *
     * @param {object} [parameters.authenticationSettings] Collection of
     * authentication settings included into this API.
     *
     * @param {object} [parameters.authenticationSettings.oAuth2] OAuth2
     * Authentication settings
     *
     * @param {string}
     * [parameters.authenticationSettings.oAuth2.authorizationServerId] OAuth
     * authorization server identifier.
     *
     * @param {string} [parameters.authenticationSettings.oAuth2.scope] operations
     * scope.
     *
     * @param {object} [parameters.authenticationSettings.openid] OpenID Connect
     * Authentication Settings
     *
     * @param {string} [parameters.authenticationSettings.openid.openidProviderId]
     * OAuth authorization server identifier.
     *
     * @param {array}
     * [parameters.authenticationSettings.openid.bearerTokenSendingMethods] How to
     * send token to the server.
     *
     * @param {boolean} [parameters.authenticationSettings.subscriptionKeyRequired]
     * Specifies whether subscription key is required during call to this API, true
     * - API is included into closed products only, false - API is included into
     * open products alone, null - there is a mix of products.
     *
     * @param {object} [parameters.subscriptionKeyParameterNames] Protocols over
     * which API is made available.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.header]
     * Subscription key header name.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.query]
     * Subscription key query string parameter name.
     *
     * @param {string} [parameters.apiType] Type of API. Possible values include:
     * 'http', 'soap'
     *
     * @param {string} [parameters.apiRevision] Describes the Revision of the Api.
     * If no value is provided, default revision 1 is created
     *
     * @param {string} [parameters.apiVersion] Indicates the Version identifier of
     * the API if the API is versioned
     *
     * @param {string} [parameters.apiRevisionDescription] Description of the Api
     * Revision.
     *
     * @param {string} [parameters.apiVersionDescription] Description of the Api
     * Version.
     *
     * @param {string} [parameters.apiVersionSetId] A resource identifier for the
     * related ApiVersionSet.
     *
     * @param {string} [parameters.displayName] API name.
     *
     * @param {string} [parameters.serviceUrl] Absolute URL of the backend service
     * implementing this API.
     *
     * @param {string} [parameters.path] Relative URL uniquely identifying this API
     * and all of its resource paths within the API Management service instance. It
     * is appended to the API endpoint base URL specified during the service
     * instance creation to form a public URL for this API.
     *
     * @param {array} [parameters.protocols] Describes on which protocols the
     * operations in this API can be invoked.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the specified API of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} parameters API Update Contract parameters.
     *
     * @param {string} [parameters.description] Description of the API. May include
     * HTML formatting tags.
     *
     * @param {object} [parameters.authenticationSettings] Collection of
     * authentication settings included into this API.
     *
     * @param {object} [parameters.authenticationSettings.oAuth2] OAuth2
     * Authentication settings
     *
     * @param {string}
     * [parameters.authenticationSettings.oAuth2.authorizationServerId] OAuth
     * authorization server identifier.
     *
     * @param {string} [parameters.authenticationSettings.oAuth2.scope] operations
     * scope.
     *
     * @param {object} [parameters.authenticationSettings.openid] OpenID Connect
     * Authentication Settings
     *
     * @param {string} [parameters.authenticationSettings.openid.openidProviderId]
     * OAuth authorization server identifier.
     *
     * @param {array}
     * [parameters.authenticationSettings.openid.bearerTokenSendingMethods] How to
     * send token to the server.
     *
     * @param {boolean} [parameters.authenticationSettings.subscriptionKeyRequired]
     * Specifies whether subscription key is required during call to this API, true
     * - API is included into closed products only, false - API is included into
     * open products alone, null - there is a mix of products.
     *
     * @param {object} [parameters.subscriptionKeyParameterNames] Protocols over
     * which API is made available.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.header]
     * Subscription key header name.
     *
     * @param {string} [parameters.subscriptionKeyParameterNames.query]
     * Subscription key query string parameter name.
     *
     * @param {string} [parameters.apiType] Type of API. Possible values include:
     * 'http', 'soap'
     *
     * @param {string} [parameters.apiRevision] Describes the Revision of the Api.
     * If no value is provided, default revision 1 is created
     *
     * @param {string} [parameters.apiVersion] Indicates the Version identifier of
     * the API if the API is versioned
     *
     * @param {string} [parameters.apiRevisionDescription] Description of the Api
     * Revision.
     *
     * @param {string} [parameters.apiVersionDescription] Description of the Api
     * Version.
     *
     * @param {string} [parameters.apiVersionSetId] A resource identifier for the
     * related ApiVersionSet.
     *
     * @param {string} [parameters.displayName] API name.
     *
     * @param {string} [parameters.serviceUrl] Absolute URL of the backend service
     * implementing this API.
     *
     * @param {string} [parameters.path] Relative URL uniquely identifying this API
     * and all of its resource paths within the API Management service instance. It
     * is appended to the API endpoint base URL specified during the service
     * instance creation to form a public URL for this API.
     *
     * @param {array} [parameters.protocols] Describes on which protocols the
     * operations in this API can be invoked.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiUpdateContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.ApiUpdateContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRevisions] Delete all revisions of the Api.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options?: { deleteRevisions? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRevisions] Delete all revisions of the Api.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options?: { deleteRevisions? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options: { deleteRevisions? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of apis associated with tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | aid         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | isCurrent   | eq                     | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTagsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResourceCollection>>;

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | aid         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | isCurrent   | eq                     | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTags(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResourceCollection>;
    listByTags(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.TagResourceCollection>): void;
    listByTags(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResourceCollection>): void;


    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiCollection>>;

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.ApiCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiCollection>): void;


    /**
     * Lists a collection of apis associated with tags.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTagsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResourceCollection>>;

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTagsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResourceCollection>;
    listByTagsNext(nextPageLink: string, callback: ServiceCallback<models.TagResourceCollection>): void;
    listByTagsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResourceCollection>): void;
}

/**
 * @class
 * ApiRevisions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiRevisions {


    /**
     * Lists all revisions of an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     *
     * |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith|
     *
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiRevisionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiRevisionCollection>>;

    /**
     * Lists all revisions of an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     *
     * |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith|
     *
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiRevisionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiRevisionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiRevisionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiRevisionCollection>;
    list(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.ApiRevisionCollection>): void;
    list(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiRevisionCollection>): void;


    /**
     * Lists all revisions of an API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiRevisionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiRevisionCollection>>;

    /**
     * Lists all revisions of an API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiRevisionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiRevisionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiRevisionCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiRevisionCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApiRevisionCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiRevisionCollection>): void;
}

/**
 * @class
 * ApiRelease
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiRelease {


    /**
     * Lists all releases of an API. An API release is created when making an API
     * Revision current. Releases are also used to rollback to previous revisions.
     * Results will be paged and can be constrained by the $top and $skip
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * |notes|ge le eq ne gt lt|substringof contains startswith endswith|
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiReleaseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiReleaseCollection>>;

    /**
     * Lists all releases of an API. An API release is created when making an API
     * Revision current. Releases are also used to rollback to previous revisions.
     * Results will be paged and can be constrained by the $top and $skip
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * |notes|ge le eq ne gt lt|substringof contains startswith endswith|
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiReleaseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiReleaseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiReleaseCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiReleaseCollection>;
    list(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.ApiReleaseCollection>): void;
    list(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiReleaseCollection>): void;


    /**
     * Returns the etag of an API release.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Returns the etag of an API release.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the details of an API release.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiReleaseContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiReleaseContract>>;

    /**
     * Returns the details of an API release.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiReleaseContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiReleaseContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiReleaseContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiReleaseContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, callback: ServiceCallback<models.ApiReleaseContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiReleaseContract>): void;


    /**
     * Creates a new Release for the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.apiId] Identifier of the API the release belongs
     * to.
     *
     * @param {string} [parameters.notes] Release Notes
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiReleaseContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiReleaseContract>>;

    /**
     * Creates a new Release for the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.apiId] Identifier of the API the release belongs
     * to.
     *
     * @param {string} [parameters.notes] Release Notes
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiReleaseContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiReleaseContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiReleaseContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiReleaseContract>;
    create(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, callback: ServiceCallback<models.ApiReleaseContract>): void;
    create(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiReleaseContract>): void;


    /**
     * Updates the details of the release of the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters API Release Update parameters.
     *
     * @param {string} [parameters.apiId] Identifier of the API the release belongs
     * to.
     *
     * @param {string} [parameters.notes] Release Notes
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the release of the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters API Release Update parameters.
     *
     * @param {string} [parameters.apiId] Identifier of the API the release belongs
     * to.
     *
     * @param {string} [parameters.notes] Release Notes
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, parameters: models.ApiReleaseContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified release in the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified release in the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} releaseId Release identifier within an API. Must be unique
     * in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, releaseId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all releases of an API. An API release is created when making an API
     * Revision current. Releases are also used to rollback to previous revisions.
     * Results will be paged and can be constrained by the $top and $skip
     * parameters.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiReleaseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiReleaseCollection>>;

    /**
     * Lists all releases of an API. An API release is created when making an API
     * Revision current. Releases are also used to rollback to previous revisions.
     * Results will be paged and can be constrained by the $top and $skip
     * parameters.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiReleaseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiReleaseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiReleaseCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiReleaseCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApiReleaseCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiReleaseCollection>): void;
}

/**
 * @class
 * ApiOperation
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiOperation {


    /**
     * Lists a collection of the operations for the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | method      | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationCollection>>;

    /**
     * Lists a collection of the operations for the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | name        | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | method      | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationCollection>;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.OperationCollection>): void;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationCollection>): void;


    /**
     * Gets the entity state (Etag) version of the API operation specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the API operation specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the API Operation specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationContract>>;

    /**
     * Gets the details of the API Operation specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, callback: ServiceCallback<models.OperationContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationContract>): void;


    /**
     * Creates a new operation in the API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {array} [parameters.templateParameters] Collection of URL template
     * parameters.
     *
     * @param {string} [parameters.description] Description of the operation. May
     * include HTML formatting tags.
     *
     * @param {object} [parameters.request] An entity containing request details.
     *
     * @param {string} [parameters.request.description] Operation request
     * description.
     *
     * @param {array} [parameters.request.queryParameters] Collection of operation
     * request query parameters.
     *
     * @param {array} [parameters.request.headers] Collection of operation request
     * headers.
     *
     * @param {array} [parameters.request.representations] Collection of operation
     * request representations.
     *
     * @param {array} [parameters.responses] Array of Operation responses.
     *
     * @param {string} [parameters.policies] Operation Policies
     *
     * @param {string} parameters.displayName Operation Name.
     *
     * @param {string} parameters.method A Valid HTTP Operation Method. Typical
     * Http Methods like GET, PUT, POST but not limited by only them.
     *
     * @param {string} parameters.urlTemplate Relative URL template identifying the
     * target resource for this operation. May include parameters. Example:
     * /customers/{cid}/orders/{oid}/?date={date}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationContract>>;

    /**
     * Creates a new operation in the API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {array} [parameters.templateParameters] Collection of URL template
     * parameters.
     *
     * @param {string} [parameters.description] Description of the operation. May
     * include HTML formatting tags.
     *
     * @param {object} [parameters.request] An entity containing request details.
     *
     * @param {string} [parameters.request.description] Operation request
     * description.
     *
     * @param {array} [parameters.request.queryParameters] Collection of operation
     * request query parameters.
     *
     * @param {array} [parameters.request.headers] Collection of operation request
     * headers.
     *
     * @param {array} [parameters.request.representations] Collection of operation
     * request representations.
     *
     * @param {array} [parameters.responses] Array of Operation responses.
     *
     * @param {string} [parameters.policies] Operation Policies
     *
     * @param {string} parameters.displayName Operation Name.
     *
     * @param {string} parameters.method A Valid HTTP Operation Method. Typical
     * Http Methods like GET, PUT, POST but not limited by only them.
     *
     * @param {string} parameters.urlTemplate Relative URL template identifying the
     * target resource for this operation. May include parameters. Example:
     * /customers/{cid}/orders/{oid}/?date={date}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationContract, callback: ServiceCallback<models.OperationContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationContract>): void;


    /**
     * Updates the details of the operation in the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters API Operation Update parameters.
     *
     * @param {array} [parameters.templateParameters] Collection of URL template
     * parameters.
     *
     * @param {string} [parameters.description] Description of the operation. May
     * include HTML formatting tags.
     *
     * @param {object} [parameters.request] An entity containing request details.
     *
     * @param {string} [parameters.request.description] Operation request
     * description.
     *
     * @param {array} [parameters.request.queryParameters] Collection of operation
     * request query parameters.
     *
     * @param {array} [parameters.request.headers] Collection of operation request
     * headers.
     *
     * @param {array} [parameters.request.representations] Collection of operation
     * request representations.
     *
     * @param {array} [parameters.responses] Array of Operation responses.
     *
     * @param {string} [parameters.policies] Operation Policies
     *
     * @param {string} [parameters.displayName] Operation Name.
     *
     * @param {string} [parameters.method] A Valid HTTP Operation Method. Typical
     * Http Methods like GET, PUT, POST but not limited by only them.
     *
     * @param {string} [parameters.urlTemplate] Relative URL template identifying
     * the target resource for this operation. May include parameters. Example:
     * /customers/{cid}/orders/{oid}/?date={date}
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the operation in the API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters API Operation Update parameters.
     *
     * @param {array} [parameters.templateParameters] Collection of URL template
     * parameters.
     *
     * @param {string} [parameters.description] Description of the operation. May
     * include HTML formatting tags.
     *
     * @param {object} [parameters.request] An entity containing request details.
     *
     * @param {string} [parameters.request.description] Operation request
     * description.
     *
     * @param {array} [parameters.request.queryParameters] Collection of operation
     * request query parameters.
     *
     * @param {array} [parameters.request.headers] Collection of operation request
     * headers.
     *
     * @param {array} [parameters.request.representations] Collection of operation
     * request representations.
     *
     * @param {array} [parameters.responses] Array of Operation responses.
     *
     * @param {string} [parameters.policies] Operation Policies
     *
     * @param {string} [parameters.displayName] Operation Name.
     *
     * @param {string} [parameters.method] A Valid HTTP Operation Method. Typical
     * Http Methods like GET, PUT, POST but not limited by only them.
     *
     * @param {string} [parameters.urlTemplate] Relative URL template identifying
     * the target resource for this operation. May include parameters. Example:
     * /customers/{cid}/orders/{oid}/?date={date}
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationUpdateContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.OperationUpdateContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified operation in the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified operation in the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of the operations for the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationCollection>>;

    /**
     * Lists a collection of the operations for the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApiNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationCollection>;
    listByApiNext(nextPageLink: string, callback: ServiceCallback<models.OperationCollection>): void;
    listByApiNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationCollection>): void;
}

/**
 * @class
 * ApiOperationPolicy
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiOperationPolicy {


    /**
     * Get the list of policy configuration at the API Operation level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByOperationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyCollection>>;

    /**
     * Get the list of policy configuration at the API Operation level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyCollection>;
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, callback: ServiceCallback<models.PolicyCollection>): void;
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyCollection>): void;


    /**
     * Gets the entity state (Etag) version of the API operation policy specified
     * by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the API operation policy specified
     * by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the policy configuration at the API Operation level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Get the policy configuration at the API Operation level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, callback: ServiceCallback<models.PolicyContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Creates or updates policy configuration for the API Operation level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.PolicyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Creates or updates policy configuration for the API Operation level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.PolicyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.PolicyContract, callback: ServiceCallback<models.PolicyContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, parameters: models.PolicyContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Deletes the policy configuration at the Api Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the policy configuration at the Api Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ApiProduct
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiProduct {


    /**
     * Lists all Products, which the API is part of.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApisWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductCollection>>;

    /**
     * Lists all Products, which the API is part of.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApis(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductCollection>;
    listByApis(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.ProductCollection>): void;
    listByApis(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductCollection>): void;


    /**
     * Lists all Products, which the API is part of.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApisNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductCollection>>;

    /**
     * Lists all Products, which the API is part of.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApisNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductCollection>;
    listByApisNext(nextPageLink: string, callback: ServiceCallback<models.ProductCollection>): void;
    listByApisNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductCollection>): void;
}

/**
 * @class
 * ApiPolicy
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiPolicy {


    /**
     * Get the policy configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyCollection>>;

    /**
     * Get the policy configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyCollection>;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.PolicyCollection>): void;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyCollection>): void;


    /**
     * Gets the entity state (Etag) version of the API policy specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the API policy specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the policy configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Get the policy configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.PolicyContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Creates or updates policy configuration for the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.PolicyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Creates or updates policy configuration for the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.PolicyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.PolicyContract, callback: ServiceCallback<models.PolicyContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: models.PolicyContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Deletes the policy configuration at the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the policy configuration at the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ApiSchema
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiSchema {


    /**
     * Get the schema configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SchemaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SchemaCollection>>;

    /**
     * Get the schema configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SchemaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SchemaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SchemaCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SchemaCollection>;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.SchemaCollection>): void;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SchemaCollection>): void;


    /**
     * Gets the entity state (Etag) version of the schema specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the schema specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the schema configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SchemaContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SchemaContract>>;

    /**
     * Get the schema configuration at the API level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SchemaContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SchemaContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SchemaContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SchemaContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, callback: ServiceCallback<models.SchemaContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SchemaContract>): void;


    /**
     * Creates or updates schema configuration for the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} parameters The schema contents to apply.
     *
     * @param {string} parameters.contentType Must be a valid a media type used in
     * a Content-Type header as defined in the RFC 2616. Media type of the schema
     * document (e.g. application/json, application/xml).
     *
     * @param {string} [parameters.value] Json escaped string defining the document
     * representing the Schema.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SchemaContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: models.SchemaContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SchemaContract>>;

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} parameters The schema contents to apply.
     *
     * @param {string} parameters.contentType Must be a valid a media type used in
     * a Content-Type header as defined in the RFC 2616. Media type of the schema
     * document (e.g. application/json, application/xml).
     *
     * @param {string} [parameters.value] Json escaped string defining the document
     * representing the Schema.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SchemaContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SchemaContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SchemaContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: models.SchemaContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SchemaContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: models.SchemaContract, callback: ServiceCallback<models.SchemaContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, parameters: models.SchemaContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SchemaContract>): void;


    /**
     * Deletes the schema configuration at the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the schema configuration at the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} schemaId Schema identifier within an API. Must be unique in
     * the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, schemaId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the schema configuration at the API level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SchemaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SchemaCollection>>;

    /**
     * Get the schema configuration at the API level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SchemaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SchemaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SchemaCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApiNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SchemaCollection>;
    listByApiNext(nextPageLink: string, callback: ServiceCallback<models.SchemaCollection>): void;
    listByApiNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SchemaCollection>): void;
}

/**
 * @class
 * ApiDiagnostic
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiDiagnostic {


    /**
     * Lists all diagnostics of an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCollection>>;

    /**
     * Lists all diagnostics of an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCollection>;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.DiagnosticCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCollection>): void;


    /**
     * Gets the entity state (Etag) version of the Diagnostic for an API specified
     * by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the Diagnostic for an API specified
     * by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the Diagnostic for an API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticContract>>;

    /**
     * Gets the details of the Diagnostic for an API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, callback: ServiceCallback<models.DiagnosticContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticContract>): void;


    /**
     * Creates a new Diagnostic for an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticContract>>;

    /**
     * Creates a new Diagnostic for an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, callback: ServiceCallback<models.DiagnosticContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticContract>): void;


    /**
     * Updates the details of the Diagnostic for an API specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Diagnostic Update parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the Diagnostic for an API specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Diagnostic Update parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified Diagnostic from an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Diagnostic from an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all diagnostics of an API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCollection>>;

    /**
     * Lists all diagnostics of an API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCollection>): void;
}

/**
 * @class
 * ApiDiagnosticLogger
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiDiagnosticLogger {


    /**
     * Lists all loggers associated with the specified Diagnostic of an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | type        | eq                     |                                   |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerCollection>>;

    /**
     * Lists all loggers associated with the specified Diagnostic of an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | type        | eq                     |                                   |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerCollection>;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, callback: ServiceCallback<models.LoggerCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerCollection>): void;


    /**
     * Checks that logger entity specified by identifier is associated with the
     * diagnostics entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkEntityExistsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks that logger entity specified by identifier is associated with the
     * diagnostics entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkEntityExists(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, callback: ServiceCallback<boolean>): void;
    checkEntityExists(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Attaches a logger to a diagnostic for an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerContract>>;

    /**
     * Attaches a logger to a diagnostic for an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, callback: ServiceCallback<models.LoggerContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerContract>): void;


    /**
     * Deletes the specified Logger from Diagnostic for an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Logger from Diagnostic for an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, diagnosticId: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all loggers associated with the specified Diagnostic of an API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerCollection>>;

    /**
     * Lists all loggers associated with the specified Diagnostic of an API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.LoggerCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerCollection>): void;
}

/**
 * @class
 * ApiIssue
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiIssue {


    /**
     * Lists all issues associated with the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | state        | eq                     |
     * |
     * | userId          | ge, le, eq, ne, gt, lt | substringof, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueCollection>>;

    /**
     * Lists all issues associated with the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | state        | eq                     |
     * |
     * | userId          | ge, le, eq, ne, gt, lt | substringof, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueCollection>;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.IssueCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueCollection>): void;


    /**
     * Gets the entity state (Etag) version of the Issue for an API specified by
     * its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the Issue for an API specified by
     * its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the Issue for an API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueContract>>;

    /**
     * Gets the details of the Issue for an API specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, callback: ServiceCallback<models.IssueContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueContract>): void;


    /**
     * Creates a new Issue for an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {date} [parameters.createdDate] Date and time when the issue was
     * created.
     *
     * @param {string} [parameters.state] Status of the issue. Possible values
     * include: 'proposed', 'open', 'removed', 'resolved', 'closed'
     *
     * @param {string} [parameters.apiId] A resource identifier for the API the
     * issue was created for.
     *
     * @param {string} parameters.title The issue title.
     *
     * @param {string} parameters.description Text describing the issue.
     *
     * @param {string} parameters.userId A resource identifier for the user created
     * the issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueContract>>;

    /**
     * Creates a new Issue for an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {date} [parameters.createdDate] Date and time when the issue was
     * created.
     *
     * @param {string} [parameters.state] Status of the issue. Possible values
     * include: 'proposed', 'open', 'removed', 'resolved', 'closed'
     *
     * @param {string} [parameters.apiId] A resource identifier for the API the
     * issue was created for.
     *
     * @param {string} parameters.title The issue title.
     *
     * @param {string} parameters.description Text describing the issue.
     *
     * @param {string} parameters.userId A resource identifier for the user created
     * the issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueContract, callback: ServiceCallback<models.IssueContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueContract>): void;


    /**
     * Updates an existing issue for an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {date} [parameters.createdDate] Date and time when the issue was
     * created.
     *
     * @param {string} [parameters.state] Status of the issue. Possible values
     * include: 'proposed', 'open', 'removed', 'resolved', 'closed'
     *
     * @param {string} [parameters.apiId] A resource identifier for the API the
     * issue was created for.
     *
     * @param {string} [parameters.title] The issue title.
     *
     * @param {string} [parameters.description] Text describing the issue.
     *
     * @param {string} [parameters.userId] A resource identifier for the user
     * created the issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueUpdateContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates an existing issue for an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {date} [parameters.createdDate] Date and time when the issue was
     * created.
     *
     * @param {string} [parameters.state] Status of the issue. Possible values
     * include: 'proposed', 'open', 'removed', 'resolved', 'closed'
     *
     * @param {string} [parameters.apiId] A resource identifier for the API the
     * issue was created for.
     *
     * @param {string} [parameters.title] The issue title.
     *
     * @param {string} [parameters.description] Text describing the issue.
     *
     * @param {string} [parameters.userId] A resource identifier for the user
     * created the issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueUpdateContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueUpdateContract, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, parameters: models.IssueUpdateContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified Issue from an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Issue Entity. ETag should match the
     * current entity state from the header response of the GET request or it
     * should be * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Issue from an API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Issue Entity. ETag should match the
     * current entity state from the header response of the GET request or it
     * should be * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all issues associated with the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueCollection>>;

    /**
     * Lists all issues associated with the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.IssueCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueCollection>): void;
}

/**
 * @class
 * ApiIssueComment
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiIssueComment {


    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | userId          | ge, le, eq, ne, gt, lt | substringof, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueCommentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueCommentCollection>>;

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | userId          | ge, le, eq, ne, gt, lt | substringof, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueCommentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueCommentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueCommentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueCommentCollection>;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, callback: ServiceCallback<models.IssueCommentCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueCommentCollection>): void;


    /**
     * Gets the entity state (Etag) version of the issue Comment for an API
     * specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the issue Comment for an API
     * specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the issue Comment for an API specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueCommentContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueCommentContract>>;

    /**
     * Gets the details of the issue Comment for an API specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueCommentContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueCommentContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueCommentContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueCommentContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, callback: ServiceCallback<models.IssueCommentContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueCommentContract>): void;


    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.text Comment text.
     *
     * @param {date} [parameters.createdDate] Date and time when the comment was
     * created.
     *
     * @param {string} parameters.userId A resource identifier for the user who
     * left the comment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueCommentContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, parameters: models.IssueCommentContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueCommentContract>>;

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.text Comment text.
     *
     * @param {date} [parameters.createdDate] Date and time when the comment was
     * created.
     *
     * @param {string} parameters.userId A resource identifier for the user who
     * left the comment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueCommentContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueCommentContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueCommentContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, parameters: models.IssueCommentContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueCommentContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, parameters: models.IssueCommentContract, callback: ServiceCallback<models.IssueCommentContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, parameters: models.IssueCommentContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueCommentContract>): void;


    /**
     * Deletes the specified comment from an Issue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {string} ifMatch ETag of the Issue Entity. ETag should match the
     * current entity state from the header response of the GET request or it
     * should be * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified comment from an Issue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} commentId Comment identifier within an Issue. Must be unique
     * in the current Issue.
     *
     * @param {string} ifMatch ETag of the Issue Entity. ETag should match the
     * current entity state from the header response of the GET request or it
     * should be * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, commentId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueCommentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueCommentCollection>>;

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueCommentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueCommentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueCommentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueCommentCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.IssueCommentCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueCommentCollection>): void;
}

/**
 * @class
 * ApiIssueAttachment
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiIssueAttachment {


    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | userId          | ge, le, eq, ne, gt, lt | substringof, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueAttachmentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueAttachmentCollection>>;

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | userId          | ge, le, eq, ne, gt, lt | substringof, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueAttachmentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueAttachmentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueAttachmentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueAttachmentCollection>;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, callback: ServiceCallback<models.IssueAttachmentCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueAttachmentCollection>): void;


    /**
     * Gets the entity state (Etag) version of the issue Attachment for an API
     * specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the issue Attachment for an API
     * specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the issue Attachment for an API specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueAttachmentContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueAttachmentContract>>;

    /**
     * Gets the details of the issue Attachment for an API specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueAttachmentContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueAttachmentContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueAttachmentContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueAttachmentContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, callback: ServiceCallback<models.IssueAttachmentContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueAttachmentContract>): void;


    /**
     * Creates a new Attachment for the Issue in an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.title Filename by which the binary data will be
     * saved.
     *
     * @param {string} parameters.contentFormat Either 'link' if content is
     * provided via an HTTP link or the MIME type of the Base64-encoded binary data
     * provided in the 'content' property.
     *
     * @param {string} parameters.content An HTTP link or Base64-encoded binary
     * data.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueAttachmentContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, parameters: models.IssueAttachmentContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueAttachmentContract>>;

    /**
     * Creates a new Attachment for the Issue in an API or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.title Filename by which the binary data will be
     * saved.
     *
     * @param {string} parameters.contentFormat Either 'link' if content is
     * provided via an HTTP link or the MIME type of the Base64-encoded binary data
     * provided in the 'content' property.
     *
     * @param {string} parameters.content An HTTP link or Base64-encoded binary
     * data.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Issue Entity. ETag should
     * match the current entity state from the header response of the GET request
     * or it should be * for unconditional update.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueAttachmentContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueAttachmentContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueAttachmentContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, parameters: models.IssueAttachmentContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueAttachmentContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, parameters: models.IssueAttachmentContract, callback: ServiceCallback<models.IssueAttachmentContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, parameters: models.IssueAttachmentContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueAttachmentContract>): void;


    /**
     * Deletes the specified comment from an Issue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {string} ifMatch ETag of the Issue Entity. ETag should match the
     * current entity state from the header response of the GET request or it
     * should be * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified comment from an Issue.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} issueId Issue identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} attachmentId Attachment identifier within an Issue. Must be
     * unique in the current Issue.
     *
     * @param {string} ifMatch ETag of the Issue Entity. ETag should match the
     * current entity state from the header response of the GET request or it
     * should be * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, issueId: string, attachmentId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IssueAttachmentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssueAttachmentCollection>>;

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IssueAttachmentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IssueAttachmentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IssueAttachmentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssueAttachmentCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.IssueAttachmentCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssueAttachmentCollection>): void;
}

/**
 * @class
 * AuthorizationServer
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface AuthorizationServer {


    /**
     * Lists a collection of authorization servers defined within a service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationServerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationServerCollection>>;

    /**
     * Lists a collection of authorization servers defined within a service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationServerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationServerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationServerCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationServerCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.AuthorizationServerCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationServerCollection>): void;


    /**
     * Gets the entity state (Etag) version of the authorizationServer specified by
     * its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, authsid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the authorizationServer specified by
     * its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, authsid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, authsid: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, authsid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the authorization server specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationServerContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, authsid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationServerContract>>;

    /**
     * Gets the details of the authorization server specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationServerContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationServerContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationServerContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, authsid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationServerContract>;
    get(resourceGroupName: string, serviceName: string, authsid: string, callback: ServiceCallback<models.AuthorizationServerContract>): void;
    get(resourceGroupName: string, serviceName: string, authsid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationServerContract>): void;


    /**
     * Creates new authorization server or updates an existing authorization
     * server.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Description of the authorization
     * server. Can contain HTML formatting tags.
     *
     * @param {array} [parameters.authorizationMethods] HTTP verbs supported by the
     * authorization endpoint. GET must be always present. POST is optional.
     *
     * @param {array} [parameters.clientAuthenticationMethod] Method of
     * authentication supported by the token endpoint of this authorization server.
     * Possible values are Basic and/or Body. When Body is specified, client
     * credentials and other parameters are passed within the request body in the
     * application/x-www-form-urlencoded format.
     *
     * @param {array} [parameters.tokenBodyParameters] Additional parameters
     * required by the token endpoint of this authorization server represented as
     * an array of JSON objects with name and value string properties, i.e. {"name"
     * : "name value", "value": "a value"}.
     *
     * @param {string} [parameters.tokenEndpoint] OAuth token endpoint. Contains
     * absolute URI to entity being referenced.
     *
     * @param {boolean} [parameters.supportState] If true, authorization server
     * will include state parameter from the authorization request to its response.
     * Client may use state parameter to raise protocol security.
     *
     * @param {string} [parameters.defaultScope] Access token scope that is going
     * to be requested by default. Can be overridden at the API level. Should be
     * provided in the form of a string containing space-delimited values.
     *
     * @param {array} [parameters.bearerTokenSendingMethods] Specifies the
     * mechanism by which access token is passed to the API.
     *
     * @param {string} [parameters.clientSecret] Client or app secret registered
     * with this authorization server.
     *
     * @param {string} [parameters.resourceOwnerUsername] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner username.
     *
     * @param {string} [parameters.resourceOwnerPassword] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner password.
     *
     * @param {string} parameters.displayName User-friendly authorization server
     * name.
     *
     * @param {string} parameters.clientRegistrationEndpoint Optional reference to
     * a page where client or app registration for this authorization server is
     * performed. Contains absolute URL to entity being referenced.
     *
     * @param {string} parameters.authorizationEndpoint OAuth authorization
     * endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
     *
     * @param {array} parameters.grantTypes Form of an authorization grant, which
     * the client uses to request the access token.
     *
     * @param {string} parameters.clientId Client or app id registered with this
     * authorization server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationServerContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationServerContract>>;

    /**
     * Creates new authorization server or updates an existing authorization
     * server.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Description of the authorization
     * server. Can contain HTML formatting tags.
     *
     * @param {array} [parameters.authorizationMethods] HTTP verbs supported by the
     * authorization endpoint. GET must be always present. POST is optional.
     *
     * @param {array} [parameters.clientAuthenticationMethod] Method of
     * authentication supported by the token endpoint of this authorization server.
     * Possible values are Basic and/or Body. When Body is specified, client
     * credentials and other parameters are passed within the request body in the
     * application/x-www-form-urlencoded format.
     *
     * @param {array} [parameters.tokenBodyParameters] Additional parameters
     * required by the token endpoint of this authorization server represented as
     * an array of JSON objects with name and value string properties, i.e. {"name"
     * : "name value", "value": "a value"}.
     *
     * @param {string} [parameters.tokenEndpoint] OAuth token endpoint. Contains
     * absolute URI to entity being referenced.
     *
     * @param {boolean} [parameters.supportState] If true, authorization server
     * will include state parameter from the authorization request to its response.
     * Client may use state parameter to raise protocol security.
     *
     * @param {string} [parameters.defaultScope] Access token scope that is going
     * to be requested by default. Can be overridden at the API level. Should be
     * provided in the form of a string containing space-delimited values.
     *
     * @param {array} [parameters.bearerTokenSendingMethods] Specifies the
     * mechanism by which access token is passed to the API.
     *
     * @param {string} [parameters.clientSecret] Client or app secret registered
     * with this authorization server.
     *
     * @param {string} [parameters.resourceOwnerUsername] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner username.
     *
     * @param {string} [parameters.resourceOwnerPassword] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner password.
     *
     * @param {string} parameters.displayName User-friendly authorization server
     * name.
     *
     * @param {string} parameters.clientRegistrationEndpoint Optional reference to
     * a page where client or app registration for this authorization server is
     * performed. Contains absolute URL to entity being referenced.
     *
     * @param {string} parameters.authorizationEndpoint OAuth authorization
     * endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
     *
     * @param {array} parameters.grantTypes Form of an authorization grant, which
     * the client uses to request the access token.
     *
     * @param {string} parameters.clientId Client or app id registered with this
     * authorization server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationServerContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationServerContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationServerContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationServerContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerContract, callback: ServiceCallback<models.AuthorizationServerContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationServerContract>): void;


    /**
     * Updates the details of the authorization server specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} parameters OAuth2 Server settings Update parameters.
     *
     * @param {string} [parameters.description] Description of the authorization
     * server. Can contain HTML formatting tags.
     *
     * @param {array} [parameters.authorizationMethods] HTTP verbs supported by the
     * authorization endpoint. GET must be always present. POST is optional.
     *
     * @param {array} [parameters.clientAuthenticationMethod] Method of
     * authentication supported by the token endpoint of this authorization server.
     * Possible values are Basic and/or Body. When Body is specified, client
     * credentials and other parameters are passed within the request body in the
     * application/x-www-form-urlencoded format.
     *
     * @param {array} [parameters.tokenBodyParameters] Additional parameters
     * required by the token endpoint of this authorization server represented as
     * an array of JSON objects with name and value string properties, i.e. {"name"
     * : "name value", "value": "a value"}.
     *
     * @param {string} [parameters.tokenEndpoint] OAuth token endpoint. Contains
     * absolute URI to entity being referenced.
     *
     * @param {boolean} [parameters.supportState] If true, authorization server
     * will include state parameter from the authorization request to its response.
     * Client may use state parameter to raise protocol security.
     *
     * @param {string} [parameters.defaultScope] Access token scope that is going
     * to be requested by default. Can be overridden at the API level. Should be
     * provided in the form of a string containing space-delimited values.
     *
     * @param {array} [parameters.bearerTokenSendingMethods] Specifies the
     * mechanism by which access token is passed to the API.
     *
     * @param {string} [parameters.clientSecret] Client or app secret registered
     * with this authorization server.
     *
     * @param {string} [parameters.resourceOwnerUsername] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner username.
     *
     * @param {string} [parameters.resourceOwnerPassword] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner password.
     *
     * @param {string} [parameters.displayName] User-friendly authorization server
     * name.
     *
     * @param {string} [parameters.clientRegistrationEndpoint] Optional reference
     * to a page where client or app registration for this authorization server is
     * performed. Contains absolute URL to entity being referenced.
     *
     * @param {string} [parameters.authorizationEndpoint] OAuth authorization
     * endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
     *
     * @param {array} [parameters.grantTypes] Form of an authorization grant, which
     * the client uses to request the access token.
     *
     * @param {string} [parameters.clientId] Client or app id registered with this
     * authorization server.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the authorization server specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {object} parameters OAuth2 Server settings Update parameters.
     *
     * @param {string} [parameters.description] Description of the authorization
     * server. Can contain HTML formatting tags.
     *
     * @param {array} [parameters.authorizationMethods] HTTP verbs supported by the
     * authorization endpoint. GET must be always present. POST is optional.
     *
     * @param {array} [parameters.clientAuthenticationMethod] Method of
     * authentication supported by the token endpoint of this authorization server.
     * Possible values are Basic and/or Body. When Body is specified, client
     * credentials and other parameters are passed within the request body in the
     * application/x-www-form-urlencoded format.
     *
     * @param {array} [parameters.tokenBodyParameters] Additional parameters
     * required by the token endpoint of this authorization server represented as
     * an array of JSON objects with name and value string properties, i.e. {"name"
     * : "name value", "value": "a value"}.
     *
     * @param {string} [parameters.tokenEndpoint] OAuth token endpoint. Contains
     * absolute URI to entity being referenced.
     *
     * @param {boolean} [parameters.supportState] If true, authorization server
     * will include state parameter from the authorization request to its response.
     * Client may use state parameter to raise protocol security.
     *
     * @param {string} [parameters.defaultScope] Access token scope that is going
     * to be requested by default. Can be overridden at the API level. Should be
     * provided in the form of a string containing space-delimited values.
     *
     * @param {array} [parameters.bearerTokenSendingMethods] Specifies the
     * mechanism by which access token is passed to the API.
     *
     * @param {string} [parameters.clientSecret] Client or app secret registered
     * with this authorization server.
     *
     * @param {string} [parameters.resourceOwnerUsername] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner username.
     *
     * @param {string} [parameters.resourceOwnerPassword] Can be optionally
     * specified when resource owner password grant type is supported by this
     * authorization server. Default resource owner password.
     *
     * @param {string} [parameters.displayName] User-friendly authorization server
     * name.
     *
     * @param {string} [parameters.clientRegistrationEndpoint] Optional reference
     * to a page where client or app registration for this authorization server is
     * performed. Contains absolute URL to entity being referenced.
     *
     * @param {string} [parameters.authorizationEndpoint] OAuth authorization
     * endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
     *
     * @param {array} [parameters.grantTypes] Form of an authorization grant, which
     * the client uses to request the access token.
     *
     * @param {string} [parameters.clientId] Client or app id registered with this
     * authorization server.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerUpdateContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, authsid: string, parameters: models.AuthorizationServerUpdateContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes specific authorization server instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, authsid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific authorization server instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} authsid Identifier of the authorization server.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, authsid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, authsid: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, authsid: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of authorization servers defined within a service
     * instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationServerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationServerCollection>>;

    /**
     * Lists a collection of authorization servers defined within a service
     * instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationServerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationServerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationServerCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationServerCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.AuthorizationServerCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationServerCollection>): void;
}

/**
 * @class
 * Backend
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Backend {


    /**
     * Lists a collection of backends in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | host  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackendCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackendCollection>>;

    /**
     * Lists a collection of backends in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | host  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackendCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackendCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackendCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.BackendCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.BackendCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackendCollection>): void;


    /**
     * Gets the entity state (Etag) version of the backend specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, backendid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the backend specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, backendid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, backendid: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, backendid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the backend specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackendContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, backendid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackendContract>>;

    /**
     * Gets the details of the backend specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackendContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackendContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackendContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, backendid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackendContract>;
    get(resourceGroupName: string, serviceName: string, backendid: string, callback: ServiceCallback<models.BackendContract>): void;
    get(resourceGroupName: string, serviceName: string, backendid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackendContract>): void;


    /**
     * Creates or Updates a backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.title] Backend Title.
     *
     * @param {string} [parameters.description] Backend Description.
     *
     * @param {string} [parameters.resourceId] Management Uri of the Resource in
     * External System. This url can be the Arm Resource Id of Logic Apps, Function
     * Apps or Api Apps.
     *
     * @param {object} [parameters.properties] Backend Properties contract
     *
     * @param {object} [parameters.properties.serviceFabricCluster] Backend Service
     * Fabric Cluster Properties
     *
     * @param {string}
     * parameters.properties.serviceFabricCluster.clientCertificatethumbprint The
     * client certificate thumbprint for the management endpoint.
     *
     * @param {number}
     * [parameters.properties.serviceFabricCluster.maxPartitionResolutionRetries]
     * Maximum number of retries while attempting resolve the partition.
     *
     * @param {array}
     * parameters.properties.serviceFabricCluster.managementEndpoints The cluster
     * management endpoint.
     *
     * @param {array}
     * [parameters.properties.serviceFabricCluster.serverCertificateThumbprints]
     * Thumbprints of certificates cluster management service uses for tls
     * communication
     *
     * @param {array} [parameters.properties.serviceFabricCluster.serverX509Names]
     * Server X509 Certificate Names Collection
     *
     * @param {object} [parameters.credentials] Backend Credentials Contract
     * Properties
     *
     * @param {array} [parameters.credentials.certificate] List of Client
     * Certificate Thumbprint.
     *
     * @param {object} [parameters.credentials.query] Query Parameter description.
     *
     * @param {object} [parameters.credentials.header] Header Parameter
     * description.
     *
     * @param {object} [parameters.credentials.authorization] Authorization header
     * authentication
     *
     * @param {string} parameters.credentials.authorization.scheme Authentication
     * Scheme name.
     *
     * @param {string} parameters.credentials.authorization.parameter
     * Authentication Parameter value.
     *
     * @param {object} [parameters.proxy] Backend Proxy Contract Properties
     *
     * @param {string} parameters.proxy.url WebProxy Server AbsoluteUri property
     * which includes the entire URI stored in the Uri instance, including all
     * fragments and query strings.
     *
     * @param {string} [parameters.proxy.username] Username to connect to the
     * WebProxy server
     *
     * @param {string} [parameters.proxy.password] Password to connect to the
     * WebProxy Server
     *
     * @param {object} [parameters.tls] Backend TLS Properties
     *
     * @param {boolean} [parameters.tls.validateCertificateChain] Flag indicating
     * whether SSL certificate chain validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {boolean} [parameters.tls.validateCertificateName] Flag indicating
     * whether SSL certificate name validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {string} parameters.url Runtime Url of the Backend.
     *
     * @param {string} parameters.protocol Backend communication protocol. Possible
     * values include: 'http', 'soap'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackendContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackendContract>>;

    /**
     * Creates or Updates a backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.title] Backend Title.
     *
     * @param {string} [parameters.description] Backend Description.
     *
     * @param {string} [parameters.resourceId] Management Uri of the Resource in
     * External System. This url can be the Arm Resource Id of Logic Apps, Function
     * Apps or Api Apps.
     *
     * @param {object} [parameters.properties] Backend Properties contract
     *
     * @param {object} [parameters.properties.serviceFabricCluster] Backend Service
     * Fabric Cluster Properties
     *
     * @param {string}
     * parameters.properties.serviceFabricCluster.clientCertificatethumbprint The
     * client certificate thumbprint for the management endpoint.
     *
     * @param {number}
     * [parameters.properties.serviceFabricCluster.maxPartitionResolutionRetries]
     * Maximum number of retries while attempting resolve the partition.
     *
     * @param {array}
     * parameters.properties.serviceFabricCluster.managementEndpoints The cluster
     * management endpoint.
     *
     * @param {array}
     * [parameters.properties.serviceFabricCluster.serverCertificateThumbprints]
     * Thumbprints of certificates cluster management service uses for tls
     * communication
     *
     * @param {array} [parameters.properties.serviceFabricCluster.serverX509Names]
     * Server X509 Certificate Names Collection
     *
     * @param {object} [parameters.credentials] Backend Credentials Contract
     * Properties
     *
     * @param {array} [parameters.credentials.certificate] List of Client
     * Certificate Thumbprint.
     *
     * @param {object} [parameters.credentials.query] Query Parameter description.
     *
     * @param {object} [parameters.credentials.header] Header Parameter
     * description.
     *
     * @param {object} [parameters.credentials.authorization] Authorization header
     * authentication
     *
     * @param {string} parameters.credentials.authorization.scheme Authentication
     * Scheme name.
     *
     * @param {string} parameters.credentials.authorization.parameter
     * Authentication Parameter value.
     *
     * @param {object} [parameters.proxy] Backend Proxy Contract Properties
     *
     * @param {string} parameters.proxy.url WebProxy Server AbsoluteUri property
     * which includes the entire URI stored in the Uri instance, including all
     * fragments and query strings.
     *
     * @param {string} [parameters.proxy.username] Username to connect to the
     * WebProxy server
     *
     * @param {string} [parameters.proxy.password] Password to connect to the
     * WebProxy Server
     *
     * @param {object} [parameters.tls] Backend TLS Properties
     *
     * @param {boolean} [parameters.tls.validateCertificateChain] Flag indicating
     * whether SSL certificate chain validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {boolean} [parameters.tls.validateCertificateName] Flag indicating
     * whether SSL certificate name validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {string} parameters.url Runtime Url of the Backend.
     *
     * @param {string} parameters.protocol Backend communication protocol. Possible
     * values include: 'http', 'soap'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackendContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackendContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackendContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BackendContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendContract, callback: ServiceCallback<models.BackendContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackendContract>): void;


    /**
     * Updates an existing backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.title] Backend Title.
     *
     * @param {string} [parameters.description] Backend Description.
     *
     * @param {string} [parameters.resourceId] Management Uri of the Resource in
     * External System. This url can be the Arm Resource Id of Logic Apps, Function
     * Apps or Api Apps.
     *
     * @param {object} [parameters.properties] Backend Properties contract
     *
     * @param {object} [parameters.properties.serviceFabricCluster] Backend Service
     * Fabric Cluster Properties
     *
     * @param {string}
     * parameters.properties.serviceFabricCluster.clientCertificatethumbprint The
     * client certificate thumbprint for the management endpoint.
     *
     * @param {number}
     * [parameters.properties.serviceFabricCluster.maxPartitionResolutionRetries]
     * Maximum number of retries while attempting resolve the partition.
     *
     * @param {array}
     * parameters.properties.serviceFabricCluster.managementEndpoints The cluster
     * management endpoint.
     *
     * @param {array}
     * [parameters.properties.serviceFabricCluster.serverCertificateThumbprints]
     * Thumbprints of certificates cluster management service uses for tls
     * communication
     *
     * @param {array} [parameters.properties.serviceFabricCluster.serverX509Names]
     * Server X509 Certificate Names Collection
     *
     * @param {object} [parameters.credentials] Backend Credentials Contract
     * Properties
     *
     * @param {array} [parameters.credentials.certificate] List of Client
     * Certificate Thumbprint.
     *
     * @param {object} [parameters.credentials.query] Query Parameter description.
     *
     * @param {object} [parameters.credentials.header] Header Parameter
     * description.
     *
     * @param {object} [parameters.credentials.authorization] Authorization header
     * authentication
     *
     * @param {string} parameters.credentials.authorization.scheme Authentication
     * Scheme name.
     *
     * @param {string} parameters.credentials.authorization.parameter
     * Authentication Parameter value.
     *
     * @param {object} [parameters.proxy] Backend Proxy Contract Properties
     *
     * @param {string} parameters.proxy.url WebProxy Server AbsoluteUri property
     * which includes the entire URI stored in the Uri instance, including all
     * fragments and query strings.
     *
     * @param {string} [parameters.proxy.username] Username to connect to the
     * WebProxy server
     *
     * @param {string} [parameters.proxy.password] Password to connect to the
     * WebProxy Server
     *
     * @param {object} [parameters.tls] Backend TLS Properties
     *
     * @param {boolean} [parameters.tls.validateCertificateChain] Flag indicating
     * whether SSL certificate chain validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {boolean} [parameters.tls.validateCertificateName] Flag indicating
     * whether SSL certificate name validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {string} [parameters.url] Runtime Url of the Backend.
     *
     * @param {string} [parameters.protocol] Backend communication protocol.
     * Possible values include: 'http', 'soap'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates an existing backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.title] Backend Title.
     *
     * @param {string} [parameters.description] Backend Description.
     *
     * @param {string} [parameters.resourceId] Management Uri of the Resource in
     * External System. This url can be the Arm Resource Id of Logic Apps, Function
     * Apps or Api Apps.
     *
     * @param {object} [parameters.properties] Backend Properties contract
     *
     * @param {object} [parameters.properties.serviceFabricCluster] Backend Service
     * Fabric Cluster Properties
     *
     * @param {string}
     * parameters.properties.serviceFabricCluster.clientCertificatethumbprint The
     * client certificate thumbprint for the management endpoint.
     *
     * @param {number}
     * [parameters.properties.serviceFabricCluster.maxPartitionResolutionRetries]
     * Maximum number of retries while attempting resolve the partition.
     *
     * @param {array}
     * parameters.properties.serviceFabricCluster.managementEndpoints The cluster
     * management endpoint.
     *
     * @param {array}
     * [parameters.properties.serviceFabricCluster.serverCertificateThumbprints]
     * Thumbprints of certificates cluster management service uses for tls
     * communication
     *
     * @param {array} [parameters.properties.serviceFabricCluster.serverX509Names]
     * Server X509 Certificate Names Collection
     *
     * @param {object} [parameters.credentials] Backend Credentials Contract
     * Properties
     *
     * @param {array} [parameters.credentials.certificate] List of Client
     * Certificate Thumbprint.
     *
     * @param {object} [parameters.credentials.query] Query Parameter description.
     *
     * @param {object} [parameters.credentials.header] Header Parameter
     * description.
     *
     * @param {object} [parameters.credentials.authorization] Authorization header
     * authentication
     *
     * @param {string} parameters.credentials.authorization.scheme Authentication
     * Scheme name.
     *
     * @param {string} parameters.credentials.authorization.parameter
     * Authentication Parameter value.
     *
     * @param {object} [parameters.proxy] Backend Proxy Contract Properties
     *
     * @param {string} parameters.proxy.url WebProxy Server AbsoluteUri property
     * which includes the entire URI stored in the Uri instance, including all
     * fragments and query strings.
     *
     * @param {string} [parameters.proxy.username] Username to connect to the
     * WebProxy server
     *
     * @param {string} [parameters.proxy.password] Password to connect to the
     * WebProxy Server
     *
     * @param {object} [parameters.tls] Backend TLS Properties
     *
     * @param {boolean} [parameters.tls.validateCertificateChain] Flag indicating
     * whether SSL certificate chain validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {boolean} [parameters.tls.validateCertificateName] Flag indicating
     * whether SSL certificate name validation should be done when using
     * self-signed certificates for this backend host.
     *
     * @param {string} [parameters.url] Runtime Url of the Backend.
     *
     * @param {string} [parameters.protocol] Backend communication protocol.
     * Possible values include: 'http', 'soap'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, backendid: string, parameters: models.BackendUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, backendid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, backendid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, backendid: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, backendid: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Notifies the APIM proxy to create a new connection to the backend after the
     * specified timeout. If no timeout was specified, timeout of 2 minutes is
     * used.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Reconnect request parameters.
     *
     * @param {moment.duration} [options.parameters.after] Duration in ISO8601
     * format after which reconnect will be initiated. Minimum duration of the
     * Reconnect is PT2M.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    reconnectWithHttpOperationResponse(resourceGroupName: string, serviceName: string, backendid: string, options?: { parameters? : models.BackendReconnectContract, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Notifies the APIM proxy to create a new connection to the backend after the
     * specified timeout. If no timeout was specified, timeout of 2 minutes is
     * used.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} backendid Identifier of the Backend entity. Must be unique
     * in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Reconnect request parameters.
     *
     * @param {moment.duration} [options.parameters.after] Duration in ISO8601
     * format after which reconnect will be initiated. Minimum duration of the
     * Reconnect is PT2M.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reconnect(resourceGroupName: string, serviceName: string, backendid: string, options?: { parameters? : models.BackendReconnectContract, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    reconnect(resourceGroupName: string, serviceName: string, backendid: string, callback: ServiceCallback<void>): void;
    reconnect(resourceGroupName: string, serviceName: string, backendid: string, options: { parameters? : models.BackendReconnectContract, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of backends in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackendCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackendCollection>>;

    /**
     * Lists a collection of backends in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackendCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackendCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackendCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackendCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.BackendCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackendCollection>): void;
}

/**
 * @class
 * Certificate
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Certificate {


    /**
     * Lists a collection of all certificates in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field          | Supported operators    |
     * Supported functions                         |
     * |----------------|------------------------|---------------------------------------------|
     * | id             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | subject        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | thumbprint     | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | expirationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateCollection>>;

    /**
     * Lists a collection of all certificates in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field          | Supported operators    |
     * Supported functions                         |
     * |----------------|------------------------|---------------------------------------------|
     * | id             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | subject        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | thumbprint     | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | expirationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.CertificateCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;


    /**
     * Gets the entity state (Etag) version of the certificate specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, certificateId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the certificate specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, certificateId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, certificateId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, certificateId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the certificate specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, certificateId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateContract>>;

    /**
     * Gets the details of the certificate specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, certificateId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateContract>;
    get(resourceGroupName: string, serviceName: string, certificateId: string, callback: ServiceCallback<models.CertificateContract>): void;
    get(resourceGroupName: string, serviceName: string, certificateId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateContract>): void;


    /**
     * Creates or updates the certificate being used for authentication with the
     * backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters Create or Update parameters.
     *
     * @param {string} parameters.data Base 64 encoded certificate using the
     * application/x-pkcs12 representation.
     *
     * @param {string} parameters.password Password for the Certificate
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, certificateId: string, parameters: models.CertificateCreateOrUpdateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateContract>>;

    /**
     * Creates or updates the certificate being used for authentication with the
     * backend.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} parameters Create or Update parameters.
     *
     * @param {string} parameters.data Base 64 encoded certificate using the
     * application/x-pkcs12 representation.
     *
     * @param {string} parameters.password Password for the Certificate
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateId: string, parameters: models.CertificateCreateOrUpdateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateId: string, parameters: models.CertificateCreateOrUpdateParameters, callback: ServiceCallback<models.CertificateContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateId: string, parameters: models.CertificateCreateOrUpdateParameters, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateContract>): void;


    /**
     * Deletes specific certificate.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific certificate.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} certificateId Identifier of the certificate entity. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of all certificates in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateCollection>>;

    /**
     * Lists a collection of all certificates in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.CertificateCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;
}

/**
 * @class
 * ApiManagementOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiManagementOperations {


    /**
     * Lists all of the available REST API operations of the
     * Microsoft.ApiManagement provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available REST API operations of the
     * Microsoft.ApiManagement provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available REST API operations of the
     * Microsoft.ApiManagement provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available REST API operations of the
     * Microsoft.ApiManagement provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * ApiManagementServiceSkus
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiManagementServiceSkus {


    /**
     * @summary Gets available SKUs for API Management service
     *
     * Gets all available SKU for a given API Management service
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceSkuResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableServiceSkusWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceSkuResults>>;

    /**
     * @summary Gets available SKUs for API Management service
     *
     * Gets all available SKU for a given API Management service
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceSkuResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceSkuResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceSkuResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableServiceSkus(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceSkuResults>;
    listAvailableServiceSkus(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ResourceSkuResults>): void;
    listAvailableServiceSkus(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceSkuResults>): void;


    /**
     * @summary Gets available SKUs for API Management service
     *
     * Gets all available SKU for a given API Management service
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceSkuResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAvailableServiceSkusNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceSkuResults>>;

    /**
     * @summary Gets available SKUs for API Management service
     *
     * Gets all available SKU for a given API Management service
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceSkuResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceSkuResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceSkuResults} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAvailableServiceSkusNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceSkuResults>;
    listAvailableServiceSkusNext(nextPageLink: string, callback: ServiceCallback<models.ResourceSkuResults>): void;
    listAvailableServiceSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceSkuResults>): void;
}

/**
 * @class
 * ApiManagementService
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiManagementService {


    /**
     * Restores a backup of an API Management service created using the
     * ApiManagementService_Backup operation on the current service. This is a long
     * running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the Restore API Management
     * service from backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Restores a backup of an API Management service created using the
     * ApiManagementService_Backup operation on the current service. This is a long
     * running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the Restore API Management
     * service from backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restore(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    restore(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    restore(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Creates a backup of the API Management service to the given Azure Storage
     * Account. This is long running operation and could take several minutes to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the
     * ApiManagementService_Backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    backupWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Creates a backup of the API Management service to the given Azure Storage
     * Account. This is long running operation and could take several minutes to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the
     * ApiManagementService_Backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    backup(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    backup(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    backup(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Creates or updates an API Management service. This is long running operation
     * and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} parameters.publisherEmail Publisher email.
     *
     * @param {string} parameters.publisherName Publisher name.
     *
     * @param {object} parameters.sku SKU properties of the API Management service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Creates or updates an API Management service. This is long running operation
     * and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} parameters.publisherEmail Publisher email.
     *
     * @param {string} parameters.publisherName Publisher name.
     *
     * @param {object} parameters.sku SKU properties of the API Management service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Updates an existing API Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} [parameters.publisherEmail] Publisher email.
     *
     * @param {string} [parameters.publisherName] Publisher name.
     *
     * @param {object} [parameters.sku] SKU properties of the API Management
     * service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Updates an existing API Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} [parameters.publisherEmail] Publisher email.
     *
     * @param {string} [parameters.publisherName] Publisher name.
     *
     * @param {object} [parameters.sku] SKU properties of the API Management
     * service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    update(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    update(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Gets an API Management service resource description.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Gets an API Management service resource description.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    get(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    get(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Deletes an existing API Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing API Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List all API Management services within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceListResult>>;

    /**
     * List all API Management services within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ApiManagementServiceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceListResult>): void;


    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceListResult>>;

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceListResult>;
    list(callback: ServiceCallback<models.ApiManagementServiceListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceListResult>): void;


    /**
     * Gets the Single-Sign-On token for the API Management Service which is valid
     * for 5 Minutes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceGetSsoTokenResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSsoTokenWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceGetSsoTokenResult>>;

    /**
     * Gets the Single-Sign-On token for the API Management Service which is valid
     * for 5 Minutes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceGetSsoTokenResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceGetSsoTokenResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceGetSsoTokenResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSsoToken(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceGetSsoTokenResult>;
    getSsoToken(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ApiManagementServiceGetSsoTokenResult>): void;
    getSsoToken(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceGetSsoTokenResult>): void;


    /**
     * Checks availability and correctness of a name for an API Management service.
     *
     * @param {object} parameters Parameters supplied to the CheckNameAvailability
     * operation.
     *
     * @param {string} parameters.name The name to check for availability.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceNameAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(parameters: models.ApiManagementServiceCheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceNameAvailabilityResult>>;

    /**
     * Checks availability and correctness of a name for an API Management service.
     *
     * @param {object} parameters Parameters supplied to the CheckNameAvailability
     * operation.
     *
     * @param {string} parameters.name The name to check for availability.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceNameAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceNameAvailabilityResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(parameters: models.ApiManagementServiceCheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceNameAvailabilityResult>;
    checkNameAvailability(parameters: models.ApiManagementServiceCheckNameAvailabilityParameters, callback: ServiceCallback<models.ApiManagementServiceNameAvailabilityResult>): void;
    checkNameAvailability(parameters: models.ApiManagementServiceCheckNameAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceNameAvailabilityResult>): void;


    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network
     * to pick the updated network settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to the Apply
     * Network Configuration operation. If the parameters are empty, all the
     * regions in which the Api Management service is deployed will be updated
     * sequentially without incurring downtime in the region.
     *
     * @param {string} [options.parameters.location] Location of the Api Management
     * service to update for a multi-region service. For a service deployed in a
     * single region, this parameter is not required.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    applyNetworkConfigurationUpdatesWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { parameters? : models.ApiManagementServiceApplyNetworkConfigurationParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network
     * to pick the updated network settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to the Apply
     * Network Configuration operation. If the parameters are empty, all the
     * regions in which the Api Management service is deployed will be updated
     * sequentially without incurring downtime in the region.
     *
     * @param {string} [options.parameters.location] Location of the Api Management
     * service to update for a multi-region service. For a service deployed in a
     * single region, this parameter is not required.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    applyNetworkConfigurationUpdates(resourceGroupName: string, serviceName: string, options?: { parameters? : models.ApiManagementServiceApplyNetworkConfigurationParameters, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    applyNetworkConfigurationUpdates(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    applyNetworkConfigurationUpdates(resourceGroupName: string, serviceName: string, options: { parameters? : models.ApiManagementServiceApplyNetworkConfigurationParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Upload Custom Domain SSL certificate for an API Management service. This
     * operation will be deprecated in future releases.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the Upload SSL certificate
     * for an API Management service operation.
     *
     * @param {string} parameters.type Hostname type. Possible values include:
     * 'Proxy', 'Portal', 'Management', 'Scm'
     *
     * @param {string} parameters.certificate Base64 Encoded certificate.
     *
     * @param {string} parameters.certificatePassword Certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadCertificateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUploadCertificateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateInformation>>;

    /**
     * Upload Custom Domain SSL certificate for an API Management service. This
     * operation will be deprecated in future releases.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the Upload SSL certificate
     * for an API Management service operation.
     *
     * @param {string} parameters.type Hostname type. Possible values include:
     * 'Proxy', 'Portal', 'Management', 'Scm'
     *
     * @param {string} parameters.certificate Base64 Encoded certificate.
     *
     * @param {string} parameters.certificatePassword Certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadCertificate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUploadCertificateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateInformation>;
    uploadCertificate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUploadCertificateParameters, callback: ServiceCallback<models.CertificateInformation>): void;
    uploadCertificate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUploadCertificateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateInformation>): void;


    /**
     * Creates, updates, or deletes the custom hostnames for an API Management
     * service. The custom hostname can be applied to the Proxy and Portal
     * endpoint. This is a long running operation and could take several minutes to
     * complete. This operation will be deprecated in the next version update.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the UpdateHostname
     * operation.
     *
     * @param {array} [parameters.update] Hostnames to create or update.
     *
     * @param {array} [parameters.deleteProperty] Hostnames types to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateHostnameWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Creates, updates, or deletes the custom hostnames for an API Management
     * service. The custom hostname can be applied to the Proxy and Portal
     * endpoint. This is a long running operation and could take several minutes to
     * complete. This operation will be deprecated in the next version update.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the UpdateHostname
     * operation.
     *
     * @param {array} [parameters.update] Hostnames to create or update.
     *
     * @param {array} [parameters.deleteProperty] Hostnames types to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateHostname(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    updateHostname(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    updateHostname(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Restores a backup of an API Management service created using the
     * ApiManagementService_Backup operation on the current service. This is a long
     * running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the Restore API Management
     * service from backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Restores a backup of an API Management service created using the
     * ApiManagementService_Backup operation on the current service. This is a long
     * running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the Restore API Management
     * service from backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestore(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    beginRestore(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    beginRestore(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Creates a backup of the API Management service to the given Azure Storage
     * Account. This is long running operation and could take several minutes to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the
     * ApiManagementService_Backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginBackupWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Creates a backup of the API Management service to the given Azure Storage
     * Account. This is long running operation and could take several minutes to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the
     * ApiManagementService_Backup operation.
     *
     * @param {string} parameters.storageAccount Azure Cloud Storage account (used
     * to place/retrieve the backup) name.
     *
     * @param {string} parameters.accessKey Azure Cloud Storage account (used to
     * place/retrieve the backup) access key.
     *
     * @param {string} parameters.containerName Azure Cloud Storage blob container
     * name used to place/retrieve the backup.
     *
     * @param {string} parameters.backupName The name of the backup file to create.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginBackup(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    beginBackup(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    beginBackup(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceBackupRestoreParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Creates or updates an API Management service. This is long running operation
     * and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} parameters.publisherEmail Publisher email.
     *
     * @param {string} parameters.publisherName Publisher name.
     *
     * @param {object} parameters.sku SKU properties of the API Management service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Creates or updates an API Management service. This is long running operation
     * and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} parameters.publisherEmail Publisher email.
     *
     * @param {string} parameters.publisherName Publisher name.
     *
     * @param {object} parameters.sku SKU properties of the API Management service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Updates an existing API Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} [parameters.publisherEmail] Publisher email.
     *
     * @param {string} [parameters.publisherName] Publisher name.
     *
     * @param {object} [parameters.sku] SKU properties of the API Management
     * service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Updates an existing API Management service.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate API
     * Management service operation.
     *
     * @param {string} [parameters.notificationSenderEmail] Email address from
     * which the notification will be sent.
     *
     * @param {array} [parameters.hostnameConfigurations] Custom hostname
     * configuration of the API Management service.
     *
     * @param {object} [parameters.virtualNetworkConfiguration] Virtual network
     * configuration of the API Management service.
     *
     * @param {string} [parameters.virtualNetworkConfiguration.subnetResourceId]
     * The full resource ID of a subnet in a virtual network to deploy the API
     * Management service in.
     *
     * @param {array} [parameters.additionalLocations] Additional datacenter
     * locations of the API Management service.
     *
     * @param {object} [parameters.customProperties] Custom properties of the API
     * Management service. Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
     * will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
     * and 1.2). Setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
     * be used to disable just TLS 1.1 and setting
     * `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
     * be used to disable TLS 1.0 on an API Management service.
     *
     * @param {array} [parameters.certificates] List of Certificates that need to
     * be installed in the API Management service. Max supported certificates that
     * can be installed is 10.
     *
     * @param {string} [parameters.virtualNetworkType] The type of VPN in which API
     * Management service needs to be configured in. None (Default Value) means the
     * API Management service is not part of any Virtual Network, External means
     * the API Management deployment is set up inside a Virtual Network having an
     * Internet Facing Endpoint, and Internal means that API Management deployment
     * is setup inside a Virtual Network having an Intranet Facing Endpoint only.
     * Possible values include: 'None', 'External', 'Internal'
     *
     * @param {string} [parameters.publisherEmail] Publisher email.
     *
     * @param {string} [parameters.publisherName] Publisher name.
     *
     * @param {object} [parameters.sku] SKU properties of the API Management
     * service.
     *
     * @param {string} parameters.sku.name Name of the Sku. Possible values
     * include: 'Developer', 'Standard', 'Premium', 'Basic'
     *
     * @param {number} [parameters.sku.capacity] Capacity of the SKU (number of
     * deployed units of the SKU). The default value is 1.
     *
     * @param {object} [parameters.identity] Managed service identity of the Api
     * Management service.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    beginUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    beginUpdate(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network
     * to pick the updated network settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to the Apply
     * Network Configuration operation. If the parameters are empty, all the
     * regions in which the Api Management service is deployed will be updated
     * sequentially without incurring downtime in the region.
     *
     * @param {string} [options.parameters.location] Location of the Api Management
     * service to update for a multi-region service. For a service deployed in a
     * single region, this parameter is not required.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginApplyNetworkConfigurationUpdatesWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { parameters? : models.ApiManagementServiceApplyNetworkConfigurationParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network
     * to pick the updated network settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to the Apply
     * Network Configuration operation. If the parameters are empty, all the
     * regions in which the Api Management service is deployed will be updated
     * sequentially without incurring downtime in the region.
     *
     * @param {string} [options.parameters.location] Location of the Api Management
     * service to update for a multi-region service. For a service deployed in a
     * single region, this parameter is not required.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginApplyNetworkConfigurationUpdates(resourceGroupName: string, serviceName: string, options?: { parameters? : models.ApiManagementServiceApplyNetworkConfigurationParameters, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    beginApplyNetworkConfigurationUpdates(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    beginApplyNetworkConfigurationUpdates(resourceGroupName: string, serviceName: string, options: { parameters? : models.ApiManagementServiceApplyNetworkConfigurationParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * Creates, updates, or deletes the custom hostnames for an API Management
     * service. The custom hostname can be applied to the Proxy and Portal
     * endpoint. This is a long running operation and could take several minutes to
     * complete. This operation will be deprecated in the next version update.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the UpdateHostname
     * operation.
     *
     * @param {array} [parameters.update] Hostnames to create or update.
     *
     * @param {array} [parameters.deleteProperty] Hostnames types to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateHostnameWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceResource>>;

    /**
     * Creates, updates, or deletes the custom hostnames for an API Management
     * service. The custom hostname can be applied to the Proxy and Portal
     * endpoint. This is a long running operation and could take several minutes to
     * complete. This operation will be deprecated in the next version update.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to the UpdateHostname
     * operation.
     *
     * @param {array} [parameters.update] Hostnames to create or update.
     *
     * @param {array} [parameters.deleteProperty] Hostnames types to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateHostname(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceResource>;
    beginUpdateHostname(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, callback: ServiceCallback<models.ApiManagementServiceResource>): void;
    beginUpdateHostname(resourceGroupName: string, serviceName: string, parameters: models.ApiManagementServiceUpdateHostnameParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceResource>): void;


    /**
     * List all API Management services within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceListResult>>;

    /**
     * List all API Management services within a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ApiManagementServiceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceListResult>): void;


    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiManagementServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiManagementServiceListResult>>;

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiManagementServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiManagementServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiManagementServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiManagementServiceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApiManagementServiceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiManagementServiceListResult>): void;
}

/**
 * @class
 * Diagnostic
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Diagnostic {


    /**
     * Lists all diagnostics of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCollection>>;

    /**
     * Lists all diagnostics of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.DiagnosticCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCollection>): void;


    /**
     * Gets the entity state (Etag) version of the Diagnostic specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the Diagnostic specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, diagnosticId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, diagnosticId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the Diagnostic specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticContract>>;

    /**
     * Gets the details of the Diagnostic specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticContract>;
    get(resourceGroupName: string, serviceName: string, diagnosticId: string, callback: ServiceCallback<models.DiagnosticContract>): void;
    get(resourceGroupName: string, serviceName: string, diagnosticId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticContract>): void;


    /**
     * Creates a new Diagnostic or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticContract>>;

    /**
     * Creates a new Diagnostic or updates an existing one.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, callback: ServiceCallback<models.DiagnosticContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticContract>): void;


    /**
     * Updates the details of the Diagnostic specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Diagnostic Update parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the Diagnostic specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} parameters Diagnostic Update parameters.
     *
     * @param {boolean} parameters.enabled Indicates whether a diagnostic should
     * receive data or not.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: models.DiagnosticContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified Diagnostic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Diagnostic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all diagnostics of the API Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCollection>>;

    /**
     * Lists all diagnostics of the API Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCollection>): void;
}

/**
 * @class
 * DiagnosticLogger
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface DiagnosticLogger {


    /**
     * Lists all loggers associated with the specified Diagnostic of the API
     * Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | type        | eq                     |                                   |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerCollection>>;

    /**
     * Lists all loggers associated with the specified Diagnostic of the API
     * Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions               |
     * |-------------|------------------------|-----------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith |
     * | type        | eq                     |                                   |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerCollection>;
    listByService(resourceGroupName: string, serviceName: string, diagnosticId: string, callback: ServiceCallback<models.LoggerCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, diagnosticId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerCollection>): void;


    /**
     * Checks that logger entity specified by identifier is associated with the
     * diagnostics entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkEntityExistsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks that logger entity specified by identifier is associated with the
     * diagnostics entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkEntityExists(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, callback: ServiceCallback<boolean>): void;
    checkEntityExists(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Attaches a logger to a diagnostic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerContract>>;

    /**
     * Attaches a logger to a diagnostic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, callback: ServiceCallback<models.LoggerContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerContract>): void;


    /**
     * Deletes the specified Logger from Diagnostic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified Logger from Diagnostic.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} diagnosticId Diagnostic identifier. Must be unique in the
     * current API Management service instance.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all loggers associated with the specified Diagnostic of the API
     * Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerCollection>>;

    /**
     * Lists all loggers associated with the specified Diagnostic of the API
     * Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.LoggerCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerCollection>): void;
}

/**
 * @class
 * EmailTemplate
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface EmailTemplate {


    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmailTemplateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmailTemplateCollection>>;

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmailTemplateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmailTemplateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmailTemplateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EmailTemplateCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.EmailTemplateCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmailTemplateCollection>): void;


    /**
     * Gets the entity state (Etag) version of the email template specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, templateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the email template specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, templateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, templateName: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, templateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the email template specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmailTemplateContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, templateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmailTemplateContract>>;

    /**
     * Gets the details of the email template specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmailTemplateContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmailTemplateContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmailTemplateContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, templateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmailTemplateContract>;
    get(resourceGroupName: string, serviceName: string, templateName: string, callback: ServiceCallback<models.EmailTemplateContract>): void;
    get(resourceGroupName: string, serviceName: string, templateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmailTemplateContract>): void;


    /**
     * Updates an Email Template.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} parameters Email Template update parameters.
     *
     * @param {string} [parameters.subject] Subject of the Template.
     *
     * @param {string} [parameters.title] Title of the Template.
     *
     * @param {string} [parameters.description] Description of the Email Template.
     *
     * @param {string} [parameters.body] Email Template Body. This should be a
     * valid XDocument
     *
     * @param {array} [parameters.parameters] Email Template Parameter values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmailTemplateContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmailTemplateContract>>;

    /**
     * Updates an Email Template.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} parameters Email Template update parameters.
     *
     * @param {string} [parameters.subject] Subject of the Template.
     *
     * @param {string} [parameters.title] Title of the Template.
     *
     * @param {string} [parameters.description] Description of the Email Template.
     *
     * @param {string} [parameters.body] Email Template Body. This should be a
     * valid XDocument
     *
     * @param {array} [parameters.parameters] Email Template Parameter values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmailTemplateContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmailTemplateContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmailTemplateContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EmailTemplateContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, callback: ServiceCallback<models.EmailTemplateContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmailTemplateContract>): void;


    /**
     * Updates the specific Email Template.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.subject] Subject of the Template.
     *
     * @param {string} [parameters.title] Title of the Template.
     *
     * @param {string} [parameters.description] Description of the Email Template.
     *
     * @param {string} [parameters.body] Email Template Body. This should be a
     * valid XDocument
     *
     * @param {array} [parameters.parameters] Email Template Parameter values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the specific Email Template.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.subject] Subject of the Template.
     *
     * @param {string} [parameters.title] Title of the Template.
     *
     * @param {string} [parameters.description] Description of the Email Template.
     *
     * @param {string} [parameters.body] Email Template Body. This should be a
     * valid XDocument
     *
     * @param {array} [parameters.parameters] Email Template Parameter values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, templateName: string, parameters: models.EmailTemplateUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Reset the Email Template to default template provided by the API Management
     * service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, templateName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Reset the Email Template to default template provided by the API Management
     * service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} templateName Email Template Name Identifier. Possible values
     * include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper',
     * 'quotaLimitApproachingDeveloperNotificationMessage',
     * 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault',
     * 'inviteUserNotificationMessage', 'newCommentNotificationMessage',
     * 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage',
     * 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault',
     * 'passwordResetByAdminNotificationMessage',
     * 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, templateName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, templateName: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, templateName: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EmailTemplateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EmailTemplateCollection>>;

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EmailTemplateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EmailTemplateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EmailTemplateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EmailTemplateCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.EmailTemplateCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EmailTemplateCollection>): void;
}

/**
 * @class
 * Group
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Group {


    /**
     * Lists a collection of groups defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | type        | eq, ne                 | N/A
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupCollection>>;

    /**
     * Lists a collection of groups defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | type        | eq, ne                 | N/A
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.GroupCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupCollection>): void;


    /**
     * Gets the entity state (Etag) version of the group specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the group specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, groupId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the group specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupContract>>;

    /**
     * Gets the details of the group specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupContract>;
    get(resourceGroupName: string, serviceName: string, groupId: string, callback: ServiceCallback<models.GroupContract>): void;
    get(resourceGroupName: string, serviceName: string, groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupContract>): void;


    /**
     * Creates or Updates a group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.displayName Group name.
     *
     * @param {string} [parameters.description] Group description.
     *
     * @param {string} [parameters.type] Group type. Possible values include:
     * 'custom', 'system', 'external'
     *
     * @param {string} [parameters.externalId] Identifier of the external groups,
     * this property contains the id of the group from the external identity
     * provider, e.g. for Azure Active Directory
     * aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value
     * is null.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupCreateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupContract>>;

    /**
     * Creates or Updates a group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.displayName Group name.
     *
     * @param {string} [parameters.description] Group description.
     *
     * @param {string} [parameters.type] Group type. Possible values include:
     * 'custom', 'system', 'external'
     *
     * @param {string} [parameters.externalId] Identifier of the external groups,
     * this property contains the id of the group from the external identity
     * provider, e.g. for Azure Active Directory
     * aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value
     * is null.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupCreateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupCreateParameters, callback: ServiceCallback<models.GroupContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupCreateParameters, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupContract>): void;


    /**
     * Updates the details of the group specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.displayName] Group name.
     *
     * @param {string} [parameters.description] Group description.
     *
     * @param {string} [parameters.type] Group type. Possible values include:
     * 'custom', 'system', 'external'
     *
     * @param {string} [parameters.externalId] Identifier of the external groups,
     * this property contains the id of the group from the external identity
     * provider, e.g. for Azure Active Directory
     * aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value
     * is null.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the group specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.displayName] Group name.
     *
     * @param {string} [parameters.description] Group description.
     *
     * @param {string} [parameters.type] Group type. Possible values include:
     * 'custom', 'system', 'external'
     *
     * @param {string} [parameters.externalId] Identifier of the external groups,
     * this property contains the id of the group from the external identity
     * provider, e.g. for Azure Active Directory
     * aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value
     * is null.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, groupId: string, parameters: models.GroupUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes specific group of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific group of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, groupId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of groups defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupCollection>>;

    /**
     * Lists a collection of groups defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.GroupCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupCollection>): void;
}

/**
 * @class
 * GroupUser
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface GroupUser {


    /**
     * Lists a collection of the members of the group, specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field            | Supported operators
     * | Supported functions               |
     * |------------------|------------------------|-----------------------------------|
     * | id               | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | email            | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | state            | eq                     | N/A
     * |
     * | registrationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     * | note             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserCollection>>;

    /**
     * Lists a collection of the members of the group, specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field            | Supported operators
     * | Supported functions               |
     * |------------------|------------------------|-----------------------------------|
     * | id               | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | email            | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | state            | eq                     | N/A
     * |
     * | registrationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     * | note             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, groupId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserCollection>;
    list(resourceGroupName: string, serviceName: string, groupId: string, callback: ServiceCallback<models.UserCollection>): void;
    list(resourceGroupName: string, serviceName: string, groupId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserCollection>): void;


    /**
     * Checks that user entity specified by identifier is associated with the group
     * entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkEntityExistsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks that user entity specified by identifier is associated with the group
     * entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkEntityExists(resourceGroupName: string, serviceName: string, groupId: string, uid: string, callback: ServiceCallback<boolean>): void;
    checkEntityExists(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Adds a user to the specified group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserContract>>;

    /**
     * Adds a user to the specified group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserContract>;
    create(resourceGroupName: string, serviceName: string, groupId: string, uid: string, callback: ServiceCallback<models.UserContract>): void;
    create(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserContract>): void;


    /**
     * Remove existing user from existing group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Remove existing user from existing group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, groupId: string, uid: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, groupId: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of the members of the group, specified by its identifier.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserCollection>>;

    /**
     * Lists a collection of the members of the group, specified by its identifier.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.UserCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserCollection>): void;
}

/**
 * @class
 * IdentityProvider
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface IdentityProvider {


    /**
     * Lists a collection of Identity Provider configured in the specified service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentityProviderList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentityProviderList>>;

    /**
     * Lists a collection of Identity Provider configured in the specified service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentityProviderList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentityProviderList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentityProviderList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentityProviderList>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.IdentityProviderList>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentityProviderList>): void;


    /**
     * Gets the entity state (Etag) version of the identityProvider specified by
     * its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, identityProviderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the identityProvider specified by
     * its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the configuration details of the identity Provider configured in
     * specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentityProviderContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, identityProviderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentityProviderContract>>;

    /**
     * Gets the configuration details of the identity Provider configured in
     * specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentityProviderContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentityProviderContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentityProviderContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, identityProviderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentityProviderContract>;
    get(resourceGroupName: string, serviceName: string, identityProviderName: string, callback: ServiceCallback<models.IdentityProviderContract>): void;
    get(resourceGroupName: string, serviceName: string, identityProviderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentityProviderContract>): void;


    /**
     * Creates or Updates the IdentityProvider configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.identityProviderContractType] Identity Provider
     * Type identifier. Possible values include: 'facebook', 'google', 'microsoft',
     * 'twitter', 'aad', 'aadB2C'
     *
     * @param {array} [parameters.allowedTenants] List of Allowed Tenants when
     * configuring Azure Active Directory login.
     *
     * @param {string} [parameters.signupPolicyName] Signup Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.signinPolicyName] Signin Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.profileEditingPolicyName] Profile Editing Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.passwordResetPolicyName] Password Reset Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} parameters.clientId Client Id of the Application in the
     * external Identity Provider. It is App ID for Facebook login, Client ID for
     * Google login, App ID for Microsoft.
     *
     * @param {string} parameters.clientSecret Client secret of the Application in
     * external Identity Provider, used to authenticate login request. For example,
     * it is App Secret for Facebook login, API Key for Google login, Public Key
     * for Microsoft.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentityProviderContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentityProviderContract>>;

    /**
     * Creates or Updates the IdentityProvider configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.identityProviderContractType] Identity Provider
     * Type identifier. Possible values include: 'facebook', 'google', 'microsoft',
     * 'twitter', 'aad', 'aadB2C'
     *
     * @param {array} [parameters.allowedTenants] List of Allowed Tenants when
     * configuring Azure Active Directory login.
     *
     * @param {string} [parameters.signupPolicyName] Signup Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.signinPolicyName] Signin Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.profileEditingPolicyName] Profile Editing Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.passwordResetPolicyName] Password Reset Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} parameters.clientId Client Id of the Application in the
     * external Identity Provider. It is App ID for Facebook login, Client ID for
     * Google login, App ID for Microsoft.
     *
     * @param {string} parameters.clientSecret Client secret of the Application in
     * external Identity Provider, used to authenticate login request. For example,
     * it is App Secret for Facebook login, API Key for Google login, Public Key
     * for Microsoft.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentityProviderContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentityProviderContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentityProviderContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentityProviderContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderContract, callback: ServiceCallback<models.IdentityProviderContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentityProviderContract>): void;


    /**
     * Updates an existing IdentityProvider configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.type] Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {array} [parameters.allowedTenants] List of Allowed Tenants when
     * configuring Azure Active Directory login.
     *
     * @param {string} [parameters.signupPolicyName] Signup Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.signinPolicyName] Signin Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.profileEditingPolicyName] Profile Editing Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.passwordResetPolicyName] Password Reset Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.clientId] Client Id of the Application in the
     * external Identity Provider. It is App ID for Facebook login, Client ID for
     * Google login, App ID for Microsoft.
     *
     * @param {string} [parameters.clientSecret] Client secret of the Application
     * in external Identity Provider, used to authenticate login request. For
     * example, it is App Secret for Facebook login, API Key for Google login,
     * Public Key for Microsoft.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates an existing IdentityProvider configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.type] Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {array} [parameters.allowedTenants] List of Allowed Tenants when
     * configuring Azure Active Directory login.
     *
     * @param {string} [parameters.signupPolicyName] Signup Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.signinPolicyName] Signin Policy Name. Only
     * applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.profileEditingPolicyName] Profile Editing Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.passwordResetPolicyName] Password Reset Policy
     * Name. Only applies to AAD B2C Identity Provider.
     *
     * @param {string} [parameters.clientId] Client Id of the Application in the
     * external Identity Provider. It is App ID for Facebook login, Client ID for
     * Google login, App ID for Microsoft.
     *
     * @param {string} [parameters.clientSecret] Client secret of the Application
     * in external Identity Provider, used to authenticate login request. For
     * example, it is App Secret for Facebook login, API Key for Google login,
     * Public Key for Microsoft.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, identityProviderName: string, parameters: models.IdentityProviderUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified identity provider configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, identityProviderName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified identity provider configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} identityProviderName Identity Provider Type identifier.
     * Possible values include: 'facebook', 'google', 'microsoft', 'twitter',
     * 'aad', 'aadB2C'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, identityProviderName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, identityProviderName: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, identityProviderName: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of Identity Provider configured in the specified service
     * instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentityProviderList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentityProviderList>>;

    /**
     * Lists a collection of Identity Provider configured in the specified service
     * instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentityProviderList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentityProviderList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentityProviderList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentityProviderList>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.IdentityProviderList>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentityProviderList>): void;
}

/**
 * @class
 * Logger
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Logger {


    /**
     * Lists a collection of loggers in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | type  | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerCollection>>;

    /**
     * Lists a collection of loggers in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | type  | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.LoggerCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerCollection>): void;


    /**
     * Gets the entity state (Etag) version of the logger specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the logger specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, loggerid: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the logger specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerContract>>;

    /**
     * Gets the details of the logger specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, loggerid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerContract>;
    get(resourceGroupName: string, serviceName: string, loggerid: string, callback: ServiceCallback<models.LoggerContract>): void;
    get(resourceGroupName: string, serviceName: string, loggerid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerContract>): void;


    /**
     * Creates or Updates a logger.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.loggerType Logger type. Possible values include:
     * 'azureEventHub', 'applicationInsights'
     *
     * @param {string} [parameters.description] Logger description.
     *
     * @param {object} parameters.credentials The name and SendRule connection
     * string of the event hub for azureEventHub logger.
     * Instrumentation key for applicationInsights logger.
     *
     * @param {boolean} [parameters.isBuffered] Whether records are buffered in the
     * logger before publishing. Default is assumed to be true.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerContract>>;

    /**
     * Creates or Updates a logger.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.loggerType Logger type. Possible values include:
     * 'azureEventHub', 'applicationInsights'
     *
     * @param {string} [parameters.description] Logger description.
     *
     * @param {object} parameters.credentials The name and SendRule connection
     * string of the event hub for azureEventHub logger.
     * Instrumentation key for applicationInsights logger.
     *
     * @param {boolean} [parameters.isBuffered] Whether records are buffered in the
     * logger before publishing. Default is assumed to be true.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerContract, callback: ServiceCallback<models.LoggerContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerContract>): void;


    /**
     * Updates an existing logger.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.loggerType] Logger type. Possible values
     * include: 'azureEventHub', 'applicationInsights'
     *
     * @param {string} [parameters.description] Logger description.
     *
     * @param {object} [parameters.credentials] Logger credentials.
     *
     * @param {boolean} [parameters.isBuffered] Whether records are buffered in the
     * logger before publishing. Default is assumed to be true.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates an existing logger.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.loggerType] Logger type. Possible values
     * include: 'azureEventHub', 'applicationInsights'
     *
     * @param {string} [parameters.description] Logger description.
     *
     * @param {object} [parameters.credentials] Logger credentials.
     *
     * @param {boolean} [parameters.isBuffered] Whether records are buffered in the
     * logger before publishing. Default is assumed to be true.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerUpdateContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, loggerid: string, parameters: models.LoggerUpdateContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified logger.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, loggerid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified logger.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} loggerid Logger identifier. Must be unique in the API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, loggerid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, loggerid: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, loggerid: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of loggers in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LoggerCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LoggerCollection>>;

    /**
     * Lists a collection of loggers in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LoggerCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LoggerCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LoggerCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LoggerCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.LoggerCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LoggerCollection>): void;
}

/**
 * @class
 * Notification
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Notification {


    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationCollection>>;

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.NotificationCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationCollection>): void;


    /**
     * Gets the details of the Notification specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationContract>>;

    /**
     * Gets the details of the Notification specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, notificationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationContract>;
    get(resourceGroupName: string, serviceName: string, notificationName: string, callback: ServiceCallback<models.NotificationContract>): void;
    get(resourceGroupName: string, serviceName: string, notificationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationContract>): void;


    /**
     * Updates an Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationContract>>;

    /**
     * Updates an Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, callback: ServiceCallback<models.NotificationContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationContract>): void;


    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationCollection>>;

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.NotificationCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationCollection>): void;
}

/**
 * @class
 * NotificationRecipientUser
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface NotificationRecipientUser {


    /**
     * Gets the list of the Notification Recipient User subscribed to the
     * notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecipientUserCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNotificationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecipientUserCollection>>;

    /**
     * Gets the list of the Notification Recipient User subscribed to the
     * notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecipientUserCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecipientUserCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecipientUserCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecipientUserCollection>;
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: string, callback: ServiceCallback<models.RecipientUserCollection>): void;
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecipientUserCollection>): void;


    /**
     * Determine if the Notification Recipient User is subscribed to the
     * notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkEntityExistsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Determine if the Notification Recipient User is subscribed to the
     * notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, callback: ServiceCallback<boolean>): void;
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Adds the API Management User to the list of Recipients for the Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecipientUserContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecipientUserContract>>;

    /**
     * Adds the API Management User to the list of Recipients for the Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecipientUserContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecipientUserContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecipientUserContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecipientUserContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, callback: ServiceCallback<models.RecipientUserContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecipientUserContract>): void;


    /**
     * Removes the API Management user from the list of Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the API Management user from the list of Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * NotificationRecipientEmail
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface NotificationRecipientEmail {


    /**
     * Gets the list of the Notification Recipient Emails subscribed to a
     * notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecipientEmailCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNotificationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecipientEmailCollection>>;

    /**
     * Gets the list of the Notification Recipient Emails subscribed to a
     * notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecipientEmailCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecipientEmailCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecipientEmailCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecipientEmailCollection>;
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: string, callback: ServiceCallback<models.RecipientEmailCollection>): void;
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecipientEmailCollection>): void;


    /**
     * Determine if Notification Recipient Email subscribed to the notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} email Email identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkEntityExistsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Determine if Notification Recipient Email subscribed to the notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} email Email identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: string, email: string, callback: ServiceCallback<boolean>): void;
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Adds the Email address to the list of Recipients for the Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} email Email identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecipientEmailContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecipientEmailContract>>;

    /**
     * Adds the Email address to the list of Recipients for the Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} email Email identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecipientEmailContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecipientEmailContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecipientEmailContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecipientEmailContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, email: string, callback: ServiceCallback<models.RecipientEmailContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecipientEmailContract>): void;


    /**
     * Removes the email from the list of Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} email Email identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the email from the list of Notification.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} notificationName Notification Name Identifier. Possible
     * values include: 'RequestPublisherNotificationMessage',
     * 'PurchasePublisherNotificationMessage', 'NewApplicationNotificationMessage',
     * 'BCC', 'NewIssuePublisherNotificationMessage', 'AccountClosedPublisher',
     * 'QuotaLimitApproachingPublisherNotificationMessage'
     *
     * @param {string} email Email identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: string, email: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: string, email: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * NetworkStatus
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface NetworkStatus {


    /**
     * Gets the Connectivity Status to the external resources on which the Api
     * Management service depends from inside the Cloud Service. This also returns
     * the DNS Servers as visible to the CloudService.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkStatusContractByLocation[]>>;

    /**
     * Gets the Connectivity Status to the external resources on which the Api
     * Management service depends from inside the Cloud Service. This also returns
     * the DNS Servers as visible to the CloudService.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkStatusContractByLocation[]>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.NetworkStatusContractByLocation[]>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkStatusContractByLocation[]>): void;


    /**
     * Gets the Connectivity Status to the external resources on which the Api
     * Management service depends from inside the Cloud Service. This also returns
     * the DNS Servers as visible to the CloudService.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} locationName Location in which the API Management service is
     * deployed. This is one of the Azure Regions like West US, East US, South
     * Central US.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkStatusContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkStatusContract>>;

    /**
     * Gets the Connectivity Status to the external resources on which the Api
     * Management service depends from inside the Cloud Service. This also returns
     * the DNS Servers as visible to the CloudService.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} locationName Location in which the API Management service is
     * deployed. This is one of the Azure Regions like West US, East US, South
     * Central US.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkStatusContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkStatusContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkStatusContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(resourceGroupName: string, serviceName: string, locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkStatusContract>;
    listByLocation(resourceGroupName: string, serviceName: string, locationName: string, callback: ServiceCallback<models.NetworkStatusContract>): void;
    listByLocation(resourceGroupName: string, serviceName: string, locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkStatusContract>): void;
}

/**
 * @class
 * OpenIdConnectProvider
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface OpenIdConnectProvider {


    /**
     * Lists all OpenID Connect Providers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenIdConnectProviderCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenIdConnectProviderCollection>>;

    /**
     * Lists all OpenID Connect Providers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                         |
     * |-------|------------------------|---------------------------------------------|
     * | id    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenIdConnectProviderCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenIdConnectProviderCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenIdConnectProviderCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenIdConnectProviderCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.OpenIdConnectProviderCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenIdConnectProviderCollection>): void;


    /**
     * Gets the entity state (Etag) version of the openIdConnectProvider specified
     * by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, opid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the openIdConnectProvider specified
     * by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, opid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, opid: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, opid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets specific OpenID Connect Provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenidConnectProviderContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, opid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenidConnectProviderContract>>;

    /**
     * Gets specific OpenID Connect Provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenidConnectProviderContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenidConnectProviderContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenidConnectProviderContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, opid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenidConnectProviderContract>;
    get(resourceGroupName: string, serviceName: string, opid: string, callback: ServiceCallback<models.OpenidConnectProviderContract>): void;
    get(resourceGroupName: string, serviceName: string, opid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenidConnectProviderContract>): void;


    /**
     * Creates or updates the OpenID Connect Provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.displayName User-friendly OpenID Connect Provider
     * name.
     *
     * @param {string} [parameters.description] User-friendly description of OpenID
     * Connect Provider.
     *
     * @param {string} parameters.metadataEndpoint Metadata endpoint URI.
     *
     * @param {string} parameters.clientId Client ID of developer console which is
     * the client application.
     *
     * @param {string} [parameters.clientSecret] Client Secret of developer console
     * which is the client application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenidConnectProviderContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenidConnectProviderContract>>;

    /**
     * Creates or updates the OpenID Connect Provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.displayName User-friendly OpenID Connect Provider
     * name.
     *
     * @param {string} [parameters.description] User-friendly description of OpenID
     * Connect Provider.
     *
     * @param {string} parameters.metadataEndpoint Metadata endpoint URI.
     *
     * @param {string} parameters.clientId Client ID of developer console which is
     * the client application.
     *
     * @param {string} [parameters.clientSecret] Client Secret of developer console
     * which is the client application.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenidConnectProviderContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenidConnectProviderContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenidConnectProviderContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenidConnectProviderContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderContract, callback: ServiceCallback<models.OpenidConnectProviderContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenidConnectProviderContract>): void;


    /**
     * Updates the specific OpenID Connect Provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.displayName] User-friendly OpenID Connect
     * Provider name.
     *
     * @param {string} [parameters.description] User-friendly description of OpenID
     * Connect Provider.
     *
     * @param {string} [parameters.metadataEndpoint] Metadata endpoint URI.
     *
     * @param {string} [parameters.clientId] Client ID of developer console which
     * is the client application.
     *
     * @param {string} [parameters.clientSecret] Client Secret of developer console
     * which is the client application.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the specific OpenID Connect Provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.displayName] User-friendly OpenID Connect
     * Provider name.
     *
     * @param {string} [parameters.description] User-friendly description of OpenID
     * Connect Provider.
     *
     * @param {string} [parameters.metadataEndpoint] Metadata endpoint URI.
     *
     * @param {string} [parameters.clientId] Client ID of developer console which
     * is the client application.
     *
     * @param {string} [parameters.clientSecret] Client Secret of developer console
     * which is the client application.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderUpdateContract, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderUpdateContract, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, opid: string, parameters: models.OpenidConnectProviderUpdateContract, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes specific OpenID Connect Provider of the API Management service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, opid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific OpenID Connect Provider of the API Management service
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} opid Identifier of the OpenID Connect Provider.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, opid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, opid: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, opid: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all OpenID Connect Providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OpenIdConnectProviderCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OpenIdConnectProviderCollection>>;

    /**
     * Lists all OpenID Connect Providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OpenIdConnectProviderCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OpenIdConnectProviderCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OpenIdConnectProviderCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OpenIdConnectProviderCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.OpenIdConnectProviderCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OpenIdConnectProviderCollection>): void;
}

/**
 * @class
 * SignInSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface SignInSettings {


    /**
     * Gets the entity state (Etag) version of the SignInSettings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the SignInSettings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get Sign-In settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortalSigninSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortalSigninSettings>>;

    /**
     * Get Sign-In settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortalSigninSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortalSigninSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortalSigninSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortalSigninSettings>;
    get(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.PortalSigninSettings>): void;
    get(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortalSigninSettings>): void;


    /**
     * Update Sign-In settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Update Sign-In settings.
     *
     * @param {boolean} [parameters.enabled] Redirect Anonymous users to the
     * Sign-In page.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update Sign-In settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Update Sign-In settings.
     *
     * @param {boolean} [parameters.enabled] Redirect Anonymous users to the
     * Sign-In page.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or Update Sign-In settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {boolean} [parameters.enabled] Redirect Anonymous users to the
     * Sign-In page.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortalSigninSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortalSigninSettings>>;

    /**
     * Create or Update Sign-In settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {boolean} [parameters.enabled] Redirect Anonymous users to the
     * Sign-In page.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortalSigninSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortalSigninSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortalSigninSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortalSigninSettings>;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, callback: ServiceCallback<models.PortalSigninSettings>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalSigninSettings, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortalSigninSettings>): void;
}

/**
 * @class
 * SignUpSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface SignUpSettings {


    /**
     * Gets the entity state (Etag) version of the SignUpSettings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the SignUpSettings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get Sign-Up settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortalSignupSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortalSignupSettings>>;

    /**
     * Get Sign-Up settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortalSignupSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortalSignupSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortalSignupSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortalSignupSettings>;
    get(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.PortalSignupSettings>): void;
    get(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortalSignupSettings>): void;


    /**
     * Update Sign-Up settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Update Sign-Up settings.
     *
     * @param {boolean} [parameters.enabled] Allow users to sign up on a developer
     * portal.
     *
     * @param {object} [parameters.termsOfService] Terms of service contract
     * properties.
     *
     * @param {string} [parameters.termsOfService.text] A terms of service text.
     *
     * @param {boolean} [parameters.termsOfService.enabled] Display terms of
     * service during a sign-up process.
     *
     * @param {boolean} [parameters.termsOfService.consentRequired] Ask user for
     * consent to the terms of service.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update Sign-Up settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Update Sign-Up settings.
     *
     * @param {boolean} [parameters.enabled] Allow users to sign up on a developer
     * portal.
     *
     * @param {object} [parameters.termsOfService] Terms of service contract
     * properties.
     *
     * @param {string} [parameters.termsOfService.text] A terms of service text.
     *
     * @param {boolean} [parameters.termsOfService.enabled] Display terms of
     * service during a sign-up process.
     *
     * @param {boolean} [parameters.termsOfService.consentRequired] Ask user for
     * consent to the terms of service.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or Update Sign-Up settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {boolean} [parameters.enabled] Allow users to sign up on a developer
     * portal.
     *
     * @param {object} [parameters.termsOfService] Terms of service contract
     * properties.
     *
     * @param {string} [parameters.termsOfService.text] A terms of service text.
     *
     * @param {boolean} [parameters.termsOfService.enabled] Display terms of
     * service during a sign-up process.
     *
     * @param {boolean} [parameters.termsOfService.consentRequired] Ask user for
     * consent to the terms of service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortalSignupSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortalSignupSettings>>;

    /**
     * Create or Update Sign-Up settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {boolean} [parameters.enabled] Allow users to sign up on a developer
     * portal.
     *
     * @param {object} [parameters.termsOfService] Terms of service contract
     * properties.
     *
     * @param {string} [parameters.termsOfService.text] A terms of service text.
     *
     * @param {boolean} [parameters.termsOfService.enabled] Display terms of
     * service during a sign-up process.
     *
     * @param {boolean} [parameters.termsOfService.consentRequired] Ask user for
     * consent to the terms of service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortalSignupSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortalSignupSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortalSignupSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortalSignupSettings>;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, callback: ServiceCallback<models.PortalSignupSettings>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalSignupSettings, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortalSignupSettings>): void;
}

/**
 * @class
 * DelegationSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface DelegationSettings {


    /**
     * Gets the entity state (Etag) version of the DelegationSettings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the DelegationSettings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get Delegation settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortalDelegationSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortalDelegationSettings>>;

    /**
     * Get Delegation settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortalDelegationSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortalDelegationSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortalDelegationSettings} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortalDelegationSettings>;
    get(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.PortalDelegationSettings>): void;
    get(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortalDelegationSettings>): void;


    /**
     * Update Delegation settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Update Delegation settings.
     *
     * @param {string} [parameters.url] A delegation Url.
     *
     * @param {string} [parameters.validationKey] A base64-encoded validation key
     * to validate, that a request is coming from Azure API Management.
     *
     * @param {object} [parameters.subscriptions] Subscriptions delegation
     * settings.
     *
     * @param {boolean} [parameters.subscriptions.enabled] Enable or disable
     * delegation for subscriptions.
     *
     * @param {object} [parameters.userRegistration] User registration delegation
     * settings.
     *
     * @param {boolean} [parameters.userRegistration.enabled] Enable or disable
     * delegation for user registration.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update Delegation settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Update Delegation settings.
     *
     * @param {string} [parameters.url] A delegation Url.
     *
     * @param {string} [parameters.validationKey] A base64-encoded validation key
     * to validate, that a request is coming from Azure API Management.
     *
     * @param {object} [parameters.subscriptions] Subscriptions delegation
     * settings.
     *
     * @param {boolean} [parameters.subscriptions.enabled] Enable or disable
     * delegation for subscriptions.
     *
     * @param {object} [parameters.userRegistration] User registration delegation
     * settings.
     *
     * @param {boolean} [parameters.userRegistration.enabled] Enable or disable
     * delegation for user registration.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or Update Delegation settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.url] A delegation Url.
     *
     * @param {string} [parameters.validationKey] A base64-encoded validation key
     * to validate, that a request is coming from Azure API Management.
     *
     * @param {object} [parameters.subscriptions] Subscriptions delegation
     * settings.
     *
     * @param {boolean} [parameters.subscriptions.enabled] Enable or disable
     * delegation for subscriptions.
     *
     * @param {object} [parameters.userRegistration] User registration delegation
     * settings.
     *
     * @param {boolean} [parameters.userRegistration.enabled] Enable or disable
     * delegation for user registration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PortalDelegationSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PortalDelegationSettings>>;

    /**
     * Create or Update Delegation settings.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.url] A delegation Url.
     *
     * @param {string} [parameters.validationKey] A base64-encoded validation key
     * to validate, that a request is coming from Azure API Management.
     *
     * @param {object} [parameters.subscriptions] Subscriptions delegation
     * settings.
     *
     * @param {boolean} [parameters.subscriptions.enabled] Enable or disable
     * delegation for subscriptions.
     *
     * @param {object} [parameters.userRegistration] User registration delegation
     * settings.
     *
     * @param {boolean} [parameters.userRegistration.enabled] Enable or disable
     * delegation for user registration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PortalDelegationSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PortalDelegationSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PortalDelegationSettings} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PortalDelegationSettings>;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, callback: ServiceCallback<models.PortalDelegationSettings>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, parameters: models.PortalDelegationSettings, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PortalDelegationSettings>): void;
}

/**
 * @class
 * Product
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Product {


    /**
     * Lists a collection of products in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state       | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {boolean} [options.expandGroups] When set to true, the response
     * contains an array of groups that have visibility to the product. The default
     * is false.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, expandGroups? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductCollection>>;

    /**
     * Lists a collection of products in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state       | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {boolean} [options.expandGroups] When set to true, the response
     * contains an array of groups that have visibility to the product. The default
     * is false.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, expandGroups? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ProductCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, expandGroups? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductCollection>): void;


    /**
     * Gets the entity state (Etag) version of the product specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the product specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the product specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductContract>>;

    /**
     * Gets the details of the product specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductContract>;
    get(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<models.ProductContract>): void;
    get(resourceGroupName: string, serviceName: string, productId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductContract>): void;


    /**
     * Creates or Updates a product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Product description. May include
     * HTML formatting tags.
     *
     * @param {string} [parameters.terms] Product terms of use. Developers trying
     * to subscribe to the product will be presented and required to accept these
     * terms before they can complete the subscription process.
     *
     * @param {boolean} [parameters.subscriptionRequired] Whether a product
     * subscription is required for accessing APIs included in this product. If
     * true, the product is referred to as "protected" and a valid subscription key
     * is required for a request to an API included in the product to succeed. If
     * false, the product is referred to as "open" and requests to an API included
     * in the product can be made without a subscription key. If property is
     * omitted when creating a new product it's value is assumed to be true.
     *
     * @param {boolean} [parameters.approvalRequired] whether subscription approval
     * is required. If false, new subscriptions will be approved automatically
     * enabling developers to call the product’s APIs immediately after
     * subscribing. If true, administrators must manually approve the subscription
     * before the developer can any of the product’s APIs. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {number} [parameters.subscriptionsLimit] Whether the number of
     * subscriptions a user can have to this product at the same time. Set to null
     * or omit to allow unlimited per user subscriptions. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {string} [parameters.state] whether product is published or not.
     * Published products are discoverable by users of developer portal. Non
     * published products are visible only to administrators. Default state of
     * Product is notPublished. Possible values include: 'notPublished',
     * 'published'
     *
     * @param {string} parameters.displayName Product name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductContract>>;

    /**
     * Creates or Updates a product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Product description. May include
     * HTML formatting tags.
     *
     * @param {string} [parameters.terms] Product terms of use. Developers trying
     * to subscribe to the product will be presented and required to accept these
     * terms before they can complete the subscription process.
     *
     * @param {boolean} [parameters.subscriptionRequired] Whether a product
     * subscription is required for accessing APIs included in this product. If
     * true, the product is referred to as "protected" and a valid subscription key
     * is required for a request to an API included in the product to succeed. If
     * false, the product is referred to as "open" and requests to an API included
     * in the product can be made without a subscription key. If property is
     * omitted when creating a new product it's value is assumed to be true.
     *
     * @param {boolean} [parameters.approvalRequired] whether subscription approval
     * is required. If false, new subscriptions will be approved automatically
     * enabling developers to call the product’s APIs immediately after
     * subscribing. If true, administrators must manually approve the subscription
     * before the developer can any of the product’s APIs. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {number} [parameters.subscriptionsLimit] Whether the number of
     * subscriptions a user can have to this product at the same time. Set to null
     * or omit to allow unlimited per user subscriptions. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {string} [parameters.state] whether product is published or not.
     * Published products are discoverable by users of developer portal. Non
     * published products are visible only to administrators. Default state of
     * Product is notPublished. Possible values include: 'notPublished',
     * 'published'
     *
     * @param {string} parameters.displayName Product name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductContract, callback: ServiceCallback<models.ProductContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductContract>): void;


    /**
     * Update product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.description] Product description. May include
     * HTML formatting tags.
     *
     * @param {string} [parameters.terms] Product terms of use. Developers trying
     * to subscribe to the product will be presented and required to accept these
     * terms before they can complete the subscription process.
     *
     * @param {boolean} [parameters.subscriptionRequired] Whether a product
     * subscription is required for accessing APIs included in this product. If
     * true, the product is referred to as "protected" and a valid subscription key
     * is required for a request to an API included in the product to succeed. If
     * false, the product is referred to as "open" and requests to an API included
     * in the product can be made without a subscription key. If property is
     * omitted when creating a new product it's value is assumed to be true.
     *
     * @param {boolean} [parameters.approvalRequired] whether subscription approval
     * is required. If false, new subscriptions will be approved automatically
     * enabling developers to call the product’s APIs immediately after
     * subscribing. If true, administrators must manually approve the subscription
     * before the developer can any of the product’s APIs. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {number} [parameters.subscriptionsLimit] Whether the number of
     * subscriptions a user can have to this product at the same time. Set to null
     * or omit to allow unlimited per user subscriptions. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {string} [parameters.state] whether product is published or not.
     * Published products are discoverable by users of developer portal. Non
     * published products are visible only to administrators. Default state of
     * Product is notPublished. Possible values include: 'notPublished',
     * 'published'
     *
     * @param {string} [parameters.displayName] Product name.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.description] Product description. May include
     * HTML formatting tags.
     *
     * @param {string} [parameters.terms] Product terms of use. Developers trying
     * to subscribe to the product will be presented and required to accept these
     * terms before they can complete the subscription process.
     *
     * @param {boolean} [parameters.subscriptionRequired] Whether a product
     * subscription is required for accessing APIs included in this product. If
     * true, the product is referred to as "protected" and a valid subscription key
     * is required for a request to an API included in the product to succeed. If
     * false, the product is referred to as "open" and requests to an API included
     * in the product can be made without a subscription key. If property is
     * omitted when creating a new product it's value is assumed to be true.
     *
     * @param {boolean} [parameters.approvalRequired] whether subscription approval
     * is required. If false, new subscriptions will be approved automatically
     * enabling developers to call the product’s APIs immediately after
     * subscribing. If true, administrators must manually approve the subscription
     * before the developer can any of the product’s APIs. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {number} [parameters.subscriptionsLimit] Whether the number of
     * subscriptions a user can have to this product at the same time. Set to null
     * or omit to allow unlimited per user subscriptions. Can be present only if
     * subscriptionRequired property is present and has a value of false.
     *
     * @param {string} [parameters.state] whether product is published or not.
     * Published products are discoverable by users of developer portal. Non
     * published products are visible only to administrators. Default state of
     * Product is notPublished. Possible values include: 'notPublished',
     * 'published'
     *
     * @param {string} [parameters.displayName] Product name.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, productId: string, parameters: models.ProductUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteSubscriptions] Delete existing subscriptions
     * associated with the product or not.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options?: { deleteSubscriptions? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteSubscriptions] Delete existing subscriptions
     * associated with the product or not.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options?: { deleteSubscriptions? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options: { deleteSubscriptions? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of products in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProductCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProductCollection>>;

    /**
     * Lists a collection of products in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProductCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProductCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProductCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProductCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.ProductCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProductCollection>): void;
}

/**
 * @class
 * ProductApi
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ProductApi {


    /**
     * Lists a collection of the APIs associated with a product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiCollection>>;

    /**
     * Lists a collection of the APIs associated with a product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiCollection>;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<models.ApiCollection>): void;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiCollection>): void;


    /**
     * Checks that API entity specified by identifier is associated with the
     * Product entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkEntityExistsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks that API entity specified by identifier is associated with the
     * Product entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, apiId: string, callback: ServiceCallback<boolean>): void;
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Adds an API to the specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiContract>>;

    /**
     * Adds an API to the specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, apiId: string, callback: ServiceCallback<models.ApiContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiContract>): void;


    /**
     * Deletes the specified API from the specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified API from the specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, apiId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, apiId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of the APIs associated with a product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiCollection>>;

    /**
     * Lists a collection of the APIs associated with a product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProductNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiCollection>;
    listByProductNext(nextPageLink: string, callback: ServiceCallback<models.ApiCollection>): void;
    listByProductNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiCollection>): void;
}

/**
 * @class
 * ProductGroup
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ProductGroup {


    /**
     * Lists the collection of developer groups associated with the specified
     * product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | type        | eq, ne                 | N/A
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupCollection>>;

    /**
     * Lists the collection of developer groups associated with the specified
     * product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | type        | eq, ne                 | N/A
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupCollection>;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<models.GroupCollection>): void;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupCollection>): void;


    /**
     * Checks that Group entity specified by identifier is associated with the
     * Product entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkEntityExistsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks that Group entity specified by identifier is associated with the
     * Product entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, groupId: string, callback: ServiceCallback<boolean>): void;
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Adds the association between the specified developer group with the
     * specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupContract>>;

    /**
     * Adds the association between the specified developer group with the
     * specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, groupId: string, callback: ServiceCallback<models.GroupContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupContract>): void;


    /**
     * Deletes the association between the specified group and product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the association between the specified group and product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} groupId Group identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, groupId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the collection of developer groups associated with the specified
     * product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupCollection>>;

    /**
     * Lists the collection of developer groups associated with the specified
     * product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProductNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupCollection>;
    listByProductNext(nextPageLink: string, callback: ServiceCallback<models.GroupCollection>): void;
    listByProductNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupCollection>): void;
}

/**
 * @class
 * ProductSubscriptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ProductSubscriptions {


    /**
     * Lists the collection of subscriptions to the specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field        | Supported operators    |
     * Supported functions                         |
     * |--------------|------------------------|---------------------------------------------|
     * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state        | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionCollection>>;

    /**
     * Lists the collection of subscriptions to the specified product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field        | Supported operators    |
     * Supported functions                         |
     * |--------------|------------------------|---------------------------------------------|
     * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state        | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionCollection>;
    list(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<models.SubscriptionCollection>): void;
    list(resourceGroupName: string, serviceName: string, productId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionCollection>): void;


    /**
     * Lists the collection of subscriptions to the specified product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionCollection>>;

    /**
     * Lists the collection of subscriptions to the specified product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SubscriptionCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionCollection>): void;
}

/**
 * @class
 * ProductPolicy
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ProductPolicy {


    /**
     * Get the policy configuration at the Product level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyCollection>>;

    /**
     * Get the policy configuration at the Product level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyCollection>;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<models.PolicyCollection>): void;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyCollection>): void;


    /**
     * Get the ETag of the policy configuration at the Product level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Get the ETag of the policy configuration at the Product level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the policy configuration at the Product level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Get the policy configuration at the Product level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, productId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    get(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<models.PolicyContract>): void;
    get(resourceGroupName: string, serviceName: string, productId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Creates or updates policy configuration for the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PolicyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, parameters: models.PolicyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PolicyContract>>;

    /**
     * Creates or updates policy configuration for the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} parameters The policy contents to apply.
     *
     * @param {string} parameters.policyContent Json escaped Xml Encoded contents
     * of the Policy.
     *
     * @param {string} [parameters.contentFormat] Format of the policyContent.
     * Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PolicyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PolicyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PolicyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: models.PolicyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PolicyContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: models.PolicyContract, callback: ServiceCallback<models.PolicyContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: models.PolicyContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PolicyContract>): void;


    /**
     * Deletes the policy configuration at the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the policy configuration at the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Property
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Property {


    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                                   |
     * |-------|------------------------|-------------------------------------------------------|
     * | tags  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith, any, all |
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith           |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PropertyCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PropertyCollection>>;

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field | Supported operators    |
     * Supported functions                                   |
     * |-------|------------------------|-------------------------------------------------------|
     * | tags  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith, any, all |
     * | name  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith           |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PropertyCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PropertyCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PropertyCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.PropertyCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.PropertyCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PropertyCollection>): void;


    /**
     * Gets the entity state (Etag) version of the property specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, propId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the property specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, propId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, propId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, propId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the property specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PropertyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, propId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PropertyContract>>;

    /**
     * Gets the details of the property specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PropertyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PropertyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PropertyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, propId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PropertyContract>;
    get(resourceGroupName: string, serviceName: string, propId: string, callback: ServiceCallback<models.PropertyContract>): void;
    get(resourceGroupName: string, serviceName: string, propId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PropertyContract>): void;


    /**
     * Creates or updates a property.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {array} [parameters.tags] Optional tags that when provided can be
     * used to filter the property list.
     *
     * @param {boolean} [parameters.secret] Determines whether the value is a
     * secret and should be encrypted or not. Default value is false.
     *
     * @param {string} parameters.displayName Unique name of Property. It may
     * contain only letters, digits, period, dash, and underscore characters.
     *
     * @param {string} parameters.value Value of the property. Can contain policy
     * expressions. It may not be empty or consist only of whitespace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PropertyContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PropertyContract>>;

    /**
     * Creates or updates a property.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {array} [parameters.tags] Optional tags that when provided can be
     * used to filter the property list.
     *
     * @param {boolean} [parameters.secret] Determines whether the value is a
     * secret and should be encrypted or not. Default value is false.
     *
     * @param {string} parameters.displayName Unique name of Property. It may
     * contain only letters, digits, period, dash, and underscore characters.
     *
     * @param {string} parameters.value Value of the property. Can contain policy
     * expressions. It may not be empty or consist only of whitespace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PropertyContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PropertyContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PropertyContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PropertyContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyContract, callback: ServiceCallback<models.PropertyContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PropertyContract>): void;


    /**
     * Updates the specific property.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {array} [parameters.tags] Optional tags that when provided can be
     * used to filter the property list.
     *
     * @param {boolean} [parameters.secret] Determines whether the value is a
     * secret and should be encrypted or not. Default value is false.
     *
     * @param {string} [parameters.displayName] Unique name of Property. It may
     * contain only letters, digits, period, dash, and underscore characters.
     *
     * @param {string} [parameters.value] Value of the property. Can contain policy
     * expressions. It may not be empty or consist only of whitespace.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the specific property.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {array} [parameters.tags] Optional tags that when provided can be
     * used to filter the property list.
     *
     * @param {boolean} [parameters.secret] Determines whether the value is a
     * secret and should be encrypted or not. Default value is false.
     *
     * @param {string} [parameters.displayName] Unique name of Property. It may
     * contain only letters, digits, period, dash, and underscore characters.
     *
     * @param {string} [parameters.value] Value of the property. Can contain policy
     * expressions. It may not be empty or consist only of whitespace.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, propId: string, parameters: models.PropertyUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes specific property from the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, propId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific property from the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} propId Identifier of the property.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, propId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, propId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, propId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PropertyCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PropertyCollection>>;

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PropertyCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PropertyCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PropertyCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PropertyCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.PropertyCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PropertyCollection>): void;
}

/**
 * @class
 * QuotaByCounterKeys
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface QuotaByCounterKeys {


    /**
     * Lists a collection of current quota counter periods associated with the
     * counter-key configured in the policy on the specified service instance. The
     * api does not support paging yet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<QuotaCounterCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, quotaCounterKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QuotaCounterCollection>>;

    /**
     * Lists a collection of current quota counter periods associated with the
     * counter-key configured in the policy on the specified service instance. The
     * api does not support paging yet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {QuotaCounterCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {QuotaCounterCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link QuotaCounterCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, quotaCounterKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QuotaCounterCollection>;
    listByService(resourceGroupName: string, serviceName: string, quotaCounterKey: string, callback: ServiceCallback<models.QuotaCounterCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, quotaCounterKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QuotaCounterCollection>): void;


    /**
     * Updates all the quota counter values specified with the existing quota
     * counter key to a value in the specified service instance. This should be
     * used for reset of the quota counter values.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {object} parameters The value of the quota counter to be applied to
     * all quota counter periods.
     *
     * @param {number} [parameters.callsCount] Number of times Counter was called.
     *
     * @param {number} [parameters.kbTransferred] Data Transferred in KiloBytes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, quotaCounterKey: string, parameters: models.QuotaCounterValueContractProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates all the quota counter values specified with the existing quota
     * counter key to a value in the specified service instance. This should be
     * used for reset of the quota counter values.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {object} parameters The value of the quota counter to be applied to
     * all quota counter periods.
     *
     * @param {number} [parameters.callsCount] Number of times Counter was called.
     *
     * @param {number} [parameters.kbTransferred] Data Transferred in KiloBytes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, parameters: models.QuotaCounterValueContractProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, parameters: models.QuotaCounterValueContractProperties, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, parameters: models.QuotaCounterValueContractProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * QuotaByPeriodKeys
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface QuotaByPeriodKeys {


    /**
     * Gets the value of the quota counter associated with the counter-key in the
     * policy for the specific period in service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {string} quotaPeriodKey Quota period key identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<QuotaCounterContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QuotaCounterContract>>;

    /**
     * Gets the value of the quota counter associated with the counter-key in the
     * policy for the specific period in service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {string} quotaPeriodKey Quota period key identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {QuotaCounterContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {QuotaCounterContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link QuotaCounterContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QuotaCounterContract>;
    get(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, callback: ServiceCallback<models.QuotaCounterContract>): void;
    get(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QuotaCounterContract>): void;


    /**
     * Updates an existing quota counter value in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {string} quotaPeriodKey Quota period key identifier.
     *
     * @param {object} parameters The value of the Quota counter to be applied on
     * the specified period.
     *
     * @param {number} [parameters.callsCount] Number of times Counter was called.
     *
     * @param {number} [parameters.kbTransferred] Data Transferred in KiloBytes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, parameters: models.QuotaCounterValueContractProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates an existing quota counter value in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} quotaCounterKey Quota counter key identifier.This is the
     * result of expression defined in counter-key attribute of the quota-by-key
     * policy.For Example, if you specify counter-key="boo" in the policy, then
     * it’s accessible by "boo" counter key. But if it’s defined as
     * counter-key="@("b"+"a")" then it will be accessible by "ba" key
     *
     * @param {string} quotaPeriodKey Quota period key identifier.
     *
     * @param {object} parameters The value of the Quota counter to be applied on
     * the specified period.
     *
     * @param {number} [parameters.callsCount] Number of times Counter was called.
     *
     * @param {number} [parameters.kbTransferred] Data Transferred in KiloBytes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, parameters: models.QuotaCounterValueContractProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, parameters: models.QuotaCounterValueContractProperties, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, quotaCounterKey: string, quotaPeriodKey: string, parameters: models.QuotaCounterValueContractProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Reports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Reports {


    /**
     * Lists report records by API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApi(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByApi(resourceGroupName: string, serviceName: string, filter: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByApi(resourceGroupName: string, serviceName: string, filter: string, options: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by User.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByUserWithHttpOperationResponse(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by User.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByUser(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByUser(resourceGroupName: string, serviceName: string, filter: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByUser(resourceGroupName: string, serviceName: string, filter: string, options: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by API Operations.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByOperationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by API Operations.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByOperation(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByOperation(resourceGroupName: string, serviceName: string, filter: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByOperation(resourceGroupName: string, serviceName: string, filter: string, options: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProduct(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByProduct(resourceGroupName: string, serviceName: string, filter: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByProduct(resourceGroupName: string, serviceName: string, filter: string, options: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by geography.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByGeoWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by geography.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByGeo(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByGeo(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByGeo(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by subscription.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by subscription.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listBySubscription(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ReportCollection>): void;
    listBySubscription(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by Time.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {moment.duration} interval By time interval. Interval must be
     * multiple of 15 minutes and may not be zero. The value should be in ISO  8601
     * format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be
     * used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new
     * TimeSpan(hours, minutes, seconds))
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTimeWithHttpOperationResponse(resourceGroupName: string, serviceName: string, interval: moment.Duration, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by Time.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {moment.duration} interval By time interval. Interval must be
     * multiple of 15 minutes and may not be zero. The value should be in ISO  8601
     * format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be
     * used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new
     * TimeSpan(hours, minutes, seconds))
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTime(resourceGroupName: string, serviceName: string, interval: moment.Duration, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByTime(resourceGroupName: string, serviceName: string, interval: moment.Duration, callback: ServiceCallback<models.ReportCollection>): void;
    listByTime(resourceGroupName: string, serviceName: string, interval: moment.Duration, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by Request.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RequestReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRequestWithHttpOperationResponse(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RequestReportCollection>>;

    /**
     * Lists report records by Request.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} filter The filter to apply on the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RequestReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RequestReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RequestReportCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRequest(resourceGroupName: string, serviceName: string, filter: string, options?: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.RequestReportCollection>;
    listByRequest(resourceGroupName: string, serviceName: string, filter: string, callback: ServiceCallback<models.RequestReportCollection>): void;
    listByRequest(resourceGroupName: string, serviceName: string, filter: string, options: { top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RequestReportCollection>): void;


    /**
     * Lists report records by API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApiNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByApiNext(nextPageLink: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByApiNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by User.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByUserNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by User.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByUserNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByUserNext(nextPageLink: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByUserNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by API Operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByOperationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by API Operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByOperationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByOperationNext(nextPageLink: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByOperationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by Product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by Product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProductNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByProductNext(nextPageLink: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByProductNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by geography.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByGeoNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by geography.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByGeoNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByGeoNext(nextPageLink: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByGeoNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.ReportCollection>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;


    /**
     * Lists report records by Time.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReportCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTimeNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReportCollection>>;

    /**
     * Lists report records by Time.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReportCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReportCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReportCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTimeNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReportCollection>;
    listByTimeNext(nextPageLink: string, callback: ServiceCallback<models.ReportCollection>): void;
    listByTimeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReportCollection>): void;
}

/**
 * @class
 * Subscription
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Subscription {


    /**
     * Lists all subscriptions of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field        | Supported operators    |
     * Supported functions                         |
     * |--------------|------------------------|---------------------------------------------|
     * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state        | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionCollection>>;

    /**
     * Lists all subscriptions of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field        | Supported operators    |
     * Supported functions                         |
     * |--------------|------------------------|---------------------------------------------|
     * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state        | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionCollection>;
    list(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.SubscriptionCollection>): void;
    list(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionCollection>): void;


    /**
     * Gets the entity state (Etag) version of the apimanagement subscription
     * specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the apimanagement subscription
     * specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, sid: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified Subscription entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionContract>>;

    /**
     * Gets the specified Subscription entity.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionContract>;
    get(resourceGroupName: string, serviceName: string, sid: string, callback: ServiceCallback<models.SubscriptionContract>): void;
    get(resourceGroupName: string, serviceName: string, sid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionContract>): void;


    /**
     * Creates or updates the subscription of specified user to the specified
     * product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.userId User (user id path) for whom subscription
     * is being created in form /users/{uid}
     *
     * @param {string} parameters.productId Product (product id path) for which
     * subscription is being created in form /products/{productId}
     *
     * @param {string} parameters.displayName Subscription name.
     *
     * @param {string} [parameters.primaryKey] Primary subscription key. If not
     * specified during request key will be generated automatically.
     *
     * @param {string} [parameters.secondaryKey] Secondary subscription key. If not
     * specified during request key will be generated automatically.
     *
     * @param {string} [parameters.state] Initial subscription state. If no value
     * is specified, subscription is created with Submitted state. Possible states
     * are * active – the subscription is active, * suspended – the subscription is
     * blocked, and the subscriber cannot call any APIs of the product, * submitted
     * – the subscription request has been made by the developer, but has not yet
     * been approved or rejected, * rejected – the subscription request has been
     * denied by an administrator, * cancelled – the subscription has been
     * cancelled by the developer or administrator, * expired – the subscription
     * reached its expiration date and was deactivated. Possible values include:
     * 'suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.notify] Notify change in Subscription State.
     * - If false, do not send any email notification for change of state of
     * subscription
     * - If true, send email notification of change of state of subscription
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionCreateParameters, options?: { notify? : boolean, ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionContract>>;

    /**
     * Creates or updates the subscription of specified user to the specified
     * product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.userId User (user id path) for whom subscription
     * is being created in form /users/{uid}
     *
     * @param {string} parameters.productId Product (product id path) for which
     * subscription is being created in form /products/{productId}
     *
     * @param {string} parameters.displayName Subscription name.
     *
     * @param {string} [parameters.primaryKey] Primary subscription key. If not
     * specified during request key will be generated automatically.
     *
     * @param {string} [parameters.secondaryKey] Secondary subscription key. If not
     * specified during request key will be generated automatically.
     *
     * @param {string} [parameters.state] Initial subscription state. If no value
     * is specified, subscription is created with Submitted state. Possible states
     * are * active – the subscription is active, * suspended – the subscription is
     * blocked, and the subscriber cannot call any APIs of the product, * submitted
     * – the subscription request has been made by the developer, but has not yet
     * been approved or rejected, * rejected – the subscription request has been
     * denied by an administrator, * cancelled – the subscription has been
     * cancelled by the developer or administrator, * expired – the subscription
     * reached its expiration date and was deactivated. Possible values include:
     * 'suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.notify] Notify change in Subscription State.
     * - If false, do not send any email notification for change of state of
     * subscription
     * - If true, send email notification of change of state of subscription
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionCreateParameters, options?: { notify? : boolean, ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionCreateParameters, callback: ServiceCallback<models.SubscriptionContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionCreateParameters, options: { notify? : boolean, ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionContract>): void;


    /**
     * Updates the details of a subscription specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.userId] User identifier path: /users/{uid}
     *
     * @param {string} [parameters.productId] Product identifier path:
     * /products/{productId}
     *
     * @param {date} [parameters.expirationDate] Subscription expiration date. The
     * setting is for audit purposes only and the subscription is not automatically
     * expired. The subscription lifecycle can be managed by using the `state`
     * property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
     * as specified by the ISO 8601 standard.
     *
     * @param {string} [parameters.displayName] Subscription name.
     *
     * @param {string} [parameters.primaryKey] Primary subscription key.
     *
     * @param {string} [parameters.secondaryKey] Secondary subscription key.
     *
     * @param {string} [parameters.state] Subscription state. Possible states are *
     * active – the subscription is active, * suspended – the subscription is
     * blocked, and the subscriber cannot call any APIs of the product, * submitted
     * – the subscription request has been made by the developer, but has not yet
     * been approved or rejected, * rejected – the subscription request has been
     * denied by an administrator, * cancelled – the subscription has been
     * cancelled by the developer or administrator, * expired – the subscription
     * reached its expiration date and was deactivated. Possible values include:
     * 'suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled'
     *
     * @param {string} [parameters.stateComment] Comments describing subscription
     * state change by the administrator.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.notify] Notify change in Subscription State.
     * - If false, do not send any email notification for change of state of
     * subscription
     * - If true, send email notification of change of state of subscription
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionUpdateParameters, ifMatch: string, options?: { notify? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of a subscription specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.userId] User identifier path: /users/{uid}
     *
     * @param {string} [parameters.productId] Product identifier path:
     * /products/{productId}
     *
     * @param {date} [parameters.expirationDate] Subscription expiration date. The
     * setting is for audit purposes only and the subscription is not automatically
     * expired. The subscription lifecycle can be managed by using the `state`
     * property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
     * as specified by the ISO 8601 standard.
     *
     * @param {string} [parameters.displayName] Subscription name.
     *
     * @param {string} [parameters.primaryKey] Primary subscription key.
     *
     * @param {string} [parameters.secondaryKey] Secondary subscription key.
     *
     * @param {string} [parameters.state] Subscription state. Possible states are *
     * active – the subscription is active, * suspended – the subscription is
     * blocked, and the subscriber cannot call any APIs of the product, * submitted
     * – the subscription request has been made by the developer, but has not yet
     * been approved or rejected, * rejected – the subscription request has been
     * denied by an administrator, * cancelled – the subscription has been
     * cancelled by the developer or administrator, * expired – the subscription
     * reached its expiration date and was deactivated. Possible values include:
     * 'suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled'
     *
     * @param {string} [parameters.stateComment] Comments describing subscription
     * state change by the administrator.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.notify] Notify change in Subscription State.
     * - If false, do not send any email notification for change of state of
     * subscription
     * - If true, send email notification of change of state of subscription
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionUpdateParameters, ifMatch: string, options?: { notify? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, sid: string, parameters: models.SubscriptionUpdateParameters, ifMatch: string, options: { notify? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified subscription.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified subscription.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerates primary key of existing subscription of the API Management
     * service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regeneratePrimaryKeyWithHttpOperationResponse(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerates primary key of existing subscription of the API Management
     * service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, callback: ServiceCallback<void>): void;
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerates secondary key of existing subscription of the API Management
     * service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateSecondaryKeyWithHttpOperationResponse(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerates secondary key of existing subscription of the API Management
     * service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} sid Subscription entity Identifier. The entity represents
     * the association between a user and a product in API Management.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, callback: ServiceCallback<void>): void;
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all subscriptions of the API Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionCollection>>;

    /**
     * Lists all subscriptions of the API Management service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SubscriptionCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionCollection>): void;
}

/**
 * @class
 * TagResource
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface TagResource {


    /**
     * Lists a collection of resources associated with tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | aid         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiName     | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | method      | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | isCurrent   | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResourceCollection>>;

    /**
     * Lists a collection of resources associated with tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | aid         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiName     | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | method      | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | isCurrent   | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResourceCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.TagResourceCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResourceCollection>): void;


    /**
     * Lists a collection of resources associated with tags.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResourceCollection>>;

    /**
     * Lists a collection of resources associated with tags.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResourceCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.TagResourceCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResourceCollection>): void;
}

/**
 * @class
 * Tag
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface Tag {


    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.TagCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;


    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityStateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityState(resourceGroupName: string, serviceName: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityState(resourceGroupName: string, serviceName: string, tagId: string, callback: ServiceCallback<void>): void;
    getEntityState(resourceGroupName: string, serviceName: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Gets the details of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    get(resourceGroupName: string, serviceName: string, tagId: string, callback: ServiceCallback<models.TagContract>): void;
    get(resourceGroupName: string, serviceName: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Creates a tag.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.displayName Tag name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Creates a tag.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} parameters.displayName Tag name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, callback: ServiceCallback<models.TagContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Updates the details of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} parameters.displayName Tag name.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} parameters.displayName Tag name.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, tagId: string, parameters: models.TagCreateUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes specific tag of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific tag of the API Management service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, tagId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all Tags associated with the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists all Tags associated with the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.TagCollection>): void;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;


    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityStateByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityStateByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityStateByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, callback: ServiceCallback<void>): void;
    getEntityStateByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get tag associated with the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Get tag associated with the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    getByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, callback: ServiceCallback<models.TagContract>): void;
    getByApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Assign tag to the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    assignToApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Assign tag to the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    assignToApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    assignToApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, callback: ServiceCallback<models.TagContract>): void;
    assignToApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Detach the tag from the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detachFromApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Detach the tag from the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detachFromApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    detachFromApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    detachFromApi(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all Tags associated with the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | method     | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByOperationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | method     | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, callback: ServiceCallback<models.TagCollection>): void;
    listByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;


    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityStateByOperationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityStateByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityStateByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, callback: ServiceCallback<void>): void;
    getEntityStateByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get tag associated with the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByOperationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Get tag associated with the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    getByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, callback: ServiceCallback<models.TagContract>): void;
    getByOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Assign tag to the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    assignToOperationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Assign tag to the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    assignToOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    assignToOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, callback: ServiceCallback<models.TagContract>): void;
    assignToOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Detach the tag from the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detachFromOperationWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Detach the tag from the Operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} operationId Operation identifier within an API. Must be
     * unique in the current API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detachFromOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    detachFromOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    detachFromOperation(resourceGroupName: string, serviceName: string, apiId: string, operationId: string, tagId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all Tags associated with the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists all Tags associated with the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, callback: ServiceCallback<models.TagCollection>): void;
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;


    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityStateByProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityStateByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityStateByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, callback: ServiceCallback<void>): void;
    getEntityStateByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get tag associated with the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Get tag associated with the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    getByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, callback: ServiceCallback<models.TagContract>): void;
    getByProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Assign tag to the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    assignToProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagContract>>;

    /**
     * Assign tag to the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    assignToProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagContract>;
    assignToProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, callback: ServiceCallback<models.TagContract>): void;
    assignToProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagContract>): void;


    /**
     * Detach the tag from the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detachFromProductWithHttpOperationResponse(resourceGroupName: string, serviceName: string, productId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Detach the tag from the Product.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} productId Product identifier. Must be unique in the current
     * API Management service instance.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detachFromProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    detachFromProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    detachFromProduct(resourceGroupName: string, serviceName: string, productId: string, tagId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.TagCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;


    /**
     * Lists all Tags associated with the API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists all Tags associated with the API.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApiNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByApiNext(nextPageLink: string, callback: ServiceCallback<models.TagCollection>): void;
    listByApiNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;


    /**
     * Lists all Tags associated with the Operation.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByOperationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByOperationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByOperationNext(nextPageLink: string, callback: ServiceCallback<models.TagCollection>): void;
    listByOperationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;


    /**
     * Lists all Tags associated with the Product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByProductNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagCollection>>;

    /**
     * Lists all Tags associated with the Product.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByProductNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagCollection>;
    listByProductNext(nextPageLink: string, callback: ServiceCallback<models.TagCollection>): void;
    listByProductNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagCollection>): void;
}

/**
 * @class
 * TagDescription
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface TagDescription {


    /**
     * Lists all Tags descriptions in scope of API. Model similar to swagger -
     * tagDescription is defined on API level but tag may be assigned to the
     * Operations
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagDescriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagDescriptionCollection>>;

    /**
     * Lists all Tags descriptions in scope of API. Model similar to swagger -
     * tagDescription is defined on API level but tag may be assigned to the
     * Operations
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagDescriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagDescriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagDescriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagDescriptionCollection>;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.TagDescriptionCollection>): void;
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagDescriptionCollection>): void;


    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityStateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityState(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityState(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, callback: ServiceCallback<void>): void;
    getEntityState(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get tag associated with the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagDescriptionContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagDescriptionContract>>;

    /**
     * Get tag associated with the API.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagDescriptionContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagDescriptionContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagDescriptionContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagDescriptionContract>;
    get(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, callback: ServiceCallback<models.TagDescriptionContract>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagDescriptionContract>): void;


    /**
     * Create/Update tag description in scope of the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.description] Description of the Tag.
     *
     * @param {string} [parameters.externalDocsUrl] Absolute URL of external
     * resources describing the tag.
     *
     * @param {string} [parameters.externalDocsDescription] Description of the
     * external resources describing the tag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagDescriptionContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, parameters: models.TagDescriptionCreateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagDescriptionContract>>;

    /**
     * Create/Update tag description in scope of the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create parameters.
     *
     * @param {string} [parameters.description] Description of the Tag.
     *
     * @param {string} [parameters.externalDocsUrl] Absolute URL of external
     * resources describing the tag.
     *
     * @param {string} [parameters.externalDocsDescription] Description of the
     * external resources describing the tag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagDescriptionContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagDescriptionContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagDescriptionContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, parameters: models.TagDescriptionCreateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagDescriptionContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, parameters: models.TagDescriptionCreateParameters, callback: ServiceCallback<models.TagDescriptionContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, parameters: models.TagDescriptionCreateParameters, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagDescriptionContract>): void;


    /**
     * Delete tag description for the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete tag description for the Api.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} tagId Tag identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, tagId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all Tags descriptions in scope of API. Model similar to swagger -
     * tagDescription is defined on API level but tag may be assigned to the
     * Operations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagDescriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByApiNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagDescriptionCollection>>;

    /**
     * Lists all Tags descriptions in scope of API. Model similar to swagger -
     * tagDescription is defined on API level but tag may be assigned to the
     * Operations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagDescriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagDescriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagDescriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByApiNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagDescriptionCollection>;
    listByApiNext(nextPageLink: string, callback: ServiceCallback<models.TagDescriptionCollection>): void;
    listByApiNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagDescriptionCollection>): void;
}

/**
 * @class
 * OperationOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface OperationOperations {


    /**
     * Lists a collection of operations associated with tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiName     | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | method      | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTagsWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResourceCollection>>;

    /**
     * Lists a collection of operations associated with tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | apiName     | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | method      | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTags(resourceGroupName: string, serviceName: string, apiId: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResourceCollection>;
    listByTags(resourceGroupName: string, serviceName: string, apiId: string, callback: ServiceCallback<models.TagResourceCollection>): void;
    listByTags(resourceGroupName: string, serviceName: string, apiId: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResourceCollection>): void;


    /**
     * Lists a collection of operations associated with tags.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TagResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByTagsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TagResourceCollection>>;

    /**
     * Lists a collection of operations associated with tags.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TagResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TagResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TagResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByTagsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TagResourceCollection>;
    listByTagsNext(nextPageLink: string, callback: ServiceCallback<models.TagResourceCollection>): void;
    listByTagsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TagResourceCollection>): void;
}

/**
 * @class
 * TenantAccess
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface TenantAccess {


    /**
     * Get tenant access information details.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessInformationContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessInformationContract>>;

    /**
     * Get tenant access information details.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessInformationContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessInformationContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessInformationContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessInformationContract>;
    get(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.AccessInformationContract>): void;
    get(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessInformationContract>): void;


    /**
     * Update tenant access information details.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to retrieve the Tenant Access
     * Information.
     *
     * @param {boolean} [parameters.enabled] Tenant access information of the API
     * Management service.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.AccessInformationUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update tenant access information details.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Parameters supplied to retrieve the Tenant Access
     * Information.
     *
     * @param {boolean} [parameters.enabled] Tenant access information of the API
     * Management service.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, parameters: models.AccessInformationUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, parameters: models.AccessInformationUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, parameters: models.AccessInformationUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerate primary access key.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regeneratePrimaryKeyWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerate primary access key.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerate secondary access key.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateSecondaryKeyWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerate secondary access key.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * TenantAccessGit
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface TenantAccessGit {


    /**
     * Gets the Git access configuration for the tenant.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessInformationContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessInformationContract>>;

    /**
     * Gets the Git access configuration for the tenant.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessInformationContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessInformationContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessInformationContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessInformationContract>;
    get(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.AccessInformationContract>): void;
    get(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessInformationContract>): void;


    /**
     * Regenerate primary access key for GIT.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regeneratePrimaryKeyWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerate primary access key for GIT.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerate secondary access key for GIT.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateSecondaryKeyWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerate secondary access key for GIT.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * TenantConfiguration
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface TenantConfiguration {


    /**
     * This operation applies changes from the specified Git branch to the
     * configuration database. This is a long running operation and could take
     * several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Deploy Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationResultContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deployWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationResultContract>>;

    /**
     * This operation applies changes from the specified Git branch to the
     * configuration database. This is a long running operation and could take
     * several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Deploy Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationResultContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationResultContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationResultContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deploy(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationResultContract>;
    deploy(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, callback: ServiceCallback<models.OperationResultContract>): void;
    deploy(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationResultContract>): void;


    /**
     * This operation creates a commit with the current configuration snapshot to
     * the specified branch in the repository. This is a long running operation and
     * could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Save Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch in which to
     * commit the current configuration snapshot.
     *
     * @param {boolean} [parameters.force] The value if true, the current
     * configuration database is committed to the Git repository, even if the Git
     * repository has newer changes that would be overwritten.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationResultContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    saveWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationResultContract>>;

    /**
     * This operation creates a commit with the current configuration snapshot to
     * the specified branch in the repository. This is a long running operation and
     * could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Save Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch in which to
     * commit the current configuration snapshot.
     *
     * @param {boolean} [parameters.force] The value if true, the current
     * configuration database is committed to the Git repository, even if the Git
     * repository has newer changes that would be overwritten.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationResultContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationResultContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationResultContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    save(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationResultContract>;
    save(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, callback: ServiceCallback<models.OperationResultContract>): void;
    save(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationResultContract>): void;


    /**
     * This operation validates the changes in the specified Git branch. This is a
     * long running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Validate Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationResultContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    validateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationResultContract>>;

    /**
     * This operation validates the changes in the specified Git branch. This is a
     * long running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Validate Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationResultContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationResultContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationResultContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    validate(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationResultContract>;
    validate(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, callback: ServiceCallback<models.OperationResultContract>): void;
    validate(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationResultContract>): void;


    /**
     * Gets the status of the most recent synchronization between the configuration
     * database and the Git repository.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TenantConfigurationSyncStateContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSyncStateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TenantConfigurationSyncStateContract>>;

    /**
     * Gets the status of the most recent synchronization between the configuration
     * database and the Git repository.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TenantConfigurationSyncStateContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TenantConfigurationSyncStateContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TenantConfigurationSyncStateContract} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSyncState(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TenantConfigurationSyncStateContract>;
    getSyncState(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.TenantConfigurationSyncStateContract>): void;
    getSyncState(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TenantConfigurationSyncStateContract>): void;


    /**
     * This operation applies changes from the specified Git branch to the
     * configuration database. This is a long running operation and could take
     * several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Deploy Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationResultContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeployWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationResultContract>>;

    /**
     * This operation applies changes from the specified Git branch to the
     * configuration database. This is a long running operation and could take
     * several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Deploy Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationResultContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationResultContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationResultContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeploy(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationResultContract>;
    beginDeploy(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, callback: ServiceCallback<models.OperationResultContract>): void;
    beginDeploy(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationResultContract>): void;


    /**
     * This operation creates a commit with the current configuration snapshot to
     * the specified branch in the repository. This is a long running operation and
     * could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Save Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch in which to
     * commit the current configuration snapshot.
     *
     * @param {boolean} [parameters.force] The value if true, the current
     * configuration database is committed to the Git repository, even if the Git
     * repository has newer changes that would be overwritten.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationResultContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSaveWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationResultContract>>;

    /**
     * This operation creates a commit with the current configuration snapshot to
     * the specified branch in the repository. This is a long running operation and
     * could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Save Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch in which to
     * commit the current configuration snapshot.
     *
     * @param {boolean} [parameters.force] The value if true, the current
     * configuration database is committed to the Git repository, even if the Git
     * repository has newer changes that would be overwritten.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationResultContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationResultContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationResultContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSave(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationResultContract>;
    beginSave(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, callback: ServiceCallback<models.OperationResultContract>): void;
    beginSave(resourceGroupName: string, serviceName: string, parameters: models.SaveConfigurationParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationResultContract>): void;


    /**
     * This operation validates the changes in the specified Git branch. This is a
     * long running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Validate Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationResultContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginValidateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationResultContract>>;

    /**
     * This operation validates the changes in the specified Git branch. This is a
     * long running operation and could take several minutes to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} parameters Validate Configuration parameters.
     *
     * @param {string} parameters.branch The name of the Git branch from which the
     * configuration is to be deployed to the configuration database.
     *
     * @param {boolean} [parameters.force] The value enforcing deleting
     * subscriptions to products that are deleted in this update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationResultContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationResultContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationResultContract} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginValidate(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationResultContract>;
    beginValidate(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, callback: ServiceCallback<models.OperationResultContract>): void;
    beginValidate(resourceGroupName: string, serviceName: string, parameters: models.DeployConfigurationParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationResultContract>): void;
}

/**
 * @class
 * User
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface User {


    /**
     * Returns calling user identity information.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CurrentUserIdentity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getIdentityWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CurrentUserIdentity>>;

    /**
     * Returns calling user identity information.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CurrentUserIdentity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CurrentUserIdentity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CurrentUserIdentity} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getIdentity(resourceGroupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CurrentUserIdentity>;
    getIdentity(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.CurrentUserIdentity>): void;
    getIdentity(resourceGroupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CurrentUserIdentity>): void;


    /**
     * Lists a collection of registered users in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field            | Supported operators
     * | Supported functions               |
     * |------------------|------------------------|-----------------------------------|
     * | id               | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | email            | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | state            | eq                     | N/A
     * |
     * | registrationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     * | note             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserCollection>>;

    /**
     * Lists a collection of registered users in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field            | Supported operators
     * | Supported functions               |
     * |------------------|------------------------|-----------------------------------|
     * | id               | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | email            | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | state            | eq                     | N/A
     * |
     * | registrationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     * | note             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.UserCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserCollection>): void;


    /**
     * Gets the entity state (Etag) version of the user specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the user specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, uid: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the user specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserContract>>;

    /**
     * Gets the details of the user specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserContract>;
    get(resourceGroupName: string, serviceName: string, uid: string, callback: ServiceCallback<models.UserContract>): void;
    get(resourceGroupName: string, serviceName: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserContract>): void;


    /**
     * Creates or Updates a user.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.state] Account state. Specifies whether the user
     * is active or not. Blocked users are unable to sign into the developer portal
     * or call any APIs of subscribed products. Default state is Active. Possible
     * values include: 'active', 'blocked', 'pending', 'deleted'
     *
     * @param {string} [parameters.note] Optional note about a user set by the
     * administrator.
     *
     * @param {array} [parameters.identities] Collection of user identities.
     *
     * @param {string} parameters.email Email address. Must not be empty and must
     * be unique within the service instance.
     *
     * @param {string} parameters.firstName First name.
     *
     * @param {string} parameters.lastName Last name.
     *
     * @param {string} [parameters.password] User Password. If no value is
     * provided, a default password is generated.
     *
     * @param {string} [parameters.confirmation] Determines the type of
     * confirmation e-mail that will be sent to the newly created user. Possible
     * values include: 'signup', 'invite'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserCreateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserContract>>;

    /**
     * Creates or Updates a user.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.state] Account state. Specifies whether the user
     * is active or not. Blocked users are unable to sign into the developer portal
     * or call any APIs of subscribed products. Default state is Active. Possible
     * values include: 'active', 'blocked', 'pending', 'deleted'
     *
     * @param {string} [parameters.note] Optional note about a user set by the
     * administrator.
     *
     * @param {array} [parameters.identities] Collection of user identities.
     *
     * @param {string} parameters.email Email address. Must not be empty and must
     * be unique within the service instance.
     *
     * @param {string} parameters.firstName First name.
     *
     * @param {string} parameters.lastName Last name.
     *
     * @param {string} [parameters.password] User Password. If no value is
     * provided, a default password is generated.
     *
     * @param {string} [parameters.confirmation] Determines the type of
     * confirmation e-mail that will be sent to the newly created user. Possible
     * values include: 'signup', 'invite'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserCreateParameters, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserCreateParameters, callback: ServiceCallback<models.UserContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserCreateParameters, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserContract>): void;


    /**
     * Updates the details of the user specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.state] Account state. Specifies whether the user
     * is active or not. Blocked users are unable to sign into the developer portal
     * or call any APIs of subscribed products. Default state is Active. Possible
     * values include: 'active', 'blocked', 'pending', 'deleted'
     *
     * @param {string} [parameters.note] Optional note about a user set by the
     * administrator.
     *
     * @param {array} [parameters.identities] Collection of user identities.
     *
     * @param {string} [parameters.email] Email address. Must not be empty and must
     * be unique within the service instance.
     *
     * @param {string} [parameters.password] User Password.
     *
     * @param {string} [parameters.firstName] First name.
     *
     * @param {string} [parameters.lastName] Last name.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the user specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.state] Account state. Specifies whether the user
     * is active or not. Blocked users are unable to sign into the developer portal
     * or call any APIs of subscribed products. Default state is Active. Possible
     * values include: 'active', 'blocked', 'pending', 'deleted'
     *
     * @param {string} [parameters.note] Optional note about a user set by the
     * administrator.
     *
     * @param {array} [parameters.identities] Collection of user identities.
     *
     * @param {string} [parameters.email] Email address. Must not be empty and must
     * be unique within the service instance.
     *
     * @param {string} [parameters.password] User Password.
     *
     * @param {string} [parameters.firstName] First name.
     *
     * @param {string} [parameters.lastName] Last name.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes specific user.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteSubscriptions] Whether to delete user's
     * subscription or not.
     *
     * @param {boolean} [options.notify] Send an Account Closed Email notification
     * to the User.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, ifMatch: string, options?: { deleteSubscriptions? : boolean, notify? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific user.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteSubscriptions] Whether to delete user's
     * subscription or not.
     *
     * @param {boolean} [options.notify] Send an Account Closed Email notification
     * to the User.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, uid: string, ifMatch: string, options?: { deleteSubscriptions? : boolean, notify? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, uid: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, uid: string, ifMatch: string, options: { deleteSubscriptions? : boolean, notify? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves a redirection URL containing an authentication token for signing a
     * given user into the developer portal.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenerateSsoUrlResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateSsoUrlWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenerateSsoUrlResult>>;

    /**
     * Retrieves a redirection URL containing an authentication token for signing a
     * given user into the developer portal.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenerateSsoUrlResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenerateSsoUrlResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenerateSsoUrlResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateSsoUrl(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenerateSsoUrlResult>;
    generateSsoUrl(resourceGroupName: string, serviceName: string, uid: string, callback: ServiceCallback<models.GenerateSsoUrlResult>): void;
    generateSsoUrl(resourceGroupName: string, serviceName: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenerateSsoUrlResult>): void;


    /**
     * Gets the Shared Access Authorization Token for the User.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create Authorization Token parameters.
     *
     * @param {string} parameters.keyType The Key to be used to generate token for
     * user. Possible values include: 'primary', 'secondary'
     *
     * @param {date} parameters.expiry The Expiry time of the Token. Maximum token
     * expiry time is set to 30 days. The date conforms to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserTokenResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSharedAccessTokenWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserTokenParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserTokenResult>>;

    /**
     * Gets the Shared Access Authorization Token for the User.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} parameters Create Authorization Token parameters.
     *
     * @param {string} parameters.keyType The Key to be used to generate token for
     * user. Possible values include: 'primary', 'secondary'
     *
     * @param {date} parameters.expiry The Expiry time of the Token. Maximum token
     * expiry time is set to 30 days. The date conforms to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserTokenResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserTokenResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserTokenResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSharedAccessToken(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserTokenParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserTokenResult>;
    getSharedAccessToken(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserTokenParameters, callback: ServiceCallback<models.UserTokenResult>): void;
    getSharedAccessToken(resourceGroupName: string, serviceName: string, uid: string, parameters: models.UserTokenParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserTokenResult>): void;


    /**
     * Lists a collection of registered users in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserCollection>>;

    /**
     * Lists a collection of registered users in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.UserCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserCollection>): void;
}

/**
 * @class
 * UserGroup
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface UserGroup {


    /**
     * Lists all user groups.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupCollection>>;

    /**
     * Lists all user groups.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field       | Supported operators    |
     * Supported functions                         |
     * |-------------|------------------------|---------------------------------------------|
     * | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, uid: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupCollection>;
    list(resourceGroupName: string, serviceName: string, uid: string, callback: ServiceCallback<models.GroupCollection>): void;
    list(resourceGroupName: string, serviceName: string, uid: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupCollection>): void;


    /**
     * Lists all user groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupCollection>>;

    /**
     * Lists all user groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.GroupCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupCollection>): void;
}

/**
 * @class
 * UserSubscription
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface UserSubscription {


    /**
     * Lists the collection of subscriptions of the specified user.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field        | Supported operators    |
     * Supported functions                         |
     * |--------------|------------------------|---------------------------------------------|
     * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state        | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionCollection>>;

    /**
     * Lists the collection of subscriptions of the specified user.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field        | Supported operators    |
     * Supported functions                         |
     * |--------------|------------------------|---------------------------------------------|
     * | id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
     * endswith |
     * | state        | eq                     |
     * |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, uid: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionCollection>;
    list(resourceGroupName: string, serviceName: string, uid: string, callback: ServiceCallback<models.SubscriptionCollection>): void;
    list(resourceGroupName: string, serviceName: string, uid: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionCollection>): void;


    /**
     * Lists the collection of subscriptions of the specified user.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionCollection>>;

    /**
     * Lists the collection of subscriptions of the specified user.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SubscriptionCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionCollection>): void;
}

/**
 * @class
 * UserIdentities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface UserIdentities {


    /**
     * Lists all user identities.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserIdentityCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserIdentityCollection>>;

    /**
     * Lists all user identities.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} uid User identifier. Must be unique in the current API
     * Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserIdentityCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserIdentityCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserIdentityCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, serviceName: string, uid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserIdentityCollection>;
    list(resourceGroupName: string, serviceName: string, uid: string, callback: ServiceCallback<models.UserIdentityCollection>): void;
    list(resourceGroupName: string, serviceName: string, uid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserIdentityCollection>): void;


    /**
     * Lists all user identities.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserIdentityCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserIdentityCollection>>;

    /**
     * Lists all user identities.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserIdentityCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserIdentityCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserIdentityCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserIdentityCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.UserIdentityCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserIdentityCollection>): void;
}

/**
 * @class
 * ApiVersionSet
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiVersionSet {


    /**
     * Lists a collection of API Version Sets in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field            | Supported operators
     * | Supported functions               |
     * |------------------|------------------------|-----------------------------------|
     * | id               | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | email            | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | state            | eq                     | N/A
     * |
     * | registrationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     * | note             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiVersionSetCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceWithHttpOperationResponse(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiVersionSetCollection>>;

    /**
     * Lists a collection of API Version Sets in the specified service instance.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] | Field            | Supported operators
     * | Supported functions               |
     * |------------------|------------------------|-----------------------------------|
     * | id               | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | firstName        | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | lastName         | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | email            | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     * | state            | eq                     | N/A
     * |
     * | registrationDate | ge, le, eq, ne, gt, lt | N/A
     * |
     * | note             | ge, le, eq, ne, gt, lt | substringof, contains,
     * startswith, endswith |
     *
     * @param {number} [options.top] Number of records to return.
     *
     * @param {number} [options.skip] Number of records to skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiVersionSetCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiVersionSetCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiVersionSetCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiVersionSetCollection>;
    listByService(resourceGroupName: string, serviceName: string, callback: ServiceCallback<models.ApiVersionSetCollection>): void;
    listByService(resourceGroupName: string, serviceName: string, options: { filter? : string, top? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiVersionSetCollection>): void;


    /**
     * Gets the entity state (Etag) version of the Api Version Set specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEntityTagWithHttpOperationResponse(resourceGroupName: string, serviceName: string, versionSetId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Gets the entity state (Etag) version of the Api Version Set specified by its
     * identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, versionSetId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getEntityTag(resourceGroupName: string, serviceName: string, versionSetId: string, callback: ServiceCallback<void>): void;
    getEntityTag(resourceGroupName: string, serviceName: string, versionSetId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the details of the Api Version Set specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiVersionSetContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, versionSetId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiVersionSetContract>>;

    /**
     * Gets the details of the Api Version Set specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiVersionSetContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiVersionSetContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiVersionSetContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, versionSetId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiVersionSetContract>;
    get(resourceGroupName: string, serviceName: string, versionSetId: string, callback: ServiceCallback<models.ApiVersionSetContract>): void;
    get(resourceGroupName: string, serviceName: string, versionSetId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiVersionSetContract>): void;


    /**
     * Creates or Updates a Api Version Set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Description of API Version Set.
     *
     * @param {string} [parameters.versionQueryName] Name of query parameter that
     * indicates the API Version if versioningScheme is set to `query`.
     *
     * @param {string} [parameters.versionHeaderName] Name of HTTP header parameter
     * that indicates the API Version if versioningScheme is set to `header`.
     *
     * @param {string} parameters.displayName Name of API Version Set
     *
     * @param {string} parameters.versioningScheme An value that determines where
     * the API Version identifer will be located in a HTTP request. Possible values
     * include: 'Segment', 'Query', 'Header'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiVersionSetContract>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiVersionSetContract>>;

    /**
     * Creates or Updates a Api Version Set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} parameters Create or update parameters.
     *
     * @param {string} [parameters.description] Description of API Version Set.
     *
     * @param {string} [parameters.versionQueryName] Name of query parameter that
     * indicates the API Version if versioningScheme is set to `query`.
     *
     * @param {string} [parameters.versionHeaderName] Name of HTTP header parameter
     * that indicates the API Version if versioningScheme is set to `header`.
     *
     * @param {string} parameters.displayName Name of API Version Set
     *
     * @param {string} parameters.versioningScheme An value that determines where
     * the API Version identifer will be located in a HTTP request. Possible values
     * include: 'Segment', 'Query', 'Header'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the Entity. Not required when
     * creating an entity, but required when updating an entity.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiVersionSetContract} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiVersionSetContract} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiVersionSetContract} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetContract, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiVersionSetContract>;
    createOrUpdate(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetContract, callback: ServiceCallback<models.ApiVersionSetContract>): void;
    createOrUpdate(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetContract, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiVersionSetContract>): void;


    /**
     * Updates the details of the Api VersionSet specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.description] Description of API Version Set.
     *
     * @param {string} [parameters.versionQueryName] Name of query parameter that
     * indicates the API Version if versioningScheme is set to `query`.
     *
     * @param {string} [parameters.versionHeaderName] Name of HTTP header parameter
     * that indicates the API Version if versioningScheme is set to `header`.
     *
     * @param {string} [parameters.displayName] Name of API Version Set
     *
     * @param {string} [parameters.versioningScheme] An value that determines where
     * the API Version identifer will be located in a HTTP request. Possible values
     * include: 'Segment', 'Query', 'Header'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the details of the Api VersionSet specified by its identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {object} parameters Update parameters.
     *
     * @param {string} [parameters.description] Description of API Version Set.
     *
     * @param {string} [parameters.versionQueryName] Name of query parameter that
     * indicates the API Version if versioningScheme is set to `query`.
     *
     * @param {string} [parameters.versionHeaderName] Name of HTTP header parameter
     * that indicates the API Version if versioningScheme is set to `header`.
     *
     * @param {string} [parameters.displayName] Name of API Version Set
     *
     * @param {string} [parameters.versioningScheme] An value that determines where
     * the API Version identifer will be located in a HTTP request. Possible values
     * include: 'Segment', 'Query', 'Header'
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetUpdateParameters, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetUpdateParameters, ifMatch: string, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, serviceName: string, versionSetId: string, parameters: models.ApiVersionSetUpdateParameters, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes specific Api Version Set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceName: string, versionSetId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes specific Api Version Set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} versionSetId Api Version Set identifier. Must be unique in
     * the current API Management service instance.
     *
     * @param {string} ifMatch ETag of the Entity. ETag should match the current
     * entity state from the header response of the GET request or it should be *
     * for unconditional update.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceName: string, versionSetId: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceName: string, versionSetId: string, ifMatch: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceName: string, versionSetId: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a collection of API Version Sets in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiVersionSetCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServiceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiVersionSetCollection>>;

    /**
     * Lists a collection of API Version Sets in the specified service instance.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiVersionSetCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiVersionSetCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiVersionSetCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServiceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiVersionSetCollection>;
    listByServiceNext(nextPageLink: string, callback: ServiceCallback<models.ApiVersionSetCollection>): void;
    listByServiceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiVersionSetCollection>): void;
}

/**
 * @class
 * ApiExport
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ApiManagementClient.
 */
export interface ApiExport {


    /**
     * Gets the details of the API specified by its identifier in the format
     * specified to the Storage Blob with SAS Key valid for 5 minutes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} format Format in which to export the Api Details to the
     * Storage Blob with Sas Key valid for 5 minutes. Possible values include:
     * 'Swagger', 'Wsdl', 'Wadl'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApiExportResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceName: string, apiId: string, format: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApiExportResult>>;

    /**
     * Gets the details of the API specified by its identifier in the format
     * specified to the Storage Blob with SAS Key valid for 5 minutes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} serviceName The name of the API Management service.
     *
     * @param {string} apiId API revision identifier. Must be unique in the current
     * API Management service instance. Non-current revision has ;rev=n as a suffix
     * where n is the revision number.
     *
     * @param {string} format Format in which to export the Api Details to the
     * Storage Blob with Sas Key valid for 5 minutes. Possible values include:
     * 'Swagger', 'Wsdl', 'Wadl'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApiExportResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApiExportResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApiExportResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, format: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApiExportResult>;
    get(resourceGroupName: string, serviceName: string, apiId: string, format: string, callback: ServiceCallback<models.ApiExportResult>): void;
    get(resourceGroupName: string, serviceName: string, apiId: string, format: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApiExportResult>): void;
}
