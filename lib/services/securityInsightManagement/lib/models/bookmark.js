/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents a bookmark in Azure Security Insights.
 *
 * @extends models['Resource']
 */
class Bookmark extends models['Resource'] {
  /**
   * Create a Bookmark.
   * @property {string} [etag] Etag of the bookmark.
   * @property {string} displayName The display name of the bookmark
   * @property {date} [lastUpdatedTimeUtc] The last time the bookmark was
   * updated
   * @property {date} [createdTimeUtc] The time the bookmark was created
   * @property {object} [createdBy] Describes a user that created the bookmark
   * @property {uuid} [createdBy.objectId] The object id of the user.
   * @property {string} [createdBy.email] The email of the user.
   * @property {string} [createdBy.name] The name of the user.
   * @property {object} [updatedBy] Describes a user that updated the bookmark
   * @property {uuid} [updatedBy.objectId] The object id of the user.
   * @property {string} [updatedBy.email] The email of the user.
   * @property {string} [updatedBy.name] The name of the user.
   * @property {string} [notes] The notes of the bookmark
   * @property {array} [labels] List of labels relevant to this bookmark
   * @property {string} query The query of the bookmark.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Bookmark
   *
   * @returns {object} metadata of Bookmark
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Bookmark',
      type: {
        name: 'Composite',
        className: 'Bookmark',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: true,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          lastUpdatedTimeUtc: {
            required: false,
            serializedName: 'properties.lastUpdatedTimeUtc',
            type: {
              name: 'DateTime'
            }
          },
          createdTimeUtc: {
            required: false,
            serializedName: 'properties.createdTimeUtc',
            type: {
              name: 'DateTime'
            }
          },
          createdBy: {
            required: false,
            serializedName: 'properties.createdBy',
            type: {
              name: 'Composite',
              className: 'UserInfo'
            }
          },
          updatedBy: {
            required: false,
            serializedName: 'properties.updatedBy',
            type: {
              name: 'Composite',
              className: 'UserInfo'
            }
          },
          notes: {
            required: false,
            serializedName: 'properties.notes',
            type: {
              name: 'String'
            }
          },
          labels: {
            required: false,
            serializedName: 'properties.labels',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          query: {
            required: true,
            serializedName: 'properties.query',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Bookmark;
