/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents a host entity.
 *
 * @extends models['Entity']
 */
class HostEntity extends models['Entity'] {
  /**
   * Create a HostEntity.
   * @property {string} [dnsDomain] The DNS domain that this host belongs to.
   * Should contain the compete DNS suffix for the domain
   * @property {string} [ntDomain] The NT domain that this host belongs to.
   * @property {string} [hostName] The hostname without the domain suffix.
   * @property {string} [netBiosName] The host name (pre-windows2000).
   * @property {string} [azureID] The azure resource id of the VM.
   * @property {string} [omsAgentID] The OMS agent id, if the host has OMS
   * agent installed.
   * @property {string} [osFamily] The operartion system type. Possible values
   * include: 'Linux', 'Windows', 'Android', 'IOS'
   * @property {string} [osVersion] A free text representation of the operating
   * system. This field is meant to hold specific versions the are more fine
   * grained than OSFamily or future values not supported by OSFamily
   * enumeration
   * @property {boolean} [isDomainJoined] Determines whether this host belongs
   * to a domain.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of HostEntity
   *
   * @returns {object} metadata of HostEntity
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Host',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'Entity',
        className: 'HostEntity',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          dnsDomain: {
            required: false,
            readOnly: true,
            serializedName: 'properties.dnsDomain',
            type: {
              name: 'String'
            }
          },
          ntDomain: {
            required: false,
            readOnly: true,
            serializedName: 'properties.ntDomain',
            type: {
              name: 'String'
            }
          },
          hostName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.hostName',
            type: {
              name: 'String'
            }
          },
          netBiosName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.netBiosName',
            type: {
              name: 'String'
            }
          },
          azureID: {
            required: false,
            readOnly: true,
            serializedName: 'properties.azureID',
            type: {
              name: 'String'
            }
          },
          omsAgentID: {
            required: false,
            readOnly: true,
            serializedName: 'properties.omsAgentID',
            type: {
              name: 'String'
            }
          },
          osFamily: {
            required: false,
            serializedName: 'properties.osFamily',
            type: {
              name: 'Enum',
              allowedValues: [ 'Linux', 'Windows', 'Android', 'IOS' ]
            }
          },
          osVersion: {
            required: false,
            readOnly: true,
            serializedName: 'properties.osVersion',
            type: {
              name: 'String'
            }
          },
          isDomainJoined: {
            required: false,
            readOnly: true,
            serializedName: 'properties.isDomainJoined',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = HostEntity;
