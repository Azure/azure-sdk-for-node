/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents scheduled alert rule.
 *
 * @extends models['AlertRule']
 */
class ScheduledAlertRule extends models['AlertRule'] {
  /**
   * Create a ScheduledAlertRule.
   * @property {string} ruleName The name for alerts created by this alert
   * rule.
   * @property {string} description The description of the alert rule.
   * @property {string} severity The severity for alerts created by this alert
   * rule. Possible values include: 'Low', 'Medium', 'High', 'Informational'
   * @property {boolean} enabled Determines whether this alert rule is enabled
   * or disabled.
   * @property {string} query The query that creates alerts for this rule.
   * @property {moment.duration} queryFrequency The frequency (in ISO 8601
   * duration format) for this alert rule to run.
   * @property {moment.duration} queryPeriod The period (in ISO 8601 duration
   * format) that this alert rule looks at.
   * @property {string} triggerOperator The operation against the threshold
   * that triggers alert rule. Possible values include: 'GreaterThan',
   * 'LessThan', 'Equal', 'NotEqual'
   * @property {number} triggerThreshold The threshold triggers this alert
   * rule.
   * @property {boolean} suppressionEnabled Determines whether the suppression
   * for this alert rule is enabled or disabled.
   * @property {moment.duration} suppressionDuration The suppression (in ISO
   * 8601 duration format) to wait since last time this alert rule been
   * triggered.
   * @property {string} [lastModifiedUtc] The last time that this alert has
   * been modified.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ScheduledAlertRule
   *
   * @returns {object} metadata of ScheduledAlertRule
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Scheduled',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'AlertRule',
        className: 'ScheduledAlertRule',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          ruleName: {
            required: true,
            serializedName: 'properties.ruleName',
            type: {
              name: 'String'
            }
          },
          description: {
            required: true,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          severity: {
            required: true,
            serializedName: 'properties.severity',
            type: {
              name: 'Enum',
              allowedValues: [ 'Low', 'Medium', 'High', 'Informational' ]
            }
          },
          enabled: {
            required: true,
            serializedName: 'properties.enabled',
            type: {
              name: 'Boolean'
            }
          },
          query: {
            required: true,
            serializedName: 'properties.query',
            type: {
              name: 'String'
            }
          },
          queryFrequency: {
            required: true,
            serializedName: 'properties.queryFrequency',
            type: {
              name: 'TimeSpan'
            }
          },
          queryPeriod: {
            required: true,
            serializedName: 'properties.queryPeriod',
            type: {
              name: 'TimeSpan'
            }
          },
          triggerOperator: {
            required: true,
            serializedName: 'properties.triggerOperator',
            type: {
              name: 'Enum',
              allowedValues: [ 'GreaterThan', 'LessThan', 'Equal', 'NotEqual' ]
            }
          },
          triggerThreshold: {
            required: true,
            serializedName: 'properties.triggerThreshold',
            type: {
              name: 'Number'
            }
          },
          suppressionEnabled: {
            required: true,
            serializedName: 'properties.suppressionEnabled',
            type: {
              name: 'Boolean'
            }
          },
          suppressionDuration: {
            required: true,
            serializedName: 'properties.suppressionDuration',
            type: {
              name: 'TimeSpan'
            }
          },
          lastModifiedUtc: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModifiedUtc',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ScheduledAlertRule;
