/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityInsights.
 */
export interface Operations {


    /**
     * Lists all operations available Azure Security Insights Resource Provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationsList>>;

    /**
     * Lists all operations available Azure Security Insights Resource Provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationsList>;
    list(callback: ServiceCallback<models.OperationsList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationsList>): void;


    /**
     * Lists all operations available Azure Security Insights Resource Provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationsList>>;

    /**
     * Lists all operations available Azure Security Insights Resource Provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationsList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationsList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationsList>): void;
}

/**
 * @class
 * ScheduledAlertRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SecurityInsights.
 */
export interface ScheduledAlertRules {


    /**
     * Gets all scheduled alert rules.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScheduledAlertRulesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScheduledAlertRulesList>>;

    /**
     * Gets all scheduled alert rules.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScheduledAlertRulesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScheduledAlertRulesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScheduledAlertRulesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScheduledAlertRulesList>;
    list(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, callback: ServiceCallback<models.ScheduledAlertRulesList>): void;
    list(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScheduledAlertRulesList>): void;


    /**
     * Gets a scheduled alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {string} ruleId Alert rule ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScheduledAlertRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScheduledAlertRule>>;

    /**
     * Gets a scheduled alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {string} ruleId Alert rule ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScheduledAlertRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScheduledAlertRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScheduledAlertRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScheduledAlertRule>;
    get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, callback: ServiceCallback<models.ScheduledAlertRule>): void;
    get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScheduledAlertRule>): void;


    /**
     * Creates or updates the alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {string} ruleId Alert rule ID
     *
     * @param {object} alertScheduledtRule The alert rule
     *
     * @param {string} [alertScheduledtRule.etag] Etag of the alert rule.
     *
     * @param {string} alertScheduledtRule.ruleName The name for alerts created by
     * this alert rule.
     *
     * @param {string} alertScheduledtRule.description The description of the alert
     * rule.
     *
     * @param {string} alertScheduledtRule.severity The severity for alerts created
     * by this alert rule. Possible values include: 'Low', 'Medium', 'High',
     * 'Informational'
     *
     * @param {boolean} alertScheduledtRule.enabled Determines whether this alert
     * rule is enabled or disabled.
     *
     * @param {string} alertScheduledtRule.query The query that creates alerts for
     * this rule.
     *
     * @param {string} alertScheduledtRule.queryFrequency TimeSpan format
     * represents the frequncy for this alert rule to run.
     *
     * @param {string} alertScheduledtRule.queryPeriod TimeSpan format represents
     * the period that this alert rule looks at.
     *
     * @param {string} alertScheduledtRule.alertTriggerOperator The operation
     * against the threahold that triggers alert rule. Possible values include:
     * 'gt', 'lt', 'ne', 'eq'
     *
     * @param {number} alertScheduledtRule.alertTriggerThreshold The threahold
     * triggers this alert rule.
     *
     * @param {boolean} alertScheduledtRule.suppressionEnabled Determines whether
     * the suppression for this alert rule is enabled or disabled.
     *
     * @param {string} alertScheduledtRule.suppressionDuration TimeSpan format
     * represents the suppression to wait since last time this alert rule been
     * triggered.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScheduledAlertRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, alertScheduledtRule: models.ScheduledAlertRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScheduledAlertRule>>;

    /**
     * Creates or updates the alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {string} ruleId Alert rule ID
     *
     * @param {object} alertScheduledtRule The alert rule
     *
     * @param {string} [alertScheduledtRule.etag] Etag of the alert rule.
     *
     * @param {string} alertScheduledtRule.ruleName The name for alerts created by
     * this alert rule.
     *
     * @param {string} alertScheduledtRule.description The description of the alert
     * rule.
     *
     * @param {string} alertScheduledtRule.severity The severity for alerts created
     * by this alert rule. Possible values include: 'Low', 'Medium', 'High',
     * 'Informational'
     *
     * @param {boolean} alertScheduledtRule.enabled Determines whether this alert
     * rule is enabled or disabled.
     *
     * @param {string} alertScheduledtRule.query The query that creates alerts for
     * this rule.
     *
     * @param {string} alertScheduledtRule.queryFrequency TimeSpan format
     * represents the frequncy for this alert rule to run.
     *
     * @param {string} alertScheduledtRule.queryPeriod TimeSpan format represents
     * the period that this alert rule looks at.
     *
     * @param {string} alertScheduledtRule.alertTriggerOperator The operation
     * against the threahold that triggers alert rule. Possible values include:
     * 'gt', 'lt', 'ne', 'eq'
     *
     * @param {number} alertScheduledtRule.alertTriggerThreshold The threahold
     * triggers this alert rule.
     *
     * @param {boolean} alertScheduledtRule.suppressionEnabled Determines whether
     * the suppression for this alert rule is enabled or disabled.
     *
     * @param {string} alertScheduledtRule.suppressionDuration TimeSpan format
     * represents the suppression to wait since last time this alert rule been
     * triggered.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScheduledAlertRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScheduledAlertRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScheduledAlertRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, alertScheduledtRule: models.ScheduledAlertRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScheduledAlertRule>;
    create(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, alertScheduledtRule: models.ScheduledAlertRule, callback: ServiceCallback<models.ScheduledAlertRule>): void;
    create(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, alertScheduledtRule: models.ScheduledAlertRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScheduledAlertRule>): void;


    /**
     * Delete the alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {string} ruleId Alert rule ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete the alert rule.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} operationalInsightsResourceProvider The namespace of
     * workspaces resource provider- Microsoft.OperationalInsights.
     *
     * @param {string} workspaceName The name of the workspace.
     *
     * @param {string} ruleId Alert rule ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, ruleId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all scheduled alert rules.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScheduledAlertRulesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScheduledAlertRulesList>>;

    /**
     * Gets all scheduled alert rules.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScheduledAlertRulesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScheduledAlertRulesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScheduledAlertRulesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScheduledAlertRulesList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ScheduledAlertRulesList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScheduledAlertRulesList>): void;
}
