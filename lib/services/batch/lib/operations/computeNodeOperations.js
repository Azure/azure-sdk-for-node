/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * @summary Adds a user account to the specified compute node.
 *
 * You can add a user account to a node only when it is in the idle or running
 * state.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the machine on which you want to create a
 * user account.
 *
 * @param {object} user The user account to be created.
 *
 * @param {string} user.name The user name of the account.
 *
 * @param {boolean} [user.isAdmin] Whether the account should be an
 * administrator on the compute node. The default value is false.
 *
 * @param {date} [user.expiryTime] The time at which the account should expire.
 * If omitted, the default is 1 day from the current time. For Linux compute
 * nodes, the expiryTime has a precision up to a day.
 *
 * @param {string} [user.password] The password of the account. The password is
 * required for Windows nodes (those created with 'cloudServiceConfiguration',
 * or created with 'virtualMachineConfiguration' using a Windows image
 * reference). For Linux compute nodes, the password can optionally be
 * specified along with the sshPublicKey property.
 *
 * @param {string} [user.sshPublicKey] The SSH public key that can be used for
 * remote login to the compute node. The public key should be compatible with
 * OpenSSH encoding and should be base 64 encoded. This property can be
 * specified only for Linux nodes. If this is specified for a Windows node,
 * then the Batch service rejects the request; if you are calling the REST API
 * directly, the HTTP status code is 400 (Bad Request).
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeAddUserOptions] Additional parameters
 * for the operation
 *
 * @param {number} [options.computeNodeAddUserOptions.timeout] The maximum time
 * that the server can spend processing the request, in seconds. The default is
 * 30 seconds.
 *
 * @param {uuid} [options.computeNodeAddUserOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean} [options.computeNodeAddUserOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeAddUserOptions.ocpDate] The time the
 * request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _addUser(poolId, nodeId, user, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeAddUserOptions = (options && options.computeNodeAddUserOptions !== undefined) ? options.computeNodeAddUserOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (user === null || user === undefined) {
      throw new Error('user cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
    {
      timeout = computeNodeAddUserOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
    {
      clientRequestId = computeNodeAddUserOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
    {
      returnClientRequestId = computeNodeAddUserOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
    {
      ocpDate = computeNodeAddUserOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/users';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (user !== null && user !== undefined) {
      let requestModelMapper = new client.models['ComputeNodeUser']().mapper();
      requestModel = client.serialize(requestModelMapper, user, 'user');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(user, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Deletes a user account from the specified compute node.
 *
 * You can delete a user account to a node only when it is in the idle or
 * running state.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the machine on which you want to delete a
 * user account.
 *
 * @param {string} userName The name of the user account to delete.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeDeleteUserOptions] Additional parameters
 * for the operation
 *
 * @param {number} [options.computeNodeDeleteUserOptions.timeout] The maximum
 * time that the server can spend processing the request, in seconds. The
 * default is 30 seconds.
 *
 * @param {uuid} [options.computeNodeDeleteUserOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean}
 * [options.computeNodeDeleteUserOptions.returnClientRequestId] Whether the
 * server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeDeleteUserOptions.ocpDate] The time the
 * request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteUser(poolId, nodeId, userName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeDeleteUserOptions = (options && options.computeNodeDeleteUserOptions !== undefined) ? options.computeNodeDeleteUserOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (userName === null || userName === undefined || typeof userName.valueOf() !== 'string') {
      throw new Error('userName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
    {
      timeout = computeNodeDeleteUserOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
    {
      clientRequestId = computeNodeDeleteUserOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
    {
      returnClientRequestId = computeNodeDeleteUserOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
    {
      ocpDate = computeNodeDeleteUserOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/users/{userName}';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  requestUrl = requestUrl.replace('{userName}', encodeURIComponent(userName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Updates the password and expiration time of a user account on the
 * specified compute node.
 *
 * This operation replaces of all the updatable properties of the account. For
 * example, if the expiryTime element is not specified, the current value is
 * replaced with the default value, not left unmodified. You can update a user
 * account on a node only when it is in the idle or running state.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the machine on which you want to update a
 * user account.
 *
 * @param {string} userName The name of the user account to update.
 *
 * @param {object} nodeUpdateUserParameter The parameters for the request.
 *
 * @param {string} [nodeUpdateUserParameter.password] The password of the
 * account. The password is required for Windows nodes (those created with
 * 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration'
 * using a Windows image reference). For Linux compute nodes, the password can
 * optionally be specified along with the sshPublicKey property. If omitted,
 * any existing password is removed.
 *
 * @param {date} [nodeUpdateUserParameter.expiryTime] The time at which the
 * account should expire. If omitted, the default is 1 day from the current
 * time. For Linux compute nodes, the expiryTime has a precision up to a day.
 *
 * @param {string} [nodeUpdateUserParameter.sshPublicKey] The SSH public key
 * that can be used for remote login to the compute node. The public key should
 * be compatible with OpenSSH encoding and should be base 64 encoded. This
 * property can be specified only for Linux nodes. If this is specified for a
 * Windows node, then the Batch service rejects the request; if you are calling
 * the REST API directly, the HTTP status code is 400 (Bad Request). If
 * omitted, any existing SSH public key is removed.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeUpdateUserOptions] Additional parameters
 * for the operation
 *
 * @param {number} [options.computeNodeUpdateUserOptions.timeout] The maximum
 * time that the server can spend processing the request, in seconds. The
 * default is 30 seconds.
 *
 * @param {uuid} [options.computeNodeUpdateUserOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean}
 * [options.computeNodeUpdateUserOptions.returnClientRequestId] Whether the
 * server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeUpdateUserOptions.ocpDate] The time the
 * request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeUpdateUserOptions = (options && options.computeNodeUpdateUserOptions !== undefined) ? options.computeNodeUpdateUserOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (userName === null || userName === undefined || typeof userName.valueOf() !== 'string') {
      throw new Error('userName cannot be null or undefined and it must be of type string.');
    }
    if (nodeUpdateUserParameter === null || nodeUpdateUserParameter === undefined) {
      throw new Error('nodeUpdateUserParameter cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
    {
      timeout = computeNodeUpdateUserOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
    {
      clientRequestId = computeNodeUpdateUserOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
    {
      returnClientRequestId = computeNodeUpdateUserOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
    {
      ocpDate = computeNodeUpdateUserOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/users/{userName}';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  requestUrl = requestUrl.replace('{userName}', encodeURIComponent(userName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (nodeUpdateUserParameter !== null && nodeUpdateUserParameter !== undefined) {
      let requestModelMapper = new client.models['NodeUpdateUserParameter']().mapper();
      requestModel = client.serialize(requestModelMapper, nodeUpdateUserParameter, 'nodeUpdateUserParameter');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(nodeUpdateUserParameter, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets information about the specified compute node.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node that you want to get
 * information about.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeGetOptions] Additional parameters for
 * the operation
 *
 * @param {string} [options.computeNodeGetOptions.select] An OData $select
 * clause.
 *
 * @param {number} [options.computeNodeGetOptions.timeout] The maximum time
 * that the server can spend processing the request, in seconds. The default is
 * 30 seconds.
 *
 * @param {uuid} [options.computeNodeGetOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean} [options.computeNodeGetOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeGetOptions.ocpDate] The time the request
 * was issued. Client libraries typically set this to the current system clock
 * time; set it explicitly if you are calling the REST API directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ComputeNode} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(poolId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeGetOptions = (options && options.computeNodeGetOptions !== undefined) ? options.computeNodeGetOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let select;
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
    {
      select = computeNodeGetOptions.select;
      if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
        throw new Error('select must be of type string.');
      }
    }
    if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
    {
      timeout = computeNodeGetOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
    {
      clientRequestId = computeNodeGetOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
    {
      returnClientRequestId = computeNodeGetOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
    {
      ocpDate = computeNodeGetOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select));
  }
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ComputeNode']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Restarts the specified compute node.
 *
 * You can restart a node only if it is in an idle or running state.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node that you want to restart.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.nodeRebootOption] When to reboot the compute node
 * and what to do with currently running tasks. The default value is requeue.
 * Possible values include: 'requeue', 'terminate', 'taskCompletion',
 * 'retainedData'
 *
 * @param {object} [options.computeNodeRebootOptions] Additional parameters for
 * the operation
 *
 * @param {number} [options.computeNodeRebootOptions.timeout] The maximum time
 * that the server can spend processing the request, in seconds. The default is
 * 30 seconds.
 *
 * @param {uuid} [options.computeNodeRebootOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean} [options.computeNodeRebootOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeRebootOptions.ocpDate] The time the
 * request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _reboot(poolId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let nodeRebootOption = (options && options.nodeRebootOption !== undefined) ? options.nodeRebootOption : undefined;
  let computeNodeRebootOptions = (options && options.computeNodeRebootOptions !== undefined) ? options.computeNodeRebootOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (nodeRebootOption) {
      let allowedValues = [ 'requeue', 'terminate', 'taskCompletion', 'retainedData' ];
      if (!allowedValues.some( function(item) { return item === nodeRebootOption; })) {
        throw new Error(nodeRebootOption + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  let nodeRebootParameter;
  try {
    if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
    {
      timeout = computeNodeRebootOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
    {
      clientRequestId = computeNodeRebootOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
    {
      returnClientRequestId = computeNodeRebootOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
    {
      ocpDate = computeNodeRebootOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
    if (nodeRebootOption !== null && nodeRebootOption !== undefined)
    {
      nodeRebootParameter = new client.models['NodeRebootParameter']();
      nodeRebootParameter.nodeRebootOption = nodeRebootOption;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/reboot';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (nodeRebootParameter !== null && nodeRebootParameter !== undefined) {
      let requestModelMapper = new client.models['NodeRebootParameter']().mapper();
      requestModel = client.serialize(requestModelMapper, nodeRebootParameter, 'nodeRebootParameter');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(nodeRebootParameter, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Reinstalls the operating system on the specified compute node.
 *
 * You can reinstall the operating system on a node only if it is in an idle or
 * running state. This API can be invoked only on pools created with the cloud
 * service configuration property.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node that you want to restart.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.nodeReimageOption] When to reimage the compute node
 * and what to do with currently running tasks. The default value is requeue.
 * Possible values include: 'requeue', 'terminate', 'taskCompletion',
 * 'retainedData'
 *
 * @param {object} [options.computeNodeReimageOptions] Additional parameters
 * for the operation
 *
 * @param {number} [options.computeNodeReimageOptions.timeout] The maximum time
 * that the server can spend processing the request, in seconds. The default is
 * 30 seconds.
 *
 * @param {uuid} [options.computeNodeReimageOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean} [options.computeNodeReimageOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeReimageOptions.ocpDate] The time the
 * request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _reimage(poolId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let nodeReimageOption = (options && options.nodeReimageOption !== undefined) ? options.nodeReimageOption : undefined;
  let computeNodeReimageOptions = (options && options.computeNodeReimageOptions !== undefined) ? options.computeNodeReimageOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (nodeReimageOption) {
      let allowedValues = [ 'requeue', 'terminate', 'taskCompletion', 'retainedData' ];
      if (!allowedValues.some( function(item) { return item === nodeReimageOption; })) {
        throw new Error(nodeReimageOption + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  let nodeReimageParameter;
  try {
    if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
    {
      timeout = computeNodeReimageOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
    {
      clientRequestId = computeNodeReimageOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
    {
      returnClientRequestId = computeNodeReimageOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
    {
      ocpDate = computeNodeReimageOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
    if (nodeReimageOption !== null && nodeReimageOption !== undefined)
    {
      nodeReimageParameter = new client.models['NodeReimageParameter']();
      nodeReimageParameter.nodeReimageOption = nodeReimageOption;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/reimage';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (nodeReimageParameter !== null && nodeReimageParameter !== undefined) {
      let requestModelMapper = new client.models['NodeReimageParameter']().mapper();
      requestModel = client.serialize(requestModelMapper, nodeReimageParameter, 'nodeReimageParameter');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(nodeReimageParameter, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Disables task scheduling on the specified compute node.
 *
 * You can disable task scheduling on a node only if its current scheduling
 * state is enabled.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node on which you want to
 * disable task scheduling.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.nodeDisableSchedulingOption] What to do with
 * currently running tasks when disabling task scheduling on the compute node.
 * The default value is requeue. Possible values include: 'requeue',
 * 'terminate', 'taskCompletion'
 *
 * @param {object} [options.computeNodeDisableSchedulingOptions] Additional
 * parameters for the operation
 *
 * @param {number} [options.computeNodeDisableSchedulingOptions.timeout] The
 * maximum time that the server can spend processing the request, in seconds.
 * The default is 30 seconds.
 *
 * @param {uuid} [options.computeNodeDisableSchedulingOptions.clientRequestId]
 * The caller-generated request identity, in the form of a GUID with no
 * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean}
 * [options.computeNodeDisableSchedulingOptions.returnClientRequestId] Whether
 * the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeDisableSchedulingOptions.ocpDate] The time
 * the request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _disableScheduling(poolId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let nodeDisableSchedulingOption = (options && options.nodeDisableSchedulingOption !== undefined) ? options.nodeDisableSchedulingOption : undefined;
  let computeNodeDisableSchedulingOptions = (options && options.computeNodeDisableSchedulingOptions !== undefined) ? options.computeNodeDisableSchedulingOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (nodeDisableSchedulingOption) {
      let allowedValues = [ 'requeue', 'terminate', 'taskCompletion' ];
      if (!allowedValues.some( function(item) { return item === nodeDisableSchedulingOption; })) {
        throw new Error(nodeDisableSchedulingOption + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  let nodeDisableSchedulingParameter;
  try {
    if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
    {
      timeout = computeNodeDisableSchedulingOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
    {
      clientRequestId = computeNodeDisableSchedulingOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
    {
      returnClientRequestId = computeNodeDisableSchedulingOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
    {
      ocpDate = computeNodeDisableSchedulingOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
    if (nodeDisableSchedulingOption !== null && nodeDisableSchedulingOption !== undefined)
    {
      nodeDisableSchedulingParameter = new client.models['NodeDisableSchedulingParameter']();
      nodeDisableSchedulingParameter.nodeDisableSchedulingOption = nodeDisableSchedulingOption;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/disablescheduling';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (nodeDisableSchedulingParameter !== null && nodeDisableSchedulingParameter !== undefined) {
      let requestModelMapper = new client.models['NodeDisableSchedulingParameter']().mapper();
      requestModel = client.serialize(requestModelMapper, nodeDisableSchedulingParameter, 'nodeDisableSchedulingParameter');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(nodeDisableSchedulingParameter, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Enables task scheduling on the specified compute node.
 *
 * You can enable task scheduling on a node only if its current scheduling
 * state is disabled
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node on which you want to
 * enable task scheduling.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeEnableSchedulingOptions] Additional
 * parameters for the operation
 *
 * @param {number} [options.computeNodeEnableSchedulingOptions.timeout] The
 * maximum time that the server can spend processing the request, in seconds.
 * The default is 30 seconds.
 *
 * @param {uuid} [options.computeNodeEnableSchedulingOptions.clientRequestId]
 * The caller-generated request identity, in the form of a GUID with no
 * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean}
 * [options.computeNodeEnableSchedulingOptions.returnClientRequestId] Whether
 * the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeEnableSchedulingOptions.ocpDate] The time
 * the request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _enableScheduling(poolId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeEnableSchedulingOptions = (options && options.computeNodeEnableSchedulingOptions !== undefined) ? options.computeNodeEnableSchedulingOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
    {
      timeout = computeNodeEnableSchedulingOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
    {
      clientRequestId = computeNodeEnableSchedulingOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
    {
      returnClientRequestId = computeNodeEnableSchedulingOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
    {
      ocpDate = computeNodeEnableSchedulingOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/enablescheduling';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the settings required for remote login to a compute node.
 *
 * Before you can remotely login to a node using the remote login settings, you
 * must create a user account on the node. This API can be invoked only on
 * pools created with the virtual machine configuration property. For pools
 * created with a cloud service configuration, see the GetRemoteDesktop API.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node for which to obtain the
 * remote login settings.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeGetRemoteLoginSettingsOptions]
 * Additional parameters for the operation
 *
 * @param {number} [options.computeNodeGetRemoteLoginSettingsOptions.timeout]
 * The maximum time that the server can spend processing the request, in
 * seconds. The default is 30 seconds.
 *
 * @param {uuid}
 * [options.computeNodeGetRemoteLoginSettingsOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean}
 * [options.computeNodeGetRemoteLoginSettingsOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeGetRemoteLoginSettingsOptions.ocpDate] The
 * time the request was issued. Client libraries typically set this to the
 * current system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ComputeNodeGetRemoteLoginSettingsResult} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getRemoteLoginSettings(poolId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeGetRemoteLoginSettingsOptions = (options && options.computeNodeGetRemoteLoginSettingsOptions !== undefined) ? options.computeNodeGetRemoteLoginSettingsOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
    {
      timeout = computeNodeGetRemoteLoginSettingsOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
    {
      clientRequestId = computeNodeGetRemoteLoginSettingsOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
    {
      returnClientRequestId = computeNodeGetRemoteLoginSettingsOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
    {
      ocpDate = computeNodeGetRemoteLoginSettingsOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/remoteloginsettings';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ComputeNodeGetRemoteLoginSettingsResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Gets the Remote Desktop Protocol file for the specified compute
 * node.
 *
 * Before you can access a node by using the RDP file, you must create a user
 * account on the node. This API can only be invoked on pools created with a
 * cloud service configuration. For pools created with a virtual machine
 * configuration, see the GetRemoteLoginSettings API.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node for which you want to get
 * the Remote Desktop Protocol file.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeGetRemoteDesktopOptions] Additional
 * parameters for the operation
 *
 * @param {number} [options.computeNodeGetRemoteDesktopOptions.timeout] The
 * maximum time that the server can spend processing the request, in seconds.
 * The default is 30 seconds.
 *
 * @param {uuid} [options.computeNodeGetRemoteDesktopOptions.clientRequestId]
 * The caller-generated request identity, in the form of a GUID with no
 * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean}
 * [options.computeNodeGetRemoteDesktopOptions.returnClientRequestId] Whether
 * the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeGetRemoteDesktopOptions.ocpDate] The time
 * the request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getRemoteDesktop(poolId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeGetRemoteDesktopOptions = (options && options.computeNodeGetRemoteDesktopOptions !== undefined) ? options.computeNodeGetRemoteDesktopOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
    {
      timeout = computeNodeGetRemoteDesktopOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
    {
      clientRequestId = computeNodeGetRemoteDesktopOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
    {
      returnClientRequestId = computeNodeGetRemoteDesktopOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
    {
      ocpDate = computeNodeGetRemoteDesktopOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/rdp';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  httpRequest.streamedResponse = true;
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }

    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(`Unexpected status code: ${statusCode}`);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        if (responseBody !== undefined) parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }

    // Create Result
    let result = response;
    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Upload Azure Batch service log files from the specified compute
 * node to Azure Blob Storage.
 *
 * This is for gathering Azure Batch service log files in an automated fashion
 * from nodes if you are experiencing an error and wish to escalate to Azure
 * support. The Azure Batch service log files should be shared with Azure
 * support to aid in debugging issues with the Batch service.
 *
 * @param {string} poolId The ID of the pool that contains the compute node.
 *
 * @param {string} nodeId The ID of the compute node from which you want to
 * upload the Azure Batch service log files.
 *
 * @param {object} uploadBatchServiceLogsConfiguration The Azure Batch service
 * log files upload configuration.
 *
 * @param {string} uploadBatchServiceLogsConfiguration.containerUrl The URL of
 * the container within Azure Blob Storage to which to upload the Batch Service
 * log file(s). The URL must include a Shared Access Signature (SAS) granting
 * write permissions to the container. The SAS duration must allow enough time
 * for the upload to finish. The start time for SAS is optional and recommended
 * to not be specified.
 *
 * @param {date} uploadBatchServiceLogsConfiguration.startTime The start of the
 * time range from which to upload Batch Service log file(s). Any log file
 * containing a log message in the time range will be uploaded. This means that
 * the operation might retrieve more logs than have been requested since the
 * entire log file is always uploaded, but the operation should not retrieve
 * fewer logs than have been requested.
 *
 * @param {date} [uploadBatchServiceLogsConfiguration.endTime] The end of the
 * time range from which to upload Batch Service log file(s). Any log file
 * containing a log message in the time range will be uploaded. This means that
 * the operation might retrieve more logs than have been requested since the
 * entire log file is always uploaded, but the operation should not retrieve
 * fewer logs than have been requested. If omitted, the default is to upload
 * all logs available after the startTime.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeUploadBatchServiceLogsOptions]
 * Additional parameters for the operation
 *
 * @param {number} [options.computeNodeUploadBatchServiceLogsOptions.timeout]
 * The maximum time that the server can spend processing the request, in
 * seconds. The default is 30 seconds.
 *
 * @param {uuid}
 * [options.computeNodeUploadBatchServiceLogsOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean}
 * [options.computeNodeUploadBatchServiceLogsOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeUploadBatchServiceLogsOptions.ocpDate] The
 * time the request was issued. Client libraries typically set this to the
 * current system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link UploadBatchServiceLogsResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeUploadBatchServiceLogsOptions = (options && options.computeNodeUploadBatchServiceLogsOptions !== undefined) ? options.computeNodeUploadBatchServiceLogsOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
    if (uploadBatchServiceLogsConfiguration === null || uploadBatchServiceLogsConfiguration === undefined) {
      throw new Error('uploadBatchServiceLogsConfiguration cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
    {
      timeout = computeNodeUploadBatchServiceLogsOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
    {
      clientRequestId = computeNodeUploadBatchServiceLogsOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
    {
      returnClientRequestId = computeNodeUploadBatchServiceLogsOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
    {
      ocpDate = computeNodeUploadBatchServiceLogsOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/uploadbatchservicelogs';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (uploadBatchServiceLogsConfiguration !== null && uploadBatchServiceLogsConfiguration !== undefined) {
      let requestModelMapper = new client.models['UploadBatchServiceLogsConfiguration']().mapper();
      requestModel = client.serialize(requestModelMapper, uploadBatchServiceLogsConfiguration, 'uploadBatchServiceLogsConfiguration');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(uploadBatchServiceLogsConfiguration, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['UploadBatchServiceLogsResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lists the compute nodes in the specified pool.
 *
 * @param {string} poolId The ID of the pool from which you want to list nodes.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeListOptions] Additional parameters for
 * the operation
 *
 * @param {string} [options.computeNodeListOptions.filter] An OData $filter
 * clause. For more information on constructing this filter, see
 * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
 *
 * @param {string} [options.computeNodeListOptions.select] An OData $select
 * clause.
 *
 * @param {number} [options.computeNodeListOptions.maxResults] The maximum
 * number of items to return in the response. A maximum of 1000 nodes can be
 * returned.
 *
 * @param {number} [options.computeNodeListOptions.timeout] The maximum time
 * that the server can spend processing the request, in seconds. The default is
 * 30 seconds.
 *
 * @param {uuid} [options.computeNodeListOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean} [options.computeNodeListOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeListOptions.ocpDate] The time the request
 * was issued. Client libraries typically set this to the current system clock
 * time; set it explicitly if you are calling the REST API directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ComputeNodeListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(poolId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeListOptions = (options && options.computeNodeListOptions !== undefined) ? options.computeNodeListOptions : undefined;
  // Validate
  try {
    if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
      throw new Error('poolId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let filter;
  let select;
  let maxResults;
  let timeout;
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
    {
      filter = computeNodeListOptions.filter;
      if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
        throw new Error('filter must be of type string.');
      }
    }
    if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
    {
      select = computeNodeListOptions.select;
      if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
        throw new Error('select must be of type string.');
      }
    }
    if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
    {
      maxResults = computeNodeListOptions.maxResults;
      if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
        throw new Error('maxResults must be of type number.');
      }
    }
    if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
    {
      timeout = computeNodeListOptions.timeout;
      if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
        throw new Error('timeout must be of type number.');
      }
    }
    if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
    {
      clientRequestId = computeNodeListOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
    {
      returnClientRequestId = computeNodeListOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
    {
      ocpDate = computeNodeListOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes';
  requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select));
  }
  if (maxResults !== null && maxResults !== undefined) {
    queryParameters.push('maxresults=' + encodeURIComponent(maxResults.toString()));
  }
  if (timeout !== null && timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(timeout.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ComputeNodeListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lists the compute nodes in the specified pool.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.computeNodeListNextOptions] Additional parameters
 * for the operation
 *
 * @param {uuid} [options.computeNodeListNextOptions.clientRequestId] The
 * caller-generated request identity, in the form of a GUID with no decoration
 * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
 *
 * @param {boolean} [options.computeNodeListNextOptions.returnClientRequestId]
 * Whether the server should return the client-request-id in the response.
 *
 * @param {date} [options.computeNodeListNextOptions.ocpDate] The time the
 * request was issued. Client libraries typically set this to the current
 * system clock time; set it explicitly if you are calling the REST API
 * directly.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ComputeNodeListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let computeNodeListNextOptions = (options && options.computeNodeListNextOptions !== undefined) ? options.computeNodeListNextOptions : undefined;
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let clientRequestId;
  let returnClientRequestId;
  let ocpDate;
  try {
    if (computeNodeListNextOptions !== null && computeNodeListNextOptions !== undefined)
    {
      clientRequestId = computeNodeListNextOptions.clientRequestId;
      if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
        throw new Error('clientRequestId must be of type string and must be a valid uuid.');
      }
    }
    if (computeNodeListNextOptions !== null && computeNodeListNextOptions !== undefined)
    {
      returnClientRequestId = computeNodeListNextOptions.returnClientRequestId;
      if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
        throw new Error('returnClientRequestId must be of type boolean.');
      }
    }
    if (computeNodeListNextOptions !== null && computeNodeListNextOptions !== undefined)
    {
      ocpDate = computeNodeListNextOptions.ocpDate;
      if (ocpDate && !(ocpDate instanceof Date ||
          (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
            throw new Error('ocpDate must be of type date.');
          }
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if (clientRequestId !== undefined && clientRequestId !== null) {
    httpRequest.headers['client-request-id'] = clientRequestId.toString();
  }
  if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
    httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
  }
  if (ocpDate !== undefined && ocpDate !== null) {
    httpRequest.headers['ocp-date'] = ocpDate.toUTCString();
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['BatchError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ComputeNodeListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ComputeNodeOperations. */
class ComputeNodeOperations {
  /**
   * Create a ComputeNodeOperations.
   * @param {BatchServiceClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._addUser = _addUser;
    this._deleteUser = _deleteUser;
    this._updateUser = _updateUser;
    this._get = _get;
    this._reboot = _reboot;
    this._reimage = _reimage;
    this._disableScheduling = _disableScheduling;
    this._enableScheduling = _enableScheduling;
    this._getRemoteLoginSettings = _getRemoteLoginSettings;
    this._getRemoteDesktop = _getRemoteDesktop;
    this._uploadBatchServiceLogs = _uploadBatchServiceLogs;
    this._list = _list;
    this._listNext = _listNext;
  }

  /**
   * @summary Adds a user account to the specified compute node.
   *
   * You can add a user account to a node only when it is in the idle or running
   * state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to create a
   * user account.
   *
   * @param {object} user The user account to be created.
   *
   * @param {string} user.name The user name of the account.
   *
   * @param {boolean} [user.isAdmin] Whether the account should be an
   * administrator on the compute node. The default value is false.
   *
   * @param {date} [user.expiryTime] The time at which the account should expire.
   * If omitted, the default is 1 day from the current time. For Linux compute
   * nodes, the expiryTime has a precision up to a day.
   *
   * @param {string} [user.password] The password of the account. The password is
   * required for Windows nodes (those created with 'cloudServiceConfiguration',
   * or created with 'virtualMachineConfiguration' using a Windows image
   * reference). For Linux compute nodes, the password can optionally be
   * specified along with the sshPublicKey property.
   *
   * @param {string} [user.sshPublicKey] The SSH public key that can be used for
   * remote login to the compute node. The public key should be compatible with
   * OpenSSH encoding and should be base 64 encoded. This property can be
   * specified only for Linux nodes. If this is specified for a Windows node,
   * then the Batch service rejects the request; if you are calling the REST API
   * directly, the HTTP status code is 400 (Bad Request).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeAddUserOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeAddUserOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeAddUserOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeAddUserOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeAddUserOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  addUserWithHttpOperationResponse(poolId, nodeId, user, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._addUser(poolId, nodeId, user, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Adds a user account to the specified compute node.
   *
   * You can add a user account to a node only when it is in the idle or running
   * state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to create a
   * user account.
   *
   * @param {object} user The user account to be created.
   *
   * @param {string} user.name The user name of the account.
   *
   * @param {boolean} [user.isAdmin] Whether the account should be an
   * administrator on the compute node. The default value is false.
   *
   * @param {date} [user.expiryTime] The time at which the account should expire.
   * If omitted, the default is 1 day from the current time. For Linux compute
   * nodes, the expiryTime has a precision up to a day.
   *
   * @param {string} [user.password] The password of the account. The password is
   * required for Windows nodes (those created with 'cloudServiceConfiguration',
   * or created with 'virtualMachineConfiguration' using a Windows image
   * reference). For Linux compute nodes, the password can optionally be
   * specified along with the sshPublicKey property.
   *
   * @param {string} [user.sshPublicKey] The SSH public key that can be used for
   * remote login to the compute node. The public key should be compatible with
   * OpenSSH encoding and should be base 64 encoded. This property can be
   * specified only for Linux nodes. If this is specified for a Windows node,
   * then the Batch service rejects the request; if you are calling the REST API
   * directly, the HTTP status code is 400 (Bad Request).
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeAddUserOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeAddUserOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeAddUserOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeAddUserOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeAddUserOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  addUser(poolId, nodeId, user, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._addUser(poolId, nodeId, user, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._addUser(poolId, nodeId, user, options, optionalCallback);
    }
  }

  /**
   * @summary Deletes a user account from the specified compute node.
   *
   * You can delete a user account to a node only when it is in the idle or
   * running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to delete a
   * user account.
   *
   * @param {string} userName The name of the user account to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeDeleteUserOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeDeleteUserOptions.timeout] The maximum
   * time that the server can spend processing the request, in seconds. The
   * default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeDeleteUserOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeDeleteUserOptions.returnClientRequestId] Whether the
   * server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeDeleteUserOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteUserWithHttpOperationResponse(poolId, nodeId, userName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteUser(poolId, nodeId, userName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deletes a user account from the specified compute node.
   *
   * You can delete a user account to a node only when it is in the idle or
   * running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to delete a
   * user account.
   *
   * @param {string} userName The name of the user account to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeDeleteUserOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeDeleteUserOptions.timeout] The maximum
   * time that the server can spend processing the request, in seconds. The
   * default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeDeleteUserOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeDeleteUserOptions.returnClientRequestId] Whether the
   * server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeDeleteUserOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUser(poolId, nodeId, userName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteUser(poolId, nodeId, userName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteUser(poolId, nodeId, userName, options, optionalCallback);
    }
  }

  /**
   * @summary Updates the password and expiration time of a user account on the
   * specified compute node.
   *
   * This operation replaces of all the updatable properties of the account. For
   * example, if the expiryTime element is not specified, the current value is
   * replaced with the default value, not left unmodified. You can update a user
   * account on a node only when it is in the idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to update a
   * user account.
   *
   * @param {string} userName The name of the user account to update.
   *
   * @param {object} nodeUpdateUserParameter The parameters for the request.
   *
   * @param {string} [nodeUpdateUserParameter.password] The password of the
   * account. The password is required for Windows nodes (those created with
   * 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration'
   * using a Windows image reference). For Linux compute nodes, the password can
   * optionally be specified along with the sshPublicKey property. If omitted,
   * any existing password is removed.
   *
   * @param {date} [nodeUpdateUserParameter.expiryTime] The time at which the
   * account should expire. If omitted, the default is 1 day from the current
   * time. For Linux compute nodes, the expiryTime has a precision up to a day.
   *
   * @param {string} [nodeUpdateUserParameter.sshPublicKey] The SSH public key
   * that can be used for remote login to the compute node. The public key should
   * be compatible with OpenSSH encoding and should be base 64 encoded. This
   * property can be specified only for Linux nodes. If this is specified for a
   * Windows node, then the Batch service rejects the request; if you are calling
   * the REST API directly, the HTTP status code is 400 (Bad Request). If
   * omitted, any existing SSH public key is removed.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeUpdateUserOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeUpdateUserOptions.timeout] The maximum
   * time that the server can spend processing the request, in seconds. The
   * default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeUpdateUserOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeUpdateUserOptions.returnClientRequestId] Whether the
   * server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeUpdateUserOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateUserWithHttpOperationResponse(poolId, nodeId, userName, nodeUpdateUserParameter, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Updates the password and expiration time of a user account on the
   * specified compute node.
   *
   * This operation replaces of all the updatable properties of the account. For
   * example, if the expiryTime element is not specified, the current value is
   * replaced with the default value, not left unmodified. You can update a user
   * account on a node only when it is in the idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to update a
   * user account.
   *
   * @param {string} userName The name of the user account to update.
   *
   * @param {object} nodeUpdateUserParameter The parameters for the request.
   *
   * @param {string} [nodeUpdateUserParameter.password] The password of the
   * account. The password is required for Windows nodes (those created with
   * 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration'
   * using a Windows image reference). For Linux compute nodes, the password can
   * optionally be specified along with the sshPublicKey property. If omitted,
   * any existing password is removed.
   *
   * @param {date} [nodeUpdateUserParameter.expiryTime] The time at which the
   * account should expire. If omitted, the default is 1 day from the current
   * time. For Linux compute nodes, the expiryTime has a precision up to a day.
   *
   * @param {string} [nodeUpdateUserParameter.sshPublicKey] The SSH public key
   * that can be used for remote login to the compute node. The public key should
   * be compatible with OpenSSH encoding and should be base 64 encoded. This
   * property can be specified only for Linux nodes. If this is specified for a
   * Windows node, then the Batch service rejects the request; if you are calling
   * the REST API directly, the HTTP status code is 400 (Bad Request). If
   * omitted, any existing SSH public key is removed.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeUpdateUserOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeUpdateUserOptions.timeout] The maximum
   * time that the server can spend processing the request, in seconds. The
   * default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeUpdateUserOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeUpdateUserOptions.returnClientRequestId] Whether the
   * server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeUpdateUserOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateUser(poolId, nodeId, userName, nodeUpdateUserParameter, options, optionalCallback);
    }
  }

  /**
   * @summary Gets information about the specified compute node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to get
   * information about.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeGetOptions] Additional parameters for
   * the operation
   *
   * @param {string} [options.computeNodeGetOptions.select] An OData $select
   * clause.
   *
   * @param {number} [options.computeNodeGetOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeGetOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeGetOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeGetOptions.ocpDate] The time the request
   * was issued. Client libraries typically set this to the current system clock
   * time; set it explicitly if you are calling the REST API directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ComputeNode>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(poolId, nodeId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(poolId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets information about the specified compute node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to get
   * information about.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeGetOptions] Additional parameters for
   * the operation
   *
   * @param {string} [options.computeNodeGetOptions.select] An OData $select
   * clause.
   *
   * @param {number} [options.computeNodeGetOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeGetOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeGetOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeGetOptions.ocpDate] The time the request
   * was issued. Client libraries typically set this to the current system clock
   * time; set it explicitly if you are calling the REST API directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ComputeNode} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ComputeNode} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(poolId, nodeId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(poolId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(poolId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Restarts the specified compute node.
   *
   * You can restart a node only if it is in an idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeRebootOption] When to reboot the compute node
   * and what to do with currently running tasks. The default value is requeue.
   * Possible values include: 'requeue', 'terminate', 'taskCompletion',
   * 'retainedData'
   *
   * @param {object} [options.computeNodeRebootOptions] Additional parameters for
   * the operation
   *
   * @param {number} [options.computeNodeRebootOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeRebootOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeRebootOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeRebootOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  rebootWithHttpOperationResponse(poolId, nodeId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._reboot(poolId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Restarts the specified compute node.
   *
   * You can restart a node only if it is in an idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeRebootOption] When to reboot the compute node
   * and what to do with currently running tasks. The default value is requeue.
   * Possible values include: 'requeue', 'terminate', 'taskCompletion',
   * 'retainedData'
   *
   * @param {object} [options.computeNodeRebootOptions] Additional parameters for
   * the operation
   *
   * @param {number} [options.computeNodeRebootOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeRebootOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeRebootOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeRebootOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  reboot(poolId, nodeId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._reboot(poolId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._reboot(poolId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Reinstalls the operating system on the specified compute node.
   *
   * You can reinstall the operating system on a node only if it is in an idle or
   * running state. This API can be invoked only on pools created with the cloud
   * service configuration property.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeReimageOption] When to reimage the compute node
   * and what to do with currently running tasks. The default value is requeue.
   * Possible values include: 'requeue', 'terminate', 'taskCompletion',
   * 'retainedData'
   *
   * @param {object} [options.computeNodeReimageOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeReimageOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeReimageOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeReimageOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeReimageOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  reimageWithHttpOperationResponse(poolId, nodeId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._reimage(poolId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Reinstalls the operating system on the specified compute node.
   *
   * You can reinstall the operating system on a node only if it is in an idle or
   * running state. This API can be invoked only on pools created with the cloud
   * service configuration property.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeReimageOption] When to reimage the compute node
   * and what to do with currently running tasks. The default value is requeue.
   * Possible values include: 'requeue', 'terminate', 'taskCompletion',
   * 'retainedData'
   *
   * @param {object} [options.computeNodeReimageOptions] Additional parameters
   * for the operation
   *
   * @param {number} [options.computeNodeReimageOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeReimageOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeReimageOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeReimageOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  reimage(poolId, nodeId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._reimage(poolId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._reimage(poolId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Disables task scheduling on the specified compute node.
   *
   * You can disable task scheduling on a node only if its current scheduling
   * state is enabled.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * disable task scheduling.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeDisableSchedulingOption] What to do with
   * currently running tasks when disabling task scheduling on the compute node.
   * The default value is requeue. Possible values include: 'requeue',
   * 'terminate', 'taskCompletion'
   *
   * @param {object} [options.computeNodeDisableSchedulingOptions] Additional
   * parameters for the operation
   *
   * @param {number} [options.computeNodeDisableSchedulingOptions.timeout] The
   * maximum time that the server can spend processing the request, in seconds.
   * The default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeDisableSchedulingOptions.clientRequestId]
   * The caller-generated request identity, in the form of a GUID with no
   * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeDisableSchedulingOptions.returnClientRequestId] Whether
   * the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeDisableSchedulingOptions.ocpDate] The time
   * the request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  disableSchedulingWithHttpOperationResponse(poolId, nodeId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._disableScheduling(poolId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Disables task scheduling on the specified compute node.
   *
   * You can disable task scheduling on a node only if its current scheduling
   * state is enabled.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * disable task scheduling.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeDisableSchedulingOption] What to do with
   * currently running tasks when disabling task scheduling on the compute node.
   * The default value is requeue. Possible values include: 'requeue',
   * 'terminate', 'taskCompletion'
   *
   * @param {object} [options.computeNodeDisableSchedulingOptions] Additional
   * parameters for the operation
   *
   * @param {number} [options.computeNodeDisableSchedulingOptions.timeout] The
   * maximum time that the server can spend processing the request, in seconds.
   * The default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeDisableSchedulingOptions.clientRequestId]
   * The caller-generated request identity, in the form of a GUID with no
   * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeDisableSchedulingOptions.returnClientRequestId] Whether
   * the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeDisableSchedulingOptions.ocpDate] The time
   * the request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  disableScheduling(poolId, nodeId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._disableScheduling(poolId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._disableScheduling(poolId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Enables task scheduling on the specified compute node.
   *
   * You can enable task scheduling on a node only if its current scheduling
   * state is disabled
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * enable task scheduling.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeEnableSchedulingOptions] Additional
   * parameters for the operation
   *
   * @param {number} [options.computeNodeEnableSchedulingOptions.timeout] The
   * maximum time that the server can spend processing the request, in seconds.
   * The default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeEnableSchedulingOptions.clientRequestId]
   * The caller-generated request identity, in the form of a GUID with no
   * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeEnableSchedulingOptions.returnClientRequestId] Whether
   * the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeEnableSchedulingOptions.ocpDate] The time
   * the request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  enableSchedulingWithHttpOperationResponse(poolId, nodeId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._enableScheduling(poolId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Enables task scheduling on the specified compute node.
   *
   * You can enable task scheduling on a node only if its current scheduling
   * state is disabled
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * enable task scheduling.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeEnableSchedulingOptions] Additional
   * parameters for the operation
   *
   * @param {number} [options.computeNodeEnableSchedulingOptions.timeout] The
   * maximum time that the server can spend processing the request, in seconds.
   * The default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeEnableSchedulingOptions.clientRequestId]
   * The caller-generated request identity, in the form of a GUID with no
   * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeEnableSchedulingOptions.returnClientRequestId] Whether
   * the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeEnableSchedulingOptions.ocpDate] The time
   * the request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  enableScheduling(poolId, nodeId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._enableScheduling(poolId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._enableScheduling(poolId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the settings required for remote login to a compute node.
   *
   * Before you can remotely login to a node using the remote login settings, you
   * must create a user account on the node. This API can be invoked only on
   * pools created with the virtual machine configuration property. For pools
   * created with a cloud service configuration, see the GetRemoteDesktop API.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node for which to obtain the
   * remote login settings.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeGetRemoteLoginSettingsOptions]
   * Additional parameters for the operation
   *
   * @param {number} [options.computeNodeGetRemoteLoginSettingsOptions.timeout]
   * The maximum time that the server can spend processing the request, in
   * seconds. The default is 30 seconds.
   *
   * @param {uuid}
   * [options.computeNodeGetRemoteLoginSettingsOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeGetRemoteLoginSettingsOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeGetRemoteLoginSettingsOptions.ocpDate] The
   * time the request was issued. Client libraries typically set this to the
   * current system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ComputeNodeGetRemoteLoginSettingsResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getRemoteLoginSettingsWithHttpOperationResponse(poolId, nodeId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getRemoteLoginSettings(poolId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the settings required for remote login to a compute node.
   *
   * Before you can remotely login to a node using the remote login settings, you
   * must create a user account on the node. This API can be invoked only on
   * pools created with the virtual machine configuration property. For pools
   * created with a cloud service configuration, see the GetRemoteDesktop API.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node for which to obtain the
   * remote login settings.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeGetRemoteLoginSettingsOptions]
   * Additional parameters for the operation
   *
   * @param {number} [options.computeNodeGetRemoteLoginSettingsOptions.timeout]
   * The maximum time that the server can spend processing the request, in
   * seconds. The default is 30 seconds.
   *
   * @param {uuid}
   * [options.computeNodeGetRemoteLoginSettingsOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeGetRemoteLoginSettingsOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeGetRemoteLoginSettingsOptions.ocpDate] The
   * time the request was issued. Client libraries typically set this to the
   * current system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ComputeNodeGetRemoteLoginSettingsResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ComputeNodeGetRemoteLoginSettingsResult} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getRemoteLoginSettings(poolId, nodeId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getRemoteLoginSettings(poolId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getRemoteLoginSettings(poolId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Gets the Remote Desktop Protocol file for the specified compute
   * node.
   *
   * Before you can access a node by using the RDP file, you must create a user
   * account on the node. This API can only be invoked on pools created with a
   * cloud service configuration. For pools created with a virtual machine
   * configuration, see the GetRemoteLoginSettings API.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node for which you want to get
   * the Remote Desktop Protocol file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeGetRemoteDesktopOptions] Additional
   * parameters for the operation
   *
   * @param {number} [options.computeNodeGetRemoteDesktopOptions.timeout] The
   * maximum time that the server can spend processing the request, in seconds.
   * The default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeGetRemoteDesktopOptions.clientRequestId]
   * The caller-generated request identity, in the form of a GUID with no
   * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeGetRemoteDesktopOptions.returnClientRequestId] Whether
   * the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeGetRemoteDesktopOptions.ocpDate] The time
   * the request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getRemoteDesktopWithHttpOperationResponse(poolId, nodeId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getRemoteDesktop(poolId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Gets the Remote Desktop Protocol file for the specified compute
   * node.
   *
   * Before you can access a node by using the RDP file, you must create a user
   * account on the node. This API can only be invoked on pools created with a
   * cloud service configuration. For pools created with a virtual machine
   * configuration, see the GetRemoteLoginSettings API.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node for which you want to get
   * the Remote Desktop Protocol file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeGetRemoteDesktopOptions] Additional
   * parameters for the operation
   *
   * @param {number} [options.computeNodeGetRemoteDesktopOptions.timeout] The
   * maximum time that the server can spend processing the request, in seconds.
   * The default is 30 seconds.
   *
   * @param {uuid} [options.computeNodeGetRemoteDesktopOptions.clientRequestId]
   * The caller-generated request identity, in the form of a GUID with no
   * decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeGetRemoteDesktopOptions.returnClientRequestId] Whether
   * the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeGetRemoteDesktopOptions.ocpDate] The time
   * the request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getRemoteDesktop(poolId, nodeId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getRemoteDesktop(poolId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getRemoteDesktop(poolId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Upload Azure Batch service log files from the specified compute
   * node to Azure Blob Storage.
   *
   * This is for gathering Azure Batch service log files in an automated fashion
   * from nodes if you are experiencing an error and wish to escalate to Azure
   * support. The Azure Batch service log files should be shared with Azure
   * support to aid in debugging issues with the Batch service.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node from which you want to
   * upload the Azure Batch service log files.
   *
   * @param {object} uploadBatchServiceLogsConfiguration The Azure Batch service
   * log files upload configuration.
   *
   * @param {string} uploadBatchServiceLogsConfiguration.containerUrl The URL of
   * the container within Azure Blob Storage to which to upload the Batch Service
   * log file(s). The URL must include a Shared Access Signature (SAS) granting
   * write permissions to the container. The SAS duration must allow enough time
   * for the upload to finish. The start time for SAS is optional and recommended
   * to not be specified.
   *
   * @param {date} uploadBatchServiceLogsConfiguration.startTime The start of the
   * time range from which to upload Batch Service log file(s). Any log file
   * containing a log message in the time range will be uploaded. This means that
   * the operation might retrieve more logs than have been requested since the
   * entire log file is always uploaded, but the operation should not retrieve
   * fewer logs than have been requested.
   *
   * @param {date} [uploadBatchServiceLogsConfiguration.endTime] The end of the
   * time range from which to upload Batch Service log file(s). Any log file
   * containing a log message in the time range will be uploaded. This means that
   * the operation might retrieve more logs than have been requested since the
   * entire log file is always uploaded, but the operation should not retrieve
   * fewer logs than have been requested. If omitted, the default is to upload
   * all logs available after the startTime.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeUploadBatchServiceLogsOptions]
   * Additional parameters for the operation
   *
   * @param {number} [options.computeNodeUploadBatchServiceLogsOptions.timeout]
   * The maximum time that the server can spend processing the request, in
   * seconds. The default is 30 seconds.
   *
   * @param {uuid}
   * [options.computeNodeUploadBatchServiceLogsOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeUploadBatchServiceLogsOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeUploadBatchServiceLogsOptions.ocpDate] The
   * time the request was issued. Client libraries typically set this to the
   * current system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UploadBatchServiceLogsResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  uploadBatchServiceLogsWithHttpOperationResponse(poolId, nodeId, uploadBatchServiceLogsConfiguration, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Upload Azure Batch service log files from the specified compute
   * node to Azure Blob Storage.
   *
   * This is for gathering Azure Batch service log files in an automated fashion
   * from nodes if you are experiencing an error and wish to escalate to Azure
   * support. The Azure Batch service log files should be shared with Azure
   * support to aid in debugging issues with the Batch service.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node from which you want to
   * upload the Azure Batch service log files.
   *
   * @param {object} uploadBatchServiceLogsConfiguration The Azure Batch service
   * log files upload configuration.
   *
   * @param {string} uploadBatchServiceLogsConfiguration.containerUrl The URL of
   * the container within Azure Blob Storage to which to upload the Batch Service
   * log file(s). The URL must include a Shared Access Signature (SAS) granting
   * write permissions to the container. The SAS duration must allow enough time
   * for the upload to finish. The start time for SAS is optional and recommended
   * to not be specified.
   *
   * @param {date} uploadBatchServiceLogsConfiguration.startTime The start of the
   * time range from which to upload Batch Service log file(s). Any log file
   * containing a log message in the time range will be uploaded. This means that
   * the operation might retrieve more logs than have been requested since the
   * entire log file is always uploaded, but the operation should not retrieve
   * fewer logs than have been requested.
   *
   * @param {date} [uploadBatchServiceLogsConfiguration.endTime] The end of the
   * time range from which to upload Batch Service log file(s). Any log file
   * containing a log message in the time range will be uploaded. This means that
   * the operation might retrieve more logs than have been requested since the
   * entire log file is always uploaded, but the operation should not retrieve
   * fewer logs than have been requested. If omitted, the default is to upload
   * all logs available after the startTime.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeUploadBatchServiceLogsOptions]
   * Additional parameters for the operation
   *
   * @param {number} [options.computeNodeUploadBatchServiceLogsOptions.timeout]
   * The maximum time that the server can spend processing the request, in
   * seconds. The default is 30 seconds.
   *
   * @param {uuid}
   * [options.computeNodeUploadBatchServiceLogsOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean}
   * [options.computeNodeUploadBatchServiceLogsOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeUploadBatchServiceLogsOptions.ocpDate] The
   * time the request was issued. Client libraries typically set this to the
   * current system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {UploadBatchServiceLogsResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UploadBatchServiceLogsResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._uploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, options, optionalCallback);
    }
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} poolId The ID of the pool from which you want to list nodes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeListOptions] Additional parameters for
   * the operation
   *
   * @param {string} [options.computeNodeListOptions.filter] An OData $filter
   * clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
   *
   * @param {string} [options.computeNodeListOptions.select] An OData $select
   * clause.
   *
   * @param {number} [options.computeNodeListOptions.maxResults] The maximum
   * number of items to return in the response. A maximum of 1000 nodes can be
   * returned.
   *
   * @param {number} [options.computeNodeListOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeListOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeListOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeListOptions.ocpDate] The time the request
   * was issued. Client libraries typically set this to the current system clock
   * time; set it explicitly if you are calling the REST API directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ComputeNodeListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(poolId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(poolId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} poolId The ID of the pool from which you want to list nodes.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeListOptions] Additional parameters for
   * the operation
   *
   * @param {string} [options.computeNodeListOptions.filter] An OData $filter
   * clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
   *
   * @param {string} [options.computeNodeListOptions.select] An OData $select
   * clause.
   *
   * @param {number} [options.computeNodeListOptions.maxResults] The maximum
   * number of items to return in the response. A maximum of 1000 nodes can be
   * returned.
   *
   * @param {number} [options.computeNodeListOptions.timeout] The maximum time
   * that the server can spend processing the request, in seconds. The default is
   * 30 seconds.
   *
   * @param {uuid} [options.computeNodeListOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeListOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeListOptions.ocpDate] The time the request
   * was issued. Client libraries typically set this to the current system clock
   * time; set it explicitly if you are calling the REST API directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ComputeNodeListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ComputeNodeListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(poolId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(poolId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(poolId, options, optionalCallback);
    }
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeListNextOptions] Additional parameters
   * for the operation
   *
   * @param {uuid} [options.computeNodeListNextOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeListNextOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeListNextOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ComputeNodeListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.computeNodeListNextOptions] Additional parameters
   * for the operation
   *
   * @param {uuid} [options.computeNodeListNextOptions.clientRequestId] The
   * caller-generated request identity, in the form of a GUID with no decoration
   * such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   *
   * @param {boolean} [options.computeNodeListNextOptions.returnClientRequestId]
   * Whether the server should return the client-request-id in the response.
   *
   * @param {date} [options.computeNodeListNextOptions.ocpDate] The time the
   * request was issued. Client libraries typically set this to the current
   * system clock time; set it explicitly if you are calling the REST API
   * directly.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ComputeNodeListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ComputeNodeListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = ComputeNodeOperations;
