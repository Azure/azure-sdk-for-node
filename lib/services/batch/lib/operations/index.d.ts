/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as moment from 'moment';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * Application
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface Application {

    /**
     * Lists all of the applications available in the specified account.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.applicationListOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.applicationListOptions.maxResults] Sets the
     * maximum number of items to return in the response.
     * 
     * @param {number} [options.applicationListOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.applicationListOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.applicationListOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.applicationListOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { applicationListOptions? : models.ApplicationListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;
    list(callback: ServiceCallback<models.ApplicationListResult>): void;

    /**
     * Gets information about the specified application.
     *
     * @param {string} applicationId The id of the application.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.applicationGetOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.applicationGetOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.applicationGetOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.applicationGetOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.applicationGetOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationId: string, options: { applicationGetOptions? : models.ApplicationGetOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSummary>): void;
    get(applicationId: string, callback: ServiceCallback<models.ApplicationSummary>): void;

    /**
     * Lists all of the applications available in the specified account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.applicationListNextOptions] Additional parameters
     * for the operation
     * 
     * @param {string} [options.applicationListNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.applicationListNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.applicationListNextOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { applicationListNextOptions? : models.ApplicationListNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationListResult>): void;
}

/**
 * @class
 * Pool
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface Pool {

    /**
     * Lists the usage metrics, aggregated by pool across individual time
     * intervals, for the specified account.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolListPoolUsageMetricsOptions] Additional
     * parameters for the operation
     * 
     * @param {date} [options.poolListPoolUsageMetricsOptions.startTime] The
     * earliest time from which to include metrics. This must be at least two and
     * a half hours before the current time.
     * 
     * @param {date} [options.poolListPoolUsageMetricsOptions.endTime] The latest
     * time from which to include metrics. This must be at least two hours before
     * the current time.
     * 
     * @param {string} [options.poolListPoolUsageMetricsOptions.filter] Sets an
     * OData $filter clause.
     * 
     * @param {number} [options.poolListPoolUsageMetricsOptions.maxResults] Sets
     * the maximum number of items to return in the response.
     * 
     * @param {number} [options.poolListPoolUsageMetricsOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.poolListPoolUsageMetricsOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.poolListPoolUsageMetricsOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.poolListPoolUsageMetricsOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPoolUsageMetrics(options: { poolListPoolUsageMetricsOptions? : models.PoolListPoolUsageMetricsOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PoolListPoolUsageMetricsResult>): void;
    listPoolUsageMetrics(callback: ServiceCallback<models.PoolListPoolUsageMetricsResult>): void;

    /**
     * Gets lifetime summary statistics for all of the pools in the specified
     * account. Statistics are aggregated across all pools that have ever existed
     * in the account, from account creation to the last update time of the
     * statistics.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolGetAllPoolsLifetimeStatisticsOptions]
     * Additional parameters for the operation
     * 
     * @param {number} [options.poolGetAllPoolsLifetimeStatisticsOptions.timeout]
     * Sets the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     * 
     * @param {string}
     * [options.poolGetAllPoolsLifetimeStatisticsOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.poolGetAllPoolsLifetimeStatisticsOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolGetAllPoolsLifetimeStatisticsOptions.ocpDate]
     * The time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllPoolsLifetimeStatistics(options: { poolGetAllPoolsLifetimeStatisticsOptions? : models.PoolGetAllPoolsLifetimeStatisticsOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PoolStatistics>): void;
    getAllPoolsLifetimeStatistics(callback: ServiceCallback<models.PoolStatistics>): void;

    /**
     * Adds a pool to the specified account.
     *
     * @param {object} pool Specifies the pool to be added.
     * 
     * @param {string} [pool.id] Gets or sets a string that uniquely identifies
     * the pool within the account. The id can contain any combination of
     * alphanumeric characters including hyphens and underscores, and cannot
     * contain more than 64 characters.
     * 
     * @param {string} [pool.displayName] Gets or sets the display name for the
     * pool.
     * 
     * @param {string} [pool.vmSize] Gets or sets the size of virtual machines in
     * the pool.  All VMs in a pool are the same size.
     * 
     * @param {object} [pool.cloudServiceConfiguration] Gets or sets the cloud
     * service configuration for the pool. This property and
     * VirtualMachineConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {string} [pool.cloudServiceConfiguration.osFamily] Gets or sets the
     * Azure Guest OS family to be installed on the virtual machines in the pool.
     * 
     * @param {string} [pool.cloudServiceConfiguration.targetOSVersion] Gets or
     * sets the Azure Guest OS version to be installed on the virtual machines in
     * the pool. The default value is * which specifies the latest operating
     * system version for the specified OS family.
     * 
     * @param {string} [pool.cloudServiceConfiguration.currentOSVersion] Gets or
     * sets the Azure Guest OS Version currently installed on the virtual
     * machines in the pool. This may differ from TargetOSVersion if the pool
     * state is Upgrading.
     * 
     * @param {object} [pool.virtualMachineConfiguration] Gets or sets the virtual
     * machine configuration for the pool. This property and
     * CloudServiceConfiguration are mutually exclusive and one of the properties
     * must be specified.
     * 
     * @param {object} [pool.virtualMachineConfiguration.imageReference] Gets or
     * sets information about the platform or marketplace image to use.
     * 
     * @param {string} [pool.virtualMachineConfiguration.imageReference.publisher]
     * Gets or sets the publisher of the image.
     * 
     * @param {string} [pool.virtualMachineConfiguration.imageReference.offer]
     * Gets or sets the offer of the image.
     * 
     * @param {string} [pool.virtualMachineConfiguration.imageReference.sku] Gets
     * or sets the SKU of the image.
     * 
     * @param {string} [pool.virtualMachineConfiguration.imageReference.version]
     * Gets or sets the version of the image. A value of 'latest' can be
     * specified to select the latest version of an image.
     * 
     * @param {string} [pool.virtualMachineConfiguration.nodeAgentSKUId] Gets or
     * sets the SKU of Batch Node Agent that needs to be provisioned on the
     * compute node. This property must match the ImageReference property.
     * 
     * @param {object} [pool.virtualMachineConfiguration.windowsConfiguration]
     * Gets or sets Windows operating system settings on the virtual machine.
     * This property must not be specified if the ImageReference property
     * referencs a Linux OS image.
     * 
     * @param {boolean}
     * [pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
     * Gets or sets whether virtual machine is enabled for automatic updates. If
     * omitted, the default value is true.
     * 
     * @param {moment.duration} [pool.resizeTimeout] Gets or sets the timeout for
     * allocation of compute nodes to the pool. In a Get Pool operation, this is
     * the timeout for the most recent resize operation. The default value is 10
     * minutes.
     * 
     * @param {number} [pool.targetDedicated] Gets or sets the desired number of
     * compute nodes in the pool. This property must have the default value if
     * EnableAutoScale is true. It is required if EnableAutoScale is false.
     * 
     * @param {boolean} [pool.enableAutoScale] Gets or sets whether the pool size
     * should automatically adjust over time. If true, the AutoScaleFormula
     * property must be set. If false, the TargetDedicated property must be set.
     * 
     * @param {string} [pool.autoScaleFormula] Gets or sets a formula for the
     * desired number of compute nodes in the pool.
     * 
     * @param {moment.duration} [pool.autoScaleEvaluationInterval] Gets or sets a
     * time interval for the desired autoscale evaluation period in the pool.
     * 
     * @param {boolean} [pool.enableInterNodeCommunication] Gets or sets whether
     * the pool permits direct communication between nodes.
     * 
     * @param {object} [pool.startTask] Gets or sets a task specified to run on
     * each compute node as it joins the pool.
     * 
     * @param {string} [pool.startTask.commandLine] Gets or sets the command line
     * of the start task.
     * 
     * @param {array} [pool.startTask.resourceFiles] Gets or sets a list of files
     * that Batch will download to the compute node before running the command
     * line.
     * 
     * @param {array} [pool.startTask.environmentSettings] Gets or sets a list of
     * environment variable settings for the start task.
     * 
     * @param {boolean} [pool.startTask.runElevated] Gets or sets whether to run
     * the start task in elevated mode. The default value is false.
     * 
     * @param {number} [pool.startTask.maxTaskRetryCount] Gets or sets the maximum
     * number of times the task may be retried.
     * 
     * @param {boolean} [pool.startTask.waitForSuccess] Gets or sets whether the
     * Batch Service should wait for the start task to complete successfully
     * (that is, to exit with exit code 0) before scheduling any tasks on the
     * compute node.
     * 
     * @param {array} [pool.certificateReferences] Gets or sets the list of
     * certificates to be installed on each compute node in the pool.
     * 
     * @param {array} [pool.applicationPackageReferences] Gets or sets the list of
     * application packages to be installed on each compute node in the pool.
     * 
     * @param {number} [pool.maxTasksPerNode] Gets or sets the maximum number of
     * tasks that can run concurrently on a single compute node in the pool.
     * 
     * @param {object} [pool.taskSchedulingPolicy] Gets or sets how the Batch
     * service distributes tasks between compute nodes in the pool.
     * 
     * @param {string} [pool.taskSchedulingPolicy.nodeFillType] Gets or sets how
     * tasks should be distributed across compute nodes. Possible values include:
     * 'spread', 'pack', 'unmapped'
     * 
     * @param {array} [pool.metadata] Gets or sets a list of name-value pairs
     * associated with the pool as metadata.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolAddOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.poolAddOptions.timeout] Sets the maximum time that
     * the server can spend processing the request, in seconds. The default is 30
     * seconds.
     * 
     * @param {string} [options.poolAddOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolAddOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.poolAddOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    add(pool: models.PoolAddParameter, options: { poolAddOptions? : models.PoolAddOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    add(pool: models.PoolAddParameter, callback: ServiceCallback<void>): void;

    /**
     * Lists all of the pools in the specified account.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolListOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.poolListOptions.filter] Sets an OData $filter
     * clause.
     * 
     * @param {string} [options.poolListOptions.select] Sets an OData $select
     * clause.
     * 
     * @param {string} [options.poolListOptions.expand] Sets an OData $expand
     * clause.
     * 
     * @param {number} [options.poolListOptions.maxResults] Sets the maximum
     * number of items to return in the response.
     * 
     * @param {number} [options.poolListOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.poolListOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolListOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.poolListOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { poolListOptions? : models.PoolListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudPoolListResult>): void;
    list(callback: ServiceCallback<models.CloudPoolListResult>): void;

    /**
     * Deletes a pool from the specified account.
     *
     * @param {string} poolId The id of the pool to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolDeleteMethodOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.poolDeleteMethodOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.poolDeleteMethodOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolDeleteMethodOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolDeleteMethodOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.poolDeleteMethodOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.poolDeleteMethodOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolDeleteMethodOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.poolDeleteMethodOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(poolId: string, options: { poolDeleteMethodOptions? : models.PoolDeleteMethodOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(poolId: string, callback: ServiceCallback<void>): void;

    /**
     * Gets basic properties of a pool.
     *
     * @param {string} poolId The id of the pool to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolExistsOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.poolExistsOptions.select] Sets an OData $select
     * clause.
     * 
     * @param {number} [options.poolExistsOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.poolExistsOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolExistsOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolExistsOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.poolExistsOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.poolExistsOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolExistsOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.poolExistsOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    exists(poolId: string, options: { poolExistsOptions? : models.PoolExistsOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;
    exists(poolId: string, callback: ServiceCallback<boolean>): void;

    /**
     * Gets information about the specified pool.
     *
     * @param {string} poolId The id of the pool to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolGetOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.poolGetOptions.select] Sets an OData $select
     * clause.
     * 
     * @param {string} [options.poolGetOptions.expand] Sets an OData $expand
     * clause.
     * 
     * @param {number} [options.poolGetOptions.timeout] Sets the maximum time that
     * the server can spend processing the request, in seconds. The default is 30
     * seconds.
     * 
     * @param {string} [options.poolGetOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolGetOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.poolGetOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.poolGetOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.poolGetOptions.ifNoneMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * does not match the specified ETag.
     * 
     * @param {date} [options.poolGetOptions.ifModifiedSince] Specify this header
     * to perform the operation only if the resource has been modified since the
     * specified date/time.
     * 
     * @param {date} [options.poolGetOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(poolId: string, options: { poolGetOptions? : models.PoolGetOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudPool>): void;
    get(poolId: string, callback: ServiceCallback<models.CloudPool>): void;

    /**
     * Updates the properties of a pool.
     *
     * @param {string} poolId The id of the pool to update.
     * 
     * @param {object} poolPatchParameter The parameters for the request.
     * 
     * @param {object} [poolPatchParameter.startTask] Sets a task to run on each
     * compute node as it joins the pool. If omitted, any existing start task is
     * left unchanged.
     * 
     * @param {string} [poolPatchParameter.startTask.commandLine] Gets or sets the
     * command line of the start task.
     * 
     * @param {array} [poolPatchParameter.startTask.resourceFiles] Gets or sets a
     * list of files that Batch will download to the compute node before running
     * the command line.
     * 
     * @param {array} [poolPatchParameter.startTask.environmentSettings] Gets or
     * sets a list of environment variable settings for the start task.
     * 
     * @param {boolean} [poolPatchParameter.startTask.runElevated] Gets or sets
     * whether to run the start task in elevated mode. The default value is false.
     * 
     * @param {number} [poolPatchParameter.startTask.maxTaskRetryCount] Gets or
     * sets the maximum number of times the task may be retried.
     * 
     * @param {boolean} [poolPatchParameter.startTask.waitForSuccess] Gets or sets
     * whether the Batch Service should wait for the start task to complete
     * successfully (that is, to exit with exit code 0) before scheduling any
     * tasks on the compute node.
     * 
     * @param {array} [poolPatchParameter.certificateReferences] Sets a list of
     * certificates to be installed on each compute node in the pool. If omitted,
     * any existing certificate references are left unchanged.
     * 
     * @param {array} [poolPatchParameter.applicationPackageReferences] Sets a
     * list of application packages to be installed on each compute node in the
     * pool. If omitted, any existing application package references are left
     * unchanged.
     * 
     * @param {array} [poolPatchParameter.metadata] Sets a list of name-value
     * pairs associated with the pool as metadata. If omitted, any existing
     * metadata is left unchanged.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolPatchOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.poolPatchOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.poolPatchOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolPatchOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.poolPatchOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.poolPatchOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.poolPatchOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolPatchOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.poolPatchOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patch(poolId: string, poolPatchParameter: models.PoolPatchParameter, options: { poolPatchOptions? : models.PoolPatchOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    patch(poolId: string, poolPatchParameter: models.PoolPatchParameter, callback: ServiceCallback<void>): void;

    /**
     * Disables automatic scaling for a pool.
     *
     * @param {string} poolId The id of the pool on which to disable automatic
     * scaling.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolDisableAutoScaleOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.poolDisableAutoScaleOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.poolDisableAutoScaleOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.poolDisableAutoScaleOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.poolDisableAutoScaleOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    disableAutoScale(poolId: string, options: { poolDisableAutoScaleOptions? : models.PoolDisableAutoScaleOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    disableAutoScale(poolId: string, callback: ServiceCallback<void>): void;

    /**
     * Enables automatic scaling for a pool.
     *
     * @param {string} poolId The id of the pool on which to enable automatic
     * scaling.
     * 
     * @param {object} poolEnableAutoScaleParameter The parameters for the request.
     * 
     * @param {string} [poolEnableAutoScaleParameter.autoScaleFormula] Sets the
     * formula for the desired number of compute nodes in the pool.
     * 
     * @param {moment.duration}
     * [poolEnableAutoScaleParameter.autoScaleEvaluationInterval] Gets or sets a
     * time interval for the desired autoscale evaluation period in the pool.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolEnableAutoScaleOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.poolEnableAutoScaleOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.poolEnableAutoScaleOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolEnableAutoScaleOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolEnableAutoScaleOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.poolEnableAutoScaleOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.poolEnableAutoScaleOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolEnableAutoScaleOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.poolEnableAutoScaleOptions.ifUnmodifiedSince]
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enableAutoScale(poolId: string, poolEnableAutoScaleParameter: models.PoolEnableAutoScaleParameter, options: { poolEnableAutoScaleOptions? : models.PoolEnableAutoScaleOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    enableAutoScale(poolId: string, poolEnableAutoScaleParameter: models.PoolEnableAutoScaleParameter, callback: ServiceCallback<void>): void;

    /**
     * Gets the result of evaluating an automatic scaling formula on the pool.
     *
     * @param {string} poolId The id of the pool on which to evaluate the
     * automatic scaling formula.
     * 
     * @param {string} autoScaleFormula Sets a formula for the desired number of
     * compute nodes in the pool.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolEvaluateAutoScaleOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.poolEvaluateAutoScaleOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.poolEvaluateAutoScaleOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.poolEvaluateAutoScaleOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.poolEvaluateAutoScaleOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    evaluateAutoScale(poolId: string, autoScaleFormula: string, options: { poolEvaluateAutoScaleOptions? : models.PoolEvaluateAutoScaleOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AutoScaleRun>): void;
    evaluateAutoScale(poolId: string, autoScaleFormula: string, callback: ServiceCallback<models.AutoScaleRun>): void;

    /**
     * Changes the number of compute nodes that are assigned to a pool.
     *
     * @param {string} poolId The id of the pool to resize.
     * 
     * @param {object} poolResizeParameter The parameters for the request.
     * 
     * @param {number} [poolResizeParameter.targetDedicated] Sets the desired
     * number of compute nodes in the pool.
     * 
     * @param {moment.duration} [poolResizeParameter.resizeTimeout] Sets the
     * timeout for allocation of compute nodes to the pool or removal of compute
     * nodes from the pool. The default value is 10 minutes.
     * 
     * @param {string} [poolResizeParameter.nodeDeallocationOption] Sets when
     * nodes may be removed from the pool, if the pool size is decreasing.
     * Possible values include: 'requeue', 'terminate', 'taskcompletion',
     * 'retaineddata'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolResizeOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.poolResizeOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.poolResizeOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolResizeOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolResizeOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.poolResizeOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.poolResizeOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolResizeOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.poolResizeOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resize(poolId: string, poolResizeParameter: models.PoolResizeParameter, options: { poolResizeOptions? : models.PoolResizeOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    resize(poolId: string, poolResizeParameter: models.PoolResizeParameter, callback: ServiceCallback<void>): void;

    /**
     * Stops an ongoing resize operation on the pool. This does not restore the
     * pool to its previous state before the resize operation: it only stops any
     * further changes being made, and the pool maintains its current state.
     *
     * @param {string} poolId The id of the pool whose resizing you want to stop.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolStopResizeOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.poolStopResizeOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.poolStopResizeOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolStopResizeOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolStopResizeOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.poolStopResizeOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.poolStopResizeOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolStopResizeOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.poolStopResizeOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stopResize(poolId: string, options: { poolStopResizeOptions? : models.PoolStopResizeOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    stopResize(poolId: string, callback: ServiceCallback<void>): void;

    /**
     * Updates the properties of a pool.
     *
     * @param {string} poolId The id of the pool to update.
     * 
     * @param {object} poolUpdatePropertiesParameter The parameters for the
     * request.
     * 
     * @param {object} [poolUpdatePropertiesParameter.startTask] Sets a task to
     * run on each compute node as it joins the pool. If omitted, any existing
     * start task is removed from the pool.
     * 
     * @param {string} [poolUpdatePropertiesParameter.startTask.commandLine] Gets
     * or sets the command line of the start task.
     * 
     * @param {array} [poolUpdatePropertiesParameter.startTask.resourceFiles] Gets
     * or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [poolUpdatePropertiesParameter.startTask.environmentSettings] Gets or sets
     * a list of environment variable settings for the start task.
     * 
     * @param {boolean} [poolUpdatePropertiesParameter.startTask.runElevated] Gets
     * or sets whether to run the start task in elevated mode. The default value
     * is false.
     * 
     * @param {number} [poolUpdatePropertiesParameter.startTask.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried.
     * 
     * @param {boolean} [poolUpdatePropertiesParameter.startTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the start task to
     * complete successfully (that is, to exit with exit code 0) before
     * scheduling any tasks on the compute node.
     * 
     * @param {array} [poolUpdatePropertiesParameter.certificateReferences] Sets a
     * list of certificates to be installed on each compute node in the pool. If
     * you specify an empty collection, any existing certificate references are
     * removed from the pool.
     * 
     * @param {array} [poolUpdatePropertiesParameter.applicationPackageReferences]
     * Sets a list of application packages to be installed on each compute node
     * in the pool. If you specify an empty collection, any existing application
     * packages references are removed from the pool.
     * 
     * @param {array} [poolUpdatePropertiesParameter.metadata] Sets a list of
     * name-value pairs associated with the pool as metadata. If you specify an
     * empty collection, any existing metadata is removed from the pool.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolUpdatePropertiesOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.poolUpdatePropertiesOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.poolUpdatePropertiesOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.poolUpdatePropertiesOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.poolUpdatePropertiesOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateProperties(poolId: string, poolUpdatePropertiesParameter: models.PoolUpdatePropertiesParameter, options: { poolUpdatePropertiesOptions? : models.PoolUpdatePropertiesOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    updateProperties(poolId: string, poolUpdatePropertiesParameter: models.PoolUpdatePropertiesParameter, callback: ServiceCallback<void>): void;

    /**
     * Upgrades the operating system of the specified pool.
     *
     * @param {string} poolId The id of the pool to upgrade.
     * 
     * @param {string} targetOSVersion Sets the Azure Guest OS version to be
     * installed on the virtual machines in the pool.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolUpgradeOSOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.poolUpgradeOSOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.poolUpgradeOSOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolUpgradeOSOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolUpgradeOSOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.poolUpgradeOSOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.poolUpgradeOSOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolUpgradeOSOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.poolUpgradeOSOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    upgradeOS(poolId: string, targetOSVersion: string, options: { poolUpgradeOSOptions? : models.PoolUpgradeOSOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    upgradeOS(poolId: string, targetOSVersion: string, callback: ServiceCallback<void>): void;

    /**
     * Removes compute nodes from the specified pool.
     *
     * @param {string} poolId The id of the pool from which you want to remove
     * nodes.
     * 
     * @param {object} nodeRemoveParameter The parameters for the request.
     * 
     * @param {array} [nodeRemoveParameter.nodeList] Sets a list containing the id
     * of the compute nodes to be removed from the specified pool.
     * 
     * @param {moment.duration} [nodeRemoveParameter.resizeTimeout] Sets the
     * timeout for removal of compute nodes to the pool. The default value is 10
     * minutes.
     * 
     * @param {string} [nodeRemoveParameter.nodeDeallocationOption] Sets when
     * compute nodes may be removed from the pool. Possible values include:
     * 'requeue', 'terminate', 'taskcompletion', 'retaineddata'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolRemoveNodesOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.poolRemoveNodesOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.poolRemoveNodesOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolRemoveNodesOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolRemoveNodesOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.poolRemoveNodesOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.poolRemoveNodesOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.poolRemoveNodesOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.poolRemoveNodesOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeNodes(poolId: string, nodeRemoveParameter: models.NodeRemoveParameter, options: { poolRemoveNodesOptions? : models.PoolRemoveNodesOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    removeNodes(poolId: string, nodeRemoveParameter: models.NodeRemoveParameter, callback: ServiceCallback<void>): void;

    /**
     * Lists the usage metrics, aggregated by pool across individual time
     * intervals, for the specified account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolListPoolUsageMetricsNextOptions] Additional
     * parameters for the operation
     * 
     * @param {string}
     * [options.poolListPoolUsageMetricsNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.poolListPoolUsageMetricsNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolListPoolUsageMetricsNextOptions.ocpDate] The
     * time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPoolUsageMetricsNext(nextPageLink: string, options: { poolListPoolUsageMetricsNextOptions? : models.PoolListPoolUsageMetricsNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PoolListPoolUsageMetricsResult>): void;
    listPoolUsageMetricsNext(nextPageLink: string, callback: ServiceCallback<models.PoolListPoolUsageMetricsResult>): void;

    /**
     * Lists all of the pools in the specified account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.poolListNextOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.poolListNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.poolListNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.poolListNextOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { poolListNextOptions? : models.PoolListNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudPoolListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.CloudPoolListResult>): void;
}

/**
 * @class
 * Account
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface Account {

    /**
     * Lists all the node agent SKUs supported by Azure Batch Service.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.accountListNodeAgentSkusOptions] Additional
     * parameters for the operation
     * 
     * @param {string} [options.accountListNodeAgentSkusOptions.filter] Sets an
     * OData $filter clause.
     * 
     * @param {number} [options.accountListNodeAgentSkusOptions.maxResults] Sets
     * the maximum number of items to return in the response.
     * 
     * @param {number} [options.accountListNodeAgentSkusOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.accountListNodeAgentSkusOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.accountListNodeAgentSkusOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.accountListNodeAgentSkusOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNodeAgentSkus(options: { accountListNodeAgentSkusOptions? : models.AccountListNodeAgentSkusOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccountListNodeAgentSkusResult>): void;
    listNodeAgentSkus(callback: ServiceCallback<models.AccountListNodeAgentSkusResult>): void;

    /**
     * Lists all the node agent SKUs supported by Azure Batch Service.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.accountListNodeAgentSkusNextOptions] Additional
     * parameters for the operation
     * 
     * @param {string}
     * [options.accountListNodeAgentSkusNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.accountListNodeAgentSkusNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.accountListNodeAgentSkusNextOptions.ocpDate] The
     * time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNodeAgentSkusNext(nextPageLink: string, options: { accountListNodeAgentSkusNextOptions? : models.AccountListNodeAgentSkusNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccountListNodeAgentSkusResult>): void;
    listNodeAgentSkusNext(nextPageLink: string, callback: ServiceCallback<models.AccountListNodeAgentSkusResult>): void;
}

/**
 * @class
 * Job
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface Job {

    /**
     * Gets lifetime summary statistics for all of the jobs in the specified
     * account. Statistics are aggregated across all jobs that have ever existed
     * in the account, from account creation to the last update time of the
     * statistics.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobGetAllJobsLifetimeStatisticsOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.jobGetAllJobsLifetimeStatisticsOptions.timeout]
     * Sets the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     * 
     * @param {string}
     * [options.jobGetAllJobsLifetimeStatisticsOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.jobGetAllJobsLifetimeStatisticsOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobGetAllJobsLifetimeStatisticsOptions.ocpDate] The
     * time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllJobsLifetimeStatistics(options: { jobGetAllJobsLifetimeStatisticsOptions? : models.JobGetAllJobsLifetimeStatisticsOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStatistics>): void;
    getAllJobsLifetimeStatistics(callback: ServiceCallback<models.JobStatistics>): void;

    /**
     * Deletes a job.
     *
     * @param {string} jobId The id of the job to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobDeleteMethodOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.jobDeleteMethodOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobDeleteMethodOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobDeleteMethodOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobDeleteMethodOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.jobDeleteMethodOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobDeleteMethodOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobDeleteMethodOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.jobDeleteMethodOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(jobId: string, options: { jobDeleteMethodOptions? : models.JobDeleteMethodOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(jobId: string, callback: ServiceCallback<void>): void;

    /**
     * Gets information about the specified job.
     *
     * @param {string} jobId The id of the job.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobGetOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.jobGetOptions.select] Sets an OData $select clause.
     * 
     * @param {string} [options.jobGetOptions.expand] Sets an OData $expand clause.
     * 
     * @param {number} [options.jobGetOptions.timeout] Sets the maximum time that
     * the server can spend processing the request, in seconds. The default is 30
     * seconds.
     * 
     * @param {string} [options.jobGetOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobGetOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.jobGetOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(jobId: string, options: { jobGetOptions? : models.JobGetOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJob>): void;
    get(jobId: string, callback: ServiceCallback<models.CloudJob>): void;

    /**
     * Updates the properties of a job.
     *
     * @param {string} jobId The id of the job whose properties you want to update.
     * 
     * @param {object} jobPatchParameter The parameters for the request.
     * 
     * @param {number} [jobPatchParameter.priority] Sets the priority of the job.
     * Priority values can range from -1000 to 1000, with -1000 being the lowest
     * priority and 1000 being the highest priority. If omitted, the priority of
     * the job is left unchanged.
     * 
     * @param {object} [jobPatchParameter.constraints] Sets the execution
     * constraints for the job. If omitted, the existing execution constraints
     * are left unchanged.
     * 
     * @param {moment.duration} [jobPatchParameter.constraints.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the job may run, measured from
     * the time the job starts. If the job does not complete within the time
     * limit, the Batch service terminates it and any tasks that are still
     * running.
     * 
     * @param {number} [jobPatchParameter.constraints.maxTaskRetryCount] Gets or
     * sets the maximum number of times each task may be retried. The Batch
     * service retries a task if its exit code is nonzero.
     * 
     * @param {object} [jobPatchParameter.poolInfo] Sets the pool on which the
     * Batch service runs the job's tasks. If omitted, the job continues to run
     * on its current pool.
     * 
     * @param {string} [jobPatchParameter.poolInfo.poolId] Gets or sets the id of
     * an existing pool. All the tasks of the job will run on the specified pool.
     * You must specify either PoolId or AutoPoolSpecification, but not both.
     * 
     * @param {object} [jobPatchParameter.poolInfo.autoPoolSpecification] Gets or
     * sets characteristics for a temporary 'auto pool'. The Batch service will
     * create this auto pool and run all of the tasks of the job on it, and will
     * delete the pool once the job has completed. You must specify either PoolId
     * or AutoPoolSpecification, but not both.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.autoPoolIdPrefix] Gets
     * or sets a prefix to be added to the unique identifier when a pool is
     * automatically created. The prefix can be up to 20 characters long.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.poolLifetimeOption] Gets
     * or sets the minimum lifetime of created auto pools, and how multiple jobs
     * on a schedule are assigned to pools. Possible values include:
     * 'jobschedule', 'job', 'unmapped'
     * 
     * @param {boolean}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.keepAlive] Gets or sets
     * whether to keep an auto pool alive after its lifetime expires.
     * 
     * @param {object} [jobPatchParameter.poolInfo.autoPoolSpecification.pool]
     * Gets or sets the pool specification for the auto pool.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.displayName] Gets
     * or sets the display name for the pool.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.vmSize] Gets or
     * sets the size of the virtual machines in the pool. All VMs in a pool are
     * the same size.
     * 
     * @param {object}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration]
     * Gets or sets the cloud service configuration for the pool. This property
     * and VirtualMachineConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
     * Gets or sets the Azure Guest OS family to be installed on the virtual
     * machines in the pool.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
     * Gets or sets the Azure Guest OS version to be installed on the virtual
     * machines in the pool. The default value is * which specifies the latest
     * operating system version for the specified OS family.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
     * Gets or sets the Azure Guest OS Version currently installed on the virtual
     * machines in the pool. This may differ from TargetOSVersion if the pool
     * state is Upgrading.
     * 
     * @param {object}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration]
     * Gets or sets the virtual machine configuration for the pool. This property
     * and CloudServiceConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {object}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
     * Gets or sets information about the platform or marketplace image to use.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
     * Gets or sets the publisher of the image.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
     * Gets or sets the offer of the image.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
     * Gets or sets the SKU of the image.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
     * Gets or sets the version of the image. A value of 'latest' can be
     * specified to select the latest version of an image.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
     * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
     * the compute node. This property must match the ImageReference property.
     * 
     * @param {object}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
     * Gets or sets Windows operating system settings on the virtual machine.
     * This property must not be specified if the ImageReference property
     * referencs a Linux OS image.
     * 
     * @param {boolean}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
     * Gets or sets whether virtual machine is enabled for automatic updates. If
     * omitted, the default value is true.
     * 
     * @param {number}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
     * Gets or sets the maximum number of tasks that can run concurrently on a
     * single compute node in the pool.
     * 
     * @param {object}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
     * Gets or sets how tasks are distributed among compute nodes in the pool.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
     * Gets or sets how tasks should be distributed across compute nodes.
     * Possible values include: 'spread', 'pack', 'unmapped'
     * 
     * @param {moment.duration}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.resizeTimeout] Gets
     * or sets the timeout for allocation of compute nodes to the pool.
     * 
     * @param {number}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.targetDedicated]
     * Gets or sets the desired number of compute nodes in the pool.
     * 
     * @param {boolean}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.enableAutoScale]
     * Gets or sets whether the pool size should automatically adjust over time.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.autoScaleFormula]
     * Gets or sets the formula for the desired number of compute nodes in the
     * pool.
     * 
     * @param {moment.duration}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval]
     * Gets or sets a time interval for the desired AutoScale evaluation period
     * in the pool.
     * 
     * @param {boolean}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
     * Gets or sets whether the pool permits direct communication between nodes.
     * 
     * @param {object}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.startTask] Gets or
     * sets a task to run on each compute node as it joins the pool. The task
     * runs when the node is added to the pool or when the node is restarted.
     * 
     * @param {string}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.startTask.commandLine]
     * Gets or sets the command line of the start task.
     * 
     * @param {array}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.startTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the start task.
     * 
     * @param {boolean}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.startTask.runElevated]
     * Gets or sets whether to run the start task in elevated mode. The default
     * value is false.
     * 
     * @param {number}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried.
     * 
     * @param {boolean}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the start task to
     * complete successfully (that is, to exit with exit code 0) before
     * scheduling any tasks on the compute node.
     * 
     * @param {array}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.certificateReferences]
     * Gets or sets a list of certificates to be installed on each compute node
     * in the pool.
     * 
     * @param {array}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
     * Gets or sets the list of application packages to be installed on each
     * compute node in the pool.
     * 
     * @param {array}
     * [jobPatchParameter.poolInfo.autoPoolSpecification.pool.metadata] Gets or
     * sets a list of name-value pairs associated with the pool as metadata.
     * 
     * @param {array} [jobPatchParameter.metadata] Sets a list of name-value pairs
     * associated with the job as metadata. If omitted, the existing job metadata
     * is left unchanged.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobPatchOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.jobPatchOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.jobPatchOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobPatchOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.jobPatchOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.jobPatchOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.jobPatchOptions.ifNoneMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * does not match the specified ETag.
     * 
     * @param {date} [options.jobPatchOptions.ifModifiedSince] Specify this header
     * to perform the operation only if the resource has been modified since the
     * specified date/time.
     * 
     * @param {date} [options.jobPatchOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patch(jobId: string, jobPatchParameter: models.JobPatchParameter, options: { jobPatchOptions? : models.JobPatchOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    patch(jobId: string, jobPatchParameter: models.JobPatchParameter, callback: ServiceCallback<void>): void;

    /**
     * Updates the properties of a job.
     *
     * @param {string} jobId The id of the job whose properties you want to update.
     * 
     * @param {object} jobUpdateParameter The parameters for the request.
     * 
     * @param {number} [jobUpdateParameter.priority] Sets the priority of the job.
     * Priority values can range from -1000 to 1000, with -1000 being the lowest
     * priority and 1000 being the highest priority. If omitted, the priority of
     * the job is left unchanged.
     * 
     * @param {object} [jobUpdateParameter.constraints] Sets the execution
     * constraints for the job. If omitted, the existing execution constraints
     * are left unchanged.
     * 
     * @param {moment.duration} [jobUpdateParameter.constraints.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the job may run, measured from
     * the time the job starts. If the job does not complete within the time
     * limit, the Batch service terminates it and any tasks that are still
     * running.
     * 
     * @param {number} [jobUpdateParameter.constraints.maxTaskRetryCount] Gets or
     * sets the maximum number of times each task may be retried. The Batch
     * service retries a task if its exit code is nonzero.
     * 
     * @param {object} [jobUpdateParameter.poolInfo] Sets the pool on which the
     * Batch service runs the job's tasks. If omitted, the job continues to run
     * on its current pool.
     * 
     * @param {string} [jobUpdateParameter.poolInfo.poolId] Gets or sets the id of
     * an existing pool. All the tasks of the job will run on the specified pool.
     * You must specify either PoolId or AutoPoolSpecification, but not both.
     * 
     * @param {object} [jobUpdateParameter.poolInfo.autoPoolSpecification] Gets or
     * sets characteristics for a temporary 'auto pool'. The Batch service will
     * create this auto pool and run all of the tasks of the job on it, and will
     * delete the pool once the job has completed. You must specify either PoolId
     * or AutoPoolSpecification, but not both.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.autoPoolIdPrefix] Gets
     * or sets a prefix to be added to the unique identifier when a pool is
     * automatically created. The prefix can be up to 20 characters long.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.poolLifetimeOption]
     * Gets or sets the minimum lifetime of created auto pools, and how multiple
     * jobs on a schedule are assigned to pools. Possible values include:
     * 'jobschedule', 'job', 'unmapped'
     * 
     * @param {boolean}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.keepAlive] Gets or sets
     * whether to keep an auto pool alive after its lifetime expires.
     * 
     * @param {object} [jobUpdateParameter.poolInfo.autoPoolSpecification.pool]
     * Gets or sets the pool specification for the auto pool.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.displayName] Gets
     * or sets the display name for the pool.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.vmSize] Gets or
     * sets the size of the virtual machines in the pool. All VMs in a pool are
     * the same size.
     * 
     * @param {object}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration]
     * Gets or sets the cloud service configuration for the pool. This property
     * and VirtualMachineConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
     * Gets or sets the Azure Guest OS family to be installed on the virtual
     * machines in the pool.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
     * Gets or sets the Azure Guest OS version to be installed on the virtual
     * machines in the pool. The default value is * which specifies the latest
     * operating system version for the specified OS family.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
     * Gets or sets the Azure Guest OS Version currently installed on the virtual
     * machines in the pool. This may differ from TargetOSVersion if the pool
     * state is Upgrading.
     * 
     * @param {object}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration]
     * Gets or sets the virtual machine configuration for the pool. This property
     * and CloudServiceConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {object}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
     * Gets or sets information about the platform or marketplace image to use.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
     * Gets or sets the publisher of the image.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
     * Gets or sets the offer of the image.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
     * Gets or sets the SKU of the image.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
     * Gets or sets the version of the image. A value of 'latest' can be
     * specified to select the latest version of an image.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
     * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
     * the compute node. This property must match the ImageReference property.
     * 
     * @param {object}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
     * Gets or sets Windows operating system settings on the virtual machine.
     * This property must not be specified if the ImageReference property
     * referencs a Linux OS image.
     * 
     * @param {boolean}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
     * Gets or sets whether virtual machine is enabled for automatic updates. If
     * omitted, the default value is true.
     * 
     * @param {number}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
     * Gets or sets the maximum number of tasks that can run concurrently on a
     * single compute node in the pool.
     * 
     * @param {object}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
     * Gets or sets how tasks are distributed among compute nodes in the pool.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
     * Gets or sets how tasks should be distributed across compute nodes.
     * Possible values include: 'spread', 'pack', 'unmapped'
     * 
     * @param {moment.duration}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.resizeTimeout]
     * Gets or sets the timeout for allocation of compute nodes to the pool.
     * 
     * @param {number}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.targetDedicated]
     * Gets or sets the desired number of compute nodes in the pool.
     * 
     * @param {boolean}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.enableAutoScale]
     * Gets or sets whether the pool size should automatically adjust over time.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.autoScaleFormula]
     * Gets or sets the formula for the desired number of compute nodes in the
     * pool.
     * 
     * @param {moment.duration}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval]
     * Gets or sets a time interval for the desired AutoScale evaluation period
     * in the pool.
     * 
     * @param {boolean}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
     * Gets or sets whether the pool permits direct communication between nodes.
     * 
     * @param {object}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.startTask] Gets or
     * sets a task to run on each compute node as it joins the pool. The task
     * runs when the node is added to the pool or when the node is restarted.
     * 
     * @param {string}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.startTask.commandLine]
     * Gets or sets the command line of the start task.
     * 
     * @param {array}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.startTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the start task.
     * 
     * @param {boolean}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.startTask.runElevated]
     * Gets or sets whether to run the start task in elevated mode. The default
     * value is false.
     * 
     * @param {number}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried.
     * 
     * @param {boolean}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the start task to
     * complete successfully (that is, to exit with exit code 0) before
     * scheduling any tasks on the compute node.
     * 
     * @param {array}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.certificateReferences]
     * Gets or sets a list of certificates to be installed on each compute node
     * in the pool.
     * 
     * @param {array}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
     * Gets or sets the list of application packages to be installed on each
     * compute node in the pool.
     * 
     * @param {array}
     * [jobUpdateParameter.poolInfo.autoPoolSpecification.pool.metadata] Gets or
     * sets a list of name-value pairs associated with the pool as metadata.
     * 
     * @param {array} [jobUpdateParameter.metadata] Sets a list of name-value
     * pairs associated with the job as metadata. If omitted, the existing job
     * metadata is left unchanged.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobUpdateOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.jobUpdateOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.jobUpdateOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobUpdateOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.jobUpdateOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.jobUpdateOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.jobUpdateOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobUpdateOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.jobUpdateOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(jobId: string, jobUpdateParameter: models.JobUpdateParameter, options: { jobUpdateOptions? : models.JobUpdateOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    update(jobId: string, jobUpdateParameter: models.JobUpdateParameter, callback: ServiceCallback<void>): void;

    /**
     * Disables the specified job, preventing new tasks from running.
     *
     * @param {string} jobId The id of the job to disable.
     * 
     * @param {string} disableTasks Sets what to do with active tasks associated
     * with the job. Possible values include: 'requeue', 'terminate', 'wait'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobDisableOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.jobDisableOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.jobDisableOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobDisableOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobDisableOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.jobDisableOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.jobDisableOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobDisableOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.jobDisableOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    disable(jobId: string, disableTasks: string, options: { jobDisableOptions? : models.JobDisableOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    disable(jobId: string, disableTasks: string, callback: ServiceCallback<void>): void;

    /**
     * Enables the specified job, allowing new tasks to run.
     *
     * @param {string} jobId The id of the job to enable.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobEnableOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.jobEnableOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.jobEnableOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobEnableOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.jobEnableOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.jobEnableOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.jobEnableOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobEnableOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.jobEnableOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enable(jobId: string, options: { jobEnableOptions? : models.JobEnableOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    enable(jobId: string, callback: ServiceCallback<void>): void;

    /**
     * Terminates the specified job, marking it as completed.
     *
     * @param {string} jobId The id of the job to terminate.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.terminateReason] Sets the text you want to appear
     * as the job's TerminateReason. The default is 'UserTerminate'.
     * 
     * @param {object} [options.jobTerminateOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.jobTerminateOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.jobTerminateOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobTerminateOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobTerminateOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.jobTerminateOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.jobTerminateOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobTerminateOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.jobTerminateOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    terminate(jobId: string, options: { terminateReason? : string, jobTerminateOptions? : models.JobTerminateOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    terminate(jobId: string, callback: ServiceCallback<void>): void;

    /**
     * Adds a job to the specified account.
     *
     * @param {object} job Specifies the job to be added.
     * 
     * @param {string} [job.id] Gets or sets a string that uniquely identifies the
     * job within the account. The id can contain any combination of alphanumeric
     * characters including hyphens and underscores, and cannot contain more than
     * 64 characters. It is common to use a GUID for the id.
     * 
     * @param {string} [job.displayName] Gets or sets the display name for the job.
     * 
     * @param {number} [job.priority] Gets or sets the priority of the job.
     * Priority values can range from -1000 to 1000, with -1000 being the lowest
     * priority and 1000 being the highest priority. The default value is 0.
     * 
     * @param {object} [job.constraints] Gets or sets the execution constraints
     * for the job.
     * 
     * @param {moment.duration} [job.constraints.maxWallClockTime] Gets or sets
     * the maximum elapsed time that the job may run, measured from the time the
     * job starts. If the job does not complete within the time limit, the Batch
     * service terminates it and any tasks that are still running.
     * 
     * @param {number} [job.constraints.maxTaskRetryCount] Gets or sets the
     * maximum number of times each task may be retried. The Batch service
     * retries a task if its exit code is nonzero.
     * 
     * @param {object} [job.jobManagerTask] Gets or sets details of a Job Manager
     * task to be launched when the job is started.
     * 
     * @param {string} [job.jobManagerTask.id] Gets or sets a string that uniquely
     * identifies the Job Manager task. A GUID is recommended.
     * 
     * @param {string} [job.jobManagerTask.displayName] Gets or sets the display
     * name of the Job Manager task.
     * 
     * @param {string} [job.jobManagerTask.commandLine] Gets or sets the command
     * line of the Job Manager task.
     * 
     * @param {array} [job.jobManagerTask.resourceFiles] Gets or sets a list of
     * files that Batch will download to the compute node before running the
     * command line.
     * 
     * @param {array} [job.jobManagerTask.environmentSettings] Gets or sets a list
     * of environment variable settings for the Job Manager task.
     * 
     * @param {object} [job.jobManagerTask.constraints] Gets or sets constraints
     * that apply to the Job Manager task.
     * 
     * @param {boolean} [job.jobManagerTask.killJobOnCompletion] Gets or sets
     * whether completion of the Job Manager task signifies completion of the
     * entire job.
     * 
     * @param {boolean} [job.jobManagerTask.runElevated] Gets or sets whether to
     * run the Job Manager task in elevated mode. The default value is false.
     * 
     * @param {boolean} [job.jobManagerTask.runExclusive] Gets or sets whether the
     * Job Manager task requires exclusive use of the compute node where it runs.
     * 
     * @param {object} [job.jobPreparationTask] Gets or sets the Job Preparation
     * task.
     * 
     * @param {string} [job.jobPreparationTask.id] Gets or sets a string that
     * uniquely identifies the job preparation task within the job. The id can
     * contain any combination of alphanumeric characters including hyphens and
     * underscores and cannot contain more than 64 characters.
     * 
     * @param {string} [job.jobPreparationTask.commandLine] Gets or sets the
     * command line of the Job Preparation task.
     * 
     * @param {array} [job.jobPreparationTask.resourceFiles] Gets or sets a list
     * of files that Batch will download to the compute node before running the
     * command line.
     * 
     * @param {array} [job.jobPreparationTask.environmentSettings] Gets or sets a
     * list of environment variable settings for the Job Preparation task.
     * 
     * @param {object} [job.jobPreparationTask.constraints] Gets or sets
     * constraints that apply to the Job Preparation task..
     * 
     * @param {moment.duration}
     * [job.jobPreparationTask.constraints.maxWallClockTime] Gets or sets the
     * maximum elapsed time that the task may run, measured from the time the
     * task starts. If the task does not complete within the time limit, the
     * Batch service terminates it.
     * 
     * @param {moment.duration} [job.jobPreparationTask.constraints.retentionTime]
     * Gets or sets the minimum time to retain the working directory for the task
     * on the compute node where it ran. After this time, the Batch service may
     * delete the working directory and all its contents. The default is infinite.
     * 
     * @param {number} [job.jobPreparationTask.constraints.maxTaskRetryCount] Gets
     * or sets the maximum number of times the task may be retried. The Batch
     * service retries a task if its exit code is nonzero.
     * 
     * @param {boolean} [job.jobPreparationTask.waitForSuccess] Gets or sets
     * whether the Batch Service should wait for the Job Preparation task to
     * complete successfully before scheduling any other tasks of the job on the
     * compute node.
     * 
     * @param {boolean} [job.jobPreparationTask.runElevated] Gets or sets whether
     * to run the Job Preparation task in elevated mode. The default value is
     * false.
     * 
     * @param {boolean} [job.jobPreparationTask.rerunOnNodeRebootAfterSuccess]
     * Gets or sets whether the Batch service should rerun the Job Preparation
     * task after a compute node reboots. The default value is true.
     * 
     * @param {object} [job.jobReleaseTask] Gets or sets the Job Release task.
     * 
     * @param {string} [job.jobReleaseTask.id] Gets or sets a string that uniquely
     * identifies the Job Release task within the job. The id can contain any
     * combination of alphanumeric characters including hyphens and underscores
     * and cannot contain more than 64 characters.
     * 
     * @param {string} [job.jobReleaseTask.commandLine] Gets or sets the command
     * line of the Job Release task.
     * 
     * @param {array} [job.jobReleaseTask.resourceFiles] Gets or sets a list of
     * files that Batch will download to the compute node before running the
     * command line.
     * 
     * @param {array} [job.jobReleaseTask.environmentSettings] Gets or sets a list
     * of environment variable settings for the Job Release task.
     * 
     * @param {moment.duration} [job.jobReleaseTask.maxWallClockTime] Gets or sets
     * the maximum elapsed time that the Job Release task may run on a given
     * compute node, measured from the time the task starts. If the task does not
     * complete within the time limit, the Batch service terminates it. The
     * default value is 15 minutes.
     * 
     * @param {moment.duration} [job.jobReleaseTask.retentionTime] Gets or sets
     * the minimum time to retain the working directory for the Job Release task
     * on the compute node.  After this time, the Batch service may delete the
     * working directory and all its contents. The default is infinite.
     * 
     * @param {boolean} [job.jobReleaseTask.runElevated] Gets or sets whether to
     * run the Job Release task in elevated mode. The default value is false.
     * 
     * @param {array} [job.commonEnvironmentSettings] Gets or sets the list of
     * common environment variable settings.  These environment variables are set
     * for all tasks in the job (including the Job Manager, Job Preparation and
     * Job Release tasks).
     * 
     * @param {object} [job.poolInfo] Gets or sets the pool on which the Batch
     * service runs the jobâ€™s tasks.
     * 
     * @param {string} [job.poolInfo.poolId] Gets or sets the id of an existing
     * pool. All the tasks of the job will run on the specified pool. You must
     * specify either PoolId or AutoPoolSpecification, but not both.
     * 
     * @param {object} [job.poolInfo.autoPoolSpecification] Gets or sets
     * characteristics for a temporary 'auto pool'. The Batch service will create
     * this auto pool and run all of the tasks of the job on it, and will delete
     * the pool once the job has completed. You must specify either PoolId or
     * AutoPoolSpecification, but not both.
     * 
     * @param {string} [job.poolInfo.autoPoolSpecification.autoPoolIdPrefix] Gets
     * or sets a prefix to be added to the unique identifier when a pool is
     * automatically created. The prefix can be up to 20 characters long.
     * 
     * @param {string} [job.poolInfo.autoPoolSpecification.poolLifetimeOption]
     * Gets or sets the minimum lifetime of created auto pools, and how multiple
     * jobs on a schedule are assigned to pools. Possible values include:
     * 'jobschedule', 'job', 'unmapped'
     * 
     * @param {boolean} [job.poolInfo.autoPoolSpecification.keepAlive] Gets or
     * sets whether to keep an auto pool alive after its lifetime expires.
     * 
     * @param {object} [job.poolInfo.autoPoolSpecification.pool] Gets or sets the
     * pool specification for the auto pool.
     * 
     * @param {string} [job.poolInfo.autoPoolSpecification.pool.displayName] Gets
     * or sets the display name for the pool.
     * 
     * @param {string} [job.poolInfo.autoPoolSpecification.pool.vmSize] Gets or
     * sets the size of the virtual machines in the pool. All VMs in a pool are
     * the same size.
     * 
     * @param {object}
     * [job.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration] Gets
     * or sets the cloud service configuration for the pool. This property and
     * VirtualMachineConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
     * Gets or sets the Azure Guest OS family to be installed on the virtual
     * machines in the pool.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
     * Gets or sets the Azure Guest OS version to be installed on the virtual
     * machines in the pool. The default value is * which specifies the latest
     * operating system version for the specified OS family.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
     * Gets or sets the Azure Guest OS Version currently installed on the virtual
     * machines in the pool. This may differ from TargetOSVersion if the pool
     * state is Upgrading.
     * 
     * @param {object}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration] Gets
     * or sets the virtual machine configuration for the pool. This property and
     * CloudServiceConfiguration are mutually exclusive and one of the properties
     * must be specified.
     * 
     * @param {object}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
     * Gets or sets information about the platform or marketplace image to use.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
     * Gets or sets the publisher of the image.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
     * Gets or sets the offer of the image.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
     * Gets or sets the SKU of the image.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
     * Gets or sets the version of the image. A value of 'latest' can be
     * specified to select the latest version of an image.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
     * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
     * the compute node. This property must match the ImageReference property.
     * 
     * @param {object}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
     * Gets or sets Windows operating system settings on the virtual machine.
     * This property must not be specified if the ImageReference property
     * referencs a Linux OS image.
     * 
     * @param {boolean}
     * [job.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
     * Gets or sets whether virtual machine is enabled for automatic updates. If
     * omitted, the default value is true.
     * 
     * @param {number} [job.poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
     * Gets or sets the maximum number of tasks that can run concurrently on a
     * single compute node in the pool.
     * 
     * @param {object}
     * [job.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy] Gets or
     * sets how tasks are distributed among compute nodes in the pool.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
     * Gets or sets how tasks should be distributed across compute nodes.
     * Possible values include: 'spread', 'pack', 'unmapped'
     * 
     * @param {moment.duration}
     * [job.poolInfo.autoPoolSpecification.pool.resizeTimeout] Gets or sets the
     * timeout for allocation of compute nodes to the pool.
     * 
     * @param {number} [job.poolInfo.autoPoolSpecification.pool.targetDedicated]
     * Gets or sets the desired number of compute nodes in the pool.
     * 
     * @param {boolean} [job.poolInfo.autoPoolSpecification.pool.enableAutoScale]
     * Gets or sets whether the pool size should automatically adjust over time.
     * 
     * @param {string} [job.poolInfo.autoPoolSpecification.pool.autoScaleFormula]
     * Gets or sets the formula for the desired number of compute nodes in the
     * pool.
     * 
     * @param {moment.duration}
     * [job.poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval] Gets
     * or sets a time interval for the desired AutoScale evaluation period in the
     * pool.
     * 
     * @param {boolean}
     * [job.poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
     * Gets or sets whether the pool permits direct communication between nodes.
     * 
     * @param {object} [job.poolInfo.autoPoolSpecification.pool.startTask] Gets or
     * sets a task to run on each compute node as it joins the pool. The task
     * runs when the node is added to the pool or when the node is restarted.
     * 
     * @param {string}
     * [job.poolInfo.autoPoolSpecification.pool.startTask.commandLine] Gets or
     * sets the command line of the start task.
     * 
     * @param {array}
     * [job.poolInfo.autoPoolSpecification.pool.startTask.resourceFiles] Gets or
     * sets a list of files that Batch will download to the compute node before
     * running the command line.
     * 
     * @param {array}
     * [job.poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the start task.
     * 
     * @param {boolean}
     * [job.poolInfo.autoPoolSpecification.pool.startTask.runElevated] Gets or
     * sets whether to run the start task in elevated mode. The default value is
     * false.
     * 
     * @param {number}
     * [job.poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount] Gets
     * or sets the maximum number of times the task may be retried.
     * 
     * @param {boolean}
     * [job.poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess] Gets or
     * sets whether the Batch Service should wait for the start task to complete
     * successfully (that is, to exit with exit code 0) before scheduling any
     * tasks on the compute node.
     * 
     * @param {array}
     * [job.poolInfo.autoPoolSpecification.pool.certificateReferences] Gets or
     * sets a list of certificates to be installed on each compute node in the
     * pool.
     * 
     * @param {array}
     * [job.poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
     * Gets or sets the list of application packages to be installed on each
     * compute node in the pool.
     * 
     * @param {array} [job.poolInfo.autoPoolSpecification.pool.metadata] Gets or
     * sets a list of name-value pairs associated with the pool as metadata.
     * 
     * @param {array} [job.metadata] Gets or sets a list of name-value pairs
     * associated with the job as metadata.
     * 
     * @param {boolean} [job.usesTaskDependencies] Gets or sets the flag that
     * determines if this job will use tasks with dependencies.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobAddOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.jobAddOptions.timeout] Sets the maximum time that
     * the server can spend processing the request, in seconds. The default is 30
     * seconds.
     * 
     * @param {string} [options.jobAddOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobAddOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.jobAddOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    add(job: models.JobAddParameter, options: { jobAddOptions? : models.JobAddOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    add(job: models.JobAddParameter, callback: ServiceCallback<void>): void;

    /**
     * Lists all of the jobs in the specified account.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobListOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.jobListOptions.filter] Sets an OData $filter
     * clause.
     * 
     * @param {string} [options.jobListOptions.select] Sets an OData $select
     * clause.
     * 
     * @param {string} [options.jobListOptions.expand] Sets an OData $expand
     * clause.
     * 
     * @param {number} [options.jobListOptions.maxResults] Sets the maximum number
     * of items to return in the response.
     * 
     * @param {number} [options.jobListOptions.timeout] Sets the maximum time that
     * the server can spend processing the request, in seconds. The default is 30
     * seconds.
     * 
     * @param {string} [options.jobListOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobListOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.jobListOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { jobListOptions? : models.JobListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobListResult>): void;
    list(callback: ServiceCallback<models.CloudJobListResult>): void;

    /**
     * Lists the jobs that have been created under the specified job schedule.
     *
     * @param {string} jobScheduleId The id of the job schedule from which you
     * want to get a list of jobs.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobListFromJobScheduleOptions] Additional
     * parameters for the operation
     * 
     * @param {string} [options.jobListFromJobScheduleOptions.filter] Sets an
     * OData $filter clause.
     * 
     * @param {string} [options.jobListFromJobScheduleOptions.select] Sets an
     * OData $select clause.
     * 
     * @param {string} [options.jobListFromJobScheduleOptions.expand] Sets an
     * OData $expand clause.
     * 
     * @param {number} [options.jobListFromJobScheduleOptions.maxResults] Sets the
     * maximum number of items to return in the response.
     * 
     * @param {number} [options.jobListFromJobScheduleOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.jobListFromJobScheduleOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.jobListFromJobScheduleOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.jobListFromJobScheduleOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listFromJobSchedule(jobScheduleId: string, options: { jobListFromJobScheduleOptions? : models.JobListFromJobScheduleOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobListResult>): void;
    listFromJobSchedule(jobScheduleId: string, callback: ServiceCallback<models.CloudJobListResult>): void;

    /**
     * Lists the execution status of the Job Preparation and Job Release task for
     * the specified job across the compute nodes where the job has run.
     *
     * @param {string} jobId The id of the job.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobListPreparationAndReleaseTaskStatusOptions]
     * Additional parameters for the operation
     * 
     * @param {string}
     * [options.jobListPreparationAndReleaseTaskStatusOptions.filter] Sets an
     * OData $filter clause.
     * 
     * @param {string}
     * [options.jobListPreparationAndReleaseTaskStatusOptions.select] Sets an
     * OData $select clause.
     * 
     * @param {number}
     * [options.jobListPreparationAndReleaseTaskStatusOptions.maxResults] Sets
     * the maximum number of items to return in the response.
     * 
     * @param {number}
     * [options.jobListPreparationAndReleaseTaskStatusOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string}
     * [options.jobListPreparationAndReleaseTaskStatusOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.jobListPreparationAndReleaseTaskStatusOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date}
     * [options.jobListPreparationAndReleaseTaskStatusOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPreparationAndReleaseTaskStatus(jobId: string, options: { jobListPreparationAndReleaseTaskStatusOptions? : models.JobListPreparationAndReleaseTaskStatusOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;
    listPreparationAndReleaseTaskStatus(jobId: string, callback: ServiceCallback<models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;

    /**
     * Lists all of the jobs in the specified account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobListNextOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.jobListNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobListNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobListNextOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { jobListNextOptions? : models.JobListNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.CloudJobListResult>): void;

    /**
     * Lists the jobs that have been created under the specified job schedule.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobListFromJobScheduleNextOptions] Additional
     * parameters for the operation
     * 
     * @param {string} [options.jobListFromJobScheduleNextOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.jobListFromJobScheduleNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobListFromJobScheduleNextOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listFromJobScheduleNext(nextPageLink: string, options: { jobListFromJobScheduleNextOptions? : models.JobListFromJobScheduleNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobListResult>): void;
    listFromJobScheduleNext(nextPageLink: string, callback: ServiceCallback<models.CloudJobListResult>): void;

    /**
     * Lists the execution status of the Job Preparation and Job Release task for
     * the specified job across the compute nodes where the job has run.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobListPreparationAndReleaseTaskStatusNextOptions]
     * Additional parameters for the operation
     * 
     * @param {string}
     * [options.jobListPreparationAndReleaseTaskStatusNextOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.jobListPreparationAndReleaseTaskStatusNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date}
     * [options.jobListPreparationAndReleaseTaskStatusNextOptions.ocpDate] The
     * time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPreparationAndReleaseTaskStatusNext(nextPageLink: string, options: { jobListPreparationAndReleaseTaskStatusNextOptions? : models.JobListPreparationAndReleaseTaskStatusNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;
    listPreparationAndReleaseTaskStatusNext(nextPageLink: string, callback: ServiceCallback<models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;
}

/**
 * @class
 * CertificateOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface CertificateOperations {

    /**
     * Adds a certificate to the specified account.
     *
     * @param {object} certificate Specifies the certificate to be added.
     * 
     * @param {string} [certificate.thumbprint] Get or sets the X.509 thumbprint
     * of the certificate. This is a sequence of up to 40 hex digits (it may
     * include spaces but these are removed).
     * 
     * @param {string} [certificate.thumbprintAlgorithm] Gets or sets the
     * algorithm used to derive the thumbprint. This must be sha1.
     * 
     * @param {string} [certificate.data] Gets or sets the base64-encoded contents
     * of the certificate. The maximum size is 10KB. This property is not
     * populated by the Get Certificate operation.
     * 
     * @param {string} [certificate.certificateFormat] Gets or sets the format of
     * the certificate data. Possible values include: 'pfx', 'cer', 'unmapped'
     * 
     * @param {string} [certificate.password] Gets or sets the password to access
     * the certificate's private key. This property is not populated by the Get
     * Certificate operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.certificateAddOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.certificateAddOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.certificateAddOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.certificateAddOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.certificateAddOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    add(certificate: models.CertificateAddParameter, options: { certificateAddOptions? : models.CertificateAddOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    add(certificate: models.CertificateAddParameter, callback: ServiceCallback<void>): void;

    /**
     * Lists all of the certificates that have been added to the specified account.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.certificateListOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.certificateListOptions.filter] Sets an OData
     * $filter clause.
     * 
     * @param {string} [options.certificateListOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {number} [options.certificateListOptions.maxResults] Sets the
     * maximum number of items to return in the response.
     * 
     * @param {number} [options.certificateListOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.certificateListOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.certificateListOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.certificateListOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { certificateListOptions? : models.CertificateListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;
    list(callback: ServiceCallback<models.CertificateListResult>): void;

    /**
     * Cancels a failed deletion of a certificate from the specified account.
     *
     * @param {string} thumbprintAlgorithm The algorithm used to derive the
     * thumbprint parameter. This must be sha1.
     * 
     * @param {string} thumbprint The thumbprint of the certificate being deleted.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.certificateCancelDeletionOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.certificateCancelDeletionOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.certificateCancelDeletionOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.certificateCancelDeletionOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.certificateCancelDeletionOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, options: { certificateCancelDeletionOptions? : models.CertificateCancelDeletionOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, callback: ServiceCallback<void>): void;

    /**
     * Deletes a certificate from the specified account.
     *
     * @param {string} thumbprintAlgorithm The algorithm used to derive the
     * thumbprint parameter. This must be sha1.
     * 
     * @param {string} thumbprint The thumbprint of the certificate to be deleted.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.certificateDeleteMethodOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.certificateDeleteMethodOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.certificateDeleteMethodOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.certificateDeleteMethodOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.certificateDeleteMethodOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(thumbprintAlgorithm: string, thumbprint: string, options: { certificateDeleteMethodOptions? : models.CertificateDeleteMethodOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(thumbprintAlgorithm: string, thumbprint: string, callback: ServiceCallback<void>): void;

    /**
     * Gets information about the specified certificate.
     *
     * @param {string} thumbprintAlgorithm The algorithm used to derive the
     * thumbprint parameter. This must be sha1.
     * 
     * @param {string} thumbprint The thumbprint of the certificate to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.certificateGetOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.certificateGetOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {number} [options.certificateGetOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.certificateGetOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.certificateGetOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.certificateGetOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(thumbprintAlgorithm: string, thumbprint: string, options: { certificateGetOptions? : models.CertificateGetOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Certificate>): void;
    get(thumbprintAlgorithm: string, thumbprint: string, callback: ServiceCallback<models.Certificate>): void;

    /**
     * Lists all of the certificates that have been added to the specified account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.certificateListNextOptions] Additional parameters
     * for the operation
     * 
     * @param {string} [options.certificateListNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.certificateListNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.certificateListNextOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { certificateListNextOptions? : models.CertificateListNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.CertificateListResult>): void;
}

/**
 * @class
 * File
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface File {

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @param {string} jobId The id of the job that contains the task.
     * 
     * @param {string} taskId The id of the task whose file you want to delete.
     * 
     * @param {string} fileName The path to the task file that you want to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.recursive] Sets whether to delete children of a
     * directory. If the fileName parameter represents a directory instead of a
     * file, you can set Recursive to true to delete the directory and all of the
     * files and subdirectories in it. If Recursive is false then the directory
     * must be empty or deletion will fail.
     * 
     * @param {object} [options.fileDeleteFromTaskOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.fileDeleteFromTaskOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.fileDeleteFromTaskOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.fileDeleteFromTaskOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.fileDeleteFromTaskOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteFromTask(jobId: string, taskId: string, fileName: string, options: { recursive? : boolean, fileDeleteFromTaskOptions? : models.FileDeleteFromTaskOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteFromTask(jobId: string, taskId: string, fileName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the content of the specified task file.
     *
     * @param {string} jobId The id of the job that contains the task.
     * 
     * @param {string} taskId The id of the task whose file you want to retrieve.
     * 
     * @param {string} fileName The path to the task file that you want to get the
     * content of.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.fileGetFromTaskOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.fileGetFromTaskOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.fileGetFromTaskOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.fileGetFromTaskOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.fileGetFromTaskOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.fileGetFromTaskOptions.ocpRange] Specifies the
     * byte range to be retrieved. The default is to retrieve the entire file.
     * The format is startRange-endRange.
     * 
     * @param {date} [options.fileGetFromTaskOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.fileGetFromTaskOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFromTask(jobId: string, taskId: string, fileName: string, options: { fileGetFromTaskOptions? : models.FileGetFromTaskOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    getFromTask(jobId: string, taskId: string, fileName: string, callback: ServiceCallback<stream.Readable>): void;

    /**
     * Gets the properties of the specified task file.
     *
     * @param {string} jobId The id of the job that contains the task.
     * 
     * @param {string} taskId The id of the task whose file you want to get the
     * properties of.
     * 
     * @param {string} fileName The path to the task file that you want to get the
     * properties of.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.fileGetNodeFilePropertiesFromTaskOptions]
     * Additional parameters for the operation
     * 
     * @param {number} [options.fileGetNodeFilePropertiesFromTaskOptions.timeout]
     * Sets the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     * 
     * @param {string}
     * [options.fileGetNodeFilePropertiesFromTaskOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.fileGetNodeFilePropertiesFromTaskOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.fileGetNodeFilePropertiesFromTaskOptions.ocpDate]
     * The time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {date}
     * [options.fileGetNodeFilePropertiesFromTaskOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date}
     * [options.fileGetNodeFilePropertiesFromTaskOptions.ifUnmodifiedSince]
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNodeFilePropertiesFromTask(jobId: string, taskId: string, fileName: string, options: { fileGetNodeFilePropertiesFromTaskOptions? : models.FileGetNodeFilePropertiesFromTaskOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    getNodeFilePropertiesFromTask(jobId: string, taskId: string, fileName: string, callback: ServiceCallback<void>): void;

    /**
     * Deletes the specified task file from the compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node from which you want to
     * delete the file.
     * 
     * @param {string} fileName The path to the file that you want to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.recursive] Sets whether to delete children of a
     * directory. If the fileName parameter represents a directory instead of a
     * file, you can set Recursive to true to delete the directory and all of the
     * files and subdirectories in it. If Recursive is false then the directory
     * must be empty or deletion will fail.
     * 
     * @param {object} [options.fileDeleteFromComputeNodeOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.fileDeleteFromComputeNodeOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.fileDeleteFromComputeNodeOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.fileDeleteFromComputeNodeOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.fileDeleteFromComputeNodeOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteFromComputeNode(poolId: string, nodeId: string, fileName: string, options: { recursive? : boolean, fileDeleteFromComputeNodeOptions? : models.FileDeleteFromComputeNodeOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteFromComputeNode(poolId: string, nodeId: string, fileName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the content of the specified task file.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node that contains the file.
     * 
     * @param {string} fileName The path to the task file that you want to get the
     * content of.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.fileGetFromComputeNodeOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.fileGetFromComputeNodeOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.fileGetFromComputeNodeOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.fileGetFromComputeNodeOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.fileGetFromComputeNodeOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.fileGetFromComputeNodeOptions.ocpRange] Specifies
     * the byte range to be retrieved. The default is to retrieve the entire
     * file.  The format is startRange-endRange.
     * 
     * @param {date} [options.fileGetFromComputeNodeOptions.ifModifiedSince]
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.fileGetFromComputeNodeOptions.ifUnmodifiedSince]
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFromComputeNode(poolId: string, nodeId: string, fileName: string, options: { fileGetFromComputeNodeOptions? : models.FileGetFromComputeNodeOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    getFromComputeNode(poolId: string, nodeId: string, fileName: string, callback: ServiceCallback<stream.Readable>): void;

    /**
     * Gets the properties of the specified compute node file.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node that contains the file.
     * 
     * @param {string} fileName The path to the compute node file that you want to
     * get the properties of.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.fileGetNodeFilePropertiesFromComputeNodeOptions]
     * Additional parameters for the operation
     * 
     * @param {number}
     * [options.fileGetNodeFilePropertiesFromComputeNodeOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string}
     * [options.fileGetNodeFilePropertiesFromComputeNodeOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.fileGetNodeFilePropertiesFromComputeNodeOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date}
     * [options.fileGetNodeFilePropertiesFromComputeNodeOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {date}
     * [options.fileGetNodeFilePropertiesFromComputeNodeOptions.ifModifiedSince]
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date}
     * [options.fileGetNodeFilePropertiesFromComputeNodeOptions.ifUnmodifiedSince]
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNodeFilePropertiesFromComputeNode(poolId: string, nodeId: string, fileName: string, options: { fileGetNodeFilePropertiesFromComputeNodeOptions? : models.FileGetNodeFilePropertiesFromComputeNodeOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    getNodeFilePropertiesFromComputeNode(poolId: string, nodeId: string, fileName: string, callback: ServiceCallback<void>): void;

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param {string} jobId The id of the job that contains the task.
     * 
     * @param {string} taskId The id of the task whose files you want to list.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.recursive] Sets whether to list children of a
     * directory.
     * 
     * @param {object} [options.fileListFromTaskOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.fileListFromTaskOptions.filter] Sets an OData
     * $filter clause.
     * 
     * @param {number} [options.fileListFromTaskOptions.maxResults] Sets the
     * maximum number of items to return in the response.
     * 
     * @param {number} [options.fileListFromTaskOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.fileListFromTaskOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.fileListFromTaskOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.fileListFromTaskOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listFromTask(jobId: string, taskId: string, options: { recursive? : boolean, fileListFromTaskOptions? : models.FileListFromTaskOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeFileListResult>): void;
    listFromTask(jobId: string, taskId: string, callback: ServiceCallback<models.NodeFileListResult>): void;

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node whose files you want to
     * list.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.recursive] Sets whether to list children of a
     * directory.
     * 
     * @param {object} [options.fileListFromComputeNodeOptions] Additional
     * parameters for the operation
     * 
     * @param {string} [options.fileListFromComputeNodeOptions.filter] Sets an
     * OData $filter clause.
     * 
     * @param {number} [options.fileListFromComputeNodeOptions.maxResults] Sets
     * the maximum number of items to return in the response.
     * 
     * @param {number} [options.fileListFromComputeNodeOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.fileListFromComputeNodeOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.fileListFromComputeNodeOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.fileListFromComputeNodeOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listFromComputeNode(poolId: string, nodeId: string, options: { recursive? : boolean, fileListFromComputeNodeOptions? : models.FileListFromComputeNodeOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeFileListResult>): void;
    listFromComputeNode(poolId: string, nodeId: string, callback: ServiceCallback<models.NodeFileListResult>): void;

    /**
     * Lists the files in a task's directory on its compute node.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.fileListFromTaskNextOptions] Additional parameters
     * for the operation
     * 
     * @param {string} [options.fileListFromTaskNextOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.fileListFromTaskNextOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.fileListFromTaskNextOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listFromTaskNext(nextPageLink: string, options: { fileListFromTaskNextOptions? : models.FileListFromTaskNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeFileListResult>): void;
    listFromTaskNext(nextPageLink: string, callback: ServiceCallback<models.NodeFileListResult>): void;

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.fileListFromComputeNodeNextOptions] Additional
     * parameters for the operation
     * 
     * @param {string}
     * [options.fileListFromComputeNodeNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.fileListFromComputeNodeNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.fileListFromComputeNodeNextOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listFromComputeNodeNext(nextPageLink: string, options: { fileListFromComputeNodeNextOptions? : models.FileListFromComputeNodeNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeFileListResult>): void;
    listFromComputeNodeNext(nextPageLink: string, callback: ServiceCallback<models.NodeFileListResult>): void;
}

/**
 * @class
 * JobSchedule
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface JobSchedule {

    /**
     * Checks the specified job schedule exists.
     *
     * @param {string} jobScheduleId The id of the job schedule which you want to
     * check.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleExistsOptions] Additional parameters
     * for the operation
     * 
     * @param {string} [options.jobScheduleExistsOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {number} [options.jobScheduleExistsOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleExistsOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleExistsOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleExistsOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.jobScheduleExistsOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobScheduleExistsOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobScheduleExistsOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.jobScheduleExistsOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    exists(jobScheduleId: string, options: { jobScheduleExistsOptions? : models.JobScheduleExistsOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;
    exists(jobScheduleId: string, callback: ServiceCallback<boolean>): void;

    /**
     * Deletes a job schedule from the specified account.
     *
     * @param {string} jobScheduleId The id of the job schedule to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleDeleteMethodOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.jobScheduleDeleteMethodOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleDeleteMethodOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.jobScheduleDeleteMethodOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.jobScheduleDeleteMethodOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.jobScheduleDeleteMethodOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobScheduleDeleteMethodOptions.ifNoneMatch] An
     * ETag is specified. Specify this header to perform the operation only if
     * the resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobScheduleDeleteMethodOptions.ifModifiedSince]
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.jobScheduleDeleteMethodOptions.ifUnmodifiedSince]
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(jobScheduleId: string, options: { jobScheduleDeleteMethodOptions? : models.JobScheduleDeleteMethodOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(jobScheduleId: string, callback: ServiceCallback<void>): void;

    /**
     * Gets information about the specified job schedule.
     *
     * @param {string} jobScheduleId The id of the job schedule to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleGetOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.jobScheduleGetOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {string} [options.jobScheduleGetOptions.expand] Sets an OData
     * $expand clause.
     * 
     * @param {number} [options.jobScheduleGetOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleGetOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleGetOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleGetOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.jobScheduleGetOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobScheduleGetOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobScheduleGetOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.jobScheduleGetOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(jobScheduleId: string, options: { jobScheduleGetOptions? : models.JobScheduleGetOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobSchedule>): void;
    get(jobScheduleId: string, callback: ServiceCallback<models.CloudJobSchedule>): void;

    /**
     * Updates the properties of the specified job schedule.
     *
     * @param {string} jobScheduleId The id of the job schedule to update.
     * 
     * @param {object} jobSchedulePatchParameter The parameters for the request.
     * 
     * @param {object} [jobSchedulePatchParameter.schedule] Sets the schedule
     * according to which jobs will be created. If you do not specify this
     * element, the existing schedule is not modified.
     * 
     * @param {date} [jobSchedulePatchParameter.schedule.doNotRunUntil] Gets or
     * sets the earliest time at which any job may be created under this job
     * schedule. If you do not specify a doNotRunUntil time, the schedule becomes
     * ready to create jobs immediately.
     * 
     * @param {date} [jobSchedulePatchParameter.schedule.doNotRunAfter] Gets or
     * sets a time after which no job will be created under this job schedule.
     * The schedule will move to the completed state as soon as this deadline is
     * past and there is no active job under this job schedule.
     * 
     * @param {moment.duration} [jobSchedulePatchParameter.schedule.startWindow]
     * Gets or sets the time interval, starting from the time at which the
     * schedule indicates a job should be created, within which a job must be
     * created.  If a job is not created within the startWindow interval, then
     * the 'opportunity' is lost; no job will be created until the next
     * recurrence of the schedule.
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.schedule.recurrenceInterval] Gets or sets the
     * time interval between the start times of two successive jobs under the job
     * schedule. A job schedule can have at most one active job under it at any
     * given time.
     * 
     * @param {object} [jobSchedulePatchParameter.jobSpecification] Sets the
     * details of the jobs to be created on this schedule.
     * 
     * @param {number} [jobSchedulePatchParameter.jobSpecification.priority] Gets
     * or sets the priority of jobs created under this schedule. Priority values
     * can range from -1000 to 1000, with -1000 being the lowest priority and
     * 1000 being the highest priority. The default value is 0.
     * 
     * @param {string} [jobSchedulePatchParameter.jobSpecification.displayName]
     * Gets or sets the display name for jobs created under this schedule. It
     * need not be unique and can contain any Unicode characters up to a maximum
     * length of 1024.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.usesTaskDependencies] Gets or
     * sets the flag that determines if this job will use tasks with dependencies.
     * 
     * @param {object} [jobSchedulePatchParameter.jobSpecification.constraints]
     * Gets or sets the execution constraints for jobs created under this
     * schedule.
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.jobSpecification.constraints.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the job may run, measured from
     * the time the job starts. If the job does not complete within the time
     * limit, the Batch service terminates it and any tasks that are still
     * running.
     * 
     * @param {number}
     * [jobSchedulePatchParameter.jobSpecification.constraints.maxTaskRetryCount]
     * Gets or sets the maximum number of times each task may be retried. The
     * Batch service retries a task if its exit code is nonzero.
     * 
     * @param {object} [jobSchedulePatchParameter.jobSpecification.jobManagerTask]
     * Gets or sets the details of a Job Manager task to be launched when a job
     * is started under this schedule.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.id] Gets or
     * sets a string that uniquely identifies the Job Manager task. A GUID is
     * recommended.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.displayName]
     * Gets or sets the display name of the Job Manager task.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.commandLine]
     * Gets or sets the command line of the Job Manager task.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job Manager
     * task.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.constraints]
     * Gets or sets constraints that apply to the Job Manager task.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.killJobOnCompletion]
     * Gets or sets whether completion of the Job Manager task signifies
     * completion of the entire job.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.runElevated]
     * Gets or sets whether to run the Job Manager task in elevated mode. The
     * default value is false.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.jobManagerTask.runExclusive]
     * Gets or sets whether the Job Manager task requires exclusive use of the
     * compute node where it runs.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask] Gets or
     * sets the Job Preparation task for jobs created under this schedule.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.id] Gets or
     * sets a string that uniquely identifies the job preparation task within the
     * job. The id can contain any combination of alphanumeric characters
     * including hyphens and underscores and cannot contain more than 64
     * characters.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.commandLine]
     * Gets or sets the command line of the Job Preparation task.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job
     * Preparation task.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.constraints]
     * Gets or sets constraints that apply to the Job Preparation task..
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.constraints.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the task may run, measured from
     * the time the task starts. If the task does not complete within the time
     * limit, the Batch service terminates it.
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.constraints.retentionTime]
     * Gets or sets the minimum time to retain the working directory for the task
     * on the compute node where it ran. After this time, the Batch service may
     * delete the working directory and all its contents. The default is infinite.
     * 
     * @param {number}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.constraints.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried. The
     * Batch service retries a task if its exit code is nonzero.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the Job Preparation
     * task to complete successfully before scheduling any other tasks of the job
     * on the compute node.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.runElevated]
     * Gets or sets whether to run the Job Preparation task in elevated mode. The
     * default value is false.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.jobPreparationTask.rerunOnNodeRebootAfterSuccess]
     * Gets or sets whether the Batch service should rerun the Job Preparation
     * task after a compute node reboots. The default value is true.
     * 
     * @param {object} [jobSchedulePatchParameter.jobSpecification.jobReleaseTask]
     * Gets or sets the Job Release task for jobs created under this schedule.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.jobReleaseTask.id] Gets or
     * sets a string that uniquely identifies the Job Release task within the
     * job. The id can contain any combination of alphanumeric characters
     * including hyphens and underscores and cannot contain more than 64
     * characters.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.jobReleaseTask.commandLine]
     * Gets or sets the command line of the Job Release task.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.jobReleaseTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.jobReleaseTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job Release
     * task.
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.jobSpecification.jobReleaseTask.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the Job Release task may run on
     * a given compute node, measured from the time the task starts. If the task
     * does not complete within the time limit, the Batch service terminates it.
     * The default value is 15 minutes.
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.jobSpecification.jobReleaseTask.retentionTime]
     * Gets or sets the minimum time to retain the working directory for the Job
     * Release task on the compute node.  After this time, the Batch service may
     * delete the working directory and all its contents. The default is infinite.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.jobReleaseTask.runElevated]
     * Gets or sets whether to run the Job Release task in elevated mode. The
     * default value is false.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.commonEnvironmentSettings]
     * Gets or sets a list of common environment variable settings.  These
     * environment variables are set for all tasks in jobs created under this
     * schedule (including the Job Manager, Job Preparation and Job Release
     * tasks).
     * 
     * @param {object} [jobSchedulePatchParameter.jobSpecification.poolInfo] Gets
     * or sets the pool on which the Batch service runs the tasks of jobs created
     * under this schedule.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.poolId] Gets or sets
     * the id of an existing pool. All the tasks of the job will run on the
     * specified pool. You must specify either PoolId or AutoPoolSpecification,
     * but not both.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification]
     * Gets or sets characteristics for a temporary 'auto pool'. The Batch
     * service will create this auto pool and run all of the tasks of the job on
     * it, and will delete the pool once the job has completed. You must specify
     * either PoolId or AutoPoolSpecification, but not both.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.autoPoolIdPrefix]
     * Gets or sets a prefix to be added to the unique identifier when a pool is
     * automatically created. The prefix can be up to 20 characters long.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.poolLifetimeOption]
     * Gets or sets the minimum lifetime of created auto pools, and how multiple
     * jobs on a schedule are assigned to pools. Possible values include:
     * 'jobschedule', 'job', 'unmapped'
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.keepAlive]
     * Gets or sets whether to keep an auto pool alive after its lifetime expires.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool]
     * Gets or sets the pool specification for the auto pool.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.displayName]
     * Gets or sets the display name for the pool.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.vmSize]
     * Gets or sets the size of the virtual machines in the pool. All VMs in a
     * pool are the same size.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration]
     * Gets or sets the cloud service configuration for the pool. This property
     * and VirtualMachineConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
     * Gets or sets the Azure Guest OS family to be installed on the virtual
     * machines in the pool.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
     * Gets or sets the Azure Guest OS version to be installed on the virtual
     * machines in the pool. The default value is * which specifies the latest
     * operating system version for the specified OS family.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
     * Gets or sets the Azure Guest OS Version currently installed on the virtual
     * machines in the pool. This may differ from TargetOSVersion if the pool
     * state is Upgrading.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration]
     * Gets or sets the virtual machine configuration for the pool. This property
     * and CloudServiceConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
     * Gets or sets information about the platform or marketplace image to use.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
     * Gets or sets the publisher of the image.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
     * Gets or sets the offer of the image.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
     * Gets or sets the SKU of the image.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
     * Gets or sets the version of the image. A value of 'latest' can be
     * specified to select the latest version of an image.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
     * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
     * the compute node. This property must match the ImageReference property.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
     * Gets or sets Windows operating system settings on the virtual machine.
     * This property must not be specified if the ImageReference property
     * referencs a Linux OS image.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
     * Gets or sets whether virtual machine is enabled for automatic updates. If
     * omitted, the default value is true.
     * 
     * @param {number}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
     * Gets or sets the maximum number of tasks that can run concurrently on a
     * single compute node in the pool.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
     * Gets or sets how tasks are distributed among compute nodes in the pool.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
     * Gets or sets how tasks should be distributed across compute nodes.
     * Possible values include: 'spread', 'pack', 'unmapped'
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.resizeTimeout]
     * Gets or sets the timeout for allocation of compute nodes to the pool.
     * 
     * @param {number}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.targetDedicated]
     * Gets or sets the desired number of compute nodes in the pool.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.enableAutoScale]
     * Gets or sets whether the pool size should automatically adjust over time.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleFormula]
     * Gets or sets the formula for the desired number of compute nodes in the
     * pool.
     * 
     * @param {moment.duration}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval]
     * Gets or sets a time interval for the desired AutoScale evaluation period
     * in the pool.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
     * Gets or sets whether the pool permits direct communication between nodes.
     * 
     * @param {object}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask]
     * Gets or sets a task to run on each compute node as it joins the pool. The
     * task runs when the node is added to the pool or when the node is restarted.
     * 
     * @param {string}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.commandLine]
     * Gets or sets the command line of the start task.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the start task.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.runElevated]
     * Gets or sets whether to run the start task in elevated mode. The default
     * value is false.
     * 
     * @param {number}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried.
     * 
     * @param {boolean}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the start task to
     * complete successfully (that is, to exit with exit code 0) before
     * scheduling any tasks on the compute node.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.certificateReferences]
     * Gets or sets a list of certificates to be installed on each compute node
     * in the pool.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
     * Gets or sets the list of application packages to be installed on each
     * compute node in the pool.
     * 
     * @param {array}
     * [jobSchedulePatchParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.metadata]
     * Gets or sets a list of name-value pairs associated with the pool as
     * metadata.
     * 
     * @param {array} [jobSchedulePatchParameter.jobSpecification.metadata] Gets
     * or sets a list of name-value pairs associated with each job created under
     * this schedule as metadata.
     * 
     * @param {array} [jobSchedulePatchParameter.metadata] Sets a list of
     * name-value pairs associated with the job schedule as metadata.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobSchedulePatchOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.jobSchedulePatchOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobSchedulePatchOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobSchedulePatchOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobSchedulePatchOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.jobSchedulePatchOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobSchedulePatchOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobSchedulePatchOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.jobSchedulePatchOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patch(jobScheduleId: string, jobSchedulePatchParameter: models.JobSchedulePatchParameter, options: { jobSchedulePatchOptions? : models.JobSchedulePatchOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    patch(jobScheduleId: string, jobSchedulePatchParameter: models.JobSchedulePatchParameter, callback: ServiceCallback<void>): void;

    /**
     * Updates the properties of the specified job schedule.
     *
     * @param {string} jobScheduleId The id of the job schedule to update.
     * 
     * @param {object} jobScheduleUpdateParameter The parameters for the request.
     * 
     * @param {object} [jobScheduleUpdateParameter.schedule] Sets the schedule
     * according to which jobs will be created. If you do not specify this
     * element, it is equivalent to passing the default schedule: that is, a
     * single job scheduled to run immediately.
     * 
     * @param {date} [jobScheduleUpdateParameter.schedule.doNotRunUntil] Gets or
     * sets the earliest time at which any job may be created under this job
     * schedule. If you do not specify a doNotRunUntil time, the schedule becomes
     * ready to create jobs immediately.
     * 
     * @param {date} [jobScheduleUpdateParameter.schedule.doNotRunAfter] Gets or
     * sets a time after which no job will be created under this job schedule.
     * The schedule will move to the completed state as soon as this deadline is
     * past and there is no active job under this job schedule.
     * 
     * @param {moment.duration} [jobScheduleUpdateParameter.schedule.startWindow]
     * Gets or sets the time interval, starting from the time at which the
     * schedule indicates a job should be created, within which a job must be
     * created.  If a job is not created within the startWindow interval, then
     * the 'opportunity' is lost; no job will be created until the next
     * recurrence of the schedule.
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.schedule.recurrenceInterval] Gets or sets the
     * time interval between the start times of two successive jobs under the job
     * schedule. A job schedule can have at most one active job under it at any
     * given time.
     * 
     * @param {object} [jobScheduleUpdateParameter.jobSpecification] Sets details
     * of the jobs to be created on this schedule.
     * 
     * @param {number} [jobScheduleUpdateParameter.jobSpecification.priority] Gets
     * or sets the priority of jobs created under this schedule. Priority values
     * can range from -1000 to 1000, with -1000 being the lowest priority and
     * 1000 being the highest priority. The default value is 0.
     * 
     * @param {string} [jobScheduleUpdateParameter.jobSpecification.displayName]
     * Gets or sets the display name for jobs created under this schedule. It
     * need not be unique and can contain any Unicode characters up to a maximum
     * length of 1024.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.usesTaskDependencies] Gets or
     * sets the flag that determines if this job will use tasks with dependencies.
     * 
     * @param {object} [jobScheduleUpdateParameter.jobSpecification.constraints]
     * Gets or sets the execution constraints for jobs created under this
     * schedule.
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.jobSpecification.constraints.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the job may run, measured from
     * the time the job starts. If the job does not complete within the time
     * limit, the Batch service terminates it and any tasks that are still
     * running.
     * 
     * @param {number}
     * [jobScheduleUpdateParameter.jobSpecification.constraints.maxTaskRetryCount]
     * Gets or sets the maximum number of times each task may be retried. The
     * Batch service retries a task if its exit code is nonzero.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask] Gets or sets
     * the details of a Job Manager task to be launched when a job is started
     * under this schedule.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.id] Gets or
     * sets a string that uniquely identifies the Job Manager task. A GUID is
     * recommended.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.displayName]
     * Gets or sets the display name of the Job Manager task.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.commandLine]
     * Gets or sets the command line of the Job Manager task.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job Manager
     * task.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.constraints]
     * Gets or sets constraints that apply to the Job Manager task.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.killJobOnCompletion]
     * Gets or sets whether completion of the Job Manager task signifies
     * completion of the entire job.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.runElevated]
     * Gets or sets whether to run the Job Manager task in elevated mode. The
     * default value is false.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.jobManagerTask.runExclusive]
     * Gets or sets whether the Job Manager task requires exclusive use of the
     * compute node where it runs.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask] Gets or
     * sets the Job Preparation task for jobs created under this schedule.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.id] Gets
     * or sets a string that uniquely identifies the job preparation task within
     * the job. The id can contain any combination of alphanumeric characters
     * including hyphens and underscores and cannot contain more than 64
     * characters.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.commandLine]
     * Gets or sets the command line of the Job Preparation task.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job
     * Preparation task.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.constraints]
     * Gets or sets constraints that apply to the Job Preparation task..
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.constraints.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the task may run, measured from
     * the time the task starts. If the task does not complete within the time
     * limit, the Batch service terminates it.
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.constraints.retentionTime]
     * Gets or sets the minimum time to retain the working directory for the task
     * on the compute node where it ran. After this time, the Batch service may
     * delete the working directory and all its contents. The default is infinite.
     * 
     * @param {number}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.constraints.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried. The
     * Batch service retries a task if its exit code is nonzero.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the Job Preparation
     * task to complete successfully before scheduling any other tasks of the job
     * on the compute node.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.runElevated]
     * Gets or sets whether to run the Job Preparation task in elevated mode. The
     * default value is false.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.jobPreparationTask.rerunOnNodeRebootAfterSuccess]
     * Gets or sets whether the Batch service should rerun the Job Preparation
     * task after a compute node reboots. The default value is true.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask] Gets or sets
     * the Job Release task for jobs created under this schedule.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask.id] Gets or
     * sets a string that uniquely identifies the Job Release task within the
     * job. The id can contain any combination of alphanumeric characters
     * including hyphens and underscores and cannot contain more than 64
     * characters.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask.commandLine]
     * Gets or sets the command line of the Job Release task.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job Release
     * task.
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the Job Release task may run on
     * a given compute node, measured from the time the task starts. If the task
     * does not complete within the time limit, the Batch service terminates it.
     * The default value is 15 minutes.
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask.retentionTime]
     * Gets or sets the minimum time to retain the working directory for the Job
     * Release task on the compute node.  After this time, the Batch service may
     * delete the working directory and all its contents. The default is infinite.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.jobReleaseTask.runElevated]
     * Gets or sets whether to run the Job Release task in elevated mode. The
     * default value is false.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.commonEnvironmentSettings]
     * Gets or sets a list of common environment variable settings.  These
     * environment variables are set for all tasks in jobs created under this
     * schedule (including the Job Manager, Job Preparation and Job Release
     * tasks).
     * 
     * @param {object} [jobScheduleUpdateParameter.jobSpecification.poolInfo] Gets
     * or sets the pool on which the Batch service runs the tasks of jobs created
     * under this schedule.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.poolId] Gets or sets
     * the id of an existing pool. All the tasks of the job will run on the
     * specified pool. You must specify either PoolId or AutoPoolSpecification,
     * but not both.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification]
     * Gets or sets characteristics for a temporary 'auto pool'. The Batch
     * service will create this auto pool and run all of the tasks of the job on
     * it, and will delete the pool once the job has completed. You must specify
     * either PoolId or AutoPoolSpecification, but not both.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.autoPoolIdPrefix]
     * Gets or sets a prefix to be added to the unique identifier when a pool is
     * automatically created. The prefix can be up to 20 characters long.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.poolLifetimeOption]
     * Gets or sets the minimum lifetime of created auto pools, and how multiple
     * jobs on a schedule are assigned to pools. Possible values include:
     * 'jobschedule', 'job', 'unmapped'
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.keepAlive]
     * Gets or sets whether to keep an auto pool alive after its lifetime expires.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool]
     * Gets or sets the pool specification for the auto pool.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.displayName]
     * Gets or sets the display name for the pool.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.vmSize]
     * Gets or sets the size of the virtual machines in the pool. All VMs in a
     * pool are the same size.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration]
     * Gets or sets the cloud service configuration for the pool. This property
     * and VirtualMachineConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
     * Gets or sets the Azure Guest OS family to be installed on the virtual
     * machines in the pool.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
     * Gets or sets the Azure Guest OS version to be installed on the virtual
     * machines in the pool. The default value is * which specifies the latest
     * operating system version for the specified OS family.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
     * Gets or sets the Azure Guest OS Version currently installed on the virtual
     * machines in the pool. This may differ from TargetOSVersion if the pool
     * state is Upgrading.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration]
     * Gets or sets the virtual machine configuration for the pool. This property
     * and CloudServiceConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
     * Gets or sets information about the platform or marketplace image to use.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
     * Gets or sets the publisher of the image.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
     * Gets or sets the offer of the image.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
     * Gets or sets the SKU of the image.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
     * Gets or sets the version of the image. A value of 'latest' can be
     * specified to select the latest version of an image.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
     * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
     * the compute node. This property must match the ImageReference property.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
     * Gets or sets Windows operating system settings on the virtual machine.
     * This property must not be specified if the ImageReference property
     * referencs a Linux OS image.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
     * Gets or sets whether virtual machine is enabled for automatic updates. If
     * omitted, the default value is true.
     * 
     * @param {number}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
     * Gets or sets the maximum number of tasks that can run concurrently on a
     * single compute node in the pool.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
     * Gets or sets how tasks are distributed among compute nodes in the pool.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
     * Gets or sets how tasks should be distributed across compute nodes.
     * Possible values include: 'spread', 'pack', 'unmapped'
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.resizeTimeout]
     * Gets or sets the timeout for allocation of compute nodes to the pool.
     * 
     * @param {number}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.targetDedicated]
     * Gets or sets the desired number of compute nodes in the pool.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.enableAutoScale]
     * Gets or sets whether the pool size should automatically adjust over time.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleFormula]
     * Gets or sets the formula for the desired number of compute nodes in the
     * pool.
     * 
     * @param {moment.duration}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval]
     * Gets or sets a time interval for the desired AutoScale evaluation period
     * in the pool.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
     * Gets or sets whether the pool permits direct communication between nodes.
     * 
     * @param {object}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask]
     * Gets or sets a task to run on each compute node as it joins the pool. The
     * task runs when the node is added to the pool or when the node is restarted.
     * 
     * @param {string}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.commandLine]
     * Gets or sets the command line of the start task.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the start task.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.runElevated]
     * Gets or sets whether to run the start task in elevated mode. The default
     * value is false.
     * 
     * @param {number}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried.
     * 
     * @param {boolean}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the start task to
     * complete successfully (that is, to exit with exit code 0) before
     * scheduling any tasks on the compute node.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.certificateReferences]
     * Gets or sets a list of certificates to be installed on each compute node
     * in the pool.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
     * Gets or sets the list of application packages to be installed on each
     * compute node in the pool.
     * 
     * @param {array}
     * [jobScheduleUpdateParameter.jobSpecification.poolInfo.autoPoolSpecification.pool.metadata]
     * Gets or sets a list of name-value pairs associated with the pool as
     * metadata.
     * 
     * @param {array} [jobScheduleUpdateParameter.jobSpecification.metadata] Gets
     * or sets a list of name-value pairs associated with each job created under
     * this schedule as metadata.
     * 
     * @param {array} [jobScheduleUpdateParameter.metadata] Sets a list of
     * name-value pairs associated with the job schedule as metadata. If you do
     * not specify this element, it takes the default value of an empty list; in
     * effect, any existing metadata is deleted.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleUpdateOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.jobScheduleUpdateOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleUpdateOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleUpdateOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleUpdateOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.jobScheduleUpdateOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobScheduleUpdateOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobScheduleUpdateOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.jobScheduleUpdateOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(jobScheduleId: string, jobScheduleUpdateParameter: models.JobScheduleUpdateParameter, options: { jobScheduleUpdateOptions? : models.JobScheduleUpdateOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    update(jobScheduleId: string, jobScheduleUpdateParameter: models.JobScheduleUpdateParameter, callback: ServiceCallback<void>): void;

    /**
     * Disables a job schedule.
     *
     * @param {string} jobScheduleId The id of the job schedule to disable.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleDisableOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.jobScheduleDisableOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleDisableOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleDisableOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleDisableOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.jobScheduleDisableOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobScheduleDisableOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobScheduleDisableOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.jobScheduleDisableOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    disable(jobScheduleId: string, options: { jobScheduleDisableOptions? : models.JobScheduleDisableOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    disable(jobScheduleId: string, callback: ServiceCallback<void>): void;

    /**
     * Enables a job schedule.
     *
     * @param {string} jobScheduleId The id of the job schedule to enable.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleEnableOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.jobScheduleEnableOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleEnableOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleEnableOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleEnableOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.jobScheduleEnableOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobScheduleEnableOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobScheduleEnableOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.jobScheduleEnableOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enable(jobScheduleId: string, options: { jobScheduleEnableOptions? : models.JobScheduleEnableOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    enable(jobScheduleId: string, callback: ServiceCallback<void>): void;

    /**
     * Terminates a job schedule.
     *
     * @param {string} jobScheduleId The id of the job schedule to terminates.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleTerminateOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.jobScheduleTerminateOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleTerminateOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.jobScheduleTerminateOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.jobScheduleTerminateOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.jobScheduleTerminateOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.jobScheduleTerminateOptions.ifNoneMatch] An ETag
     * is specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.jobScheduleTerminateOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.jobScheduleTerminateOptions.ifUnmodifiedSince]
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    terminate(jobScheduleId: string, options: { jobScheduleTerminateOptions? : models.JobScheduleTerminateOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    terminate(jobScheduleId: string, callback: ServiceCallback<void>): void;

    /**
     * Adds a job schedule to the specified account.
     *
     * @param {object} cloudJobSchedule Specifies the job schedule to be added.
     * 
     * @param {string} [cloudJobSchedule.id] Gets or sets a string that uniquely
     * identifies the schedule within the account. A GUID is recommended.
     * 
     * @param {string} [cloudJobSchedule.displayName] Gets or sets the display
     * name for the schedule.
     * 
     * @param {object} [cloudJobSchedule.schedule] Gets or sets the schedule
     * according to which jobs will be created.
     * 
     * @param {date} [cloudJobSchedule.schedule.doNotRunUntil] Gets or sets the
     * earliest time at which any job may be created under this job schedule. If
     * you do not specify a doNotRunUntil time, the schedule becomes ready to
     * create jobs immediately.
     * 
     * @param {date} [cloudJobSchedule.schedule.doNotRunAfter] Gets or sets a time
     * after which no job will be created under this job schedule.  The schedule
     * will move to the completed state as soon as this deadline is past and
     * there is no active job under this job schedule.
     * 
     * @param {moment.duration} [cloudJobSchedule.schedule.startWindow] Gets or
     * sets the time interval, starting from the time at which the schedule
     * indicates a job should be created, within which a job must be created.  If
     * a job is not created within the startWindow interval, then the
     * 'opportunity' is lost; no job will be created until the next recurrence of
     * the schedule.
     * 
     * @param {moment.duration} [cloudJobSchedule.schedule.recurrenceInterval]
     * Gets or sets the time interval between the start times of two successive
     * jobs under the job schedule. A job schedule can have at most one active
     * job under it at any given time.
     * 
     * @param {object} [cloudJobSchedule.jobSpecification] Gets or sets the
     * details of the jobs to be created on this schedule.
     * 
     * @param {number} [cloudJobSchedule.jobSpecification.priority] Gets or sets
     * the priority of jobs created under this schedule. Priority values can
     * range from -1000 to 1000, with -1000 being the lowest priority and 1000
     * being the highest priority. The default value is 0.
     * 
     * @param {string} [cloudJobSchedule.jobSpecification.displayName] Gets or
     * sets the display name for jobs created under this schedule. It need not be
     * unique and can contain any Unicode characters up to a maximum length of
     * 1024.
     * 
     * @param {boolean} [cloudJobSchedule.jobSpecification.usesTaskDependencies]
     * Gets or sets the flag that determines if this job will use tasks with
     * dependencies.
     * 
     * @param {object} [cloudJobSchedule.jobSpecification.constraints] Gets or
     * sets the execution constraints for jobs created under this schedule.
     * 
     * @param {moment.duration}
     * [cloudJobSchedule.jobSpecification.constraints.maxWallClockTime] Gets or
     * sets the maximum elapsed time that the job may run, measured from the time
     * the job starts. If the job does not complete within the time limit, the
     * Batch service terminates it and any tasks that are still running.
     * 
     * @param {number}
     * [cloudJobSchedule.jobSpecification.constraints.maxTaskRetryCount] Gets or
     * sets the maximum number of times each task may be retried. The Batch
     * service retries a task if its exit code is nonzero.
     * 
     * @param {object} [cloudJobSchedule.jobSpecification.jobManagerTask] Gets or
     * sets the details of a Job Manager task to be launched when a job is
     * started under this schedule.
     * 
     * @param {string} [cloudJobSchedule.jobSpecification.jobManagerTask.id] Gets
     * or sets a string that uniquely identifies the Job Manager task. A GUID is
     * recommended.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.displayName] Gets or
     * sets the display name of the Job Manager task.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.commandLine] Gets or
     * sets the command line of the Job Manager task.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.resourceFiles] Gets or
     * sets a list of files that Batch will download to the compute node before
     * running the command line.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job Manager
     * task.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.constraints] Gets or
     * sets constraints that apply to the Job Manager task.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.killJobOnCompletion]
     * Gets or sets whether completion of the Job Manager task signifies
     * completion of the entire job.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.runElevated] Gets or
     * sets whether to run the Job Manager task in elevated mode. The default
     * value is false.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.jobManagerTask.runExclusive] Gets or
     * sets whether the Job Manager task requires exclusive use of the compute
     * node where it runs.
     * 
     * @param {object} [cloudJobSchedule.jobSpecification.jobPreparationTask] Gets
     * or sets the Job Preparation task for jobs created under this schedule.
     * 
     * @param {string} [cloudJobSchedule.jobSpecification.jobPreparationTask.id]
     * Gets or sets a string that uniquely identifies the job preparation task
     * within the job. The id can contain any combination of alphanumeric
     * characters including hyphens and underscores and cannot contain more than
     * 64 characters.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.commandLine] Gets or
     * sets the command line of the Job Preparation task.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.resourceFiles] Gets
     * or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job
     * Preparation task.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.constraints] Gets or
     * sets constraints that apply to the Job Preparation task..
     * 
     * @param {moment.duration}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.constraints.maxWallClockTime]
     * Gets or sets the maximum elapsed time that the task may run, measured from
     * the time the task starts. If the task does not complete within the time
     * limit, the Batch service terminates it.
     * 
     * @param {moment.duration}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.constraints.retentionTime]
     * Gets or sets the minimum time to retain the working directory for the task
     * on the compute node where it ran. After this time, the Batch service may
     * delete the working directory and all its contents. The default is infinite.
     * 
     * @param {number}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.constraints.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried. The
     * Batch service retries a task if its exit code is nonzero.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.waitForSuccess] Gets
     * or sets whether the Batch Service should wait for the Job Preparation task
     * to complete successfully before scheduling any other tasks of the job on
     * the compute node.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.runElevated] Gets or
     * sets whether to run the Job Preparation task in elevated mode. The default
     * value is false.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.jobPreparationTask.rerunOnNodeRebootAfterSuccess]
     * Gets or sets whether the Batch service should rerun the Job Preparation
     * task after a compute node reboots. The default value is true.
     * 
     * @param {object} [cloudJobSchedule.jobSpecification.jobReleaseTask] Gets or
     * sets the Job Release task for jobs created under this schedule.
     * 
     * @param {string} [cloudJobSchedule.jobSpecification.jobReleaseTask.id] Gets
     * or sets a string that uniquely identifies the Job Release task within the
     * job. The id can contain any combination of alphanumeric characters
     * including hyphens and underscores and cannot contain more than 64
     * characters.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.jobReleaseTask.commandLine] Gets or
     * sets the command line of the Job Release task.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.jobReleaseTask.resourceFiles] Gets or
     * sets a list of files that Batch will download to the compute node before
     * running the command line.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.jobReleaseTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the Job Release
     * task.
     * 
     * @param {moment.duration}
     * [cloudJobSchedule.jobSpecification.jobReleaseTask.maxWallClockTime] Gets
     * or sets the maximum elapsed time that the Job Release task may run on a
     * given compute node, measured from the time the task starts. If the task
     * does not complete within the time limit, the Batch service terminates it.
     * The default value is 15 minutes.
     * 
     * @param {moment.duration}
     * [cloudJobSchedule.jobSpecification.jobReleaseTask.retentionTime] Gets or
     * sets the minimum time to retain the working directory for the Job Release
     * task on the compute node.  After this time, the Batch service may delete
     * the working directory and all its contents. The default is infinite.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.jobReleaseTask.runElevated] Gets or
     * sets whether to run the Job Release task in elevated mode. The default
     * value is false.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.commonEnvironmentSettings] Gets or sets
     * a list of common environment variable settings.  These environment
     * variables are set for all tasks in jobs created under this schedule
     * (including the Job Manager, Job Preparation and Job Release tasks).
     * 
     * @param {object} [cloudJobSchedule.jobSpecification.poolInfo] Gets or sets
     * the pool on which the Batch service runs the tasks of jobs created under
     * this schedule.
     * 
     * @param {string} [cloudJobSchedule.jobSpecification.poolInfo.poolId] Gets or
     * sets the id of an existing pool. All the tasks of the job will run on the
     * specified pool. You must specify either PoolId or AutoPoolSpecification,
     * but not both.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification] Gets or
     * sets characteristics for a temporary 'auto pool'. The Batch service will
     * create this auto pool and run all of the tasks of the job on it, and will
     * delete the pool once the job has completed. You must specify either PoolId
     * or AutoPoolSpecification, but not both.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.autoPoolIdPrefix]
     * Gets or sets a prefix to be added to the unique identifier when a pool is
     * automatically created. The prefix can be up to 20 characters long.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.poolLifetimeOption]
     * Gets or sets the minimum lifetime of created auto pools, and how multiple
     * jobs on a schedule are assigned to pools. Possible values include:
     * 'jobschedule', 'job', 'unmapped'
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.keepAlive]
     * Gets or sets whether to keep an auto pool alive after its lifetime expires.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool]
     * Gets or sets the pool specification for the auto pool.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.displayName]
     * Gets or sets the display name for the pool.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.vmSize]
     * Gets or sets the size of the virtual machines in the pool. All VMs in a
     * pool are the same size.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration]
     * Gets or sets the cloud service configuration for the pool. This property
     * and VirtualMachineConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
     * Gets or sets the Azure Guest OS family to be installed on the virtual
     * machines in the pool.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
     * Gets or sets the Azure Guest OS version to be installed on the virtual
     * machines in the pool. The default value is * which specifies the latest
     * operating system version for the specified OS family.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
     * Gets or sets the Azure Guest OS Version currently installed on the virtual
     * machines in the pool. This may differ from TargetOSVersion if the pool
     * state is Upgrading.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration]
     * Gets or sets the virtual machine configuration for the pool. This property
     * and CloudServiceConfiguration are mutually exclusive and one of the
     * properties must be specified.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
     * Gets or sets information about the platform or marketplace image to use.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
     * Gets or sets the publisher of the image.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
     * Gets or sets the offer of the image.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
     * Gets or sets the SKU of the image.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
     * Gets or sets the version of the image. A value of 'latest' can be
     * specified to select the latest version of an image.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
     * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
     * the compute node. This property must match the ImageReference property.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
     * Gets or sets Windows operating system settings on the virtual machine.
     * This property must not be specified if the ImageReference property
     * referencs a Linux OS image.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
     * Gets or sets whether virtual machine is enabled for automatic updates. If
     * omitted, the default value is true.
     * 
     * @param {number}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
     * Gets or sets the maximum number of tasks that can run concurrently on a
     * single compute node in the pool.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
     * Gets or sets how tasks are distributed among compute nodes in the pool.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
     * Gets or sets how tasks should be distributed across compute nodes.
     * Possible values include: 'spread', 'pack', 'unmapped'
     * 
     * @param {moment.duration}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.resizeTimeout]
     * Gets or sets the timeout for allocation of compute nodes to the pool.
     * 
     * @param {number}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.targetDedicated]
     * Gets or sets the desired number of compute nodes in the pool.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.enableAutoScale]
     * Gets or sets whether the pool size should automatically adjust over time.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleFormula]
     * Gets or sets the formula for the desired number of compute nodes in the
     * pool.
     * 
     * @param {moment.duration}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval]
     * Gets or sets a time interval for the desired AutoScale evaluation period
     * in the pool.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
     * Gets or sets whether the pool permits direct communication between nodes.
     * 
     * @param {object}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask]
     * Gets or sets a task to run on each compute node as it joins the pool. The
     * task runs when the node is added to the pool or when the node is restarted.
     * 
     * @param {string}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.commandLine]
     * Gets or sets the command line of the start task.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.resourceFiles]
     * Gets or sets a list of files that Batch will download to the compute node
     * before running the command line.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
     * Gets or sets a list of environment variable settings for the start task.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.runElevated]
     * Gets or sets whether to run the start task in elevated mode. The default
     * value is false.
     * 
     * @param {number}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount]
     * Gets or sets the maximum number of times the task may be retried.
     * 
     * @param {boolean}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess]
     * Gets or sets whether the Batch Service should wait for the start task to
     * complete successfully (that is, to exit with exit code 0) before
     * scheduling any tasks on the compute node.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.certificateReferences]
     * Gets or sets a list of certificates to be installed on each compute node
     * in the pool.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
     * Gets or sets the list of application packages to be installed on each
     * compute node in the pool.
     * 
     * @param {array}
     * [cloudJobSchedule.jobSpecification.poolInfo.autoPoolSpecification.pool.metadata]
     * Gets or sets a list of name-value pairs associated with the pool as
     * metadata.
     * 
     * @param {array} [cloudJobSchedule.jobSpecification.metadata] Gets or sets a
     * list of name-value pairs associated with each job created under this
     * schedule as metadata.
     * 
     * @param {array} [cloudJobSchedule.metadata] Gets or sets a list of
     * name-value pairs associated with the schedule as metadata.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleAddOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.jobScheduleAddOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleAddOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleAddOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleAddOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    add(cloudJobSchedule: models.JobScheduleAddParameter, options: { jobScheduleAddOptions? : models.JobScheduleAddOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    add(cloudJobSchedule: models.JobScheduleAddParameter, callback: ServiceCallback<void>): void;

    /**
     * Lists all of the job schedules in the specified account.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleListOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.jobScheduleListOptions.filter] Sets an OData
     * $filter clause.
     * 
     * @param {string} [options.jobScheduleListOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {string} [options.jobScheduleListOptions.expand] Sets an OData
     * $expand clause.
     * 
     * @param {number} [options.jobScheduleListOptions.maxResults] Sets the
     * maximum number of items to return in the response.
     * 
     * @param {number} [options.jobScheduleListOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.jobScheduleListOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleListOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleListOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { jobScheduleListOptions? : models.JobScheduleListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobScheduleListResult>): void;
    list(callback: ServiceCallback<models.CloudJobScheduleListResult>): void;

    /**
     * Lists all of the job schedules in the specified account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.jobScheduleListNextOptions] Additional parameters
     * for the operation
     * 
     * @param {string} [options.jobScheduleListNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.jobScheduleListNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.jobScheduleListNextOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { jobScheduleListNextOptions? : models.JobScheduleListNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudJobScheduleListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.CloudJobScheduleListResult>): void;
}

/**
 * @class
 * Task
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface Task {

    /**
     * Adds a task to the specified job.
     *
     * @param {string} jobId The id of the job to which the task is to be added.
     * 
     * @param {object} task Specifies the task to be added.
     * 
     * @param {string} [task.id] Gets or sets a string that uniquely identifies
     * the task within the job. The id can contain any combination of
     * alphanumeric characters including hyphens and underscores, and cannot
     * contain more than 64 characters.
     * 
     * @param {string} [task.displayName] Gets or sets a display name for the task.
     * 
     * @param {string} [task.commandLine] Gets or sets the command line of the
     * task. For multi-instance tasks, the command line is executed on the
     * primary subtask after all the subtasks have finished executing the
     * coordianation command line.
     * 
     * @param {array} [task.resourceFiles] Gets or sets a list of files that Batch
     * will download to the compute node before running the command line. For
     * multi-instance tasks, the resource files will only be downloaded to the
     * compute node on which the primary subtask is executed.
     * 
     * @param {array} [task.environmentSettings] Gets or sets a list of
     * environment variable settings for the task.
     * 
     * @param {object} [task.affinityInfo] Gets or sets a locality hint that can
     * be used by the Batch service to select a compute node on which to start
     * the new task.
     * 
     * @param {string} [task.affinityInfo.affinityId] Gets or sets an opaque
     * string representing the location of a compute node or a task that has run
     * previously.  You can pass the AffinityId of a compute node or task to
     * indicate that this task needs to be placed close to the node or task.
     * 
     * @param {object} [task.constraints] Gets or sets the execution constraints
     * that apply to this task.
     * 
     * @param {moment.duration} [task.constraints.maxWallClockTime] Gets or sets
     * the maximum elapsed time that the task may run, measured from the time the
     * task starts. If the task does not complete within the time limit, the
     * Batch service terminates it.
     * 
     * @param {moment.duration} [task.constraints.retentionTime] Gets or sets the
     * minimum time to retain the working directory for the task on the compute
     * node where it ran. After this time, the Batch service may delete the
     * working directory and all its contents. The default is infinite.
     * 
     * @param {number} [task.constraints.maxTaskRetryCount] Gets or sets the
     * maximum number of times the task may be retried. The Batch service retries
     * a task if its exit code is nonzero.
     * 
     * @param {boolean} [task.runElevated] Gets or sets whether to run the task in
     * elevated mode.
     * 
     * @param {object} [task.multiInstanceSettings] Gets or sets information about
     * how to run the multi-instance task.
     * 
     * @param {number} [task.multiInstanceSettings.numberOfInstances] Gets or sets
     * the number of compute node instances used for multi-instance task.
     * 
     * @param {string} [task.multiInstanceSettings.coordinationCommandLine] Gets
     * or sets the command to be run on the compute node instances to setup
     * coordination among the subtasks.
     * 
     * @param {array} [task.multiInstanceSettings.commonResourceFiles] Gets or
     * sets a list of files that Batch will download on all subtasks.
     * 
     * @param {object} [task.dependsOn] Gets or sets any dependencies this task
     * has.
     * 
     * @param {array} [task.dependsOn.taskIds] Gets or sets the list of task ids
     * that must complete before this task can be scheduled.
     * 
     * @param {array} [task.dependsOn.taskIdRanges] Gets or sets the list of task
     * ranges that must complete before this task can be scheduled.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskAddOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.taskAddOptions.timeout] Sets the maximum time that
     * the server can spend processing the request, in seconds. The default is 30
     * seconds.
     * 
     * @param {string} [options.taskAddOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskAddOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.taskAddOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    add(jobId: string, task: models.TaskAddParameter, options: { taskAddOptions? : models.TaskAddOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    add(jobId: string, task: models.TaskAddParameter, callback: ServiceCallback<void>): void;

    /**
     * Lists all of the tasks that are associated with the specified job.
     *
     * @param {string} jobId The id of the job.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskListOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.taskListOptions.filter] Sets an OData $filter
     * clause.
     * 
     * @param {string} [options.taskListOptions.select] Sets an OData $select
     * clause.
     * 
     * @param {string} [options.taskListOptions.expand] Sets an OData $expand
     * clause.
     * 
     * @param {number} [options.taskListOptions.maxResults] Sets the maximum
     * number of items to return in the response.
     * 
     * @param {number} [options.taskListOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.taskListOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskListOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.taskListOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(jobId: string, options: { taskListOptions? : models.TaskListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudTaskListResult>): void;
    list(jobId: string, callback: ServiceCallback<models.CloudTaskListResult>): void;

    /**
     * Adds a collection of tasks to the specified job.
     *
     * @param {string} jobId The id of the job to which the task collection is to
     * be added.
     * 
     * @param {array} value The collection of tasks to add.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskAddCollectionOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.taskAddCollectionOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.taskAddCollectionOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskAddCollectionOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.taskAddCollectionOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    addCollection(jobId: string, value: models.TaskAddParameter[], options: { taskAddCollectionOptions? : models.TaskAddCollectionOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TaskAddCollectionResult>): void;
    addCollection(jobId: string, value: models.TaskAddParameter[], callback: ServiceCallback<models.TaskAddCollectionResult>): void;

    /**
     * Deletes a task from the specified job.
     *
     * @param {string} jobId The id of the job from which to delete the task.
     * 
     * @param {string} taskId The id of the task to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskDeleteMethodOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.taskDeleteMethodOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.taskDeleteMethodOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskDeleteMethodOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.taskDeleteMethodOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {string} [options.taskDeleteMethodOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.taskDeleteMethodOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.taskDeleteMethodOptions.ifModifiedSince] Specify
     * this header to perform the operation only if the resource has been
     * modified since the specified date/time.
     * 
     * @param {date} [options.taskDeleteMethodOptions.ifUnmodifiedSince] Specify
     * this header to perform the operation only if the resource has not been
     * modified since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(jobId: string, taskId: string, options: { taskDeleteMethodOptions? : models.TaskDeleteMethodOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(jobId: string, taskId: string, callback: ServiceCallback<void>): void;

    /**
     * Gets information about the specified task.
     *
     * @param {string} jobId The id of the job that contains the task.
     * 
     * @param {string} taskId The id of the task to get information about.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskGetOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.taskGetOptions.select] Sets an OData $select
     * clause.
     * 
     * @param {string} [options.taskGetOptions.expand] Sets an OData $expand
     * clause.
     * 
     * @param {number} [options.taskGetOptions.timeout] Sets the maximum time that
     * the server can spend processing the request, in seconds. The default is 30
     * seconds.
     * 
     * @param {string} [options.taskGetOptions.clientRequestId] Caller generated
     * request identity, in the form of a GUID with no decoration such as curly
     * braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskGetOptions.returnClientRequestId] Specifies
     * if the server should return the client-request-id identifier in the
     * response.
     * 
     * @param {date} [options.taskGetOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.taskGetOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.taskGetOptions.ifNoneMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * does not match the specified ETag.
     * 
     * @param {date} [options.taskGetOptions.ifModifiedSince] Specify this header
     * to perform the operation only if the resource has been modified since the
     * specified date/time.
     * 
     * @param {date} [options.taskGetOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(jobId: string, taskId: string, options: { taskGetOptions? : models.TaskGetOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudTask>): void;
    get(jobId: string, taskId: string, callback: ServiceCallback<models.CloudTask>): void;

    /**
     * Updates the properties of the specified task.
     *
     * @param {string} jobId The id of the job containing the task.
     * 
     * @param {string} taskId The id of the task to update.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.constraints] Sets constraints that apply to this
     * task. If omitted, the task is given the default constraints.
     * 
     * @param {moment.duration} [options.constraints.maxWallClockTime] Gets or
     * sets the maximum elapsed time that the task may run, measured from the
     * time the task starts. If the task does not complete within the time limit,
     * the Batch service terminates it.
     * 
     * @param {moment.duration} [options.constraints.retentionTime] Gets or sets
     * the minimum time to retain the working directory for the task on the
     * compute node where it ran. After this time, the Batch service may delete
     * the working directory and all its contents. The default is infinite.
     * 
     * @param {number} [options.constraints.maxTaskRetryCount] Gets or sets the
     * maximum number of times the task may be retried. The Batch service retries
     * a task if its exit code is nonzero.
     * 
     * @param {object} [options.taskUpdateOptions] Additional parameters for the
     * operation
     * 
     * @param {number} [options.taskUpdateOptions.timeout] Sets the maximum time
     * that the server can spend processing the request, in seconds. The default
     * is 30 seconds.
     * 
     * @param {string} [options.taskUpdateOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskUpdateOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.taskUpdateOptions.ocpDate] The time the request was
     * issued. If not specified, this header will be automatically populated with
     * the current system clock time.
     * 
     * @param {string} [options.taskUpdateOptions.ifMatch] An ETag is specified.
     * Specify this header to perform the operation only if the resource's ETag
     * is an exact match as specified.
     * 
     * @param {string} [options.taskUpdateOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.taskUpdateOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.taskUpdateOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(jobId: string, taskId: string, options: { constraints? : models.TaskConstraints, taskUpdateOptions? : models.TaskUpdateOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    update(jobId: string, taskId: string, callback: ServiceCallback<void>): void;

    /**
     * Lists all of the subtasks that are associated with the specified
     * multi-instance task.
     *
     * @param {string} jobId The id of the job.
     * 
     * @param {string} taskId The id of the task.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskListSubtasksOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.taskListSubtasksOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {number} [options.taskListSubtasksOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.taskListSubtasksOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskListSubtasksOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.taskListSubtasksOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSubtasks(jobId: string, taskId: string, options: { taskListSubtasksOptions? : models.TaskListSubtasksOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudTaskListSubtasksResult>): void;
    listSubtasks(jobId: string, taskId: string, callback: ServiceCallback<models.CloudTaskListSubtasksResult>): void;

    /**
     * Terminates the specified task.
     *
     * @param {string} jobId The id of the job containing the task.
     * 
     * @param {string} taskId The id of the task to terminate.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskTerminateOptions] Additional parameters for
     * the operation
     * 
     * @param {number} [options.taskTerminateOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.taskTerminateOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskTerminateOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.taskTerminateOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {string} [options.taskTerminateOptions.ifMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag is an exact match as specified.
     * 
     * @param {string} [options.taskTerminateOptions.ifNoneMatch] An ETag is
     * specified. Specify this header to perform the operation only if the
     * resource's ETag does not match the specified ETag.
     * 
     * @param {date} [options.taskTerminateOptions.ifModifiedSince] Specify this
     * header to perform the operation only if the resource has been modified
     * since the specified date/time.
     * 
     * @param {date} [options.taskTerminateOptions.ifUnmodifiedSince] Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date/time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    terminate(jobId: string, taskId: string, options: { taskTerminateOptions? : models.TaskTerminateOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    terminate(jobId: string, taskId: string, callback: ServiceCallback<void>): void;

    /**
     * Lists all of the tasks that are associated with the specified job.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.taskListNextOptions] Additional parameters for the
     * operation
     * 
     * @param {string} [options.taskListNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.taskListNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.taskListNextOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { taskListNextOptions? : models.TaskListNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudTaskListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.CloudTaskListResult>): void;
}

/**
 * @class
 * ComputeNodeOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BatchServiceClient.
 */
export interface ComputeNodeOperations {

    /**
     * Adds a user account to the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the machine on which you want to create a
     * user account.
     * 
     * @param {object} user Specifies the user account to be created.
     * 
     * @param {string} [user.name] Gets or sets the user name of the account.
     * 
     * @param {boolean} [user.isAdmin] Gets or sets whether the account should be
     * an administrator on the compute node.
     * 
     * @param {date} [user.expiryTime] Gets or sets the time at which the account
     * should expire. If omitted, the default is 1 day from the current time.
     * 
     * @param {string} [user.password] Gets or sets the password of the account.
     * 
     * @param {string} [user.sshPublicKey] Gets or sets the SSH public key that
     * can be used for remote login to the compute node.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeAddUserOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.computeNodeAddUserOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.computeNodeAddUserOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.computeNodeAddUserOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeAddUserOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    addUser(poolId: string, nodeId: string, user: models.ComputeNodeUser, options: { computeNodeAddUserOptions? : models.ComputeNodeAddUserOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    addUser(poolId: string, nodeId: string, user: models.ComputeNodeUser, callback: ServiceCallback<void>): void;

    /**
     * Deletes a user account from the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the machine on which you want to delete a
     * user account.
     * 
     * @param {string} userName The name of the user account to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeDeleteUserOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.computeNodeDeleteUserOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.computeNodeDeleteUserOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.computeNodeDeleteUserOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.computeNodeDeleteUserOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteUser(poolId: string, nodeId: string, userName: string, options: { computeNodeDeleteUserOptions? : models.ComputeNodeDeleteUserOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteUser(poolId: string, nodeId: string, userName: string, callback: ServiceCallback<void>): void;

    /**
     * Updates the password or expiration time of a user account on the specified
     * compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the machine on which you want to update a
     * user account.
     * 
     * @param {string} userName The name of the user account to update.
     * 
     * @param {object} nodeUpdateUserParameter The parameters for the request.
     * 
     * @param {string} [nodeUpdateUserParameter.password] Sets the password of the
     * account.
     * 
     * @param {date} [nodeUpdateUserParameter.expiryTime] Sets the time at which
     * the account should expire. If omitted, the default is 1 day from the
     * current time.
     * 
     * @param {string} [nodeUpdateUserParameter.sshPublicKey] Gets or sets the SSH
     * public key that can be used for remote login to the compute node.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeUpdateUserOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.computeNodeUpdateUserOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.computeNodeUpdateUserOptions.clientRequestId]
     * Caller generated request identity, in the form of a GUID with no
     * decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.computeNodeUpdateUserOptions.returnClientRequestId] Specifies if
     * the server should return the client-request-id identifier in the response.
     * 
     * @param {date} [options.computeNodeUpdateUserOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateUser(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: models.NodeUpdateUserParameter, options: { computeNodeUpdateUserOptions? : models.ComputeNodeUpdateUserOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    updateUser(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: models.NodeUpdateUserParameter, callback: ServiceCallback<void>): void;

    /**
     * Gets information about the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node that you want to get
     * information about.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeGetOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.computeNodeGetOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {number} [options.computeNodeGetOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.computeNodeGetOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.computeNodeGetOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeGetOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(poolId: string, nodeId: string, options: { computeNodeGetOptions? : models.ComputeNodeGetOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ComputeNode>): void;
    get(poolId: string, nodeId: string, callback: ServiceCallback<models.ComputeNode>): void;

    /**
     * Restarts the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node that you want to restart.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.nodeRebootOption] Sets when to reboot the compute
     * node and what to do with currently running tasks. The default value is
     * requeue. Possible values include: 'requeue', 'terminate',
     * 'taskcompletion', 'retaineddata'
     * 
     * @param {object} [options.computeNodeRebootOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.computeNodeRebootOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.computeNodeRebootOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.computeNodeRebootOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeRebootOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reboot(poolId: string, nodeId: string, options: { nodeRebootOption? : string, computeNodeRebootOptions? : models.ComputeNodeRebootOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    reboot(poolId: string, nodeId: string, callback: ServiceCallback<void>): void;

    /**
     * Reinstalls the operating system on the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node that you want to restart.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.nodeReimageOption] Sets when to reimage the
     * compute node and what to do with currently running tasks. The default
     * value is requeue. Possible values include: 'requeue', 'terminate',
     * 'taskcompletion', 'retaineddata'
     * 
     * @param {object} [options.computeNodeReimageOptions] Additional parameters
     * for the operation
     * 
     * @param {number} [options.computeNodeReimageOptions.timeout] Sets the
     * maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds.
     * 
     * @param {string} [options.computeNodeReimageOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.computeNodeReimageOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeReimageOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reimage(poolId: string, nodeId: string, options: { nodeReimageOption? : string, computeNodeReimageOptions? : models.ComputeNodeReimageOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    reimage(poolId: string, nodeId: string, callback: ServiceCallback<void>): void;

    /**
     * Disable task scheduling of the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node that you want to disable
     * task scheduling.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.nodeDisableSchedulingOption] Gets or sets what to
     * do with currently running tasks when disable task scheduling on the
     * compute node. The default value is requeue. Possible values include:
     * 'requeue', 'terminate', 'taskcompletion'
     * 
     * @param {object} [options.computeNodeDisableSchedulingOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.computeNodeDisableSchedulingOptions.timeout] Sets
     * the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     * 
     * @param {string}
     * [options.computeNodeDisableSchedulingOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.computeNodeDisableSchedulingOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeDisableSchedulingOptions.ocpDate] The
     * time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    disableScheduling(poolId: string, nodeId: string, options: { nodeDisableSchedulingOption? : string, computeNodeDisableSchedulingOptions? : models.ComputeNodeDisableSchedulingOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    disableScheduling(poolId: string, nodeId: string, callback: ServiceCallback<void>): void;

    /**
     * Enable task scheduling of the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node that you want to enable
     * task scheduling.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeEnableSchedulingOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.computeNodeEnableSchedulingOptions.timeout] Sets
     * the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     * 
     * @param {string}
     * [options.computeNodeEnableSchedulingOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.computeNodeEnableSchedulingOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeEnableSchedulingOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    enableScheduling(poolId: string, nodeId: string, options: { computeNodeEnableSchedulingOptions? : models.ComputeNodeEnableSchedulingOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    enableScheduling(poolId: string, nodeId: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the settings required for remote login to a compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node for which to obtain the
     * remote login settings.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeGetRemoteLoginSettingsOptions]
     * Additional parameters for the operation
     * 
     * @param {number} [options.computeNodeGetRemoteLoginSettingsOptions.timeout]
     * Sets the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     * 
     * @param {string}
     * [options.computeNodeGetRemoteLoginSettingsOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.computeNodeGetRemoteLoginSettingsOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeGetRemoteLoginSettingsOptions.ocpDate]
     * The time the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRemoteLoginSettings(poolId: string, nodeId: string, options: { computeNodeGetRemoteLoginSettingsOptions? : models.ComputeNodeGetRemoteLoginSettingsOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ComputeNodeGetRemoteLoginSettingsResult>): void;
    getRemoteLoginSettings(poolId: string, nodeId: string, callback: ServiceCallback<models.ComputeNodeGetRemoteLoginSettingsResult>): void;

    /**
     * Gets the Remote Desktop Protocol file for the specified compute node.
     *
     * @param {string} poolId The id of the pool that contains the compute node.
     * 
     * @param {string} nodeId The id of the compute node for which you want to get
     * the Remote Desktop Protocol file.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeGetRemoteDesktopOptions] Additional
     * parameters for the operation
     * 
     * @param {number} [options.computeNodeGetRemoteDesktopOptions.timeout] Sets
     * the maximum time that the server can spend processing the request, in
     * seconds. The default is 30 seconds.
     * 
     * @param {string}
     * [options.computeNodeGetRemoteDesktopOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean}
     * [options.computeNodeGetRemoteDesktopOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeGetRemoteDesktopOptions.ocpDate] The time
     * the request was issued. If not specified, this header will be
     * automatically populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRemoteDesktop(poolId: string, nodeId: string, options: { computeNodeGetRemoteDesktopOptions? : models.ComputeNodeGetRemoteDesktopOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    getRemoteDesktop(poolId: string, nodeId: string, callback: ServiceCallback<stream.Readable>): void;

    /**
     * Lists the compute nodes in the specified pool.
     *
     * @param {string} poolId The id of the pool from which you want to list nodes.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeListOptions] Additional parameters for
     * the operation
     * 
     * @param {string} [options.computeNodeListOptions.filter] Sets an OData
     * $filter clause.
     * 
     * @param {string} [options.computeNodeListOptions.select] Sets an OData
     * $select clause.
     * 
     * @param {number} [options.computeNodeListOptions.maxResults] Sets the
     * maximum number of items to return in the response.
     * 
     * @param {number} [options.computeNodeListOptions.timeout] Sets the maximum
     * time that the server can spend processing the request, in seconds. The
     * default is 30 seconds.
     * 
     * @param {string} [options.computeNodeListOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.computeNodeListOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeListOptions.ocpDate] The time the request
     * was issued. If not specified, this header will be automatically populated
     * with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(poolId: string, options: { computeNodeListOptions? : models.ComputeNodeListOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ComputeNodeListResult>): void;
    list(poolId: string, callback: ServiceCallback<models.ComputeNodeListResult>): void;

    /**
     * Lists the compute nodes in the specified pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.computeNodeListNextOptions] Additional parameters
     * for the operation
     * 
     * @param {string} [options.computeNodeListNextOptions.clientRequestId] Caller
     * generated request identity, in the form of a GUID with no decoration such
     * as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * 
     * @param {boolean} [options.computeNodeListNextOptions.returnClientRequestId]
     * Specifies if the server should return the client-request-id identifier in
     * the response.
     * 
     * @param {date} [options.computeNodeListNextOptions.ocpDate] The time the
     * request was issued. If not specified, this header will be automatically
     * populated with the current system clock time.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { computeNodeListNextOptions? : models.ComputeNodeListNextOptions, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ComputeNodeListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ComputeNodeListResult>): void;
}
