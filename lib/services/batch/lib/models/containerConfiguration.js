/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @summary The configuration for container-enabled pools.
  *
 */
class ContainerConfiguration {
  /**
   * Create a ContainerConfiguration.
   * @member {array} [containerImageNames] The collection of container image
   * names. This is the full image reference, as would be specified to "docker
   * pull". An image will be sourced from the default Docker registry unless
   * the image is fully qualified with an alternative registry.
   * @member {array} [containerRegistries] Additional private registries from
   * which containers can be pulled. If any images must be downloaded from a
   * private registry which requires credentials, then those credentials must
   * be provided here.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ContainerConfiguration
   *
   * @returns {object} metadata of ContainerConfiguration
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerConfiguration',
      type: {
        name: 'Composite',
        className: 'ContainerConfiguration',
        modelProperties: {
          type: {
            required: true,
            isConstant: true,
            serializedName: 'type',
            defaultValue: 'docker',
            type: {
              name: 'String'
            }
          },
          containerImageNames: {
            required: false,
            serializedName: 'containerImageNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          containerRegistries: {
            required: false,
            serializedName: 'containerRegistries',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerRegistryElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerRegistry'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerConfiguration;
