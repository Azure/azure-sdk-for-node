/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the TaskAddParameter class.
 * @constructor
 * @summary An Azure Batch task to add.
 *
 * @member {string} id A string that uniquely identifies the task within the
 * job. The ID can contain any combination of alphanumeric characters including
 * hyphens and underscores, and cannot contain more than 64 characters. The ID
 * is case-preserving and case-insensitive (that is, you may not have two IDs
 * within a job that differ only by case).
 * 
 * @member {string} [displayName] A display name for the task. The display name
 * need not be unique and can contain any Unicode characters up to a maximum
 * length of 1024.
 * 
 * @member {string} commandLine The command line of the task. For
 * multi-instance tasks, the command line is executed as the primary task,
 * after the primary task and all subtasks have finished executing the
 * coordination command line. The command line does not run under a shell, and
 * therefore cannot take advantage of shell features such as environment
 * variable expansion. If you want to take advantage of such features, you
 * should invoke the shell in the command line, for example using "cmd /c
 * MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {object} [exitConditions] How the Batch service should respond when
 * the task completes.
 * 
 * @member {array} [exitConditions.exitCodes]
 * 
 * @member {array} [exitConditions.exitCodeRanges]
 * 
 * @member {object} [exitConditions.schedulingError]
 * 
 * @member {string} [exitConditions.schedulingError.jobAction] The default is
 * none for exit code 0 and terminate for all other exit conditions. It is an
 * error to specify this if the job's onTaskFailed is noaction. The add task
 * request fails with an invalid property value error; if you are calling the
 * REST API directly, the HTTP status code is 400 (Bad Request). Possible
 * values include: 'none', 'disable', 'terminate'
 * 
 * @member {object} [exitConditions.default] Note that the default condition
 * does not include exit code 0. If you want non-default behaviour on exit code
 * 0, you must list it explicitly using the exitCodes or exitCodeRanges
 * collection.
 * 
 * @member {string} [exitConditions.default.jobAction] The default is none for
 * exit code 0 and terminate for all other exit conditions. It is an error to
 * specify this if the job's onTaskFailed is noaction. The add task request
 * fails with an invalid property value error; if you are calling the REST API
 * directly, the HTTP status code is 400 (Bad Request). Possible values
 * include: 'none', 'disable', 'terminate'
 * 
 * @member {array} [resourceFiles] A list of files that the Batch service will
 * download to the compute node before running the command line. For
 * multi-instance tasks, the resource files will only be downloaded to the
 * compute node on which the primary task is executed.
 * 
 * @member {array} [environmentSettings] A list of environment variable
 * settings for the task.
 * 
 * @member {object} [affinityInfo] A locality hint that can be used by the
 * Batch service to select a compute node on which to start the new task.
 * 
 * @member {string} [affinityInfo.affinityId] You can pass the affinityId of a
 * compute node or task to indicate that this task needs to be placed close to
 * the node or task.
 * 
 * @member {object} [constraints] The execution constraints that apply to this
 * task. If you do not specify constraints, the maxTaskRetryCount is the
 * maxTaskRetryCount specified for the job, and the maxWallClockTime and
 * retentionTime are infinite.
 * 
 * @member {moment.duration} [constraints.maxWallClockTime] If this is not
 * specified, there is no time limit on how long the task may run.
 * 
 * @member {moment.duration} [constraints.retentionTime] The default is
 * infinite, i.e. the task directory will be retained until the compute node is
 * removed or reimaged.
 * 
 * @member {number} [constraints.maxTaskRetryCount] Note that this value
 * specifically controls the number of retries. The Batch service will try the
 * task once, and may then retry up to this limit. For example, if the maximum
 * retry count is 3, Batch tries the task up to 4 times (one initial try and 3
 * retries). If the maximum retry count is 0, the Batch service does not retry
 * the task. If the maximum retry count is -1, the Batch service retries the
 * task without limit.
 * 
 * @member {boolean} [runElevated] Whether to run the task in elevated mode.
 * The default value is false.
 * 
 * @member {object} [multiInstanceSettings] An object that indicates that the
 * task is a multi-instance task, and contains information about how to run the
 * multi-instance task.
 * 
 * @member {number} [multiInstanceSettings.numberOfInstances]
 * 
 * @member {string} [multiInstanceSettings.coordinationCommandLine] A typical
 * coordination command line launches a background service and verifies that
 * the service is ready to process inter-node messages.
 * 
 * @member {array} [multiInstanceSettings.commonResourceFiles] The difference
 * between common resource files and task resource files is that common
 * resource files are downloaded for all subtasks including the primary,
 * whereas task resource files are downloaded only for the primary.
 * 
 * @member {object} [dependsOn] The tasks that this task depends on. The task
 * will not be scheduled until all depended-on tasks have completed
 * successfully. (If any depended-on tasks fail and exhaust their retry counts,
 * the task will never be scheduled.) If the job does not have
 * usesTaskDependencies set to true, and this element is present, the request
 * fails with error code TaskDependenciesNotSpecifiedOnJob.
 * 
 * @member {array} [dependsOn.taskIds]
 * 
 * @member {array} [dependsOn.taskIdRanges]
 * 
 * @member {array} [applicationPackageReferences] A list of application
 * packages that the Batch service will deploy to the compute node before
 * running the command line.
 * 
 */
function TaskAddParameter() {
}

/**
 * Defines the metadata of TaskAddParameter
 *
 * @returns {object} metadata of TaskAddParameter
 *
 */
TaskAddParameter.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'TaskAddParameter',
    type: {
      name: 'Composite',
      className: 'TaskAddParameter',
      modelProperties: {
        id: {
          required: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        commandLine: {
          required: true,
          serializedName: 'commandLine',
          type: {
            name: 'String'
          }
        },
        exitConditions: {
          required: false,
          serializedName: 'exitConditions',
          type: {
            name: 'Composite',
            className: 'ExitConditions'
          }
        },
        resourceFiles: {
          required: false,
          serializedName: 'resourceFiles',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ResourceFileElementType',
                type: {
                  name: 'Composite',
                  className: 'ResourceFile'
                }
            }
          }
        },
        environmentSettings: {
          required: false,
          serializedName: 'environmentSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EnvironmentSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'EnvironmentSetting'
                }
            }
          }
        },
        affinityInfo: {
          required: false,
          serializedName: 'affinityInfo',
          type: {
            name: 'Composite',
            className: 'AffinityInformation'
          }
        },
        constraints: {
          required: false,
          serializedName: 'constraints',
          type: {
            name: 'Composite',
            className: 'TaskConstraints'
          }
        },
        runElevated: {
          required: false,
          serializedName: 'runElevated',
          type: {
            name: 'Boolean'
          }
        },
        multiInstanceSettings: {
          required: false,
          serializedName: 'multiInstanceSettings',
          type: {
            name: 'Composite',
            className: 'MultiInstanceSettings'
          }
        },
        dependsOn: {
          required: false,
          serializedName: 'dependsOn',
          type: {
            name: 'Composite',
            className: 'TaskDependencies'
          }
        },
        applicationPackageReferences: {
          required: false,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = TaskAddParameter;
