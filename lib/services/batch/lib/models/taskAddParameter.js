/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @summary An Azure Batch task to add.
  *
 */
class TaskAddParameter {
  /**
   * Create a TaskAddParameter.
   * @member {string} id A string that uniquely identifies the task within the
   * job. The ID can contain any combination of alphanumeric characters
   * including hyphens and underscores, and cannot contain more than 64
   * characters. The ID is case-preserving and case-insensitive (that is, you
   * may not have two IDs within a job that differ only by case).
   * @member {string} [displayName] A display name for the task. The display
   * name need not be unique and can contain any Unicode characters up to a
   * maximum length of 1024.
   * @member {string} commandLine The command line of the task. For
   * multi-instance tasks, the command line is executed as the primary task,
   * after the primary task and all subtasks have finished executing the
   * coordination command line. The command line does not run under a shell,
   * and therefore cannot take advantage of shell features such as environment
   * variable expansion. If you want to take advantage of such features, you
   * should invoke the shell in the command line, for example using "cmd /c
   * MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
   * @member {object} [containerSettings] The settings for the container under
   * which the task runs. If the pool that will run this task has
   * containerConfiguration set, this must be set as well. If the pool that
   * will run this task doesn't have containerConfiguration set, this must not
   * be set. When this is specified, all directories recursively below the
   * AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node)
   * are mapped into the container, all task environment variables are mapped
   * into the container, and the task command line is executed in the
   * container.
   * @member {string} [containerSettings.containerRunOptions] These additional
   * options are supplied as arguments to the "docker create" command, in
   * addition to those controlled by the Batch Service.
   * @member {string} [containerSettings.imageName] This is the full image
   * reference, as would be specified to "docker pull". If no tag is provided
   * as part of the image name, the tag ":latest" is used as a default.
   * @member {object} [containerSettings.registry] This setting can be omitted
   * if was already provided at pool creation.
   * @member {string} [containerSettings.registry.registryServer] If omitted,
   * the default is "docker.io".
   * @member {string} [containerSettings.registry.userName]
   * @member {string} [containerSettings.registry.password]
   * @member {object} [exitConditions] How the Batch service should respond
   * when the task completes.
   * @member {array} [exitConditions.exitCodes]
   * @member {array} [exitConditions.exitCodeRanges]
   * @member {object} [exitConditions.preProcessingError]
   * @member {string} [exitConditions.preProcessingError.jobAction] Values are:
   *
   * none - Take no action.
   * disable - Disable the job. This is equivalent to calling the disable job
   * API, with a disableTasks value of requeue.
   * terminate - Terminate the job. The terminateReason in the job's
   * executionInfo is set to "TaskFailed". The default is none for exit code 0
   * and terminate for all other exit conditions.
   *
   * If the job's onTaskFailed property is noAction, then specifying this
   * property returns an error and the add task request fails with an invalid
   * property value error; if you are calling the REST API directly, the HTTP
   * status code is 400 (Bad Request). Possible values include: 'none',
   * 'disable', 'terminate'
   * @member {string} [exitConditions.preProcessingError.dependencyAction]
   * Values are:
   *
   * satisfy - Satisfy the task's dependencies.
   * block - Block the task's dependencies.
   *
   * The default is 'satisfy' for exit code 0, and 'block' for all other exit
   * conditions. If the job's usesTaskDependencies property is set to false,
   * then specifying the dependencyAction property returns an erro and the add
   * task request fails with an invalid property value error; if you are
   * calling the REST API directly, the HTTP status code is 400  (Bad Request).
   * Possible values include: 'satisfy', 'block'
   * @member {object} [exitConditions.fileUploadError] If the task exited with
   * an exit code that was specified via exitCodes or exitCodeRanges, and then
   * encountered a file upload error, then the action specified by the exit
   * code takes precedence.
   * @member {string} [exitConditions.fileUploadError.jobAction] Values are:
   *
   * none - Take no action.
   * disable - Disable the job. This is equivalent to calling the disable job
   * API, with a disableTasks value of requeue.
   * terminate - Terminate the job. The terminateReason in the job's
   * executionInfo is set to "TaskFailed". The default is none for exit code 0
   * and terminate for all other exit conditions.
   *
   * If the job's onTaskFailed property is noAction, then specifying this
   * property returns an error and the add task request fails with an invalid
   * property value error; if you are calling the REST API directly, the HTTP
   * status code is 400 (Bad Request). Possible values include: 'none',
   * 'disable', 'terminate'
   * @member {string} [exitConditions.fileUploadError.dependencyAction] Values
   * are:
   *
   * satisfy - Satisfy the task's dependencies.
   * block - Block the task's dependencies.
   *
   * The default is 'satisfy' for exit code 0, and 'block' for all other exit
   * conditions. If the job's usesTaskDependencies property is set to false,
   * then specifying the dependencyAction property returns an erro and the add
   * task request fails with an invalid property value error; if you are
   * calling the REST API directly, the HTTP status code is 400  (Bad Request).
   * Possible values include: 'satisfy', 'block'
   * @member {object} [exitConditions.default] This value is used if the task
   * exits with any nonzero exit code not listed in the exitCodes or
   * exitCodeRanges collection, with a pre-processing error if the
   * preProcessingError property is not present, or with a file upload error if
   * the fileUploadError property is not present. If you want non-default
   * behaviour on exit code 0, you must list it explicitly using the exitCodes
   * or exitCodeRanges collection.
   * @member {string} [exitConditions.default.jobAction] Values are:
   *
   * none - Take no action.
   * disable - Disable the job. This is equivalent to calling the disable job
   * API, with a disableTasks value of requeue.
   * terminate - Terminate the job. The terminateReason in the job's
   * executionInfo is set to "TaskFailed". The default is none for exit code 0
   * and terminate for all other exit conditions.
   *
   * If the job's onTaskFailed property is noAction, then specifying this
   * property returns an error and the add task request fails with an invalid
   * property value error; if you are calling the REST API directly, the HTTP
   * status code is 400 (Bad Request). Possible values include: 'none',
   * 'disable', 'terminate'
   * @member {string} [exitConditions.default.dependencyAction] Values are:
   *
   * satisfy - Satisfy the task's dependencies.
   * block - Block the task's dependencies.
   *
   * The default is 'satisfy' for exit code 0, and 'block' for all other exit
   * conditions. If the job's usesTaskDependencies property is set to false,
   * then specifying the dependencyAction property returns an erro and the add
   * task request fails with an invalid property value error; if you are
   * calling the REST API directly, the HTTP status code is 400  (Bad Request).
   * Possible values include: 'satisfy', 'block'
   * @member {array} [resourceFiles] A list of files that the Batch service
   * will download to the compute node before running the command line. For
   * multi-instance tasks, the resource files will only be downloaded to the
   * compute node on which the primary task is executed.
   * @member {array} [outputFiles] A list of files that the Batch service will
   * upload from the compute node after running the command line. For
   * multi-instance tasks, the files will only be uploaded from the compute
   * node on which the primary task is executed.
   * @member {array} [environmentSettings] A list of environment variable
   * settings for the task.
   * @member {object} [affinityInfo] A locality hint that can be used by the
   * Batch service to select a compute node on which to start the new task.
   * @member {string} [affinityInfo.affinityId] You can pass the affinityId of
   * a compute node to indicate that this task needs to run on that compute
   * node. Note that this is just a soft affinity. If the target node is busy
   * or unavailable at the time the task is scheduled, then the task will be
   * scheduled elsewhere.
   * @member {object} [constraints] The execution constraints that apply to
   * this task. If you do not specify constraints, the maxTaskRetryCount is the
   * maxTaskRetryCount specified for the job, and the maxWallClockTime and
   * retentionTime are infinite.
   * @member {moment.duration} [constraints.maxWallClockTime] If this is not
   * specified, there is no time limit on how long the task may run.
   * @member {moment.duration} [constraints.retentionTime] The default is
   * infinite, i.e. the task directory will be retained until the compute node
   * is removed or reimaged.
   * @member {number} [constraints.maxTaskRetryCount] Note that this value
   * specifically controls the number of retries. The Batch service will try
   * the task once, and may then retry up to this limit. For example, if the
   * maximum retry count is 3, Batch tries the task up to 4 times (one initial
   * try and 3 retries). If the maximum retry count is 0, the Batch service
   * does not retry the task. If the maximum retry count is -1, the Batch
   * service retries the task without limit.
   * @member {object} [userIdentity] The user identity under which the task
   * runs. If omitted, the task runs as a non-administrative user unique to the
   * task.
   * @member {string} [userIdentity.userName] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @member {object} [userIdentity.autoUser] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @member {string} [userIdentity.autoUser.scope] Values are:
   *
   * pool - specifies that the task runs as the common auto user account which
   * is created on every node in a pool.
   * task - specifies that the service should create a new user for the task.
   * The default value is task. Possible values include: 'task', 'pool'
   * @member {string} [userIdentity.autoUser.elevationLevel] nonAdmin - The
   * auto user is a standard user without elevated access. admin - The auto
   * user is a user with elevated access and operates with full Administrator
   * permissions. The default value is nonAdmin. Possible values include:
   * 'nonAdmin', 'admin'
   * @member {object} [multiInstanceSettings] An object that indicates that the
   * task is a multi-instance task, and contains information about how to run
   * the multi-instance task.
   * @member {number} [multiInstanceSettings.numberOfInstances] If omitted, the
   * default is 1.
   * @member {string} [multiInstanceSettings.coordinationCommandLine] A typical
   * coordination command line launches a background service and verifies that
   * the service is ready to process inter-node messages.
   * @member {array} [multiInstanceSettings.commonResourceFiles] The difference
   * between common resource files and task resource files is that common
   * resource files are downloaded for all subtasks including the primary,
   * whereas task resource files are downloaded only for the primary. Also note
   * that these resource files are not downloaded to the task working
   * directory, but instead are downloaded to the task root directory (one
   * directory above the working directory).
   * @member {object} [dependsOn] The tasks that this task depends on. This
   * task will not be scheduled until all tasks that it depends on have
   * completed successfully. If any of those tasks fail and exhaust their retry
   * counts, this task will never be scheduled. If the job does not have
   * usesTaskDependencies set to true, and this element is present, the request
   * fails with error code TaskDependenciesNotSpecifiedOnJob.
   * @member {array} [dependsOn.taskIds] The taskIds collection is limited to
   * 64000 characters total (i.e. the combined length of all task IDs). If the
   * taskIds collection exceeds the maximum length, the Add Task request fails
   * with error code TaskDependencyListTooLong. In this case consider using
   * task ID ranges instead.
   * @member {array} [dependsOn.taskIdRanges]
   * @member {array} [applicationPackageReferences] A list of application
   * packages that the Batch service will deploy to the compute node before
   * running the command line. Application packages are downloaded and deployed
   * to a shared directory, not the task working directory. Therefore, if a
   * referenced package is already on the compute node, and is up to date, then
   * it is not re-downloaded; the existing copy on the compute node is used. If
   * a referenced application package cannot be installed, for example because
   * the package has been deleted or because download failed, the task fails.
   * @member {object} [authenticationTokenSettings] The settings for an
   * authentication token that the task can use to perform Batch service
   * operations. If this property is set, the Batch service provides the task
   * with an authentication token which can be used to authenticate Batch
   * service operations without requiring an account access key. The token is
   * provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The
   * operations that the task can carry out using the token depend on the
   * settings. For example, a task can request job permissions in order to add
   * other tasks to the job, or check the status of the job or of other tasks
   * under the job.
   * @member {array} [authenticationTokenSettings.access] The authentication
   * token grants access to a limited set of Batch service operations.
   * Currently the only supported value for the access property is 'job', which
   * grants access to all operations related to the job which contains the
   * task.
   */
  constructor() {
  }

  /**
   * Defines the metadata of TaskAddParameter
   *
   * @returns {object} metadata of TaskAddParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TaskAddParameter',
      type: {
        name: 'Composite',
        className: 'TaskAddParameter',
        modelProperties: {
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          commandLine: {
            required: true,
            serializedName: 'commandLine',
            type: {
              name: 'String'
            }
          },
          containerSettings: {
            required: false,
            serializedName: 'containerSettings',
            type: {
              name: 'Composite',
              className: 'TaskContainerSettings'
            }
          },
          exitConditions: {
            required: false,
            serializedName: 'exitConditions',
            type: {
              name: 'Composite',
              className: 'ExitConditions'
            }
          },
          resourceFiles: {
            required: false,
            serializedName: 'resourceFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ResourceFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ResourceFile'
                  }
              }
            }
          },
          outputFiles: {
            required: false,
            serializedName: 'outputFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OutputFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'OutputFile'
                  }
              }
            }
          },
          environmentSettings: {
            required: false,
            serializedName: 'environmentSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentSettingElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentSetting'
                  }
              }
            }
          },
          affinityInfo: {
            required: false,
            serializedName: 'affinityInfo',
            type: {
              name: 'Composite',
              className: 'AffinityInformation'
            }
          },
          constraints: {
            required: false,
            serializedName: 'constraints',
            type: {
              name: 'Composite',
              className: 'TaskConstraints'
            }
          },
          userIdentity: {
            required: false,
            serializedName: 'userIdentity',
            type: {
              name: 'Composite',
              className: 'UserIdentity'
            }
          },
          multiInstanceSettings: {
            required: false,
            serializedName: 'multiInstanceSettings',
            type: {
              name: 'Composite',
              className: 'MultiInstanceSettings'
            }
          },
          dependsOn: {
            required: false,
            serializedName: 'dependsOn',
            type: {
              name: 'Composite',
              className: 'TaskDependencies'
            }
          },
          applicationPackageReferences: {
            required: false,
            serializedName: 'applicationPackageReferences',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationPackageReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationPackageReference'
                  }
              }
            }
          },
          authenticationTokenSettings: {
            required: false,
            serializedName: 'authenticationTokenSettings',
            type: {
              name: 'Composite',
              className: 'AuthenticationTokenSettings'
            }
          }
        }
      }
    };
  }
}

module.exports = TaskAddParameter;
