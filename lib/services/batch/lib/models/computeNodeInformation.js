/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Information about the compute node on which a task ran.
  *
 */
class ComputeNodeInformation {
  /**
   * Create a ComputeNodeInformation.
   * @property {string} [affinityId] An identifier for the compute node on
   * which the task ran, which can be passed when adding a task to request that
   * the task be scheduled on this compute node.
   * @property {string} [nodeUrl] The URL of the node on which the task ran. .
   * @property {string} [poolId] The ID of the pool on which the task ran.
   * @property {string} [nodeId] The ID of the node on which the task ran.
   * @property {string} [taskRootDirectory] The root directory of the task on
   * the compute node.
   * @property {string} [taskRootDirectoryUrl] The URL to the root directory of
   * the task on the compute node.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ComputeNodeInformation
   *
   * @returns {object} metadata of ComputeNodeInformation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ComputeNodeInformation',
      type: {
        name: 'Composite',
        className: 'ComputeNodeInformation',
        modelProperties: {
          affinityId: {
            required: false,
            serializedName: 'affinityId',
            type: {
              name: 'String'
            }
          },
          nodeUrl: {
            required: false,
            serializedName: 'nodeUrl',
            type: {
              name: 'String'
            }
          },
          poolId: {
            required: false,
            serializedName: 'poolId',
            type: {
              name: 'String'
            }
          },
          nodeId: {
            required: false,
            serializedName: 'nodeId',
            type: {
              name: 'String'
            }
          },
          taskRootDirectory: {
            required: false,
            serializedName: 'taskRootDirectory',
            type: {
              name: 'String'
            }
          },
          taskRootDirectoryUrl: {
            required: false,
            serializedName: 'taskRootDirectoryUrl',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ComputeNodeInformation;
