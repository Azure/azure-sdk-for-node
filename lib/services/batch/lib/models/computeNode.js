/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ComputeNode class.
 * @constructor
 * @summary A compute node in the Batch service.
 *
 * @member {string} [id] The ID of the compute node. Every node that is added
 * to a pool is assigned a unique ID. Whenever a node is removed from a pool,
 * all of its local files are deleted, and the ID is reclaimed and could be
 * reused for new nodes.
 * 
 * @member {string} [url] The URL of the compute node.
 * 
 * @member {string} [state] The current state of the compute node. Possible
 * values include: 'idle', 'rebooting', 'reimaging', 'running', 'unusable',
 * 'creating', 'starting', 'waitingforstarttask', 'starttaskfailed', 'unknown',
 * 'leavingpool', 'offline'
 * 
 * @member {string} [schedulingState] Whether the compute node is available for
 * task scheduling. Possible values are: enabled – Tasks can be scheduled on
 * the node. disabled – No new tasks will be scheduled on the node. Tasks
 * already running on the node may still run to completion. All nodes start
 * with scheduling enabled. Possible values include: 'enabled', 'disabled'
 * 
 * @member {date} [stateTransitionTime] The time at which the compute node
 * entered its current state.
 * 
 * @member {date} [lastBootTime] The time at which the compute node was
 * started. This property may not be present if the node state is unusable.
 * 
 * @member {date} [allocationTime] The time at which this compute node was
 * allocated to the pool.
 * 
 * @member {string} [ipAddress] The IP address that other compute nodes can use
 * to communicate with this compute node. Every node that is added to a pool is
 * assigned a unique IP address. Whenever a node is removed from a pool, all of
 * its local files are deleted, and the IP address is reclaimed and could be
 * reused for new nodes.
 * 
 * @member {string} [affinityId] An identifier which can be passed when adding
 * a task to request that the task be scheduled close to this compute node.
 * 
 * @member {string} [vmSize] The size of the virtual machine hosting the
 * compute node. For information about available sizes of virtual machines for
 * Cloud Services pools (pools created with cloudServiceConfiguration), see
 * Sizes for Cloud Services
 * (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
 * Batch supports all Cloud Services VM sizes except ExtraSmall. For
 * information about available VM sizes for pools using images from the Virtual
 * Machines Marketplace (pools created with virtualMachineConfiguration) see
 * Sizes for Virtual Machines (Linux)
 * (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
 * or Sizes for Virtual Machines (Windows)
 * (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
 * Batch supports all Azure VM sizes except STANDARD_A0 and those with premium
 * storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
 * 
 * @member {number} [totalTasksRun] The total number of job tasks completed on
 * the compute node. This includes Job Preparation, Job Release and Job Manager
 * tasks, but not the pool start task.
 * 
 * @member {number} [runningTasksCount] The total number of currently running
 * job tasks on the compute node. This includes Job Preparation, Job Release,
 * and Job Manager tasks, but not the pool start task.
 * 
 * @member {number} [totalTasksSucceeded] The total number of job tasks which
 * completed successfully (with exitCode 0) on the compute node. This includes
 * Job Preparation, Job Release, and Job Manager tasks, but not the pool start
 * task.
 * 
 * @member {array} [recentTasks] The list of tasks that are currently running
 * on the compute node.
 * 
 * @member {object} [startTask] The task specified to run on the compute node
 * as it joins the pool.
 * 
 * @member {string} [startTask.commandLine] The command line does not run under
 * a shell, and therefore cannot take advantage of shell features such as
 * environment variable expansion. If you want to take advantage of such
 * features, you should invoke the shell in the command line, for example using
 * "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [startTask.resourceFiles]
 * 
 * @member {array} [startTask.environmentSettings]
 * 
 * @member {boolean} [startTask.runElevated]
 * 
 * @member {number} [startTask.maxTaskRetryCount] The Batch service retries a
 * task if its exit code is nonzero. Note that this value specifically controls
 * the number of retries. The Batch service will try the task once, and may
 * then retry up to this limit. For example, if the maximum retry count is 3,
 * Batch tries the task up to 4 times (one initial try and 3 retries). If the
 * maximum retry count is 0, the Batch service does not retry the task. If the
 * maximum retry count is -1, the Batch service retries the task without limit.
 * 
 * @member {boolean} [startTask.waitForSuccess] If true and the start task
 * fails on a compute node, the Batch service retries the start task up to its
 * maximum retry count (maxTaskRetryCount). If the task has still not completed
 * successfully after all retries, then the Batch service marks the compute
 * node unusable, and will not schedule tasks to it. This condition can be
 * detected via the node state and scheduling error detail. If false, the Batch
 * service will not wait for the start task to complete. In this case, other
 * tasks can start executing on the compute node while the start task is still
 * running; and even if the start task fails, new tasks will continue to be
 * scheduled on the node. The default is false.
 * 
 * @member {object} [startTaskInfo] Runtime information about the execution of
 * the start task on the compute node.
 * 
 * @member {string} [startTaskInfo.state] Possible values are: running – The
 * start task is currently running. completed – The start task has exited with
 * exit code 0, or the start task has failed and the retry limit has reached,
 * or the start task process did not run due to scheduling errors. Possible
 * values include: 'running', 'completed'
 * 
 * @member {date} [startTaskInfo.startTime] This value is reset every time the
 * task is restarted or retried (that is, this is the most recent time at which
 * the start task started running).
 * 
 * @member {date} [startTaskInfo.endTime] This is the end time of the most
 * recent run of the start task, if that run has completed (even if that run
 * failed and a retry is pending). This element is not present if the start
 * task is currently running.
 * 
 * @member {number} [startTaskInfo.exitCode] This property is set only if the
 * start task is in the completed state. In general, the exit code for a
 * process reflects the specific convention implemented by the application
 * developer for that process. If you use the exit code value to make decisions
 * in your code, be sure that you know the exit code convention used by the
 * application process. However, if the Batch service terminates the start task
 * (due to timeout, or user termination via the API) you may see an operating
 * system-defined exit code.
 * 
 * @member {object} [startTaskInfo.schedulingError]
 * 
 * @member {string} [startTaskInfo.schedulingError.category] Possible values
 * include: 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [startTaskInfo.schedulingError.code]
 * 
 * @member {string} [startTaskInfo.schedulingError.message]
 * 
 * @member {array} [startTaskInfo.schedulingError.details]
 * 
 * @member {number} [startTaskInfo.retryCount] The task is retried if it exits
 * with a nonzero exit code, up to the specified MaxTaskRetryCount.
 * 
 * @member {date} [startTaskInfo.lastRetryTime] This element is present only if
 * the task was retried (i.e. retryCount is nonzero). If present, this is
 * typically the same as startTime, but may be different if the task has been
 * restarted for reasons other than retry; for example, if the compute node was
 * rebooted during a retry, then the startTime is updated but the lastRetryTime
 * is not.
 * 
 * @member {array} [certificateReferences] The list of certificates installed
 * on the compute node. For Windows compute nodes, the Batch service installs
 * the certificates to the specified certificate store and location. For Linux
 * compute nodes, the certificates are stored in a directory inside the task
 * working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is
 * supplied to the task to query for this location. For certificates with
 * visibility of remoteuser, a certs directory is created in the user's home
 * directory (e.g., /home/<user-name>/certs) where certificates are placed.
 * 
 * @member {array} [errors] The list of errors that are currently being
 * encountered by the compute node.
 * 
 */
function ComputeNode() {
}

/**
 * Defines the metadata of ComputeNode
 *
 * @returns {object} metadata of ComputeNode
 *
 */
ComputeNode.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ComputeNode',
    type: {
      name: 'Composite',
      className: 'ComputeNode',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        url: {
          required: false,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        state: {
          required: false,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingforstarttask', 'starttaskfailed', 'unknown', 'leavingpool', 'offline' ]
          }
        },
        schedulingState: {
          required: false,
          serializedName: 'schedulingState',
          type: {
            name: 'Enum',
            allowedValues: [ 'enabled', 'disabled' ]
          }
        },
        stateTransitionTime: {
          required: false,
          serializedName: 'stateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        lastBootTime: {
          required: false,
          serializedName: 'lastBootTime',
          type: {
            name: 'DateTime'
          }
        },
        allocationTime: {
          required: false,
          serializedName: 'allocationTime',
          type: {
            name: 'DateTime'
          }
        },
        ipAddress: {
          required: false,
          serializedName: 'ipAddress',
          type: {
            name: 'String'
          }
        },
        affinityId: {
          required: false,
          serializedName: 'affinityId',
          type: {
            name: 'String'
          }
        },
        vmSize: {
          required: false,
          serializedName: 'vmSize',
          type: {
            name: 'String'
          }
        },
        totalTasksRun: {
          required: false,
          serializedName: 'totalTasksRun',
          type: {
            name: 'Number'
          }
        },
        runningTasksCount: {
          required: false,
          serializedName: 'runningTasksCount',
          type: {
            name: 'Number'
          }
        },
        totalTasksSucceeded: {
          required: false,
          serializedName: 'totalTasksSucceeded',
          type: {
            name: 'Number'
          }
        },
        recentTasks: {
          required: false,
          serializedName: 'recentTasks',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'TaskInformationElementType',
                type: {
                  name: 'Composite',
                  className: 'TaskInformation'
                }
            }
          }
        },
        startTask: {
          required: false,
          serializedName: 'startTask',
          type: {
            name: 'Composite',
            className: 'StartTask'
          }
        },
        startTaskInfo: {
          required: false,
          serializedName: 'startTaskInfo',
          type: {
            name: 'Composite',
            className: 'StartTaskInformation'
          }
        },
        certificateReferences: {
          required: false,
          serializedName: 'certificateReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'CertificateReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'CertificateReference'
                }
            }
          }
        },
        errors: {
          required: false,
          serializedName: 'errors',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ComputeNodeErrorElementType',
                type: {
                  name: 'Composite',
                  className: 'ComputeNodeError'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = ComputeNode;
