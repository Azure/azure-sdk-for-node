/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @summary Specifies details of a Job Manager task.
  *
 * The Job Manager task is automatically started when the job is created. The
 * Batch service tries to schedule the Job Manager task before any other tasks
 * in the job. When shrinking a pool, the Batch service tries to preserve
 * compute nodes where Job Manager tasks are running for as long as possible
 * (that is, nodes running 'normal' tasks are removed before nodes running Job
 * Manager tasks). When a Job Manager task fails and needs to be restarted, the
 * system tries to schedule it at the highest priority. If there are no idle
 * nodes available, the system may terminate one of the running tasks in the
 * pool and return it to the queue in order to make room for the Job Manager
 * task to restart. Note that a Job Manager task in one job does not have
 * priority over tasks in other jobs. Across jobs, only job level priorities
 * are observed. For example, if a Job Manager in a priority 0 job needs to be
 * restarted, it will not displace tasks of a priority 1 job.
 *
 */
class JobManagerTask {
  /**
   * Create a JobManagerTask.
   * @member {string} id A string that uniquely identifies the Job Manager task
   * within the job. The ID can contain any combination of alphanumeric
   * characters including hyphens and underscores and cannot contain more than
   * 64 characters.
   * @member {string} [displayName] The display name of the Job Manager task.
   * It need not be unique and can contain any Unicode characters up to a
   * maximum length of 1024.
   * @member {string} commandLine The command line of the Job Manager task. The
   * command line does not run under a shell, and therefore cannot take
   * advantage of shell features such as environment variable expansion. If you
   * want to take advantage of such features, you should invoke the shell in
   * the command line, for example using "cmd /c MyCommand" in Windows or
   * "/bin/sh -c MyCommand" in Linux.
   * @member {object} [containerSettings] The settings for the container under
   * which the Job Manager task runs. If the pool that will run this task has
   * containerConfiguration set, this must be set as well. If the pool that
   * will run this task doesn't have containerConfiguration set, this must not
   * be set. When this is specified, all directories recursively below the
   * AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node)
   * are mapped into the container, all task environment variables are mapped
   * into the container, and the task command line is executed in the
   * container.
   * @member {string} [containerSettings.containerRunOptions] These additional
   * options are supplied as arguments to the "docker create" command, in
   * addition to those controlled by the Batch Service.
   * @member {string} [containerSettings.imageName] This is the full image
   * reference, as would be specified to "docker pull". If no tag is provided
   * as part of the image name, the tag ":latest" is used as a default.
   * @member {object} [containerSettings.registry] This setting can be omitted
   * if was already provided at pool creation.
   * @member {string} [containerSettings.registry.registryServer] If omitted,
   * the default is "docker.io".
   * @member {string} [containerSettings.registry.userName]
   * @member {string} [containerSettings.registry.password]
   * @member {array} [resourceFiles] A list of files that the Batch service
   * will download to the compute node before running the command line. Files
   * listed under this element are located in the task's working directory.
   * @member {array} [outputFiles] A list of files that the Batch service will
   * upload from the compute node after running the command line. For
   * multi-instance tasks, the files will only be uploaded from the compute
   * node on which the primary task is executed.
   * @member {array} [environmentSettings] A list of environment variable
   * settings for the Job Manager task.
   * @member {object} [constraints] Constraints that apply to the Job Manager
   * task.
   * @member {moment.duration} [constraints.maxWallClockTime] If this is not
   * specified, there is no time limit on how long the task may run.
   * @member {moment.duration} [constraints.retentionTime] The default is
   * infinite, i.e. the task directory will be retained until the compute node
   * is removed or reimaged.
   * @member {number} [constraints.maxTaskRetryCount] Note that this value
   * specifically controls the number of retries. The Batch service will try
   * the task once, and may then retry up to this limit. For example, if the
   * maximum retry count is 3, Batch tries the task up to 4 times (one initial
   * try and 3 retries). If the maximum retry count is 0, the Batch service
   * does not retry the task. If the maximum retry count is -1, the Batch
   * service retries the task without limit.
   * @member {boolean} [killJobOnCompletion] Whether completion of the Job
   * Manager task signifies completion of the entire job. If true, when the Job
   * Manager task completes, the Batch service marks the job as complete. If
   * any tasks are still running at this time (other than Job Release), those
   * tasks are terminated. If false, the completion of the Job Manager task
   * does not affect the job status. In this case, you should either use the
   * onAllTasksComplete attribute to terminate the job, or have a client or
   * user terminate the job explicitly. An example of this is if the Job
   * Manager creates a set of tasks but then takes no further role in their
   * execution. The default value is true. If you are using the
   * onAllTasksComplete and onTaskFailure attributes to control job lifetime,
   * and using the Job Manager task only to create the tasks for the job (not
   * to monitor progress), then it is important to set killJobOnCompletion to
   * false.
   * @member {object} [userIdentity] The user identity under which the Job
   * Manager task runs. If omitted, the task runs as a non-administrative user
   * unique to the task.
   * @member {string} [userIdentity.userName] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @member {object} [userIdentity.autoUser] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @member {string} [userIdentity.autoUser.scope] Values are:
   *
   * pool - specifies that the task runs as the common auto user account which
   * is created on every node in a pool.
   * task - specifies that the service should create a new user for the task.
   * The default value is task. Possible values include: 'task', 'pool'
   * @member {string} [userIdentity.autoUser.elevationLevel] nonAdmin - The
   * auto user is a standard user without elevated access. admin - The auto
   * user is a user with elevated access and operates with full Administrator
   * permissions. The default value is nonAdmin. Possible values include:
   * 'nonAdmin', 'admin'
   * @member {boolean} [runExclusive] Whether the Job Manager task requires
   * exclusive use of the compute node where it runs. If true, no other tasks
   * will run on the same compute node for as long as the Job Manager is
   * running. If false, other tasks can run simultaneously with the Job Manager
   * on a compute node. The Job Manager task counts normally against the node's
   * concurrent task limit, so this is only relevant if the node allows
   * multiple concurrent tasks. The default value is true.
   * @member {array} [applicationPackageReferences] A list of application
   * packages that the Batch service will deploy to the compute node before
   * running the command line. Application packages are downloaded and deployed
   * to a shared directory, not the task working directory. Therefore, if a
   * referenced package is already on the compute node, and is up to date, then
   * it is not re-downloaded; the existing copy on the compute node is used. If
   * a referenced application package cannot be installed, for example because
   * the package has been deleted or because download failed, the task fails.
   * @member {object} [authenticationTokenSettings] The settings for an
   * authentication token that the task can use to perform Batch service
   * operations. If this property is set, the Batch service provides the task
   * with an authentication token which can be used to authenticate Batch
   * service operations without requiring an account access key. The token is
   * provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The
   * operations that the task can carry out using the token depend on the
   * settings. For example, a task can request job permissions in order to add
   * other tasks to the job, or check the status of the job or of other tasks
   * under the job.
   * @member {array} [authenticationTokenSettings.access] The authentication
   * token grants access to a limited set of Batch service operations.
   * Currently the only supported value for the access property is 'job', which
   * grants access to all operations related to the job which contains the
   * task.
   * @member {boolean} [allowLowPriorityNode] Whether the Job Manager task may
   * run on a low-priority compute node. The default value is false.
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobManagerTask
   *
   * @returns {object} metadata of JobManagerTask
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobManagerTask',
      type: {
        name: 'Composite',
        className: 'JobManagerTask',
        modelProperties: {
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          commandLine: {
            required: true,
            serializedName: 'commandLine',
            type: {
              name: 'String'
            }
          },
          containerSettings: {
            required: false,
            serializedName: 'containerSettings',
            type: {
              name: 'Composite',
              className: 'TaskContainerSettings'
            }
          },
          resourceFiles: {
            required: false,
            serializedName: 'resourceFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ResourceFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ResourceFile'
                  }
              }
            }
          },
          outputFiles: {
            required: false,
            serializedName: 'outputFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OutputFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'OutputFile'
                  }
              }
            }
          },
          environmentSettings: {
            required: false,
            serializedName: 'environmentSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentSettingElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentSetting'
                  }
              }
            }
          },
          constraints: {
            required: false,
            serializedName: 'constraints',
            type: {
              name: 'Composite',
              className: 'TaskConstraints'
            }
          },
          killJobOnCompletion: {
            required: false,
            serializedName: 'killJobOnCompletion',
            type: {
              name: 'Boolean'
            }
          },
          userIdentity: {
            required: false,
            serializedName: 'userIdentity',
            type: {
              name: 'Composite',
              className: 'UserIdentity'
            }
          },
          runExclusive: {
            required: false,
            serializedName: 'runExclusive',
            type: {
              name: 'Boolean'
            }
          },
          applicationPackageReferences: {
            required: false,
            serializedName: 'applicationPackageReferences',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationPackageReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationPackageReference'
                  }
              }
            }
          },
          authenticationTokenSettings: {
            required: false,
            serializedName: 'authenticationTokenSettings',
            type: {
              name: 'Composite',
              className: 'AuthenticationTokenSettings'
            }
          },
          allowLowPriorityNode: {
            required: false,
            serializedName: 'allowLowPriorityNode',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = JobManagerTask;
