/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Specifies details of a Job Manager Task.
  *
 * The Job Manager Task is automatically started when the Job is created. The
 * Batch service tries to schedule the Job Manager Task before any other Tasks
 * in the Job. When shrinking a Pool, the Batch service tries to preserve Nodes
 * where Job Manager Tasks are running for as long as possible (that is,
 * Compute Nodes running 'normal' Tasks are removed before Compute Nodes
 * running Job Manager Tasks). When a Job Manager Task fails and needs to be
 * restarted, the system tries to schedule it at the highest priority. If there
 * are no idle Compute Nodes available, the system may terminate one of the
 * running Tasks in the Pool and return it to the queue in order to make room
 * for the Job Manager Task to restart. Note that a Job Manager Task in one Job
 * does not have priority over Tasks in other Jobs. Across Jobs, only Job level
 * priorities are observed. For example, if a Job Manager in a priority 0 Job
 * needs to be restarted, it will not displace Tasks of a priority 1 Job. Batch
 * will retry Tasks when a recovery operation is triggered on a Node. Examples
 * of recovery operations include (but are not limited to) when an unhealthy
 * Node is rebooted or a Compute Node disappeared due to host failure. Retries
 * due to recovery operations are independent of and are not counted against
 * the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry
 * due to a recovery operation may occur. Because of this, all Tasks should be
 * idempotent. This means Tasks need to tolerate being interrupted and
 * restarted without causing any corruption or duplicate data. The best
 * practice for long running Tasks is to use some form of checkpointing.
 *
 */
class JobManagerTask {
  /**
   * Create a JobManagerTask.
   * @property {string} id A string that uniquely identifies the Job Manager
   * Task within the Job. The ID can contain any combination of alphanumeric
   * characters including hyphens and underscores and cannot contain more than
   * 64 characters.
   * @property {string} [displayName] The display name of the Job Manager Task.
   * It need not be unique and can contain any Unicode characters up to a
   * maximum length of 1024.
   * @property {string} commandLine The command line of the Job Manager Task.
   * The command line does not run under a shell, and therefore cannot take
   * advantage of shell features such as environment variable expansion. If you
   * want to take advantage of such features, you should invoke the shell in
   * the command line, for example using "cmd /c MyCommand" in Windows or
   * "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths,
   * it should use a relative path (relative to the Task working directory), or
   * use the Batch provided environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   * @property {object} [containerSettings] The settings for the container
   * under which the Job Manager Task runs. If the Pool that will run this Task
   * has containerConfiguration set, this must be set as well. If the Pool that
   * will run this Task doesn't have containerConfiguration set, this must not
   * be set. When this is specified, all directories recursively below the
   * AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node)
   * are mapped into the container, all Task environment variables are mapped
   * into the container, and the Task command line is executed in the
   * container. Files produced in the container outside of
   * AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning
   * that Batch file APIs will not be able to access those files.
   * @property {string} [containerSettings.containerRunOptions] These
   * additional options are supplied as arguments to the "docker create"
   * command, in addition to those controlled by the Batch Service.
   * @property {string} [containerSettings.imageName] This is the full Image
   * reference, as would be specified to "docker pull". If no tag is provided
   * as part of the Image name, the tag ":latest" is used as a default.
   * @property {object} [containerSettings.registry] This setting can be
   * omitted if was already provided at Pool creation.
   * @property {string} [containerSettings.registry.registryServer] If omitted,
   * the default is "docker.io".
   * @property {string} [containerSettings.registry.userName]
   * @property {string} [containerSettings.registry.password]
   * @property {string} [containerSettings.workingDirectory] The default is
   * 'taskWorkingDirectory'. Possible values include: 'taskWorkingDirectory',
   * 'containerImageDefault'
   * @property {array} [resourceFiles] A list of files that the Batch service
   * will download to the Compute Node before running the command line. Files
   * listed under this element are located in the Task's working directory.
   * There is a maximum size for the list of resource files.  When the max size
   * is exceeded, the request will fail and the response error code will be
   * RequestEntityTooLarge. If this occurs, the collection of ResourceFiles
   * must be reduced in size. This can be achieved using .zip files,
   * Application Packages, or Docker Containers.
   * @property {array} [outputFiles] A list of files that the Batch service
   * will upload from the Compute Node after running the command line. For
   * multi-instance Tasks, the files will only be uploaded from the Compute
   * Node on which the primary Task is executed.
   * @property {array} [environmentSettings] A list of environment variable
   * settings for the Job Manager Task.
   * @property {object} [constraints] Constraints that apply to the Job Manager
   * Task.
   * @property {moment.duration} [constraints.maxWallClockTime] If this is not
   * specified, there is no time limit on how long the Task may run.
   * @property {moment.duration} [constraints.retentionTime] The default is 7
   * days, i.e. the Task directory will be retained for 7 days unless the
   * Compute Node is removed or the Job is deleted.
   * @property {number} [constraints.maxTaskRetryCount] Note that this value
   * specifically controls the number of retries for the Task executable due to
   * a nonzero exit code. The Batch service will try the Task once, and may
   * then retry up to this limit. For example, if the maximum retry count is 3,
   * Batch tries the Task up to 4 times (one initial try and 3 retries). If the
   * maximum retry count is 0, the Batch service does not retry the Task after
   * the first attempt. If the maximum retry count is -1, the Batch service
   * retries the Task without limit.
   * @property {number} [requiredSlots] The number of scheduling slots that the
   * Task requires to run. The default is 1. A Task can only be scheduled to
   * run on a compute node if the node has enough free scheduling slots
   * available. For multi-instance Tasks, this must be 1.
   * @property {boolean} [killJobOnCompletion] Whether completion of the Job
   * Manager Task signifies completion of the entire Job. If true, when the Job
   * Manager Task completes, the Batch service marks the Job as complete. If
   * any Tasks are still running at this time (other than Job Release), those
   * Tasks are terminated. If false, the completion of the Job Manager Task
   * does not affect the Job status. In this case, you should either use the
   * onAllTasksComplete attribute to terminate the Job, or have a client or
   * user terminate the Job explicitly. An example of this is if the Job
   * Manager creates a set of Tasks but then takes no further role in their
   * execution. The default value is true. If you are using the
   * onAllTasksComplete and onTaskFailure attributes to control Job lifetime,
   * and using the Job Manager Task only to create the Tasks for the Job (not
   * to monitor progress), then it is important to set killJobOnCompletion to
   * false.
   * @property {object} [userIdentity] The user identity under which the Job
   * Manager Task runs. If omitted, the Task runs as a non-administrative user
   * unique to the Task.
   * @property {string} [userIdentity.userName] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @property {object} [userIdentity.autoUser] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @property {string} [userIdentity.autoUser.scope] The default value is
   * pool. If the pool is running Windows a value of Task should be specified
   * if stricter isolation between tasks is required. For example, if the task
   * mutates the registry in a way which could impact other tasks, or if
   * certificates have been specified on the pool which should not be
   * accessible by normal tasks but should be accessible by StartTasks.
   * Possible values include: 'task', 'pool'
   * @property {string} [userIdentity.autoUser.elevationLevel] The default
   * value is nonAdmin. Possible values include: 'nonAdmin', 'admin'
   * @property {boolean} [runExclusive] Whether the Job Manager Task requires
   * exclusive use of the Compute Node where it runs. If true, no other Tasks
   * will run on the same Node for as long as the Job Manager is running. If
   * false, other Tasks can run simultaneously with the Job Manager on a
   * Compute Node. The Job Manager Task counts normally against the Compute
   * Node's concurrent Task limit, so this is only relevant if the Compute Node
   * allows multiple concurrent Tasks. The default value is true.
   * @property {array} [applicationPackageReferences] A list of Application
   * Packages that the Batch service will deploy to the Compute Node before
   * running the command line. Application Packages are downloaded and deployed
   * to a shared directory, not the Task working directory. Therefore, if a
   * referenced Application Package is already on the Compute Node, and is up
   * to date, then it is not re-downloaded; the existing copy on the Compute
   * Node is used. If a referenced Application Package cannot be installed, for
   * example because the package has been deleted or because download failed,
   * the Task fails.
   * @property {object} [authenticationTokenSettings] The settings for an
   * authentication token that the Task can use to perform Batch service
   * operations. If this property is set, the Batch service provides the Task
   * with an authentication token which can be used to authenticate Batch
   * service operations without requiring an Account access key. The token is
   * provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The
   * operations that the Task can carry out using the token depend on the
   * settings. For example, a Task can request Job permissions in order to add
   * other Tasks to the Job, or check the status of the Job or of other Tasks
   * under the Job.
   * @property {array} [authenticationTokenSettings.access] The authentication
   * token grants access to a limited set of Batch service operations.
   * Currently the only supported value for the access property is 'job', which
   * grants access to all operations related to the Job which contains the
   * Task.
   * @property {boolean} [allowLowPriorityNode] Whether the Job Manager Task
   * may run on a low-priority Compute Node. The default value is true.
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobManagerTask
   *
   * @returns {object} metadata of JobManagerTask
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobManagerTask',
      type: {
        name: 'Composite',
        className: 'JobManagerTask',
        modelProperties: {
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          commandLine: {
            required: true,
            serializedName: 'commandLine',
            type: {
              name: 'String'
            }
          },
          containerSettings: {
            required: false,
            serializedName: 'containerSettings',
            type: {
              name: 'Composite',
              className: 'TaskContainerSettings'
            }
          },
          resourceFiles: {
            required: false,
            serializedName: 'resourceFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ResourceFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ResourceFile'
                  }
              }
            }
          },
          outputFiles: {
            required: false,
            serializedName: 'outputFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OutputFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'OutputFile'
                  }
              }
            }
          },
          environmentSettings: {
            required: false,
            serializedName: 'environmentSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentSettingElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentSetting'
                  }
              }
            }
          },
          constraints: {
            required: false,
            serializedName: 'constraints',
            type: {
              name: 'Composite',
              className: 'TaskConstraints'
            }
          },
          requiredSlots: {
            required: false,
            serializedName: 'requiredSlots',
            type: {
              name: 'Number'
            }
          },
          killJobOnCompletion: {
            required: false,
            serializedName: 'killJobOnCompletion',
            type: {
              name: 'Boolean'
            }
          },
          userIdentity: {
            required: false,
            serializedName: 'userIdentity',
            type: {
              name: 'Composite',
              className: 'UserIdentity'
            }
          },
          runExclusive: {
            required: false,
            serializedName: 'runExclusive',
            type: {
              name: 'Boolean'
            }
          },
          applicationPackageReferences: {
            required: false,
            serializedName: 'applicationPackageReferences',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationPackageReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationPackageReference'
                  }
              }
            }
          },
          authenticationTokenSettings: {
            required: false,
            serializedName: 'authenticationTokenSettings',
            type: {
              name: 'Composite',
              className: 'AuthenticationTokenSettings'
            }
          },
          allowLowPriorityNode: {
            required: false,
            serializedName: 'allowLowPriorityNode',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = JobManagerTask;
