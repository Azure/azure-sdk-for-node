/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the JobManagerTask class.
 * @constructor
 * @summary Specifies details of a Job Manager task.
 *
 * @member {string} id A string that uniquely identifies the Job Manager
 * taskwithin the job. The id can contain any combination of alphanumeric
 * characters including hyphens and underscores and cannot contain more than 64
 * characters.
 * 
 * @member {string} [displayName] The display name of the Job Manager task. It
 * need not be unique and can contain any Unicode characters up to a maximum
 * length of 1024.
 * 
 * @member {string} commandLine The command line of the Job Manager task. The
 * command line does not run under a shell, and therefore cannot take advantage
 * of shell features such as environment variable expansion. If you want to
 * take advantage of such features, you should invoke the shell in the command
 * line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c
 * MyCommand" in Linux.
 * 
 * @member {array} [resourceFiles] A list of files that the Batch service will
 * download to the compute node before running the command line. Files listed
 * under this element are located in the task's working directory.
 * 
 * @member {array} [environmentSettings] A list of environment variable
 * settings for the Job Manager task.
 * 
 * @member {object} [constraints] Constraints that apply to the Job Manager
 * task.
 * 
 * @member {moment.duration} [constraints.maxWallClockTime] If this is not
 * specified, there is no time limit on how long the task may run.
 * 
 * @member {moment.duration} [constraints.retentionTime] The default is
 * infinite, i.e. the task directory will be retained until the compute node is
 * removed or reimaged.
 * 
 * @member {number} [constraints.maxTaskRetryCount] Note that this value
 * specifically controls the number of retries. The Batch service will try the
 * task once, and may then retry up to this limit. For example, if the maximum
 * retry count is 3, Batch tries the task up to 4 times (one initial try and 3
 * retries). If the maximum retry count is 0, the Batch service does not retry
 * the task. If the maximum retry count is -1, the Batch service retries the
 * task without limit.
 * 
 * @member {boolean} [killJobOnCompletion] Whether completion of the Job
 * Manager task signifies completion of the entire job. If true, when the Job
 * Manager task completes, the Batch service marks the job as complete. If any
 * tasks are still running at this time (other than Job Release), those tasks
 * are terminated. If false, the completion of the Job Manager task does not
 * affect the job status. In this case, you should either use the
 * onAllTasksComplete attribute to terminate the job, or have a client or user
 * terminate the job explicitly. An example of this is if the Job Manager
 * creates a set of tasks but then takes no further role in their execution.
 * The default value is true. If you are using the onAllTasksComplete and
 * onTaskFailure attributes to control job lifetime, and using the job manager
 * task only to create the tasks for the job (not to monitor progress), then it
 * is important to set killJobOnCompletion to false.
 * 
 * @member {boolean} [runElevated] Whether to run the Job Manager task in
 * elevated mode. The default value is false.
 * 
 * @member {boolean} [runExclusive] Whether the Job Manager task requires
 * exclusive use of the compute node where it runs. If true, no other tasks
 * will run on the same compute node for as long as the Job Manager is running.
 * If false, other tasks can run simultaneously with the Job Manager on a
 * compute node. The Job Manager task counts normally against the node's
 * concurrent task limit, so this is only relevant if the node allows multiple
 * concurrent tasks. The default value is true.
 * 
 * @member {array} [applicationPackageReferences] A list of application
 * packages that the Batch service will deploy to the compute node before
 * running the command line. Application packages are downloaded and deployed
 * to a shared directory, not the task directory. Therefore, if a referenced
 * package is already on the compute node, and is up to date, then it is not
 * re-downloaded; the existing copy on the compute node is used. If a
 * referenced application package cannot be installed, for example because the
 * package has been deleted or because download failed, the task fails with a
 * scheduling error. This property is currently not supported on jobs running
 * on pools created using the virtualMachineConfiguration (IaaS) property. If a
 * task specifying applicationPackageReferences runs on such a pool, it fails
 * with a scheduling error with code TaskSchedulingConstraintFailed.
 * 
 */
function JobManagerTask() {
}

/**
 * Defines the metadata of JobManagerTask
 *
 * @returns {object} metadata of JobManagerTask
 *
 */
JobManagerTask.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'JobManagerTask',
    type: {
      name: 'Composite',
      className: 'JobManagerTask',
      modelProperties: {
        id: {
          required: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        commandLine: {
          required: true,
          serializedName: 'commandLine',
          type: {
            name: 'String'
          }
        },
        resourceFiles: {
          required: false,
          serializedName: 'resourceFiles',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ResourceFileElementType',
                type: {
                  name: 'Composite',
                  className: 'ResourceFile'
                }
            }
          }
        },
        environmentSettings: {
          required: false,
          serializedName: 'environmentSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EnvironmentSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'EnvironmentSetting'
                }
            }
          }
        },
        constraints: {
          required: false,
          serializedName: 'constraints',
          type: {
            name: 'Composite',
            className: 'TaskConstraints'
          }
        },
        killJobOnCompletion: {
          required: false,
          serializedName: 'killJobOnCompletion',
          type: {
            name: 'Boolean'
          }
        },
        runElevated: {
          required: false,
          serializedName: 'runElevated',
          type: {
            name: 'Boolean'
          }
        },
        runExclusive: {
          required: false,
          serializedName: 'runExclusive',
          type: {
            name: 'Boolean'
          }
        },
        applicationPackageReferences: {
          required: false,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = JobManagerTask;
