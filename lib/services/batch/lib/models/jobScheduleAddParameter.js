/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the JobScheduleAddParameter class.
 * @constructor
 * A job schedule that allows recurring jobs by specifying when to run jobs
 * and a specification used to create each job.
 * @member {string} id Gets or sets a string that uniquely identifies the
 * schedule within the account. A GUID is recommended.
 * 
 * @member {string} [displayName] Gets or sets the display name for the
 * schedule.
 * 
 * @member {object} schedule Gets or sets the schedule according to which jobs
 * will be created.
 * 
 * @member {date} [schedule.doNotRunUntil] Gets or sets the earliest time at
 * which any job may be created under this job schedule. If you do not
 * specify a doNotRunUntil time, the schedule becomes ready to create jobs
 * immediately.
 * 
 * @member {date} [schedule.doNotRunAfter] Gets or sets a time after which no
 * job will be created under this job schedule.  The schedule will move to
 * the completed state as soon as this deadline is past and there is no
 * active job under this job schedule.
 * 
 * @member {moment.duration} [schedule.startWindow] Gets or sets the time
 * interval, starting from the time at which the schedule indicates a job
 * should be created, within which a job must be created.  If a job is not
 * created within the startWindow interval, then the 'opportunity' is lost;
 * no job will be created until the next recurrence of the schedule.
 * 
 * @member {moment.duration} [schedule.recurrenceInterval] Gets or sets the
 * time interval between the start times of two successive jobs under the job
 * schedule. A job schedule can have at most one active job under it at any
 * given time.
 * 
 * @member {object} jobSpecification Gets or sets the details of the jobs to
 * be created on this schedule.
 * 
 * @member {number} [jobSpecification.priority] Gets or sets the priority of
 * jobs created under this schedule. Priority values can range from -1000 to
 * 1000, with -1000 being the lowest priority and 1000 being the highest
 * priority. The default value is 0.
 * 
 * @member {string} [jobSpecification.displayName] Gets or sets the display
 * name for jobs created under this schedule. It need not be unique and can
 * contain any Unicode characters up to a maximum length of 1024.
 * 
 * @member {boolean} [jobSpecification.usesTaskDependencies] Gets or sets the
 * flag that determines if this job will use tasks with dependencies.
 * 
 * @member {object} [jobSpecification.constraints] Gets or sets the execution
 * constraints for jobs created under this schedule.
 * 
 * @member {moment.duration} [jobSpecification.constraints.maxWallClockTime]
 * Gets or sets the maximum elapsed time that the job may run, measured from
 * the time the job starts. If the job does not complete within the time
 * limit, the Batch service terminates it and any tasks that are still
 * running.
 * 
 * @member {number} [jobSpecification.constraints.maxTaskRetryCount] Gets or
 * sets the maximum number of times each task may be retried. The Batch
 * service retries a task if its exit code is nonzero.
 * 
 * @member {object} [jobSpecification.jobManagerTask] Gets or sets the details
 * of a Job Manager task to be launched when a job is started under this
 * schedule.
 * 
 * @member {string} [jobSpecification.jobManagerTask.id] Gets or sets a string
 * that uniquely identifies the Job Manager task. A GUID is recommended.
 * 
 * @member {string} [jobSpecification.jobManagerTask.displayName] Gets or sets
 * the display name of the Job Manager task.
 * 
 * @member {string} [jobSpecification.jobManagerTask.commandLine] Gets or sets
 * the command line of the Job Manager task.
 * 
 * @member {array} [jobSpecification.jobManagerTask.resourceFiles] Gets or
 * sets a list of files that Batch will download to the compute node before
 * running the command line.
 * 
 * @member {array} [jobSpecification.jobManagerTask.environmentSettings] Gets
 * or sets a list of environment variable settings for the Job Manager task.
 * 
 * @member {object} [jobSpecification.jobManagerTask.constraints] Gets or sets
 * constraints that apply to the Job Manager task.
 * 
 * @member {moment.duration}
 * [jobSpecification.jobManagerTask.constraints.maxWallClockTime] Gets or
 * sets the maximum elapsed time that the task may run, measured from the
 * time the task starts. If the task does not complete within the time limit,
 * the Batch service terminates it.
 * 
 * @member {moment.duration}
 * [jobSpecification.jobManagerTask.constraints.retentionTime] Gets or sets
 * the minimum time to retain the working directory for the task on the
 * compute node where it ran. After this time, the Batch service may delete
 * the working directory and all its contents. The default is infinite.
 * 
 * @member {number}
 * [jobSpecification.jobManagerTask.constraints.maxTaskRetryCount] Gets or
 * sets the maximum number of times the task may be retried. The Batch
 * service retries a task if its exit code is nonzero.
 * 
 * @member {boolean} [jobSpecification.jobManagerTask.killJobOnCompletion]
 * Gets or sets whether completion of the Job Manager task signifies
 * completion of the entire job.
 * 
 * @member {boolean} [jobSpecification.jobManagerTask.runElevated] Gets or
 * sets whether to run the Job Manager task in elevated mode. The default
 * value is false.
 * 
 * @member {boolean} [jobSpecification.jobManagerTask.runExclusive] Gets or
 * sets whether the Job Manager task requires exclusive use of the compute
 * node where it runs.
 * 
 * @member {object} [jobSpecification.jobPreparationTask] Gets or sets the Job
 * Preparation task for jobs created under this schedule.
 * 
 * @member {string} [jobSpecification.jobPreparationTask.id] Gets or sets a
 * string that uniquely identifies the job preparation task within the job.
 * The id can contain any combination of alphanumeric characters including
 * hyphens and underscores and cannot contain more than 64 characters.
 * 
 * @member {string} [jobSpecification.jobPreparationTask.commandLine] Gets or
 * sets the command line of the Job Preparation task.
 * 
 * @member {array} [jobSpecification.jobPreparationTask.resourceFiles] Gets or
 * sets a list of files that Batch will download to the compute node before
 * running the command line.
 * 
 * @member {array} [jobSpecification.jobPreparationTask.environmentSettings]
 * Gets or sets a list of environment variable settings for the Job
 * Preparation task.
 * 
 * @member {object} [jobSpecification.jobPreparationTask.constraints] Gets or
 * sets constraints that apply to the Job Preparation task..
 * 
 * @member {moment.duration}
 * [jobSpecification.jobPreparationTask.constraints.maxWallClockTime] Gets or
 * sets the maximum elapsed time that the task may run, measured from the
 * time the task starts. If the task does not complete within the time limit,
 * the Batch service terminates it.
 * 
 * @member {moment.duration}
 * [jobSpecification.jobPreparationTask.constraints.retentionTime] Gets or
 * sets the minimum time to retain the working directory for the task on the
 * compute node where it ran. After this time, the Batch service may delete
 * the working directory and all its contents. The default is infinite.
 * 
 * @member {number}
 * [jobSpecification.jobPreparationTask.constraints.maxTaskRetryCount] Gets
 * or sets the maximum number of times the task may be retried. The Batch
 * service retries a task if its exit code is nonzero.
 * 
 * @member {boolean} [jobSpecification.jobPreparationTask.waitForSuccess] Gets
 * or sets whether the Batch Service should wait for the Job Preparation task
 * to complete successfully before scheduling any other tasks of the job on
 * the compute node.
 * 
 * @member {boolean} [jobSpecification.jobPreparationTask.runElevated] Gets or
 * sets whether to run the Job Preparation task in elevated mode. The default
 * value is false.
 * 
 * @member {boolean}
 * [jobSpecification.jobPreparationTask.rerunOnNodeRebootAfterSuccess] Gets
 * or sets whether the Batch service should rerun the Job Preparation task
 * after a compute node reboots. The default value is true.
 * 
 * @member {object} [jobSpecification.jobReleaseTask] Gets or sets the Job
 * Release task for jobs created under this schedule.
 * 
 * @member {string} [jobSpecification.jobReleaseTask.id] Gets or sets a string
 * that uniquely identifies the Job Release task within the job. The id can
 * contain any combination of alphanumeric characters including hyphens and
 * underscores and cannot contain more than 64 characters.
 * 
 * @member {string} [jobSpecification.jobReleaseTask.commandLine] Gets or sets
 * the command line of the Job Release task.
 * 
 * @member {array} [jobSpecification.jobReleaseTask.resourceFiles] Gets or
 * sets a list of files that Batch will download to the compute node before
 * running the command line.
 * 
 * @member {array} [jobSpecification.jobReleaseTask.environmentSettings] Gets
 * or sets a list of environment variable settings for the Job Release task.
 * 
 * @member {moment.duration}
 * [jobSpecification.jobReleaseTask.maxWallClockTime] Gets or sets the
 * maximum elapsed time that the Job Release task may run on a given compute
 * node, measured from the time the task starts. If the task does not
 * complete within the time limit, the Batch service terminates it. The
 * default value is 15 minutes.
 * 
 * @member {moment.duration} [jobSpecification.jobReleaseTask.retentionTime]
 * Gets or sets the minimum time to retain the working directory for the Job
 * Release task on the compute node.  After this time, the Batch service may
 * delete the working directory and all its contents. The default is infinite.
 * 
 * @member {boolean} [jobSpecification.jobReleaseTask.runElevated] Gets or
 * sets whether to run the Job Release task in elevated mode. The default
 * value is false.
 * 
 * @member {array} [jobSpecification.commonEnvironmentSettings] Gets or sets a
 * list of common environment variable settings.  These environment variables
 * are set for all tasks in jobs created under this schedule (including the
 * Job Manager, Job Preparation and Job Release tasks).
 * 
 * @member {object} [jobSpecification.poolInfo] Gets or sets the pool on which
 * the Batch service runs the tasks of jobs created under this schedule.
 * 
 * @member {string} [jobSpecification.poolInfo.poolId] Gets or sets the id of
 * an existing pool. All the tasks of the job will run on the specified pool.
 * You must specify either PoolId or AutoPoolSpecification, but not both.
 * 
 * @member {object} [jobSpecification.poolInfo.autoPoolSpecification] Gets or
 * sets characteristics for a temporary 'auto pool'. The Batch service will
 * create this auto pool and run all of the tasks of the job on it, and will
 * delete the pool once the job has completed. You must specify either PoolId
 * or AutoPoolSpecification, but not both.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.autoPoolIdPrefix] Gets or
 * sets a prefix to be added to the unique identifier when a pool is
 * automatically created. The prefix can be up to 20 characters long.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.poolLifetimeOption] Gets
 * or sets the minimum lifetime of created auto pools, and how multiple jobs
 * on a schedule are assigned to pools. Possible values include:
 * 'jobschedule', 'job', 'unmapped'
 * 
 * @member {boolean}
 * [jobSpecification.poolInfo.autoPoolSpecification.keepAlive] Gets or sets
 * whether to keep an auto pool alive after its lifetime expires.
 * 
 * @member {object} [jobSpecification.poolInfo.autoPoolSpecification.pool]
 * Gets or sets the pool specification for the auto pool.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.displayName] Gets or
 * sets the display name for the pool.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.vmSize] Gets or sets
 * the size of the virtual machines in the pool. All VMs in a pool are the
 * same size.
 * 
 * @member {object}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration]
 * Gets or sets the cloud service configuration for the pool. This property
 * and VirtualMachineConfiguration are mutually exclusive and one of the
 * properties must be specified.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
 * Gets or sets the Azure Guest OS family to be installed on the virtual
 * machines in the pool.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
 * Gets or sets the Azure Guest OS version to be installed on the virtual
 * machines in the pool. The default value is * which specifies the latest
 * operating system version for the specified OS family.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
 * Gets or sets the Azure Guest OS Version currently installed on the virtual
 * machines in the pool. This may differ from TargetOSVersion if the pool
 * state is Upgrading.
 * 
 * @member {object}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration]
 * Gets or sets the virtual machine configuration for the pool. This property
 * and CloudServiceConfiguration are mutually exclusive and one of the
 * properties must be specified.
 * 
 * @member {object}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
 * Gets or sets information about the platform or marketplace image to use.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
 * Gets or sets the publisher of the image.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
 * Gets or sets the offer of the image.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
 * Gets or sets the SKU of the image.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
 * Gets or sets the version of the image. A value of 'latest' can be
 * specified to select the latest version of an image.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
 * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
 * the compute node. This property must match the ImageReference property.
 * 
 * @member {object}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
 * Gets or sets Windows operating system settings on the virtual machine.
 * This property must not be specified if the ImageReference property
 * referencs a Linux OS image.
 * 
 * @member {boolean}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
 * Gets or sets whether virtual machine is enabled for automatic updates. If
 * omitted, the default value is true.
 * 
 * @member {number}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.maxTasksPerNode]
 * Gets or sets the maximum number of tasks that can run concurrently on a
 * single compute node in the pool.
 * 
 * @member {object}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
 * Gets or sets how tasks are distributed among compute nodes in the pool.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
 * Gets or sets how tasks should be distributed across compute nodes.
 * Possible values include: 'spread', 'pack', 'unmapped'
 * 
 * @member {moment.duration}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.resizeTimeout] Gets
 * or sets the timeout for allocation of compute nodes to the pool.
 * 
 * @member {number}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.targetDedicated]
 * Gets or sets the desired number of compute nodes in the pool.
 * 
 * @member {boolean}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.enableAutoScale]
 * Gets or sets whether the pool size should automatically adjust over time.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleFormula]
 * Gets or sets the formula for the desired number of compute nodes in the
 * pool.
 * 
 * @member {moment.duration}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval]
 * Gets or sets a time interval for the desired AutoScale evaluation period
 * in the pool.
 * 
 * @member {boolean}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication]
 * Gets or sets whether the pool permits direct communication between nodes.
 * 
 * @member {object}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.startTask] Gets or
 * sets a task to run on each compute node as it joins the pool. The task
 * runs when the node is added to the pool or when the node is restarted.
 * 
 * @member {string}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.commandLine]
 * Gets or sets the command line of the start task.
 * 
 * @member {array}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.resourceFiles]
 * Gets or sets a list of files that Batch will download to the compute node
 * before running the command line.
 * 
 * @member {array}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.environmentSettings]
 * Gets or sets a list of environment variable settings for the start task.
 * 
 * @member {boolean}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.runElevated]
 * Gets or sets whether to run the start task in elevated mode. The default
 * value is false.
 * 
 * @member {number}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount]
 * Gets or sets the maximum number of times the task may be retried.
 * 
 * @member {boolean}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess]
 * Gets or sets whether the Batch Service should wait for the start task to
 * complete successfully (that is, to exit with exit code 0) before
 * scheduling any tasks on the compute node.
 * 
 * @member {array}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.certificateReferences]
 * Gets or sets a list of certificates to be installed on each compute node
 * in the pool.
 * 
 * @member {array}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.applicationPackageReferences]
 * Gets or sets the list of application packages to be installed on each
 * compute node in the pool.
 * 
 * @member {array}
 * [jobSpecification.poolInfo.autoPoolSpecification.pool.metadata] Gets or
 * sets a list of name-value pairs associated with the pool as metadata.
 * 
 * @member {array} [jobSpecification.metadata] Gets or sets a list of
 * name-value pairs associated with each job created under this schedule as
 * metadata.
 * 
 * @member {array} [metadata] Gets or sets a list of name-value pairs
 * associated with the schedule as metadata.
 * 
 */
function JobScheduleAddParameter() {
}

/**
 * Defines the metadata of JobScheduleAddParameter
 *
 * @returns {object} metadata of JobScheduleAddParameter
 *
 */
JobScheduleAddParameter.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'JobScheduleAddParameter',
    type: {
      name: 'Composite',
      className: 'JobScheduleAddParameter',
      modelProperties: {
        id: {
          required: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        schedule: {
          required: true,
          serializedName: 'schedule',
          type: {
            name: 'Composite',
            className: 'Schedule'
          }
        },
        jobSpecification: {
          required: true,
          serializedName: 'jobSpecification',
          type: {
            name: 'Composite',
            className: 'JobSpecification'
          }
        },
        metadata: {
          required: false,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = JobScheduleAddParameter;
