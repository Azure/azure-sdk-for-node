/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the PoolAddParameter class.
 * @constructor
 * @summary A pool in the Azure Batch service to add.
 *
 * @member {string} id A string that uniquely identifies the pool within the
 * account. The ID can contain any combination of alphanumeric characters
 * including hyphens and underscores, and cannot contain more than 64
 * characters. The ID is case-preserving and case-insensitive (that is, you may
 * not have two pool IDs within an account that differ only by case).
 * 
 * @member {string} [displayName] The display name for the pool. The display
 * name need not be unique and can contain any Unicode characters up to a
 * maximum length of 1024.
 * 
 * @member {string} vmSize The size of virtual machines in the pool. All
 * virtual machines in a pool are the same size. For information about
 * available sizes of virtual machines for Cloud Services pools (pools created
 * with cloudServiceConfiguration), see Sizes for Cloud Services
 * (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
 * Batch supports all Cloud Services VM sizes except ExtraSmall. For
 * information about available VM sizes for pools using images from the Virtual
 * Machines Marketplace (pools created with virtualMachineConfiguration) see
 * Sizes for Virtual Machines (Linux)
 * (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
 * or Sizes for Virtual Machines (Windows)
 * (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
 * Batch supports all Azure VM sizes except STANDARD_A0 and those with premium
 * storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
 * 
 * @member {object} [cloudServiceConfiguration] The cloud service configuration
 * for the pool. This property and virtualMachineConfiguration are mutually
 * exclusive and one of the properties must be specified.
 * 
 * @member {string} [cloudServiceConfiguration.osFamily] Possible values are: 2
 * – OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 – OS Family 3,
 * equivalent to Windows Server 2012. 4 – OS Family 4, equivalent to Windows
 * Server 2012 R2. For more information, see Azure Guest OS Releases
 * (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
 * 
 * @member {string} [cloudServiceConfiguration.targetOSVersion] The default
 * value is * which specifies the latest operating system version for the
 * specified OS family.
 * 
 * @member {string} [cloudServiceConfiguration.currentOSVersion] This may
 * differ from targetOSVersion if the pool state is Upgrading. In this case
 * some virtual machines may be on the targetOSVersion and some may be on the
 * currentOSVersion during the upgrade process. Once all virtual machines have
 * upgraded, currentOSVersion is updated to be the same as targetOSVersion.
 * 
 * @member {object} [virtualMachineConfiguration] The virtual machine
 * configuration for the pool. This property and cloudServiceConfiguration are
 * mutually exclusive and one of the properties must be specified.
 * 
 * @member {object} [virtualMachineConfiguration.imageReference]
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.publisher] For
 * example, Canonical or MicrosoftWindowsServer.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.offer] For
 * example, UbuntuServer or WindowsServer.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.sku] For
 * example, 14.04.0-LTS or 2012-R2-Datacenter.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.version] A
 * value of 'latest' can be specified to select the latest version of an image.
 * If omitted, the default is 'latest'.
 * 
 * @member {string} [virtualMachineConfiguration.nodeAgentSKUId] The Batch node
 * agent is a program that runs on each node in the pool, and provides the
 * command-and-control interface between the node and the Batch service. There
 * are different implementations of the node agent, known as SKUs, for
 * different operating systems. You must specify a node agent SKU which matches
 * the selected image reference. To get the list of supported node agent SKUs
 * along with their list of verified image references, see the 'List supported
 * node agent SKUs' operation.
 * 
 * @member {object} [virtualMachineConfiguration.windowsConfiguration] This
 * property must not be specified if the imageReference property specifies a
 * Linux OS image.
 * 
 * @member {boolean}
 * [virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates] If
 * omitted, the default value is true.
 * 
 * @member {moment.duration} [resizeTimeout] The timeout for allocation of
 * compute nodes to the pool. This timeout applies only to manual scaling; it
 * has no effect when enableAutoScale is set to true. The default value is 15
 * minutes. The minimum value is 5 minutes. If you specify a value less than 5
 * minutes, the Batch service returns an error; if you are calling the REST API
 * directly, the HTTP status code is 400 (Bad Request).
 * 
 * @member {number} [targetDedicated] The desired number of compute nodes in
 * the pool. This property must have the default value if enableAutoScale is
 * true. It is required if enableAutoScale is false.
 * 
 * @member {boolean} [enableAutoScale] Whether the pool size should
 * automatically adjust over time. If true, the autoScaleFormula property must
 * be set. If false, the targetDedicated property must be set. The default
 * value is false.
 * 
 * @member {string} [autoScaleFormula] A formula for the desired number of
 * compute nodes in the pool. This property must not be specified if
 * enableAutoScale is set to false. It is required if enableAutoScale is set to
 * true. The formula is checked for validity before the pool is created. If the
 * formula is not valid, the Batch service rejects the request with detailed
 * error information. For more information about specifying this formula, see
 * 'Automatically scale compute nodes in an Azure Batch pool'
 * (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).
 * 
 * @member {moment.duration} [autoScaleEvaluationInterval] The time interval at
 * which to automatically adjust the pool size according to the autoscale
 * formula. The default value is 15 minutes. The minimum and maximum value are
 * 5 minutes and 168 hours respectively. If you specify a value less than 5
 * minutes or greater than 168 hours, the Batch service returns an error; if
 * you are calling the REST API directly, the HTTP status code is 400 (Bad
 * Request).
 * 
 * @member {boolean} [enableInterNodeCommunication] Whether the pool permits
 * direct communication between nodes. Enabling inter-node communication limits
 * the maximum size of the pool due to deployment restrictions on the nodes of
 * the pool. This may result in the pool not reaching its desired size. The
 * default value is false.
 * 
 * @member {object} [networkConfiguration] The network configuration for the
 * pool.
 * 
 * @member {string} [networkConfiguration.subnetId] The virtual network must be
 * in the same region and subscription as the Azure Batch account. The
 * specified subnet should have enough free IP addresses to accommodate the
 * number of nodes in the pool. If the subnet doesn't have enough free IP
 * addresses, the pool will partially allocate compute nodes, and a resize
 * error will occur. The 'MicrosoftAzureBatch' service principal must have the
 * 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role
 * for the specified VNet. The specified subnet must allow communication from
 * the Azure Batch service to be able to schedule tasks on the compute nodes.
 * This can be verified by checking if the specified VNet has any associated
 * Network Security Groups (NSG). If communication to the compute nodes in the
 * specified subnet is denied by an NSG, then the Batch service will set the
 * state of the compute nodes to unusable. This property can only be specified
 * for pools created with a cloudServiceConfiguration.
 * 
 * @member {object} [startTask] A task specified to run on each compute node as
 * it joins the pool. The task runs when the node is added to the pool or when
 * the node is restarted.
 * 
 * @member {string} [startTask.commandLine] The command line does not run under
 * a shell, and therefore cannot take advantage of shell features such as
 * environment variable expansion. If you want to take advantage of such
 * features, you should invoke the shell in the command line, for example using
 * "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [startTask.resourceFiles]
 * 
 * @member {array} [startTask.environmentSettings]
 * 
 * @member {boolean} [startTask.runElevated]
 * 
 * @member {number} [startTask.maxTaskRetryCount] The Batch service retries a
 * task if its exit code is nonzero. Note that this value specifically controls
 * the number of retries. The Batch service will try the task once, and may
 * then retry up to this limit. For example, if the maximum retry count is 3,
 * Batch tries the task up to 4 times (one initial try and 3 retries). If the
 * maximum retry count is 0, the Batch service does not retry the task. If the
 * maximum retry count is -1, the Batch service retries the task without limit.
 * 
 * @member {boolean} [startTask.waitForSuccess] If true and the start task
 * fails on a compute node, the Batch service retries the start task up to its
 * maximum retry count (maxTaskRetryCount). If the task has still not completed
 * successfully after all retries, then the Batch service marks the compute
 * node unusable, and will not schedule tasks to it. This condition can be
 * detected via the node state and scheduling error detail. If false, the Batch
 * service will not wait for the start task to complete. In this case, other
 * tasks can start executing on the compute node while the start task is still
 * running; and even if the start task fails, new tasks will continue to be
 * scheduled on the node. The default is false.
 * 
 * @member {array} [certificateReferences] The list of certificates to be
 * installed on each compute node in the pool. For Windows compute nodes, the
 * Batch service installs the certificates to the specified certificate store
 * and location. For Linux compute nodes, the certificates are stored in a
 * directory inside the task working directory and an environment variable
 * AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this
 * location. For certificates with visibility of remoteuser, a certs directory
 * is created in the user's home directory (e.g., /home/<user-name>/certs)
 * where certificates are placed.
 * 
 * @member {array} [applicationPackageReferences] The list of application
 * packages to be installed on each compute node in the pool. This property is
 * currently not supported on pools created using the
 * virtualMachineConfiguration (IaaS) property.
 * 
 * @member {number} [maxTasksPerNode] The maximum number of tasks that can run
 * concurrently on a single compute node in the pool. The default value is 1.
 * The maximum value of this setting depends on the size of the compute nodes
 * in the pool (the vmSize setting).
 * 
 * @member {object} [taskSchedulingPolicy] How the Batch service distributes
 * tasks between compute nodes in the pool.
 * 
 * @member {string} [taskSchedulingPolicy.nodeFillType] Possible values
 * include: 'spread', 'pack', 'unmapped'
 * 
 * @member {array} [metadata] A list of name-value pairs associated with the
 * pool as metadata. The Batch service does not assign any meaning to metadata;
 * it is solely for the use of user code.
 * 
 */
function PoolAddParameter() {
}

/**
 * Defines the metadata of PoolAddParameter
 *
 * @returns {object} metadata of PoolAddParameter
 *
 */
PoolAddParameter.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'PoolAddParameter',
    type: {
      name: 'Composite',
      className: 'PoolAddParameter',
      modelProperties: {
        id: {
          required: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        vmSize: {
          required: true,
          serializedName: 'vmSize',
          type: {
            name: 'String'
          }
        },
        cloudServiceConfiguration: {
          required: false,
          serializedName: 'cloudServiceConfiguration',
          type: {
            name: 'Composite',
            className: 'CloudServiceConfiguration'
          }
        },
        virtualMachineConfiguration: {
          required: false,
          serializedName: 'virtualMachineConfiguration',
          type: {
            name: 'Composite',
            className: 'VirtualMachineConfiguration'
          }
        },
        resizeTimeout: {
          required: false,
          serializedName: 'resizeTimeout',
          type: {
            name: 'TimeSpan'
          }
        },
        targetDedicated: {
          required: false,
          serializedName: 'targetDedicated',
          type: {
            name: 'Number'
          }
        },
        enableAutoScale: {
          required: false,
          serializedName: 'enableAutoScale',
          type: {
            name: 'Boolean'
          }
        },
        autoScaleFormula: {
          required: false,
          serializedName: 'autoScaleFormula',
          type: {
            name: 'String'
          }
        },
        autoScaleEvaluationInterval: {
          required: false,
          serializedName: 'autoScaleEvaluationInterval',
          type: {
            name: 'TimeSpan'
          }
        },
        enableInterNodeCommunication: {
          required: false,
          serializedName: 'enableInterNodeCommunication',
          type: {
            name: 'Boolean'
          }
        },
        networkConfiguration: {
          required: false,
          serializedName: 'networkConfiguration',
          type: {
            name: 'Composite',
            className: 'NetworkConfiguration'
          }
        },
        startTask: {
          required: false,
          serializedName: 'startTask',
          type: {
            name: 'Composite',
            className: 'StartTask'
          }
        },
        certificateReferences: {
          required: false,
          serializedName: 'certificateReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'CertificateReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'CertificateReference'
                }
            }
          }
        },
        applicationPackageReferences: {
          required: false,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        },
        maxTasksPerNode: {
          required: false,
          serializedName: 'maxTasksPerNode',
          type: {
            name: 'Number'
          }
        },
        taskSchedulingPolicy: {
          required: false,
          serializedName: 'taskSchedulingPolicy',
          type: {
            name: 'Composite',
            className: 'TaskSchedulingPolicy'
          }
        },
        metadata: {
          required: false,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = PoolAddParameter;
