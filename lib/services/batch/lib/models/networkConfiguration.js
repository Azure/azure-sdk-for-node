/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The network configuration for a pool.
 *
 */
class NetworkConfiguration {
  /**
   * Create a NetworkConfiguration.
   * @property {string} [subnetId] The ARM resource identifier of the virtual
   * network subnet which the compute nodes of the pool will join. This is of
   * the form
   * /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
   * The virtual network must be in the same region and subscription as the
   * Azure Batch account. The specified subnet should have enough free IP
   * addresses to accommodate the number of nodes in the pool. If the subnet
   * doesn't have enough free IP addresses, the pool will partially allocate
   * compute nodes, and a resize error will occur. For pools created with
   * virtualMachineConfiguration only ARM virtual networks
   * ('Microsoft.Network/virtualNetworks') are supported, but for pools created
   * with cloudServiceConfiguration both ARM and classic virtual networks are
   * supported. For more details, see:
   * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   * @property {string} [dynamicVNetAssignmentScope] The scope of dynamic vnet
   * assignment. Possible values include: 'none', 'job'
   * @property {object} [endpointConfiguration] The configuration for endpoints
   * on compute nodes in the Batch pool. Pool endpoint configuration is only
   * supported on pools with the virtualMachineConfiguration property.
   * @property {array} [endpointConfiguration.inboundNATPools] The maximum
   * number of inbound NAT pools per Batch pool is 5. If the maximum number of
   * inbound NAT pools is exceeded the request fails with HTTP status code 400.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NetworkConfiguration
   *
   * @returns {object} metadata of NetworkConfiguration
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NetworkConfiguration',
      type: {
        name: 'Composite',
        className: 'NetworkConfiguration',
        modelProperties: {
          subnetId: {
            required: false,
            serializedName: 'subnetId',
            type: {
              name: 'String'
            }
          },
          dynamicVNetAssignmentScope: {
            required: false,
            serializedName: 'dynamicVNetAssignmentScope',
            type: {
              name: 'Enum',
              allowedValues: [ 'none', 'job' ]
            }
          },
          endpointConfiguration: {
            required: false,
            serializedName: 'endpointConfiguration',
            type: {
              name: 'Composite',
              className: 'PoolEndpointConfiguration'
            }
          }
        }
      }
    };
  }
}

module.exports = NetworkConfiguration;
