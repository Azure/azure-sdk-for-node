/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @summary A specification for uploading files from an Azure Batch node to
 * another location after the Batch service has finished executing the task
 * process.
  *
 */
class OutputFile {
  /**
   * Create a OutputFile.
   * @member {string} filePattern A pattern indicating which file(s) to upload.
   * Both relative and absolute paths are supported. Relative paths are
   * relative to the task working directory. The following wildcards are
   * supported: * matches 0 or more characters (for example pattern abc* would
   * match abc or abcdef), ** matches any directory, ? matches any single
   * character, [abc] matches one character in the brackets, and [a-c] matches
   * one character in the range. Brackets can include a negation to match any
   * character not specified (for example [!abc] matches any character but a,
   * b, or c). If a file name starts with "." it is ignored by default but may
   * be matched by specifying it explicitly (for example *.gif will not match
   * .a.gif, but .*.gif will). A simple example: **\*.txt matches any file that
   * does not start in '.' and ends with .txt in the task working directory or
   * any subdirectory. If the filename contains a wildcard character it can be
   * escaped using brackets (for example abc[*] would match a file named abc*).
   * Note that both \ and / are treated as directory separators on Windows, but
   * only / is on Linux. Environment variables (%var% on Windows or $var on
   * Linux) are expanded prior to the pattern being applied.
   * @member {object} destination The destination for the output file(s).
   * @member {object} [destination.container]
   * @member {string} [destination.container.path] If filePattern refers to a
   * specific file (i.e. contains no wildcards), then path is the name of the
   * blob to which to upload that file. If filePattern contains one or more
   * wildcards (and therefore may match multiple files), then path is the name
   * of the blob virtual directory (which is prepended to each blob name) to
   * which to upload the file(s). If omitted, file(s) are uploaded to the root
   * of the container with a blob name matching their file name.
   * @member {string} [destination.container.containerUrl] The URL must include
   * a Shared Access Signature (SAS) granting write permissions to the
   * container.
   * @member {object} uploadOptions Additional options for the upload
   * operation, including under what conditions to perform the upload.
   * @member {string} [uploadOptions.uploadCondition] The default is
   * taskCompletion. Possible values include: 'taskSuccess', 'taskFailure',
   * 'taskCompletion'
   */
  constructor() {
  }

  /**
   * Defines the metadata of OutputFile
   *
   * @returns {object} metadata of OutputFile
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'OutputFile',
      type: {
        name: 'Composite',
        className: 'OutputFile',
        modelProperties: {
          filePattern: {
            required: true,
            serializedName: 'filePattern',
            type: {
              name: 'String'
            }
          },
          destination: {
            required: true,
            serializedName: 'destination',
            type: {
              name: 'Composite',
              className: 'OutputFileDestination'
            }
          },
          uploadOptions: {
            required: true,
            serializedName: 'uploadOptions',
            type: {
              name: 'Composite',
              className: 'OutputFileUploadOptions'
            }
          }
        }
      }
    };
  }
}

module.exports = OutputFile;
