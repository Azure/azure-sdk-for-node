/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CloudPool class.
 * @constructor
 * @summary A pool in the Azure Batch service.
 *
 * @member {string} [id] A string that uniquely identifies the pool within the
 * account. The ID can contain any combination of alphanumeric characters
 * including hyphens and underscores, and cannot contain more than 64
 * characters. It is common to use a GUID for the id.
 * 
 * @member {string} [displayName] The display name for the pool. The display
 * name need not be unique and can contain any Unicode characters up to a
 * maximum length of 1024.
 * 
 * @member {string} [url] The URL of the pool.
 * 
 * @member {string} [eTag] The ETag of the pool. This is an opaque string. You
 * can use it to detect whether the pool has changed between requests. In
 * particular, you can be pass the ETag when updating a pool to specify that
 * your changes should take effect only if nobody else has modified the pool in
 * the meantime.
 * 
 * @member {date} [lastModified] The last modified time of the pool. This is
 * the last time at which the pool level data, such as the targetDedicated or
 * enableAutoscale settings, changed. It does not factor in node-level changes
 * such as a compute node changing state.
 * 
 * @member {date} [creationTime] The creation time of the pool.
 * 
 * @member {string} [state] The current state of the pool. Possible values are:
 * active – The pool is available to run tasks subject to the availability of
 * compute nodes. deleting – The user has requested that the pool be deleted,
 * but the delete operation has not yet completed. upgrading – The user has
 * requested that the operating system of the pool's nodes be upgraded, but the
 * upgrade operation has not yet completed (that is, some nodes in the pool
 * have not yet been upgraded). While upgrading, the pool may be able to run
 * tasks (with reduced capacity) but this is not guaranteed. Possible values
 * include: 'active', 'deleting', 'upgrading'
 * 
 * @member {date} [stateTransitionTime] The time at which the pool entered its
 * current state.
 * 
 * @member {string} [allocationState] Whether the pool is resizing. Possible
 * values are: steady – The pool is not resizing. There are no changes to the
 * number of nodes in the pool in progress. A pool enters this state when it is
 * created and when no operations are being performed on the pool to change the
 * number of dedicated nodes. resizing - The pool is resizing; that is, compute
 * nodes are being added to or removed from the pool. stopping - The pool was
 * resizing, but the user has requested that the resize be stopped, but the
 * stop request has not yet been completed. Possible values include: 'steady',
 * 'resizing', 'stopping'
 * 
 * @member {date} [allocationStateTransitionTime] The time at which the pool
 * entered its current allocation state.
 * 
 * @member {string} [vmSize] The size of virtual machines in the pool. All
 * virtual machines in a pool are the same size. For information about
 * available sizes of virtual machines for Cloud Services pools (pools created
 * with cloudServiceConfiguration), see Sizes for Cloud Services
 * (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
 * Batch supports all Cloud Services VM sizes except ExtraSmall. For
 * information about available VM sizes for pools using images from the Virtual
 * Machines Marketplace (pools created with virtualMachineConfiguration) see
 * Sizes for Virtual Machines (Linux)
 * (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
 * or Sizes for Virtual Machines (Windows)
 * (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
 * Batch supports all Azure VM sizes except STANDARD_A0 and those with premium
 * storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
 * 
 * @member {object} [cloudServiceConfiguration] The cloud service configuration
 * for the pool. This property and virtualMachineConfiguration are mutually
 * exclusive and one of the properties must be specified.
 * 
 * @member {string} [cloudServiceConfiguration.osFamily] Possible values are: 2
 * – OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 – OS Family 3,
 * equivalent to Windows Server 2012. 4 – OS Family 4, equivalent to Windows
 * Server 2012 R2. For more information, see Azure Guest OS Releases
 * (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
 * 
 * @member {string} [cloudServiceConfiguration.targetOSVersion] The default
 * value is * which specifies the latest operating system version for the
 * specified OS family.
 * 
 * @member {string} [cloudServiceConfiguration.currentOSVersion] This may
 * differ from targetOSVersion if the pool state is Upgrading. In this case
 * some virtual machines may be on the targetOSVersion and some may be on the
 * currentOSVersion during the upgrade process. Once all virtual machines have
 * upgraded, currentOSVersion is updated to be the same as targetOSVersion.
 * 
 * @member {object} [virtualMachineConfiguration] The virtual machine
 * configuration for the pool. This property and cloudServiceConfiguration are
 * mutually exclusive and one of the properties must be specified.
 * 
 * @member {object} [virtualMachineConfiguration.imageReference]
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.publisher] For
 * example, Canonical or MicrosoftWindowsServer.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.offer] For
 * example, UbuntuServer or WindowsServer.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.sku] For
 * example, 14.04.0-LTS or 2012-R2-Datacenter.
 * 
 * @member {string} [virtualMachineConfiguration.imageReference.version] A
 * value of 'latest' can be specified to select the latest version of an image.
 * If omitted, the default is 'latest'.
 * 
 * @member {string} [virtualMachineConfiguration.nodeAgentSKUId] The Batch node
 * agent is a program that runs on each node in the pool, and provides the
 * command-and-control interface between the node and the Batch service. There
 * are different implementations of the node agent, known as SKUs, for
 * different operating systems. You must specify a node agent SKU which matches
 * the selected image reference. To get the list of supported node agent SKUs
 * along with their list of verified image references, see the 'List supported
 * node agent SKUs' operation.
 * 
 * @member {object} [virtualMachineConfiguration.windowsConfiguration] This
 * property must not be specified if the imageReference property specifies a
 * Linux OS image.
 * 
 * @member {boolean}
 * [virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates] If
 * omitted, the default value is true.
 * 
 * @member {moment.duration} [resizeTimeout] The timeout for allocation of
 * compute nodes to the pool. This is the timeout for the most recent resize
 * operation. (The initial sizing when the pool is created counts as a resize.)
 * The default value is 15 minutes.
 * 
 * @member {object} [resizeError] Details of any error encountered while
 * performing the last resize on the pool. This property is set only if an
 * error occurred during the last pool resize, and only when the pool
 * allocationState is Steady.
 * 
 * @member {string} [resizeError.code]
 * 
 * @member {string} [resizeError.message]
 * 
 * @member {array} [resizeError.values]
 * 
 * @member {number} [currentDedicated] The number of compute nodes currently in
 * the pool.
 * 
 * @member {number} [targetDedicated] The desired number of compute nodes in
 * the pool. This property is not set if enableAutoScale is true. It is
 * required if enableAutoScale is false.
 * 
 * @member {boolean} [enableAutoScale] Whether the pool size should
 * automatically adjust over time. If true, the autoScaleFormula property must
 * be set. If false, the targetDedicated property must be set.
 * 
 * @member {string} [autoScaleFormula] A formula for the desired number of
 * compute nodes in the pool. This property is set only if the pool
 * automatically scales, i.e. enableAutoScale is true.
 * 
 * @member {moment.duration} [autoScaleEvaluationInterval] The time interval at
 * which to automatically adjust the pool size according to the autoscale
 * formula. This property is set only if the pool automatically scales, i.e.
 * enableAutoScale is true.
 * 
 * @member {object} [autoScaleRun] The results and errors from the last
 * execution of the autoscale formula. This property is set only if the pool
 * automatically scales, i.e. enableAutoScale is true.
 * 
 * @member {date} [autoScaleRun.timestamp]
 * 
 * @member {string} [autoScaleRun.results] Each variable value is returned in
 * the form $variable=value, and variables are separated by semicolons.
 * 
 * @member {object} [autoScaleRun.error]
 * 
 * @member {string} [autoScaleRun.error.code]
 * 
 * @member {string} [autoScaleRun.error.message]
 * 
 * @member {array} [autoScaleRun.error.values]
 * 
 * @member {boolean} [enableInterNodeCommunication] Whether the pool permits
 * direct communication between nodes. This imposes restrictions on which nodes
 * can be assigned to the pool. Specifying this value can reduce the chance of
 * the requested number of nodes to be allocated in the pool.
 * 
 * @member {object} [networkConfiguration] The network configuration for the
 * pool.
 * 
 * @member {string} [networkConfiguration.subnetId] The virtual network must be
 * in the same region and subscription as the Azure Batch account. The
 * specified subnet should have enough free IP addresses to accommodate the
 * number of nodes in the pool. If the subnet doesn't have enough free IP
 * addresses, the pool will partially allocate compute nodes, and a resize
 * error will occur. The 'MicrosoftAzureBatch' service principal must have the
 * 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role
 * for the specified VNet. The specified subnet must allow communication from
 * the Azure Batch service to be able to schedule tasks on the compute nodes.
 * This can be verified by checking if the specified VNet has any associated
 * Network Security Groups (NSG). If communication to the compute nodes in the
 * specified subnet is denied by an NSG, then the Batch service will set the
 * state of the compute nodes to unusable. This property can only be specified
 * for pools created with a cloudServiceConfiguration.
 * 
 * @member {object} [startTask] A task specified to run on each compute node as
 * it joins the pool.
 * 
 * @member {string} [startTask.commandLine] The command line does not run under
 * a shell, and therefore cannot take advantage of shell features such as
 * environment variable expansion. If you want to take advantage of such
 * features, you should invoke the shell in the command line, for example using
 * "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
 * 
 * @member {array} [startTask.resourceFiles]
 * 
 * @member {array} [startTask.environmentSettings]
 * 
 * @member {boolean} [startTask.runElevated]
 * 
 * @member {number} [startTask.maxTaskRetryCount] The Batch service retries a
 * task if its exit code is nonzero. Note that this value specifically controls
 * the number of retries. The Batch service will try the task once, and may
 * then retry up to this limit. For example, if the maximum retry count is 3,
 * Batch tries the task up to 4 times (one initial try and 3 retries). If the
 * maximum retry count is 0, the Batch service does not retry the task. If the
 * maximum retry count is -1, the Batch service retries the task without limit.
 * 
 * @member {boolean} [startTask.waitForSuccess] If true and the start task
 * fails on a compute node, the Batch service retries the start task up to its
 * maximum retry count (maxTaskRetryCount). If the task has still not completed
 * successfully after all retries, then the Batch service marks the compute
 * node unusable, and will not schedule tasks to it. This condition can be
 * detected via the node state and scheduling error detail. If false, the Batch
 * service will not wait for the start task to complete. In this case, other
 * tasks can start executing on the compute node while the start task is still
 * running; and even if the start task fails, new tasks will continue to be
 * scheduled on the node. The default is false.
 * 
 * @member {array} [certificateReferences] The list of certificates to be
 * installed on each compute node in the pool. For Windows compute nodes, the
 * Batch service installs the certificates to the specified certificate store
 * and location. For Linux compute nodes, the certificates are stored in a
 * directory inside the task working directory and an environment variable
 * AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this
 * location. For certificates with visibility of remoteuser, a certs directory
 * is created in the user's home directory (e.g., /home/<user-name>/certs)
 * where certificates are placed.
 * 
 * @member {array} [applicationPackageReferences] The list of application
 * packages to be installed on each compute node in the pool.
 * 
 * @member {number} [maxTasksPerNode] The maximum number of tasks that can run
 * concurrently on a single compute node in the pool.
 * 
 * @member {object} [taskSchedulingPolicy] How the Batch service distributes
 * tasks between compute nodes in the pool.
 * 
 * @member {string} [taskSchedulingPolicy.nodeFillType] Possible values
 * include: 'spread', 'pack', 'unmapped'
 * 
 * @member {array} [metadata] A list of name-value pairs associated with the
 * pool as metadata.
 * 
 * @member {object} [stats] Utilization and resource usage statistics for the
 * entire lifetime of the pool.
 * 
 * @member {string} [stats.url]
 * 
 * @member {date} [stats.startTime]
 * 
 * @member {date} [stats.lastUpdateTime]
 * 
 * @member {object} [stats.usageStats]
 * 
 * @member {date} [stats.usageStats.startTime]
 * 
 * @member {date} [stats.usageStats.lastUpdateTime]
 * 
 * @member {moment.duration} [stats.usageStats.dedicatedCoreTime]
 * 
 * @member {object} [stats.resourceStats]
 * 
 * @member {date} [stats.resourceStats.startTime]
 * 
 * @member {date} [stats.resourceStats.lastUpdateTime]
 * 
 * @member {number} [stats.resourceStats.avgCPUPercentage]
 * 
 * @member {number} [stats.resourceStats.avgMemoryGiB]
 * 
 * @member {number} [stats.resourceStats.peakMemoryGiB]
 * 
 * @member {number} [stats.resourceStats.avgDiskGiB]
 * 
 * @member {number} [stats.resourceStats.peakDiskGiB]
 * 
 * @member {number} [stats.resourceStats.diskReadIOps]
 * 
 * @member {number} [stats.resourceStats.diskWriteIOps]
 * 
 * @member {number} [stats.resourceStats.diskReadGiB]
 * 
 * @member {number} [stats.resourceStats.diskWriteGiB]
 * 
 * @member {number} [stats.resourceStats.networkReadGiB]
 * 
 * @member {number} [stats.resourceStats.networkWriteGiB]
 * 
 */
function CloudPool() {
}

/**
 * Defines the metadata of CloudPool
 *
 * @returns {object} metadata of CloudPool
 *
 */
CloudPool.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CloudPool',
    type: {
      name: 'Composite',
      className: 'CloudPool',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        url: {
          required: false,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        eTag: {
          required: false,
          serializedName: 'eTag',
          type: {
            name: 'String'
          }
        },
        lastModified: {
          required: false,
          serializedName: 'lastModified',
          type: {
            name: 'DateTime'
          }
        },
        creationTime: {
          required: false,
          serializedName: 'creationTime',
          type: {
            name: 'DateTime'
          }
        },
        state: {
          required: false,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'deleting', 'upgrading' ]
          }
        },
        stateTransitionTime: {
          required: false,
          serializedName: 'stateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        allocationState: {
          required: false,
          serializedName: 'allocationState',
          type: {
            name: 'Enum',
            allowedValues: [ 'steady', 'resizing', 'stopping' ]
          }
        },
        allocationStateTransitionTime: {
          required: false,
          serializedName: 'allocationStateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        vmSize: {
          required: false,
          serializedName: 'vmSize',
          type: {
            name: 'String'
          }
        },
        cloudServiceConfiguration: {
          required: false,
          serializedName: 'cloudServiceConfiguration',
          type: {
            name: 'Composite',
            className: 'CloudServiceConfiguration'
          }
        },
        virtualMachineConfiguration: {
          required: false,
          serializedName: 'virtualMachineConfiguration',
          type: {
            name: 'Composite',
            className: 'VirtualMachineConfiguration'
          }
        },
        resizeTimeout: {
          required: false,
          serializedName: 'resizeTimeout',
          type: {
            name: 'TimeSpan'
          }
        },
        resizeError: {
          required: false,
          serializedName: 'resizeError',
          type: {
            name: 'Composite',
            className: 'ResizeError'
          }
        },
        currentDedicated: {
          required: false,
          serializedName: 'currentDedicated',
          type: {
            name: 'Number'
          }
        },
        targetDedicated: {
          required: false,
          serializedName: 'targetDedicated',
          type: {
            name: 'Number'
          }
        },
        enableAutoScale: {
          required: false,
          serializedName: 'enableAutoScale',
          type: {
            name: 'Boolean'
          }
        },
        autoScaleFormula: {
          required: false,
          serializedName: 'autoScaleFormula',
          type: {
            name: 'String'
          }
        },
        autoScaleEvaluationInterval: {
          required: false,
          serializedName: 'autoScaleEvaluationInterval',
          type: {
            name: 'TimeSpan'
          }
        },
        autoScaleRun: {
          required: false,
          serializedName: 'autoScaleRun',
          type: {
            name: 'Composite',
            className: 'AutoScaleRun'
          }
        },
        enableInterNodeCommunication: {
          required: false,
          serializedName: 'enableInterNodeCommunication',
          type: {
            name: 'Boolean'
          }
        },
        networkConfiguration: {
          required: false,
          serializedName: 'networkConfiguration',
          type: {
            name: 'Composite',
            className: 'NetworkConfiguration'
          }
        },
        startTask: {
          required: false,
          serializedName: 'startTask',
          type: {
            name: 'Composite',
            className: 'StartTask'
          }
        },
        certificateReferences: {
          required: false,
          serializedName: 'certificateReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'CertificateReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'CertificateReference'
                }
            }
          }
        },
        applicationPackageReferences: {
          required: false,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        },
        maxTasksPerNode: {
          required: false,
          serializedName: 'maxTasksPerNode',
          type: {
            name: 'Number'
          }
        },
        taskSchedulingPolicy: {
          required: false,
          serializedName: 'taskSchedulingPolicy',
          type: {
            name: 'Composite',
            className: 'TaskSchedulingPolicy'
          }
        },
        metadata: {
          required: false,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        },
        stats: {
          required: false,
          serializedName: 'stats',
          type: {
            name: 'Composite',
            className: 'PoolStatistics'
          }
        }
      }
    }
  };
};

module.exports = CloudPool;
