/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Contains information about the execution of a Job Release task on a
 * compute node.
  *
 */
class JobReleaseTaskExecutionInformation {
  /**
   * Create a JobReleaseTaskExecutionInformation.
   * @property {date} startTime The time at which the task started running. If
   * the task has been restarted or retried, this is the most recent time at
   * which the task started running.
   * @property {date} [endTime] The time at which the Job Release task
   * completed. This property is set only if the task is in the Completed
   * state.
   * @property {string} state The current state of the Job Release task on the
   * compute node. Possible values include: 'running', 'completed'
   * @property {string} [taskRootDirectory] The root directory of the Job
   * Release task on the compute node. You can use this path to retrieve files
   * created by the task, such as log files.
   * @property {string} [taskRootDirectoryUrl] The URL to the root directory of
   * the Job Release task on the compute node.
   * @property {number} [exitCode] The exit code of the program specified on
   * the task command line. This parameter is returned only if the task is in
   * the completed state. The exit code for a process reflects the specific
   * convention implemented by the application developer for that process. If
   * you use the exit code value to make decisions in your code, be sure that
   * you know the exit code convention used by the application process. Note
   * that the exit code may also be generated by the compute node operating
   * system, such as when a process is forcibly terminated.
   * @property {object} [containerInfo] Information about the container under
   * which the task is executing. This property is set only if the task runs in
   * a container context.
   * @property {string} [containerInfo.containerId]
   * @property {string} [containerInfo.state] This is the state of the
   * container according to the Docker service. It is equivalent to the status
   * field returned by "docker inspect".
   * @property {string} [containerInfo.error] This is the detailed error string
   * from the Docker service, if available. It is equivalent to the error field
   * returned by "docker inspect".
   * @property {object} [failureInfo] Information describing the task failure,
   * if any. This property is set only if the task is in the completed state
   * and encountered a failure.
   * @property {string} [failureInfo.category] Possible values include:
   * 'userError', 'serverError'
   * @property {string} [failureInfo.code]
   * @property {string} [failureInfo.message]
   * @property {array} [failureInfo.details]
   * @property {string} [result] The result of the task execution. If the value
   * is 'failed', then the details of the failure can be found in the
   * failureInfo property. Possible values include: 'success', 'failure'
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobReleaseTaskExecutionInformation
   *
   * @returns {object} metadata of JobReleaseTaskExecutionInformation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobReleaseTaskExecutionInformation',
      type: {
        name: 'Composite',
        className: 'JobReleaseTaskExecutionInformation',
        modelProperties: {
          startTime: {
            required: true,
            serializedName: 'startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            serializedName: 'endTime',
            type: {
              name: 'DateTime'
            }
          },
          state: {
            required: true,
            serializedName: 'state',
            type: {
              name: 'Enum',
              allowedValues: [ 'running', 'completed' ]
            }
          },
          taskRootDirectory: {
            required: false,
            serializedName: 'taskRootDirectory',
            type: {
              name: 'String'
            }
          },
          taskRootDirectoryUrl: {
            required: false,
            serializedName: 'taskRootDirectoryUrl',
            type: {
              name: 'String'
            }
          },
          exitCode: {
            required: false,
            serializedName: 'exitCode',
            type: {
              name: 'Number'
            }
          },
          containerInfo: {
            required: false,
            serializedName: 'containerInfo',
            type: {
              name: 'Composite',
              className: 'TaskContainerExecutionInformation'
            }
          },
          failureInfo: {
            required: false,
            serializedName: 'failureInfo',
            type: {
              name: 'Composite',
              className: 'TaskFailureInformation'
            }
          },
          result: {
            required: false,
            serializedName: 'result',
            type: {
              name: 'Enum',
              allowedValues: [ 'success', 'failure' ]
            }
          }
        }
      }
    };
  }
}

module.exports = JobReleaseTaskExecutionInformation;
