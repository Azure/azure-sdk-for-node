/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the PoolStatistics class.
 * @constructor
 * Contains utilization and resource usage statistics for the lifetime of a
 * pool.
 * @member {string} url Gets or sets the URL for the statistics.
 * 
 * @member {date} startTime Gets or sets the start time of the time range
 * covered by the statistics.
 * 
 * @member {date} lastUpdateTime Gets or sets the time at which the statistics
 * were last updated. All statistics are limited to the range between
 * startTime and lastUpdateTime.
 * 
 * @member {object} [usageStats] Gets or sets statistics related to pool usage
 * information, such as the amount of core-time used.
 * 
 * @member {date} [usageStats.startTime] Gets or sets the start time of the
 * time range covered by the statistics.
 * 
 * @member {date} [usageStats.lastUpdateTime] Gets or sets the time at which
 * the statistics were last updated. All statistics are limited to the range
 * between startTime and lastUpdateTime.
 * 
 * @member {moment.duration} [usageStats.dedicatedCoreTime] Gets or sets the
 * aggregated wall-clock time of the dedicated compute node cores being part
 * of the pool.
 * 
 * @member {object} [resourceStats] Gets or sets statistics related to
 * resource consumption by compute nodes in the pool.
 * 
 * @member {date} [resourceStats.startTime] Gets or sets the start time of the
 * time range covered by the statistics.
 * 
 * @member {date} [resourceStats.lastUpdateTime] Gets or sets the time at
 * which the statistics were last updated. All statistics are limited to the
 * range between startTime and lastUpdateTime.
 * 
 * @member {number} [resourceStats.avgCPUPercentage] Gets or sets the average
 * CPU usage across all nodes in the pool (percentage per node).
 * 
 * @member {number} [resourceStats.avgMemoryGiB] Gets or sets the average
 * memory usage in GiB across all nodes in the pool.
 * 
 * @member {number} [resourceStats.peakMemoryGiB] Gets or sets the peak memory
 * usage in GiB across all nodes in the pool.
 * 
 * @member {number} [resourceStats.avgDiskGiB] Gets or sets the average used
 * disk space in GiB across all nodes in the pool.
 * 
 * @member {number} [resourceStats.peakDiskGiB] Gets or sets the peak used
 * disk space in GiB across all nodes in the pool.
 * 
 * @member {number} [resourceStats.diskReadIOps] Gets or sets the total number
 * of disk read operations across all nodes in the pool.
 * 
 * @member {number} [resourceStats.diskWriteIOps] Gets or sets the total
 * number of disk write operations across all nodes in the pool.
 * 
 * @member {number} [resourceStats.diskReadGiB] Gets or sets the total amount
 * of data in GiB of disk reads across all nodes in the pool.
 * 
 * @member {number} [resourceStats.diskWriteGiB] Gets or sets the total amount
 * of data in GiB of disk writes across all nodes in the pool.
 * 
 * @member {number} [resourceStats.networkReadGiB] Gets or sets the total
 * amount of data in GiB of network reads across all nodes in the pool.
 * 
 * @member {number} [resourceStats.networkWriteGiB] Gets or sets the total
 * amount of data in GiB of network writes across all nodes in the pool.
 * 
 */
function PoolStatistics() {
}

/**
 * Defines the metadata of PoolStatistics
 *
 * @returns {object} metadata of PoolStatistics
 *
 */
PoolStatistics.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'PoolStatistics',
    type: {
      name: 'Composite',
      className: 'PoolStatistics',
      modelProperties: {
        url: {
          required: true,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        startTime: {
          required: true,
          serializedName: 'startTime',
          type: {
            name: 'DateTime'
          }
        },
        lastUpdateTime: {
          required: true,
          serializedName: 'lastUpdateTime',
          type: {
            name: 'DateTime'
          }
        },
        usageStats: {
          required: false,
          serializedName: 'usageStats',
          type: {
            name: 'Composite',
            className: 'UsageStatistics'
          }
        },
        resourceStats: {
          required: false,
          serializedName: 'resourceStats',
          type: {
            name: 'Composite',
            className: 'ResourceStatistics'
          }
        }
      }
    }
  };
};

module.exports = PoolStatistics;
