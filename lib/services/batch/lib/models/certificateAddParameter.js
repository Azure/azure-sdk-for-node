/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary A certificate that can be installed on compute nodes and can be
 * used to authenticate operations on the machine.
  *
 */
class CertificateAddParameter {
  /**
   * Create a CertificateAddParameter.
   * @member {string} thumbprint The X.509 thumbprint of the certificate. This
   * is a sequence of up to 40 hex digits (it may include spaces but these are
   * removed).
   * @member {string} thumbprintAlgorithm The algorithm used to derive the
   * thumbprint. This must be sha1.
   * @member {string} data The base64-encoded contents of the certificate. The
   * maximum size is 10KB.
   * @member {string} [certificateFormat] The format of the certificate data.
   * Possible values include: 'pfx', 'cer'
   * @member {string} [password] The password to access the certificate's
   * private key. This is required if the certificate format is pfx. It should
   * be omitted if the certificate format is cer.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CertificateAddParameter
   *
   * @returns {object} metadata of CertificateAddParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CertificateAddParameter',
      type: {
        name: 'Composite',
        className: 'CertificateAddParameter',
        modelProperties: {
          thumbprint: {
            required: true,
            serializedName: 'thumbprint',
            type: {
              name: 'String'
            }
          },
          thumbprintAlgorithm: {
            required: true,
            serializedName: 'thumbprintAlgorithm',
            type: {
              name: 'String'
            }
          },
          data: {
            required: true,
            serializedName: 'data',
            type: {
              name: 'String'
            }
          },
          certificateFormat: {
            required: false,
            serializedName: 'certificateFormat',
            type: {
              name: 'Enum',
              allowedValues: [ 'pfx', 'cer' ]
            }
          },
          password: {
            required: false,
            serializedName: 'password',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = CertificateAddParameter;
