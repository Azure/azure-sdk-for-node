/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @summary Specifies any dependencies of a task. Any task that is explicitly
 * specified or within a dependency range must complete before the dependant
 * task will be scheduled.
  *
 */
class TaskDependencies {
  /**
   * Create a TaskDependencies.
   * @member {array} [taskIds] The list of task IDs that this task depends on.
   * All tasks in this list must complete successfully before the dependent
   * task can be scheduled. The taskIds collection is limited to 64000
   * characters total (i.e. the combined length of all task IDs). If the
   * taskIds collection exceeds the maximum length, the Add Task request fails
   * with error code TaskDependencyListTooLong. In this case consider using
   * task ID ranges instead.
   * @member {array} [taskIdRanges] The list of task ID ranges that this task
   * depends on. All tasks in all ranges must complete successfully before the
   * dependent task can be scheduled.
   */
  constructor() {
  }

  /**
   * Defines the metadata of TaskDependencies
   *
   * @returns {object} metadata of TaskDependencies
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TaskDependencies',
      type: {
        name: 'Composite',
        className: 'TaskDependencies',
        modelProperties: {
          taskIds: {
            required: false,
            serializedName: 'taskIds',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          taskIdRanges: {
            required: false,
            serializedName: 'taskIdRanges',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TaskIdRangeElementType',
                  type: {
                    name: 'Composite',
                    className: 'TaskIdRange'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = TaskDependencies;
