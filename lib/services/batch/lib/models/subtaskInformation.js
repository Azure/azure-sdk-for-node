/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the SubtaskInformation class.
 * @constructor
 * @summary Information about an Azure Batch subtask.
 *
 * @member {number} [id] The ID of the subtask.
 * 
 * @member {object} [nodeInfo] Information about the compute node on which the
 * subtask ran.
 * 
 * @member {string} [nodeInfo.affinityId]
 * 
 * @member {string} [nodeInfo.nodeUrl]
 * 
 * @member {string} [nodeInfo.poolId]
 * 
 * @member {string} [nodeInfo.nodeId]
 * 
 * @member {string} [nodeInfo.taskRootDirectory]
 * 
 * @member {string} [nodeInfo.taskRootDirectoryUrl]
 * 
 * @member {date} [startTime] The time at which the subtask started running. If
 * the subtask has been restarted or retried, this is the most recent time at
 * which the subtask started running.
 * 
 * @member {date} [endTime] The time at which the subtask completed. This
 * property is set only if the subtask is in the Completed state.
 * 
 * @member {number} [exitCode] The exit code of the program specified on the
 * subtask command line. This property is set only if the subtask is in the
 * completed state. In general, the exit code for a process reflects the
 * specific convention implemented by the application developer for that
 * process. If you use the exit code value to make decisions in your code, be
 * sure that you know the exit code convention used by the application process.
 * However, if the Batch service terminates the subtask (due to timeout, or
 * user termination via the API) you may see an operating system-defined exit
 * code.
 * 
 * @member {object} [schedulingError] Details of any error encountered
 * scheduling the subtask.
 * 
 * @member {string} [schedulingError.category] Possible values include:
 * 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [schedulingError.code]
 * 
 * @member {string} [schedulingError.message]
 * 
 * @member {array} [schedulingError.details]
 * 
 * @member {string} [state] The current state of the subtask. Possible values
 * include: 'active', 'preparing', 'running', 'completed'
 * 
 * @member {date} [stateTransitionTime] The time at which the subtask entered
 * its current state.
 * 
 * @member {string} [previousState] The previous state of the subtask. This
 * property is not set if the subtask is in its initial running state. Possible
 * values include: 'active', 'preparing', 'running', 'completed'
 * 
 * @member {date} [previousStateTransitionTime] The time at which the subtask
 * entered its previous state. This property is not set if the subtask is in
 * its initial running state.
 * 
 */
function SubtaskInformation() {
}

/**
 * Defines the metadata of SubtaskInformation
 *
 * @returns {object} metadata of SubtaskInformation
 *
 */
SubtaskInformation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'SubtaskInformation',
    type: {
      name: 'Composite',
      className: 'SubtaskInformation',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'Number'
          }
        },
        nodeInfo: {
          required: false,
          serializedName: 'nodeInfo',
          type: {
            name: 'Composite',
            className: 'ComputeNodeInformation'
          }
        },
        startTime: {
          required: false,
          serializedName: 'startTime',
          type: {
            name: 'DateTime'
          }
        },
        endTime: {
          required: false,
          serializedName: 'endTime',
          type: {
            name: 'DateTime'
          }
        },
        exitCode: {
          required: false,
          serializedName: 'exitCode',
          type: {
            name: 'Number'
          }
        },
        schedulingError: {
          required: false,
          serializedName: 'schedulingError',
          type: {
            name: 'Composite',
            className: 'TaskSchedulingError'
          }
        },
        state: {
          required: false,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
          }
        },
        stateTransitionTime: {
          required: false,
          serializedName: 'stateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        previousState: {
          required: false,
          serializedName: 'previousState',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
          }
        },
        previousStateTransitionTime: {
          required: false,
          serializedName: 'previousStateTransitionTime',
          type: {
            name: 'DateTime'
          }
        }
      }
    }
  };
};

module.exports = SubtaskInformation;
