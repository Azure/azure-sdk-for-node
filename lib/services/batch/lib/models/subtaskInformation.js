/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @summary Information about an Azure Batch subtask.
  *
 */
class SubtaskInformation {
  /**
   * Create a SubtaskInformation.
   * @member {number} [id] The ID of the subtask.
   * @member {object} [nodeInfo] Information about the compute node on which
   * the subtask ran.
   * @member {string} [nodeInfo.affinityId]
   * @member {string} [nodeInfo.nodeUrl]
   * @member {string} [nodeInfo.poolId]
   * @member {string} [nodeInfo.nodeId]
   * @member {string} [nodeInfo.taskRootDirectory]
   * @member {string} [nodeInfo.taskRootDirectoryUrl]
   * @member {date} [startTime] The time at which the subtask started running.
   * If the subtask has been restarted or retried, this is the most recent time
   * at which the subtask started running.
   * @member {date} [endTime] The time at which the subtask completed. This
   * property is set only if the subtask is in the Completed state.
   * @member {number} [exitCode] The exit code of the program specified on the
   * subtask command line. This property is set only if the subtask is in the
   * completed state. In general, the exit code for a process reflects the
   * specific convention implemented by the application developer for that
   * process. If you use the exit code value to make decisions in your code, be
   * sure that you know the exit code convention used by the application
   * process. However, if the Batch service terminates the subtask (due to
   * timeout, or user termination via the API) you may see an operating
   * system-defined exit code.
   * @member {object} [containerInfo] Information about the container under
   * which the task is executing. This property is set only if the task runs in
   * a container context.
   * @member {string} [containerInfo.containerId]
   * @member {string} [containerInfo.state] This is the state of the container
   * according to the Docker service. It is equivalent to the status field
   * returned by "docker inspect".
   * @member {string} [containerInfo.error] This is the detailed error string
   * from the Docker service, if available. It is equivalent to the error field
   * returned by "docker inspect".
   * @member {object} [failureInfo] Information describing the task failure, if
   * any. This property is set only if the task is in the completed state and
   * encountered a failure.
   * @member {string} [failureInfo.category] Possible values include:
   * 'userError', 'serverError'
   * @member {string} [failureInfo.code]
   * @member {string} [failureInfo.message]
   * @member {array} [failureInfo.details]
   * @member {string} [state] The current state of the subtask. Possible values
   * include: 'preparing', 'running', 'completed'
   * @member {date} [stateTransitionTime] The time at which the subtask entered
   * its current state.
   * @member {string} [previousState] The previous state of the subtask. This
   * property is not set if the subtask is in its initial running state.
   * Possible values include: 'preparing', 'running', 'completed'
   * @member {date} [previousStateTransitionTime] The time at which the subtask
   * entered its previous state. This property is not set if the subtask is in
   * its initial running state.
   * @member {string} [result] The result of the task execution. If the value
   * is 'failed', then the details of the failure can be found in the
   * failureInfo property. Possible values include: 'success', 'failure'
   */
  constructor() {
  }

  /**
   * Defines the metadata of SubtaskInformation
   *
   * @returns {object} metadata of SubtaskInformation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SubtaskInformation',
      type: {
        name: 'Composite',
        className: 'SubtaskInformation',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'Number'
            }
          },
          nodeInfo: {
            required: false,
            serializedName: 'nodeInfo',
            type: {
              name: 'Composite',
              className: 'ComputeNodeInformation'
            }
          },
          startTime: {
            required: false,
            serializedName: 'startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            serializedName: 'endTime',
            type: {
              name: 'DateTime'
            }
          },
          exitCode: {
            required: false,
            serializedName: 'exitCode',
            type: {
              name: 'Number'
            }
          },
          containerInfo: {
            required: false,
            serializedName: 'containerInfo',
            type: {
              name: 'Composite',
              className: 'TaskContainerExecutionInformation'
            }
          },
          failureInfo: {
            required: false,
            serializedName: 'failureInfo',
            type: {
              name: 'Composite',
              className: 'TaskFailureInformation'
            }
          },
          state: {
            required: false,
            serializedName: 'state',
            type: {
              name: 'Enum',
              allowedValues: [ 'preparing', 'running', 'completed' ]
            }
          },
          stateTransitionTime: {
            required: false,
            serializedName: 'stateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          previousState: {
            required: false,
            serializedName: 'previousState',
            type: {
              name: 'Enum',
              allowedValues: [ 'preparing', 'running', 'completed' ]
            }
          },
          previousStateTransitionTime: {
            required: false,
            serializedName: 'previousStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          result: {
            required: false,
            serializedName: 'result',
            type: {
              name: 'Enum',
              allowedValues: [ 'success', 'failure' ]
            }
          }
        }
      }
    };
  }
}

module.exports = SubtaskInformation;
