/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the NodeFile class.
 * @constructor
 * Information about a file or directory on a compute node.
 *
 * @member {string} [name] The file path.
 * 
 * @member {string} [url] The URL of the file.
 * 
 * @member {boolean} [isDirectory] Whether the object represents a directory.
 * 
 * @member {object} [properties] The file properties.
 * 
 * @member {date} [properties.creationTime] The file creation time.
 * 
 * @member {date} [properties.lastModified] The time at which the file was
 * last modified.
 * 
 * @member {number} [properties.contentLength] The length of the file.
 * 
 * @member {string} [properties.contentType] The content type of the file.
 * 
 * @member {string} [properties.fileMode] The file mode attribute in octal
 * format. This property will be returned only from a Linux compute node.
 * 
 */
function NodeFile() {
}

/**
 * Defines the metadata of NodeFile
 *
 * @returns {object} metadata of NodeFile
 *
 */
NodeFile.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'NodeFile',
    type: {
      name: 'Composite',
      className: 'NodeFile',
      modelProperties: {
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        url: {
          required: false,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        isDirectory: {
          required: false,
          serializedName: 'isDirectory',
          type: {
            name: 'Boolean'
          }
        },
        properties: {
          required: false,
          serializedName: 'properties',
          type: {
            name: 'Composite',
            className: 'FileProperties'
          }
        }
      }
    }
  };
};

module.exports = NodeFile;
