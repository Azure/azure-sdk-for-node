/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary The configuration for Compute Nodes in a Pool based on the Azure
 * Virtual Machines infrastructure.
  *
 */
class VirtualMachineConfiguration {
  /**
   * Create a VirtualMachineConfiguration.
   * @property {object} imageReference A reference to the Azure Virtual
   * Machines Marketplace Image or the custom Virtual Machine Image to use.
   * @property {string} [imageReference.publisher] For example, Canonical or
   * MicrosoftWindowsServer.
   * @property {string} [imageReference.offer] For example, UbuntuServer or
   * WindowsServer.
   * @property {string} [imageReference.sku] For example, 18.04-LTS or
   * 2019-Datacenter.
   * @property {string} [imageReference.version] A value of 'latest' can be
   * specified to select the latest version of an Image. If omitted, the
   * default is 'latest'.
   * @property {string} [imageReference.virtualMachineImageId] This property is
   * mutually exclusive with other ImageReference properties. The Shared Image
   * Gallery Image must have replicas in the same region and must be in the
   * same subscription as the Azure Batch account. If the image version is not
   * specified in the imageId, the latest version will be used. For information
   * about the firewall settings for the Batch Compute Node agent to
   * communicate with the Batch service see
   * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
   * @property {string} nodeAgentSKUId The SKU of the Batch Compute Node agent
   * to be provisioned on Compute Nodes in the Pool. The Batch Compute Node
   * agent is a program that runs on each Compute Node in the Pool, and
   * provides the command-and-control interface between the Compute Node and
   * the Batch service. There are different implementations of the Compute Node
   * agent, known as SKUs, for different operating systems. You must specify a
   * Compute Node agent SKU which matches the selected Image reference. To get
   * the list of supported Compute Node agent SKUs along with their list of
   * verified Image references, see the 'List supported Compute Node agent
   * SKUs' operation.
   * @property {object} [windowsConfiguration] Windows operating system
   * settings on the virtual machine. This property must not be specified if
   * the imageReference property specifies a Linux OS Image.
   * @property {boolean} [windowsConfiguration.enableAutomaticUpdates] If
   * omitted, the default value is true.
   * @property {array} [dataDisks] The configuration for data disks attached to
   * the Compute Nodes in the Pool. This property must be specified if the
   * Compute Nodes in the Pool need to have empty data disks attached to them.
   * This cannot be updated. Each Compute Node gets its own disk (the disk is
   * not a file share). Existing disks cannot be attached, each attached disk
   * is empty. When the Compute Node is removed from the Pool, the disk and all
   * data associated with it is also deleted. The disk is not formatted after
   * being attached, it must be formatted before use - for more information see
   * https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux
   * and
   * https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
   * @property {string} [licenseType] The type of on-premises license to be
   * used when deploying the operating system. This only applies to Images that
   * contain the Windows operating system, and should only be used when you
   * hold valid on-premises licenses for the Compute Nodes which will be
   * deployed. If omitted, no on-premises licensing discount is applied. Values
   * are:
   *
   * Windows_Server - The on-premises license is for Windows Server.
   * Windows_Client - The on-premises license is for Windows Client.
   * @property {object} [containerConfiguration] The container configuration
   * for the Pool. If specified, setup is performed on each Compute Node in the
   * Pool to allow Tasks to run in containers. All regular Tasks and Job
   * manager Tasks run on this Pool must specify the containerSettings
   * property, and all other Tasks may specify it.
   * @property {array} [containerConfiguration.containerImageNames] This is the
   * full Image reference, as would be specified to "docker pull". An Image
   * will be sourced from the default Docker registry unless the Image is fully
   * qualified with an alternative registry.
   * @property {array} [containerConfiguration.containerRegistries] If any
   * Images must be downloaded from a private registry which requires
   * credentials, then those credentials must be provided here.
   * @property {object} [diskEncryptionConfiguration] The disk encryption
   * configuration for the pool. If specified, encryption is performed on each
   * node in the pool during node provisioning.
   * @property {array} [diskEncryptionConfiguration.targets] If omitted, no
   * disks on the compute nodes in the pool will be encrypted. On Linux pool,
   * only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and
   * "TemporaryDisk" must be specified.
   */
  constructor() {
  }

  /**
   * Defines the metadata of VirtualMachineConfiguration
   *
   * @returns {object} metadata of VirtualMachineConfiguration
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VirtualMachineConfiguration',
      type: {
        name: 'Composite',
        className: 'VirtualMachineConfiguration',
        modelProperties: {
          imageReference: {
            required: true,
            serializedName: 'imageReference',
            type: {
              name: 'Composite',
              className: 'ImageReference'
            }
          },
          nodeAgentSKUId: {
            required: true,
            serializedName: 'nodeAgentSKUId',
            type: {
              name: 'String'
            }
          },
          windowsConfiguration: {
            required: false,
            serializedName: 'windowsConfiguration',
            type: {
              name: 'Composite',
              className: 'WindowsConfiguration'
            }
          },
          dataDisks: {
            required: false,
            serializedName: 'dataDisks',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DataDiskElementType',
                  type: {
                    name: 'Composite',
                    className: 'DataDisk'
                  }
              }
            }
          },
          licenseType: {
            required: false,
            serializedName: 'licenseType',
            type: {
              name: 'String'
            }
          },
          containerConfiguration: {
            required: false,
            serializedName: 'containerConfiguration',
            type: {
              name: 'Composite',
              className: 'ContainerConfiguration'
            }
          },
          diskEncryptionConfiguration: {
            required: false,
            serializedName: 'diskEncryptionConfiguration',
            type: {
              name: 'Composite',
              className: 'DiskEncryptionConfiguration'
            }
          }
        }
      }
    };
  }
}

module.exports = VirtualMachineConfiguration;
