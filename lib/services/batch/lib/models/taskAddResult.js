/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Result for a single task added as part of an add task collection
 * operation.
  *
 */
class TaskAddResult {
  /**
   * Create a TaskAddResult.
   * @property {string} status The status of the add task request. Possible
   * values include: 'success', 'clientError', 'serverError'
   * @property {string} taskId The ID of the task for which this is the result.
   * @property {string} [eTag] The ETag of the task, if the task was
   * successfully added. You can use this to detect whether the task has
   * changed between requests. In particular, you can be pass the ETag with an
   * Update Task request to specify that your changes should take effect only
   * if nobody else has modified the job in the meantime.
   * @property {date} [lastModified] The last modified time of the task.
   * @property {string} [location] The URL of the task, if the task was
   * successfully added.
   * @property {object} [error] The error encountered while attempting to add
   * the task.
   * @property {string} [error.code]
   * @property {object} [error.message]
   * @property {string} [error.message.lang]
   * @property {string} [error.message.value]
   * @property {array} [error.values]
   */
  constructor() {
  }

  /**
   * Defines the metadata of TaskAddResult
   *
   * @returns {object} metadata of TaskAddResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TaskAddResult',
      type: {
        name: 'Composite',
        className: 'TaskAddResult',
        modelProperties: {
          status: {
            required: true,
            serializedName: 'status',
            type: {
              name: 'Enum',
              allowedValues: [ 'success', 'clientError', 'serverError' ]
            }
          },
          taskId: {
            required: true,
            serializedName: 'taskId',
            type: {
              name: 'String'
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          },
          lastModified: {
            required: false,
            serializedName: 'lastModified',
            type: {
              name: 'DateTime'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          error: {
            required: false,
            serializedName: 'error',
            type: {
              name: 'Composite',
              className: 'BatchError'
            }
          }
        }
      }
    };
  }
}

module.exports = TaskAddResult;
