/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the PoolUpdatePropertiesParameter class.
 * @constructor
 * Parameters for a CloudPoolOperations.UpdateProperties request.
 * @member {object} [startTask] Sets a task to run on each compute node as it
 * joins the pool. If omitted, any existing start task is removed from the
 * pool.
 * 
 * @member {string} [startTask.commandLine] Gets or sets the command line of
 * the start task.
 * 
 * @member {array} [startTask.resourceFiles] Gets or sets a list of files that
 * Batch will download to the compute node before running the command line.
 * 
 * @member {array} [startTask.environmentSettings] Gets or sets a list of
 * environment variable settings for the start task.
 * 
 * @member {boolean} [startTask.runElevated] Gets or sets whether to run the
 * start task in elevated mode. The default value is false.
 * 
 * @member {number} [startTask.maxTaskRetryCount] Gets or sets the maximum
 * number of times the task may be retried.
 * 
 * @member {boolean} [startTask.waitForSuccess] Gets or sets whether the Batch
 * Service should wait for the start task to complete successfully (that is,
 * to exit with exit code 0) before scheduling any tasks on the compute node.
 * 
 * @member {array} certificateReferences Sets a list of certificates to be
 * installed on each compute node in the pool. If you specify an empty
 * collection, any existing certificate references are removed from the pool.
 * 
 * @member {array} applicationPackageReferences Sets a list of application
 * packages to be installed on each compute node in the pool. If you specify
 * an empty collection, any existing application packages references are
 * removed from the pool.
 * 
 * @member {array} metadata Sets a list of name-value pairs associated with
 * the pool as metadata. If you specify an empty collection, any existing
 * metadata is removed from the pool.
 * 
 */
function PoolUpdatePropertiesParameter() {
}

/**
 * Defines the metadata of PoolUpdatePropertiesParameter
 *
 * @returns {object} metadata of PoolUpdatePropertiesParameter
 *
 */
PoolUpdatePropertiesParameter.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'PoolUpdatePropertiesParameter',
    type: {
      name: 'Composite',
      className: 'PoolUpdatePropertiesParameter',
      modelProperties: {
        startTask: {
          required: false,
          serializedName: 'startTask',
          type: {
            name: 'Composite',
            className: 'StartTask'
          }
        },
        certificateReferences: {
          required: true,
          serializedName: 'certificateReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'CertificateReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'CertificateReference'
                }
            }
          }
        },
        applicationPackageReferences: {
          required: true,
          serializedName: 'applicationPackageReferences',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationPackageReferenceElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationPackageReference'
                }
            }
          }
        },
        metadata: {
          required: true,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = PoolUpdatePropertiesParameter;
