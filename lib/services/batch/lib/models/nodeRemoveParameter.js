/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Options for removing compute nodes from a pool.
  *
 */
class NodeRemoveParameter {
  /**
   * Create a NodeRemoveParameter.
   * @member {array} nodeList A list containing the IDs of the compute nodes to
   * be removed from the specified pool.
   * @member {moment.duration} [resizeTimeout] The timeout for removal of
   * compute nodes to the pool. The default value is 15 minutes. The minimum
   * value is 5 minutes. If you specify a value less than 5 minutes, the Batch
   * service returns an error; if you are calling the REST API directly, the
   * HTTP status code is 400 (Bad Request).
   * @member {string} [nodeDeallocationOption] Determines what to do with a
   * node and its running task(s) after it has been selected for deallocation.
   * The default value is requeue. Possible values include: 'requeue',
   * 'terminate', 'taskCompletion', 'retainedData'
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeRemoveParameter
   *
   * @returns {object} metadata of NodeRemoveParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeRemoveParameter',
      type: {
        name: 'Composite',
        className: 'NodeRemoveParameter',
        modelProperties: {
          nodeList: {
            required: true,
            serializedName: 'nodeList',
            constraints: {
              MaxItems: 100
            },
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          resizeTimeout: {
            required: false,
            serializedName: 'resizeTimeout',
            type: {
              name: 'TimeSpan'
            }
          },
          nodeDeallocationOption: {
            required: false,
            serializedName: 'nodeDeallocationOption',
            type: {
              name: 'Enum',
              allowedValues: [ 'requeue', 'terminate', 'taskCompletion', 'retainedData' ]
            }
          }
        }
      }
    };
  }
}

module.exports = NodeRemoveParameter;
