/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Options for reimaging a compute node.
  *
 */
class NodeReimageParameter {
  /**
   * Create a NodeReimageParameter.
   * @member {string} [nodeReimageOption] When to reimage the compute node and
   * what to do with currently running tasks. Values are:
   *
   * requeue - Terminate running task processes and requeue the tasks. The
   * tasks will run again when a node is available. Reimage the node as soon as
   * tasks have been terminated.
   * terminate - Terminate running tasks. The tasks will not run again. Reimage
   * the node as soon as tasks have been terminated.
   * taskcompletion - Allow currently running tasks to complete. Schedule no
   * new tasks while waiting. Reimage the node when all tasks have completed.
   * retaineddata - Allow currently running tasks to complete, then wait for
   * all task data retention periods to expire. Schedule no new tasks while
   * waiting. Reimage the node when all task retention periods have expired.
   *
   * The default value is requeue. Possible values include: 'requeue',
   * 'terminate', 'taskCompletion', 'retainedData'
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeReimageParameter
   *
   * @returns {object} metadata of NodeReimageParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeReimageParameter',
      type: {
        name: 'Composite',
        className: 'NodeReimageParameter',
        modelProperties: {
          nodeReimageOption: {
            required: false,
            serializedName: 'nodeReimageOption',
            type: {
              name: 'Enum',
              allowedValues: [ 'requeue', 'terminate', 'taskCompletion', 'retainedData' ]
            }
          }
        }
      }
    };
  }
}

module.exports = NodeReimageParameter;
