/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the AutoPoolSpecification class.
 * @constructor
 * Specifies characteristics for a temporary 'auto pool'. The Batch service
 * will create this auto pool, run all the tasks for the job on it, and will
 * delete the pool once the job has completed.
 * @member {string} [autoPoolIdPrefix] Gets or sets a prefix to be added to
 * the unique identifier when a pool is automatically created. The prefix can
 * be up to 20 characters long.
 * 
 * @member {string} poolLifetimeOption Gets or sets the minimum lifetime of
 * created auto pools, and how multiple jobs on a schedule are assigned to
 * pools. Possible values include: 'jobschedule', 'job', 'unmapped'
 * 
 * @member {boolean} [keepAlive] Gets or sets whether to keep an auto pool
 * alive after its lifetime expires.
 * 
 * @member {object} [pool] Gets or sets the pool specification for the auto
 * pool.
 * 
 * @member {string} [pool.displayName] Gets or sets the display name for the
 * pool.
 * 
 * @member {string} [pool.vmSize] Gets or sets the size of the virtual
 * machines in the pool. All VMs in a pool are the same size.
 * 
 * @member {object} [pool.cloudServiceConfiguration] Gets or sets the cloud
 * service configuration for the pool. This property and
 * VirtualMachineConfiguration are mutually exclusive and one of the
 * properties must be specified.
 * 
 * @member {string} [pool.cloudServiceConfiguration.osFamily] Gets or sets the
 * Azure Guest OS family to be installed on the virtual machines in the pool.
 * 
 * @member {string} [pool.cloudServiceConfiguration.targetOSVersion] Gets or
 * sets the Azure Guest OS version to be installed on the virtual machines in
 * the pool. The default value is * which specifies the latest operating
 * system version for the specified OS family.
 * 
 * @member {string} [pool.cloudServiceConfiguration.currentOSVersion] Gets or
 * sets the Azure Guest OS Version currently installed on the virtual
 * machines in the pool. This may differ from TargetOSVersion if the pool
 * state is Upgrading.
 * 
 * @member {object} [pool.virtualMachineConfiguration] Gets or sets the
 * virtual machine configuration for the pool. This property and
 * CloudServiceConfiguration are mutually exclusive and one of the properties
 * must be specified.
 * 
 * @member {object} [pool.virtualMachineConfiguration.imageReference] Gets or
 * sets information about the platform or marketplace image to use.
 * 
 * @member {string}
 * [pool.virtualMachineConfiguration.imageReference.publisher] Gets or sets
 * the publisher of the image.
 * 
 * @member {string} [pool.virtualMachineConfiguration.imageReference.offer]
 * Gets or sets the offer of the image.
 * 
 * @member {string} [pool.virtualMachineConfiguration.imageReference.sku] Gets
 * or sets the SKU of the image.
 * 
 * @member {string} [pool.virtualMachineConfiguration.imageReference.version]
 * Gets or sets the version of the image. A value of 'latest' can be
 * specified to select the latest version of an image.
 * 
 * @member {string} [pool.virtualMachineConfiguration.nodeAgentSKUId] Gets or
 * sets the SKU of Batch Node Agent that needs to be provisioned on the
 * compute node. This property must match the ImageReference property.
 * 
 * @member {object} [pool.virtualMachineConfiguration.windowsConfiguration]
 * Gets or sets Windows operating system settings on the virtual machine.
 * This property must not be specified if the ImageReference property
 * referencs a Linux OS image.
 * 
 * @member {boolean}
 * [pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
 * Gets or sets whether virtual machine is enabled for automatic updates. If
 * omitted, the default value is true.
 * 
 * @member {number} [pool.maxTasksPerNode] Gets or sets the maximum number of
 * tasks that can run concurrently on a single compute node in the pool.
 * 
 * @member {object} [pool.taskSchedulingPolicy] Gets or sets how tasks are
 * distributed among compute nodes in the pool.
 * 
 * @member {string} [pool.taskSchedulingPolicy.nodeFillType] Gets or sets how
 * tasks should be distributed across compute nodes. Possible values include:
 * 'spread', 'pack', 'unmapped'
 * 
 * @member {moment.duration} [pool.resizeTimeout] Gets or sets the timeout for
 * allocation of compute nodes to the pool.
 * 
 * @member {number} [pool.targetDedicated] Gets or sets the desired number of
 * compute nodes in the pool.
 * 
 * @member {boolean} [pool.enableAutoScale] Gets or sets whether the pool size
 * should automatically adjust over time.
 * 
 * @member {string} [pool.autoScaleFormula] Gets or sets the formula for the
 * desired number of compute nodes in the pool.
 * 
 * @member {moment.duration} [pool.autoScaleEvaluationInterval] Gets or sets a
 * time interval for the desired AutoScale evaluation period in the pool.
 * 
 * @member {boolean} [pool.enableInterNodeCommunication] Gets or sets whether
 * the pool permits direct communication between nodes.
 * 
 * @member {object} [pool.startTask] Gets or sets a task to run on each
 * compute node as it joins the pool. The task runs when the node is added to
 * the pool or when the node is restarted.
 * 
 * @member {string} [pool.startTask.commandLine] Gets or sets the command line
 * of the start task.
 * 
 * @member {array} [pool.startTask.resourceFiles] Gets or sets a list of files
 * that Batch will download to the compute node before running the command
 * line.
 * 
 * @member {array} [pool.startTask.environmentSettings] Gets or sets a list of
 * environment variable settings for the start task.
 * 
 * @member {boolean} [pool.startTask.runElevated] Gets or sets whether to run
 * the start task in elevated mode. The default value is false.
 * 
 * @member {number} [pool.startTask.maxTaskRetryCount] Gets or sets the
 * maximum number of times the task may be retried.
 * 
 * @member {boolean} [pool.startTask.waitForSuccess] Gets or sets whether the
 * Batch Service should wait for the start task to complete successfully
 * (that is, to exit with exit code 0) before scheduling any tasks on the
 * compute node.
 * 
 * @member {array} [pool.certificateReferences] Gets or sets a list of
 * certificates to be installed on each compute node in the pool.
 * 
 * @member {array} [pool.applicationPackageReferences] Gets or sets the list
 * of application packages to be installed on each compute node in the pool.
 * 
 * @member {array} [pool.metadata] Gets or sets a list of name-value pairs
 * associated with the pool as metadata.
 * 
 */
function AutoPoolSpecification() {
}

/**
 * Defines the metadata of AutoPoolSpecification
 *
 * @returns {object} metadata of AutoPoolSpecification
 *
 */
AutoPoolSpecification.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'AutoPoolSpecification',
    type: {
      name: 'Composite',
      className: 'AutoPoolSpecification',
      modelProperties: {
        autoPoolIdPrefix: {
          required: false,
          serializedName: 'autoPoolIdPrefix',
          type: {
            name: 'String'
          }
        },
        poolLifetimeOption: {
          required: true,
          serializedName: 'poolLifetimeOption',
          type: {
            name: 'Enum',
            allowedValues: [ 'jobschedule', 'job', 'unmapped' ]
          }
        },
        keepAlive: {
          required: false,
          serializedName: 'keepAlive',
          type: {
            name: 'Boolean'
          }
        },
        pool: {
          required: false,
          serializedName: 'pool',
          type: {
            name: 'Composite',
            className: 'PoolSpecification'
          }
        }
      }
    }
  };
};

module.exports = AutoPoolSpecification;
