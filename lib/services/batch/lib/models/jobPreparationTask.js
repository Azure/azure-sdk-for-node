/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @summary A Job Preparation task to run before any tasks of the job on any
 * given compute node.
  *
 * You can use Job Preparation to prepare a compute node to run tasks for the
 * job. Activities commonly performed in Job Preparation include: Downloading
 * common resource files used by all the tasks in the job. The Job Preparation
 * task can download these common resource files to the shared location on the
 * compute node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service
 * on the compute node so that all tasks of that job can communicate with it.
 * If the Job Preparation task fails (that is, exhausts its retry count before
 * exiting with exit code 0), Batch will not run tasks of this job on the
 * compute node. The node remains ineligible to run tasks of this job until it
 * is reimaged. The node remains active and can be used for other jobs. The Job
 * Preparation task can run multiple times on the same compute node. Therefore,
 * you should write the Job Preparation task to handle re-execution. If the
 * compute node is rebooted, the Job Preparation task is run again on the node
 * before scheduling any other task of the job, if
 * rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not
 * previously complete. If the compute node is reimaged, the Job Preparation
 * task is run again before scheduling any task of the job.
 *
 */
class JobPreparationTask {
  /**
   * Create a JobPreparationTask.
   * @member {string} [id] A string that uniquely identifies the Job
   * Preparation task within the job. The ID can contain any combination of
   * alphanumeric characters including hyphens and underscores and cannot
   * contain more than 64 characters. If you do not specify this property, the
   * Batch service assigns a default value of 'jobpreparation'. No other task
   * in the job can have the same ID as the Job Preparation task. If you try to
   * submit a task with the same id, the Batch service rejects the request with
   * error code TaskIdSameAsJobPreparationTask; if you are calling the REST API
   * directly, the HTTP status code is 409 (Conflict).
   * @member {string} commandLine The command line of the Job Preparation task.
   * The command line does not run under a shell, and therefore cannot take
   * advantage of shell features such as environment variable expansion. If you
   * want to take advantage of such features, you should invoke the shell in
   * the command line, for example using "cmd /c MyCommand" in Windows or
   * "/bin/sh -c MyCommand" in Linux.
   * @member {object} [containerSettings] The settings for the container under
   * which the Job Preparation task runs. When this is specified, all
   * directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of
   * Azure Batch directories on the node) are mapped into the container, all
   * task environment variables are mapped into the container, and the task
   * command line is executed in the container.
   * @member {string} [containerSettings.containerRunOptions] These additional
   * options are supplied as arguments to the "docker create" command, in
   * addition to those controlled by the Batch Service.
   * @member {string} [containerSettings.imageName] This is the full image
   * reference, as would be specified to "docker pull". If no tag is provided
   * as part of the image name, the tag ":latest" is used as a default.
   * @member {object} [containerSettings.registry] This setting can be omitted
   * if was already provided at pool creation.
   * @member {string} [containerSettings.registry.registryServer] If omitted,
   * the default is "docker.io".
   * @member {string} [containerSettings.registry.userName]
   * @member {string} [containerSettings.registry.password]
   * @member {array} [resourceFiles] A list of files that the Batch service
   * will download to the compute node before running the command line. Files
   * listed under this element are located in the task's working directory.
   * @member {array} [environmentSettings] A list of environment variable
   * settings for the Job Preparation task.
   * @member {object} [constraints] Constraints that apply to the Job
   * Preparation task.
   * @member {moment.duration} [constraints.maxWallClockTime] If this is not
   * specified, there is no time limit on how long the task may run.
   * @member {moment.duration} [constraints.retentionTime] The default is
   * infinite, i.e. the task directory will be retained until the compute node
   * is removed or reimaged.
   * @member {number} [constraints.maxTaskRetryCount] Note that this value
   * specifically controls the number of retries. The Batch service will try
   * the task once, and may then retry up to this limit. For example, if the
   * maximum retry count is 3, Batch tries the task up to 4 times (one initial
   * try and 3 retries). If the maximum retry count is 0, the Batch service
   * does not retry the task. If the maximum retry count is -1, the Batch
   * service retries the task without limit.
   * @member {boolean} [waitForSuccess] Whether the Batch service should wait
   * for the Job Preparation task to complete successfully before scheduling
   * any other tasks of the job on the compute node. A Job Preparation task has
   * completed successfully if it exits with exit code 0. If true and the Job
   * Preparation task fails on a compute node, the Batch service retries the
   * Job Preparation task up to its maximum retry count (as specified in the
   * constraints element). If the task has still not completed successfully
   * after all retries, then the Batch service will not schedule tasks of the
   * job to the compute node. The compute node remains active and eligible to
   * run tasks of other jobs. If false, the Batch service will not wait for the
   * Job Preparation task to complete. In this case, other tasks of the job can
   * start executing on the compute node while the Job Preparation task is
   * still running; and even if the Job Preparation task fails, new tasks will
   * continue to be scheduled on the node. The default value is true.
   * @member {object} [userIdentity] The user identity under which the Job
   * Preparation task runs. If omitted, the task runs as a non-administrative
   * user unique to the task on Windows nodes, or a a non-administrative user
   * unique to the pool on Linux nodes.
   * @member {string} [userIdentity.userName] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @member {object} [userIdentity.autoUser] The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   * @member {string} [userIdentity.autoUser.scope] Values are:
   *
   * pool - specifies that the task runs as the common auto user account which
   * is created on every node in a pool.
   * task - specifies that the service should create a new user for the task.
   * The default value is task. Possible values include: 'task', 'pool'
   * @member {string} [userIdentity.autoUser.elevationLevel] nonAdmin - The
   * auto user is a standard user without elevated access. admin - The auto
   * user is a user with elevated access and operates with full Administrator
   * permissions. The default value is nonAdmin. Possible values include:
   * 'nonAdmin', 'admin'
   * @member {boolean} [rerunOnNodeRebootAfterSuccess] Whether the Batch
   * service should rerun the Job Preparation task after a compute node
   * reboots. The Job Preparation task is always rerun if a compute node is
   * reimaged, or if the Job Preparation task did not complete (e.g. because
   * the reboot occurred while the task was running). Therefore, you should
   * always write a Job Preparation task to be idempotent and to behave
   * correctly if run multiple times. The default value is true.
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobPreparationTask
   *
   * @returns {object} metadata of JobPreparationTask
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobPreparationTask',
      type: {
        name: 'Composite',
        className: 'JobPreparationTask',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          commandLine: {
            required: true,
            serializedName: 'commandLine',
            type: {
              name: 'String'
            }
          },
          containerSettings: {
            required: false,
            serializedName: 'containerSettings',
            type: {
              name: 'Composite',
              className: 'TaskContainerSettings'
            }
          },
          resourceFiles: {
            required: false,
            serializedName: 'resourceFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ResourceFileElementType',
                  type: {
                    name: 'Composite',
                    className: 'ResourceFile'
                  }
              }
            }
          },
          environmentSettings: {
            required: false,
            serializedName: 'environmentSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentSettingElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentSetting'
                  }
              }
            }
          },
          constraints: {
            required: false,
            serializedName: 'constraints',
            type: {
              name: 'Composite',
              className: 'TaskConstraints'
            }
          },
          waitForSuccess: {
            required: false,
            serializedName: 'waitForSuccess',
            type: {
              name: 'Boolean'
            }
          },
          userIdentity: {
            required: false,
            serializedName: 'userIdentity',
            type: {
              name: 'Composite',
              className: 'UserIdentity'
            }
          },
          rerunOnNodeRebootAfterSuccess: {
            required: false,
            serializedName: 'rerunOnNodeRebootAfterSuccess',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = JobPreparationTask;
