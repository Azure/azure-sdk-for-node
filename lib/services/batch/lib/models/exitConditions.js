/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Specifies how the Batch service should respond when the task
 * completes.
  *
 */
class ExitConditions {
  /**
   * Create a ExitConditions.
   * @property {array} [exitCodes] A list of individual task exit codes and how
   * the Batch service should respond to them.
   * @property {array} [exitCodeRanges] A list of task exit code ranges and how
   * the Batch service should respond to them.
   * @property {object} [preProcessingError] How the Batch service should
   * respond if the task fails to start due to an error.
   * @property {string} [preProcessingError.jobAction] The default is none for
   * exit code 0 and terminate for all other exit conditions. If the job's
   * onTaskFailed property is noaction, then specifying this property returns
   * an error and the add task request fails with an invalid property value
   * error; if you are calling the REST API directly, the HTTP status code is
   * 400 (Bad Request). Possible values include: 'none', 'disable', 'terminate'
   * @property {string} [preProcessingError.dependencyAction] The default is
   * 'satisfy' for exit code 0, and 'block' for all other exit conditions. If
   * the job's usesTaskDependencies property is set to false, then specifying
   * the dependencyAction property returns an error and the add task request
   * fails with an invalid property value error; if you are calling the REST
   * API directly, the HTTP status code is 400  (Bad Request). Possible values
   * include: 'satisfy', 'block'
   * @property {object} [fileUploadError] How the Batch service should respond
   * if a file upload error occurs. If the task exited with an exit code that
   * was specified via exitCodes or exitCodeRanges, and then encountered a file
   * upload error, then the action specified by the exit code takes precedence.
   * @property {string} [fileUploadError.jobAction] The default is none for
   * exit code 0 and terminate for all other exit conditions. If the job's
   * onTaskFailed property is noaction, then specifying this property returns
   * an error and the add task request fails with an invalid property value
   * error; if you are calling the REST API directly, the HTTP status code is
   * 400 (Bad Request). Possible values include: 'none', 'disable', 'terminate'
   * @property {string} [fileUploadError.dependencyAction] The default is
   * 'satisfy' for exit code 0, and 'block' for all other exit conditions. If
   * the job's usesTaskDependencies property is set to false, then specifying
   * the dependencyAction property returns an error and the add task request
   * fails with an invalid property value error; if you are calling the REST
   * API directly, the HTTP status code is 400  (Bad Request). Possible values
   * include: 'satisfy', 'block'
   * @property {object} [default] How the Batch service should respond if the
   * task fails with an exit condition not covered by any of the other
   * properties. This value is used if the task exits with any nonzero exit
   * code not listed in the exitCodes or exitCodeRanges collection, with a
   * pre-processing error if the preProcessingError property is not present, or
   * with a file upload error if the fileUploadError property is not present.
   * If you want non-default behavior on exit code 0, you must list it
   * explicitly using the exitCodes or exitCodeRanges collection.
   * @property {string} [default.jobAction] The default is none for exit code 0
   * and terminate for all other exit conditions. If the job's onTaskFailed
   * property is noaction, then specifying this property returns an error and
   * the add task request fails with an invalid property value error; if you
   * are calling the REST API directly, the HTTP status code is 400 (Bad
   * Request). Possible values include: 'none', 'disable', 'terminate'
   * @property {string} [default.dependencyAction] The default is 'satisfy' for
   * exit code 0, and 'block' for all other exit conditions. If the job's
   * usesTaskDependencies property is set to false, then specifying the
   * dependencyAction property returns an error and the add task request fails
   * with an invalid property value error; if you are calling the REST API
   * directly, the HTTP status code is 400  (Bad Request). Possible values
   * include: 'satisfy', 'block'
   */
  constructor() {
  }

  /**
   * Defines the metadata of ExitConditions
   *
   * @returns {object} metadata of ExitConditions
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ExitConditions',
      type: {
        name: 'Composite',
        className: 'ExitConditions',
        modelProperties: {
          exitCodes: {
            required: false,
            serializedName: 'exitCodes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ExitCodeMappingElementType',
                  type: {
                    name: 'Composite',
                    className: 'ExitCodeMapping'
                  }
              }
            }
          },
          exitCodeRanges: {
            required: false,
            serializedName: 'exitCodeRanges',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ExitCodeRangeMappingElementType',
                  type: {
                    name: 'Composite',
                    className: 'ExitCodeRangeMapping'
                  }
              }
            }
          },
          preProcessingError: {
            required: false,
            serializedName: 'preProcessingError',
            type: {
              name: 'Composite',
              className: 'ExitOptions'
            }
          },
          fileUploadError: {
            required: false,
            serializedName: 'fileUploadError',
            type: {
              name: 'Composite',
              className: 'ExitOptions'
            }
          },
          default: {
            required: false,
            serializedName: 'default',
            type: {
              name: 'Composite',
              className: 'ExitOptions'
            }
          }
        }
      }
    };
  }
}

module.exports = ExitConditions;
