/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CloudJob class.
 * @constructor
 * An Azure Batch job.
 * @member {string} [id] Gets or sets a string that uniquely identifies the
 * job within the account. The id can contain any combination of alphanumeric
 * characters including hyphens and underscores, and cannot contain more than
 * 64 characters. It is common to use a GUID for the id.
 * 
 * @member {string} [displayName] Gets or sets the display name for the job.
 * 
 * @member {boolean} [usesTaskDependencies] Gets or sets the flag that
 * determines if this job will use tasks with dependencies.
 * 
 * @member {string} [url] Gets or sets the URL of the job.
 * 
 * @member {string} [eTag] Gets or sets the ETag of the job.
 * 
 * @member {date} [lastModified] Gets or sets the last modified time of the
 * job.
 * 
 * @member {date} [creationTime] Gets or sets the creation time of the job.
 * 
 * @member {string} [state] Gets or sets the current state of the job.
 * Possible values include: 'active', 'disabling', 'disabled', 'enabling',
 * 'terminating', 'completed', 'deleting'
 * 
 * @member {date} [stateTransitionTime] Gets or sets the time at which the job
 * entered its current state.
 * 
 * @member {string} [previousState] Gets or sets the previous state of the
 * job. This property is not set if the job is in its initial Active state.
 * Possible values include: 'active', 'disabling', 'disabled', 'enabling',
 * 'terminating', 'completed', 'deleting'
 * 
 * @member {date} [previousStateTransitionTime] Gets or sets the time at which
 * the job entered its previous state. This property is not set if the job is
 * in its initial Active state.
 * 
 * @member {number} [priority] Gets or sets the priority of the job. Priority
 * values can range from -1000 to 1000, with -1000 being the lowest priority
 * and 1000 being the highest priority. The default value is 0.
 * 
 * @member {object} [constraints] Gets or sets the execution constraints for
 * the job.
 * 
 * @member {moment.duration} [constraints.maxWallClockTime] Gets or sets the
 * maximum elapsed time that the job may run, measured from the time the job
 * starts. If the job does not complete within the time limit, the Batch
 * service terminates it and any tasks that are still running.
 * 
 * @member {number} [constraints.maxTaskRetryCount] Gets or sets the maximum
 * number of times each task may be retried. The Batch service retries a task
 * if its exit code is nonzero.
 * 
 * @member {object} [jobManagerTask] Gets or sets details of a Job Manager
 * task to be launched when the job is started.
 * 
 * @member {string} [jobManagerTask.id] Gets or sets a string that uniquely
 * identifies the Job Manager task. A GUID is recommended.
 * 
 * @member {string} [jobManagerTask.displayName] Gets or sets the display name
 * of the Job Manager task.
 * 
 * @member {string} [jobManagerTask.commandLine] Gets or sets the command line
 * of the Job Manager task.
 * 
 * @member {array} [jobManagerTask.resourceFiles] Gets or sets a list of files
 * that Batch will download to the compute node before running the command
 * line.
 * 
 * @member {array} [jobManagerTask.environmentSettings] Gets or sets a list of
 * environment variable settings for the Job Manager task.
 * 
 * @member {object} [jobManagerTask.constraints] Gets or sets constraints that
 * apply to the Job Manager task.
 * 
 * @member {moment.duration} [jobManagerTask.constraints.maxWallClockTime]
 * Gets or sets the maximum elapsed time that the task may run, measured from
 * the time the task starts. If the task does not complete within the time
 * limit, the Batch service terminates it.
 * 
 * @member {moment.duration} [jobManagerTask.constraints.retentionTime] Gets
 * or sets the minimum time to retain the working directory for the task on
 * the compute node where it ran. After this time, the Batch service may
 * delete the working directory and all its contents. The default is infinite.
 * 
 * @member {number} [jobManagerTask.constraints.maxTaskRetryCount] Gets or
 * sets the maximum number of times the task may be retried. The Batch
 * service retries a task if its exit code is nonzero.
 * 
 * @member {boolean} [jobManagerTask.killJobOnCompletion] Gets or sets whether
 * completion of the Job Manager task signifies completion of the entire job.
 * 
 * @member {boolean} [jobManagerTask.runElevated] Gets or sets whether to run
 * the Job Manager task in elevated mode. The default value is false.
 * 
 * @member {boolean} [jobManagerTask.runExclusive] Gets or sets whether the
 * Job Manager task requires exclusive use of the compute node where it runs.
 * 
 * @member {object} [jobPreparationTask] Gets or sets the Job Preparation task.
 * 
 * @member {string} [jobPreparationTask.id] Gets or sets a string that
 * uniquely identifies the job preparation task within the job. The id can
 * contain any combination of alphanumeric characters including hyphens and
 * underscores and cannot contain more than 64 characters.
 * 
 * @member {string} [jobPreparationTask.commandLine] Gets or sets the command
 * line of the Job Preparation task.
 * 
 * @member {array} [jobPreparationTask.resourceFiles] Gets or sets a list of
 * files that Batch will download to the compute node before running the
 * command line.
 * 
 * @member {array} [jobPreparationTask.environmentSettings] Gets or sets a
 * list of environment variable settings for the Job Preparation task.
 * 
 * @member {object} [jobPreparationTask.constraints] Gets or sets constraints
 * that apply to the Job Preparation task..
 * 
 * @member {moment.duration} [jobPreparationTask.constraints.maxWallClockTime]
 * Gets or sets the maximum elapsed time that the task may run, measured from
 * the time the task starts. If the task does not complete within the time
 * limit, the Batch service terminates it.
 * 
 * @member {moment.duration} [jobPreparationTask.constraints.retentionTime]
 * Gets or sets the minimum time to retain the working directory for the task
 * on the compute node where it ran. After this time, the Batch service may
 * delete the working directory and all its contents. The default is infinite.
 * 
 * @member {number} [jobPreparationTask.constraints.maxTaskRetryCount] Gets or
 * sets the maximum number of times the task may be retried. The Batch
 * service retries a task if its exit code is nonzero.
 * 
 * @member {boolean} [jobPreparationTask.waitForSuccess] Gets or sets whether
 * the Batch Service should wait for the Job Preparation task to complete
 * successfully before scheduling any other tasks of the job on the compute
 * node.
 * 
 * @member {boolean} [jobPreparationTask.runElevated] Gets or sets whether to
 * run the Job Preparation task in elevated mode. The default value is false.
 * 
 * @member {boolean} [jobPreparationTask.rerunOnNodeRebootAfterSuccess] Gets
 * or sets whether the Batch service should rerun the Job Preparation task
 * after a compute node reboots. The default value is true.
 * 
 * @member {object} [jobReleaseTask] Gets or sets the Job Release task.
 * 
 * @member {string} [jobReleaseTask.id] Gets or sets a string that uniquely
 * identifies the Job Release task within the job. The id can contain any
 * combination of alphanumeric characters including hyphens and underscores
 * and cannot contain more than 64 characters.
 * 
 * @member {string} [jobReleaseTask.commandLine] Gets or sets the command line
 * of the Job Release task.
 * 
 * @member {array} [jobReleaseTask.resourceFiles] Gets or sets a list of files
 * that Batch will download to the compute node before running the command
 * line.
 * 
 * @member {array} [jobReleaseTask.environmentSettings] Gets or sets a list of
 * environment variable settings for the Job Release task.
 * 
 * @member {moment.duration} [jobReleaseTask.maxWallClockTime] Gets or sets
 * the maximum elapsed time that the Job Release task may run on a given
 * compute node, measured from the time the task starts. If the task does not
 * complete within the time limit, the Batch service terminates it. The
 * default value is 15 minutes.
 * 
 * @member {moment.duration} [jobReleaseTask.retentionTime] Gets or sets the
 * minimum time to retain the working directory for the Job Release task on
 * the compute node.  After this time, the Batch service may delete the
 * working directory and all its contents. The default is infinite.
 * 
 * @member {boolean} [jobReleaseTask.runElevated] Gets or sets whether to run
 * the Job Release task in elevated mode. The default value is false.
 * 
 * @member {array} [commonEnvironmentSettings] Gets or sets the list of common
 * environment variable settings.  These environment variables are set for
 * all tasks in the job (including the Job Manager, Job Preparation and Job
 * Release tasks).
 * 
 * @member {object} [poolInfo] Gets or sets the pool on which the Batch
 * service runs the jobâ€™s tasks.
 * 
 * @member {string} [poolInfo.poolId] Gets or sets the id of an existing pool.
 * All the tasks of the job will run on the specified pool. You must specify
 * either PoolId or AutoPoolSpecification, but not both.
 * 
 * @member {object} [poolInfo.autoPoolSpecification] Gets or sets
 * characteristics for a temporary 'auto pool'. The Batch service will create
 * this auto pool and run all of the tasks of the job on it, and will delete
 * the pool once the job has completed. You must specify either PoolId or
 * AutoPoolSpecification, but not both.
 * 
 * @member {string} [poolInfo.autoPoolSpecification.autoPoolIdPrefix] Gets or
 * sets a prefix to be added to the unique identifier when a pool is
 * automatically created. The prefix can be up to 20 characters long.
 * 
 * @member {string} [poolInfo.autoPoolSpecification.poolLifetimeOption] Gets
 * or sets the minimum lifetime of created auto pools, and how multiple jobs
 * on a schedule are assigned to pools. Possible values include:
 * 'jobschedule', 'job', 'unmapped'
 * 
 * @member {boolean} [poolInfo.autoPoolSpecification.keepAlive] Gets or sets
 * whether to keep an auto pool alive after its lifetime expires.
 * 
 * @member {object} [poolInfo.autoPoolSpecification.pool] Gets or sets the
 * pool specification for the auto pool.
 * 
 * @member {string} [poolInfo.autoPoolSpecification.pool.displayName] Gets or
 * sets the display name for the pool.
 * 
 * @member {string} [poolInfo.autoPoolSpecification.pool.vmSize] Gets or sets
 * the size of the virtual machines in the pool. All VMs in a pool are the
 * same size.
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration] Gets or
 * sets the cloud service configuration for the pool. This property and
 * VirtualMachineConfiguration are mutually exclusive and one of the
 * properties must be specified.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.osFamily]
 * Gets or sets the Azure Guest OS family to be installed on the virtual
 * machines in the pool.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.targetOSVersion]
 * Gets or sets the Azure Guest OS version to be installed on the virtual
 * machines in the pool. The default value is * which specifies the latest
 * operating system version for the specified OS family.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.cloudServiceConfiguration.currentOSVersion]
 * Gets or sets the Azure Guest OS Version currently installed on the virtual
 * machines in the pool. This may differ from TargetOSVersion if the pool
 * state is Upgrading.
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration] Gets or
 * sets the virtual machine configuration for the pool. This property and
 * CloudServiceConfiguration are mutually exclusive and one of the properties
 * must be specified.
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference]
 * Gets or sets information about the platform or marketplace image to use.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.publisher]
 * Gets or sets the publisher of the image.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.offer]
 * Gets or sets the offer of the image.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.sku]
 * Gets or sets the SKU of the image.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.imageReference.version]
 * Gets or sets the version of the image. A value of 'latest' can be
 * specified to select the latest version of an image.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.nodeAgentSKUId]
 * Gets or sets the SKU of Batch Node Agent that needs to be provisioned on
 * the compute node. This property must match the ImageReference property.
 * 
 * @member {object}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration]
 * Gets or sets Windows operating system settings on the virtual machine.
 * This property must not be specified if the ImageReference property
 * referencs a Linux OS image.
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.virtualMachineConfiguration.windowsConfiguration.enableAutomaticUpdates]
 * Gets or sets whether virtual machine is enabled for automatic updates. If
 * omitted, the default value is true.
 * 
 * @member {number} [poolInfo.autoPoolSpecification.pool.maxTasksPerNode] Gets
 * or sets the maximum number of tasks that can run concurrently on a single
 * compute node in the pool.
 * 
 * @member {object} [poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy]
 * Gets or sets how tasks are distributed among compute nodes in the pool.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.taskSchedulingPolicy.nodeFillType]
 * Gets or sets how tasks should be distributed across compute nodes.
 * Possible values include: 'spread', 'pack', 'unmapped'
 * 
 * @member {moment.duration}
 * [poolInfo.autoPoolSpecification.pool.resizeTimeout] Gets or sets the
 * timeout for allocation of compute nodes to the pool.
 * 
 * @member {number} [poolInfo.autoPoolSpecification.pool.targetDedicated] Gets
 * or sets the desired number of compute nodes in the pool.
 * 
 * @member {boolean} [poolInfo.autoPoolSpecification.pool.enableAutoScale]
 * Gets or sets whether the pool size should automatically adjust over time.
 * 
 * @member {string} [poolInfo.autoPoolSpecification.pool.autoScaleFormula]
 * Gets or sets the formula for the desired number of compute nodes in the
 * pool.
 * 
 * @member {moment.duration}
 * [poolInfo.autoPoolSpecification.pool.autoScaleEvaluationInterval] Gets or
 * sets a time interval for the desired AutoScale evaluation period in the
 * pool.
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.enableInterNodeCommunication] Gets or
 * sets whether the pool permits direct communication between nodes.
 * 
 * @member {object} [poolInfo.autoPoolSpecification.pool.startTask] Gets or
 * sets a task to run on each compute node as it joins the pool. The task
 * runs when the node is added to the pool or when the node is restarted.
 * 
 * @member {string}
 * [poolInfo.autoPoolSpecification.pool.startTask.commandLine] Gets or sets
 * the command line of the start task.
 * 
 * @member {array}
 * [poolInfo.autoPoolSpecification.pool.startTask.resourceFiles] Gets or sets
 * a list of files that Batch will download to the compute node before
 * running the command line.
 * 
 * @member {array}
 * [poolInfo.autoPoolSpecification.pool.startTask.environmentSettings] Gets
 * or sets a list of environment variable settings for the start task.
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.startTask.runElevated] Gets or sets
 * whether to run the start task in elevated mode. The default value is false.
 * 
 * @member {number}
 * [poolInfo.autoPoolSpecification.pool.startTask.maxTaskRetryCount] Gets or
 * sets the maximum number of times the task may be retried.
 * 
 * @member {boolean}
 * [poolInfo.autoPoolSpecification.pool.startTask.waitForSuccess] Gets or
 * sets whether the Batch Service should wait for the start task to complete
 * successfully (that is, to exit with exit code 0) before scheduling any
 * tasks on the compute node.
 * 
 * @member {array} [poolInfo.autoPoolSpecification.pool.certificateReferences]
 * Gets or sets a list of certificates to be installed on each compute node
 * in the pool.
 * 
 * @member {array}
 * [poolInfo.autoPoolSpecification.pool.applicationPackageReferences] Gets or
 * sets the list of application packages to be installed on each compute node
 * in the pool.
 * 
 * @member {array} [poolInfo.autoPoolSpecification.pool.metadata] Gets or sets
 * a list of name-value pairs associated with the pool as metadata.
 * 
 * @member {array} [metadata] Gets or sets a list of name-value pairs
 * associated with the job as metadata.
 * 
 * @member {object} [executionInfo] Gets or sets the execution information for
 * the job.
 * 
 * @member {date} [executionInfo.startTime] Gets or sets the start time of the
 * job.
 * 
 * @member {date} [executionInfo.endTime] Gets or sets the completion time of
 * the job. This property is set only if the job is in the completed state.
 * 
 * @member {string} [executionInfo.poolId] Gets or sets the id of the pool to
 * which this job is assigned.
 * 
 * @member {object} [executionInfo.schedulingError] Gets or sets details of
 * any error encountered by the service in starting the job.
 * 
 * @member {string} [executionInfo.schedulingError.category] Gets or sets the
 * category of the job scheduling error. Possible values include:
 * 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [executionInfo.schedulingError.code] Gets or sets an
 * identifier for the job scheduling error.  Codes are invariant and are
 * intended to be consumed programmatically.
 * 
 * @member {string} [executionInfo.schedulingError.message] Gets or sets a
 * message describing the job scheduling error, intended to be suitable for
 * display in a user interface.
 * 
 * @member {array} [executionInfo.schedulingError.details] Gets or sets a list
 * of additional error details related to the scheduling error.
 * 
 * @member {string} [executionInfo.terminateReason] Gets or sets a string
 * describing the reason the job ended.
 * 
 * @member {object} [stats] Gets or sets resource usage statistics for the
 * entire lifetime of the job.
 * 
 * @member {string} [stats.url] Gets or sets the URL for the statistics.
 * 
 * @member {date} [stats.startTime] Gets or sets the start time of the time
 * range covered by the statistics.
 * 
 * @member {date} [stats.lastUpdateTime] Gets or sets the time at which the
 * statistics were last updated. All statistics are limited to the range
 * between StartTime and LastUpdateTime.
 * 
 * @member {moment.duration} [stats.userCPUTime] Gets or sets the total user
 * mode CPU time (summed across all cores and all compute nodes) consumed by
 * all the tasks in the job.
 * 
 * @member {moment.duration} [stats.kernelCPUTime] Gets or sets the total
 * kernel mode CPU time (summed across all cores and all compute nodes)
 * consumed by all the tasks in the job.
 * 
 * @member {moment.duration} [stats.wallClockTime] Gets or sets the total wall
 * clock time of all the tasks in the job.
 * 
 * @member {number} [stats.readIOps] Gets or sets the total number of I/O read
 * operations performed by all the tasks in the job.
 * 
 * @member {number} [stats.writeIOps] Gets or sets the total number of I/O
 * write operations performed by all the tasks in the job.
 * 
 * @member {number} [stats.readIOGiB] Gets or sets the total amount of data in
 * GiB of I/O read by all the tasks in the job.
 * 
 * @member {number} [stats.writeIOGiB] Gets or sets the total amount of data
 * in GiB of I/O written by all the tasks in the job.
 * 
 * @member {number} [stats.numSucceededTasks] Gets or sets the total number of
 * tasks successfully completed in the job during the given time range.
 * 
 * @member {number} [stats.numFailedTasks] Gets or sets the total number of
 * tasks in the job that failed during the given time range.
 * 
 * @member {number} [stats.numTaskRetries] Gets or sets the total number of
 * retries on all the tasks in the job during the given time range.
 * 
 * @member {moment.duration} [stats.waitTime] Gets or sets the total wait time
 * of all the tasks in the job.  The wait time for a task is defined as the
 * elapsed time between the creation of the task creation and the start of
 * task execution.  This value is reported only in the account lifetime
 * statistics; it is not included in individual job statistics.
 * 
 */
function CloudJob() {
}

/**
 * Defines the metadata of CloudJob
 *
 * @returns {object} metadata of CloudJob
 *
 */
CloudJob.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CloudJob',
    type: {
      name: 'Composite',
      className: 'CloudJob',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        displayName: {
          required: false,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        usesTaskDependencies: {
          required: false,
          serializedName: 'usesTaskDependencies',
          type: {
            name: 'Boolean'
          }
        },
        url: {
          required: false,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        eTag: {
          required: false,
          serializedName: 'eTag',
          type: {
            name: 'String'
          }
        },
        lastModified: {
          required: false,
          serializedName: 'lastModified',
          type: {
            name: 'DateTime'
          }
        },
        creationTime: {
          required: false,
          serializedName: 'creationTime',
          type: {
            name: 'DateTime'
          }
        },
        state: {
          required: false,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'disabling', 'disabled', 'enabling', 'terminating', 'completed', 'deleting' ]
          }
        },
        stateTransitionTime: {
          required: false,
          serializedName: 'stateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        previousState: {
          required: false,
          serializedName: 'previousState',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'disabling', 'disabled', 'enabling', 'terminating', 'completed', 'deleting' ]
          }
        },
        previousStateTransitionTime: {
          required: false,
          serializedName: 'previousStateTransitionTime',
          type: {
            name: 'DateTime'
          }
        },
        priority: {
          required: false,
          serializedName: 'priority',
          type: {
            name: 'Number'
          }
        },
        constraints: {
          required: false,
          serializedName: 'constraints',
          type: {
            name: 'Composite',
            className: 'JobConstraints'
          }
        },
        jobManagerTask: {
          required: false,
          serializedName: 'jobManagerTask',
          type: {
            name: 'Composite',
            className: 'JobManagerTask'
          }
        },
        jobPreparationTask: {
          required: false,
          serializedName: 'jobPreparationTask',
          type: {
            name: 'Composite',
            className: 'JobPreparationTask'
          }
        },
        jobReleaseTask: {
          required: false,
          serializedName: 'jobReleaseTask',
          type: {
            name: 'Composite',
            className: 'JobReleaseTask'
          }
        },
        commonEnvironmentSettings: {
          required: false,
          serializedName: 'commonEnvironmentSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EnvironmentSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'EnvironmentSetting'
                }
            }
          }
        },
        poolInfo: {
          required: false,
          serializedName: 'poolInfo',
          type: {
            name: 'Composite',
            className: 'PoolInformation'
          }
        },
        metadata: {
          required: false,
          serializedName: 'metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetadataItemElementType',
                type: {
                  name: 'Composite',
                  className: 'MetadataItem'
                }
            }
          }
        },
        executionInfo: {
          required: false,
          serializedName: 'executionInfo',
          type: {
            name: 'Composite',
            className: 'JobExecutionInformation'
          }
        },
        stats: {
          required: false,
          serializedName: 'stats',
          type: {
            name: 'Composite',
            className: 'JobStatistics'
          }
        }
      }
    }
  };
};

module.exports = CloudJob;
