/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the JobPreparationAndReleaseTaskExecutionInformation class.
 * @constructor
 * The status of the Job Preparation and Job Release tasks on a particular
 * compute node.
 * @member {string} [poolId] Gets or sets the id of the pool containing the
 * compute node to which this entry refers.
 * 
 * @member {string} [nodeId] Gets or sets the id of the compute node to which
 * this entry refers.
 * 
 * @member {string} [nodeUrl] Gets or sets the URL of the compute node to
 * which this entry refers.
 * 
 * @member {object} [jobPreparationTaskExecutionInfo] Gets or sets information
 * about the execution status of the Job Preparation task on this compute
 * node.
 * 
 * @member {date} [jobPreparationTaskExecutionInfo.startTime] Gets or sets the
 * time at which the Job Preparation task started running.
 * 
 * @member {date} [jobPreparationTaskExecutionInfo.endTime] Gets or sets the
 * time at which the Job Preparation task completed. This property is set
 * only if the task is in the Completed state.
 * 
 * @member {string} [jobPreparationTaskExecutionInfo.state] Gets or sets the
 * current running state of the Job Preparation task on the compute node.
 * Possible values include: 'running', 'completed'
 * 
 * @member {string} [jobPreparationTaskExecutionInfo.taskRootDirectory] Gets
 * or sets the root directory of the Job Preparation task on the compute node.
 * 
 * @member {string} [jobPreparationTaskExecutionInfo.taskRootDirectoryUrl]
 * Gets or sets the URL to the root directory of the Job Preparation task on
 * the compute node.
 * 
 * @member {number} [jobPreparationTaskExecutionInfo.exitCode] Gets or sets
 * the exit code of the Job Preparation task. This property is set only if
 * the task is in the Completed state.
 * 
 * @member {object} [jobPreparationTaskExecutionInfo.schedulingError] Gets or
 * sets any error starting the Job Preparation task.
 * 
 * @member {string} [jobPreparationTaskExecutionInfo.schedulingError.category]
 * Gets or sets the category of the task scheduling error. Possible values
 * include: 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [jobPreparationTaskExecutionInfo.schedulingError.code]
 * Gets or sets an identifier for the task scheduling error.  Codes are
 * invariant and are intended to be consumed programmatically.
 * 
 * @member {string} [jobPreparationTaskExecutionInfo.schedulingError.message]
 * Gets or sets a message describing the task scheduling error, intended to
 * be suitable for display in a user interface.
 * 
 * @member {array} [jobPreparationTaskExecutionInfo.schedulingError.details]
 * Gets or sets the list of additional error details related to the
 * scheduling error.
 * 
 * @member {number} [jobPreparationTaskExecutionInfo.retryCount] Gets or sets
 * the number of times the Job Preparation task has been retried by the Batch
 * service.
 * 
 * @member {date} [jobPreparationTaskExecutionInfo.lastRetryTime] Gets or sets
 * the most recent time at which a retry of the Job Preparation task started
 * running. This property is set only if the task was retried (i.e.
 * retryCount is nonzero).
 * 
 * @member {object} [jobReleaseTaskExecutionInfo] Gets or sets information
 * about the execution status of the Job Release task on this compute node.
 * This property is set only if the Job Release task has run on the node.
 * 
 * @member {date} [jobReleaseTaskExecutionInfo.startTime] Gets or sets the
 * time at which the Job Release task started running.
 * 
 * @member {date} [jobReleaseTaskExecutionInfo.endTime] Gets or sets the time
 * at which the Job Release task completed. This property is set only if the
 * task is in the Completed state.
 * 
 * @member {string} [jobReleaseTaskExecutionInfo.state] Gets or sets the
 * current running state of the Job Release task on the compute node.
 * Possible values include: 'running', 'completed'
 * 
 * @member {string} [jobReleaseTaskExecutionInfo.taskRootDirectory] Gets or
 * sets the root directory of the Job Release task on the compute node.
 * 
 * @member {string} [jobReleaseTaskExecutionInfo.taskRootDirectoryUrl] Gets or
 * sets the URL to the root directory of the Job Release task on the compute
 * node.
 * 
 * @member {number} [jobReleaseTaskExecutionInfo.exitCode] Gets or sets the
 * exit code of the Job Release task. This property is set only if the task
 * is in the Completed state.
 * 
 * @member {object} [jobReleaseTaskExecutionInfo.schedulingError] Gets or sets
 * any error starting the Job Release task.
 * 
 * @member {string} [jobReleaseTaskExecutionInfo.schedulingError.category]
 * Gets or sets the category of the task scheduling error. Possible values
 * include: 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [jobReleaseTaskExecutionInfo.schedulingError.code] Gets or
 * sets an identifier for the task scheduling error.  Codes are invariant and
 * are intended to be consumed programmatically.
 * 
 * @member {string} [jobReleaseTaskExecutionInfo.schedulingError.message] Gets
 * or sets a message describing the task scheduling error, intended to be
 * suitable for display in a user interface.
 * 
 * @member {array} [jobReleaseTaskExecutionInfo.schedulingError.details] Gets
 * or sets the list of additional error details related to the scheduling
 * error.
 * 
 */
function JobPreparationAndReleaseTaskExecutionInformation() {
}

/**
 * Defines the metadata of JobPreparationAndReleaseTaskExecutionInformation
 *
 * @returns {object} metadata of JobPreparationAndReleaseTaskExecutionInformation
 *
 */
JobPreparationAndReleaseTaskExecutionInformation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'JobPreparationAndReleaseTaskExecutionInformation',
    type: {
      name: 'Composite',
      className: 'JobPreparationAndReleaseTaskExecutionInformation',
      modelProperties: {
        poolId: {
          required: false,
          serializedName: 'poolId',
          type: {
            name: 'String'
          }
        },
        nodeId: {
          required: false,
          serializedName: 'nodeId',
          type: {
            name: 'String'
          }
        },
        nodeUrl: {
          required: false,
          serializedName: 'nodeUrl',
          type: {
            name: 'String'
          }
        },
        jobPreparationTaskExecutionInfo: {
          required: false,
          serializedName: 'jobPreparationTaskExecutionInfo',
          type: {
            name: 'Composite',
            className: 'JobPreparationTaskExecutionInformation'
          }
        },
        jobReleaseTaskExecutionInfo: {
          required: false,
          serializedName: 'jobReleaseTaskExecutionInfo',
          type: {
            name: 'Composite',
            className: 'JobReleaseTaskExecutionInformation'
          }
        }
      }
    }
  };
};

module.exports = JobPreparationAndReleaseTaskExecutionInformation;
