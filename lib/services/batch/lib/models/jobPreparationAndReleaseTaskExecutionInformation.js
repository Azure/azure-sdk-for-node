/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary The status of the Job Preparation and Job Release tasks on a
 * compute node.
  *
 */
class JobPreparationAndReleaseTaskExecutionInformation {
  /**
   * Create a JobPreparationAndReleaseTaskExecutionInformation.
   * @property {string} [poolId] The ID of the pool containing the compute node
   * to which this entry refers.
   * @property {string} [nodeId] The ID of the compute node to which this entry
   * refers.
   * @property {string} [nodeUrl] The URL of the compute node to which this
   * entry refers.
   * @property {object} [jobPreparationTaskExecutionInfo] Information about the
   * execution status of the Job Preparation task on this compute node.
   * @property {date} [jobPreparationTaskExecutionInfo.startTime] If the task
   * has been restarted or retried, this is the most recent time at which the
   * task started running.
   * @property {date} [jobPreparationTaskExecutionInfo.endTime] This property
   * is set only if the task is in the Completed state.
   * @property {string} [jobPreparationTaskExecutionInfo.state] Possible values
   * include: 'running', 'completed'
   * @property {string} [jobPreparationTaskExecutionInfo.taskRootDirectory]
   * @property {string} [jobPreparationTaskExecutionInfo.taskRootDirectoryUrl]
   * @property {number} [jobPreparationTaskExecutionInfo.exitCode] This
   * parameter is returned only if the task is in the completed state. The exit
   * code for a process reflects the specific convention implemented by the
   * application developer for that process. If you use the exit code value to
   * make decisions in your code, be sure that you know the exit code
   * convention used by the application process. Note that the exit code may
   * also be generated by the compute node operating system, such as when a
   * process is forcibly terminated.
   * @property {object} [jobPreparationTaskExecutionInfo.containerInfo] This
   * property is set only if the task runs in a container context.
   * @property {string}
   * [jobPreparationTaskExecutionInfo.containerInfo.containerId]
   * @property {string} [jobPreparationTaskExecutionInfo.containerInfo.state]
   * This is the state of the container according to the Docker service. It is
   * equivalent to the status field returned by "docker inspect".
   * @property {string} [jobPreparationTaskExecutionInfo.containerInfo.error]
   * This is the detailed error string from the Docker service, if available.
   * It is equivalent to the error field returned by "docker inspect".
   * @property {object} [jobPreparationTaskExecutionInfo.failureInfo] This
   * property is set only if the task is in the completed state and encountered
   * a failure.
   * @property {string} [jobPreparationTaskExecutionInfo.failureInfo.category]
   * Possible values include: 'userError', 'serverError'
   * @property {string} [jobPreparationTaskExecutionInfo.failureInfo.code]
   * @property {string} [jobPreparationTaskExecutionInfo.failureInfo.message]
   * @property {array} [jobPreparationTaskExecutionInfo.failureInfo.details]
   * @property {number} [jobPreparationTaskExecutionInfo.retryCount] Task
   * application failures (non-zero exit code) are retried, pre-processing
   * errors (the task could not be run) and file upload errors are not retried.
   * The Batch service will retry the task up to the limit specified by the
   * constraints.
   * @property {date} [jobPreparationTaskExecutionInfo.lastRetryTime] This
   * property is set only if the task was retried (i.e. retryCount is nonzero).
   * If present, this is typically the same as startTime, but may be different
   * if the task has been restarted for reasons other than retry; for example,
   * if the compute node was rebooted during a retry, then the startTime is
   * updated but the lastRetryTime is not.
   * @property {string} [jobPreparationTaskExecutionInfo.result] If the value
   * is 'failed', then the details of the failure can be found in the
   * failureInfo property. Possible values include: 'success', 'failure'
   * @property {object} [jobReleaseTaskExecutionInfo] Information about the
   * execution status of the Job Release task on this compute node. This
   * property is set only if the Job Release task has run on the node.
   * @property {date} [jobReleaseTaskExecutionInfo.startTime] If the task has
   * been restarted or retried, this is the most recent time at which the task
   * started running.
   * @property {date} [jobReleaseTaskExecutionInfo.endTime] This property is
   * set only if the task is in the Completed state.
   * @property {string} [jobReleaseTaskExecutionInfo.state] Possible values
   * include: 'running', 'completed'
   * @property {string} [jobReleaseTaskExecutionInfo.taskRootDirectory]
   * @property {string} [jobReleaseTaskExecutionInfo.taskRootDirectoryUrl]
   * @property {number} [jobReleaseTaskExecutionInfo.exitCode] This parameter
   * is returned only if the task is in the completed state. The exit code for
   * a process reflects the specific convention implemented by the application
   * developer for that process. If you use the exit code value to make
   * decisions in your code, be sure that you know the exit code convention
   * used by the application process. Note that the exit code may also be
   * generated by the compute node operating system, such as when a process is
   * forcibly terminated.
   * @property {object} [jobReleaseTaskExecutionInfo.containerInfo] This
   * property is set only if the task runs in a container context.
   * @property {string} [jobReleaseTaskExecutionInfo.containerInfo.containerId]
   * @property {string} [jobReleaseTaskExecutionInfo.containerInfo.state] This
   * is the state of the container according to the Docker service. It is
   * equivalent to the status field returned by "docker inspect".
   * @property {string} [jobReleaseTaskExecutionInfo.containerInfo.error] This
   * is the detailed error string from the Docker service, if available. It is
   * equivalent to the error field returned by "docker inspect".
   * @property {object} [jobReleaseTaskExecutionInfo.failureInfo] This property
   * is set only if the task is in the completed state and encountered a
   * failure.
   * @property {string} [jobReleaseTaskExecutionInfo.failureInfo.category]
   * Possible values include: 'userError', 'serverError'
   * @property {string} [jobReleaseTaskExecutionInfo.failureInfo.code]
   * @property {string} [jobReleaseTaskExecutionInfo.failureInfo.message]
   * @property {array} [jobReleaseTaskExecutionInfo.failureInfo.details]
   * @property {string} [jobReleaseTaskExecutionInfo.result] If the value is
   * 'failed', then the details of the failure can be found in the failureInfo
   * property. Possible values include: 'success', 'failure'
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobPreparationAndReleaseTaskExecutionInformation
   *
   * @returns {object} metadata of JobPreparationAndReleaseTaskExecutionInformation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobPreparationAndReleaseTaskExecutionInformation',
      type: {
        name: 'Composite',
        className: 'JobPreparationAndReleaseTaskExecutionInformation',
        modelProperties: {
          poolId: {
            required: false,
            serializedName: 'poolId',
            type: {
              name: 'String'
            }
          },
          nodeId: {
            required: false,
            serializedName: 'nodeId',
            type: {
              name: 'String'
            }
          },
          nodeUrl: {
            required: false,
            serializedName: 'nodeUrl',
            type: {
              name: 'String'
            }
          },
          jobPreparationTaskExecutionInfo: {
            required: false,
            serializedName: 'jobPreparationTaskExecutionInfo',
            type: {
              name: 'Composite',
              className: 'JobPreparationTaskExecutionInformation'
            }
          },
          jobReleaseTaskExecutionInfo: {
            required: false,
            serializedName: 'jobReleaseTaskExecutionInfo',
            type: {
              name: 'Composite',
              className: 'JobReleaseTaskExecutionInformation'
            }
          }
        }
      }
    };
  }
}

module.exports = JobPreparationAndReleaseTaskExecutionInformation;
