/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the TaskInformation class.
 * @constructor
 * Information about a task running on a compute node.
 * @member {string} [taskUrl] Gets or sets the URL of the task.
 * 
 * @member {string} [jobId] Gets or sets the id of the job to which the task
 * belongs.
 * 
 * @member {string} [taskId] Gets or sets the id of the task.
 * 
 * @member {number} [subtaskId] Gets or sets the id of the subtask if the task
 * is a multi-instance task.
 * 
 * @member {string} taskState Gets or sets the current state of the task.
 * Possible values include: 'active', 'preparing', 'running', 'completed'
 * 
 * @member {object} [executionInfo] Gets or sets information about the
 * execution of the task.
 * 
 * @member {date} [executionInfo.startTime] Gets or sets the time at which the
 * task started running. If the task has been restarted or retried, this is
 * the most recent time at which the task started running.
 * 
 * @member {date} [executionInfo.endTime] Gets or sets the time at which the
 * task completed. This property is set only if the task is in the Completed
 * state.
 * 
 * @member {number} [executionInfo.exitCode] Gets or sets the exit code of the
 * task. This property is set only if the task is in completed state.
 * 
 * @member {object} [executionInfo.schedulingError] Gets or sets details of
 * any error encountered scheduling the task.
 * 
 * @member {string} [executionInfo.schedulingError.category] Gets or sets the
 * category of the task scheduling error. Possible values include:
 * 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [executionInfo.schedulingError.code] Gets or sets an
 * identifier for the task scheduling error.  Codes are invariant and are
 * intended to be consumed programmatically.
 * 
 * @member {string} [executionInfo.schedulingError.message] Gets or sets a
 * message describing the task scheduling error, intended to be suitable for
 * display in a user interface.
 * 
 * @member {array} [executionInfo.schedulingError.details] Gets or sets the
 * list of additional error details related to the scheduling error.
 * 
 * @member {number} [executionInfo.retryCount] Gets or sets the number of
 * times the task has been retried by the Batch service.
 * 
 * @member {date} [executionInfo.lastRetryTime] Gets or sets the most recent
 * time at which a retry of the task started running.
 * 
 * @member {number} [executionInfo.requeueCount] Gets or sets the number of
 * times the task has been requeued by the Batch service as the result of a
 * user request.
 * 
 * @member {date} [executionInfo.lastRequeueTime] Gets or sets the most recent
 * time at which the task has been requeued by the Batch service as the
 * result of a user request.
 * 
 */
function TaskInformation() {
}

/**
 * Defines the metadata of TaskInformation
 *
 * @returns {object} metadata of TaskInformation
 *
 */
TaskInformation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'TaskInformation',
    type: {
      name: 'Composite',
      className: 'TaskInformation',
      modelProperties: {
        taskUrl: {
          required: false,
          serializedName: 'taskUrl',
          type: {
            name: 'String'
          }
        },
        jobId: {
          required: false,
          serializedName: 'jobId',
          type: {
            name: 'String'
          }
        },
        taskId: {
          required: false,
          serializedName: 'taskId',
          type: {
            name: 'String'
          }
        },
        subtaskId: {
          required: false,
          serializedName: 'subtaskId',
          type: {
            name: 'Number'
          }
        },
        taskState: {
          required: true,
          serializedName: 'taskState',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
          }
        },
        executionInfo: {
          required: false,
          serializedName: 'executionInfo',
          type: {
            name: 'Composite',
            className: 'TaskExecutionInformation'
          }
        }
      }
    }
  };
};

module.exports = TaskInformation;
