/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the TaskInformation class.
 * @constructor
 * @summary Information about a task running on a compute node.
 *
 * @member {string} [taskUrl] The URL of the task.
 * 
 * @member {string} [jobId] The ID of the job to which the task belongs.
 * 
 * @member {string} [taskId] The ID of the task.
 * 
 * @member {number} [subtaskId] The ID of the subtask if the task is a
 * multi-instance task.
 * 
 * @member {string} taskState The current state of the task. Possible values
 * include: 'active', 'preparing', 'running', 'completed'
 * 
 * @member {object} [executionInfo] Information about the execution of the
 * task.
 * 
 * @member {date} [executionInfo.startTime] 'Running' corresponds to the
 * running state, so if the task specifies resource files or application
 * packages, then the start time reflects the time at which the task started
 * downloading or deploying these. If the task has been restarted or retried,
 * this is the most recent time at which the task started running. This
 * property is present only for tasks that are in the running or completed
 * state.
 * 
 * @member {date} [executionInfo.endTime] This property is set only if the task
 * is in the Completed state.
 * 
 * @member {number} [executionInfo.exitCode] This property is set only if the
 * task is in the completed state. In general, the exit code for a process
 * reflects the specific convention implemented by the application developer
 * for that process. If you use the exit code value to make decisions in your
 * code, be sure that you know the exit code convention used by the application
 * process. However, if the Batch service terminates the task (due to timeout,
 * or user termination via the API) you may see an operating system-defined
 * exit code.
 * 
 * @member {object} [executionInfo.schedulingError] This property is set only
 * if the task is in the completed state.
 * 
 * @member {string} [executionInfo.schedulingError.category] Possible values
 * include: 'usererror', 'servererror', 'unmapped'
 * 
 * @member {string} [executionInfo.schedulingError.code]
 * 
 * @member {string} [executionInfo.schedulingError.message]
 * 
 * @member {array} [executionInfo.schedulingError.details]
 * 
 * @member {number} [executionInfo.retryCount] The task is retried if it exits
 * with a nonzero exit code, up to the specified maxTaskRetryCount.
 * 
 * @member {date} [executionInfo.lastRetryTime] This element is present only if
 * the task was retried (i.e. retryCount is nonzero). If present, this is
 * typically the same as startTime, but may be different if the task has been
 * restarted for reasons other than retry; for example, if the compute node was
 * rebooted during a retry, then the startTime is updated but the lastRetryTime
 * is not.
 * 
 * @member {number} [executionInfo.requeueCount] When the user removes nodes
 * from a pool (by resizing/shrinking the pool) or when the job is being
 * disabled, the user can specify that running tasks on the nodes be requeued
 * for execution. This count tracks how many times the task has been requeued
 * for these reasons.
 * 
 * @member {date} [executionInfo.lastRequeueTime] This property is set only if
 * the requeueCount is nonzero.
 * 
 */
function TaskInformation() {
}

/**
 * Defines the metadata of TaskInformation
 *
 * @returns {object} metadata of TaskInformation
 *
 */
TaskInformation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'TaskInformation',
    type: {
      name: 'Composite',
      className: 'TaskInformation',
      modelProperties: {
        taskUrl: {
          required: false,
          serializedName: 'taskUrl',
          type: {
            name: 'String'
          }
        },
        jobId: {
          required: false,
          serializedName: 'jobId',
          type: {
            name: 'String'
          }
        },
        taskId: {
          required: false,
          serializedName: 'taskId',
          type: {
            name: 'String'
          }
        },
        subtaskId: {
          required: false,
          serializedName: 'subtaskId',
          type: {
            name: 'Number'
          }
        },
        taskState: {
          required: true,
          serializedName: 'taskState',
          type: {
            name: 'Enum',
            allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
          }
        },
        executionInfo: {
          required: false,
          serializedName: 'executionInfo',
          type: {
            name: 'Composite',
            className: 'TaskExecutionInformation'
          }
        }
      }
    }
  };
};

module.exports = TaskInformation;
