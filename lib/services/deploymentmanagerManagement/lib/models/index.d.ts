/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The identity type.
   */
  type: string;
  /**
   * The list of identities.
   */
  identityIds: string[];
}

/**
 * The properties that define a step.
 */
export interface PrePostStep {
  /**
   * The resource Id of the step to be run.
   */
  stepId: string;
}

/**
 * The properties that define an Azure Deployment Manager step.
 */
export interface Step {
  /**
   * The name of the step group.
   */
  name: string;
  /**
   * The list of step group names on which this step group depends on.
   */
  dependsOnStepGroups?: string[];
  /**
   * The list of steps to be run before deploying the target.
   */
  preDeploymentSteps?: PrePostStep[];
  /**
   * The resource Id of service unit to be deployed. The service unit should be from the service
   * topology referenced in targetServiceTopologyId
   */
  deploymentTargetId: string;
  /**
   * The list of steps to be run after deploying the target.
   */
  postDeploymentSteps?: PrePostStep[];
}

export interface Resource extends BaseResource {
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  */
  readonly id?: string;
  /**
   * The name of the resource
  */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
  */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
*/
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
  */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
  */
  location: string;
}

/**
 * Defines the PUT rollout request body.
*/
export interface RolloutRequest extends TrackedResource {
  /**
   * Identity for the resource.
  */
  identity: Identity;
  /**
   * The version of the build being deployed.
  */
  buildVersion: string;
  /**
   * The reference to the artifact source resource Id where the payload is located.
  */
  artifactSourceId?: string;
  /**
   * The resource Id of the service topology from which service units are being referenced in step
   * groups to be deployed.
  */
  targetServiceTopologyId: string;
  /**
   * The list of step groups that define the orchestration.
  */
  stepGroups: Step[];
}

/**
 * The resource that defines the source location where the artifacts are located.
*/
export interface ArtifactSource extends TrackedResource {
  /**
   * The type of artifact source used.
  */
  sourceType: string;
  /**
   * The path from the location that the 'authentication' property [say, a SAS URI to the blob
   * container] refers to, to the location of the artifacts. This can be used to differentiate
   * different versions of the artifacts. Or, different types of artifacts like binaries or
   * templates. The location referenced by the authentication property concatenated with this
   * optional artifactRoot path forms the artifact source location where the artifacts are expected
   * to be found.
  */
  artifactRoot?: string;
  /**
   * The authentication method to use to access the artifact source.
  */
  authentication: Authentication;
}

/**
 * Defines the authentication method and properties to access the artifacts.
*/
export interface Authentication {
  /**
   * Polymorphic Discriminator
  */
  type: string;
}

/**
 * The properties that define the source location where the artifacts are located.
*/
export interface ArtifactSourcePropertiesModel {
  /**
   * The type of artifact source used.
  */
  sourceType: string;
  /**
   * The path from the location that the 'authentication' property [say, a SAS URI to the blob
   * container] refers to, to the location of the artifacts. This can be used to differentiate
   * different versions of the artifacts. Or, different types of artifacts like binaries or
   * templates. The location referenced by the authentication property concatenated with this
   * optional artifactRoot path forms the artifact source location where the artifacts are expected
   * to be found.
  */
  artifactRoot?: string;
  /**
   * The authentication method to use to access the artifact source.
  */
  authentication: Authentication;
}

/**
 * Defines the properties to access the artifacts using an Azure Storage SAS URI.
*/
export interface SasAuthentication extends Authentication {
  /**
   * The SAS URI to the Azure Storage blob container. Any offset from the root of the container to
   * where the artifacts are located can be defined in the artifactRoot.
  */
  sasUri: string;
}

/**
 * Detailed error information of any failure.
*/
export interface CloudErrorBody {
  /**
   * Error code string.
  */
  readonly code?: string;
  /**
   * Descriptive error information.
  */
  readonly message?: string;
  /**
   * Error target
  */
  target?: string;
  /**
   * More detailed error information.
  */
  details?: CloudErrorBody[];
}

/**
 * Detailed runtime information of the rollout.
*/
export interface RolloutOperationInfo {
  /**
   * The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout
   * have been performed. If the rollout is updated with a PUT, this count is reset to 0.
  */
  readonly retryAttempt?: number;
  /**
   * True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in
   * this retry attempt. False, otherwise.
  */
  readonly skipSucceededOnRetry?: boolean;
  /**
   * The start time of the rollout in UTC.
  */
  readonly startTime?: Date;
  /**
   * The start time of the rollout in UTC. This property will not be set if the rollout has not
   * completed yet.
  */
  readonly endTime?: Date;
  /**
   * The detailed error information for any failure.
  */
  readonly error?: CloudErrorBody;
}

/**
 * Detailed information of a specific step run.
*/
export interface StepOperationInfo {
  /**
   * The name of the ARM deployment initiated as part of the step.
  */
  readonly deploymentName?: string;
  /**
   * Unique identifier to track the request for ARM-based resources.
  */
  readonly correlationId?: string;
  /**
   * Start time of the action in UTC.
  */
  readonly startTime?: Date;
  /**
   * End time of the action in UTC.
  */
  readonly endTime?: Date;
  /**
   * Last time in UTC this operation was updated.
  */
  readonly lastUpdatedTime?: Date;
  /**
   * The errors, if any, for the action.
  */
  error?: CloudErrorBody;
}

/**
 * Individual resource operation information.
*/
export interface ResourceOperation {
  /**
   * Name of the resource as specified in the artifacts. For ARM resources, this is the name of the
   * resource specified in the template.
  */
  resourceName?: string;
  /**
   * Unique identifier of the operation. For ARM resources, this is the operationId obtained from
   * ARM service.
  */
  readonly operationId?: string;
  /**
   * Type of the resource as specified in the artifacts. For ARM resources, this is the type of the
   * resource specified in the template.
  */
  resourceType?: string;
  /**
   * State of the resource deployment. For ARM resources, this is the current provisioning state of
   * the resource.
  */
  readonly provisioningState?: string;
  /**
   * Descriptive information of the resource operation.
  */
  readonly statusMessage?: string;
  /**
   * Http status code of the operation.
  */
  readonly statusCode?: string;
}

/**
 * Supplementary contextual messages during a rollout.
*/
export interface Message {
  /**
   * Time in UTC this message was provided.
  */
  readonly timeStamp?: Date;
  /**
   * The actual message text.
  */
  readonly message?: string;
}

/**
 * Defines a specific step on a target service unit.
*/
export interface RolloutStep {
  /**
   * Name of the step.
  */
  name: string;
  /**
   * Current state of the step.
  */
  readonly status?: string;
  /**
   * The step group the current step is part of.
  */
  stepGroup?: string;
  /**
   * Detailed information of specific action execution.
  */
  readonly operationInfo?: StepOperationInfo;
  /**
   * Set of resource operations that were performed, if any, on an Azure resource.
  */
  readonly resourceOperations?: ResourceOperation[];
  /**
   * Supplementary informative messages during rollout.
  */
  readonly messages?: Message[];
}

/**
 * Defines the properties of a service unit.
*/
export interface ServiceUnitProperties {
  /**
   * The Azure Resource Group to which the resources in the service unit belong to or should be
   * deployed to.
  */
  targetResourceGroup: string;
  /**
   * Describes the type of ARM deployment to be performed on the resource. Possible values include:
   * 'Incremental', 'Complete'
  */
  deploymentMode: string;
  /**
   * The artifacts for the service unit.
  */
  artifacts?: ServiceUnitArtifacts;
}

/**
 * Defines a service unit.
*/
export interface ServiceUnit extends ServiceUnitProperties {
  /**
   * Name of the service unit.
  */
  name?: string;
  /**
   * Detailed step information, if present.
  */
  steps?: RolloutStep[];
}

/**
 * The properties of a service.
*/
export interface ServiceProperties {
  /**
   * The Azure location to which the resources in the service belong to or should be deployed to.
  */
  targetLocation: string;
  /**
   * The subscription to which the resources in the service belong to or should be deployed to.
  */
  targetSubscriptionId: string;
}

/**
 * Defines a service.
*/
export interface Service extends ServiceProperties {
  /**
   * Name of the service.
  */
  name?: string;
  /**
   * The detailed information about the units that make up the service.
  */
  serviceUnits?: ServiceUnit[];
}

/**
 * Defines the rollout.
*/
export interface Rollout extends TrackedResource {
  /**
   * Identity for the resource.
  */
  identity?: Identity;
  /**
   * The version of the build being deployed.
  */
  buildVersion: string;
  /**
   * The reference to the artifact source resource Id where the payload is located.
  */
  artifactSourceId?: string;
  /**
   * The resource Id of the service topology from which service units are being referenced in step
   * groups to be deployed.
  */
  targetServiceTopologyId: string;
  /**
   * The list of step groups that define the orchestration.
  */
  stepGroups: Step[];
  /**
   * The current status of the rollout.
  */
  readonly status?: string;
  /**
   * The cardinal count of total number of retries performed on the rollout at a given time.
  */
  readonly totalRetryAttempts?: number;
  /**
   * Operational information of the rollout.
  */
  readonly operationInfo?: RolloutOperationInfo;
  /**
   * The detailed information on the services being deployed.
  */
  readonly services?: Service[];
}

/**
 * Defines the properties of a rollout.
*/
export interface RolloutPropertiesModel {
  /**
   * The current status of the rollout.
  */
  readonly status?: string;
  /**
   * The cardinal count of total number of retries performed on the rollout at a given time.
  */
  readonly totalRetryAttempts?: number;
  /**
   * Operational information of the rollout.
  */
  readonly operationInfo?: RolloutOperationInfo;
  /**
   * The detailed information on the services being deployed.
  */
  readonly services?: Service[];
}

/**
 * The resource representation of a service topology.
*/
export interface ServiceTopologyResource extends TrackedResource {
  /**
   * The resource Id of the artifact source that contains the artifacts that can be referenced in
   * the service units.
  */
  artifactSourceId?: string;
}

/**
 * The properties of a service topology.
*/
export interface ServiceTopologyProperties {
  /**
   * The resource Id of the artifact source that contains the artifacts that can be referenced in
   * the service units.
  */
  artifactSourceId?: string;
}

/**
 * The resource representation of a service in a service topology.
*/
export interface ServiceResource extends TrackedResource {
  /**
   * The Azure location to which the resources in the service belong to or should be deployed to.
  */
  targetLocation: string;
  /**
   * The subscription to which the resources in the service belong to or should be deployed to.
  */
  targetSubscriptionId: string;
}

/**
 * Represents the response of a service unit resource.
*/
export interface ServiceUnitResource extends TrackedResource {
  /**
   * The Azure Resource Group to which the resources in the service unit belong to or should be
   * deployed to.
  */
  targetResourceGroup: string;
  /**
   * Describes the type of ARM deployment to be performed on the resource. Possible values include:
   * 'Incremental', 'Complete'
  */
  deploymentMode: string;
  /**
   * The artifacts for the service unit.
  */
  artifacts?: ServiceUnitArtifacts;
}

/**
 * Defines the artifacts of a service unit.
*/
export interface ServiceUnitArtifacts {
  /**
   * The full URI of the ARM template file with the SAS token.
  */
  templateUri?: string;
  /**
   * The full URI of the ARM parameters file with the SAS token.
  */
  parametersUri?: string;
  /**
   * The path to the ARM template file relative to the artifact source.
  */
  templateArtifactSourceRelativePath?: string;
  /**
   * The path to the ARM parameters file relative to the artifact source.
  */
  parametersArtifactSourceRelativePath?: string;
}

/**
 * The detail about an operation.
*/
export interface OperationDetail {
  /**
   * The name of the provider that supports the operation.
  */
  provider?: string;
  /**
   * The resource type on which this operation can be performed.
  */
  resource?: string;
  /**
   * The name of the operation.
  */
  operation?: string;
  /**
   * The description of the operation.
  */
  description?: string;
}

/**
 * Represents an operation that can be performed on the service.
*/
export interface Operation {
  /**
   * The name of the operation.
  */
  name?: string;
  /**
   * The display name of the operation.
  */
  display?: OperationDetail;
  /**
   * The origin of the operation.
  */
  origin?: string;
  /**
   * The properties of the operation.
  */
  properties?: any;
}

/**
 * The properties of a step resource.
*/
export interface StepProperties {
  /**
   * Polymorphic Discriminator
  */
  stepType: string;
}

/**
 * The resource representation of a rollout step.
*/
export interface StepResource extends TrackedResource {
  /**
   * The properties that define the step.
  */
  properties: StepProperties;
}

/**
 * The parameters for the wait step.
*/
export interface WaitStepAttributes {
  /**
   * The duration in ISO 8601 format of how long the wait should be.
  */
  duration: string;
}

/**
 * Defines the properties of a Wait step.
*/
export interface WaitStepProperties extends StepProperties {
  /**
   * The Wait attributes
  */
  attributes?: WaitStepAttributes;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than
 * required location and tags
*/
export interface ProxyResource extends Resource {
}

/**
 * The resource model definition for a Azure Resource Manager resource with an etag.
*/
export interface AzureEntityResource extends Resource {
  /**
   * Resource Etag.
  */
  readonly etag?: string;
}
