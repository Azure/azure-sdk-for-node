/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ServiceTopologies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureDeploymentManager.
 */
export interface ServiceTopologies {


    /**
     * @summary Creates or updates a service topology.
     *
     * Synchronously creates a new service topology or updates an existing service
     * topology.
     *
     * @param {object} serviceTopologyInfo Source topology object defines the
     * resource.
     *
     * @param {string} [serviceTopologyInfo.artifactSourceId] The artifact source
     * that contains the artifacts that can be referenced in the service units.
     *
     * @param {object} [serviceTopologyInfo.tags] Resource tags.
     *
     * @param {string} serviceTopologyInfo.location The geo-location where the
     * resource lives
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceTopologyResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(serviceTopologyInfo: models.ServiceTopologyResource, resourceGroupName: string, serviceTopologyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceTopologyResource>>;

    /**
     * @summary Creates or updates a service topology.
     *
     * Synchronously creates a new service topology or updates an existing service
     * topology.
     *
     * @param {object} serviceTopologyInfo Source topology object defines the
     * resource.
     *
     * @param {string} [serviceTopologyInfo.artifactSourceId] The artifact source
     * that contains the artifacts that can be referenced in the service units.
     *
     * @param {object} [serviceTopologyInfo.tags] Resource tags.
     *
     * @param {string} serviceTopologyInfo.location The geo-location where the
     * resource lives
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceTopologyResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceTopologyResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceTopologyResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(serviceTopologyInfo: models.ServiceTopologyResource, resourceGroupName: string, serviceTopologyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceTopologyResource>;
    createOrUpdate(serviceTopologyInfo: models.ServiceTopologyResource, resourceGroupName: string, serviceTopologyName: string, callback: ServiceCallback<models.ServiceTopologyResource>): void;
    createOrUpdate(serviceTopologyInfo: models.ServiceTopologyResource, resourceGroupName: string, serviceTopologyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceTopologyResource>): void;


    /**
     * @summary Gets a topology resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceTopologyResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceTopologyResource>>;

    /**
     * @summary Gets a topology resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceTopologyResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceTopologyResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceTopologyResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceTopologyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceTopologyResource>;
    get(resourceGroupName: string, serviceTopologyName: string, callback: ServiceCallback<models.ServiceTopologyResource>): void;
    get(resourceGroupName: string, serviceTopologyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceTopologyResource>): void;


    /**
     * @summary Deletes a topology resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a topology resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Services
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureDeploymentManager.
 */
export interface Services {


    /**
     * @summary Creates or updates a service in the topology.
     *
     * Synchronously creates a new service or updates an existing service.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {object} serviceInfo The topoogy group resource object
     *
     * @param {string} serviceInfo.targetLocation The Azure location to which the
     * resources in the service belong to.
     *
     * @param {string} serviceInfo.targetSubscriptionId The subscription to which
     * the resources in the service belong to.
     *
     * @param {object} [serviceInfo.tags] Resource tags.
     *
     * @param {string} serviceInfo.location The geo-location where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceInfo: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResource>>;

    /**
     * @summary Creates or updates a service in the topology.
     *
     * Synchronously creates a new service or updates an existing service.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {object} serviceInfo The topoogy group resource object
     *
     * @param {string} serviceInfo.targetLocation The Azure location to which the
     * resources in the service belong to.
     *
     * @param {string} serviceInfo.targetSubscriptionId The subscription to which
     * the resources in the service belong to.
     *
     * @param {object} [serviceInfo.tags] Resource tags.
     *
     * @param {string} serviceInfo.location The geo-location where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceInfo: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResource>;
    createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceInfo: models.ServiceResource, callback: ServiceCallback<models.ServiceResource>): void;
    createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceInfo: models.ServiceResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResource>): void;


    /**
     * @summary Gets a service resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResource>>;

    /**
     * @summary Gets a service resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResource>;
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, callback: ServiceCallback<models.ServiceResource>): void;
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResource>): void;


    /**
     * @summary Deletes a service resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a service resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ServiceUnits
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureDeploymentManager.
 */
export interface ServiceUnits {


    /**
     * @summary Creates or updates a service unit in the service within the
     * referenced topology resource.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * operation resource returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} serviceUnitInfo The service unit resource object.
     *
     * @param {string} serviceUnitInfo.targetResourceGroup The Azure Resource Group
     * to which the resources in the service unit belong to.
     *
     * @param {string} serviceUnitInfo.deploymentMode Describes the type of ARM
     * deployment to be performed on the resource. Possible values include:
     * 'Incremental', 'Complete'
     *
     * @param {object} [serviceUnitInfo.artifacts] The artifacts for the service
     * unit.
     *
     * @param {string} [serviceUnitInfo.artifacts.templateUri] The full URI of the
     * ARM template file with the SAS token.
     *
     * @param {string} [serviceUnitInfo.artifacts.parametersUri] The full URI of
     * the ARM parameters file with the SAS token.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.templateArtifactSourceRelativePath] The path to
     * the ARM template file relative to the artifact source.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.parametersArtifactSourceRelativePath] The path to
     * the ARM parameters file relative to the artifact source.
     *
     * @param {object} [serviceUnitInfo.tags] Resource tags.
     *
     * @param {string} serviceUnitInfo.location The geo-location where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceUnitResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceUnitResource>>;

    /**
     * @summary Creates or updates a service unit in the service within the
     * referenced topology resource.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * operation resource returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} serviceUnitInfo The service unit resource object.
     *
     * @param {string} serviceUnitInfo.targetResourceGroup The Azure Resource Group
     * to which the resources in the service unit belong to.
     *
     * @param {string} serviceUnitInfo.deploymentMode Describes the type of ARM
     * deployment to be performed on the resource. Possible values include:
     * 'Incremental', 'Complete'
     *
     * @param {object} [serviceUnitInfo.artifacts] The artifacts for the service
     * unit.
     *
     * @param {string} [serviceUnitInfo.artifacts.templateUri] The full URI of the
     * ARM template file with the SAS token.
     *
     * @param {string} [serviceUnitInfo.artifacts.parametersUri] The full URI of
     * the ARM parameters file with the SAS token.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.templateArtifactSourceRelativePath] The path to
     * the ARM template file relative to the artifact source.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.parametersArtifactSourceRelativePath] The path to
     * the ARM parameters file relative to the artifact source.
     *
     * @param {object} [serviceUnitInfo.tags] Resource tags.
     *
     * @param {string} serviceUnitInfo.location The geo-location where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceUnitResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceUnitResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceUnitResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceUnitResource>;
    createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, callback: ServiceCallback<models.ServiceUnitResource>): void;
    createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceUnitResource>): void;


    /**
     * @summary Gets a service unit resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceUnitResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceUnitResource>>;

    /**
     * @summary Gets a service unit resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceUnitResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceUnitResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceUnitResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceUnitResource>;
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, callback: ServiceCallback<models.ServiceUnitResource>): void;
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceUnitResource>): void;


    /**
     * @summary Deletes a service unit resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a service unit resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates a service unit in the service within the
     * referenced topology resource.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * operation resource returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} serviceUnitInfo The service unit resource object.
     *
     * @param {string} serviceUnitInfo.targetResourceGroup The Azure Resource Group
     * to which the resources in the service unit belong to.
     *
     * @param {string} serviceUnitInfo.deploymentMode Describes the type of ARM
     * deployment to be performed on the resource. Possible values include:
     * 'Incremental', 'Complete'
     *
     * @param {object} [serviceUnitInfo.artifacts] The artifacts for the service
     * unit.
     *
     * @param {string} [serviceUnitInfo.artifacts.templateUri] The full URI of the
     * ARM template file with the SAS token.
     *
     * @param {string} [serviceUnitInfo.artifacts.parametersUri] The full URI of
     * the ARM parameters file with the SAS token.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.templateArtifactSourceRelativePath] The path to
     * the ARM template file relative to the artifact source.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.parametersArtifactSourceRelativePath] The path to
     * the ARM parameters file relative to the artifact source.
     *
     * @param {object} [serviceUnitInfo.tags] Resource tags.
     *
     * @param {string} serviceUnitInfo.location The geo-location where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceUnitResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceUnitResource>>;

    /**
     * @summary Creates or updates a service unit in the service within the
     * referenced topology resource.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * operation resource returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} serviceTopologyName The name of the service topology .
     *
     * @param {string} serviceName The name of the service resource.
     *
     * @param {string} serviceUnitName The name of the service unit resource.
     *
     * @param {object} serviceUnitInfo The service unit resource object.
     *
     * @param {string} serviceUnitInfo.targetResourceGroup The Azure Resource Group
     * to which the resources in the service unit belong to.
     *
     * @param {string} serviceUnitInfo.deploymentMode Describes the type of ARM
     * deployment to be performed on the resource. Possible values include:
     * 'Incremental', 'Complete'
     *
     * @param {object} [serviceUnitInfo.artifacts] The artifacts for the service
     * unit.
     *
     * @param {string} [serviceUnitInfo.artifacts.templateUri] The full URI of the
     * ARM template file with the SAS token.
     *
     * @param {string} [serviceUnitInfo.artifacts.parametersUri] The full URI of
     * the ARM parameters file with the SAS token.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.templateArtifactSourceRelativePath] The path to
     * the ARM template file relative to the artifact source.
     *
     * @param {string}
     * [serviceUnitInfo.artifacts.parametersArtifactSourceRelativePath] The path to
     * the ARM parameters file relative to the artifact source.
     *
     * @param {object} [serviceUnitInfo.tags] Resource tags.
     *
     * @param {string} serviceUnitInfo.location The geo-location where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceUnitResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceUnitResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceUnitResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceUnitResource>;
    beginCreateOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, callback: ServiceCallback<models.ServiceUnitResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: models.ServiceUnitResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceUnitResource>): void;
}

/**
 * @class
 * Steps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureDeploymentManager.
 */
export interface Steps {


    /**
     * @summary Creates or updates a deployment step.
     *
     * Synchronously creates a new step or updates an existing step.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} stepName The name of the deployment step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.stepInfo] The resource object.
     *
     * @param {object} options.stepInfo.properties The properties for the resource.
     *
     * @param {string} options.stepInfo.properties.stepType Polymorphic
     * Discriminator
     *
     * @param {object} [options.stepInfo.tags] Resource tags.
     *
     * @param {string} options.stepInfo.location The geo-location where the
     * resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StepResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, stepName: string, options?: { stepInfo? : models.StepResource, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StepResource>>;

    /**
     * @summary Creates or updates a deployment step.
     *
     * Synchronously creates a new step or updates an existing step.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} stepName The name of the deployment step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.stepInfo] The resource object.
     *
     * @param {object} options.stepInfo.properties The properties for the resource.
     *
     * @param {string} options.stepInfo.properties.stepType Polymorphic
     * Discriminator
     *
     * @param {object} [options.stepInfo.tags] Resource tags.
     *
     * @param {string} options.stepInfo.location The geo-location where the
     * resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StepResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StepResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StepResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, stepName: string, options?: { stepInfo? : models.StepResource, customHeaders? : { [headerName: string]: string; } }): Promise<models.StepResource>;
    createOrUpdate(resourceGroupName: string, stepName: string, callback: ServiceCallback<models.StepResource>): void;
    createOrUpdate(resourceGroupName: string, stepName: string, options: { stepInfo? : models.StepResource, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StepResource>): void;


    /**
     * @summary Gets a topology resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} stepName The name of the deployment step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StepResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StepResource>>;

    /**
     * @summary Gets a topology resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} stepName The name of the deployment step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StepResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StepResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StepResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StepResource>;
    get(resourceGroupName: string, stepName: string, callback: ServiceCallback<models.StepResource>): void;
    get(resourceGroupName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StepResource>): void;


    /**
     * @summary Deletes a deployment step.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} stepName The name of the deployment step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a deployment step.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} stepName The name of the deployment step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, stepName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Rollouts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureDeploymentManager.
 */
export interface Rollouts {


    /**
     * @summary Creates or updates a rollout.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * location header returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.rolloutRequest] Source rollout request object that
     * defines the rollout.
     *
     * @param {object} options.rolloutRequest.identity Identity for the resource.
     *
     * @param {string} options.rolloutRequest.identity.type The identity type.
     *
     * @param {array} options.rolloutRequest.identity.identityIds The list of
     * identities.
     *
     * @param {string} options.rolloutRequest.buildVersion The version of the build
     * being deployed.
     *
     * @param {string} [options.rolloutRequest.artifactSourceId] The reference to
     * the ARM resource Id where the payload is located.
     *
     * @param {string} options.rolloutRequest.targetServiceTopologyId The reference
     * to the resource Id of the service topology from which services are chosen to
     * be deployed.
     *
     * @param {array} options.rolloutRequest.stepGroups The list of steps that
     * define the orchestration.
     *
     * @param {object} [options.rolloutRequest.tags] Resource tags.
     *
     * @param {string} options.rolloutRequest.location The geo-location where the
     * resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RolloutRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, rolloutName: string, options?: { rolloutRequest? : models.RolloutRequest, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RolloutRequest>>;

    /**
     * @summary Creates or updates a rollout.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * location header returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.rolloutRequest] Source rollout request object that
     * defines the rollout.
     *
     * @param {object} options.rolloutRequest.identity Identity for the resource.
     *
     * @param {string} options.rolloutRequest.identity.type The identity type.
     *
     * @param {array} options.rolloutRequest.identity.identityIds The list of
     * identities.
     *
     * @param {string} options.rolloutRequest.buildVersion The version of the build
     * being deployed.
     *
     * @param {string} [options.rolloutRequest.artifactSourceId] The reference to
     * the ARM resource Id where the payload is located.
     *
     * @param {string} options.rolloutRequest.targetServiceTopologyId The reference
     * to the resource Id of the service topology from which services are chosen to
     * be deployed.
     *
     * @param {array} options.rolloutRequest.stepGroups The list of steps that
     * define the orchestration.
     *
     * @param {object} [options.rolloutRequest.tags] Resource tags.
     *
     * @param {string} options.rolloutRequest.location The geo-location where the
     * resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RolloutRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RolloutRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RolloutRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, rolloutName: string, options?: { rolloutRequest? : models.RolloutRequest, customHeaders? : { [headerName: string]: string; } }): Promise<models.RolloutRequest>;
    createOrUpdate(resourceGroupName: string, rolloutName: string, callback: ServiceCallback<models.RolloutRequest>): void;
    createOrUpdate(resourceGroupName: string, rolloutName: string, options: { rolloutRequest? : models.RolloutRequest, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RolloutRequest>): void;


    /**
     * @summary Gets detailed information of an ongoing or completed rollout.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.retryAttempt] Rollout retry attempt ordinal to get
     * the result of. If not specified, result of the latest attempt will be
     * returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Rollout>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, rolloutName: string, options?: { retryAttempt? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Rollout>>;

    /**
     * @summary Gets detailed information of an ongoing or completed rollout.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.retryAttempt] Rollout retry attempt ordinal to get
     * the result of. If not specified, result of the latest attempt will be
     * returned.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Rollout} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Rollout} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Rollout} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, rolloutName: string, options?: { retryAttempt? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Rollout>;
    get(resourceGroupName: string, rolloutName: string, callback: ServiceCallback<models.Rollout>): void;
    get(resourceGroupName: string, rolloutName: string, options: { retryAttempt? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Rollout>): void;


    /**
     * @summary Deletes a rollout resource.
     *
     * A rollout can only be deleted if it is in a terminal state.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, rolloutName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a rollout resource.
     *
     * A rollout can only be deleted if it is in a terminal state.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, rolloutName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, rolloutName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, rolloutName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Stops a running rollout.
     *
     * A rollout can be canceled only if it is in running state.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Rollout>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, rolloutName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Rollout>>;

    /**
     * @summary Stops a running rollout.
     *
     * A rollout can be canceled only if it is in running state.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Rollout} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Rollout} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Rollout} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, rolloutName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Rollout>;
    cancel(resourceGroupName: string, rolloutName: string, callback: ServiceCallback<models.Rollout>): void;
    cancel(resourceGroupName: string, rolloutName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Rollout>): void;


    /**
     * @summary Restarts a failed rollout and optionally skips all succeeded steps.
     *
     * A rollout can be restarted only if is in a terminal state and failed.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.skipSucceeded] If true, will skip all succeeded
     * steps so far in the rollout. If false, will execute the entire rollout again
     * regardless of the current state of individual resources. Defaults to false
     * if not specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Rollout>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restartWithHttpOperationResponse(resourceGroupName: string, rolloutName: string, options?: { skipSucceeded? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Rollout>>;

    /**
     * @summary Restarts a failed rollout and optionally skips all succeeded steps.
     *
     * A rollout can be restarted only if is in a terminal state and failed.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.skipSucceeded] If true, will skip all succeeded
     * steps so far in the rollout. If false, will execute the entire rollout again
     * regardless of the current state of individual resources. Defaults to false
     * if not specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Rollout} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Rollout} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Rollout} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restart(resourceGroupName: string, rolloutName: string, options?: { skipSucceeded? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Rollout>;
    restart(resourceGroupName: string, rolloutName: string, callback: ServiceCallback<models.Rollout>): void;
    restart(resourceGroupName: string, rolloutName: string, options: { skipSucceeded? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Rollout>): void;


    /**
     * @summary Creates or updates a rollout.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * location header returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.rolloutRequest] Source rollout request object that
     * defines the rollout.
     *
     * @param {object} options.rolloutRequest.identity Identity for the resource.
     *
     * @param {string} options.rolloutRequest.identity.type The identity type.
     *
     * @param {array} options.rolloutRequest.identity.identityIds The list of
     * identities.
     *
     * @param {string} options.rolloutRequest.buildVersion The version of the build
     * being deployed.
     *
     * @param {string} [options.rolloutRequest.artifactSourceId] The reference to
     * the ARM resource Id where the payload is located.
     *
     * @param {string} options.rolloutRequest.targetServiceTopologyId The reference
     * to the resource Id of the service topology from which services are chosen to
     * be deployed.
     *
     * @param {array} options.rolloutRequest.stepGroups The list of steps that
     * define the orchestration.
     *
     * @param {object} [options.rolloutRequest.tags] Resource tags.
     *
     * @param {string} options.rolloutRequest.location The geo-location where the
     * resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RolloutRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, rolloutName: string, options?: { rolloutRequest? : models.RolloutRequest, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RolloutRequest>>;

    /**
     * @summary Creates or updates a rollout.
     *
     * This is an asynchronous operation and can be polled to completion using the
     * location header returned by this operation.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} rolloutName The rollout name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.rolloutRequest] Source rollout request object that
     * defines the rollout.
     *
     * @param {object} options.rolloutRequest.identity Identity for the resource.
     *
     * @param {string} options.rolloutRequest.identity.type The identity type.
     *
     * @param {array} options.rolloutRequest.identity.identityIds The list of
     * identities.
     *
     * @param {string} options.rolloutRequest.buildVersion The version of the build
     * being deployed.
     *
     * @param {string} [options.rolloutRequest.artifactSourceId] The reference to
     * the ARM resource Id where the payload is located.
     *
     * @param {string} options.rolloutRequest.targetServiceTopologyId The reference
     * to the resource Id of the service topology from which services are chosen to
     * be deployed.
     *
     * @param {array} options.rolloutRequest.stepGroups The list of steps that
     * define the orchestration.
     *
     * @param {object} [options.rolloutRequest.tags] Resource tags.
     *
     * @param {string} options.rolloutRequest.location The geo-location where the
     * resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RolloutRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RolloutRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RolloutRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, rolloutName: string, options?: { rolloutRequest? : models.RolloutRequest, customHeaders? : { [headerName: string]: string; } }): Promise<models.RolloutRequest>;
    beginCreateOrUpdate(resourceGroupName: string, rolloutName: string, callback: ServiceCallback<models.RolloutRequest>): void;
    beginCreateOrUpdate(resourceGroupName: string, rolloutName: string, options: { rolloutRequest? : models.RolloutRequest, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RolloutRequest>): void;
}

/**
 * @class
 * ArtifactSources
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureDeploymentManager.
 */
export interface ArtifactSources {


    /**
     * @summary Creates or updates an Artifact source.
     *
     * Synchronously creates a new artifact source or updates an existing artifact
     * source.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.artifactSourceInfo] Source object that defines the
     * resource.
     *
     * @param {string} options.artifactSourceInfo.sourceType The type of artifact
     * source used.
     *
     * @param {string} [options.artifactSourceInfo.artifactRoot] The root folder
     * under which all artifacts for all environments are expected to be organized.
     *
     * @param {object} options.artifactSourceInfo.authentication The authentication
     * method to use to access the artifact source.
     *
     * @param {string} options.artifactSourceInfo.authentication.type Polymorphic
     * Discriminator
     *
     * @param {object} [options.artifactSourceInfo.tags] Resource tags.
     *
     * @param {string} options.artifactSourceInfo.location The geo-location where
     * the resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArtifactSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, artifactSourceName: string, options?: { artifactSourceInfo? : models.ArtifactSource, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArtifactSource>>;

    /**
     * @summary Creates or updates an Artifact source.
     *
     * Synchronously creates a new artifact source or updates an existing artifact
     * source.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.artifactSourceInfo] Source object that defines the
     * resource.
     *
     * @param {string} options.artifactSourceInfo.sourceType The type of artifact
     * source used.
     *
     * @param {string} [options.artifactSourceInfo.artifactRoot] The root folder
     * under which all artifacts for all environments are expected to be organized.
     *
     * @param {object} options.artifactSourceInfo.authentication The authentication
     * method to use to access the artifact source.
     *
     * @param {string} options.artifactSourceInfo.authentication.type Polymorphic
     * Discriminator
     *
     * @param {object} [options.artifactSourceInfo.tags] Resource tags.
     *
     * @param {string} options.artifactSourceInfo.location The geo-location where
     * the resource lives
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArtifactSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArtifactSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArtifactSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, artifactSourceName: string, options?: { artifactSourceInfo? : models.ArtifactSource, customHeaders? : { [headerName: string]: string; } }): Promise<models.ArtifactSource>;
    createOrUpdate(resourceGroupName: string, artifactSourceName: string, callback: ServiceCallback<models.ArtifactSource>): void;
    createOrUpdate(resourceGroupName: string, artifactSourceName: string, options: { artifactSourceInfo? : models.ArtifactSource, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArtifactSource>): void;


    /**
     * @summary Gets an artifact resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArtifactSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, artifactSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArtifactSource>>;

    /**
     * @summary Gets an artifact resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArtifactSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArtifactSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArtifactSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, artifactSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArtifactSource>;
    get(resourceGroupName: string, artifactSourceName: string, callback: ServiceCallback<models.ArtifactSource>): void;
    get(resourceGroupName: string, artifactSourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArtifactSource>): void;


    /**
     * @summary Deletes an artifact source resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, artifactSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes an artifact source resource.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, artifactSourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, artifactSourceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, artifactSourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureDeploymentManager.
 */
export interface Operations {


    /**
     * @summary Gets an operation resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Operation[]>>;

    /**
     * @summary Gets an operation resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Operation[]>;
    get(callback: ServiceCallback<models.Operation[]>): void;
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Operation[]>): void;
}
