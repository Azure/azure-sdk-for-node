/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines web application firewall policy.
 *
 * @extends models['Resource']
 */
class WebApplicationFirewallPolicy extends models['Resource'] {
  /**
   * Create a WebApplicationFirewallPolicy.
   * @property {object} [policySettings] Describes settings for the policy.
   * @property {string} [policySettings.enabledState] Describes if the policy
   * is in enabled or disabled state. Defaults to Enabled if not specified.
   * Possible values include: 'Disabled', 'Enabled'
   * @property {string} [policySettings.mode] Describes if it is in detection
   * mode or prevention mode at policy level. Possible values include:
   * 'Prevention', 'Detection'
   * @property {string} [policySettings.redirectUrl] If action type is
   * redirect, this field represents redirect URL for the client.
   * @property {number} [policySettings.customBlockResponseStatusCode] If the
   * action type is block, customer can override the response status code.
   * @property {string} [policySettings.customBlockResponseBody] If the action
   * type is block, customer can override the response body. The body must be
   * specified in base64 encoding.
   * @property {object} [customRules] Describes custom rules inside the policy.
   * @property {array} [customRules.rules] List of rules
   * @property {object} [managedRules] Describes managed rules inside the
   * policy.
   * @property {array} [managedRules.managedRuleSets] List of rule sets.
   * @property {array} [frontendEndpointLinks] Describes Frontend Endpoints
   * associated with this Web Application Firewall policy.
   * @property {string} [provisioningState] Provisioning state of the policy.
   * @property {string} [resourceState] Resource status of the policy. Possible
   * values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
   * 'Disabled', 'Deleting'
   * @property {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of WebApplicationFirewallPolicy
   *
   * @returns {object} metadata of WebApplicationFirewallPolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'WebApplicationFirewallPolicy',
      type: {
        name: 'Composite',
        className: 'WebApplicationFirewallPolicy',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          policySettings: {
            required: false,
            serializedName: 'properties.policySettings',
            type: {
              name: 'Composite',
              className: 'PolicySettings'
            }
          },
          customRules: {
            required: false,
            serializedName: 'properties.customRules',
            type: {
              name: 'Composite',
              className: 'CustomRuleList'
            }
          },
          managedRules: {
            required: false,
            serializedName: 'properties.managedRules',
            type: {
              name: 'Composite',
              className: 'ManagedRuleSetList'
            }
          },
          frontendEndpointLinks: {
            required: false,
            readOnly: true,
            serializedName: 'properties.frontendEndpointLinks',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FrontendEndpointLinkElementType',
                  type: {
                    name: 'Composite',
                    className: 'FrontendEndpointLink'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          resourceState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.resourceState',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = WebApplicationFirewallPolicy;
