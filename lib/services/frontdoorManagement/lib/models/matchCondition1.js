/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Define match conditions
 *
 */
class MatchCondition1 {
  /**
   * Create a MatchCondition1.
   * @property {string} matchVariable Match Variable. Possible values include:
   * 'RemoteAddr', 'RequestMethod', 'QueryString', 'PostArgs', 'RequestUri',
   * 'RequestHeader', 'RequestBody'
   * @property {string} [selector] Name of selector in RequestHeader or
   * RequestBody to be matched
   * @property {string} operator Describes operator to be matched. Possible
   * values include: 'Any', 'IPMatch', 'GeoMatch', 'Equal', 'Contains',
   * 'LessThan', 'GreaterThan', 'LessThanOrEqual', 'GreaterThanOrEqual',
   * 'BeginsWith', 'EndsWith'
   * @property {boolean} [negateCondition] Describes if this is negate
   * condition or not
   * @property {array} matchValue Match value
   */
  constructor() {
  }

  /**
   * Defines the metadata of MatchCondition1
   *
   * @returns {object} metadata of MatchCondition1
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MatchCondition',
      type: {
        name: 'Composite',
        className: 'MatchCondition1',
        modelProperties: {
          matchVariable: {
            required: true,
            serializedName: 'matchVariable',
            type: {
              name: 'String'
            }
          },
          selector: {
            required: false,
            serializedName: 'selector',
            type: {
              name: 'String'
            }
          },
          operator: {
            required: true,
            serializedName: 'operator',
            type: {
              name: 'String'
            }
          },
          negateCondition: {
            required: false,
            serializedName: 'negateCondition',
            type: {
              name: 'Boolean'
            }
          },
          matchValue: {
            required: true,
            serializedName: 'matchValue',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = MatchCondition1;
