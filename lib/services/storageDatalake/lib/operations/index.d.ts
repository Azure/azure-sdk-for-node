/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * FilesystemOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataLakeStorageClient.
 */
export interface FilesystemOperations {


    /**
     * @summary List Filesystems
     *
     * List filesystems and their properties in given account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.prefix] Filters results to filesystems within the
     * specified prefix.
     *
     * @param {string} [options.continuation] The number of filesystems returned
     * with each invocation is limited. If the number of filesystems to be returned
     * exceeds this limit, a continuation token is returned in the response header
     * x-ms-continuation. When a continuation token is  returned in the response,
     * it must be specified in a subsequent invocation of the list operation to
     * continue listing the filesystems.
     *
     * @param {number} [options.maxResults] An optional value that specifies the
     * maximum number of items to return. If omitted or greater than 5,000, the
     * response will include up to 5,000 items.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FilesystemList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { prefix? : string, continuation? : string, maxResults? : number, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FilesystemList>>;

    /**
     * @summary List Filesystems
     *
     * List filesystems and their properties in given account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.prefix] Filters results to filesystems within the
     * specified prefix.
     *
     * @param {string} [options.continuation] The number of filesystems returned
     * with each invocation is limited. If the number of filesystems to be returned
     * exceeds this limit, a continuation token is returned in the response header
     * x-ms-continuation. When a continuation token is  returned in the response,
     * it must be specified in a subsequent invocation of the list operation to
     * continue listing the filesystems.
     *
     * @param {number} [options.maxResults] An optional value that specifies the
     * maximum number of items to return. If omitted or greater than 5,000, the
     * response will include up to 5,000 items.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FilesystemList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FilesystemList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FilesystemList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { prefix? : string, continuation? : string, maxResults? : number, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.FilesystemList>;
    list(callback: ServiceCallback<models.FilesystemList>): void;
    list(options: { prefix? : string, continuation? : string, maxResults? : number, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FilesystemList>): void;


    /**
     * @summary Create Filesystem
     *
     * Create a filesystem rooted at the specified location. If the filesystem
     * already exists, the operation fails.  This operation does not support
     * conditional HTTP requests.
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xMsProperties] User-defined properties to be stored
     * with the filesystem, in the format of a comma-separated list of name and
     * value pairs "n1=v1, n2=v2, ...", where each value is base64 encoded.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(filesystem: string, options?: { xMsProperties? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Create Filesystem
     *
     * Create a filesystem rooted at the specified location. If the filesystem
     * already exists, the operation fails.  This operation does not support
     * conditional HTTP requests.
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xMsProperties] User-defined properties to be stored
     * with the filesystem, in the format of a comma-separated list of name and
     * value pairs "n1=v1, n2=v2, ...", where each value is base64 encoded.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(filesystem: string, options?: { xMsProperties? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(filesystem: string, callback: ServiceCallback<void>): void;
    create(filesystem: string, options: { xMsProperties? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Set Filesystem Properties
     *
     * Set properties for the filesystem.  This operation supports conditional HTTP
     * requests.  For more information, see [Specifying Conditional Headers for
     * Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xMsProperties] Optional. User-defined properties to
     * be stored with the filesystem, in the format of a comma-separated list of
     * name and value pairs "n1=v1, n2=v2, ...", where each value is base64
     * encoded.  If the filesystem exists, any properties not included in the list
     * will be removed.  All properties are removed if the header is omitted.  To
     * merge new and existing properties, first get all existing properties and the
     * current E-Tag, then make a conditional request with the E-Tag and include
     * values for all properties.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    setPropertiesWithHttpOperationResponse(filesystem: string, options?: { xMsProperties? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Set Filesystem Properties
     *
     * Set properties for the filesystem.  This operation supports conditional HTTP
     * requests.  For more information, see [Specifying Conditional Headers for
     * Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xMsProperties] Optional. User-defined properties to
     * be stored with the filesystem, in the format of a comma-separated list of
     * name and value pairs "n1=v1, n2=v2, ...", where each value is base64
     * encoded.  If the filesystem exists, any properties not included in the list
     * will be removed.  All properties are removed if the header is omitted.  To
     * merge new and existing properties, first get all existing properties and the
     * current E-Tag, then make a conditional request with the E-Tag and include
     * values for all properties.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    setProperties(filesystem: string, options?: { xMsProperties? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    setProperties(filesystem: string, callback: ServiceCallback<void>): void;
    setProperties(filesystem: string, options: { xMsProperties? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get Filesystem Properties.
     *
     * All system and user-defined filesystem properties are specified in the
     * response headers.
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPropertiesWithHttpOperationResponse(filesystem: string, options?: { xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Get Filesystem Properties.
     *
     * All system and user-defined filesystem properties are specified in the
     * response headers.
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProperties(filesystem: string, options?: { xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getProperties(filesystem: string, callback: ServiceCallback<void>): void;
    getProperties(filesystem: string, options: { xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Delete Filesystem
     *
     * Marks the filesystem for deletion.  When a filesystem is deleted, a
     * filesystem with the same identifier cannot be created for at least 30
     * seconds. While the filesystem is being deleted, attempts to create a
     * filesystem with the same identifier will fail with status code 409
     * (Conflict), with the service returning additional error information
     * indicating that the filesystem is being deleted. All other operations,
     * including operations on any files or directories within the filesystem, will
     * fail with status code 404 (Not Found) while the filesystem is being deleted.
     * This operation supports conditional HTTP requests.  For more information,
     * see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(filesystem: string, options?: { ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete Filesystem
     *
     * Marks the filesystem for deletion.  When a filesystem is deleted, a
     * filesystem with the same identifier cannot be created for at least 30
     * seconds. While the filesystem is being deleted, attempts to create a
     * filesystem with the same identifier will fail with status code 409
     * (Conflict), with the service returning additional error information
     * indicating that the filesystem is being deleted. All other operations,
     * including operations on any files or directories within the filesystem, will
     * fail with status code 404 (Not Found) while the filesystem is being deleted.
     * This operation supports conditional HTTP requests.  For more information,
     * see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(filesystem: string, options?: { ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(filesystem: string, callback: ServiceCallback<void>): void;
    deleteMethod(filesystem: string, options: { ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * PathOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataLakeStorageClient.
 */
export interface PathOperations {


    /**
     * @summary List Paths
     *
     * List filesystem paths and their properties.
     *
     * @param {boolean} recursive If "true", all paths are listed; otherwise, only
     * paths at the root of the filesystem are listed.  If "directory" is
     * specified, the list will only include paths that share the same root.
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.directory] Filters results to paths within the
     * specified directory. An error occurs if the directory does not exist.
     *
     * @param {string} [options.continuation] The number of paths returned with
     * each invocation is limited. If the number of paths to be returned exceeds
     * this limit, a continuation token is returned in the response header
     * x-ms-continuation. When a continuation token is  returned in the response,
     * it must be specified in a subsequent invocation of the list operation to
     * continue listing the paths.
     *
     * @param {number} [options.maxResults] An optional value that specifies the
     * maximum number of items to return. If omitted or greater than 5,000, the
     * response will include up to 5,000 items.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PathList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(recursive: boolean, filesystem: string, options?: { directory? : string, continuation? : string, maxResults? : number, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PathList>>;

    /**
     * @summary List Paths
     *
     * List filesystem paths and their properties.
     *
     * @param {boolean} recursive If "true", all paths are listed; otherwise, only
     * paths at the root of the filesystem are listed.  If "directory" is
     * specified, the list will only include paths that share the same root.
     *
     * @param {string} filesystem The filesystem identifier.  The value must start
     * and end with a letter or number and must contain only letters, numbers, and
     * the dash (-) character.  Consecutive dashes are not permitted.  All letters
     * must be lowercase.  The value must have between 3 and 63 characters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.directory] Filters results to paths within the
     * specified directory. An error occurs if the directory does not exist.
     *
     * @param {string} [options.continuation] The number of paths returned with
     * each invocation is limited. If the number of paths to be returned exceeds
     * this limit, a continuation token is returned in the response header
     * x-ms-continuation. When a continuation token is  returned in the response,
     * it must be specified in a subsequent invocation of the list operation to
     * continue listing the paths.
     *
     * @param {number} [options.maxResults] An optional value that specifies the
     * maximum number of items to return. If omitted or greater than 5,000, the
     * response will include up to 5,000 items.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PathList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PathList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PathList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(recursive: boolean, filesystem: string, options?: { directory? : string, continuation? : string, maxResults? : number, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PathList>;
    list(recursive: boolean, filesystem: string, callback: ServiceCallback<models.PathList>): void;
    list(recursive: boolean, filesystem: string, options: { directory? : string, continuation? : string, maxResults? : number, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PathList>): void;


    /**
     * @summary Create File | Create Directory | Rename File | Rename Directory
     *
     * Create or rename a file or directory.    By default, the destination is
     * overwritten and if the destination already exists and has a lease the lease
     * is broken.  This operation supports conditional HTTP requests.  For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * To fail if the destination already exists, use a conditional request with
     * If-None-Match: "*".
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.resource] Required only for Create File and Create
     * Directory. The value must be "file" or "directory". Possible values include:
     * 'directory', 'file'
     *
     * @param {string} [options.continuation] Optional.  When renaming a directory,
     * the number of paths that are renamed with each invocation is limited.  If
     * the number of paths to be renamed exceeds this limit, a continuation token
     * is returned in this response header.  When a continuation token is returned
     * in the response, it must be specified in a subsequent invocation of the
     * rename operation to continue renaming the directory.
     *
     * @param {string} [options.mode] Optional. Valid only when namespace is
     * enabled. This parameter determines the behavior of the rename operation. The
     * value must be "legacy" or "posix", and the default value will be "posix".
     * Possible values include: 'legacy', 'posix'
     *
     * @param {string} [options.cacheControl] Optional.  The service stores this
     * value and includes it in the "Cache-Control" response header for "Read File"
     * operations for "Read File" operations.
     *
     * @param {string} [options.contentEncoding] Optional.  Specifies which content
     * encodings have been applied to the file. This value is returned to the
     * client when the "Read File" operation is performed.
     *
     * @param {string} [options.contentLanguage] Optional.  Specifies the natural
     * language used by the intended audience for the file.
     *
     * @param {string} [options.contentDisposition] Optional.  The service stores
     * this value and includes it in the "Content-Disposition" response header for
     * "Read File" operations.
     *
     * @param {string} [options.xMsCacheControl] Optional.  The service stores this
     * value and includes it in the "Cache-Control" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentType] Optional.  The service stores this
     * value and includes it in the "Content-Type" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentEncoding] Optional.  The service stores
     * this value and includes it in the "Content-Encoding" response header for
     * "Read File" operations.
     *
     * @param {string} [options.xMsContentLanguage] Optional.  The service stores
     * this value and includes it in the "Content-Language" response header for
     * "Read File" operations.
     *
     * @param {string} [options.xMsContentDisposition] Optional.  The service
     * stores this value and includes it in the "Content-Disposition" response
     * header for "Read File" operations.
     *
     * @param {string} [options.xMsRenameSource] An optional file or directory to
     * be renamed.  The value must have the following format:
     * "/{filesysystem}/{path}".  If "x-ms-properties" is specified, the properties
     * will overwrite the existing properties; otherwise, the existing properties
     * will be preserved.
     *
     * @param {string} [options.xMsLeaseId] Optional.  A lease ID for the path
     * specified in the URI.  The path to be overwritten must have an active lease
     * and the lease ID must match.
     *
     * @param {string} [options.xMsProposedLeaseId] Optional for create operations.
     * Required when "x-ms-lease-action" is used.  A lease will be acquired using
     * the proposed ID when the resource is created.
     *
     * @param {string} [options.xMsSourceLeaseId] Optional for rename operations.
     * A lease ID for the source path.  The source path must have an active lease
     * and the lease ID must match.
     *
     * @param {string} [options.xMsProperties] Optional.  User-defined properties
     * to be stored with the file or directory, in the format of a comma-separated
     * list of name and value pairs "n1=v1, n2=v2, ...", where each value is base64
     * encoded.
     *
     * @param {string} [options.xMsPermissions] Optional and only valid if
     * Hierarchical Namespace is enabled for the account. Sets POSIX access
     * permissions for the file owner, the file owning group, and others. Each
     * class may be granted read, write, or execute permission.  The sticky bit is
     * also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g.
     * 0766) are supported.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsSourceIfMatch] Optional.  An ETag value. Specify
     * this header to perform the rename operation only if the source's ETag
     * matches the value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.xMsSourceIfNoneMatch] Optional.  An ETag value or
     * the special wildcard ("*") value. Specify this header to perform the rename
     * operation only if the source's ETag does not match the value specified. The
     * ETag must be specified in quotes.
     *
     * @param {string} [options.xMsSourceIfModifiedSince] Optional. A date and time
     * value. Specify this header to perform the rename operation only if the
     * source has been modified since the specified date and time.
     *
     * @param {string} [options.xMsSourceIfUnmodifiedSince] Optional. A date and
     * time value. Specify this header to perform the rename operation only if the
     * source has not been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(filesystem: string, path: string, options?: { resource? : string, continuation? : string, mode? : string, cacheControl? : string, contentEncoding? : string, contentLanguage? : string, contentDisposition? : string, xMsCacheControl? : string, xMsContentType? : string, xMsContentEncoding? : string, xMsContentLanguage? : string, xMsContentDisposition? : string, xMsRenameSource? : string, xMsLeaseId? : string, xMsProposedLeaseId? : string, xMsSourceLeaseId? : string, xMsProperties? : string, xMsPermissions? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsSourceIfMatch? : string, xMsSourceIfNoneMatch? : string, xMsSourceIfModifiedSince? : string, xMsSourceIfUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Create File | Create Directory | Rename File | Rename Directory
     *
     * Create or rename a file or directory.    By default, the destination is
     * overwritten and if the destination already exists and has a lease the lease
     * is broken.  This operation supports conditional HTTP requests.  For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * To fail if the destination already exists, use a conditional request with
     * If-None-Match: "*".
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.resource] Required only for Create File and Create
     * Directory. The value must be "file" or "directory". Possible values include:
     * 'directory', 'file'
     *
     * @param {string} [options.continuation] Optional.  When renaming a directory,
     * the number of paths that are renamed with each invocation is limited.  If
     * the number of paths to be renamed exceeds this limit, a continuation token
     * is returned in this response header.  When a continuation token is returned
     * in the response, it must be specified in a subsequent invocation of the
     * rename operation to continue renaming the directory.
     *
     * @param {string} [options.mode] Optional. Valid only when namespace is
     * enabled. This parameter determines the behavior of the rename operation. The
     * value must be "legacy" or "posix", and the default value will be "posix".
     * Possible values include: 'legacy', 'posix'
     *
     * @param {string} [options.cacheControl] Optional.  The service stores this
     * value and includes it in the "Cache-Control" response header for "Read File"
     * operations for "Read File" operations.
     *
     * @param {string} [options.contentEncoding] Optional.  Specifies which content
     * encodings have been applied to the file. This value is returned to the
     * client when the "Read File" operation is performed.
     *
     * @param {string} [options.contentLanguage] Optional.  Specifies the natural
     * language used by the intended audience for the file.
     *
     * @param {string} [options.contentDisposition] Optional.  The service stores
     * this value and includes it in the "Content-Disposition" response header for
     * "Read File" operations.
     *
     * @param {string} [options.xMsCacheControl] Optional.  The service stores this
     * value and includes it in the "Cache-Control" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentType] Optional.  The service stores this
     * value and includes it in the "Content-Type" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentEncoding] Optional.  The service stores
     * this value and includes it in the "Content-Encoding" response header for
     * "Read File" operations.
     *
     * @param {string} [options.xMsContentLanguage] Optional.  The service stores
     * this value and includes it in the "Content-Language" response header for
     * "Read File" operations.
     *
     * @param {string} [options.xMsContentDisposition] Optional.  The service
     * stores this value and includes it in the "Content-Disposition" response
     * header for "Read File" operations.
     *
     * @param {string} [options.xMsRenameSource] An optional file or directory to
     * be renamed.  The value must have the following format:
     * "/{filesysystem}/{path}".  If "x-ms-properties" is specified, the properties
     * will overwrite the existing properties; otherwise, the existing properties
     * will be preserved.
     *
     * @param {string} [options.xMsLeaseId] Optional.  A lease ID for the path
     * specified in the URI.  The path to be overwritten must have an active lease
     * and the lease ID must match.
     *
     * @param {string} [options.xMsProposedLeaseId] Optional for create operations.
     * Required when "x-ms-lease-action" is used.  A lease will be acquired using
     * the proposed ID when the resource is created.
     *
     * @param {string} [options.xMsSourceLeaseId] Optional for rename operations.
     * A lease ID for the source path.  The source path must have an active lease
     * and the lease ID must match.
     *
     * @param {string} [options.xMsProperties] Optional.  User-defined properties
     * to be stored with the file or directory, in the format of a comma-separated
     * list of name and value pairs "n1=v1, n2=v2, ...", where each value is base64
     * encoded.
     *
     * @param {string} [options.xMsPermissions] Optional and only valid if
     * Hierarchical Namespace is enabled for the account. Sets POSIX access
     * permissions for the file owner, the file owning group, and others. Each
     * class may be granted read, write, or execute permission.  The sticky bit is
     * also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g.
     * 0766) are supported.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsSourceIfMatch] Optional.  An ETag value. Specify
     * this header to perform the rename operation only if the source's ETag
     * matches the value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.xMsSourceIfNoneMatch] Optional.  An ETag value or
     * the special wildcard ("*") value. Specify this header to perform the rename
     * operation only if the source's ETag does not match the value specified. The
     * ETag must be specified in quotes.
     *
     * @param {string} [options.xMsSourceIfModifiedSince] Optional. A date and time
     * value. Specify this header to perform the rename operation only if the
     * source has been modified since the specified date and time.
     *
     * @param {string} [options.xMsSourceIfUnmodifiedSince] Optional. A date and
     * time value. Specify this header to perform the rename operation only if the
     * source has not been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(filesystem: string, path: string, options?: { resource? : string, continuation? : string, mode? : string, cacheControl? : string, contentEncoding? : string, contentLanguage? : string, contentDisposition? : string, xMsCacheControl? : string, xMsContentType? : string, xMsContentEncoding? : string, xMsContentLanguage? : string, xMsContentDisposition? : string, xMsRenameSource? : string, xMsLeaseId? : string, xMsProposedLeaseId? : string, xMsSourceLeaseId? : string, xMsProperties? : string, xMsPermissions? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsSourceIfMatch? : string, xMsSourceIfNoneMatch? : string, xMsSourceIfModifiedSince? : string, xMsSourceIfUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(filesystem: string, path: string, callback: ServiceCallback<void>): void;
    create(filesystem: string, path: string, options: { resource? : string, continuation? : string, mode? : string, cacheControl? : string, contentEncoding? : string, contentLanguage? : string, contentDisposition? : string, xMsCacheControl? : string, xMsContentType? : string, xMsContentEncoding? : string, xMsContentLanguage? : string, xMsContentDisposition? : string, xMsRenameSource? : string, xMsLeaseId? : string, xMsProposedLeaseId? : string, xMsSourceLeaseId? : string, xMsProperties? : string, xMsPermissions? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsSourceIfMatch? : string, xMsSourceIfNoneMatch? : string, xMsSourceIfModifiedSince? : string, xMsSourceIfUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Append Data | Flush Data | Set Properties | Set Access Control
     *
     * Uploads data to be appended to a file, flushes (writes) previously uploaded
     * data to a file, sets properties for a file or directory, or sets access
     * control for a file or directory. Data can only be appended to a file. This
     * operation supports conditional HTTP requests. For more information, see
     * [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} action The action must be "append" to upload data to be
     * appended to a file, "flush" to flush previously uploaded data to a file,
     * "setProperties" to set the properties of a file or directory, or
     * "setAccessControl" to set the owner, group, permissions, or access control
     * list for a file or directory.  Note that Hierarchical Namespace must be
     * enabled for the account in order to use access control.  Also note that the
     * Access Control List (ACL) includes permissions for the owner, owning group,
     * and others, so the x-ms-permissions and x-ms-acl request headers are
     * mutually exclusive. Possible values include: 'append', 'flush',
     * 'setProperties', 'setAccessControl'
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.position] This parameter allows the caller to
     * upload data in parallel and control the order in which it is appended to the
     * file.  It is required when uploading data to be appended to the file and
     * when flushing previously uploaded data to the file.  The value must be the
     * position where the data is to be appended.  Uploaded data is not immediately
     * flushed, or written, to the file.  To flush, the previously uploaded data
     * must be contiguous, the position parameter must be specified and equal to
     * the length of the file after all data has been written, and there must not
     * be a request entity body included with the request.
     *
     * @param {boolean} [options.retainUncommittedData] Valid only for flush
     * operations.  If "true", uncommitted data is retained after the flush
     * operation completes; otherwise, the uncommitted data is deleted after the
     * flush operation.  The default is false.  Data at offsets less than the
     * specified position are written to the file when flush succeeds, but this
     * optional parameter allows data after the flush position to be retained for a
     * future flush operation.
     *
     * @param {string} [options.contentLength] Required for "Append Data" and
     * "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the
     * request content in bytes for "Append Data".
     *
     * @param {string} [options.xMsLeaseAction] Optional.  The lease action can be
     * "renew" to renew an existing lease or "release" to release a lease. Possible
     * values include: 'renew', 'release'
     *
     * @param {string} [options.xMsLeaseId] The lease ID must be specified if there
     * is an active lease.
     *
     * @param {string} [options.xMsCacheControl] Optional and only valid for flush
     * and set properties operations.  The service stores this value and includes
     * it in the "Cache-Control" response header for "Read File" operations.
     *
     * @param {string} [options.xMsContentType] Optional and only valid for flush
     * and set properties operations.  The service stores this value and includes
     * it in the "Content-Type" response header for "Read File" operations.
     *
     * @param {string} [options.xMsContentDisposition] Optional and only valid for
     * flush and set properties operations.  The service stores this value and
     * includes it in the "Content-Disposition" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentEncoding] Optional and only valid for
     * flush and set properties operations.  The service stores this value and
     * includes it in the "Content-Encoding" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentLanguage] Optional and only valid for
     * flush and set properties operations.  The service stores this value and
     * includes it in the "Content-Language" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsProperties] Optional.  User-defined properties
     * to be stored with the file or directory, in the format of a comma-separated
     * list of name and value pairs "n1=v1, n2=v2, ...", where each value is base64
     * encoded.  Valid only for the setProperties operation.  If the file or
     * directory exists, any properties not included in the list will be removed.
     * All properties are removed if the header is omitted.  To merge new and
     * existing properties, first get all existing properties and the current
     * E-Tag, then make a conditional request with the E-Tag and include values for
     * all properties.
     *
     * @param {string} [options.xMsOwner] Optional and valid only for the
     * setAccessControl operation. Sets the owner of the file or directory.
     *
     * @param {string} [options.xMsGroup] Optional and valid only for the
     * setAccessControl operation. Sets the owning group of the file or directory.
     *
     * @param {string} [options.xMsPermissions] Optional and only valid if
     * Hierarchical Namespace is enabled for the account. Sets POSIX access
     * permissions for the file owner, the file owning group, and others. Each
     * class may be granted read, write, or execute permission.  The sticky bit is
     * also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g.
     * 0766) are supported. Invalid in conjunction with x-ms-acl.
     *
     * @param {string} [options.xMsAcl] Optional and valid only for the
     * setAccessControl operation. Sets POSIX access control rights on files and
     * directories. The value is a comma-separated list of access control entries
     * that fully replaces the existing access control list (ACL).  Each access
     * control entry (ACE) consists of a scope, a type, a user or group identifier,
     * and permissions in the format "[scope:][type]:[id]:[permissions]". The scope
     * must be "default" to indicate the ACE belongs to the default ACL for a
     * directory; otherwise scope is implicit and the ACE belongs to the access
     * ACL.  There are four ACE types: "user" grants rights to the owner or a named
     * user, "group" grants rights to the owning group or a named group, "mask"
     * restricts rights granted to named users and the members of groups, and
     * "other" grants rights to all users not found in any of the other entries.
     * The user or group identifier is omitted for entries of type "mask" and
     * "other".  The user or group identifier is also omitted for the owner and
     * owning group.  The permission field is a 3-character sequence where the
     * first character is 'r' to grant read access, the second character is 'w' to
     * grant write access, and the third character is 'x' to grant execute
     * permission.  If access is not granted, the '-' character is used to denote
     * that the permission is denied. For example, the following ACL grants read,
     * write, and execute rights to the file owner and john.doe@contoso, the read
     * right to the owning group, and nothing to everyone else:
     * "user::rwx,user:john.doe@contoso:rwx,group::r--,other::---,mask=rwx".
     * Invalid in conjunction with x-ms-permissions.
     *
     * @param {string} [options.ifMatch] Optional for Flush Data and Set
     * Properties, but invalid for Append Data.  An ETag value. Specify this header
     * to perform the operation only if the resource's ETag matches the value
     * specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional for Flush Data and Set
     * Properties, but invalid for Append Data.  An ETag value or the special
     * wildcard ("*") value. Specify this header to perform the operation only if
     * the resource's ETag does not match the value specified. The ETag must be
     * specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional for Flush Data and Set
     * Properties, but invalid for Append Data. A date and time value. Specify this
     * header to perform the operation only if the resource has been modified since
     * the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional for Flush Data and Set
     * Properties, but invalid for Append Data. A date and time value. Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date and time.
     *
     * @param {object} [options.requestBody] Valid only for append operations.  The
     * data to be uploaded and appended to the file.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(action: string, filesystem: string, path: string, options?: { position? : number, retainUncommittedData? : boolean, contentLength? : string, xMsLeaseAction? : string, xMsLeaseId? : string, xMsCacheControl? : string, xMsContentType? : string, xMsContentDisposition? : string, xMsContentEncoding? : string, xMsContentLanguage? : string, xMsProperties? : string, xMsOwner? : string, xMsGroup? : string, xMsPermissions? : string, xMsAcl? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, requestBody? : stream.Readable, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Append Data | Flush Data | Set Properties | Set Access Control
     *
     * Uploads data to be appended to a file, flushes (writes) previously uploaded
     * data to a file, sets properties for a file or directory, or sets access
     * control for a file or directory. Data can only be appended to a file. This
     * operation supports conditional HTTP requests. For more information, see
     * [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} action The action must be "append" to upload data to be
     * appended to a file, "flush" to flush previously uploaded data to a file,
     * "setProperties" to set the properties of a file or directory, or
     * "setAccessControl" to set the owner, group, permissions, or access control
     * list for a file or directory.  Note that Hierarchical Namespace must be
     * enabled for the account in order to use access control.  Also note that the
     * Access Control List (ACL) includes permissions for the owner, owning group,
     * and others, so the x-ms-permissions and x-ms-acl request headers are
     * mutually exclusive. Possible values include: 'append', 'flush',
     * 'setProperties', 'setAccessControl'
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.position] This parameter allows the caller to
     * upload data in parallel and control the order in which it is appended to the
     * file.  It is required when uploading data to be appended to the file and
     * when flushing previously uploaded data to the file.  The value must be the
     * position where the data is to be appended.  Uploaded data is not immediately
     * flushed, or written, to the file.  To flush, the previously uploaded data
     * must be contiguous, the position parameter must be specified and equal to
     * the length of the file after all data has been written, and there must not
     * be a request entity body included with the request.
     *
     * @param {boolean} [options.retainUncommittedData] Valid only for flush
     * operations.  If "true", uncommitted data is retained after the flush
     * operation completes; otherwise, the uncommitted data is deleted after the
     * flush operation.  The default is false.  Data at offsets less than the
     * specified position are written to the file when flush succeeds, but this
     * optional parameter allows data after the flush position to be retained for a
     * future flush operation.
     *
     * @param {string} [options.contentLength] Required for "Append Data" and
     * "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the
     * request content in bytes for "Append Data".
     *
     * @param {string} [options.xMsLeaseAction] Optional.  The lease action can be
     * "renew" to renew an existing lease or "release" to release a lease. Possible
     * values include: 'renew', 'release'
     *
     * @param {string} [options.xMsLeaseId] The lease ID must be specified if there
     * is an active lease.
     *
     * @param {string} [options.xMsCacheControl] Optional and only valid for flush
     * and set properties operations.  The service stores this value and includes
     * it in the "Cache-Control" response header for "Read File" operations.
     *
     * @param {string} [options.xMsContentType] Optional and only valid for flush
     * and set properties operations.  The service stores this value and includes
     * it in the "Content-Type" response header for "Read File" operations.
     *
     * @param {string} [options.xMsContentDisposition] Optional and only valid for
     * flush and set properties operations.  The service stores this value and
     * includes it in the "Content-Disposition" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentEncoding] Optional and only valid for
     * flush and set properties operations.  The service stores this value and
     * includes it in the "Content-Encoding" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsContentLanguage] Optional and only valid for
     * flush and set properties operations.  The service stores this value and
     * includes it in the "Content-Language" response header for "Read File"
     * operations.
     *
     * @param {string} [options.xMsProperties] Optional.  User-defined properties
     * to be stored with the file or directory, in the format of a comma-separated
     * list of name and value pairs "n1=v1, n2=v2, ...", where each value is base64
     * encoded.  Valid only for the setProperties operation.  If the file or
     * directory exists, any properties not included in the list will be removed.
     * All properties are removed if the header is omitted.  To merge new and
     * existing properties, first get all existing properties and the current
     * E-Tag, then make a conditional request with the E-Tag and include values for
     * all properties.
     *
     * @param {string} [options.xMsOwner] Optional and valid only for the
     * setAccessControl operation. Sets the owner of the file or directory.
     *
     * @param {string} [options.xMsGroup] Optional and valid only for the
     * setAccessControl operation. Sets the owning group of the file or directory.
     *
     * @param {string} [options.xMsPermissions] Optional and only valid if
     * Hierarchical Namespace is enabled for the account. Sets POSIX access
     * permissions for the file owner, the file owning group, and others. Each
     * class may be granted read, write, or execute permission.  The sticky bit is
     * also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g.
     * 0766) are supported. Invalid in conjunction with x-ms-acl.
     *
     * @param {string} [options.xMsAcl] Optional and valid only for the
     * setAccessControl operation. Sets POSIX access control rights on files and
     * directories. The value is a comma-separated list of access control entries
     * that fully replaces the existing access control list (ACL).  Each access
     * control entry (ACE) consists of a scope, a type, a user or group identifier,
     * and permissions in the format "[scope:][type]:[id]:[permissions]". The scope
     * must be "default" to indicate the ACE belongs to the default ACL for a
     * directory; otherwise scope is implicit and the ACE belongs to the access
     * ACL.  There are four ACE types: "user" grants rights to the owner or a named
     * user, "group" grants rights to the owning group or a named group, "mask"
     * restricts rights granted to named users and the members of groups, and
     * "other" grants rights to all users not found in any of the other entries.
     * The user or group identifier is omitted for entries of type "mask" and
     * "other".  The user or group identifier is also omitted for the owner and
     * owning group.  The permission field is a 3-character sequence where the
     * first character is 'r' to grant read access, the second character is 'w' to
     * grant write access, and the third character is 'x' to grant execute
     * permission.  If access is not granted, the '-' character is used to denote
     * that the permission is denied. For example, the following ACL grants read,
     * write, and execute rights to the file owner and john.doe@contoso, the read
     * right to the owning group, and nothing to everyone else:
     * "user::rwx,user:john.doe@contoso:rwx,group::r--,other::---,mask=rwx".
     * Invalid in conjunction with x-ms-permissions.
     *
     * @param {string} [options.ifMatch] Optional for Flush Data and Set
     * Properties, but invalid for Append Data.  An ETag value. Specify this header
     * to perform the operation only if the resource's ETag matches the value
     * specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional for Flush Data and Set
     * Properties, but invalid for Append Data.  An ETag value or the special
     * wildcard ("*") value. Specify this header to perform the operation only if
     * the resource's ETag does not match the value specified. The ETag must be
     * specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional for Flush Data and Set
     * Properties, but invalid for Append Data. A date and time value. Specify this
     * header to perform the operation only if the resource has been modified since
     * the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional for Flush Data and Set
     * Properties, but invalid for Append Data. A date and time value. Specify this
     * header to perform the operation only if the resource has not been modified
     * since the specified date and time.
     *
     * @param {object} [options.requestBody] Valid only for append operations.  The
     * data to be uploaded and appended to the file.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(action: string, filesystem: string, path: string, options?: { position? : number, retainUncommittedData? : boolean, contentLength? : string, xMsLeaseAction? : string, xMsLeaseId? : string, xMsCacheControl? : string, xMsContentType? : string, xMsContentDisposition? : string, xMsContentEncoding? : string, xMsContentLanguage? : string, xMsProperties? : string, xMsOwner? : string, xMsGroup? : string, xMsPermissions? : string, xMsAcl? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, requestBody? : stream.Readable, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(action: string, filesystem: string, path: string, callback: ServiceCallback<void>): void;
    update(action: string, filesystem: string, path: string, options: { position? : number, retainUncommittedData? : boolean, contentLength? : string, xMsLeaseAction? : string, xMsLeaseId? : string, xMsCacheControl? : string, xMsContentType? : string, xMsContentDisposition? : string, xMsContentEncoding? : string, xMsContentLanguage? : string, xMsProperties? : string, xMsOwner? : string, xMsGroup? : string, xMsPermissions? : string, xMsAcl? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, requestBody? : stream.Readable, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Lease Path
     *
     * Create and manage a lease to restrict write and delete access to the path.
     * This operation supports conditional HTTP requests.  For more information,
     * see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} xMsLeaseAction There are five lease actions: "acquire",
     * "break", "change", "renew", and "release". Use "acquire" and specify the
     * "x-ms-proposed-lease-id" and "x-ms-lease-duration" to acquire a new lease.
     * Use "break" to break an existing lease. When a lease is broken, the lease
     * break period is allowed to elapse, during which time no lease operation
     * except break and release can be performed on the file. When a lease is
     * successfully broken, the response indicates the interval in seconds until a
     * new lease can be acquired. Use "change" and specify the current lease ID in
     * "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change
     * the lease ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
     * to renew an existing lease. Use "release" and specify the "x-ms-lease-id" to
     * release a lease. Possible values include: 'acquire', 'break', 'change',
     * 'renew', 'release'
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.xMsLeaseDuration] The lease duration is required to
     * acquire a lease, and specifies the duration of the lease in seconds.  The
     * lease duration must be between 15 and 60 seconds or -1 for infinite lease.
     *
     * @param {number} [options.xMsLeaseBreakPeriod] The lease break period
     * duration is optional to break a lease, and  specifies the break period of
     * the lease in seconds.  The lease break  duration must be between 0 and 60
     * seconds.
     *
     * @param {string} [options.xMsLeaseId] Required when "x-ms-lease-action" is
     * "renew", "change" or "release". For the renew and release actions, this must
     * match the current lease ID.
     *
     * @param {string} [options.xMsProposedLeaseId] Required when
     * "x-ms-lease-action" is "acquire" or "change".  A lease will be acquired with
     * this lease ID if the operation is successful.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    leaseWithHttpOperationResponse(xMsLeaseAction: string, filesystem: string, path: string, options?: { xMsLeaseDuration? : number, xMsLeaseBreakPeriod? : number, xMsLeaseId? : string, xMsProposedLeaseId? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Lease Path
     *
     * Create and manage a lease to restrict write and delete access to the path.
     * This operation supports conditional HTTP requests.  For more information,
     * see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} xMsLeaseAction There are five lease actions: "acquire",
     * "break", "change", "renew", and "release". Use "acquire" and specify the
     * "x-ms-proposed-lease-id" and "x-ms-lease-duration" to acquire a new lease.
     * Use "break" to break an existing lease. When a lease is broken, the lease
     * break period is allowed to elapse, during which time no lease operation
     * except break and release can be performed on the file. When a lease is
     * successfully broken, the response indicates the interval in seconds until a
     * new lease can be acquired. Use "change" and specify the current lease ID in
     * "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change
     * the lease ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
     * to renew an existing lease. Use "release" and specify the "x-ms-lease-id" to
     * release a lease. Possible values include: 'acquire', 'break', 'change',
     * 'renew', 'release'
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.xMsLeaseDuration] The lease duration is required to
     * acquire a lease, and specifies the duration of the lease in seconds.  The
     * lease duration must be between 15 and 60 seconds or -1 for infinite lease.
     *
     * @param {number} [options.xMsLeaseBreakPeriod] The lease break period
     * duration is optional to break a lease, and  specifies the break period of
     * the lease in seconds.  The lease break  duration must be between 0 and 60
     * seconds.
     *
     * @param {string} [options.xMsLeaseId] Required when "x-ms-lease-action" is
     * "renew", "change" or "release". For the renew and release actions, this must
     * match the current lease ID.
     *
     * @param {string} [options.xMsProposedLeaseId] Required when
     * "x-ms-lease-action" is "acquire" or "change".  A lease will be acquired with
     * this lease ID if the operation is successful.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    lease(xMsLeaseAction: string, filesystem: string, path: string, options?: { xMsLeaseDuration? : number, xMsLeaseBreakPeriod? : number, xMsLeaseId? : string, xMsProposedLeaseId? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    lease(xMsLeaseAction: string, filesystem: string, path: string, callback: ServiceCallback<void>): void;
    lease(xMsLeaseAction: string, filesystem: string, path: string, options: { xMsLeaseDuration? : number, xMsLeaseBreakPeriod? : number, xMsLeaseId? : string, xMsProposedLeaseId? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Read File
     *
     * Read the contents of a file.  For read operations, range requests are
     * supported. This operation supports conditional HTTP requests.  For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.range] The HTTP Range request header specifies one
     * or more byte ranges of the resource to be retrieved.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readWithHttpOperationResponse(filesystem: string, path: string, options?: { range? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Read File
     *
     * Read the contents of a file.  For read operations, range requests are
     * supported. This operation supports conditional HTTP requests.  For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.range] The HTTP Range request header specifies one
     * or more byte ranges of the resource to be retrieved.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    read(filesystem: string, path: string, options?: { range? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    read(filesystem: string, path: string, callback: ServiceCallback<stream.Readable>): void;
    read(filesystem: string, path: string, options: { range? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary Get Properties | Get Access Control List
     *
     * Get the properties for a file or directory, and optionally include the
     * access control list.  This operation supports conditional HTTP requests.
     * For more information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.action] Optional. If the value is
     * "getAccessControl" the access control list is returned in the response
     * headers (Hierarchical Namespace must be enabled for the account). Possible
     * values include: 'getAccessControl'
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPropertiesWithHttpOperationResponse(filesystem: string, path: string, options?: { action? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Get Properties | Get Access Control List
     *
     * Get the properties for a file or directory, and optionally include the
     * access control list.  This operation supports conditional HTTP requests.
     * For more information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.action] Optional. If the value is
     * "getAccessControl" the access control list is returned in the response
     * headers (Hierarchical Namespace must be enabled for the account). Possible
     * values include: 'getAccessControl'
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProperties(filesystem: string, path: string, options?: { action? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    getProperties(filesystem: string, path: string, callback: ServiceCallback<void>): void;
    getProperties(filesystem: string, path: string, options: { action? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Delete File | Delete Directory
     *
     * Delete the file or directory. This operation supports conditional HTTP
     * requests.  For more information, see [Specifying Conditional Headers for
     * Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.recursive] Required and valid only when the
     * resource is a directory.  If "true", all paths beneath the directory will be
     * deleted. If "false" and the directory is non-empty, an error occurs.
     *
     * @param {string} [options.continuation] Optional.  When deleting a directory,
     * the number of paths that are deleted with each invocation is limited.  If
     * the number of paths to be deleted exceeds this limit, a continuation token
     * is returned in this response header.  When a continuation token is returned
     * in the response, it must be specified in a subsequent invocation of the
     * delete operation to continue deleting the directory.
     *
     * @param {string} [options.xMsLeaseId] The lease ID must be specified if there
     * is an active lease.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(filesystem: string, path: string, options?: { recursive? : boolean, continuation? : string, xMsLeaseId? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete File | Delete Directory
     *
     * Delete the file or directory. This operation supports conditional HTTP
     * requests.  For more information, see [Specifying Conditional Headers for
     * Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     *
     * @param {string} filesystem The filesystem identifier.
     *
     * @param {string} path The file or directory path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.recursive] Required and valid only when the
     * resource is a directory.  If "true", all paths beneath the directory will be
     * deleted. If "false" and the directory is non-empty, an error occurs.
     *
     * @param {string} [options.continuation] Optional.  When deleting a directory,
     * the number of paths that are deleted with each invocation is limited.  If
     * the number of paths to be deleted exceeds this limit, a continuation token
     * is returned in this response header.  When a continuation token is returned
     * in the response, it must be specified in a subsequent invocation of the
     * delete operation to continue deleting the directory.
     *
     * @param {string} [options.xMsLeaseId] The lease ID must be specified if there
     * is an active lease.
     *
     * @param {string} [options.ifMatch] Optional.  An ETag value. Specify this
     * header to perform the operation only if the resource's ETag matches the
     * value specified. The ETag must be specified in quotes.
     *
     * @param {string} [options.ifNoneMatch] Optional.  An ETag value or the
     * special wildcard ("*") value. Specify this header to perform the operation
     * only if the resource's ETag does not match the value specified. The ETag
     * must be specified in quotes.
     *
     * @param {string} [options.ifModifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has been
     * modified since the specified date and time.
     *
     * @param {string} [options.ifUnmodifiedSince] Optional. A date and time value.
     * Specify this header to perform the operation only if the resource has not
     * been modified since the specified date and time.
     *
     * @param {string} [options.xMsClientRequestId] A UUID recorded in the
     * analytics logs for troubleshooting and correlation.
     *
     * @param {number} [options.timeout] An optional operation timeout value in
     * seconds. The period begins when the request is received by the service. If
     * the timeout value elapses before the operation completes, the operation
     * fails.
     *
     * @param {string} [options.xMsDate] Specifies the Coordinated Universal Time
     * (UTC) for the request.  This is required when using shared key
     * authorization.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(filesystem: string, path: string, options?: { recursive? : boolean, continuation? : string, xMsLeaseId? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(filesystem: string, path: string, callback: ServiceCallback<void>): void;
    deleteMethod(filesystem: string, path: string, options: { recursive? : boolean, continuation? : string, xMsLeaseId? : string, ifMatch? : string, ifNoneMatch? : string, ifModifiedSince? : string, ifUnmodifiedSince? : string, xMsClientRequestId? : string, timeout? : number, xMsDate? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
