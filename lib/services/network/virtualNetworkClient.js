/* jshint latedef:false */
/* jshint forin:false */

// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var xml = require('xml2js');
var util = require('util');
var js2xml = require('../../util/js2xml');
var Service = require('../core/service');
var WebResource = require('../../http/webresource');

/**
 * The Service Management API includes operations for managing the virtual
 * networks your subscription.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for more
 * information)
 */
var VirtualNetworkManagementClient = (function() {
  /**
   * Initializes a new instance of the VirtualNetworkManagementClient class.
   *
   * @constructor
   *
   * @param {SubscriptionCloudCredentials} credentials - When you create a
   * Windows Azure subscription, it is uniquely identified by a subscription
   * ID. The subscription ID forms part of the URI for every call that you
   * make to the Service Management API.  The Windows Azure Service
   * ManagementAPI use mutual authentication of management certificates over
   * SSL to ensure that a request made to the service is secure.  No anonymous
   * requests are allowed.
   *
   * @param {String} baseUri - The URI used as the base for all SQL requests.
   */
  function VirtualNetworkManagementClient(credentials, baseUri) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    VirtualNetworkManagementClient['super_'].call(this, credentials);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    this.clientRootCertificates = new ClientRootCertificateOperations(this);
    this.gateways = new GatewayOperations(this);
    this.networks = new NetworkOperations(this);
  }
  
  util.inherits(VirtualNetworkManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of thespecified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
   * more information)
   *
   * @param {String} requestId - The request ID for the request you wish to
   * track. The request ID is returned in the x-ms-request-id response header
   * for every request.
   *
   * @param {Function} callback
   *
   * @returns {VirtualNetworkOperationStatusResponse} - The response body
   * contains the status of the specified asynchronous operation, indicating
   * whether it has succeeded, is inprogress, or has failed. Note that this
   * status is distinct from the HTTP status code returned for the Get
   * Operation Status operation itself.  If the asynchronous operation
   * succeeded, the response body includes the HTTP status code for the
   * successful request.  If the asynchronous operation failed, the response
   * body includes the HTTP status code for the failed request, and also
   * includes error information regarding the failure.
   */
  VirtualNetworkManagementClient.prototype.getOperationStatus = function(requestId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (requestId === null || requestId === undefined) {
      return callback(new Error('requestId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + '/' + this.credentials.subscriptionId + '/operations/' + requestId;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var operationElement = js2xml.getElement(responseDoc, responseDoc, 'OPERATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (operationElement) {
          var idElement = js2xml.getElement(responseDoc, operationElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, operationElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var httpStatusCodeElement = js2xml.getElement(responseDoc, operationElement, 'HTTPSTATUSCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpStatusCodeElement) {
            var httpStatusCodeInstance = httpStatusCodeElement;
            result.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorElement = js2xml.getElement(responseDoc, operationElement, 'ERROR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (errorElement) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeElement = js2xml.getElement(responseDoc, errorElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (codeElement) {
              var codeInstance = codeElement;
              errorInstance.code = codeInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, errorElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              errorInstance.message = messageInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return VirtualNetworkManagementClient;
})();
exports.VirtualNetworkManagementClient = VirtualNetworkManagementClient;

var ClientRootCertificateOperations = (function() {
  /**
   * Initializes a new instance of the ClientRootCertificateOperations class.
   *
   * @constructor
   *
   * @param {VirtualNetworkManagementClient} client - Reference to the service
   * client.
   */
  function ClientRootCertificateOperations(client) {
    this.client = client;
  }
  
  /**
   * The Upload Client Root Certificate operation is used to upload a new
   * client root certificate to Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205129.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {ClientRootCertificateCreateParameters} parameters - Parameters
   * supplied to the Upload client certificate Virtual Network Gateway
   * operation.
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  ClientRootCertificateOperations.prototype.create = function(virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.certificate === null || parameters.certificate === undefined) {
      return callback(new Error('parameters.certificate cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/clientrootcertificates';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    requestContent = parameters.certificate;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Delete Client Root Certificate operation deletes a previously uploaded
   * client root certificate. from Windows Azure  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205128.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {String} certificateThumbprint - The X509 certificate thumbprint
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  ClientRootCertificateOperations.prototype.delete = function(virtualNetworkName, certificateThumbprint, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (certificateThumbprint === null || certificateThumbprint === undefined) {
      return callback(new Error('certificateThumbprint cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/clientrootcertificates/' + certificateThumbprint;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Client Root Certificate operation returns the public portion of a
   * previously uploaded client root certificate in a base-64 encoded format
   * from Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205127.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {String} certificateThumbprint - The X509 certificate thumbprint
   *
   * @param {Function} callback
   *
   * @returns {ClientRootCertificateGetResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  ClientRootCertificateOperations.prototype.get = function(virtualNetworkName, certificateThumbprint, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (certificateThumbprint === null || certificateThumbprint === undefined) {
      return callback(new Error('certificateThumbprint cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/clientrootcertificates/' + certificateThumbprint;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      result.certificate = responseContent;
      
      return callback(null, result);
    });
  };
  
  /**
   * The List Client Root Certificates operation returns a list of all the
   * client root certificates that are associated with the specified virtual
   * network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205130.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {Function} callback
   *
   * @returns {ClientRootCertificateListResponse} - The response to the list
   * client root certificates request
   */
  ClientRootCertificateOperations.prototype.list = function(virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/clientrootcertificates';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { clientRootCertificates: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var clientRootCertificatesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'CLIENTROOTCERTIFICATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (clientRootCertificatesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, clientRootCertificatesSequenceElement, 'CLIENTROOTCERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var clientRootCertificatesElement = js2xml.getElements(responseDoc, clientRootCertificatesSequenceElement, 'CLIENTROOTCERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var clientRootCertificateInstance = {};
            result.clientRootCertificates.push(clientRootCertificateInstance);
            
            var expirationTimeElement = js2xml.getElement(responseDoc, clientRootCertificatesElement, 'EXPIRATIONTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (expirationTimeElement) {
              var expirationTimeInstance = new Date(expirationTimeElement);
              clientRootCertificateInstance.expirationTime = expirationTimeInstance;
            }
            
            var subjectElement = js2xml.getElement(responseDoc, clientRootCertificatesElement, 'SUBJECT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (subjectElement) {
              var subjectInstance = subjectElement;
              clientRootCertificateInstance.subject = subjectInstance;
            }
            
            var thumbprintElement = js2xml.getElement(responseDoc, clientRootCertificatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (thumbprintElement) {
              var thumbprintInstance = thumbprintElement;
              clientRootCertificateInstance.thumbprint = thumbprintInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return ClientRootCertificateOperations;
})();

var GatewayOperations = (function() {
  /**
   * Initializes a new instance of the GatewayOperations class.
   *
   * @constructor
   *
   * @param {VirtualNetworkManagementClient} client - Reference to the service
   * client.
   */
  function GatewayOperations(client) {
    this.client = client;
  }
  
  /**
   * To connect to, disconnect from, or test your connection to a local network
   * site, access the connection resource representing the local network and
   * specify Connect, Disconnect or Test to perform the desired operation.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
   * for more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {String} localNetworkSiteName - The name of the site to connect to
   *
   * @param {GatewayConnectDisconnectOrTestParameters} parameters - Parameters
   * supplied to the Create Virtual Network Gateway operation.
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  GatewayOperations.prototype.beginConnectDisconnectOrTesting = function(virtualNetworkName, localNetworkSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (localNetworkSiteName === null || localNetworkSiteName === undefined) {
      return callback(new Error('localNetworkSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/connection/' + localNetworkSiteName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var updateConnectionElement = js2xml.createElement('UpdateConnection', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, updateConnectionElement);
    
    var operationElement = js2xml.createElement('Operation', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(operationElement, parameters.operation ? parameters.operation.toString() : 'Connect');
    js2xml.addChildElement(updateConnectionElement, operationElement);
    
    if (parameters.iPAddress) {
      var iPAddressElement = js2xml.createElement('IPAddress', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(iPAddressElement, parameters.iPAddress);
      js2xml.addChildElement(updateConnectionElement, iPAddressElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Create Virtual network Gateway operation creates a new network
   * gateways account in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {GatewayCreateParameters} parameters - Parameters supplied to the
   * Create Virtual Network Gateway operation.
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  GatewayOperations.prototype.beginCreating = function(virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var createGatewayParametersElement = js2xml.createElement('CreateGatewayParameters', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, createGatewayParametersElement);
    
    var gatewayTypeElement = js2xml.createElement('GatewayType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(gatewayTypeElement, parameters.gatewayType ? parameters.gatewayType.toString() : 'StaticRouting');
    js2xml.addChildElement(createGatewayParametersElement, gatewayTypeElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Delete Virtual network Gateway operation deletes a network gateway for
   * the specified virtual network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network.
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  GatewayOperations.prototype.beginDeleting = function(virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Failover Virtual network Gateway operation causes a network gateway
   * failover for the specified virtual network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network in
   * Azure.
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  GatewayOperations.prototype.beginFailover = function(virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    requestContent = '<?xml version="1.0" encoding="utf-8"?><UpdateGateway xmlns="http://schemas.microsoft.com/windowsazure"><UpdateGatewayOperation>Failover</UpdateGatewayOperation></UpdateGateway>';
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Reset Virtual network Gateway shared key operation resets the shared
   * key on the virtual network gateway for the specified vitrual network
   * connection to the specified local network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {String} localNetworkName - The name of the local network
   *
   * @param {GatewayResetSharedKeyParameters} parameters - The parameters to
   * the Virtual Network Gateway Reset Shared Key request
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  GatewayOperations.prototype.beginResetSharedKey = function(virtualNetworkName, localNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (localNetworkName === null || localNetworkName === undefined) {
      return callback(new Error('localNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.keyLength === null || parameters.keyLength === undefined) {
      return callback(new Error('parameters.keyLength cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/connection/' + localNetworkName + '/sharedkey';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var resetSharedKeyElement = js2xml.createElement('ResetSharedKey', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, resetSharedKeyElement);
    
    var keyLengthElement = js2xml.createElement('KeyLength', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(keyLengthElement, parameters.keyLength.toString());
    js2xml.addChildElement(resetSharedKeyElement, keyLengthElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * To connect to, disconnect from, or test your connection to a local network
   * site, access the connection resource representing the local network and
   * specify Connect, Disconnect or Test to perform the desired operation.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
   * for more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {String} localNetworkSiteName - The name of the site to connect to
   *
   * @param {GatewayConnectDisconnectOrTestParameters} parameters - Parameters
   * supplied to the Create Virtual Network Gateway operation.
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetOperationStatusResponse} - The response body contains
   * the status of the specified asynchronous operation, indicating whether it
   * has succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  GatewayOperations.prototype.connectDisconnectOrTest = function(virtualNetworkName, localNetworkSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginConnectDisconnectOrTesting(virtualNetworkName, localNetworkSiteName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Create Virtual network Gateway operation creates a new network
   * gateways account in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {GatewayCreateParameters} parameters - Parameters supplied to the
   * Create Virtual Network Gateway operation.
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetOperationStatusResponse} - The response body contains
   * the status of the specified asynchronous operation, indicating whether it
   * has succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  GatewayOperations.prototype.create = function(virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginCreating(virtualNetworkName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Virtual network Gateway operation deletes a network gateway for
   * the specified virtual network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network.
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetOperationStatusResponse} - The response body contains
   * the status of the specified asynchronous operation, indicating whether it
   * has succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  GatewayOperations.prototype.delete = function(virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginDeleting(virtualNetworkName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Failover Virtual network Gateway operation causes a network gateway
   * failover for the specified virtual network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network in
   * Azure.
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetOperationStatusResponse} - The response body contains
   * the status of the specified asynchronous operation, indicating whether it
   * has succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  GatewayOperations.prototype.failover = function(virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginFailover(virtualNetworkName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Generate VPN Client Package creates a VPN client package for the
   * specified virtual network and gateway in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205126.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {GatewayGenerateVpnClientPackageParameters} parameters - Parameters
   * supplied to the Create Virtual Network Gateway operation.
   *
   * @param {Function} callback
   *
   * @returns {GatewayOperationResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  GatewayOperations.prototype.generateVpnClientPackage = function(virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/vpnclientpackage';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var vpnClientParametersElement = js2xml.createElement('VpnClientParameters', '');
    js2xml.addChildElement(requestDoc, vpnClientParametersElement);
    
    var processorArchitectureElement = js2xml.createElement('ProcessorArchitecture', '');
    js2xml.setElementValue(processorArchitectureElement, parameters.processorArchitecture ? parameters.processorArchitecture.toString() : 'Amd64');
    js2xml.addChildElement(vpnClientParametersElement, processorArchitectureElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Virtual network Gateway operation gets information on the network
   * gateway for the specified vitrual network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154109.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetResponse} - A standard storage response including an
   * HTTP status code and request ID.
   */
  GatewayOperations.prototype.get = function(virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayElement) {
          var stateElement = js2xml.getElement(responseDoc, gatewayElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (stateElement) {
            var stateInstance = stateElement;
            result.state = stateInstance;
          }
          
          var vIPAddressElement = js2xml.getElement(responseDoc, gatewayElement, 'VIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (vIPAddressElement) {
            var vIPAddressInstance = vIPAddressElement;
            result.vipAddress = vIPAddressInstance;
          }
          
          var lastEventElement = js2xml.getElement(responseDoc, gatewayElement, 'LASTEVENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lastEventElement) {
            var lastEventInstance = {};
            result.lastEvent = lastEventInstance;
            
            var timestampElement = js2xml.getElement(responseDoc, lastEventElement, 'TIMESTAMP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (timestampElement) {
              var timestampInstance = new Date(timestampElement);
              lastEventInstance.timestamp = timestampInstance;
            }
            
            var idElement = js2xml.getElement(responseDoc, lastEventElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (idElement) {
              var idInstance = idElement;
              lastEventInstance.id = idInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, lastEventElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              lastEventInstance.message = messageInstance;
            }
            
            var dataElement = js2xml.getElement(responseDoc, lastEventElement, 'DATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dataElement) {
              var dataInstance = dataElement;
              lastEventInstance.data = dataInstance;
            }
          }
          
          var gatewayTypeElement = js2xml.getElement(responseDoc, gatewayElement, 'GATEWAYTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (gatewayTypeElement) {
            var gatewayTypeInstance = gatewayTypeElement;
            result.gatewayType = gatewayTypeInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Device Configuration Script operation returns a script that you
   * can use to configure local VPN devices to connect to the gateway.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154115.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {GatewayGetDeviceConfigurationScriptParameters} parameters - The
   * parameters for the GetDeviceConfigurationScript request
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetDeviceConfigurationScriptResponse} - The configuration
   * script returned from the get device configuration script request
   */
  GatewayOperations.prototype.getDeviceConfigurationScript = function(virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/vpndeviceconfigurationscript?vendor=' + parameters.vendor + '&platform=' + parameters.platform + '&OSfamily=' + parameters.oSFamily;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      result.configurationScript = responseContent;
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Virtual network Gateway operation status gets information on the
   * status of network gateway operations in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154112.aspx for
   * more information)
   *
   * @param {String} operationId - The id  of the virtualnetwork operation
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetOperationStatusResponse} - The response body contains
   * the status of the specified asynchronous operation, indicating whether it
   * has succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  GatewayOperations.prototype.getOperationStatus = function(operationId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (operationId === null || operationId === undefined) {
      return callback(new Error('operationId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/operation/' + operationId;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var httpStatusCodeElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'HTTPSTATUSCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpStatusCodeElement) {
            var httpStatusCodeInstance = httpStatusCodeElement;
            result.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'ERROR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (errorElement) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeElement = js2xml.getElement(responseDoc, errorElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (codeElement) {
              var codeInstance = codeElement;
              errorInstance.code = codeInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, errorElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              errorInstance.message = messageInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Virtual network Gateway shared key operation gets the shared key
   * on the virtual network gateway for the specified vitrual network
   * connection to the specified local network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154122.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {String} localNetworkName - The name of the local network
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetSharedKeyResponse} - The response to the get shared
   * key request
   */
  GatewayOperations.prototype.getSharedKey = function(virtualNetworkName, localNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (localNetworkName === null || localNetworkName === undefined) {
      return callback(new Error('localNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/connection/' + localNetworkName + '/sharedkey';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var sharedKeyElement = js2xml.getElement(responseDoc, responseDoc, 'SHAREDKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (sharedKeyElement) {
          var valueElement = js2xml.getElement(responseDoc, sharedKeyElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (valueElement) {
            var valueInstance = valueElement;
            result.sharedKey = valueInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Connections operation returns a list of the local network
   * connections that can be accessed through the gateway.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154120.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {Function} callback
   *
   * @returns {GatewayListConnectionsResponse} - The response to a
   * ListConnections request to a Virtual Network Gateway
   */
  GatewayOperations.prototype.listConnections = function(virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/' + virtualNetworkName + '/gateway/connections';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connections: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var connectionsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'CONNECTIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (connectionsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var connectionsElement = js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var connectionInstance = { allocatedIPAddresses: [] };
            result.connections.push(connectionInstance);
            
            var localNetworkSiteNameElement = js2xml.getElement(responseDoc, connectionsElement, 'LOCALNETWORKSITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (localNetworkSiteNameElement) {
              var localNetworkSiteNameInstance = localNetworkSiteNameElement;
              connectionInstance.localNetworkSiteName = localNetworkSiteNameInstance;
            }
            
            var connectivityStateElement = js2xml.getElement(responseDoc, connectionsElement, 'CONNECTIVITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (connectivityStateElement) {
              var connectivityStateInstance = connectivityStateElement;
              connectionInstance.connectivityState = connectivityStateInstance;
            }
            
            var lastEventElement = js2xml.getElement(responseDoc, connectionsElement, 'LASTEVENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (lastEventElement) {
              var lastEventInstance = {};
              connectionInstance.lastEvent = lastEventInstance;
              
              var timestampElement = js2xml.getElement(responseDoc, lastEventElement, 'TIMESTAMP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (timestampElement) {
                var timestampInstance = new Date(timestampElement);
                lastEventInstance.timestamp = timestampInstance;
              }
              
              var idElement = js2xml.getElement(responseDoc, lastEventElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (idElement) {
                var idInstance = idElement;
                lastEventInstance.id = idInstance;
              }
              
              var messageElement = js2xml.getElement(responseDoc, lastEventElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (messageElement) {
                var messageInstance = messageElement;
                lastEventInstance.message = messageInstance;
              }
              
              var dataElement = js2xml.getElement(responseDoc, lastEventElement, 'DATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dataElement) {
                var dataInstance = dataElement;
                lastEventInstance.data = dataInstance;
              }
            }
            
            var ingressBytesTransferredElement = js2xml.getElement(responseDoc, connectionsElement, 'INGRESSBYTESTRANSFERRED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (ingressBytesTransferredElement) {
              var ingressBytesTransferredInstance = parseInt(ingressBytesTransferredElement, 10);
              connectionInstance.ingressBytesTransferred = ingressBytesTransferredInstance;
            }
            
            var egressBytesTransferredElement = js2xml.getElement(responseDoc, connectionsElement, 'EGRESSBYTESTRANSFERRED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (egressBytesTransferredElement) {
              var egressBytesTransferredInstance = parseInt(egressBytesTransferredElement, 10);
              connectionInstance.egressBytesTransferred = egressBytesTransferredInstance;
            }
            
            var lastConnectionEstablishedElement = js2xml.getElement(responseDoc, connectionsElement, 'LASTCONNECTIONESTABLISHED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (lastConnectionEstablishedElement) {
              var lastConnectionEstablishedInstance = new Date(lastConnectionEstablishedElement);
              connectionInstance.lastConnectionEstablished = lastConnectionEstablishedInstance;
            }
            
            var allocatedIPAddressesSequenceElement = js2xml.getElement(responseDoc, connectionsElement, 'ALLOCATEDIPADDRESSES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (allocatedIPAddressesSequenceElement) {
              for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, allocatedIPAddressesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                var allocatedIPAddressesElement = js2xml.getElements(responseDoc, allocatedIPAddressesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                connectionInstance.allocatedIPAddresses.push(allocatedIPAddressesElement);
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Virtual Network Gateway Supported Devices operation lists the
   * supported, on-premise network devices that can connect to the gateway.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154102.aspx
   * for more information)
   *
   * @param {Function} callback
   *
   * @returns {GatewayListSupportedDevicesResponse} - The respoonse to the get
   * supported platform configuration request
   */
  GatewayOperations.prototype.listSupportedDevices = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/supporteddevices';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { vendors: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var vpnDeviceListElement = js2xml.getElement(responseDoc, responseDoc, 'VPNDEVICELIST', '');
        if (vpnDeviceListElement) {
          var versionAttribute = js2xml.getAttribute(responseDoc, vpnDeviceListElement, 'VERSION', '');
          if (versionAttribute) {
            result.version = versionAttribute;
          }
          
          if (vpnDeviceListElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, vpnDeviceListElement, 'VENDOR', '').length; loweredIndex1 = loweredIndex1 + 1) {
              var vendorsElement = js2xml.getElements(responseDoc, vpnDeviceListElement, 'VENDOR', '')[loweredIndex1];
              var vendorInstance = { platforms: [] };
              result.vendors.push(vendorInstance);
              
              var nameAttribute = js2xml.getAttribute(responseDoc, vendorsElement, 'NAME', '');
              if (nameAttribute) {
                vendorInstance.name = nameAttribute;
              }
              
              if (vendorsElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, vendorsElement, 'PLATFORM', '').length; loweredIndex2 = loweredIndex2 + 1) {
                  var platformsElement = js2xml.getElements(responseDoc, vendorsElement, 'PLATFORM', '')[loweredIndex2];
                  var platformInstance = { oSFamilies: [] };
                  vendorInstance.platforms.push(platformInstance);
                  
                  var nameAttribute2 = js2xml.getAttribute(responseDoc, platformsElement, 'NAME', '');
                  if (nameAttribute2) {
                    platformInstance.name = nameAttribute2;
                  }
                  
                  if (platformsElement) {
                    for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, platformsElement, 'OSFAMILY', '').length; loweredIndex3 = loweredIndex3 + 1) {
                      var oSFamiliesElement = js2xml.getElements(responseDoc, platformsElement, 'OSFAMILY', '')[loweredIndex3];
                      var oSFamilyInstance = {};
                      platformInstance.oSFamilies.push(oSFamilyInstance);
                      
                      var nameAttribute3 = js2xml.getAttribute(responseDoc, oSFamiliesElement, 'NAME', '');
                      if (nameAttribute3) {
                        oSFamilyInstance.name = nameAttribute3;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Reset Virtual network Gateway shared key operation resets the shared
   * key on the virtual network gateway for the specified vitrual network
   * connection to the specified local network in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx for
   * more information)
   *
   * @param {String} virtualNetworkName - The name of the virtual network for
   * this gateway
   *
   * @param {String} localNetworkName - The name of the local network
   *
   * @param {GatewayResetSharedKeyParameters} parameters - The parameters to
   * the Virtual Network Gateway Reset Shared Key request
   *
   * @param {Function} callback
   *
   * @returns {GatewayGetOperationStatusResponse} - The response body contains
   * the status of the specified asynchronous operation, indicating whether it
   * has succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  GatewayOperations.prototype.resetSharedKey = function(virtualNetworkName, localNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginResetSharedKey(virtualNetworkName, localNetworkName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return GatewayOperations;
})();

var NetworkOperations = (function() {
  /**
   * Initializes a new instance of the NetworkOperations class.
   *
   * @constructor
   *
   * @param {VirtualNetworkManagementClient} client - Reference to the service
   * client.
   */
  function NetworkOperations(client) {
    this.client = client;
  }
  
  /**
   * The Set Network Configuration operation asynchronously configures the
   * virtual network  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx for
   * more information)
   *
   * @param {NetworkSetConfigurationParameters} parameters - The updated
   * network configuration
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard storage response including an
   * HTTP status code and request ID.
   */
  NetworkOperations.prototype.beginSettingConfiguration = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.configuration === null || parameters.configuration === undefined) {
      return callback(new Error('parameters.configuration cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/media';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    requestContent = parameters.configuration;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Network Configuration operation retrieves the network
   * configuration file for the given subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {NetworkGetConfigurationResponse} - The Get Network Configuration
   * operation response.
   */
  NetworkOperations.prototype.getConfiguration = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/media';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      result.configuration = responseContent;
      
      return callback(null, result);
    });
  };
  
  /**
   * The List Virtual network sites operation retrieves the virtual networks
   * configured for the subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157185.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {NetworkListResponse} - The response structure for the Server
   * List operation
   */
  NetworkOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/networking/virtualnetwork';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { virtualNetworkSites: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var virtualNetworkSitesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'VIRTUALNETWORKSITES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (virtualNetworkSitesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, virtualNetworkSitesSequenceElement, 'VIRTUALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var virtualNetworkSitesElement = js2xml.getElements(responseDoc, virtualNetworkSitesSequenceElement, 'VIRTUALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var virtualNetworkSiteInstance = { dnsServers: [], subnets: [] };
            result.virtualNetworkSites.push(virtualNetworkSiteInstance);
            
            var nameElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              virtualNetworkSiteInstance.name = nameInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = labelElement;
              virtualNetworkSiteInstance.label = labelInstance;
            }
            
            var idElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (idElement) {
              var idInstance = idElement;
              virtualNetworkSiteInstance.id = idInstance;
            }
            
            var affinityGroupElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (affinityGroupElement) {
              var affinityGroupInstance = affinityGroupElement;
              virtualNetworkSiteInstance.affinityGroup = affinityGroupInstance;
            }
            
            var stateElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (stateElement) {
              var stateInstance = stateElement;
              virtualNetworkSiteInstance.state = stateInstance;
            }
            
            var addressSpaceElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'ADDRESSSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (addressSpaceElement) {
              var addressSpaceInstance = { addressPrefixes: [] };
              virtualNetworkSiteInstance.addressSpace = addressSpaceInstance;
              
              var addressPrefixesSequenceElement = js2xml.getElement(responseDoc, addressSpaceElement, 'ADDRESSPREFIXES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (addressPrefixesSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, addressPrefixesSequenceElement, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var addressPrefixesElement = js2xml.getElements(responseDoc, addressPrefixesSequenceElement, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  addressSpaceInstance.addressPrefixes.push(addressPrefixesElement);
                }
              }
            }
            
            var subnetsSequenceElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'SUBNETS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (subnetsSequenceElement) {
              for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, subnetsSequenceElement, 'SUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
                var subnetsElement = js2xml.getElements(responseDoc, subnetsSequenceElement, 'SUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
                var subnetInstance = {};
                virtualNetworkSiteInstance.subnets.push(subnetInstance);
                
                var nameElement2 = js2xml.getElement(responseDoc, subnetsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (nameElement2) {
                  var nameInstance2 = nameElement2;
                  subnetInstance.name = nameInstance2;
                }
                
                var addressPrefixElement = js2xml.getElement(responseDoc, subnetsElement, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (addressPrefixElement) {
                  var addressPrefixInstance = addressPrefixElement;
                  subnetInstance.addressPrefix = addressPrefixInstance;
                }
              }
            }
            
            var dnsServersSequenceElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'DNSSERVERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dnsServersSequenceElement) {
              for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
                var dnsServersElement = js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
                var dnsServerInstance = {};
                virtualNetworkSiteInstance.dnsServers.push(dnsServerInstance);
                
                var nameElement3 = js2xml.getElement(responseDoc, dnsServersElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (nameElement3) {
                  var nameInstance3 = nameElement3;
                  dnsServerInstance.name = nameInstance3;
                }
                
                var addressElement = js2xml.getElement(responseDoc, dnsServersElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (addressElement) {
                  var addressInstance = addressElement;
                  dnsServerInstance.address = addressInstance;
                }
              }
            }
            
            var gatewayElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'GATEWAY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (gatewayElement) {
              var gatewayInstance = { sites: [] };
              virtualNetworkSiteInstance.gateway = gatewayInstance;
              
              var profileElement = js2xml.getElement(responseDoc, gatewayElement, 'PROFILE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (profileElement) {
                var profileInstance = profileElement;
                gatewayInstance.profile = profileInstance;
              }
              
              var sitesSequenceElement = js2xml.getElement(responseDoc, gatewayElement, 'SITES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (sitesSequenceElement) {
                for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, sitesSequenceElement, 'LOCALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
                  var sitesElement = js2xml.getElements(responseDoc, sitesSequenceElement, 'LOCALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
                  var localNetworkSiteInstance = { connections: [] };
                  gatewayInstance.sites.push(localNetworkSiteInstance);
                  
                  var nameElement4 = js2xml.getElement(responseDoc, sitesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (nameElement4) {
                    var nameInstance4 = nameElement4;
                    localNetworkSiteInstance.name = nameInstance4;
                  }
                  
                  var vpnGatewayAddressElement = js2xml.getElement(responseDoc, sitesElement, 'VPNGATEWAYADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (vpnGatewayAddressElement) {
                    var vpnGatewayAddressInstance = vpnGatewayAddressElement;
                    localNetworkSiteInstance.vpnGatewayAddress = vpnGatewayAddressInstance;
                  }
                  
                  var addressSpaceElement2 = js2xml.getElement(responseDoc, sitesElement, 'ADDRESSSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (addressSpaceElement2) {
                    var addressSpaceInstance2 = { addressPrefixes: [] };
                    localNetworkSiteInstance.addressSpace = addressSpaceInstance2;
                    
                    var addressPrefixesSequenceElement2 = js2xml.getElement(responseDoc, addressSpaceElement2, 'ADDRESSPREFIXES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (addressPrefixesSequenceElement2) {
                      for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, addressPrefixesSequenceElement2, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex6 = loweredIndex6 + 1) {
                        var addressPrefixesElement2 = js2xml.getElements(responseDoc, addressPrefixesSequenceElement2, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex6];
                        addressSpaceInstance2.addressPrefixes.push(addressPrefixesElement2);
                      }
                    }
                  }
                  
                  var connectionsSequenceElement = js2xml.getElement(responseDoc, sitesElement, 'CONNECTIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (connectionsSequenceElement) {
                    for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                      var connectionsElement = js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                      var connectionInstance = {};
                      localNetworkSiteInstance.connections.push(connectionInstance);
                      
                      var typeElement = js2xml.getElement(responseDoc, connectionsElement, 'TYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (typeElement) {
                        var typeInstance = typeElement;
                        connectionInstance.type = typeInstance;
                      }
                    }
                  }
                }
              }
              
              var vPNClientAddressPoolElement = js2xml.getElement(responseDoc, gatewayElement, 'VPNCLIENTADDRESSPOOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (vPNClientAddressPoolElement) {
                var vPNClientAddressPoolInstance = { addressPrefixes: [] };
                gatewayInstance.vPNClientAddressPool = vPNClientAddressPoolInstance;
                
                var addressPrefixesSequenceElement3 = js2xml.getElement(responseDoc, vPNClientAddressPoolElement, 'ADDRESSPREFIXES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (addressPrefixesSequenceElement3) {
                  for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, addressPrefixesSequenceElement3, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                    var addressPrefixesElement3 = js2xml.getElements(responseDoc, addressPrefixesSequenceElement3, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                    vPNClientAddressPoolInstance.addressPrefixes.push(addressPrefixesElement3);
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Set Network Configuration operation asynchronously configures the
   * virtual network  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx for
   * more information)
   *
   * @param {NetworkSetConfigurationParameters} parameters - The updated
   * network configuration
   *
   * @param {Function} callback
   *
   * @returns {VirtualNetworkOperationStatusResponse} - The response body
   * contains the status of the specified asynchronous operation, indicating
   * whether it has succeeded, is inprogress, or has failed. Note that this
   * status is distinct from the HTTP status code returned for the Get
   * Operation Status operation itself.  If the asynchronous operation
   * succeeded, the response body includes the HTTP status code for the
   * successful request.  If the asynchronous operation failed, the response
   * body includes the HTTP status code for the failed request, and also
   * includes error information regarding the failure.
   */
  NetworkOperations.prototype.setConfiguration = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networks.beginSettingConfiguration(parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return NetworkOperations;
})();