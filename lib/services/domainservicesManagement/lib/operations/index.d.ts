/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * DomainServiceOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DomainservicesManagementClient.
 */
export interface DomainServiceOperations {


    /**
     * Lists all the available Domain Services operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationEntityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationEntityListResult>>;

    /**
     * Lists all the available Domain Services operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationEntityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationEntityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationEntityListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationEntityListResult>;
    list(callback: ServiceCallback<models.OperationEntityListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationEntityListResult>): void;
}

/**
 * @class
 * DomainServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DomainservicesManagementClient.
 */
export interface DomainServices {


    /**
     * @summary List Domain Services in Subscription (GET Resources)
     *
     * The List Domain Services in Subscription operation lists all the domain
     * services available under the given subscription (and across all resource
     * groups within that subscription).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainServiceListResult>>;

    /**
     * @summary List Domain Services in Subscription (GET Resources)
     *
     * The List Domain Services in Subscription operation lists all the domain
     * services available under the given subscription (and across all resource
     * groups within that subscription).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainServiceListResult>;
    list(callback: ServiceCallback<models.DomainServiceListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainServiceListResult>): void;


    /**
     * @summary List Domain Services in Resource Group (GET Resources)
     *
     * The List Domain Services in Resource Group operation lists all the domain
     * services available under the given resource group.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainServiceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainServiceListResult>>;

    /**
     * @summary List Domain Services in Resource Group (GET Resources)
     *
     * The List Domain Services in Resource Group operation lists all the domain
     * services available under the given resource group.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainServiceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainServiceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainServiceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainServiceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DomainServiceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainServiceListResult>): void;


    /**
     * @summary Create or Update Domain Service (PUT Resource)
     *
     * The Create Domain Service operation creates a new domain service with the
     * specified parameters. If the specific service already exists, then any
     * patchable properties will be updated and any immutable properties will
     * remain unchanged.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Create or Update a
     * Domain Service operation.
     *
     * @param {string} [properties.domainName] The name of the Azure domain that
     * the user would like to deploy Domain Services to.
     *
     * @param {string} [properties.subnetId] The name of the virtual network that
     * Domain Services will be deployed on. The id of the subnet that Domain
     * Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainService>>;

    /**
     * @summary Create or Update Domain Service (PUT Resource)
     *
     * The Create Domain Service operation creates a new domain service with the
     * specified parameters. If the specific service already exists, then any
     * patchable properties will be updated and any immutable properties will
     * remain unchanged.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Create or Update a
     * Domain Service operation.
     *
     * @param {string} [properties.domainName] The name of the Azure domain that
     * the user would like to deploy Domain Services to.
     *
     * @param {string} [properties.subnetId] The name of the virtual network that
     * Domain Services will be deployed on. The id of the subnet that Domain
     * Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainService>;
    createOrUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, callback: ServiceCallback<models.DomainService>): void;
    createOrUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainService>): void;


    /**
     * @summary Get Domain Service (GET Resources)
     *
     * The Get Domain Service operation retrieves a json representation of the
     * Domain Service.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, domainServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainService>>;

    /**
     * @summary Get Domain Service (GET Resources)
     *
     * The Get Domain Service operation retrieves a json representation of the
     * Domain Service.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, domainServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainService>;
    get(resourceGroupName: string, domainServiceName: string, callback: ServiceCallback<models.DomainService>): void;
    get(resourceGroupName: string, domainServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainService>): void;


    /**
     * @summary Delete Domain Service (DELETE Resource)
     *
     * The Delete Domain Service operation deletes an existing Domain Service.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, domainServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainService>>;

    /**
     * @summary Delete Domain Service (DELETE Resource)
     *
     * The Delete Domain Service operation deletes an existing Domain Service.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, domainServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainService>;
    deleteMethod(resourceGroupName: string, domainServiceName: string, callback: ServiceCallback<models.DomainService>): void;
    deleteMethod(resourceGroupName: string, domainServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainService>): void;


    /**
     * @summary Update Domain Service (PATCH Resource)
     *
     * The Update Domain Service operation can be used to update the existing
     * deployment. The update call only supports the properties listed in the PATCH
     * body.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Update a Domain
     * Service operation.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainService>>;

    /**
     * @summary Update Domain Service (PATCH Resource)
     *
     * The Update Domain Service operation can be used to update the existing
     * deployment. The update call only supports the properties listed in the PATCH
     * body.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Update a Domain
     * Service operation.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainService>;
    update(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, callback: ServiceCallback<models.DomainService>): void;
    update(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainService>): void;


    /**
     * @summary Create or Update Domain Service (PUT Resource)
     *
     * The Create Domain Service operation creates a new domain service with the
     * specified parameters. If the specific service already exists, then any
     * patchable properties will be updated and any immutable properties will
     * remain unchanged.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Create or Update a
     * Domain Service operation.
     *
     * @param {string} [properties.domainName] The name of the Azure domain that
     * the user would like to deploy Domain Services to.
     *
     * @param {string} [properties.subnetId] The name of the virtual network that
     * Domain Services will be deployed on. The id of the subnet that Domain
     * Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainService>>;

    /**
     * @summary Create or Update Domain Service (PUT Resource)
     *
     * The Create Domain Service operation creates a new domain service with the
     * specified parameters. If the specific service already exists, then any
     * patchable properties will be updated and any immutable properties will
     * remain unchanged.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Create or Update a
     * Domain Service operation.
     *
     * @param {string} [properties.domainName] The name of the Azure domain that
     * the user would like to deploy Domain Services to.
     *
     * @param {string} [properties.subnetId] The name of the virtual network that
     * Domain Services will be deployed on. The id of the subnet that Domain
     * Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainService>;
    beginCreateOrUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, callback: ServiceCallback<models.DomainService>): void;
    beginCreateOrUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServiceProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainService>): void;


    /**
     * @summary Delete Domain Service (DELETE Resource)
     *
     * The Delete Domain Service operation deletes an existing Domain Service.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, domainServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainService>>;

    /**
     * @summary Delete Domain Service (DELETE Resource)
     *
     * The Delete Domain Service operation deletes an existing Domain Service.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, domainServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainService>;
    beginDeleteMethod(resourceGroupName: string, domainServiceName: string, callback: ServiceCallback<models.DomainService>): void;
    beginDeleteMethod(resourceGroupName: string, domainServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainService>): void;


    /**
     * @summary Update Domain Service (PATCH Resource)
     *
     * The Update Domain Service operation can be used to update the existing
     * deployment. The update call only supports the properties listed in the PATCH
     * body.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Update a Domain
     * Service operation.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainService>>;

    /**
     * @summary Update Domain Service (PATCH Resource)
     *
     * The Update Domain Service operation can be used to update the existing
     * deployment. The update call only supports the properties listed in the PATCH
     * body.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription. The name is case insensitive.
     *
     * @param {string} domainServiceName The name of the domain service in the
     * specified subscription and resource group.
     *
     * @param {object} properties Properties supplied to the Update a Domain
     * Service operation.
     *
     * @param {object} [properties.ldapsSettings] Secure LDAP Settings
     *
     * @param {string} [properties.ldapsSettings.ldaps] A flag to determine whether
     * or not Secure LDAP is enabled or disabled. Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string} [properties.ldapsSettings.pfxCertificate] The certificate
     * required to configure Secure LDAP. The parameter passed here should be a
     * base64encoded representation of the certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.pfxCertificatePassword] The
     * password to decrypt the provided Secure LDAP certificate pfx file.
     *
     * @param {string} [properties.ldapsSettings.externalAccess] A flag to
     * determine whether or not Secure LDAP access over the internet is enabled or
     * disabled. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainService>;
    beginUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, callback: ServiceCallback<models.DomainService>): void;
    beginUpdate(resourceGroupName: string, domainServiceName: string, properties: models.DomainServicePatchProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainService>): void;
}
