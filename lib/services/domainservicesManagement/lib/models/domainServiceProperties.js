/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties of the Domain Service.
 *
 */
class DomainServiceProperties {
  /**
   * Create a DomainServiceProperties.
   * @member {string} [tenantId] Azure Active Directory tenant id
   * @member {string} [domainName] The name of the Azure domain that the user
   * would like to deploy Domain Services to.
   * @member {string} [vnetSiteId] Virtual network site id
   * @member {string} [subnetId] The name of the virtual network that Domain
   * Services will be deployed on. The id of the subnet that Domain Services
   * will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
   * @member {object} [ldapsSettings] Secure LDAP Settings
   * @member {string} [ldapsSettings.ldaps] A flag to determine whether or not
   * Secure LDAP is enabled or disabled. Possible values include: 'Enabled',
   * 'Disabled'
   * @member {string} [ldapsSettings.pfxCertificate] The certificate required
   * to configure Secure LDAP. The parameter passed here should be a
   * base64encoded representation of the certificate pfx file.
   * @member {string} [ldapsSettings.pfxCertificatePassword] The password to
   * decrypt the provided Secure LDAP certificate pfx file.
   * @member {string} [ldapsSettings.publicCertificate] Public certificate used
   * to configure secure ldap.
   * @member {string} [ldapsSettings.certificateThumbprint] Thumbprint of
   * configure ldaps certificate.
   * @member {date} [ldapsSettings.certificateNotAfter] NotAfter DateTime of
   * configure ldaps certificate.
   * @member {string} [ldapsSettings.externalAccess] A flag to determine
   * whether or not Secure LDAP access over the internet is enabled or
   * disabled. Possible values include: 'Enabled', 'Disabled'
   * @member {string} [ldapsSettings.externalAccessIpAddress] External access
   * ip address.
   * @member {array} [domainControllerIpAddress] List of Domain Controller IP
   * Address
   * @member {string} [serviceStatus] Status of Domain Service instance
   * @member {string} [provisioningState] the current deployment or
   * provisioning state, which only appears in the response.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DomainServiceProperties
   *
   * @returns {object} metadata of DomainServiceProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DomainServiceProperties',
      type: {
        name: 'Composite',
        className: 'DomainServiceProperties',
        modelProperties: {
          tenantId: {
            required: false,
            readOnly: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          domainName: {
            required: false,
            serializedName: 'domainName',
            type: {
              name: 'String'
            }
          },
          vnetSiteId: {
            required: false,
            readOnly: true,
            serializedName: 'vnetSiteId',
            type: {
              name: 'String'
            }
          },
          subnetId: {
            required: false,
            serializedName: 'subnetId',
            type: {
              name: 'String'
            }
          },
          ldapsSettings: {
            required: false,
            serializedName: 'ldapsSettings',
            type: {
              name: 'Composite',
              className: 'LdapsSettings'
            }
          },
          domainControllerIpAddress: {
            required: false,
            readOnly: true,
            serializedName: 'domainControllerIpAddress',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          serviceStatus: {
            required: false,
            readOnly: true,
            serializedName: 'serviceStatus',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DomainServiceProperties;
