/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * The Resource model definition.
 *
 * @member {string} [id] Resource Id
 * @member {string} [name] Resource name
 * @member {string} [type] Resource type
 * @member {string} location Resource location
 * @member {object} [tags] Resource tags
 * @member {string} [etag] Resource etag
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
  etag?: string;
}

/**
 * @class
 * Initializes a new instance of the LdapsSettings class.
 * @constructor
 * Secure LDAP Settings
 *
 * @member {string} [ldaps] A flag to determine whether or not Secure LDAP is
 * enabled or disabled. Possible values include: 'Enabled', 'Disabled'
 * @member {string} [pfxCertificate] The certificate required to configure
 * Secure LDAP. The parameter passed here should be a base64encoded
 * representation of the certificate pfx file.
 * @member {string} [pfxCertificatePassword] The password to decrypt the
 * provided Secure LDAP certificate pfx file.
 * @member {string} [publicCertificate] Public certificate used to configure
 * secure ldap.
 * @member {string} [certificateThumbprint] Thumbprint of configure ldaps
 * certificate.
 * @member {date} [certificateNotAfter] NotAfter DateTime of configure ldaps
 * certificate.
 * @member {string} [externalAccess] A flag to determine whether or not Secure
 * LDAP access over the internet is enabled or disabled. Possible values
 * include: 'Enabled', 'Disabled'
 * @member {string} [externalAccessIpAddress] External access ip address.
 */
export interface LdapsSettings {
  ldaps?: string;
  pfxCertificate?: string;
  pfxCertificatePassword?: string;
  readonly publicCertificate?: string;
  readonly certificateThumbprint?: string;
  readonly certificateNotAfter?: Date;
  externalAccess?: string;
  readonly externalAccessIpAddress?: string;
}

/**
 * @class
 * Initializes a new instance of the DomainServiceProperties class.
 * @constructor
 * Properties of the Domain Service.
 *
 * @member {string} [tenantId] Azure Active Directory tenant id
 * @member {string} [domainName] The name of the Azure domain that the user
 * would like to deploy Domain Services to.
 * @member {string} [vnetSiteId] Virtual network site id
 * @member {string} [subnetId] The name of the virtual network that Domain
 * Services will be deployed on. The id of the subnet that Domain Services will
 * be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
 * @member {object} [ldapsSettings] Secure LDAP Settings
 * @member {string} [ldapsSettings.ldaps] A flag to determine whether or not
 * Secure LDAP is enabled or disabled. Possible values include: 'Enabled',
 * 'Disabled'
 * @member {string} [ldapsSettings.pfxCertificate] The certificate required to
 * configure Secure LDAP. The parameter passed here should be a base64encoded
 * representation of the certificate pfx file.
 * @member {string} [ldapsSettings.pfxCertificatePassword] The password to
 * decrypt the provided Secure LDAP certificate pfx file.
 * @member {string} [ldapsSettings.publicCertificate] Public certificate used
 * to configure secure ldap.
 * @member {string} [ldapsSettings.certificateThumbprint] Thumbprint of
 * configure ldaps certificate.
 * @member {date} [ldapsSettings.certificateNotAfter] NotAfter DateTime of
 * configure ldaps certificate.
 * @member {string} [ldapsSettings.externalAccess] A flag to determine whether
 * or not Secure LDAP access over the internet is enabled or disabled. Possible
 * values include: 'Enabled', 'Disabled'
 * @member {string} [ldapsSettings.externalAccessIpAddress] External access ip
 * address.
 * @member {array} [domainControllerIpAddress] List of Domain Controller IP
 * Address
 * @member {string} [serviceStatus] Status of Domain Service instance
 * @member {string} [provisioningState] the current deployment or provisioning
 * state, which only appears in the response.
 */
export interface DomainServiceProperties {
  readonly tenantId?: string;
  domainName?: string;
  readonly vnetSiteId?: string;
  subnetId?: string;
  ldapsSettings?: LdapsSettings;
  readonly domainControllerIpAddress?: string[];
  readonly serviceStatus?: string;
  readonly provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the DomainService class.
 * @constructor
 * Domain service.
 *
 * @member {string} [tenantId] Azure Active Directory tenant id
 * @member {string} [domainName] The name of the Azure domain that the user
 * would like to deploy Domain Services to.
 * @member {string} [vnetSiteId] Virtual network site id
 * @member {string} [subnetId] The name of the virtual network that Domain
 * Services will be deployed on. The id of the subnet that Domain Services will
 * be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
 * @member {object} [ldapsSettings] Secure LDAP Settings
 * @member {string} [ldapsSettings.ldaps] A flag to determine whether or not
 * Secure LDAP is enabled or disabled. Possible values include: 'Enabled',
 * 'Disabled'
 * @member {string} [ldapsSettings.pfxCertificate] The certificate required to
 * configure Secure LDAP. The parameter passed here should be a base64encoded
 * representation of the certificate pfx file.
 * @member {string} [ldapsSettings.pfxCertificatePassword] The password to
 * decrypt the provided Secure LDAP certificate pfx file.
 * @member {string} [ldapsSettings.publicCertificate] Public certificate used
 * to configure secure ldap.
 * @member {string} [ldapsSettings.certificateThumbprint] Thumbprint of
 * configure ldaps certificate.
 * @member {date} [ldapsSettings.certificateNotAfter] NotAfter DateTime of
 * configure ldaps certificate.
 * @member {string} [ldapsSettings.externalAccess] A flag to determine whether
 * or not Secure LDAP access over the internet is enabled or disabled. Possible
 * values include: 'Enabled', 'Disabled'
 * @member {string} [ldapsSettings.externalAccessIpAddress] External access ip
 * address.
 * @member {array} [domainControllerIpAddress] List of Domain Controller IP
 * Address
 * @member {string} [serviceStatus] Status of Domain Service instance
 * @member {string} [provisioningState] the current deployment or provisioning
 * state, which only appears in the response.
 */
export interface DomainService extends Resource {
  readonly tenantId?: string;
  domainName?: string;
  readonly vnetSiteId?: string;
  subnetId?: string;
  ldapsSettings?: LdapsSettings;
  readonly domainControllerIpAddress?: string[];
  readonly serviceStatus?: string;
  readonly provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the DomainServicePatchProperties class.
 * @constructor
 * Update Properties of the Domain Service.
 *
 * @member {object} [ldapsSettings] Secure LDAP Settings
 * @member {string} [ldapsSettings.ldaps] A flag to determine whether or not
 * Secure LDAP is enabled or disabled. Possible values include: 'Enabled',
 * 'Disabled'
 * @member {string} [ldapsSettings.pfxCertificate] The certificate required to
 * configure Secure LDAP. The parameter passed here should be a base64encoded
 * representation of the certificate pfx file.
 * @member {string} [ldapsSettings.pfxCertificatePassword] The password to
 * decrypt the provided Secure LDAP certificate pfx file.
 * @member {string} [ldapsSettings.publicCertificate] Public certificate used
 * to configure secure ldap.
 * @member {string} [ldapsSettings.certificateThumbprint] Thumbprint of
 * configure ldaps certificate.
 * @member {date} [ldapsSettings.certificateNotAfter] NotAfter DateTime of
 * configure ldaps certificate.
 * @member {string} [ldapsSettings.externalAccess] A flag to determine whether
 * or not Secure LDAP access over the internet is enabled or disabled. Possible
 * values include: 'Enabled', 'Disabled'
 * @member {string} [ldapsSettings.externalAccessIpAddress] External access ip
 * address.
 */
export interface DomainServicePatchProperties {
  ldapsSettings?: LdapsSettings;
}

/**
 * @class
 * Initializes a new instance of the OperationDisplayInfo class.
 * @constructor
 * The operation supported by Domain Services.
 *
 * @member {string} [description] The description of the operation.
 * @member {string} [operation] The action that users can perform, based on
 * their permission level.
 * @member {string} [provider] Service provider: Domain Services.
 * @member {string} [resource] Resource on which the operation is performed.
 */
export interface OperationDisplayInfo {
  description?: string;
  operation?: string;
  provider?: string;
  resource?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationEntity class.
 * @constructor
 * The operation supported by Domain Services.
 *
 * @member {string} [name] Operation name: {provider}/{resource}/{operation}.
 * @member {object} [display] The operation supported by Domain Services.
 * @member {string} [display.description] The description of the operation.
 * @member {string} [display.operation] The action that users can perform,
 * based on their permission level.
 * @member {string} [display.provider] Service provider: Domain Services.
 * @member {string} [display.resource] Resource on which the operation is
 * performed.
 * @member {string} [origin] The origin of the operation.
 */
export interface OperationEntity {
  name?: string;
  display?: OperationDisplayInfo;
  origin?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationEntityListResult class.
 * @constructor
 * The list of domain service operation response.
 *
 * @member {array} [value] The list of operations.
 */
export interface OperationEntityListResult {
  value?: OperationEntity[];
}


/**
 * @class
 * Initializes a new instance of the DomainServiceListResult class.
 * @constructor
 * The response from the List Domain Services operation.
 *
 */
export interface DomainServiceListResult extends Array<DomainService> {
}
