"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const msRest = require("ms-rest-js");
const Mappers = require("../models/eventsMappers");
const WebResource = msRest.WebResource;
/** Class representing a Events. */
class Events {
    /**
     * Create a Events.
     * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.serializer = new msRest.Serializer(Mappers);
        this.client = client;
    }
    /**
     * @summary Execute OData query
     *
     * Executes an OData query for events
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {EventType} eventType The type of events to query; either a standard event type
     * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
     * `availabilityResults`) or `$all` to query across all event types. Possible values include:
     * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
     * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
     *
     * @param {EventsGetByTypeOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getByTypeWithHttpOperationResponse(appId, eventType, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
            let filter = (options && options.filter !== undefined) ? options.filter : undefined;
            let search = (options && options.search !== undefined) ? options.search : undefined;
            let orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;
            let select = (options && options.select !== undefined) ? options.select : undefined;
            let skip = (options && options.skip !== undefined) ? options.skip : undefined;
            let top = (options && options.top !== undefined) ? options.top : undefined;
            let format = (options && options.format !== undefined) ? options.format : undefined;
            let count = (options && options.count !== undefined) ? options.count : undefined;
            let apply = (options && options.apply !== undefined) ? options.apply : undefined;
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    appId,
                    eventType,
                    timespan,
                    filter,
                    search,
                    orderby,
                    select,
                    skip,
                    top,
                    format,
                    count,
                    apply,
                    "this.client.acceptLanguage": this.client.acceptLanguage
                }, options);
                operationRes = yield this.client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v1/apps/{appId}/events/{eventType}",
                    urlParameters: [
                        {
                            parameterPath: "appId",
                            mapper: {
                                required: true,
                                serializedName: "appId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "eventType",
                            mapper: {
                                required: true,
                                serializedName: "eventType",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterPath: "timespan",
                            mapper: {
                                serializedName: "timespan",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "filter",
                            mapper: {
                                serializedName: "$filter",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "search",
                            mapper: {
                                serializedName: "$search",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "orderby",
                            mapper: {
                                serializedName: "$orderby",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "select",
                            mapper: {
                                serializedName: "$select",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "skip",
                            mapper: {
                                serializedName: "$skip",
                                type: {
                                    name: "Number"
                                }
                            }
                        },
                        {
                            parameterPath: "top",
                            mapper: {
                                serializedName: "$top",
                                type: {
                                    name: "Number"
                                }
                            }
                        },
                        {
                            parameterPath: "format",
                            mapper: {
                                serializedName: "$format",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "count",
                            mapper: {
                                serializedName: "$count",
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterPath: "apply",
                            mapper: {
                                serializedName: "$apply",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterPath: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    responses: {
                        200: {
                            bodyMapper: Mappers.EventsResults
                        },
                        default: {
                            bodyMapper: Mappers.ErrorResponse
                        }
                    },
                    serializer: this.serializer
                });
                // Deserialize Response
                let statusCode = operationRes.status;
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse != undefined) {
                            const resultMapper = Mappers.EventsResults;
                            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Get an event
     *
     * Gets the data for a single event
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {EventType} eventType The type of events to query; either a standard event type
     * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
     * `availabilityResults`) or `$all` to query across all event types. Possible values include:
     * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
     * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
     *
     * @param {string} eventId ID of event.
     *
     * @param {EventsGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getWithHttpOperationResponse(appId, eventType, eventId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    appId,
                    eventType,
                    timespan,
                    eventId,
                    "this.client.acceptLanguage": this.client.acceptLanguage
                }, options);
                operationRes = yield this.client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v1/apps/{appId}/events/{eventType}/{eventId}",
                    urlParameters: [
                        {
                            parameterPath: "appId",
                            mapper: {
                                required: true,
                                serializedName: "appId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "eventType",
                            mapper: {
                                required: true,
                                serializedName: "eventType",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterPath: "eventId",
                            mapper: {
                                required: true,
                                serializedName: "eventId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterPath: "timespan",
                            mapper: {
                                serializedName: "timespan",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterPath: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    responses: {
                        200: {
                            bodyMapper: Mappers.EventsResults
                        },
                        default: {
                            bodyMapper: Mappers.ErrorResponse
                        }
                    },
                    serializer: this.serializer
                });
                // Deserialize Response
                let statusCode = operationRes.status;
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse != undefined) {
                            const resultMapper = Mappers.EventsResults;
                            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Get OData metadata
     *
     * Gets OData EDMX metadata describing the event data model
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getOdataMetadataWithHttpOperationResponse(appId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    appId,
                    "this.client.acceptLanguage": this.client.acceptLanguage
                }, options);
                operationRes = yield this.client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v1/apps/{appId}/events/$metadata",
                    urlParameters: [
                        {
                            parameterPath: "appId",
                            mapper: {
                                required: true,
                                serializedName: "appId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterPath: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    responses: {
                        200: {
                            bodyMapper: {
                                serializedName: "parsedResponse",
                                type: {
                                    name: "Object"
                                }
                            }
                        },
                        default: {
                            bodyMapper: Mappers.ErrorResponse
                        }
                    },
                    serializer: this.serializer
                });
                // Deserialize Response
                let statusCode = operationRes.status;
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse != undefined) {
                            const resultMapper = {
                                serializedName: "parsedResponse",
                                type: {
                                    name: "Object"
                                }
                            };
                            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    getByType(appId, eventType, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getByTypeWithHttpOperationResponse(appId, eventType, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getByTypeWithHttpOperationResponse(appId, eventType, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    get(appId, eventType, eventId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(appId, eventType, eventId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(appId, eventType, eventId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    getOdataMetadata(appId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getOdataMetadataWithHttpOperationResponse(appId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getOdataMetadataWithHttpOperationResponse(appId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
}
exports.Events = Events;
//# sourceMappingURL=events.js.map