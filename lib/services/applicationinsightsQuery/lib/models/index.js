"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
exports.__esModule = true;
/**
 * Defines values for MetricId.
 * Possible values include: 'requests/count', 'requests/duration',
 * 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count',
 * 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration',
 * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration',
 * 'dependencies/count', 'dependencies/failed', 'dependencies/duration',
 * 'exceptions/count', 'exceptions/browser', 'exceptions/server',
 * 'sessions/count', 'performanceCounters/requestExecutionTime',
 * 'performanceCounters/requestsPerSecond',
 * 'performanceCounters/requestsInQueue',
 * 'performanceCounters/memoryAvailableBytes',
 * 'performanceCounters/exceptionsPerSecond',
 * 'performanceCounters/processCpuPercentage',
 * 'performanceCounters/processIOBytesPerSecond',
 * 'performanceCounters/processPrivateBytes',
 * 'performanceCounters/processorCpuPercentage',
 * 'availabilityResults/availabilityPercentage',
 * 'availabilityResults/duration', 'billing/telemetryCount',
 * 'customEvents/count'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: MetricId = <MetricId>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var MetricId;
(function (MetricId) {
    MetricId["Requestscount"] = "requests/count";
    MetricId["Requestsduration"] = "requests/duration";
    MetricId["Requestsfailed"] = "requests/failed";
    MetricId["Userscount"] = "users/count";
    MetricId["Usersauthenticated"] = "users/authenticated";
    MetricId["PageViewscount"] = "pageViews/count";
    MetricId["PageViewsduration"] = "pageViews/duration";
    MetricId["ClientprocessingDuration"] = "client/processingDuration";
    MetricId["ClientreceiveDuration"] = "client/receiveDuration";
    MetricId["ClientnetworkDuration"] = "client/networkDuration";
    MetricId["ClientsendDuration"] = "client/sendDuration";
    MetricId["ClienttotalDuration"] = "client/totalDuration";
    MetricId["Dependenciescount"] = "dependencies/count";
    MetricId["Dependenciesfailed"] = "dependencies/failed";
    MetricId["Dependenciesduration"] = "dependencies/duration";
    MetricId["Exceptionscount"] = "exceptions/count";
    MetricId["Exceptionsbrowser"] = "exceptions/browser";
    MetricId["Exceptionsserver"] = "exceptions/server";
    MetricId["Sessionscount"] = "sessions/count";
    MetricId["PerformanceCountersrequestExecutionTime"] = "performanceCounters/requestExecutionTime";
    MetricId["PerformanceCountersrequestsPerSecond"] = "performanceCounters/requestsPerSecond";
    MetricId["PerformanceCountersrequestsInQueue"] = "performanceCounters/requestsInQueue";
    MetricId["PerformanceCountersmemoryAvailableBytes"] = "performanceCounters/memoryAvailableBytes";
    MetricId["PerformanceCountersexceptionsPerSecond"] = "performanceCounters/exceptionsPerSecond";
    MetricId["PerformanceCountersprocessCpuPercentage"] = "performanceCounters/processCpuPercentage";
    MetricId["PerformanceCountersprocessIOBytesPerSecond"] = "performanceCounters/processIOBytesPerSecond";
    MetricId["PerformanceCountersprocessPrivateBytes"] = "performanceCounters/processPrivateBytes";
    MetricId["PerformanceCountersprocessorCpuPercentage"] = "performanceCounters/processorCpuPercentage";
    MetricId["AvailabilityResultsavailabilityPercentage"] = "availabilityResults/availabilityPercentage";
    MetricId["AvailabilityResultsduration"] = "availabilityResults/duration";
    MetricId["BillingtelemetryCount"] = "billing/telemetryCount";
    MetricId["CustomEventscount"] = "customEvents/count";
})(MetricId = exports.MetricId || (exports.MetricId = {}));
/**
 * Defines values for MetricsAggregation.
 * Possible values include: 'min', 'max', 'avg', 'sum', 'count', 'unique'
 * @readonly
 * @enum {string}
 */
var MetricsAggregation;
(function (MetricsAggregation) {
    MetricsAggregation["Min"] = "min";
    MetricsAggregation["Max"] = "max";
    MetricsAggregation["Avg"] = "avg";
    MetricsAggregation["Sum"] = "sum";
    MetricsAggregation["Count"] = "count";
    MetricsAggregation["Unique"] = "unique";
})(MetricsAggregation = exports.MetricsAggregation || (exports.MetricsAggregation = {}));
/**
 * Defines values for MetricsSegment.
 * Possible values include: 'applicationBuild', 'applicationVersion',
 * 'authenticatedOrAnonymousTraffic', 'browser', 'browserVersion', 'city',
 * 'cloudRoleName', 'cloudServiceName', 'continent', 'countryOrRegion',
 * 'deploymentId', 'deploymentUnit', 'deviceType', 'environment',
 * 'hostingLocation', 'instanceName'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: MetricsSegment =
 * <MetricsSegment>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var MetricsSegment;
(function (MetricsSegment) {
    MetricsSegment["ApplicationBuild"] = "applicationBuild";
    MetricsSegment["ApplicationVersion"] = "applicationVersion";
    MetricsSegment["AuthenticatedOrAnonymousTraffic"] = "authenticatedOrAnonymousTraffic";
    MetricsSegment["Browser"] = "browser";
    MetricsSegment["BrowserVersion"] = "browserVersion";
    MetricsSegment["City"] = "city";
    MetricsSegment["CloudRoleName"] = "cloudRoleName";
    MetricsSegment["CloudServiceName"] = "cloudServiceName";
    MetricsSegment["Continent"] = "continent";
    MetricsSegment["CountryOrRegion"] = "countryOrRegion";
    MetricsSegment["DeploymentId"] = "deploymentId";
    MetricsSegment["DeploymentUnit"] = "deploymentUnit";
    MetricsSegment["DeviceType"] = "deviceType";
    MetricsSegment["Environment"] = "environment";
    MetricsSegment["HostingLocation"] = "hostingLocation";
    MetricsSegment["InstanceName"] = "instanceName";
})(MetricsSegment = exports.MetricsSegment || (exports.MetricsSegment = {}));
/**
 * Defines values for EventType.
 * Possible values include: '$all', 'traces', 'customEvents', 'pageViews',
 * 'browserTimings', 'requests', 'dependencies', 'exceptions',
 * 'availabilityResults', 'performanceCounters', 'customMetrics'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: EventType = <EventType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var EventType;
(function (EventType) {
    EventType["All"] = "$all";
    EventType["Traces"] = "traces";
    EventType["CustomEvents"] = "customEvents";
    EventType["PageViews"] = "pageViews";
    EventType["BrowserTimings"] = "browserTimings";
    EventType["Requests"] = "requests";
    EventType["Dependencies"] = "dependencies";
    EventType["Exceptions"] = "exceptions";
    EventType["AvailabilityResults"] = "availabilityResults";
    EventType["PerformanceCounters"] = "performanceCounters";
    EventType["CustomMetrics"] = "customMetrics";
})(EventType = exports.EventType || (exports.EventType = {}));
