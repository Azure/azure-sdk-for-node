"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("ms-rest-js");
var Mappers = require("../models/queryMappers");
var Parameters = require("../models/parameters");
/** Class representing a Query. */
var Query = /** @class */ (function () {
    /**
     * Create a Query.
     * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
     */
    function Query(client) {
        this.client = client;
    }
    /**
     * @summary Execute an Analytics query
     *
     * Executes an Analytics query for data.
     * [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query) is an example for
     * using POST with an Analytics query.
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {QueryBody} body The Analytics query. Learn more about the [Analytics query
     * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Query.prototype.executeWithHttpOperationResponse = function (appId, body, options) {
        return this.client.sendOperationRequest({
            appId: appId,
            body: body,
            options: options
        }, executeOperationSpec);
    };
    Query.prototype.execute = function (appId, body, options, callback) {
        return msRest.responseToBody(this.executeWithHttpOperationResponse.bind(this), appId, body, options, callback);
    };
    return Query;
}());
exports.Query = Query;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var executeOperationSpec = {
    httpMethod: "POST",
    path: "v1/apps/{appId}/query",
    urlParameters: [
        Parameters.appId
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.QueryBody, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.QueryResults
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
