"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var msRest = require("ms-rest-js");
var Mappers = require("../models/eventsMappers");
var WebResource = msRest.WebResource;
/** Class representing a Events. */
var Events = /** @class */ (function () {
    /**
     * Create a Events.
     * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
     */
    function Events(client) {
        this.serializer = new msRest.Serializer(Mappers);
        this.client = client;
    }
    /**
     * @summary Execute OData query
     *
     * Executes an OData query for events
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {EventType} eventType The type of events to query; either a standard event type
     * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
     * `availabilityResults`) or `$all` to query across all event types. Possible values include:
     * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
     * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
     *
     * @param {EventsGetByTypeOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Events.prototype.getByTypeWithHttpOperationResponse = function (appId, eventType, options) {
        return __awaiter(this, void 0, void 0, function () {
            var timespan, filter, search, orderby, select, skip, top, format, count, apply, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
                        filter = (options && options.filter !== undefined) ? options.filter : undefined;
                        search = (options && options.search !== undefined) ? options.search : undefined;
                        orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;
                        select = (options && options.select !== undefined) ? options.select : undefined;
                        skip = (options && options.skip !== undefined) ? options.skip : undefined;
                        top = (options && options.top !== undefined) ? options.top : undefined;
                        format = (options && options.format !== undefined) ? options.format : undefined;
                        count = (options && options.count !== undefined) ? options.count : undefined;
                        apply = (options && options.apply !== undefined) ? options.apply : undefined;
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            appId: appId,
                            eventType: eventType,
                            timespan: timespan,
                            filter: filter,
                            search: search,
                            orderby: orderby,
                            select: select,
                            skip: skip,
                            top: top,
                            format: format,
                            count: count,
                            apply: apply,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "v1/apps/{appId}/events/{eventType}",
                                urlParameters: [
                                    {
                                        parameterPath: "appId",
                                        mapper: {
                                            required: true,
                                            serializedName: "appId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "eventType",
                                        mapper: {
                                            required: true,
                                            serializedName: "eventType",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "timespan",
                                        mapper: {
                                            serializedName: "timespan",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "filter",
                                        mapper: {
                                            serializedName: "$filter",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "search",
                                        mapper: {
                                            serializedName: "$search",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "orderby",
                                        mapper: {
                                            serializedName: "$orderby",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "select",
                                        mapper: {
                                            serializedName: "$select",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "skip",
                                        mapper: {
                                            serializedName: "$skip",
                                            type: {
                                                name: "Number"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "top",
                                        mapper: {
                                            serializedName: "$top",
                                            type: {
                                                name: "Number"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "format",
                                        mapper: {
                                            serializedName: "$format",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "count",
                                        mapper: {
                                            serializedName: "$count",
                                            type: {
                                                name: "Boolean"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "apply",
                                        mapper: {
                                            serializedName: "$apply",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.EventsResults
                                    },
                                    "default": {
                                        bodyMapper: Mappers.ErrorResponse
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.EventsResults;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * @summary Get an event
     *
     * Gets the data for a single event
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {EventType} eventType The type of events to query; either a standard event type
     * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
     * `availabilityResults`) or `$all` to query across all event types. Possible values include:
     * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
     * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
     *
     * @param {string} eventId ID of event.
     *
     * @param {EventsGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Events.prototype.getWithHttpOperationResponse = function (appId, eventType, eventId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var timespan, httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            appId: appId,
                            eventType: eventType,
                            timespan: timespan,
                            eventId: eventId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "v1/apps/{appId}/events/{eventType}/{eventId}",
                                urlParameters: [
                                    {
                                        parameterPath: "appId",
                                        mapper: {
                                            required: true,
                                            serializedName: "appId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "eventType",
                                        mapper: {
                                            required: true,
                                            serializedName: "eventType",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    },
                                    {
                                        parameterPath: "eventId",
                                        mapper: {
                                            required: true,
                                            serializedName: "eventId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                queryParameters: [
                                    {
                                        parameterPath: "timespan",
                                        mapper: {
                                            serializedName: "timespan",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: Mappers.EventsResults
                                    },
                                    "default": {
                                        bodyMapper: Mappers.ErrorResponse
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = Mappers.EventsResults;
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * @summary Get OData metadata
     *
     * Gets OData EDMX metadata describing the event data model
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Events.prototype.getOdataMetadataWithHttpOperationResponse = function (appId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var httpRequest, operationRes, operationArguments, statusCode, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpRequest = new WebResource();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        operationArguments = msRest.createOperationArguments({
                            appId: appId,
                            "this.client.acceptLanguage": this.client.acceptLanguage
                        }, options);
                        return [4 /*yield*/, this.client.sendOperationRequest(httpRequest, operationArguments, {
                                httpMethod: "GET",
                                baseUrl: this.client.baseUri,
                                path: "v1/apps/{appId}/events/$metadata",
                                urlParameters: [
                                    {
                                        parameterPath: "appId",
                                        mapper: {
                                            required: true,
                                            serializedName: "appId",
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                headerParameters: [
                                    {
                                        parameterPath: "this.client.acceptLanguage",
                                        mapper: {
                                            serializedName: "accept-language",
                                            defaultValue: 'en-US',
                                            type: {
                                                name: "String"
                                            }
                                        }
                                    }
                                ],
                                responses: {
                                    200: {
                                        bodyMapper: {
                                            serializedName: "parsedResponse",
                                            type: {
                                                name: "Object"
                                            }
                                        }
                                    },
                                    "default": {
                                        bodyMapper: Mappers.ErrorResponse
                                    }
                                },
                                serializer: this.serializer
                            })];
                    case 2:
                        operationRes = _a.sent();
                        statusCode = operationRes.status;
                        if (statusCode === 200) {
                            parsedResponse = operationRes.parsedBody;
                            try {
                                if (parsedResponse != undefined) {
                                    resultMapper = {
                                        serializedName: "parsedResponse",
                                        type: {
                                            name: "Object"
                                        }
                                    };
                                    operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(operationRes);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    Events.prototype.getByType = function (appId, eventType, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getByTypeWithHttpOperationResponse(appId, eventType, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            })["catch"](function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getByTypeWithHttpOperationResponse(appId, eventType, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    Events.prototype.get = function (appId, eventType, eventId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(appId, eventType, eventId, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            })["catch"](function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(appId, eventType, eventId, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    Events.prototype.getOdataMetadata = function (appId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getOdataMetadataWithHttpOperationResponse(appId, options).then(function (operationRes) {
                return Promise.resolve(operationRes.parsedBody);
            })["catch"](function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getOdataMetadataWithHttpOperationResponse(appId, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    };
    return Events;
}());
exports.Events = Events;
