"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
exports.__esModule = true;
var msRest = require("ms-rest-js");
var Mappers = require("../models/eventsMappers");
var Parameters = require("../models/parameters");
/** Class representing a Events. */
var Events = /** @class */ (function () {
    /**
     * Create a Events.
     * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
     */
    function Events(client) {
        this.client = client;
    }
    /**
     * @summary Execute OData query
     *
     * Executes an OData query for events
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {EventType} eventType The type of events to query; either a standard event type
     * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
     * `availabilityResults`) or `$all` to query across all event types. Possible values include:
     * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
     * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
     *
     * @param {EventsGetByTypeOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Events.prototype.getByTypeWithHttpOperationResponse = function (appId, eventType, options) {
        return this.client.sendOperationRequest({
            appId: appId,
            eventType: eventType,
            options: options
        }, getByTypeOperationSpec);
    };
    /**
     * @summary Get an event
     *
     * Gets the data for a single event
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {EventType} eventType The type of events to query; either a standard event type
     * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
     * `availabilityResults`) or `$all` to query across all event types. Possible values include:
     * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
     * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
     *
     * @param {string} eventId ID of event.
     *
     * @param {EventsGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Events.prototype.getWithHttpOperationResponse = function (appId, eventType, eventId, options) {
        return this.client.sendOperationRequest({
            appId: appId,
            eventType: eventType,
            eventId: eventId,
            options: options
        }, getOperationSpec);
    };
    /**
     * @summary Get OData metadata
     *
     * Gets OData EDMX metadata describing the event data model
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Events.prototype.getOdataMetadataWithHttpOperationResponse = function (appId, options) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, getOdataMetadataOperationSpec);
    };
    Events.prototype.getByType = function (appId, eventType, options, callback) {
        return msRest.responseToBody(this.getByTypeWithHttpOperationResponse.bind(this), appId, eventType, options, callback);
    };
    Events.prototype.get = function (appId, eventType, eventId, options, callback) {
        return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), appId, eventType, eventId, options, callback);
    };
    Events.prototype.getOdataMetadata = function (appId, options, callback) {
        return msRest.responseToBody(this.getOdataMetadataWithHttpOperationResponse.bind(this), appId, options, callback);
    };
    return Events;
}());
exports.Events = Events;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getByTypeOperationSpec = {
    httpMethod: "GET",
    path: "v1/apps/{appId}/events/{eventType}",
    urlParameters: [
        Parameters.appId,
        Parameters.eventType
    ],
    queryParameters: [
        Parameters.timespan,
        Parameters.filter1,
        Parameters.search,
        Parameters.orderby1,
        Parameters.select,
        Parameters.skip,
        Parameters.top1,
        Parameters.format,
        Parameters.count,
        Parameters.apply
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EventsResults
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "v1/apps/{appId}/events/{eventType}/{eventId}",
    urlParameters: [
        Parameters.appId,
        Parameters.eventType,
        Parameters.eventId
    ],
    queryParameters: [
        Parameters.timespan
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EventsResults
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOdataMetadataOperationSpec = {
    httpMethod: "GET",
    path: "v1/apps/{appId}/events/$metadata",
    urlParameters: [
        Parameters.appId
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
