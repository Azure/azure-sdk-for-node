/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/eventsMappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsDataClientContext } from "../applicationInsightsDataClientContext";

/** Class representing a Events. */
export class Events {
  private readonly client: ApplicationInsightsDataClientContext;

  /**
   * Create a Events.
   * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
   */
  constructor(client: ApplicationInsightsDataClientContext) {
    this.client = client;
  }

  /**
   * @summary Execute OData query
   *
   * Executes an OData query for events
   *
   * @param {string} appId ID of the application. This is Application ID from the API Access settings
   * blade in the Azure portal.
   *
   * @param {EventType} eventType The type of events to query; either a standard event type
   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
   * `availabilityResults`) or `$all` to query across all event types. Possible values include:
   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {EventsGetByTypeOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByTypeWithHttpOperationResponse(appId: string, eventType: Models.EventType, options?: Models.EventsGetByTypeOptionalParams): Promise<msRest.HttpOperationResponse<Models.EventsResults>> {
    return this.client.sendOperationRequest(
      {
        appId,
        eventType,
        options
      },
      getByTypeOperationSpec);
  }

  /**
   * @summary Get an event
   *
   * Gets the data for a single event
   *
   * @param {string} appId ID of the application. This is Application ID from the API Access settings
   * blade in the Azure portal.
   *
   * @param {EventType} eventType The type of events to query; either a standard event type
   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
   * `availabilityResults`) or `$all` to query across all event types. Possible values include:
   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {string} eventId ID of event.
   *
   * @param {EventsGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWithHttpOperationResponse(appId: string, eventType: Models.EventType, eventId: string, options?: Models.EventsGetOptionalParams): Promise<msRest.HttpOperationResponse<Models.EventsResults>> {
    return this.client.sendOperationRequest(
      {
        appId,
        eventType,
        eventId,
        options
      },
      getOperationSpec);
  }

  /**
   * @summary Get OData metadata
   *
   * Gets OData EDMX metadata describing the event data model
   *
   * @param {string} appId ID of the application. This is Application ID from the API Access settings
   * blade in the Azure portal.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOdataMetadataWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      getOdataMetadataOperationSpec);
  }

  /**
   * @summary Execute OData query
   *
   * Executes an OData query for events
   *
   * @param {string} appId ID of the application. This is Application ID from the API Access settings
   * blade in the Azure portal.
   *
   * @param {EventType} eventType The type of events to query; either a standard event type
   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
   * `availabilityResults`) or `$all` to query across all event types. Possible values include:
   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {EventsGetByTypeOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.EventsResults} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EventsResults} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByType(appId: string, eventType: Models.EventType): Promise<Models.EventsResults>;
  getByType(appId: string, eventType: Models.EventType, options: Models.EventsGetByTypeOptionalParams): Promise<Models.EventsResults>;
  getByType(appId: string, eventType: Models.EventType, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  getByType(appId: string, eventType: Models.EventType, options: Models.EventsGetByTypeOptionalParams, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  getByType(appId: string, eventType: Models.EventType, options?: Models.EventsGetByTypeOptionalParams, callback?: msRest.ServiceCallback<Models.EventsResults>): any {
    return msRest.responseToBody(this.getByTypeWithHttpOperationResponse.bind(this), appId, eventType, options, callback);
  }

  /**
   * @summary Get an event
   *
   * Gets the data for a single event
   *
   * @param {string} appId ID of the application. This is Application ID from the API Access settings
   * blade in the Azure portal.
   *
   * @param {EventType} eventType The type of events to query; either a standard event type
   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,
   * `availabilityResults`) or `$all` to query across all event types. Possible values include:
   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {string} eventId ID of event.
   *
   * @param {EventsGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.EventsResults} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EventsResults} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(appId: string, eventType: Models.EventType, eventId: string): Promise<Models.EventsResults>;
  get(appId: string, eventType: Models.EventType, eventId: string, options: Models.EventsGetOptionalParams): Promise<Models.EventsResults>;
  get(appId: string, eventType: Models.EventType, eventId: string, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  get(appId: string, eventType: Models.EventType, eventId: string, options: Models.EventsGetOptionalParams, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  get(appId: string, eventType: Models.EventType, eventId: string, options?: Models.EventsGetOptionalParams, callback?: msRest.ServiceCallback<Models.EventsResults>): any {
    return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), appId, eventType, eventId, options, callback);
  }

  /**
   * @summary Get OData metadata
   *
   * Gets OData EDMX metadata describing the event data model
   *
   * @param {string} appId ID of the application. This is Application ID from the API Access settings
   * blade in the Azure portal.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOdataMetadata(appId: string): Promise<any>;
  getOdataMetadata(appId: string, options: msRest.RequestOptionsBase): Promise<any>;
  getOdataMetadata(appId: string, callback: msRest.ServiceCallback<any>): void;
  getOdataMetadata(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getOdataMetadata(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.getOdataMetadataWithHttpOperationResponse.bind(this), appId, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getByTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/apps/{appId}/events/{eventType}",
  urlParameters: [
    Parameters.appId,
    Parameters.eventType
  ],
  queryParameters: [
    Parameters.timespan,
    Parameters.filter1,
    Parameters.search,
    Parameters.orderby1,
    Parameters.select,
    Parameters.skip,
    Parameters.top1,
    Parameters.format,
    Parameters.count,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventsResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/apps/{appId}/events/{eventType}/{eventId}",
  urlParameters: [
    Parameters.appId,
    Parameters.eventType,
    Parameters.eventId
  ],
  queryParameters: [
    Parameters.timespan
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventsResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOdataMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/apps/{appId}/events/$metadata",
  urlParameters: [
    Parameters.appId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
