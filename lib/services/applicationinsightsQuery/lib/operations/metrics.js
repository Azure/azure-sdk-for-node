"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
exports.__esModule = true;
var msRest = require("ms-rest-js");
var Mappers = require("../models/metricsMappers");
var Parameters = require("../models/parameters");
/** Class representing a Metrics. */
var Metrics = /** @class */ (function () {
    /**
     * Create a Metrics.
     * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
     */
    function Metrics(client) {
        this.client = client;
    }
    /**
     * @summary Retrieve metric data
     *
     * Gets metric values for a single metric
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {MetricId} metricId ID of the metric. This is either a standard AI metric, or an
     * application-specific custom metric. Possible values include: 'requests/count',
     * 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count',
     * 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration',
     * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count',
     * 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser',
     * 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime',
     * 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue',
     * 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond',
     * 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond',
     * 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage',
     * 'availabilityResults/availabilityPercentage', 'availabilityResults/duration',
     * 'billing/telemetryCount', 'customEvents/count'
     *
     * @param {MetricsGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Metrics.prototype.getWithHttpOperationResponse = function (appId, metricId, options) {
        return this.client.sendOperationRequest({
            appId: appId,
            metricId: metricId,
            options: options
        }, getOperationSpec);
    };
    /**
     * @summary Retrieve metric data
     *
     * Gets metric values for multiple metrics
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {MetricsPostBodySchema[]} body The batched metrics query.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Metrics.prototype.getMultipleWithHttpOperationResponse = function (appId, body, options) {
        return this.client.sendOperationRequest({
            appId: appId,
            body: body,
            options: options
        }, getMultipleOperationSpec);
    };
    /**
     * @summary Retrieve metric metatadata
     *
     * Gets metadata describing the available metrics
     *
     * @param {string} appId ID of the application. This is Application ID from the API Access settings
     * blade in the Azure portal.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    Metrics.prototype.getMetadataWithHttpOperationResponse = function (appId, options) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, getMetadataOperationSpec);
    };
    Metrics.prototype.get = function (appId, metricId, options, callback) {
        return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), appId, metricId, options, callback);
    };
    Metrics.prototype.getMultiple = function (appId, body, options, callback) {
        return msRest.responseToBody(this.getMultipleWithHttpOperationResponse.bind(this), appId, body, options, callback);
    };
    Metrics.prototype.getMetadata = function (appId, options, callback) {
        return msRest.responseToBody(this.getMetadataWithHttpOperationResponse.bind(this), appId, options, callback);
    };
    return Metrics;
}());
exports.Metrics = Metrics;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "v1/apps/{appId}/metrics/{metricId}",
    urlParameters: [
        Parameters.appId,
        Parameters.metricId
    ],
    queryParameters: [
        Parameters.timespan,
        Parameters.interval,
        Parameters.aggregation,
        Parameters.segment,
        Parameters.top0,
        Parameters.orderby0,
        Parameters.filter0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MetricsResult
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getMultipleOperationSpec = {
    httpMethod: "POST",
    path: "v1/apps/{appId}/metrics",
    urlParameters: [
        Parameters.appId
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "MetricsPostBodySchema"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricsResultsItem"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getMetadataOperationSpec = {
    httpMethod: "GET",
    path: "v1/apps/{appId}/metrics/metadata",
    urlParameters: [
        Parameters.appId
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
