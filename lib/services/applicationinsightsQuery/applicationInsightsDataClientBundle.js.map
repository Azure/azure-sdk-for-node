{"version":3,"sources":["webpack:///webpack/bootstrap 8117ff29074219e07b45","webpack:///./lib/models/mappers.ts","webpack:///external \"msRest\"","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///external \"msRestAzure\"","webpack:///./lib/applicationInsightsDataClient.ts","webpack:///./lib/models/index.ts","webpack:///./lib/applicationInsightsDataClientContext.ts","webpack:///./lib/operations/index.ts","webpack:///./lib/operations/metrics.ts","webpack:///./lib/models/metricsMappers.ts","webpack:///./lib/operations/events.ts","webpack:///./lib/models/eventsMappers.ts","webpack:///./lib/operations/query.ts","webpack:///./lib/models/queryMappers.ts"],"names":[],"mappings":"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","file":"applicationInsightsDataClientBundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8117ff29074219e07b45","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport {CloudErrorMapper, BaseResourceMapper } from \"ms-rest-azure-js\";\n\nexport const CloudError = CloudErrorMapper;\nexport const BaseResource = BaseResourceMapper;\n\nexport const MetricsPostBodySchemaParameters = {\n  serializedName: \"metricsPostBodySchema_parameters\",\n  type: {\n    name: \"Composite\",\n    className: \"MetricsPostBodySchemaParameters\",\n    modelProperties: {\n      metricId: {\n        serializedName: \"metricId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timespan: {\n        serializedName: \"timespan\",\n        type: {\n          name: \"String\"\n        }\n      },\n      aggregation: {\n        serializedName: \"aggregation\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"MetricsAggregationElementType\",\n            type: {\n              name: \"Enum\",\n              allowedValues: [\n                \"min\",\n                \"max\",\n                \"avg\",\n                \"sum\",\n                \"count\",\n                \"unique\"\n              ]\n            }\n          }\n        }\n      },\n      interval: {\n        serializedName: \"interval\",\n        type: {\n          name: \"TimeSpan\"\n        }\n      },\n      segment: {\n        serializedName: \"segment\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"MetricsSegmentElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderby: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetricsPostBodySchema = {\n  serializedName: \"metricsPostBodySchema\",\n  type: {\n    name: \"Composite\",\n    className: \"MetricsPostBodySchema\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      parameters: {\n        required: true,\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"MetricsPostBodySchemaParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetricsSegmentInfo = {\n  serializedName: \"metricsSegmentInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"MetricsSegmentInfo\",\n    modelProperties: {\n      additionalProperties: {\n        type: {\n          name: \"Dictionary\",\n          value: {\n            serializedName: \"ObjectElementType\",\n            type: {\n              name: \"Object\"\n            }\n          }\n        }\n      },\n      start: {\n        serializedName: \"start\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      end: {\n        serializedName: \"end\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      segments: {\n        serializedName: \"segments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"MetricsSegmentInfoElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"MetricsSegmentInfo\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MetricsResultInfo = {\n  serializedName: \"metricsResultInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"MetricsResultInfo\",\n    modelProperties: {\n      additionalProperties: {\n        type: {\n          name: \"Dictionary\",\n          value: {\n            serializedName: \"ObjectElementType\",\n            type: {\n              name: \"Object\"\n            }\n          }\n        }\n      },\n      start: {\n        serializedName: \"start\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      end: {\n        serializedName: \"end\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      interval: {\n        serializedName: \"interval\",\n        type: {\n          name: \"TimeSpan\"\n        }\n      },\n      segments: {\n        serializedName: \"segments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"MetricsSegmentInfoElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"MetricsSegmentInfo\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MetricsResult = {\n  serializedName: \"metricsResult\",\n  type: {\n    name: \"Composite\",\n    className: \"MetricsResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Composite\",\n          className: \"MetricsResultInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetricsResultsItem = {\n  serializedName: \"metricsResultsItem\",\n  type: {\n    name: \"Composite\",\n    className: \"MetricsResultsItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      body: {\n        serializedName: \"body\",\n        type: {\n          name: \"Composite\",\n          className: \"MetricsResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorDetail = {\n  serializedName: \"errorDetail\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorDetail\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resources: {\n        serializedName: \"resources\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"stringElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      additionalProperties: {\n        serializedName: \"additionalProperties\",\n        type: {\n          name: \"Object\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorInfo = {\n  serializedName: \"errorInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorInfo\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ErrorDetailElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ErrorDetail\"\n            }\n          }\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorInfo\"\n        }\n      },\n      additionalProperties: {\n        serializedName: \"additionalProperties\",\n        type: {\n          name: \"Object\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsResultDataCustomDimensions = {\n  serializedName: \"eventsResultData_customDimensions\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsResultDataCustomDimensions\",\n    modelProperties: {\n      additionalProperties: {\n        serializedName: \"additionalProperties\",\n        type: {\n          name: \"Object\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsResultDataCustomMeasurements = {\n  serializedName: \"eventsResultData_customMeasurements\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsResultDataCustomMeasurements\",\n    modelProperties: {\n      additionalProperties: {\n        serializedName: \"additionalProperties\",\n        type: {\n          name: \"Object\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsOperationInfo = {\n  serializedName: \"eventsOperationInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsOperationInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      parentId: {\n        serializedName: \"parentId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      syntheticSource: {\n        serializedName: \"syntheticSource\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsSessionInfo = {\n  serializedName: \"eventsSessionInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsSessionInfo\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsUserInfo = {\n  serializedName: \"eventsUserInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsUserInfo\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"accountId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authenticatedId: {\n        serializedName: \"authenticatedId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsCloudInfo = {\n  serializedName: \"eventsCloudInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsCloudInfo\",\n    modelProperties: {\n      roleName: {\n        serializedName: \"roleName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      roleInstance: {\n        serializedName: \"roleInstance\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsAiInfo = {\n  serializedName: \"eventsAiInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsAiInfo\",\n    modelProperties: {\n      iKey: {\n        serializedName: \"iKey\",\n        type: {\n          name: \"String\"\n        }\n      },\n      appName: {\n        serializedName: \"appName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      appId: {\n        serializedName: \"appId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sdkVersion: {\n        serializedName: \"sdkVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsApplicationInfo = {\n  serializedName: \"eventsApplicationInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsApplicationInfo\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsClientInfo = {\n  serializedName: \"eventsClientInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsClientInfo\",\n    modelProperties: {\n      model: {\n        serializedName: \"model\",\n        type: {\n          name: \"String\"\n        }\n      },\n      os: {\n        serializedName: \"os\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      browser: {\n        serializedName: \"browser\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ip: {\n        serializedName: \"ip\",\n        type: {\n          name: \"String\"\n        }\n      },\n      city: {\n        serializedName: \"city\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateOrProvince: {\n        serializedName: \"stateOrProvince\",\n        type: {\n          name: \"String\"\n        }\n      },\n      countryOrRegion: {\n        serializedName: \"countryOrRegion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsResultData = {\n  serializedName: \"eventsResultData\",\n  type: {\n    name: \"Composite\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    uberParent: \"EventsResultData\",\n    className: \"EventsResultData\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      count: {\n        serializedName: \"count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      timestamp: {\n        serializedName: \"timestamp\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      customDimensions: {\n        serializedName: \"customDimensions\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsResultDataCustomDimensions\"\n        }\n      },\n      customMeasurements: {\n        serializedName: \"customMeasurements\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsResultDataCustomMeasurements\"\n        }\n      },\n      operation: {\n        serializedName: \"operation\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsOperationInfo\"\n        }\n      },\n      session: {\n        serializedName: \"session\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsSessionInfo\"\n        }\n      },\n      user: {\n        serializedName: \"user\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsUserInfo\"\n        }\n      },\n      cloud: {\n        serializedName: \"cloud\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsCloudInfo\"\n        }\n      },\n      ai: {\n        serializedName: \"ai\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsAiInfo\"\n        }\n      },\n      application: {\n        serializedName: \"application\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsApplicationInfo\"\n        }\n      },\n      client: {\n        serializedName: \"client\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsClientInfo\"\n        }\n      },\n      type: {\n        required: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsResults = {\n  serializedName: \"eventsResults\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsResults\",\n    modelProperties: {\n      odatacontext: {\n        serializedName: \"@odata\\\\.context\",\n        type: {\n          name: \"String\"\n        }\n      },\n      aimessages: {\n        serializedName: \"@ai\\\\.messages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ErrorInfoElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ErrorInfo\"\n            }\n          }\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"EventsResultDataElementType\",\n            type: {\n              name: \"Composite\",\n              polymorphicDiscriminator: {\n                serializedName: \"type\",\n                clientName: \"type\"\n              },\n              uberParent: \"EventsResultData\",\n              className: \"EventsResultData\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EventsResult = {\n  serializedName: \"eventsResult\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsResult\",\n    modelProperties: {\n      aimessages: {\n        serializedName: \"@ai\\\\.messages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ErrorInfoElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ErrorInfo\"\n            }\n          }\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Composite\",\n          polymorphicDiscriminator: {\n            serializedName: \"type\",\n            clientName: \"type\"\n          },\n          uberParent: \"EventsResultData\",\n          className: \"EventsResultData\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsTraceInfo = {\n  serializedName: \"eventsTraceInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsTraceInfo\",\n    modelProperties: {\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      severityLevel: {\n        serializedName: \"severityLevel\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsTraceResult = {\n  serializedName: \"trace\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsTraceResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      trace: {\n        serializedName: \"trace\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsTraceInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsCustomEventInfo = {\n  serializedName: \"eventsCustomEventInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsCustomEventInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsCustomEventResult = {\n  serializedName: \"customEvent\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsCustomEventResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      customEvent: {\n        serializedName: \"customEvent\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsCustomEventInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsPageViewInfo = {\n  serializedName: \"eventsPageViewInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsPageViewInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      duration: {\n        serializedName: \"duration\",\n        type: {\n          name: \"String\"\n        }\n      },\n      performanceBucket: {\n        serializedName: \"performanceBucket\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsPageViewResult = {\n  serializedName: \"pageView\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsPageViewResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      pageView: {\n        serializedName: \"pageView\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsPageViewInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsBrowserTimingInfo = {\n  serializedName: \"eventsBrowserTimingInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsBrowserTimingInfo\",\n    modelProperties: {\n      urlPath: {\n        serializedName: \"urlPath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      urlHost: {\n        serializedName: \"urlHost\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      totalDuration: {\n        serializedName: \"totalDuration\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      performanceBucket: {\n        serializedName: \"performanceBucket\",\n        type: {\n          name: \"String\"\n        }\n      },\n      networkDuration: {\n        serializedName: \"networkDuration\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sendDuration: {\n        serializedName: \"sendDuration\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      receiveDuration: {\n        serializedName: \"receiveDuration\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      processingDuration: {\n        serializedName: \"processingDuration\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsClientPerformanceInfo = {\n  serializedName: \"eventsClientPerformanceInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsClientPerformanceInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsBrowserTimingResult = {\n  serializedName: \"browserTiming\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsBrowserTimingResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      browserTiming: {\n        serializedName: \"browserTiming\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsBrowserTimingInfo\"\n        }\n      },\n      clientPerformance: {\n        serializedName: \"clientPerformance\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsClientPerformanceInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsRequestInfo = {\n  serializedName: \"eventsRequestInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsRequestInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      success: {\n        serializedName: \"success\",\n        type: {\n          name: \"String\"\n        }\n      },\n      duration: {\n        serializedName: \"duration\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      performanceBucket: {\n        serializedName: \"performanceBucket\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resultCode: {\n        serializedName: \"resultCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsRequestResult = {\n  serializedName: \"request\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsRequestResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      request: {\n        serializedName: \"request\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsRequestInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsDependencyInfo = {\n  serializedName: \"eventsDependencyInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsDependencyInfo\",\n    modelProperties: {\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      success: {\n        serializedName: \"success\",\n        type: {\n          name: \"String\"\n        }\n      },\n      duration: {\n        serializedName: \"duration\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      performanceBucket: {\n        serializedName: \"performanceBucket\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resultCode: {\n        serializedName: \"resultCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsDependencyResult = {\n  serializedName: \"dependency\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsDependencyResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      dependency: {\n        serializedName: \"dependency\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsDependencyInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsExceptionDetailsParsedStack = {\n  serializedName: \"eventsExceptionDetailsParsedStack\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsExceptionDetailsParsedStack\",\n    modelProperties: {\n      assembly: {\n        serializedName: \"assembly\",\n        type: {\n          name: \"String\"\n        }\n      },\n      method: {\n        serializedName: \"method\",\n        type: {\n          name: \"String\"\n        }\n      },\n      level: {\n        serializedName: \"level\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      line: {\n        serializedName: \"line\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsExceptionDetail = {\n  serializedName: \"eventsExceptionDetail\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsExceptionDetail\",\n    modelProperties: {\n      severityLevel: {\n        serializedName: \"severityLevel\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outerId: {\n        serializedName: \"outerId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      parsedStack: {\n        serializedName: \"parsedStack\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"EventsExceptionDetailsParsedStackElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"EventsExceptionDetailsParsedStack\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EventsExceptionInfo = {\n  serializedName: \"eventsExceptionInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsExceptionInfo\",\n    modelProperties: {\n      severityLevel: {\n        serializedName: \"severityLevel\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      problemId: {\n        serializedName: \"problemId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      handledAt: {\n        serializedName: \"handledAt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      assembly: {\n        serializedName: \"assembly\",\n        type: {\n          name: \"String\"\n        }\n      },\n      method: {\n        serializedName: \"method\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outerType: {\n        serializedName: \"outerType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outerMethod: {\n        serializedName: \"outerMethod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outerAssembly: {\n        serializedName: \"outerAssembly\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outerMessage: {\n        serializedName: \"outerMessage\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innermostType: {\n        serializedName: \"innermostType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innermostMessage: {\n        serializedName: \"innermostMessage\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innermostMethod: {\n        serializedName: \"innermostMethod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innermostAssembly: {\n        serializedName: \"innermostAssembly\",\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"EventsExceptionDetailElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"EventsExceptionDetail\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EventsExceptionResult = {\n  serializedName: \"exception\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsExceptionResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      exception: {\n        serializedName: \"exception\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsExceptionInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsAvailabilityResultInfo = {\n  serializedName: \"eventsAvailabilityResultInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsAvailabilityResultInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      success: {\n        serializedName: \"success\",\n        type: {\n          name: \"String\"\n        }\n      },\n      duration: {\n        serializedName: \"duration\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      performanceBucket: {\n        serializedName: \"performanceBucket\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        serializedName: \"size\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsAvailabilityResultResult = {\n  serializedName: \"availabilityResult\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsAvailabilityResultResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      availabilityResult: {\n        serializedName: \"availabilityResult\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsAvailabilityResultInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsPerformanceCounterInfo = {\n  serializedName: \"eventsPerformanceCounterInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsPerformanceCounterInfo\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        serializedName: \"category\",\n        type: {\n          name: \"String\"\n        }\n      },\n      counter: {\n        serializedName: \"counter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      instanceName: {\n        serializedName: \"instanceName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      instance: {\n        serializedName: \"instance\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsPerformanceCounterResult = {\n  serializedName: \"performanceCounter\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsPerformanceCounterResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      performanceCounter: {\n        serializedName: \"performanceCounter\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsPerformanceCounterInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsCustomMetricInfo = {\n  serializedName: \"eventsCustomMetricInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsCustomMetricInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueSum: {\n        serializedName: \"valueSum\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueCount: {\n        serializedName: \"valueCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueMin: {\n        serializedName: \"valueMin\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueMax: {\n        serializedName: \"valueMax\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueStdDev: {\n        serializedName: \"valueStdDev\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsCustomMetricResult = {\n  serializedName: \"customMetric\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsCustomMetricResult\",\n    modelProperties: {\n      ...EventsResultData.type.modelProperties,\n      customMetric: {\n        serializedName: \"customMetric\",\n        type: {\n          name: \"Composite\",\n          className: \"EventsCustomMetricInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueryBody = {\n  serializedName: \"queryBody\",\n  type: {\n    name: \"Composite\",\n    className: \"QueryBody\",\n    modelProperties: {\n      query: {\n        required: true,\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timespan: {\n        serializedName: \"timespan\",\n        type: {\n          name: \"String\"\n        }\n      },\n      applications: {\n        serializedName: \"applications\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"stringElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Column = {\n  serializedName: \"column\",\n  type: {\n    name: \"Composite\",\n    className: \"Column\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Table = {\n  serializedName: \"table\",\n  type: {\n    name: \"Composite\",\n    className: \"Table\",\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      columns: {\n        required: true,\n        serializedName: \"columns\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ColumnElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Column\"\n            }\n          }\n        }\n      },\n      rows: {\n        required: true,\n        serializedName: \"rows\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ArrayElementType\",\n            type: {\n              name: \"Sequence\",\n              element: {\n                serializedName: \"ObjectElementType\",\n                type: {\n                  name: \"Object\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const QueryResults = {\n  serializedName: \"queryResults\",\n  type: {\n    name: \"Composite\",\n    className: \"QueryResults\",\n    modelProperties: {\n      tables: {\n        required: true,\n        serializedName: \"tables\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"TableElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Table\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse = {\n  serializedName: \"errorResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        required: true,\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const MetricsGetOptionalParams = {\n  serializedName: \"GetOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"MetricsGetOptionalParams\",\n    modelProperties: {\n      timespan: {\n        serializedName: \"timespan\",\n        type: {\n          name: \"String\"\n        }\n      },\n      interval: {\n        serializedName: \"interval\",\n        type: {\n          name: \"TimeSpan\"\n        }\n      },\n      aggregation: {\n        serializedName: \"aggregation\",\n        constraints: {\n          MinItems: 1\n        },\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"MetricsAggregationElementType\",\n            type: {\n              name: \"Enum\",\n              allowedValues: [\n                \"min\",\n                \"max\",\n                \"avg\",\n                \"sum\",\n                \"count\",\n                \"unique\"\n              ]\n            }\n          }\n        }\n      },\n      segment: {\n        serializedName: \"segment\",\n        constraints: {\n          MinItems: 1\n        },\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"MetricsSegmentElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderby: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsGetByTypeOptionalParams = {\n  serializedName: \"GetByTypeOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsGetByTypeOptionalParams\",\n    modelProperties: {\n      timespan: {\n        serializedName: \"timespan\",\n        type: {\n          name: \"String\"\n        }\n      },\n      filter: {\n        serializedName: \"$filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      search: {\n        serializedName: \"$search\",\n        type: {\n          name: \"String\"\n        }\n      },\n      orderby: {\n        serializedName: \"$orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      select: {\n        serializedName: \"$select\",\n        type: {\n          name: \"String\"\n        }\n      },\n      skip: {\n        serializedName: \"$skip\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        serializedName: \"$top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      format: {\n        serializedName: \"$format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      count: {\n        serializedName: \"$count\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      apply: {\n        serializedName: \"$apply\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventsGetOptionalParams = {\n  serializedName: \"GetOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"EventsGetOptionalParams\",\n    modelProperties: {\n      timespan: {\n        serializedName: \"timespan\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const discriminators = {\n  'eventsResultData' : EventsResultData,\n  'EventsResultData.trace' : EventsTraceResult,\n  'EventsResultData.customEvent' : EventsCustomEventResult,\n  'EventsResultData.pageView' : EventsPageViewResult,\n  'EventsResultData.browserTiming' : EventsBrowserTimingResult,\n  'EventsResultData.request' : EventsRequestResult,\n  'EventsResultData.dependency' : EventsDependencyResult,\n  'EventsResultData.exception' : EventsExceptionResult,\n  'EventsResultData.availabilityResult' : EventsAvailabilityResultResult,\n  'EventsResultData.performanceCounter' : EventsPerformanceCounterResult,\n  'EventsResultData.customMetric' : EventsCustomMetricResult\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/mappers.ts","module.exports = msRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRest\"\n// module id = 1\n// module chunks = 0","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 2\n// module chunks = 0","module.exports = msRestAzure;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRestAzure\"\n// module id = 3\n// module chunks = 0","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as msRest from \"ms-rest-js\";\nimport * as msRestAzure from \"ms-rest-azure-js\";\nimport { ApplicationInsightsDataClientContext } from \"./applicationInsightsDataClientContext\";\nimport * as operations from \"./operations\";\n\n\nclass ApplicationInsightsDataClient extends ApplicationInsightsDataClientContext {\n  serializer = new msRest.Serializer(Mappers);\n\n  // Operation groups\n  metrics: operations.Metrics;\n  events: operations.Events;\n  query: operations.Query;\n\n  /**\n   * @class\n   * Initializes a new instance of the ApplicationInsightsDataClient class.\n   * @constructor\n   *\n   * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.\n   *\n   * @param {string} [baseUri] - The base URI of the service.\n   *\n   * @param {object} [options] - The parameter options\n   *\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\n   *\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\n   * {@link https://github.github.io/fetch/#Request Options doc}\n   *\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\n   *\n   * @param {string} [options.acceptLanguage] - The preferred language for the response.\n   *\n   * @param {number} [options.longRunningOperationRetryTimeout] - The retry timeout in seconds for Long Running Operations. Default value is 30.\n   *\n   * @param {boolean} [options.generateClientRequestId] - Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.\n   *\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRestAzure.AzureServiceClientOptions) {\n    super(credentials, baseUri, options);\n    this.metrics = new operations.Metrics(this);\n    this.events = new operations.Events(this);\n    this.query = new operations.Query(this);\n  }\n}\n\nexport { ApplicationInsightsDataClient, Models as ApplicationInsightsDataModels, Mappers as ApplicationInsightsDataMappers };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/applicationInsightsDataClient.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport { BaseResource, CloudError } from \"ms-rest-azure-js\";\nimport * as msRest from \"ms-rest-js\";\n\nexport { BaseResource, CloudError };\n\n\n/**\n * @interface\n * An interface representing MetricsPostBodySchemaParameters.\n * The parameters for a single metrics query\n *\n */\nexport interface MetricsPostBodySchemaParameters {\n  /**\n   * @member {MetricId} [metricId] Possible values include: 'requests/count',\n   * 'requests/duration', 'requests/failed', 'users/count',\n   * 'users/authenticated', 'pageViews/count', 'pageViews/duration',\n   * 'client/processingDuration', 'client/receiveDuration',\n   * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration',\n   * 'dependencies/count', 'dependencies/failed', 'dependencies/duration',\n   * 'exceptions/count', 'exceptions/browser', 'exceptions/server',\n   * 'sessions/count', 'performanceCounters/requestExecutionTime',\n   * 'performanceCounters/requestsPerSecond',\n   * 'performanceCounters/requestsInQueue',\n   * 'performanceCounters/memoryAvailableBytes',\n   * 'performanceCounters/exceptionsPerSecond',\n   * 'performanceCounters/processCpuPercentage',\n   * 'performanceCounters/processIOBytesPerSecond',\n   * 'performanceCounters/processPrivateBytes',\n   * 'performanceCounters/processorCpuPercentage',\n   * 'availabilityResults/availabilityPercentage',\n   * 'availabilityResults/duration', 'billing/telemetryCount',\n   * 'customEvents/count'\n   */\n  metricId?: MetricId;\n  /**\n   * @member {string} [timespan]\n   */\n  timespan?: string;\n  /**\n   * @member {MetricsAggregation[]} [aggregation]\n   */\n  aggregation?: MetricsAggregation[];\n  /**\n   * @member {string} [interval]\n   */\n  interval?: string;\n  /**\n   * @member {MetricsSegment[]} [segment]\n   */\n  segment?: MetricsSegment[];\n  /**\n   * @member {number} [top]\n   */\n  top?: number;\n  /**\n   * @member {string} [orderby]\n   */\n  orderby?: string;\n  /**\n   * @member {string} [filter]\n   */\n  filter?: string;\n}\n\n/**\n * @interface\n * An interface representing MetricsPostBodySchema.\n * A metric request\n *\n */\nexport interface MetricsPostBodySchema {\n  /**\n   * @member {string} id An identifier for this query.  Must be unique within\n   * the post body of the request.  This identifier will be the 'id' property\n   * of the response object representing this query.\n   */\n  id: string;\n  /**\n   * @member {MetricsPostBodySchemaParameters} parameters The parameters for a\n   * single metrics query\n   */\n  parameters: MetricsPostBodySchemaParameters;\n}\n\n/**\n * @interface\n * An interface representing MetricsSegmentInfo.\n * A metric segment\n *\n */\nexport interface MetricsSegmentInfo {\n  /**\n   * @member {{ [propertyName: string]: any }} [additionalProperties] Unmatched\n   * properties from the message are deserialized this collection\n   */\n  additionalProperties?: { [propertyName: string]: any };\n  /**\n   * @member {Date} [start] Start time of the metric segment (only when an\n   * interval was specified).\n   */\n  start?: Date;\n  /**\n   * @member {Date} [end] Start time of the metric segment (only when an\n   * interval was specified).\n   */\n  end?: Date;\n  /**\n   * @member {MetricsSegmentInfo[]} [segments] Segmented metric data (if\n   * further segmented).\n   */\n  segments?: MetricsSegmentInfo[];\n}\n\n/**\n * @interface\n * An interface representing MetricsResultInfo.\n * A metric result data.\n *\n */\nexport interface MetricsResultInfo {\n  /**\n   * @member {{ [propertyName: string]: any }} [additionalProperties] Unmatched\n   * properties from the message are deserialized this collection\n   */\n  additionalProperties?: { [propertyName: string]: any };\n  /**\n   * @member {Date} [start] Start time of the metric.\n   */\n  start?: Date;\n  /**\n   * @member {Date} [end] Start time of the metric.\n   */\n  end?: Date;\n  /**\n   * @member {string} [interval] The interval used to segment the metric data.\n   */\n  interval?: string;\n  /**\n   * @member {MetricsSegmentInfo[]} [segments] Segmented metric data (if\n   * segmented).\n   */\n  segments?: MetricsSegmentInfo[];\n}\n\n/**\n * @interface\n * An interface representing MetricsResult.\n * A metric result.\n *\n */\nexport interface MetricsResult {\n  /**\n   * @member {MetricsResultInfo} [value]\n   */\n  value?: MetricsResultInfo;\n}\n\n/**\n * @interface\n * An interface representing MetricsResultsItem.\n */\nexport interface MetricsResultsItem {\n  /**\n   * @member {string} [id] The specified ID for this metric.\n   */\n  id?: string;\n  /**\n   * @member {number} [status] The HTTP status code of this metric query.\n   */\n  status?: number;\n  /**\n   * @member {MetricsResult} [body] The results of this metric query.\n   */\n  body?: MetricsResult;\n}\n\n/**\n * @interface\n * An interface representing ErrorDetail.\n * @summary Error details.\n *\n */\nexport interface ErrorDetail {\n  /**\n   * @member {string} code The error's code.\n   */\n  code: string;\n  /**\n   * @member {string} message A human readable error message.\n   */\n  message: string;\n  /**\n   * @member {string} [target] Indicates which property in the request is\n   * responsible for the error.\n   */\n  target?: string;\n  /**\n   * @member {string} [value] Indicates which value in 'target' is responsible\n   * for the error.\n   */\n  value?: string;\n  /**\n   * @member {string[]} [resources] Indicates resources which were responsible\n   * for the error.\n   */\n  resources?: string[];\n  /**\n   * @member {any} [additionalProperties]\n   */\n  additionalProperties?: any;\n}\n\n/**\n * @interface\n * An interface representing ErrorInfo.\n * @summary The code and message for an error.\n *\n */\nexport interface ErrorInfo {\n  /**\n   * @member {string} code A machine readable error code.\n   */\n  code: string;\n  /**\n   * @member {string} message A human readable error message.\n   */\n  message: string;\n  /**\n   * @member {ErrorDetail[]} [details] error details.\n   */\n  details?: ErrorDetail[];\n  /**\n   * @member {ErrorInfo} [innererror] Inner error details if they exist.\n   */\n  innererror?: ErrorInfo;\n  /**\n   * @member {any} [additionalProperties]\n   */\n  additionalProperties?: any;\n}\n\n/**\n * @interface\n * An interface representing EventsResultDataCustomDimensions.\n * Custom dimensions of the event\n *\n */\nexport interface EventsResultDataCustomDimensions {\n  /**\n   * @member {any} [additionalProperties]\n   */\n  additionalProperties?: any;\n}\n\n/**\n * @interface\n * An interface representing EventsResultDataCustomMeasurements.\n * Custom measurements of the event\n *\n */\nexport interface EventsResultDataCustomMeasurements {\n  /**\n   * @member {any} [additionalProperties]\n   */\n  additionalProperties?: any;\n}\n\n/**\n * @interface\n * An interface representing EventsOperationInfo.\n * Operation info for an event result\n *\n */\nexport interface EventsOperationInfo {\n  /**\n   * @member {string} [name] Name of the operation\n   */\n  name?: string;\n  /**\n   * @member {string} [id] ID of the operation\n   */\n  id?: string;\n  /**\n   * @member {string} [parentId] Parent ID of the operation\n   */\n  parentId?: string;\n  /**\n   * @member {string} [syntheticSource] Synthetic source of the operation\n   */\n  syntheticSource?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsSessionInfo.\n * Session info for an event result\n *\n */\nexport interface EventsSessionInfo {\n  /**\n   * @member {string} [id] ID of the session\n   */\n  id?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsUserInfo.\n * User info for an event result\n *\n */\nexport interface EventsUserInfo {\n  /**\n   * @member {string} [id] ID of the user\n   */\n  id?: string;\n  /**\n   * @member {string} [accountId] Account ID of the user\n   */\n  accountId?: string;\n  /**\n   * @member {string} [authenticatedId] Authenticated ID of the user\n   */\n  authenticatedId?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsCloudInfo.\n * Cloud info for an event result\n *\n */\nexport interface EventsCloudInfo {\n  /**\n   * @member {string} [roleName] Role name of the cloud\n   */\n  roleName?: string;\n  /**\n   * @member {string} [roleInstance] Role instance of the cloud\n   */\n  roleInstance?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsAiInfo.\n * AI related application info for an event result\n *\n */\nexport interface EventsAiInfo {\n  /**\n   * @member {string} [iKey] iKey of the app\n   */\n  iKey?: string;\n  /**\n   * @member {string} [appName] Name of the application\n   */\n  appName?: string;\n  /**\n   * @member {string} [appId] ID of the application\n   */\n  appId?: string;\n  /**\n   * @member {string} [sdkVersion] SDK version of the application\n   */\n  sdkVersion?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsApplicationInfo.\n * Application info for an event result\n *\n */\nexport interface EventsApplicationInfo {\n  /**\n   * @member {string} [version] Version of the application\n   */\n  version?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsClientInfo.\n * Client info for an event result\n *\n */\nexport interface EventsClientInfo {\n  /**\n   * @member {string} [model] Model of the client\n   */\n  model?: string;\n  /**\n   * @member {string} [os] Operating system of the client\n   */\n  os?: string;\n  /**\n   * @member {string} [type] Type of the client\n   */\n  type?: string;\n  /**\n   * @member {string} [browser] Browser of the client\n   */\n  browser?: string;\n  /**\n   * @member {string} [ip] IP address of the client\n   */\n  ip?: string;\n  /**\n   * @member {string} [city] City of the client\n   */\n  city?: string;\n  /**\n   * @member {string} [stateOrProvince] State or province of the client\n   */\n  stateOrProvince?: string;\n  /**\n   * @member {string} [countryOrRegion] Country or region of the client\n   */\n  countryOrRegion?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsResultData.\n * Events query result data.\n *\n */\nexport interface EventsResultData {\n  /**\n   * @member {string} [id] The unique ID for this event.\n   */\n  id?: string;\n  /**\n   * @member {number} [count] Count of the event\n   */\n  count?: number;\n  /**\n   * @member {Date} [timestamp] Timestamp of the event\n   */\n  timestamp?: Date;\n  /**\n   * @member {EventsResultDataCustomDimensions} [customDimensions] Custom\n   * dimensions of the event\n   */\n  customDimensions?: EventsResultDataCustomDimensions;\n  /**\n   * @member {EventsResultDataCustomMeasurements} [customMeasurements] Custom\n   * measurements of the event\n   */\n  customMeasurements?: EventsResultDataCustomMeasurements;\n  /**\n   * @member {EventsOperationInfo} [operation] Operation info of the event\n   */\n  operation?: EventsOperationInfo;\n  /**\n   * @member {EventsSessionInfo} [session] Session info of the event\n   */\n  session?: EventsSessionInfo;\n  /**\n   * @member {EventsUserInfo} [user] User info of the event\n   */\n  user?: EventsUserInfo;\n  /**\n   * @member {EventsCloudInfo} [cloud] Cloud info of the event\n   */\n  cloud?: EventsCloudInfo;\n  /**\n   * @member {EventsAiInfo} [ai] AI info of the event\n   */\n  ai?: EventsAiInfo;\n  /**\n   * @member {EventsApplicationInfo} [application] Application info of the\n   * event\n   */\n  application?: EventsApplicationInfo;\n  /**\n   * @member {EventsClientInfo} [client] Client info of the event\n   */\n  client?: EventsClientInfo;\n  /**\n   * @member {string} type Polymorphic Discriminator\n   */\n  type: string;\n}\n\n/**\n * @interface\n * An interface representing EventsResults.\n * An events query result.\n *\n */\nexport interface EventsResults {\n  /**\n   * @member {string} [odatacontext] OData context metadata endpoint for this\n   * response\n   */\n  odatacontext?: string;\n  /**\n   * @member {ErrorInfo[]} [aimessages] OData messages for this response.\n   */\n  aimessages?: ErrorInfo[];\n  /**\n   * @member {EventsResultData[]} [value] Contents of the events query result.\n   */\n  value?: EventsResultData[];\n}\n\n/**\n * @interface\n * An interface representing EventsResult.\n * An event query result.\n *\n */\nexport interface EventsResult {\n  /**\n   * @member {ErrorInfo[]} [aimessages] OData messages for this response.\n   */\n  aimessages?: ErrorInfo[];\n  /**\n   * @member {EventsResultData} [value]\n   */\n  value?: EventsResultData;\n}\n\n/**\n * @interface\n * An interface representing EventsTraceInfo.\n * The trace information\n *\n */\nexport interface EventsTraceInfo {\n  /**\n   * @member {string} [message] The trace message\n   */\n  message?: string;\n  /**\n   * @member {number} [severityLevel] The trace severity level\n   */\n  severityLevel?: number;\n}\n\n/**\n * @interface\n * An interface representing EventsTraceResult.\n * A trace result\n *\n * @extends EventsResultData\n */\nexport interface EventsTraceResult extends EventsResultData {\n  /**\n   * @member {EventsTraceInfo} [trace]\n   */\n  trace?: EventsTraceInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsCustomEventInfo.\n * The custom event information\n *\n */\nexport interface EventsCustomEventInfo {\n  /**\n   * @member {string} [name] The name of the custom event\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsCustomEventResult.\n * A custom event result\n *\n * @extends EventsResultData\n */\nexport interface EventsCustomEventResult extends EventsResultData {\n  /**\n   * @member {EventsCustomEventInfo} [customEvent]\n   */\n  customEvent?: EventsCustomEventInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsPageViewInfo.\n * The page view information\n *\n */\nexport interface EventsPageViewInfo {\n  /**\n   * @member {string} [name] The name of the page\n   */\n  name?: string;\n  /**\n   * @member {string} [url] The URL of the page\n   */\n  url?: string;\n  /**\n   * @member {string} [duration] The duration of the page view\n   */\n  duration?: string;\n  /**\n   * @member {string} [performanceBucket] The performance bucket of the page\n   * view\n   */\n  performanceBucket?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsPageViewResult.\n * A page view result\n *\n * @extends EventsResultData\n */\nexport interface EventsPageViewResult extends EventsResultData {\n  /**\n   * @member {EventsPageViewInfo} [pageView]\n   */\n  pageView?: EventsPageViewInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsBrowserTimingInfo.\n * The browser timing information\n *\n */\nexport interface EventsBrowserTimingInfo {\n  /**\n   * @member {string} [urlPath] The path of the URL\n   */\n  urlPath?: string;\n  /**\n   * @member {string} [urlHost] The host of the URL\n   */\n  urlHost?: string;\n  /**\n   * @member {string} [name] The name of the page\n   */\n  name?: string;\n  /**\n   * @member {string} [url] The url of the page\n   */\n  url?: string;\n  /**\n   * @member {number} [totalDuration] The total duration of the load\n   */\n  totalDuration?: number;\n  /**\n   * @member {string} [performanceBucket] The performance bucket of the load\n   */\n  performanceBucket?: string;\n  /**\n   * @member {number} [networkDuration] The network duration of the load\n   */\n  networkDuration?: number;\n  /**\n   * @member {number} [sendDuration] The send duration of the load\n   */\n  sendDuration?: number;\n  /**\n   * @member {number} [receiveDuration] The receive duration of the load\n   */\n  receiveDuration?: number;\n  /**\n   * @member {number} [processingDuration] The processing duration of the load\n   */\n  processingDuration?: number;\n}\n\n/**\n * @interface\n * An interface representing EventsClientPerformanceInfo.\n * Client performance information\n *\n */\nexport interface EventsClientPerformanceInfo {\n  /**\n   * @member {string} [name] The name of the client performance\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsBrowserTimingResult.\n * A browser timing result\n *\n * @extends EventsResultData\n */\nexport interface EventsBrowserTimingResult extends EventsResultData {\n  /**\n   * @member {EventsBrowserTimingInfo} [browserTiming]\n   */\n  browserTiming?: EventsBrowserTimingInfo;\n  /**\n   * @member {EventsClientPerformanceInfo} [clientPerformance]\n   */\n  clientPerformance?: EventsClientPerformanceInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsRequestInfo.\n * The request info\n *\n */\nexport interface EventsRequestInfo {\n  /**\n   * @member {string} [name] The name of the request\n   */\n  name?: string;\n  /**\n   * @member {string} [url] The URL of the request\n   */\n  url?: string;\n  /**\n   * @member {string} [success] Indicates if the request was successful\n   */\n  success?: string;\n  /**\n   * @member {number} [duration] The duration of the request\n   */\n  duration?: number;\n  /**\n   * @member {string} [performanceBucket] The performance bucket of the request\n   */\n  performanceBucket?: string;\n  /**\n   * @member {string} [resultCode] The result code of the request\n   */\n  resultCode?: string;\n  /**\n   * @member {string} [source] The source of the request\n   */\n  source?: string;\n  /**\n   * @member {string} [id] The ID of the request\n   */\n  id?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsRequestResult.\n * A request result\n *\n * @extends EventsResultData\n */\nexport interface EventsRequestResult extends EventsResultData {\n  /**\n   * @member {EventsRequestInfo} [request]\n   */\n  request?: EventsRequestInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsDependencyInfo.\n * The dependency info\n *\n */\nexport interface EventsDependencyInfo {\n  /**\n   * @member {string} [target] The target of the dependency\n   */\n  target?: string;\n  /**\n   * @member {string} [data] The data of the dependency\n   */\n  data?: string;\n  /**\n   * @member {string} [success] Indicates if the dependency was successful\n   */\n  success?: string;\n  /**\n   * @member {number} [duration] The duration of the dependency\n   */\n  duration?: number;\n  /**\n   * @member {string} [performanceBucket] The performance bucket of the\n   * dependency\n   */\n  performanceBucket?: string;\n  /**\n   * @member {string} [resultCode] The result code of the dependency\n   */\n  resultCode?: string;\n  /**\n   * @member {string} [type] The type of the dependency\n   */\n  type?: string;\n  /**\n   * @member {string} [name] The name of the dependency\n   */\n  name?: string;\n  /**\n   * @member {string} [id] The ID of the dependency\n   */\n  id?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsDependencyResult.\n * A dependency result\n *\n * @extends EventsResultData\n */\nexport interface EventsDependencyResult extends EventsResultData {\n  /**\n   * @member {EventsDependencyInfo} [dependency]\n   */\n  dependency?: EventsDependencyInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsExceptionDetailsParsedStack.\n * A parsed stack entry\n *\n */\nexport interface EventsExceptionDetailsParsedStack {\n  /**\n   * @member {string} [assembly] The assembly of the stack entry\n   */\n  assembly?: string;\n  /**\n   * @member {string} [method] The method of the stack entry\n   */\n  method?: string;\n  /**\n   * @member {number} [level] The level of the stack entry\n   */\n  level?: number;\n  /**\n   * @member {number} [line] The line of the stack entry\n   */\n  line?: number;\n}\n\n/**\n * @interface\n * An interface representing EventsExceptionDetail.\n * Exception details\n *\n */\nexport interface EventsExceptionDetail {\n  /**\n   * @member {string} [severityLevel] The severity level of the exception\n   * detail\n   */\n  severityLevel?: string;\n  /**\n   * @member {string} [outerId] The outer ID of the exception detail\n   */\n  outerId?: string;\n  /**\n   * @member {string} [message] The message of the exception detail\n   */\n  message?: string;\n  /**\n   * @member {string} [type] The type of the exception detail\n   */\n  type?: string;\n  /**\n   * @member {string} [id] The ID of the exception detail\n   */\n  id?: string;\n  /**\n   * @member {EventsExceptionDetailsParsedStack[]} [parsedStack] The parsed\n   * stack\n   */\n  parsedStack?: EventsExceptionDetailsParsedStack[];\n}\n\n/**\n * @interface\n * An interface representing EventsExceptionInfo.\n * The exception info\n *\n */\nexport interface EventsExceptionInfo {\n  /**\n   * @member {number} [severityLevel] The severity level of the exception\n   */\n  severityLevel?: number;\n  /**\n   * @member {string} [problemId] The problem ID of the exception\n   */\n  problemId?: string;\n  /**\n   * @member {string} [handledAt] Indicates where the exception was handled at\n   */\n  handledAt?: string;\n  /**\n   * @member {string} [assembly] The assembly which threw the exception\n   */\n  assembly?: string;\n  /**\n   * @member {string} [method] The method that threw the exception\n   */\n  method?: string;\n  /**\n   * @member {string} [message] The message of the exception\n   */\n  message?: string;\n  /**\n   * @member {string} [type] The type of the exception\n   */\n  type?: string;\n  /**\n   * @member {string} [outerType] The outer type of the exception\n   */\n  outerType?: string;\n  /**\n   * @member {string} [outerMethod] The outer method of the exception\n   */\n  outerMethod?: string;\n  /**\n   * @member {string} [outerAssembly] The outer assmebly of the exception\n   */\n  outerAssembly?: string;\n  /**\n   * @member {string} [outerMessage] The outer message of the exception\n   */\n  outerMessage?: string;\n  /**\n   * @member {string} [innermostType] The inner most type of the exception\n   */\n  innermostType?: string;\n  /**\n   * @member {string} [innermostMessage] The inner most message of the\n   * exception\n   */\n  innermostMessage?: string;\n  /**\n   * @member {string} [innermostMethod] The inner most method of the exception\n   */\n  innermostMethod?: string;\n  /**\n   * @member {string} [innermostAssembly] The inner most assembly of the\n   * exception\n   */\n  innermostAssembly?: string;\n  /**\n   * @member {EventsExceptionDetail[]} [details] The details of the exception\n   */\n  details?: EventsExceptionDetail[];\n}\n\n/**\n * @interface\n * An interface representing EventsExceptionResult.\n * An exception result\n *\n * @extends EventsResultData\n */\nexport interface EventsExceptionResult extends EventsResultData {\n  /**\n   * @member {EventsExceptionInfo} [exception]\n   */\n  exception?: EventsExceptionInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsAvailabilityResultInfo.\n * The availability result info\n *\n */\nexport interface EventsAvailabilityResultInfo {\n  /**\n   * @member {string} [name] The name of the availability result\n   */\n  name?: string;\n  /**\n   * @member {string} [success] Indicates if the availability result was\n   * successful\n   */\n  success?: string;\n  /**\n   * @member {number} [duration] The duration of the availability result\n   */\n  duration?: number;\n  /**\n   * @member {string} [performanceBucket] The performance bucket of the\n   * availability result\n   */\n  performanceBucket?: string;\n  /**\n   * @member {string} [message] The message of the availability result\n   */\n  message?: string;\n  /**\n   * @member {string} [location] The location of the availability result\n   */\n  location?: string;\n  /**\n   * @member {string} [id] The ID of the availability result\n   */\n  id?: string;\n  /**\n   * @member {string} [size] The size of the availability result\n   */\n  size?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsAvailabilityResultResult.\n * An availability result result\n *\n * @extends EventsResultData\n */\nexport interface EventsAvailabilityResultResult extends EventsResultData {\n  /**\n   * @member {EventsAvailabilityResultInfo} [availabilityResult]\n   */\n  availabilityResult?: EventsAvailabilityResultInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsPerformanceCounterInfo.\n * The performance counter info\n *\n */\nexport interface EventsPerformanceCounterInfo {\n  /**\n   * @member {number} [value] The value of the performance counter\n   */\n  value?: number;\n  /**\n   * @member {string} [name] The name of the performance counter\n   */\n  name?: string;\n  /**\n   * @member {string} [category] The category of the performance counter\n   */\n  category?: string;\n  /**\n   * @member {string} [counter] The counter of the performance counter\n   */\n  counter?: string;\n  /**\n   * @member {string} [instanceName] The instance name of the performance\n   * counter\n   */\n  instanceName?: string;\n  /**\n   * @member {string} [instance] The instance of the performance counter\n   */\n  instance?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsPerformanceCounterResult.\n * A performance counter result\n *\n * @extends EventsResultData\n */\nexport interface EventsPerformanceCounterResult extends EventsResultData {\n  /**\n   * @member {EventsPerformanceCounterInfo} [performanceCounter]\n   */\n  performanceCounter?: EventsPerformanceCounterInfo;\n}\n\n/**\n * @interface\n * An interface representing EventsCustomMetricInfo.\n * The custom metric info\n *\n */\nexport interface EventsCustomMetricInfo {\n  /**\n   * @member {string} [name] The name of the custom metric\n   */\n  name?: string;\n  /**\n   * @member {number} [value] The value of the custom metric\n   */\n  value?: number;\n  /**\n   * @member {number} [valueSum] The sum of the custom metric\n   */\n  valueSum?: number;\n  /**\n   * @member {number} [valueCount] The count of the custom metric\n   */\n  valueCount?: number;\n  /**\n   * @member {number} [valueMin] The minimum value of the custom metric\n   */\n  valueMin?: number;\n  /**\n   * @member {number} [valueMax] The maximum value of the custom metric\n   */\n  valueMax?: number;\n  /**\n   * @member {number} [valueStdDev] The standard deviation of the custom metric\n   */\n  valueStdDev?: number;\n}\n\n/**\n * @interface\n * An interface representing EventsCustomMetricResult.\n * A custom metric result\n *\n * @extends EventsResultData\n */\nexport interface EventsCustomMetricResult extends EventsResultData {\n  /**\n   * @member {EventsCustomMetricInfo} [customMetric]\n   */\n  customMetric?: EventsCustomMetricInfo;\n}\n\n/**\n * @interface\n * An interface representing QueryBody.\n * The Analytics query. Learn more about the [Analytics query\n * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)\n *\n */\nexport interface QueryBody {\n  /**\n   * @member {string} query The query to execute.\n   */\n  query: string;\n  /**\n   * @member {string} [timespan] Optional. The timespan over which to query\n   * data. This is an ISO8601 time period value.  This timespan is applied in\n   * addition to any that are specified in the query expression.\n   */\n  timespan?: string;\n  /**\n   * @member {string[]} [applications] A list of Application IDs for\n   * cross-application queries.\n   */\n  applications?: string[];\n}\n\n/**\n * @interface\n * An interface representing Column.\n * @summary A table column.\n *\n * A column in a table.\n *\n */\nexport interface Column {\n  /**\n   * @member {string} [name] The name of this column.\n   */\n  name?: string;\n  /**\n   * @member {string} [type] The data type of this column.\n   */\n  type?: string;\n}\n\n/**\n * @interface\n * An interface representing Table.\n * @summary A query response table.\n *\n * Contains the columns and rows for one table in a query response.\n *\n */\nexport interface Table {\n  /**\n   * @member {string} name The name of the table.\n   */\n  name: string;\n  /**\n   * @member {Column[]} columns The list of columns in this table.\n   */\n  columns: Column[];\n  /**\n   * @member {any[][]} rows The resulting rows from this query.\n   */\n  rows: any[][];\n}\n\n/**\n * @interface\n * An interface representing QueryResults.\n * @summary A query response.\n *\n * Contains the tables, columns & rows resulting from a query.\n *\n */\nexport interface QueryResults {\n  /**\n   * @member {Table[]} tables The list of tables, columns and rows.\n   */\n  tables: Table[];\n}\n\n/**\n * @interface\n * An interface representing ErrorResponse.\n * @summary Error details.\n *\n * Contains details when the response code indicates an error.\n *\n */\nexport interface ErrorResponse {\n  /**\n   * @member {ErrorInfo} error The error details.\n   */\n  error: ErrorInfo;\n}\n\n/**\n * @interface\n * An interface representing MetricsGetOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface MetricsGetOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [timespan] The timespan over which to retrieve metric\n   * values. This is an ISO8601 time period value. If timespan is omitted, a\n   * default time range of `PT12H` (\"last 12 hours\") is used. The actual\n   * timespan that is queried may be adjusted by the server based. In all\n   * cases, the actual time span used for the query is included in the\n   * response.\n   */\n  timespan?: string;\n  /**\n   * @member {string} [interval] The time interval to use when retrieving\n   * metric values. This is an ISO8601 duration. If interval is omitted, the\n   * metric value is aggregated across the entire timespan. If interval is\n   * supplied, the server may adjust the interval to a more appropriate size\n   * based on the timespan used for the query. In all cases, the actual\n   * interval used for the query is included in the response.\n   */\n  interval?: string;\n  /**\n   * @member {MetricsAggregation[]} [aggregation] The aggregation to use when\n   * computing the metric values. To retrieve more than one aggregation at a\n   * time, separate them with a comma. If no aggregation is specified, then the\n   * default aggregation for the metric is used.\n   */\n  aggregation?: MetricsAggregation[];\n  /**\n   * @member {MetricsSegment[]} [segment] The name of the dimension to segment\n   * the metric values by. This dimension must be applicable to the metric you\n   * are retrieving. To segment by more than one dimension at a time, separate\n   * them with a comma (,). In this case, the metric data will be segmented in\n   * the order the dimensions are listed in the parameter.\n   */\n  segment?: MetricsSegment[];\n  /**\n   * @member {number} [top] The number of segments to return.  This value is\n   * only valid when segment is specified.\n   */\n  top?: number;\n  /**\n   * @member {string} [orderby] The aggregation function and direction to sort\n   * the segments by.  This value is only valid when segment is specified.\n   */\n  orderby?: string;\n  /**\n   * @member {string} [filter] An expression used to filter the results.  This\n   * value should be a valid OData filter expression where the keys of each\n   * clause should be applicable dimensions for the metric you are retrieving.\n   */\n  filter?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsGetByTypeOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface EventsGetByTypeOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [timespan] Optional. The timespan over which to retrieve\n   * events. This is an ISO8601 time period value.  This timespan is applied in\n   * addition to any that are specified in the Odata expression.\n   */\n  timespan?: string;\n  /**\n   * @member {string} [filter] An expression used to filter the returned events\n   */\n  filter?: string;\n  /**\n   * @member {string} [search] A free-text search expression to match for\n   * whether a particular event should be returned\n   */\n  search?: string;\n  /**\n   * @member {string} [orderby] A comma-separated list of properties with\n   * \\\"asc\\\" (the default) or \\\"desc\\\" to control the order of returned events\n   */\n  orderby?: string;\n  /**\n   * @member {string} [select] Limits the properties to just those requested on\n   * each returned event\n   */\n  select?: string;\n  /**\n   * @member {number} [skip] The number of items to skip over before returning\n   * events\n   */\n  skip?: number;\n  /**\n   * @member {number} [top] The number of events to return\n   */\n  top?: number;\n  /**\n   * @member {string} [format] Format for the returned events\n   */\n  format?: string;\n  /**\n   * @member {boolean} [count] Request a count of matching items included with\n   * the returned events\n   */\n  count?: boolean;\n  /**\n   * @member {string} [apply] An expression used for aggregation over returned\n   * events\n   */\n  apply?: string;\n}\n\n/**\n * @interface\n * An interface representing EventsGetOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface EventsGetOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [timespan] Optional. The timespan over which to retrieve\n   * events. This is an ISO8601 time period value.  This timespan is applied in\n   * addition to any that are specified in the Odata expression.\n   */\n  timespan?: string;\n}\n\n\n/**\n * Defines values for MetricId.\n * Possible values include: 'requests/count', 'requests/duration',\n * 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count',\n * 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration',\n * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration',\n * 'dependencies/count', 'dependencies/failed', 'dependencies/duration',\n * 'exceptions/count', 'exceptions/browser', 'exceptions/server',\n * 'sessions/count', 'performanceCounters/requestExecutionTime',\n * 'performanceCounters/requestsPerSecond',\n * 'performanceCounters/requestsInQueue',\n * 'performanceCounters/memoryAvailableBytes',\n * 'performanceCounters/exceptionsPerSecond',\n * 'performanceCounters/processCpuPercentage',\n * 'performanceCounters/processIOBytesPerSecond',\n * 'performanceCounters/processPrivateBytes',\n * 'performanceCounters/processorCpuPercentage',\n * 'availabilityResults/availabilityPercentage',\n * 'availabilityResults/duration', 'billing/telemetryCount',\n * 'customEvents/count'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: MetricId = <MetricId>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum MetricId {\n  Requestscount = 'requests/count',\n  Requestsduration = 'requests/duration',\n  Requestsfailed = 'requests/failed',\n  Userscount = 'users/count',\n  Usersauthenticated = 'users/authenticated',\n  PageViewscount = 'pageViews/count',\n  PageViewsduration = 'pageViews/duration',\n  ClientprocessingDuration = 'client/processingDuration',\n  ClientreceiveDuration = 'client/receiveDuration',\n  ClientnetworkDuration = 'client/networkDuration',\n  ClientsendDuration = 'client/sendDuration',\n  ClienttotalDuration = 'client/totalDuration',\n  Dependenciescount = 'dependencies/count',\n  Dependenciesfailed = 'dependencies/failed',\n  Dependenciesduration = 'dependencies/duration',\n  Exceptionscount = 'exceptions/count',\n  Exceptionsbrowser = 'exceptions/browser',\n  Exceptionsserver = 'exceptions/server',\n  Sessionscount = 'sessions/count',\n  PerformanceCountersrequestExecutionTime = 'performanceCounters/requestExecutionTime',\n  PerformanceCountersrequestsPerSecond = 'performanceCounters/requestsPerSecond',\n  PerformanceCountersrequestsInQueue = 'performanceCounters/requestsInQueue',\n  PerformanceCountersmemoryAvailableBytes = 'performanceCounters/memoryAvailableBytes',\n  PerformanceCountersexceptionsPerSecond = 'performanceCounters/exceptionsPerSecond',\n  PerformanceCountersprocessCpuPercentage = 'performanceCounters/processCpuPercentage',\n  PerformanceCountersprocessIOBytesPerSecond = 'performanceCounters/processIOBytesPerSecond',\n  PerformanceCountersprocessPrivateBytes = 'performanceCounters/processPrivateBytes',\n  PerformanceCountersprocessorCpuPercentage = 'performanceCounters/processorCpuPercentage',\n  AvailabilityResultsavailabilityPercentage = 'availabilityResults/availabilityPercentage',\n  AvailabilityResultsduration = 'availabilityResults/duration',\n  BillingtelemetryCount = 'billing/telemetryCount',\n  CustomEventscount = 'customEvents/count',\n}\n\n/**\n * Defines values for MetricsAggregation.\n * Possible values include: 'min', 'max', 'avg', 'sum', 'count', 'unique'\n * @readonly\n * @enum {string}\n */\nexport enum MetricsAggregation {\n  Min = 'min',\n  Max = 'max',\n  Avg = 'avg',\n  Sum = 'sum',\n  Count = 'count',\n  Unique = 'unique',\n}\n\n/**\n * Defines values for MetricsSegment.\n * Possible values include: 'applicationBuild', 'applicationVersion',\n * 'authenticatedOrAnonymousTraffic', 'browser', 'browserVersion', 'city',\n * 'cloudRoleName', 'cloudServiceName', 'continent', 'countryOrRegion',\n * 'deploymentId', 'deploymentUnit', 'deviceType', 'environment',\n * 'hostingLocation', 'instanceName'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: MetricsSegment =\n * <MetricsSegment>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum MetricsSegment {\n  ApplicationBuild = 'applicationBuild',\n  ApplicationVersion = 'applicationVersion',\n  AuthenticatedOrAnonymousTraffic = 'authenticatedOrAnonymousTraffic',\n  Browser = 'browser',\n  BrowserVersion = 'browserVersion',\n  City = 'city',\n  CloudRoleName = 'cloudRoleName',\n  CloudServiceName = 'cloudServiceName',\n  Continent = 'continent',\n  CountryOrRegion = 'countryOrRegion',\n  DeploymentId = 'deploymentId',\n  DeploymentUnit = 'deploymentUnit',\n  DeviceType = 'deviceType',\n  Environment = 'environment',\n  HostingLocation = 'hostingLocation',\n  InstanceName = 'instanceName',\n}\n\n/**\n * Defines values for EventType.\n * Possible values include: '$all', 'traces', 'customEvents', 'pageViews',\n * 'browserTimings', 'requests', 'dependencies', 'exceptions',\n * 'availabilityResults', 'performanceCounters', 'customMetrics'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: EventType = <EventType>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum EventType {\n  All = '$all',\n  Traces = 'traces',\n  CustomEvents = 'customEvents',\n  PageViews = 'pageViews',\n  BrowserTimings = 'browserTimings',\n  Requests = 'requests',\n  Dependencies = 'dependencies',\n  Exceptions = 'exceptions',\n  AvailabilityResults = 'availabilityResults',\n  PerformanceCounters = 'performanceCounters',\n  CustomMetrics = 'customMetrics',\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/index.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as msRestAzure from \"ms-rest-azure-js\";\n\nconst packageName = \"azure-applicationinsights-query\";\nconst packageVersion = \"1.0.0-Preview-1\";\n\nexport class ApplicationInsightsDataClientContext extends msRestAzure.AzureServiceClient {\n\n  credentials: msRest.ServiceClientCredentials;\n\n  acceptLanguage: string;\n\n  longRunningOperationRetryTimeout: number;\n  baseUri: string;\n\n  /**\n   * @class\n   * Initializes a new instance of the ApplicationInsightsDataClient class.\n   * @constructor\n   *\n   * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.\n   *\n   * @param {string} [baseUri] - The base URI of the service.\n   *\n   * @param {object} [options] - The parameter options\n   *\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\n   *\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\n   * {@link https://github.github.io/fetch/#Request Options doc}\n   *\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\n   *\n   * @param {string} [options.acceptLanguage] - The preferred language for the response.\n   *\n   * @param {number} [options.longRunningOperationRetryTimeout] - The retry timeout in seconds for Long Running Operations. Default value is 30.\n   *\n   * @param {boolean} [options.generateClientRequestId] - Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.\n   *\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRestAzure.AzureServiceClientOptions) {\n    if (credentials == undefined) {\n      throw new Error('\\'credentials\\' cannot be null.');\n    }\n\n    if (!options) {\n      options = {};\n    }\n    super(credentials, options);\n\n    this.acceptLanguage = 'en-US';\n    this.longRunningOperationRetryTimeout = 30;\n    this.baseUri = baseUri as string;\n    if (!this.baseUri) {\n      this.baseUri = 'https://api.applicationinsights.io/v1';\n    }\n    this.credentials = credentials;\n\n    this.addUserAgentInfo(`${packageName}/${packageVersion}`);\n    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {\n      this.acceptLanguage = options.acceptLanguage;\n    }\n    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/applicationInsightsDataClientContext.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport { Metrics } from \"./metrics\";\nimport { Events } from \"./events\";\nimport { Query } from \"./query\";\n\nexport { Metrics, Events, Query };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/index.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/metricsMappers\";\nimport { ApplicationInsightsDataClientContext } from \"../applicationInsightsDataClientContext\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Metrics. */\nexport class Metrics {\n  private readonly client: ApplicationInsightsDataClientContext;\n  private readonly serializer = new msRest.Serializer(Mappers);\n  /**\n   * Create a Metrics.\n   * @param {ApplicationInsightsDataClientContext} client Reference to the service client.\n   */\n  constructor(client: ApplicationInsightsDataClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * @summary Retrieve metric data\n   *\n   * Gets metric values for a single metric\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {MetricId} metricId ID of the metric. This is either a standard AI metric, or an\n   * application-specific custom metric. Possible values include: 'requests/count',\n   * 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count',\n   * 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration',\n   * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count',\n   * 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser',\n   * 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime',\n   * 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue',\n   * 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond',\n   * 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond',\n   * 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage',\n   * 'availabilityResults/availabilityPercentage', 'availabilityResults/duration',\n   * 'billing/telemetryCount', 'customEvents/count'\n   *\n   * @param {MetricsGetOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getWithHttpOperationResponse(appId: string, metricId: Models.MetricId, options?: Models.MetricsGetOptionalParams): Promise<msRest.HttpOperationResponse<Models.MetricsResult>> {\n    let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;\n    let interval = (options && options.interval !== undefined) ? options.interval : undefined;\n    let aggregation = (options && options.aggregation !== undefined) ? options.aggregation : undefined;\n    let segment = (options && options.segment !== undefined) ? options.segment : undefined;\n    let top = (options && options.top !== undefined) ? options.top : undefined;\n    let orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;\n    let filter = (options && options.filter !== undefined) ? options.filter : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          appId,\n          metricId,\n          timespan,\n          interval,\n          aggregation,\n          segment,\n          top,\n          orderby,\n          filter,\n          \"this.client.acceptLanguage\": this.client.acceptLanguage\n        },\n        options);\n      operationRes = await this.client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v1/apps/{appId}/metrics/{metricId}\",\n          urlParameters: [\n            {\n              parameterPath: \"appId\",\n              mapper: {\n                required: true,\n                serializedName: \"appId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"metricId\",\n              mapper: {\n                required: true,\n                serializedName: \"metricId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"timespan\",\n              mapper: {\n                serializedName: \"timespan\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"interval\",\n              mapper: {\n                serializedName: \"interval\",\n                type: {\n                  name: \"TimeSpan\"\n                }\n              }\n            },\n            {\n              parameterPath: \"aggregation\",\n              collectionFormat: msRest.QueryCollectionFormat.Csv,\n              mapper: {\n                serializedName: \"aggregation\",\n                constraints: {\n                  MinItems: 1\n                },\n                type: {\n                  name: \"Sequence\",\n                  element: {\n                    serializedName: \"MetricsAggregationElementType\",\n                    type: {\n                      name: \"Enum\",\n                      allowedValues: [\n                        \"min\",\n                        \"max\",\n                        \"avg\",\n                        \"sum\",\n                        \"count\",\n                        \"unique\"\n                      ]\n                    }\n                  }\n                }\n              }\n            },\n            {\n              parameterPath: \"segment\",\n              collectionFormat: msRest.QueryCollectionFormat.Csv,\n              mapper: {\n                serializedName: \"segment\",\n                constraints: {\n                  MinItems: 1\n                },\n                type: {\n                  name: \"Sequence\",\n                  element: {\n                    serializedName: \"MetricsSegmentElementType\",\n                    type: {\n                      name: \"String\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              parameterPath: \"top\",\n              mapper: {\n                serializedName: \"top\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"orderby\",\n              mapper: {\n                serializedName: \"orderby\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"filter\",\n              mapper: {\n                serializedName: \"filter\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          headerParameters: [\n            {\n              parameterPath: \"this.client.acceptLanguage\",\n              mapper: {\n                serializedName: \"accept-language\",\n                defaultValue: 'en-US',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.MetricsResult\n            },\n            default: {\n              bodyMapper: Mappers.ErrorResponse\n            }\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.MetricsResult;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Retrieve metric data\n   *\n   * Gets metric values for multiple metrics\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {MetricsPostBodySchema[]} body The batched metrics query.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getMultipleWithHttpOperationResponse(appId: string, body: Models.MetricsPostBodySchema[], options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.MetricsResultsItem[]>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          appId,\n          body,\n          \"this.client.acceptLanguage\": this.client.acceptLanguage\n        },\n        options);\n      operationRes = await this.client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.client.baseUri,\n          path: \"v1/apps/{appId}/metrics\",\n          urlParameters: [\n            {\n              parameterPath: \"appId\",\n              mapper: {\n                required: true,\n                serializedName: \"appId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          headerParameters: [\n            {\n              parameterPath: \"this.client.acceptLanguage\",\n              mapper: {\n                serializedName: \"accept-language\",\n                defaultValue: 'en-US',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"body\",\n            mapper: {\n              required: true,\n              serializedName: \"body\",\n              type: {\n                name: \"Sequence\",\n                element: {\n                  serializedName: \"MetricsPostBodySchemaElementType\",\n                  type: {\n                    name: \"Composite\",\n                    className: \"MetricsPostBodySchema\"\n                  }\n                }\n              }\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {\n              bodyMapper: {\n                serializedName: \"parsedResponse\",\n                type: {\n                  name: \"Sequence\",\n                  element: {\n                    serializedName: \"MetricsResultsItemElementType\",\n                    type: {\n                      name: \"Composite\",\n                      className: \"MetricsResultsItem\"\n                    }\n                  }\n                }\n              }\n            },\n            default: {\n              bodyMapper: Mappers.ErrorResponse\n            }\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = {\n              serializedName: \"parsedResponse\",\n              type: {\n                name: \"Sequence\",\n                element: {\n                  serializedName: \"MetricsResultsItemElementType\",\n                  type: {\n                    name: \"Composite\",\n                    className: \"MetricsResultsItem\"\n                  }\n                }\n              }\n            };\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Retrieve metric metatadata\n   *\n   * Gets metadata describing the available metrics\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getMetadataWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          appId,\n          \"this.client.acceptLanguage\": this.client.acceptLanguage\n        },\n        options);\n      operationRes = await this.client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v1/apps/{appId}/metrics/metadata\",\n          urlParameters: [\n            {\n              parameterPath: \"appId\",\n              mapper: {\n                required: true,\n                serializedName: \"appId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          headerParameters: [\n            {\n              parameterPath: \"this.client.acceptLanguage\",\n              mapper: {\n                serializedName: \"accept-language\",\n                defaultValue: 'en-US',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: {\n                serializedName: \"parsedResponse\",\n                type: {\n                  name: \"Object\"\n                }\n              }\n            },\n            default: {\n              bodyMapper: Mappers.ErrorResponse\n            }\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = {\n              serializedName: \"parsedResponse\",\n              type: {\n                name: \"Object\"\n              }\n            };\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Retrieve metric data\n   *\n   * Gets metric values for a single metric\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {MetricId} metricId ID of the metric. This is either a standard AI metric, or an\n   * application-specific custom metric. Possible values include: 'requests/count',\n   * 'requests/duration', 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count',\n   * 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration',\n   * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration', 'dependencies/count',\n   * 'dependencies/failed', 'dependencies/duration', 'exceptions/count', 'exceptions/browser',\n   * 'exceptions/server', 'sessions/count', 'performanceCounters/requestExecutionTime',\n   * 'performanceCounters/requestsPerSecond', 'performanceCounters/requestsInQueue',\n   * 'performanceCounters/memoryAvailableBytes', 'performanceCounters/exceptionsPerSecond',\n   * 'performanceCounters/processCpuPercentage', 'performanceCounters/processIOBytesPerSecond',\n   * 'performanceCounters/processPrivateBytes', 'performanceCounters/processorCpuPercentage',\n   * 'availabilityResults/availabilityPercentage', 'availabilityResults/duration',\n   * 'billing/telemetryCount', 'customEvents/count'\n   *\n   * @param {MetricsGetOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.MetricsResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.MetricsResult} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(appId: string, metricId: Models.MetricId): Promise<Models.MetricsResult>;\n  get(appId: string, metricId: Models.MetricId, options: Models.MetricsGetOptionalParams): Promise<Models.MetricsResult>;\n  get(appId: string, metricId: Models.MetricId, callback: msRest.ServiceCallback<Models.MetricsResult>): void;\n  get(appId: string, metricId: Models.MetricId, options: Models.MetricsGetOptionalParams, callback: msRest.ServiceCallback<Models.MetricsResult>): void;\n  get(appId: string, metricId: Models.MetricId, options?: Models.MetricsGetOptionalParams, callback?: msRest.ServiceCallback<Models.MetricsResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.MetricsResult>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(appId, metricId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.MetricsResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(appId, metricId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.MetricsResult;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Retrieve metric data\n   *\n   * Gets metric values for multiple metrics\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {MetricsPostBodySchema[]} body The batched metrics query.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.MetricsResultsItem[]} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getMultiple(appId: string, body: Models.MetricsPostBodySchema[]): Promise<Models.MetricsResultsItem[]>;\n  getMultiple(appId: string, body: Models.MetricsPostBodySchema[], options: msRest.RequestOptionsBase): Promise<Models.MetricsResultsItem[]>;\n  getMultiple(appId: string, body: Models.MetricsPostBodySchema[], callback: msRest.ServiceCallback<Models.MetricsResultsItem[]>): void;\n  getMultiple(appId: string, body: Models.MetricsPostBodySchema[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricsResultsItem[]>): void;\n  getMultiple(appId: string, body: Models.MetricsPostBodySchema[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.MetricsResultsItem[]>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.MetricsResultsItem[]>;\n    if (!callback) {\n      return this.getMultipleWithHttpOperationResponse(appId, body, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.MetricsResultsItem[]);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getMultipleWithHttpOperationResponse(appId, body, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.MetricsResultsItem[];\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Retrieve metric metatadata\n   *\n   * Gets metadata describing the available metrics\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {any} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getMetadata(appId: string): Promise<any>;\n  getMetadata(appId: string, options: msRest.RequestOptionsBase): Promise<any>;\n  getMetadata(appId: string, callback: msRest.ServiceCallback<any>): void;\n  getMetadata(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;\n  getMetadata(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<any>;\n    if (!callback) {\n      return this.getMetadataWithHttpOperationResponse(appId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as any);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getMetadataWithHttpOperationResponse(appId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as any;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/metrics.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nexport {\n  discriminators,\n  MetricsResult,\n  MetricsResultInfo,\n  MetricsSegmentInfo,\n  ErrorResponse,\n  ErrorInfo,\n  ErrorDetail,\n  MetricsPostBodySchema,\n  MetricsPostBodySchemaParameters,\n  MetricsResultsItem\n} from \"../models/mappers\";\n\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/metricsMappers.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/eventsMappers\";\nimport { ApplicationInsightsDataClientContext } from \"../applicationInsightsDataClientContext\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Events. */\nexport class Events {\n  private readonly client: ApplicationInsightsDataClientContext;\n  private readonly serializer = new msRest.Serializer(Mappers);\n  /**\n   * Create a Events.\n   * @param {ApplicationInsightsDataClientContext} client Reference to the service client.\n   */\n  constructor(client: ApplicationInsightsDataClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * @summary Execute OData query\n   *\n   * Executes an OData query for events\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {EventType} eventType The type of events to query; either a standard event type\n   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,\n   * `availabilityResults`) or `$all` to query across all event types. Possible values include:\n   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',\n   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'\n   *\n   * @param {EventsGetByTypeOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getByTypeWithHttpOperationResponse(appId: string, eventType: Models.EventType, options?: Models.EventsGetByTypeOptionalParams): Promise<msRest.HttpOperationResponse<Models.EventsResults>> {\n    let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;\n    let filter = (options && options.filter !== undefined) ? options.filter : undefined;\n    let search = (options && options.search !== undefined) ? options.search : undefined;\n    let orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;\n    let select = (options && options.select !== undefined) ? options.select : undefined;\n    let skip = (options && options.skip !== undefined) ? options.skip : undefined;\n    let top = (options && options.top !== undefined) ? options.top : undefined;\n    let format = (options && options.format !== undefined) ? options.format : undefined;\n    let count = (options && options.count !== undefined) ? options.count : undefined;\n    let apply = (options && options.apply !== undefined) ? options.apply : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          appId,\n          eventType,\n          timespan,\n          filter,\n          search,\n          orderby,\n          select,\n          skip,\n          top,\n          format,\n          count,\n          apply,\n          \"this.client.acceptLanguage\": this.client.acceptLanguage\n        },\n        options);\n      operationRes = await this.client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v1/apps/{appId}/events/{eventType}\",\n          urlParameters: [\n            {\n              parameterPath: \"appId\",\n              mapper: {\n                required: true,\n                serializedName: \"appId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"eventType\",\n              mapper: {\n                required: true,\n                serializedName: \"eventType\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"timespan\",\n              mapper: {\n                serializedName: \"timespan\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"filter\",\n              mapper: {\n                serializedName: \"$filter\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"search\",\n              mapper: {\n                serializedName: \"$search\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"orderby\",\n              mapper: {\n                serializedName: \"$orderby\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"select\",\n              mapper: {\n                serializedName: \"$select\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"skip\",\n              mapper: {\n                serializedName: \"$skip\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"top\",\n              mapper: {\n                serializedName: \"$top\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"format\",\n              mapper: {\n                serializedName: \"$format\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"count\",\n              mapper: {\n                serializedName: \"$count\",\n                type: {\n                  name: \"Boolean\"\n                }\n              }\n            },\n            {\n              parameterPath: \"apply\",\n              mapper: {\n                serializedName: \"$apply\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          headerParameters: [\n            {\n              parameterPath: \"this.client.acceptLanguage\",\n              mapper: {\n                serializedName: \"accept-language\",\n                defaultValue: 'en-US',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.EventsResults\n            },\n            default: {\n              bodyMapper: Mappers.ErrorResponse\n            }\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.EventsResults;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Get an event\n   *\n   * Gets the data for a single event\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {EventType} eventType The type of events to query; either a standard event type\n   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,\n   * `availabilityResults`) or `$all` to query across all event types. Possible values include:\n   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',\n   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'\n   *\n   * @param {string} eventId ID of event.\n   *\n   * @param {EventsGetOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getWithHttpOperationResponse(appId: string, eventType: Models.EventType, eventId: string, options?: Models.EventsGetOptionalParams): Promise<msRest.HttpOperationResponse<Models.EventsResults>> {\n    let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          appId,\n          eventType,\n          timespan,\n          eventId,\n          \"this.client.acceptLanguage\": this.client.acceptLanguage\n        },\n        options);\n      operationRes = await this.client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v1/apps/{appId}/events/{eventType}/{eventId}\",\n          urlParameters: [\n            {\n              parameterPath: \"appId\",\n              mapper: {\n                required: true,\n                serializedName: \"appId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"eventType\",\n              mapper: {\n                required: true,\n                serializedName: \"eventType\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"eventId\",\n              mapper: {\n                required: true,\n                serializedName: \"eventId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"timespan\",\n              mapper: {\n                serializedName: \"timespan\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          headerParameters: [\n            {\n              parameterPath: \"this.client.acceptLanguage\",\n              mapper: {\n                serializedName: \"accept-language\",\n                defaultValue: 'en-US',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.EventsResults\n            },\n            default: {\n              bodyMapper: Mappers.ErrorResponse\n            }\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.EventsResults;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Get OData metadata\n   *\n   * Gets OData EDMX metadata describing the event data model\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getOdataMetadataWithHttpOperationResponse(appId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          appId,\n          \"this.client.acceptLanguage\": this.client.acceptLanguage\n        },\n        options);\n      operationRes = await this.client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v1/apps/{appId}/events/$metadata\",\n          urlParameters: [\n            {\n              parameterPath: \"appId\",\n              mapper: {\n                required: true,\n                serializedName: \"appId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          headerParameters: [\n            {\n              parameterPath: \"this.client.acceptLanguage\",\n              mapper: {\n                serializedName: \"accept-language\",\n                defaultValue: 'en-US',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: {\n                serializedName: \"parsedResponse\",\n                type: {\n                  name: \"Object\"\n                }\n              }\n            },\n            default: {\n              bodyMapper: Mappers.ErrorResponse\n            }\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = {\n              serializedName: \"parsedResponse\",\n              type: {\n                name: \"Object\"\n              }\n            };\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Execute OData query\n   *\n   * Executes an OData query for events\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {EventType} eventType The type of events to query; either a standard event type\n   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,\n   * `availabilityResults`) or `$all` to query across all event types. Possible values include:\n   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',\n   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'\n   *\n   * @param {EventsGetByTypeOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.EventsResults} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.EventsResults} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getByType(appId: string, eventType: Models.EventType): Promise<Models.EventsResults>;\n  getByType(appId: string, eventType: Models.EventType, options: Models.EventsGetByTypeOptionalParams): Promise<Models.EventsResults>;\n  getByType(appId: string, eventType: Models.EventType, callback: any): void;\n  getByType(appId: string, eventType: Models.EventType, options: Models.EventsGetByTypeOptionalParams, callback: msRest.ServiceCallback<Models.EventsResults>): void;\n  getByType(appId: string, eventType: Models.EventType, options?: Models.EventsGetByTypeOptionalParams, callback?: msRest.ServiceCallback<Models.EventsResults>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.EventsResults>;\n    if (!callback) {\n      return this.getByTypeWithHttpOperationResponse(appId, eventType, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.EventsResults);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getByTypeWithHttpOperationResponse(appId, eventType, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.EventsResults;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get an event\n   *\n   * Gets the data for a single event\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {EventType} eventType The type of events to query; either a standard event type\n   * (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`,\n   * `availabilityResults`) or `$all` to query across all event types. Possible values include:\n   * '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',\n   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'\n   *\n   * @param {string} eventId ID of event.\n   *\n   * @param {EventsGetOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.EventsResults} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.EventsResults} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(appId: string, eventType: Models.EventType, eventId: string): Promise<Models.EventsResults>;\n  get(appId: string, eventType: Models.EventType, eventId: string, options: Models.EventsGetOptionalParams): Promise<Models.EventsResults>;\n  get(appId: string, eventType: Models.EventType, eventId: string, callback: msRest.ServiceCallback<Models.EventsResults>): void;\n  get(appId: string, eventType: Models.EventType, eventId: string, options: Models.EventsGetOptionalParams, callback: msRest.ServiceCallback<Models.EventsResults>): void;\n  get(appId: string, eventType: Models.EventType, eventId: string, options?: Models.EventsGetOptionalParams, callback?: msRest.ServiceCallback<Models.EventsResults>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.EventsResults>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(appId, eventType, eventId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.EventsResults);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(appId, eventType, eventId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.EventsResults;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get OData metadata\n   *\n   * Gets OData EDMX metadata describing the event data model\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {any} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getOdataMetadata(appId: string): Promise<any>;\n  getOdataMetadata(appId: string, options: msRest.RequestOptionsBase): Promise<any>;\n  getOdataMetadata(appId: string, callback: msRest.ServiceCallback<any>): void;\n  getOdataMetadata(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;\n  getOdataMetadata(appId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<any>;\n    if (!callback) {\n      return this.getOdataMetadataWithHttpOperationResponse(appId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as any);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getOdataMetadataWithHttpOperationResponse(appId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as any;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/events.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nexport {\n  discriminators,\n  EventsResults,\n  ErrorInfo,\n  ErrorDetail,\n  EventsResultData,\n  EventsResultDataCustomDimensions,\n  EventsResultDataCustomMeasurements,\n  EventsOperationInfo,\n  EventsSessionInfo,\n  EventsUserInfo,\n  EventsCloudInfo,\n  EventsAiInfo,\n  EventsApplicationInfo,\n  EventsClientInfo,\n  ErrorResponse,\n  EventsTraceResult,\n  EventsTraceInfo,\n  EventsCustomEventResult,\n  EventsCustomEventInfo,\n  EventsPageViewResult,\n  EventsPageViewInfo,\n  EventsBrowserTimingResult,\n  EventsBrowserTimingInfo,\n  EventsClientPerformanceInfo,\n  EventsRequestResult,\n  EventsRequestInfo,\n  EventsDependencyResult,\n  EventsDependencyInfo,\n  EventsExceptionResult,\n  EventsExceptionInfo,\n  EventsExceptionDetail,\n  EventsExceptionDetailsParsedStack,\n  EventsAvailabilityResultResult,\n  EventsAvailabilityResultInfo,\n  EventsPerformanceCounterResult,\n  EventsPerformanceCounterInfo,\n  EventsCustomMetricResult,\n  EventsCustomMetricInfo\n} from \"../models/mappers\";\n\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/eventsMappers.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/queryMappers\";\nimport { ApplicationInsightsDataClientContext } from \"../applicationInsightsDataClientContext\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Query. */\nexport class Query {\n  private readonly client: ApplicationInsightsDataClientContext;\n  private readonly serializer = new msRest.Serializer(Mappers);\n  /**\n   * Create a Query.\n   * @param {ApplicationInsightsDataClientContext} client Reference to the service client.\n   */\n  constructor(client: ApplicationInsightsDataClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * @summary Execute an Analytics query\n   *\n   * Executes an Analytics query for data.\n   * [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query) is an example for\n   * using POST with an Analytics query.\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {QueryBody} body The Analytics query. Learn more about the [Analytics query\n   * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async executeWithHttpOperationResponse(appId: string, body: Models.QueryBody, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.QueryResults>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          appId,\n          body,\n          \"this.client.acceptLanguage\": this.client.acceptLanguage\n        },\n        options);\n      operationRes = await this.client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.client.baseUri,\n          path: \"v1/apps/{appId}/query\",\n          urlParameters: [\n            {\n              parameterPath: \"appId\",\n              mapper: {\n                required: true,\n                serializedName: \"appId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          headerParameters: [\n            {\n              parameterPath: \"this.client.acceptLanguage\",\n              mapper: {\n                serializedName: \"accept-language\",\n                defaultValue: 'en-US',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"body\",\n            mapper: {\n              ...Mappers.QueryBody,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {\n              bodyMapper: Mappers.QueryResults\n            },\n            default: {\n              bodyMapper: Mappers.ErrorResponse\n            }\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.QueryResults;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Execute an Analytics query\n   *\n   * Executes an Analytics query for data.\n   * [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query) is an example for\n   * using POST with an Analytics query.\n   *\n   * @param {string} appId ID of the application. This is Application ID from the API Access settings\n   * blade in the Azure portal.\n   *\n   * @param {QueryBody} body The Analytics query. Learn more about the [Analytics query\n   * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.QueryResults} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.QueryResults} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  execute(appId: string, body: Models.QueryBody): Promise<Models.QueryResults>;\n  execute(appId: string, body: Models.QueryBody, options: msRest.RequestOptionsBase): Promise<Models.QueryResults>;\n  execute(appId: string, body: Models.QueryBody, callback: msRest.ServiceCallback<Models.QueryResults>): void;\n  execute(appId: string, body: Models.QueryBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QueryResults>): void;\n  execute(appId: string, body: Models.QueryBody, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.QueryResults>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.QueryResults>;\n    if (!callback) {\n      return this.executeWithHttpOperationResponse(appId, body, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.QueryResults);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.executeWithHttpOperationResponse(appId, body, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.QueryResults;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/query.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nexport {\n  discriminators,\n  QueryBody,\n  QueryResults,\n  Table,\n  Column,\n  ErrorResponse,\n  ErrorInfo,\n  ErrorDetail\n} from \"../models/mappers\";\n\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/queryMappers.ts"],"sourceRoot":""}