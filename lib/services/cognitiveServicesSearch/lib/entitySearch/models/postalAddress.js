/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines a postal address.
 *
 * @extends models['StructuredValue']
 */
class PostalAddress extends models['StructuredValue'] {
  /**
   * Create a PostalAddress.
   * @member {string} [streetAddress]
   * @member {string} [addressLocality] The city where the street address is
   * located. For example, Seattle.
   * @member {string} [addressSubregion]
   * @member {string} [addressRegion] The state or province code where the
   * street address is located. This could be the two-letter code. For example,
   * WA, or the full name , Washington.
   * @member {string} [postalCode] The zip code or postal code where the street
   * address is located. For example, 98052.
   * @member {string} [postOfficeBoxNumber]
   * @member {string} [addressCountry] The country/region where the street
   * address is located. This could be the two-letter ISO code. For example,
   * US, or the full name, United States.
   * @member {string} [countryIso] The two letter ISO code of this countr. For
   * example, US.
   * @member {string} [neighborhood] The neighborhood where the street address
   * is located. For example, Westlake.
   * @member {string} [addressRegionAbbreviation] Region Abbreviation. For
   * example, WA.
   * @member {string} [text] The complete address. For example, 2100 Westlake
   * Ave N, Bellevue, WA 98052.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PostalAddress
   *
   * @returns {object} metadata of PostalAddress
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PostalAddress',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '_type',
          clientName: '_type'
        },
        uberParent: 'ResponseBase',
        className: 'PostalAddress',
        modelProperties: {
          _type: {
            required: true,
            serializedName: '_type',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          contractualRules: {
            required: false,
            readOnly: true,
            serializedName: 'contractualRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContractualRulesContractualRuleElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ContractualRulesContractualRule',
                    className: 'ContractualRulesContractualRule'
                  }
              }
            }
          },
          webSearchUrl: {
            required: false,
            readOnly: true,
            serializedName: 'webSearchUrl',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          url: {
            required: false,
            readOnly: true,
            serializedName: 'url',
            type: {
              name: 'String'
            }
          },
          image: {
            required: false,
            readOnly: true,
            serializedName: 'image',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'ResponseBase',
              className: 'ImageObject'
            }
          },
          description: {
            required: false,
            readOnly: true,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          entityPresentationInfo: {
            required: false,
            readOnly: true,
            serializedName: 'entityPresentationInfo',
            type: {
              name: 'Composite',
              className: 'EntitiesEntityPresentationInfo'
            }
          },
          bingId: {
            required: false,
            readOnly: true,
            serializedName: 'bingId',
            type: {
              name: 'String'
            }
          },
          streetAddress: {
            required: false,
            readOnly: true,
            serializedName: 'streetAddress',
            type: {
              name: 'String'
            }
          },
          addressLocality: {
            required: false,
            readOnly: true,
            serializedName: 'addressLocality',
            type: {
              name: 'String'
            }
          },
          addressSubregion: {
            required: false,
            readOnly: true,
            serializedName: 'addressSubregion',
            type: {
              name: 'String'
            }
          },
          addressRegion: {
            required: false,
            readOnly: true,
            serializedName: 'addressRegion',
            type: {
              name: 'String'
            }
          },
          postalCode: {
            required: false,
            readOnly: true,
            serializedName: 'postalCode',
            type: {
              name: 'String'
            }
          },
          postOfficeBoxNumber: {
            required: false,
            readOnly: true,
            serializedName: 'postOfficeBoxNumber',
            type: {
              name: 'String'
            }
          },
          addressCountry: {
            required: false,
            readOnly: true,
            serializedName: 'addressCountry',
            type: {
              name: 'String'
            }
          },
          countryIso: {
            required: false,
            readOnly: true,
            serializedName: 'countryIso',
            type: {
              name: 'String'
            }
          },
          neighborhood: {
            required: false,
            readOnly: true,
            serializedName: 'neighborhood',
            type: {
              name: 'String'
            }
          },
          addressRegionAbbreviation: {
            required: false,
            readOnly: true,
            serializedName: 'addressRegionAbbreviation',
            type: {
              name: 'String'
            }
          },
          text: {
            required: false,
            readOnly: true,
            serializedName: 'text',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PostalAddress;
