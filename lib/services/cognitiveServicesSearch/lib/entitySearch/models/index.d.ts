/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the QueryContext class.
 * @constructor
 * Defines the query context that Bing used for the request.
 *
 * @member {string} originalQuery The query string as specified in the request.
 * @member {string} [alteredQuery] The query string used by Bing to perform the
 * query. Bing uses the altered query string if the original query string
 * contained spelling mistakes. For example, if the query string is "saling
 * downwind", the altered query string will be "sailing downwind". This field
 * is included only if the original query string contains a spelling mistake.
 * @member {string} [alterationOverrideQuery] The query string to use to force
 * Bing to use the original string. For example, if the query string is "saling
 * downwind", the override query string will be "+saling downwind". Remember to
 * encode the query string which results in "%2Bsaling+downwind". This field is
 * included only if the original query string contains a spelling mistake.
 * @member {boolean} [adultIntent] A Boolean value that indicates whether the
 * specified query has adult intent. The value is true if the query has adult
 * intent; otherwise, false.
 * @member {boolean} [askUserForLocation] A Boolean value that indicates
 * whether Bing requires the user's location to provide accurate results. If
 * you specified the user's location by using the X-MSEdge-ClientIP and
 * X-Search-Location headers, you can ignore this field. For location aware
 * queries, such as "today's weather" or "restaurants near me" that need the
 * user's location to provide accurate results, this field is set to true. For
 * location aware queries that include the location (for example, "Seattle
 * weather"), this field is set to false. This field is also set to false for
 * queries that are not location aware, such as "best sellers".
 */
export interface QueryContext {
  originalQuery: string;
  readonly alteredQuery?: string;
  readonly alterationOverrideQuery?: string;
  readonly adultIntent?: boolean;
  readonly askUserForLocation?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ResponseBase class.
 * @constructor
 * @member {string} _type Polymorphic Discriminator
 */
export interface ResponseBase {
  _type: string;
}

/**
 * @class
 * Initializes a new instance of the Identifiable class.
 * @constructor
 * Defines the identity of a resource.
 *
 * @member {string} [id] A String identifier.
 */
export interface Identifiable extends ResponseBase {
  readonly id?: string;
}

/**
 * @class
 * Initializes a new instance of the Response class.
 * @constructor
 * Defines a response. All schemas that could be returned at the root of a
 * response should inherit from this
 *
 * @member {array} [contractualRules] A list of rules that you must adhere to
 * if you display the item.
 * @member {string} [webSearchUrl] The URL To Bing's search result for this
 * item.
 */
export interface Response extends Identifiable {
  readonly contractualRules?: ContractualRulesContractualRule[];
  readonly webSearchUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Thing class.
 * @constructor
 * @member {string} [name] The name of the thing represented by this object.
 * @member {string} [url] The URL to get more information about the thing
 * represented by this object.
 * @member {object} [image]
 * @member {object} [image.thumbnail] The URL to a thumbnail of the image
 * @member {string} [description] A short description of the item.
 * @member {object} [entityPresentationInfo] Additional information about the
 * entity such as hints that you can use to determine the entity's type. To
 * determine the entity's type, use the entityScenario and entityTypeHint
 * fields.
 * @member {string} [entityPresentationInfo.entityScenario] The supported
 * scenario. Possible values include: 'DominantEntity', 'DisambiguationItem',
 * 'ListItem'
 * @member {array} [entityPresentationInfo.entityTypeHints] A list of hints
 * that indicate the entity's type. The list could contain a single hint such
 * as Movie or a list of hints such as Place, LocalBusiness, Restaurant. Each
 * successive hint in the array narrows the entity's type.
 * @member {string} [entityPresentationInfo.entityTypeDisplayHint] A display
 * version of the entity hint. For example, if entityTypeHints is Artist, this
 * field may be set to American Singer.
 * @member {string} [bingId] An ID that uniquely identifies this item.
 */
export interface Thing extends Response {
  readonly name?: string;
  readonly url?: string;
  readonly image?: ImageObject;
  readonly description?: string;
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
  readonly bingId?: string;
}

/**
 * @class
 * Initializes a new instance of the CreativeWork class.
 * @constructor
 * @member {string} [thumbnailUrl] The URL to a thumbnail of the item.
 * @member {array} [provider] The source of the creative work.
 * @member {string} [text]
 */
export interface CreativeWork extends Thing {
  readonly thumbnailUrl?: string;
  readonly provider?: Thing[];
  readonly text?: string;
}

/**
 * @class
 * Initializes a new instance of the MediaObject class.
 * @constructor
 * @member {string} [contentUrl] Original URL to retrieve the source (file) for
 * the media object (e.g the source URL for the image).
 * @member {string} [hostPageUrl] URL of the page that hosts the media object.
 * @member {number} [width] The width of the source media object, in pixels.
 * @member {number} [height] The height of the source media object, in pixels.
 */
export interface MediaObject extends CreativeWork {
  readonly contentUrl?: string;
  readonly hostPageUrl?: string;
  readonly width?: number;
  readonly height?: number;
}

/**
 * @class
 * Initializes a new instance of the ImageObject class.
 * @constructor
 * Defines an image
 *
 * @member {object} [thumbnail] The URL to a thumbnail of the image
 */
export interface ImageObject extends MediaObject {
  readonly thumbnail?: ImageObject;
}

/**
 * @class
 * Initializes a new instance of the EntitiesEntityPresentationInfo class.
 * @constructor
 * Defines additional information about an entity such as type hints.
 *
 * @member {string} entityScenario The supported scenario. Possible values
 * include: 'DominantEntity', 'DisambiguationItem', 'ListItem'. Default value:
 * 'DominantEntity' .
 * @member {array} [entityTypeHints] A list of hints that indicate the entity's
 * type. The list could contain a single hint such as Movie or a list of hints
 * such as Place, LocalBusiness, Restaurant. Each successive hint in the array
 * narrows the entity's type.
 * @member {string} [entityTypeDisplayHint] A display version of the entity
 * hint. For example, if entityTypeHints is Artist, this field may be set to
 * American Singer.
 */
export interface EntitiesEntityPresentationInfo {
  entityScenario: string;
  readonly entityTypeHints?: string[];
  readonly entityTypeDisplayHint?: string;
}

/**
 * @class
 * Initializes a new instance of the Answer class.
 * @constructor
 */
export interface Answer extends Response {
}

/**
 * @class
 * Initializes a new instance of the SearchResultsAnswer class.
 * @constructor
 * @member {object} [queryContext]
 * @member {string} [queryContext.originalQuery] The query string as specified
 * in the request.
 * @member {string} [queryContext.alteredQuery] The query string used by Bing
 * to perform the query. Bing uses the altered query string if the original
 * query string contained spelling mistakes. For example, if the query string
 * is "saling downwind", the altered query string will be "sailing downwind".
 * This field is included only if the original query string contains a spelling
 * mistake.
 * @member {string} [queryContext.alterationOverrideQuery] The query string to
 * use to force Bing to use the original string. For example, if the query
 * string is "saling downwind", the override query string will be "+saling
 * downwind". Remember to encode the query string which results in
 * "%2Bsaling+downwind". This field is included only if the original query
 * string contains a spelling mistake.
 * @member {boolean} [queryContext.adultIntent] A Boolean value that indicates
 * whether the specified query has adult intent. The value is true if the query
 * has adult intent; otherwise, false.
 * @member {boolean} [queryContext.askUserForLocation] A Boolean value that
 * indicates whether Bing requires the user's location to provide accurate
 * results. If you specified the user's location by using the X-MSEdge-ClientIP
 * and X-Search-Location headers, you can ignore this field. For location aware
 * queries, such as "today's weather" or "restaurants near me" that need the
 * user's location to provide accurate results, this field is set to true. For
 * location aware queries that include the location (for example, "Seattle
 * weather"), this field is set to false. This field is also set to false for
 * queries that are not location aware, such as "best sellers".
 */
export interface SearchResultsAnswer extends Answer {
  readonly queryContext?: QueryContext;
}

/**
 * @class
 * Initializes a new instance of the Entities class.
 * @constructor
 * Defines an entity answer.
 *
 * @member {string} [queryScenario] The supported query scenario. This field is
 * set to DominantEntity or DisambiguationItem. The field is set to
 * DominantEntity if Bing determines that only a single entity satisfies the
 * request. For example, a book, movie, person, or attraction. If multiple
 * entities could satisfy the request, the field is set to DisambiguationItem.
 * For example, if the request uses the generic title of a movie franchise, the
 * entity's type would likely be DisambiguationItem. But, if the request
 * specifies a specific title from the franchise, the entity's type would
 * likely be DominantEntity. Possible values include: 'DominantEntity',
 * 'DominantEntityWithDisambiguation', 'Disambiguation', 'List',
 * 'ListWithPivot'. Default value: 'DominantEntity' .
 * @member {array} value A list of entities.
 */
export interface Entities extends SearchResultsAnswer {
  readonly queryScenario?: string;
  value: Thing[];
}

/**
 * @class
 * Initializes a new instance of the Places class.
 * @constructor
 * Defines a local entity answer.
 *
 * @member {array} value A list of local entities, such as restaurants or
 * hotels.
 */
export interface Places extends SearchResultsAnswer {
  value: Thing[];
}

/**
 * @class
 * Initializes a new instance of the SearchResponse class.
 * @constructor
 * Defines the top-level object that the response includes when the request
 * succeeds.
 *
 * @member {object} [queryContext] An object that contains the query string
 * that Bing used for the request. This object contains the query string as
 * entered by the user. It may also contain an altered query string that Bing
 * used for the query if the query string contained a spelling mistake.
 * @member {string} [queryContext.originalQuery] The query string as specified
 * in the request.
 * @member {string} [queryContext.alteredQuery] The query string used by Bing
 * to perform the query. Bing uses the altered query string if the original
 * query string contained spelling mistakes. For example, if the query string
 * is "saling downwind", the altered query string will be "sailing downwind".
 * This field is included only if the original query string contains a spelling
 * mistake.
 * @member {string} [queryContext.alterationOverrideQuery] The query string to
 * use to force Bing to use the original string. For example, if the query
 * string is "saling downwind", the override query string will be "+saling
 * downwind". Remember to encode the query string which results in
 * "%2Bsaling+downwind". This field is included only if the original query
 * string contains a spelling mistake.
 * @member {boolean} [queryContext.adultIntent] A Boolean value that indicates
 * whether the specified query has adult intent. The value is true if the query
 * has adult intent; otherwise, false.
 * @member {boolean} [queryContext.askUserForLocation] A Boolean value that
 * indicates whether Bing requires the user's location to provide accurate
 * results. If you specified the user's location by using the X-MSEdge-ClientIP
 * and X-Search-Location headers, you can ignore this field. For location aware
 * queries, such as "today's weather" or "restaurants near me" that need the
 * user's location to provide accurate results, this field is set to true. For
 * location aware queries that include the location (for example, "Seattle
 * weather"), this field is set to false. This field is also set to false for
 * queries that are not location aware, such as "best sellers".
 * @member {object} [entities] A list of entities that are relevant to the
 * search query.
 * @member {string} [entities.queryScenario] The supported query scenario. This
 * field is set to DominantEntity or DisambiguationItem. The field is set to
 * DominantEntity if Bing determines that only a single entity satisfies the
 * request. For example, a book, movie, person, or attraction. If multiple
 * entities could satisfy the request, the field is set to DisambiguationItem.
 * For example, if the request uses the generic title of a movie franchise, the
 * entity's type would likely be DisambiguationItem. But, if the request
 * specifies a specific title from the franchise, the entity's type would
 * likely be DominantEntity. Possible values include: 'DominantEntity',
 * 'DominantEntityWithDisambiguation', 'Disambiguation', 'List',
 * 'ListWithPivot'
 * @member {array} [entities.value] A list of entities.
 * @member {object} [places] A list of local entities such as restaurants or
 * hotels that are relevant to the query.
 * @member {array} [places.value] A list of local entities, such as restaurants
 * or hotels.
 */
export interface SearchResponse extends Response {
  readonly queryContext?: QueryContext;
  readonly entities?: Entities;
  readonly places?: Places;
}

/**
 * @class
 * Initializes a new instance of the ContractualRulesContractualRule class.
 * @constructor
 * @member {string} [targetPropertyName] The name of the field that the rule
 * applies to.
 * @member {string} _type Polymorphic Discriminator
 */
export interface ContractualRulesContractualRule {
  readonly targetPropertyName?: string;
  _type: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Defines the error that occurred.
 *
 * @member {string} code The error code that identifies the category of error.
 * Possible values include: 'None', 'ServerError', 'InvalidRequest',
 * 'RateLimitExceeded', 'InvalidAuthorization', 'InsufficientAuthorization'.
 * Default value: 'None' .
 * @member {string} [subCode] The error code that further helps to identify the
 * error. Possible values include: 'UnexpectedError', 'ResourceError',
 * 'NotImplemented', 'ParameterMissing', 'ParameterInvalidValue',
 * 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
 * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
 * @member {string} message A description of the error.
 * @member {string} [moreDetails] A description that provides additional
 * information about the error.
 * @member {string} [parameter] The parameter in the request that caused the
 * error.
 * @member {string} [value] The parameter's value in the request that was not
 * valid.
 */
export interface ErrorModel {
  code: string;
  readonly subCode?: string;
  message: string;
  readonly moreDetails?: string;
  readonly parameter?: string;
  readonly value?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * The top-level response that represents a failed request.
 *
 * @member {array} errors A list of errors that describe the reasons why the
 * request failed.
 */
export interface ErrorResponse extends Response {
  errors: ErrorModel[];
}

/**
 * @class
 * Initializes a new instance of the Intangible class.
 * @constructor
 */
export interface Intangible extends Thing {
}

/**
 * @class
 * Initializes a new instance of the StructuredValue class.
 * @constructor
 */
export interface StructuredValue extends Intangible {
}

/**
 * @class
 * Initializes a new instance of the PostalAddress class.
 * @constructor
 * Defines a postal address.
 *
 * @member {string} [streetAddress]
 * @member {string} [addressLocality] The city where the street address is
 * located. For example, Seattle.
 * @member {string} [addressSubregion]
 * @member {string} [addressRegion] The state or province code where the street
 * address is located. This could be the two-letter code. For example, WA, or
 * the full name , Washington.
 * @member {string} [postalCode] The zip code or postal code where the street
 * address is located. For example, 98052.
 * @member {string} [postOfficeBoxNumber]
 * @member {string} [addressCountry] The country/region where the street
 * address is located. This could be the two-letter ISO code. For example, US,
 * or the full name, United States.
 * @member {string} [countryIso] The two letter ISO code of this countr. For
 * example, US.
 * @member {string} [neighborhood] The neighborhood where the street address is
 * located. For example, Westlake.
 * @member {string} [addressRegionAbbreviation] Region Abbreviation. For
 * example, WA.
 * @member {string} [text] The complete address. For example, 2100 Westlake Ave
 * N, Bellevue, WA 98052.
 */
export interface PostalAddress extends StructuredValue {
  readonly streetAddress?: string;
  readonly addressLocality?: string;
  readonly addressSubregion?: string;
  readonly addressRegion?: string;
  readonly postalCode?: string;
  readonly postOfficeBoxNumber?: string;
  readonly addressCountry?: string;
  readonly countryIso?: string;
  readonly neighborhood?: string;
  readonly addressRegionAbbreviation?: string;
  readonly text?: string;
}

/**
 * @class
 * Initializes a new instance of the Place class.
 * @constructor
 * Defines information about a local entity, such as a restaurant or hotel.
 *
 * @member {object} [address] The postal address of where the entity is located
 * @member {string} [address.streetAddress]
 * @member {string} [address.addressLocality] The city where the street address
 * is located. For example, Seattle.
 * @member {string} [address.addressSubregion]
 * @member {string} [address.addressRegion] The state or province code where
 * the street address is located. This could be the two-letter code. For
 * example, WA, or the full name , Washington.
 * @member {string} [address.postalCode] The zip code or postal code where the
 * street address is located. For example, 98052.
 * @member {string} [address.postOfficeBoxNumber]
 * @member {string} [address.addressCountry] The country/region where the
 * street address is located. This could be the two-letter ISO code. For
 * example, US, or the full name, United States.
 * @member {string} [address.countryIso] The two letter ISO code of this
 * countr. For example, US.
 * @member {string} [address.neighborhood] The neighborhood where the street
 * address is located. For example, Westlake.
 * @member {string} [address.addressRegionAbbreviation] Region Abbreviation.
 * For example, WA.
 * @member {string} [address.text] The complete address. For example, 2100
 * Westlake Ave N, Bellevue, WA 98052.
 * @member {string} [telephone] The entity's telephone number
 */
export interface Place extends Thing {
  readonly address?: PostalAddress;
  readonly telephone?: string;
}

/**
 * @class
 * Initializes a new instance of the Organization class.
 * @constructor
 * Defines an organization.
 *
 */
export interface Organization extends Thing {
}

/**
 * @class
 * Initializes a new instance of the LocalBusiness class.
 * @constructor
 * @member {string} [priceRange] $$.
 * @member {array} [panoramas]
 * @member {boolean} [isPermanentlyClosed]
 * @member {string} [tagLine]
 */
export interface LocalBusiness extends Place {
  readonly priceRange?: string;
  readonly panoramas?: ImageObject[];
  readonly isPermanentlyClosed?: boolean;
  readonly tagLine?: string;
}

/**
 * @class
 * Initializes a new instance of the EntertainmentBusiness class.
 * @constructor
 */
export interface EntertainmentBusiness extends LocalBusiness {
}

/**
 * @class
 * Initializes a new instance of the MovieTheater class.
 * @constructor
 * @member {number} [screenCount]
 */
export interface MovieTheater extends EntertainmentBusiness {
  readonly screenCount?: number;
}

/**
 * @class
 * Initializes a new instance of the ContractualRulesAttribution class.
 * @constructor
 * @member {boolean} [mustBeCloseToContent] A Boolean value that determines
 * whether the contents of the rule must be placed in close proximity to the
 * field that the rule applies to. If true, the contents must be placed in
 * close proximity. If false, or this field does not exist, the contents may be
 * placed at the caller's discretion.
 */
export interface ContractualRulesAttribution extends ContractualRulesContractualRule {
  readonly mustBeCloseToContent?: boolean;
}

/**
 * @class
 * Initializes a new instance of the CivicStructure class.
 * @constructor
 */
export interface CivicStructure extends Place {
}

/**
 * @class
 * Initializes a new instance of the TouristAttraction class.
 * @constructor
 */
export interface TouristAttraction extends Place {
}

/**
 * @class
 * Initializes a new instance of the Airport class.
 * @constructor
 * @member {string} [iataCode]
 * @member {string} [icaoCode]
 */
export interface Airport extends CivicStructure {
  readonly iataCode?: string;
  readonly icaoCode?: string;
}

/**
 * @class
 * Initializes a new instance of the License class.
 * @constructor
 * Defines the license under which the text or photo may be used.
 *
 */
export interface License extends CreativeWork {
}

/**
 * @class
 * Initializes a new instance of the ContractualRulesLicenseAttribution class.
 * @constructor
 * Defines a contractual rule for license attribution.
 *
 * @member {object} [license] The license under which the content may be used.
 * @member {string} [licenseNotice] The license to display next to the targeted
 * field.
 */
export interface ContractualRulesLicenseAttribution extends ContractualRulesAttribution {
  readonly license?: License;
  readonly licenseNotice?: string;
}

/**
 * @class
 * Initializes a new instance of the ContractualRulesLinkAttribution class.
 * @constructor
 * Defines a contractual rule for link attribution.
 *
 * @member {string} text The attribution text.
 * @member {string} url The URL to the provider's website. Use text and URL to
 * create the hyperlink.
 * @member {boolean} [optionalForListDisplay] Indicates whether this provider's
 * attribution is optional.
 */
export interface ContractualRulesLinkAttribution extends ContractualRulesAttribution {
  text: string;
  url: string;
  readonly optionalForListDisplay?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ContractualRulesMediaAttribution class.
 * @constructor
 * Defines a contractual rule for media attribution.
 *
 * @member {string} [url] The URL that you use to create of hyperlink of the
 * media content. For example, if the target is an image, you would use the URL
 * to make the image clickable.
 */
export interface ContractualRulesMediaAttribution extends ContractualRulesAttribution {
  readonly url?: string;
}

/**
 * @class
 * Initializes a new instance of the ContractualRulesTextAttribution class.
 * @constructor
 * Defines a contractual rule for text attribution.
 *
 * @member {string} text The attribution text. Text attribution applies to the
 * entity as a whole and should be displayed immediately following the entity
 * presentation. If there are multiple text or link attribution rules that do
 * not specify a target, you should concatenate them and display them using a
 * "Data from:" label.
 * @member {boolean} [optionalForListDisplay] Indicates whether this provider's
 * attribution is optional.
 */
export interface ContractualRulesTextAttribution extends ContractualRulesAttribution {
  text: string;
  readonly optionalForListDisplay?: boolean;
}

/**
 * @class
 * Initializes a new instance of the FoodEstablishment class.
 * @constructor
 */
export interface FoodEstablishment extends LocalBusiness {
}

/**
 * @class
 * Initializes a new instance of the LodgingBusiness class.
 * @constructor
 */
export interface LodgingBusiness extends LocalBusiness {
}

/**
 * @class
 * Initializes a new instance of the Restaurant class.
 * @constructor
 * @member {boolean} [acceptsReservations]
 * @member {string} [reservationUrl]
 * @member {array} [servesCuisine]
 * @member {string} [menuUrl]
 */
export interface Restaurant extends FoodEstablishment {
  readonly acceptsReservations?: boolean;
  readonly reservationUrl?: string;
  readonly servesCuisine?: string[];
  readonly menuUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Hotel class.
 * @constructor
 * @member {string} [hotelClass]
 * @member {array} [amenities]
 */
export interface Hotel extends LodgingBusiness {
  readonly hotelClass?: string;
  readonly amenities?: string[];
}
