/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Defines additional information about an entity such as type hints.
 *
 */
class EntitiesEntityPresentationInfo {
  /**
   * Create a EntitiesEntityPresentationInfo.
   * @member {string} entityScenario The supported scenario. Possible values
   * include: 'DominantEntity', 'DisambiguationItem', 'ListItem'. Default
   * value: 'DominantEntity' .
   * @member {array} [entityTypeHints] A list of hints that indicate the
   * entity's type. The list could contain a single hint such as Movie or a
   * list of hints such as Place, LocalBusiness, Restaurant. Each successive
   * hint in the array narrows the entity's type.
   * @member {string} [entityTypeDisplayHint] A display version of the entity
   * hint. For example, if entityTypeHints is Artist, this field may be set to
   * American Singer.
   */
  constructor() {
  }

  /**
   * Defines the metadata of EntitiesEntityPresentationInfo
   *
   * @returns {object} metadata of EntitiesEntityPresentationInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Entities/EntityPresentationInfo',
      type: {
        name: 'Composite',
        className: 'EntitiesEntityPresentationInfo',
        modelProperties: {
          entityScenario: {
            required: true,
            serializedName: 'entityScenario',
            defaultValue: 'DominantEntity',
            type: {
              name: 'String'
            }
          },
          entityTypeHints: {
            required: false,
            readOnly: true,
            serializedName: 'entityTypeHints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          entityTypeDisplayHint: {
            required: false,
            readOnly: true,
            serializedName: 'entityTypeDisplayHint',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = EntitiesEntityPresentationInfo;
