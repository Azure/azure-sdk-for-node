/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines the top-level object that the response includes when the request
 * succeeds.
 *
 * @extends models['Response']
 */
class SearchResponse extends models['Response'] {
  /**
   * Create a SearchResponse.
   * @member {object} [queryContext] An object that contains the query string
   * that Bing used for the request. This object contains the query string as
   * entered by the user. It may also contain an altered query string that Bing
   * used for the query if the query string contained a spelling mistake.
   * @member {string} [queryContext.originalQuery] The query string as
   * specified in the request.
   * @member {string} [queryContext.alteredQuery] The query string used by Bing
   * to perform the query. Bing uses the altered query string if the original
   * query string contained spelling mistakes. For example, if the query string
   * is "saling downwind", the altered query string will be "sailing downwind".
   * This field is included only if the original query string contains a
   * spelling mistake.
   * @member {string} [queryContext.alterationOverrideQuery] The query string
   * to use to force Bing to use the original string. For example, if the query
   * string is "saling downwind", the override query string will be "+saling
   * downwind". Remember to encode the query string which results in
   * "%2Bsaling+downwind". This field is included only if the original query
   * string contains a spelling mistake.
   * @member {boolean} [queryContext.adultIntent] A Boolean value that
   * indicates whether the specified query has adult intent. The value is true
   * if the query has adult intent; otherwise, false.
   * @member {boolean} [queryContext.askUserForLocation] A Boolean value that
   * indicates whether Bing requires the user's location to provide accurate
   * results. If you specified the user's location by using the
   * X-MSEdge-ClientIP and X-Search-Location headers, you can ignore this
   * field. For location aware queries, such as "today's weather" or
   * "restaurants near me" that need the user's location to provide accurate
   * results, this field is set to true. For location aware queries that
   * include the location (for example, "Seattle weather"), this field is set
   * to false. This field is also set to false for queries that are not
   * location aware, such as "best sellers".
   * @member {object} [entities] A list of entities that are relevant to the
   * search query.
   * @member {string} [entities.queryScenario] The supported query scenario.
   * This field is set to DominantEntity or DisambiguationItem. The field is
   * set to DominantEntity if Bing determines that only a single entity
   * satisfies the request. For example, a book, movie, person, or attraction.
   * If multiple entities could satisfy the request, the field is set to
   * DisambiguationItem. For example, if the request uses the generic title of
   * a movie franchise, the entity's type would likely be DisambiguationItem.
   * But, if the request specifies a specific title from the franchise, the
   * entity's type would likely be DominantEntity. Possible values include:
   * 'DominantEntity', 'DominantEntityWithDisambiguation', 'Disambiguation',
   * 'List', 'ListWithPivot'
   * @member {array} [entities.value] A list of entities.
   * @member {object} [places] A list of local entities such as restaurants or
   * hotels that are relevant to the query.
   * @member {array} [places.value] A list of local entities, such as
   * restaurants or hotels.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of SearchResponse
   *
   * @returns {object} metadata of SearchResponse
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SearchResponse',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '_type',
          clientName: '_type'
        },
        uberParent: 'ResponseBase',
        className: 'SearchResponse',
        modelProperties: {
          _type: {
            required: true,
            serializedName: '_type',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          contractualRules: {
            required: false,
            readOnly: true,
            serializedName: 'contractualRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContractualRulesContractualRuleElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ContractualRulesContractualRule',
                    className: 'ContractualRulesContractualRule'
                  }
              }
            }
          },
          webSearchUrl: {
            required: false,
            readOnly: true,
            serializedName: 'webSearchUrl',
            type: {
              name: 'String'
            }
          },
          queryContext: {
            required: false,
            readOnly: true,
            serializedName: 'queryContext',
            type: {
              name: 'Composite',
              className: 'QueryContext'
            }
          },
          entities: {
            required: false,
            readOnly: true,
            serializedName: 'entities',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'ResponseBase',
              className: 'Entities'
            }
          },
          places: {
            required: false,
            readOnly: true,
            serializedName: 'places',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'ResponseBase',
              className: 'Places'
            }
          }
        }
      }
    };
  }
}

module.exports = SearchResponse;
