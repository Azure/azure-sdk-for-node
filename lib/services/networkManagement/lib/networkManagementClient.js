/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var xml = azureCommon.xml2js;
var js2xml = azureCommon.js2xml;
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var NetworkManagementClient = ( /** @lends NetworkManagementClient */ function() {
  /**
   * @class
   * The Service Management API includes operations for managing the virtual
   * networks for your subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
   * more information)
   * Initializes a new instance of the NetworkManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function NetworkManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    NetworkManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-05-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [ClientRootCertificateOperations](-ClientRootCertificateOperations.html)
     * object.
     * @type {object}
     */
    this.clientRootCertificates = new ClientRootCertificateOperations(this);
    /**
     * Provides an instance of the [GatewayOperations](-GatewayOperations.html)
     * object.
     * @type {object}
     */
    this.gateways = new GatewayOperations(this);
    /**
     * Provides an instance of the [NetworkOperations](-NetworkOperations.html)
     * object.
     * @type {object}
     */
    this.networks = new NetworkOperations(this);
    /**
     * Provides an instance of the
     * [ReservedIPOperations](-ReservedIPOperations.html) object.
     * @type {object}
     */
    this.reservedIPs = new ReservedIPOperations(this);
    /**
     * Provides an instance of the
     * [StaticIPOperations](-StaticIPOperations.html) object.
     * @type {object}
     */
    this.staticIPs = new StaticIPOperations(this);
  }
  
  util.inherits(NetworkManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
   * more information)
   * 
   * @param {string} requestId The request ID for the request you wish to
   * track. The request ID is returned in the x-ms-request-id response header
   * for every request.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkManagementClient.prototype.getOperationStatus = function(requestId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (requestId === null || requestId === undefined) {
      return callback(new Error('requestId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.credentials.subscriptionId ? this.credentials.subscriptionId.trim() : '') + '/operations/' + requestId.trim();
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var operationElement = js2xml.getElement(responseDoc, responseDoc, 'OPERATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (operationElement) {
          var idElement = js2xml.getElement(responseDoc, operationElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, operationElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var httpStatusCodeElement = js2xml.getElement(responseDoc, operationElement, 'HTTPSTATUSCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpStatusCodeElement) {
            var httpStatusCodeInstance = httpStatusCodeElement;
            result.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorElement = js2xml.getElement(responseDoc, operationElement, 'ERROR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (errorElement) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeElement = js2xml.getElement(responseDoc, errorElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (codeElement) {
              var codeInstance = codeElement;
              errorInstance.code = codeInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, errorElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              errorInstance.message = messageInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  return NetworkManagementClient;
})();
exports.NetworkManagementClient = NetworkManagementClient;

var ClientRootCertificateOperations = ( /** @lends ClientRootCertificateOperations */ function() {
  /**
   * @class
   * The Network Management API includes operations for managing the client
   * root certificates for your subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154113.aspx for
   * more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkManagementClient] {@link
   * NetworkManagementClient~NetworkManagementClient}.
   * See [clientRootCertificates] {@link
   * NetworkManagementClient~NetworkManagementClient#clientRootCertificates}.
   * Initializes a new instance of the ClientRootCertificateOperations class.
   * @constructor
   * 
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  function ClientRootCertificateOperations(client) {
    this.client = client;
  }
  
  /**
   * The Upload Client Root Certificate operation is used to upload a new
   * client root certificate to Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205129.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {ClientRootCertificateCreateParameters} parameters Parameters
   * supplied to the Upload Client Root Certificate Virtual Network Gateway
   * operation.
   * 
   * @param {string} parameters.certificate The new client root certificate to
   * upload, represented as a hex-encoded string.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ClientRootCertificateOperations.prototype.create = function(networkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.certificate === null || parameters.certificate === undefined) {
      return callback(new Error('parameters.certificate cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/clientrootcertificates';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = parameters.certificate;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Delete Client Root Certificate operation deletes a previously uploaded
   * client root certificate from Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205128.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} certificateThumbprint The X509 certificate thumbprint.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ClientRootCertificateOperations.prototype.delete = function(networkName, certificateThumbprint, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (certificateThumbprint === null || certificateThumbprint === undefined) {
      return callback(new Error('certificateThumbprint cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/clientrootcertificates/' + certificateThumbprint.trim();
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Client Root Certificate operation returns the public portion of a
   * previously uploaded client root certificate in a base-64-encoded format
   * from Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205127.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} certificateThumbprint The X509 certificate thumbprint.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ClientRootCertificateOperations.prototype.get = function(networkName, certificateThumbprint, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (certificateThumbprint === null || certificateThumbprint === undefined) {
      return callback(new Error('certificateThumbprint cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/clientrootcertificates/' + certificateThumbprint.trim();
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      result.certificate = responseContent;
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List Client Root Certificates operation returns a list of all the
   * client root certificates that are associated with the specified virtual
   * network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205130.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ClientRootCertificateOperations.prototype.list = function(networkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/clientrootcertificates';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { clientRootCertificates: [] };
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var clientRootCertificatesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'CLIENTROOTCERTIFICATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (clientRootCertificatesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, clientRootCertificatesSequenceElement, 'CLIENTROOTCERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var clientRootCertificatesElement = js2xml.getElements(responseDoc, clientRootCertificatesSequenceElement, 'CLIENTROOTCERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var clientRootCertificateInstance = {};
            result.clientRootCertificates.push(clientRootCertificateInstance);
            
            var expirationTimeElement = js2xml.getElement(responseDoc, clientRootCertificatesElement, 'EXPIRATIONTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (expirationTimeElement) {
              var expirationTimeInstance = new Date(expirationTimeElement);
              clientRootCertificateInstance.expirationTime = expirationTimeInstance;
            }
            
            var subjectElement = js2xml.getElement(responseDoc, clientRootCertificatesElement, 'SUBJECT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (subjectElement) {
              var subjectInstance = subjectElement;
              clientRootCertificateInstance.subject = subjectInstance;
            }
            
            var thumbprintElement = js2xml.getElement(responseDoc, clientRootCertificatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (thumbprintElement) {
              var thumbprintInstance = thumbprintElement;
              clientRootCertificateInstance.thumbprint = thumbprintInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  return ClientRootCertificateOperations;
})();

var GatewayOperations = ( /** @lends GatewayOperations */ function() {
  /**
   * @class
   * The Network Management API includes operations for managing the gateways
   * for your subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154113.aspx for
   * more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkManagementClient] {@link
   * NetworkManagementClient~NetworkManagementClient}.
   * See [gateways] {@link
   * NetworkManagementClient~NetworkManagementClient#gateways}.
   * Initializes a new instance of the GatewayOperations class.
   * @constructor
   * 
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  function GatewayOperations(client) {
    this.client = client;
  }
  
  /**
   * To connect to, disconnect from, or test your connection to a local network
   * site, access the connection resource representing the local network and
   * specify Connect, Disconnect or Test to perform the desired operation.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
   * for more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} localNetworkSiteName The name of the site to connect to.
   * 
   * @param {GatewayConnectDisconnectOrTestParameters} parameters Parameters
   * supplied to the Begin Connect Disconnect Or Testing Gateway operation.
   * 
   * @param {GatewayConnectionUpdateOperation} parameters.operation Specifies
   * the operation to perform on the connection. Can be set to Connect,
   * Disconnect, or Test to connect to a local network, disconnect from a
   * local network, or test the gateway's connection to a local network site.
   * 
   * @param {string} [parameters.iPAddress] Required if operation is set to
   * Test; otherwise not used. Specifies the IP address of the target local
   * network site with which the gateway will test connectivity.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.beginConnectDisconnectOrTesting = function(networkName, localNetworkSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (localNetworkSiteName === null || localNetworkSiteName === undefined) {
      return callback(new Error('localNetworkSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/connection/' + localNetworkSiteName.trim();
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var updateConnectionElement = js2xml.createElement('UpdateConnection', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, updateConnectionElement);
    
    var operationElement = js2xml.createElement('Operation', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(operationElement, parameters.operation ? parameters.operation.toString() : 'Connect');
    js2xml.addChildElement(updateConnectionElement, operationElement);
    
    if (parameters.iPAddress) {
      var iPAddressElement = js2xml.createElement('IPAddress', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(iPAddressElement, parameters.iPAddress);
      js2xml.addChildElement(updateConnectionElement, iPAddressElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Begin Creating Virtual network Gateway operation creates a new network
   * gateway for the specified virtual network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {GatewayCreateParameters} parameters Parameters supplied to the
   * Begin Creating Virtual Network Gateway operation.
   * 
   * @param {GatewayType} parameters.gatewayType The routing type for this
   * virtual network gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.beginCreating = function(networkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var createGatewayParametersElement = js2xml.createElement('CreateGatewayParameters', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, createGatewayParametersElement);
    
    var gatewayTypeElement = js2xml.createElement('gatewayType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(gatewayTypeElement, parameters.gatewayType ? parameters.gatewayType.toString() : 'StaticRouting');
    js2xml.addChildElement(createGatewayParametersElement, gatewayTypeElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Begin Deleting Virtual Network Gateway operation deletes a network
   * gateway for the specified virtual network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.beginDeleting = function(networkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Begin Failover Virtual Network Gateway operation causes a network
   * gateway failover for the specified virtual network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network in Azure.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.beginFailover = function(networkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = '<?xml version="1.0" encoding="utf-8"?><UpdateGateway xmlns="http://schemas.microsoft.com/windowsazure"><UpdateGatewayOperation>Failover</UpdateGatewayOperation></UpdateGateway>';
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Begin Reset Virtual Network Gateway Shared Key operation resets the
   * shared key on the virtual network gateway for the specified virtual
   * network connection to the specified local network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} localNetworkName The name of the local network.
   * 
   * @param {GatewayResetSharedKeyParameters} parameters Parameters supplied to
   * the Begin Virtual Network Gateway Reset Shared Key request.
   * 
   * @param {number} parameters.keyLength The number of bytes in the shared
   * key. Minimum is 1 and maximum is 128
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.beginResetSharedKey = function(networkName, localNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (localNetworkName === null || localNetworkName === undefined) {
      return callback(new Error('localNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.keyLength === null || parameters.keyLength === undefined) {
      return callback(new Error('parameters.keyLength cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/connection/' + localNetworkName.trim() + '/sharedkey';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var resetSharedKeyElement = js2xml.createElement('ResetSharedKey', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, resetSharedKeyElement);
    
    if (parameters.keyLength) {
      var keyLengthElement = js2xml.createElement('KeyLength', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(keyLengthElement, parameters.keyLength.toString());
      js2xml.addChildElement(resetSharedKeyElement, keyLengthElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Begin Set Virtual Network Gateway Shared Key operation sets the shared
   * key on the virtual network gateway for the specified virtual network
   * connection to the specified local network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} localNetworkName The name of the local network.
   * 
   * @param {GatewaySetSharedKeyParameters} parameters Parameters supplied to
   * the Begin Virtual Network Gateway Set Shared Key request.
   * 
   * @param {string} [parameters.value] Contains the shared key used by the
   * gateway to authenticate connections to sites on a virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.beginSetSharedKey = function(networkName, localNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (localNetworkName === null || localNetworkName === undefined) {
      return callback(new Error('localNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/connection/' + localNetworkName.trim() + '/sharedkey';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var sharedKeyElement = js2xml.createElement('SharedKey', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, sharedKeyElement);
    
    if (parameters.value) {
      var valueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(valueElement, parameters.value);
      js2xml.addChildElement(sharedKeyElement, valueElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * To connect to, disconnect from, or test your connection to a local network
   * site, access the connection resource representing the local network and
   * specify Connect, Disconnect or Test to perform the desired operation.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154107.aspx
   * for more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} localNetworkSiteName The name of the site to connect to.
   * 
   * @param {GatewayConnectDisconnectOrTestParameters} parameters Parameters
   * supplied to the Connect Disconnect Or Testing Gateway operation.
   * 
   * @param {GatewayConnectionUpdateOperation} parameters.operation Specifies
   * the operation to perform on the connection. Can be set to Connect,
   * Disconnect, or Test to connect to a local network, disconnect from a
   * local network, or test the gateway's connection to a local network site.
   * 
   * @param {string} [parameters.iPAddress] Required if operation is set to
   * Test; otherwise not used. Specifies the IP address of the target local
   * network site with which the gateway will test connectivity.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.connectDisconnectOrTest = function(networkName, localNetworkSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginConnectDisconnectOrTesting(networkName, localNetworkSiteName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Successful') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Create Virtual network Gateway operation creates a new network gateway
   * for the specified virtual network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154119.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {GatewayCreateParameters} parameters Parameters supplied to the
   * Create Virtual Network Gateway operation.
   * 
   * @param {GatewayType} parameters.gatewayType The routing type for this
   * virtual network gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.create = function(networkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginCreating(networkName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Successful') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Virtual Network Gateway operation deletes a network gateway for
   * the specified virtual network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154129.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.delete = function(networkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginDeleting(networkName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Successful') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Failover Virtual Network Gateway operation causes a network gateway
   * failover for the specified virtual network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154118.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network in Azure.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.failover = function(networkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginFailover(networkName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Successful') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Generate VPN Client Package operation creates a VPN client package for
   * the specified virtual network and gateway in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn205126.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {GatewayGenerateVpnClientPackageParameters} parameters Parameters
   * supplied to the Generate VPN Client Package operation.
   * 
   * @param {GatewayProcessorArchitecture} parameters.processorArchitecture The
   * client processor architecture.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.generateVpnClientPackage = function(networkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/vpnclientpackage';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var vpnClientParametersElement = js2xml.createElement('VpnClientParameters', '');
    js2xml.addChildElement(requestDoc, vpnClientParametersElement);
    
    var processorArchitectureElement = js2xml.createElement('ProcessorArchitecture', '');
    js2xml.setElementValue(processorArchitectureElement, parameters.processorArchitecture ? parameters.processorArchitecture.toString() : 'Amd64');
    js2xml.addChildElement(vpnClientParametersElement, processorArchitectureElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationAsyncResponseElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATIONASYNCRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationAsyncResponseElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationAsyncResponseElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.operationId = idInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Virtual Network Gateway operation gets information about the
   * network gateway for the specified virtual network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154109.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.get = function(networkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayElement) {
          var stateElement = js2xml.getElement(responseDoc, gatewayElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (stateElement) {
            var stateInstance = stateElement;
            result.state = stateInstance;
          }
          
          var vIPAddressElement = js2xml.getElement(responseDoc, gatewayElement, 'VIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (vIPAddressElement) {
            var vIPAddressInstance = vIPAddressElement;
            result.vipAddress = vIPAddressInstance;
          }
          
          var lastEventElement = js2xml.getElement(responseDoc, gatewayElement, 'LASTEVENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lastEventElement) {
            var lastEventInstance = {};
            result.lastEvent = lastEventInstance;
            
            var timestampElement = js2xml.getElement(responseDoc, lastEventElement, 'TIMESTAMP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (timestampElement) {
              var timestampInstance = new Date(timestampElement);
              lastEventInstance.timestamp = timestampInstance;
            }
            
            var idElement = js2xml.getElement(responseDoc, lastEventElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (idElement) {
              var idInstance = idElement;
              lastEventInstance.id = idInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, lastEventElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              lastEventInstance.message = messageInstance;
            }
            
            var dataElement = js2xml.getElement(responseDoc, lastEventElement, 'DATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dataElement) {
              var dataInstance = dataElement;
              lastEventInstance.data = dataInstance;
            }
          }
          
          var gatewayTypeElement = js2xml.getElement(responseDoc, gatewayElement, 'GATEWAYTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (gatewayTypeElement) {
            var gatewayTypeInstance = gatewayTypeElement;
            result.gatewayType = gatewayTypeInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Device Configuration Script operation returns a script that you
   * can use to configure local VPN devices to connect to the gateway.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154115.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {GatewayGetDeviceConfigurationScriptParameters} parameters The
   * parameters for the Get Device Configuration Script operation.
   * 
   * @param {string} [parameters.vendor] The name of the device vendor.
   * 
   * @param {string} [parameters.platform] The device platform.
   * 
   * @param {string} [parameters.oSFamily] The device OS family.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.getDeviceConfigurationScript = function(networkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/vpndeviceconfigurationscript?';
    if (parameters.vendor) {
      url2 = url2 + 'vendor=' + encodeURIComponent(parameters.vendor ? parameters.vendor.trim() : '');
    }
    if (parameters.platform) {
      url2 = url2 + '&platform=' + encodeURIComponent(parameters.platform ? parameters.platform.trim() : '');
    }
    if (parameters.oSFamily) {
      url2 = url2 + '&OSfamily=' + encodeURIComponent(parameters.oSFamily ? parameters.oSFamily.trim() : '');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      result.configurationScript = responseContent;
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Virtual Network Gateway Operation Status gets information on the
   * status of network gateway operations in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154112.aspx for
   * more information)
   * 
   * @param {string} operationId The ID of the network operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.getOperationStatus = function(operationId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (operationId === null || operationId === undefined) {
      return callback(new Error('operationId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/operation/' + operationId.trim();
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var gatewayOperationElement = js2xml.getElement(responseDoc, responseDoc, 'GATEWAYOPERATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (gatewayOperationElement) {
          var idElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var httpStatusCodeElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'HTTPSTATUSCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpStatusCodeElement) {
            var httpStatusCodeInstance = httpStatusCodeElement;
            result.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorElement = js2xml.getElement(responseDoc, gatewayOperationElement, 'ERROR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (errorElement) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeElement = js2xml.getElement(responseDoc, errorElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (codeElement) {
              var codeInstance = codeElement;
              errorInstance.code = codeInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, errorElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              errorInstance.message = messageInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Virtual Network Gateway Shared Key operation gets the shared key
   * on the virtual network gateway for the specified virtual network
   * connection to the specified local network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154122.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} localNetworkName The name of the local network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.getSharedKey = function(networkName, localNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (localNetworkName === null || localNetworkName === undefined) {
      return callback(new Error('localNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/connection/' + localNetworkName.trim() + '/sharedkey';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var sharedKeyElement = js2xml.getElement(responseDoc, responseDoc, 'SHAREDKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (sharedKeyElement) {
          var valueElement = js2xml.getElement(responseDoc, sharedKeyElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (valueElement) {
            var valueInstance = valueElement;
            result.sharedKey = valueInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Connections operation returns a list of the local network
   * connections that can be accessed through the gateway.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154120.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.listConnections = function(networkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '/gateway/connections';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { connections: [] };
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var connectionsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'CONNECTIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (connectionsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var connectionsElement = js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var connectionInstance = { allocatedIPAddresses: [] };
            result.connections.push(connectionInstance);
            
            var localNetworkSiteNameElement = js2xml.getElement(responseDoc, connectionsElement, 'LOCALNETWORKSITENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (localNetworkSiteNameElement) {
              var localNetworkSiteNameInstance = localNetworkSiteNameElement;
              connectionInstance.localNetworkSiteName = localNetworkSiteNameInstance;
            }
            
            var connectivityStateElement = js2xml.getElement(responseDoc, connectionsElement, 'CONNECTIVITYSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (connectivityStateElement) {
              var connectivityStateInstance = connectivityStateElement;
              connectionInstance.connectivityState = connectivityStateInstance;
            }
            
            var lastEventElement = js2xml.getElement(responseDoc, connectionsElement, 'LASTEVENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (lastEventElement) {
              var lastEventInstance = {};
              connectionInstance.lastEvent = lastEventInstance;
              
              var timestampElement = js2xml.getElement(responseDoc, lastEventElement, 'TIMESTAMP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (timestampElement) {
                var timestampInstance = new Date(timestampElement);
                lastEventInstance.timestamp = timestampInstance;
              }
              
              var idElement = js2xml.getElement(responseDoc, lastEventElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (idElement) {
                var idInstance = idElement;
                lastEventInstance.id = idInstance;
              }
              
              var messageElement = js2xml.getElement(responseDoc, lastEventElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (messageElement) {
                var messageInstance = messageElement;
                lastEventInstance.message = messageInstance;
              }
              
              var dataElement = js2xml.getElement(responseDoc, lastEventElement, 'DATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dataElement) {
                var dataInstance = dataElement;
                lastEventInstance.data = dataInstance;
              }
            }
            
            var ingressBytesTransferredElement = js2xml.getElement(responseDoc, connectionsElement, 'INGRESSBYTESTRANSFERRED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (ingressBytesTransferredElement) {
              var ingressBytesTransferredInstance = parseInt(ingressBytesTransferredElement, 10);
              connectionInstance.ingressBytesTransferred = ingressBytesTransferredInstance;
            }
            
            var egressBytesTransferredElement = js2xml.getElement(responseDoc, connectionsElement, 'EGRESSBYTESTRANSFERRED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (egressBytesTransferredElement) {
              var egressBytesTransferredInstance = parseInt(egressBytesTransferredElement, 10);
              connectionInstance.egressBytesTransferred = egressBytesTransferredInstance;
            }
            
            var lastConnectionEstablishedElement = js2xml.getElement(responseDoc, connectionsElement, 'LASTCONNECTIONESTABLISHED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (lastConnectionEstablishedElement) {
              var lastConnectionEstablishedInstance = new Date(lastConnectionEstablishedElement);
              connectionInstance.lastConnectionEstablished = lastConnectionEstablishedInstance;
            }
            
            var allocatedIPAddressesSequenceElement = js2xml.getElement(responseDoc, connectionsElement, 'ALLOCATEDIPADDRESSES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (allocatedIPAddressesSequenceElement) {
              for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, allocatedIPAddressesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                var allocatedIPAddressesElement = js2xml.getElements(responseDoc, allocatedIPAddressesSequenceElement, 'STRING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                connectionInstance.allocatedIPAddresses.push(allocatedIPAddressesElement);
              }
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Virtual Network Gateway Supported Devices operation lists the
   * supported, on-premise network devices that can connect to the gateway.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154102.aspx
   * for more information)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.listSupportedDevices = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/supporteddevices';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { vendors: [] };
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var vpnDeviceListElement = js2xml.getElement(responseDoc, responseDoc, 'VPNDEVICELIST', '');
        if (vpnDeviceListElement) {
          var versionAttribute = js2xml.getAttribute(responseDoc, vpnDeviceListElement, 'VERSION', '');
          if (versionAttribute) {
            result.version = versionAttribute;
          }
          
          if (vpnDeviceListElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, vpnDeviceListElement, 'VENDOR', '').length; loweredIndex1 = loweredIndex1 + 1) {
              var vendorsElement = js2xml.getElements(responseDoc, vpnDeviceListElement, 'VENDOR', '')[loweredIndex1];
              var vendorInstance = { platforms: [] };
              result.vendors.push(vendorInstance);
              
              var nameAttribute = js2xml.getAttribute(responseDoc, vendorsElement, 'NAME', '');
              if (nameAttribute) {
                vendorInstance.name = nameAttribute;
              }
              
              if (vendorsElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, vendorsElement, 'PLATFORM', '').length; loweredIndex2 = loweredIndex2 + 1) {
                  var platformsElement = js2xml.getElements(responseDoc, vendorsElement, 'PLATFORM', '')[loweredIndex2];
                  var platformInstance = { oSFamilies: [] };
                  vendorInstance.platforms.push(platformInstance);
                  
                  var nameAttribute2 = js2xml.getAttribute(responseDoc, platformsElement, 'NAME', '');
                  if (nameAttribute2) {
                    platformInstance.name = nameAttribute2;
                  }
                  
                  if (platformsElement) {
                    for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, platformsElement, 'OSFAMILY', '').length; loweredIndex3 = loweredIndex3 + 1) {
                      var oSFamiliesElement = js2xml.getElements(responseDoc, platformsElement, 'OSFAMILY', '')[loweredIndex3];
                      var oSFamilyInstance = {};
                      platformInstance.oSFamilies.push(oSFamilyInstance);
                      
                      var nameAttribute3 = js2xml.getAttribute(responseDoc, oSFamiliesElement, 'NAME', '');
                      if (nameAttribute3) {
                        oSFamilyInstance.name = nameAttribute3;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Reset Virtual Network Gateway Shared Key operation resets the shared
   * key on the virtual network gateway for the specified virtual network
   * connection to the specified local network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} localNetworkName The name of the local network.
   * 
   * @param {GatewayResetSharedKeyParameters} parameters The parameters to the
   * Virtual Network Gateway Reset Shared Key request.
   * 
   * @param {number} parameters.keyLength The number of bytes in the shared
   * key. Minimum is 1 and maximum is 128
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.resetSharedKey = function(networkName, localNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginResetSharedKey(networkName, localNetworkName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Successful') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Set Virtual Network Gateway Shared Key operation sets the shared key
   * on the virtual network gateway for the specified virtual network
   * connection to the specified local network in Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx for
   * more information)
   * 
   * @param {string} networkName The name of the virtual network for this
   * gateway.
   * 
   * @param {string} localNetworkName The name of the local network.
   * 
   * @param {GatewaySetSharedKeyParameters} parameters The parameters to the
   * Virtual Network Gateway Set Shared Key request.
   * 
   * @param {string} [parameters.value] Contains the shared key used by the
   * gateway to authenticate connections to sites on a virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GatewayOperations.prototype.setSharedKey = function(networkName, localNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.gateways.beginSetSharedKey(networkName, localNetworkName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.gateways.getOperationStatus(result.operationId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Successful') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return GatewayOperations;
})();

var NetworkOperations = ( /** @lends NetworkOperations */ function() {
  /**
   * @class
   * The Network Management API includes operations for managing the virtual
   * networks for your subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
   * more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkManagementClient] {@link
   * NetworkManagementClient~NetworkManagementClient}.
   * See [networks] {@link
   * NetworkManagementClient~NetworkManagementClient#networks}.
   * Initializes a new instance of the NetworkOperations class.
   * @constructor
   * 
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  function NetworkOperations(client) {
    this.client = client;
  }
  
  /**
   * The Begin Setting Network Configuration operation asynchronously
   * configures the virtual network.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx for
   * more information)
   * 
   * @param {NetworkSetConfigurationParameters} parameters Parameters supplied
   * to the Set Network Configuration operation.
   * 
   * @param {string} parameters.configuration The network configuration for
   * this subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkOperations.prototype.beginSettingConfiguration = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.configuration === null || parameters.configuration === undefined) {
      return callback(new Error('parameters.configuration cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/media';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/octet-stream';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = parameters.configuration;
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Network Configuration operation retrieves the network
   * configuration file for the given subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx for
   * more information)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkOperations.prototype.getConfiguration = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/media';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      result.configuration = responseContent;
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List Virtual network sites operation retrieves the virtual networks
   * configured for the subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157185.aspx for
   * more information)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/virtualnetwork';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { virtualNetworkSites: [] };
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var virtualNetworkSitesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'VIRTUALNETWORKSITES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (virtualNetworkSitesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, virtualNetworkSitesSequenceElement, 'VIRTUALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var virtualNetworkSitesElement = js2xml.getElements(responseDoc, virtualNetworkSitesSequenceElement, 'VIRTUALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var virtualNetworkSiteInstance = { dnsServers: [], subnets: [] };
            result.virtualNetworkSites.push(virtualNetworkSiteInstance);
            
            var nameElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              virtualNetworkSiteInstance.name = nameInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = labelElement;
              virtualNetworkSiteInstance.label = labelInstance;
            }
            
            var idElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (idElement) {
              var idInstance = idElement;
              virtualNetworkSiteInstance.id = idInstance;
            }
            
            var affinityGroupElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (affinityGroupElement) {
              var affinityGroupInstance = affinityGroupElement;
              virtualNetworkSiteInstance.affinityGroup = affinityGroupInstance;
            }
            
            var stateElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (stateElement) {
              var stateInstance = stateElement;
              virtualNetworkSiteInstance.state = stateInstance;
            }
            
            var addressSpaceElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'ADDRESSSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (addressSpaceElement) {
              var addressSpaceInstance = { addressPrefixes: [] };
              virtualNetworkSiteInstance.addressSpace = addressSpaceInstance;
              
              var addressPrefixesSequenceElement = js2xml.getElement(responseDoc, addressSpaceElement, 'ADDRESSPREFIXES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (addressPrefixesSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, addressPrefixesSequenceElement, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var addressPrefixesElement = js2xml.getElements(responseDoc, addressPrefixesSequenceElement, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  addressSpaceInstance.addressPrefixes.push(addressPrefixesElement);
                }
              }
            }
            
            var subnetsSequenceElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'SUBNETS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (subnetsSequenceElement) {
              for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, subnetsSequenceElement, 'SUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
                var subnetsElement = js2xml.getElements(responseDoc, subnetsSequenceElement, 'SUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
                var subnetInstance = {};
                virtualNetworkSiteInstance.subnets.push(subnetInstance);
                
                var nameElement2 = js2xml.getElement(responseDoc, subnetsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (nameElement2) {
                  var nameInstance2 = nameElement2;
                  subnetInstance.name = nameInstance2;
                }
                
                var addressPrefixElement = js2xml.getElement(responseDoc, subnetsElement, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (addressPrefixElement) {
                  var addressPrefixInstance = addressPrefixElement;
                  subnetInstance.addressPrefix = addressPrefixInstance;
                }
              }
            }
            
            var dnsElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'DNS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dnsElement) {
              var dnsServersSequenceElement = js2xml.getElement(responseDoc, dnsElement, 'DNSSERVERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dnsServersSequenceElement) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
                  var dnsServersElement = js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
                  var dnsServerInstance = {};
                  virtualNetworkSiteInstance.dnsServers.push(dnsServerInstance);
                  
                  var nameElement3 = js2xml.getElement(responseDoc, dnsServersElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (nameElement3) {
                    var nameInstance3 = nameElement3;
                    dnsServerInstance.name = nameInstance3;
                  }
                  
                  var addressElement = js2xml.getElement(responseDoc, dnsServersElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (addressElement) {
                    var addressInstance = addressElement;
                    dnsServerInstance.address = addressInstance;
                  }
                }
              }
            }
            
            var gatewayElement = js2xml.getElement(responseDoc, virtualNetworkSitesElement, 'GATEWAY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (gatewayElement) {
              var gatewayInstance = { sites: [] };
              virtualNetworkSiteInstance.gateway = gatewayInstance;
              
              var profileElement = js2xml.getElement(responseDoc, gatewayElement, 'PROFILE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (profileElement) {
                var profileInstance = profileElement;
                gatewayInstance.profile = profileInstance;
              }
              
              var sitesSequenceElement = js2xml.getElement(responseDoc, gatewayElement, 'SITES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (sitesSequenceElement) {
                for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, sitesSequenceElement, 'LOCALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
                  var sitesElement = js2xml.getElements(responseDoc, sitesSequenceElement, 'LOCALNETWORKSITE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
                  var localNetworkSiteInstance = { connections: [] };
                  gatewayInstance.sites.push(localNetworkSiteInstance);
                  
                  var nameElement4 = js2xml.getElement(responseDoc, sitesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (nameElement4) {
                    var nameInstance4 = nameElement4;
                    localNetworkSiteInstance.name = nameInstance4;
                  }
                  
                  var vpnGatewayAddressElement = js2xml.getElement(responseDoc, sitesElement, 'VPNGATEWAYADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (vpnGatewayAddressElement) {
                    var vpnGatewayAddressInstance = vpnGatewayAddressElement;
                    localNetworkSiteInstance.vpnGatewayAddress = vpnGatewayAddressInstance;
                  }
                  
                  var addressSpaceElement2 = js2xml.getElement(responseDoc, sitesElement, 'ADDRESSSPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (addressSpaceElement2) {
                    var addressSpaceInstance2 = { addressPrefixes: [] };
                    localNetworkSiteInstance.addressSpace = addressSpaceInstance2;
                    
                    var addressPrefixesSequenceElement2 = js2xml.getElement(responseDoc, addressSpaceElement2, 'ADDRESSPREFIXES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (addressPrefixesSequenceElement2) {
                      for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, addressPrefixesSequenceElement2, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex6 = loweredIndex6 + 1) {
                        var addressPrefixesElement2 = js2xml.getElements(responseDoc, addressPrefixesSequenceElement2, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex6];
                        addressSpaceInstance2.addressPrefixes.push(addressPrefixesElement2);
                      }
                    }
                  }
                  
                  var connectionsSequenceElement = js2xml.getElement(responseDoc, sitesElement, 'CONNECTIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (connectionsSequenceElement) {
                    for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                      var connectionsElement = js2xml.getElements(responseDoc, connectionsSequenceElement, 'CONNECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                      var connectionInstance = {};
                      localNetworkSiteInstance.connections.push(connectionInstance);
                      
                      var typeElement = js2xml.getElement(responseDoc, connectionsElement, 'TYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (typeElement) {
                        var typeInstance = typeElement;
                        connectionInstance.type = typeInstance;
                      }
                    }
                  }
                }
              }
              
              var vPNClientAddressPoolElement = js2xml.getElement(responseDoc, gatewayElement, 'VPNCLIENTADDRESSPOOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (vPNClientAddressPoolElement) {
                var vPNClientAddressPoolInstance = { addressPrefixes: [] };
                gatewayInstance.vPNClientAddressPool = vPNClientAddressPoolInstance;
                
                var addressPrefixesSequenceElement3 = js2xml.getElement(responseDoc, vPNClientAddressPoolElement, 'ADDRESSPREFIXES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (addressPrefixesSequenceElement3) {
                  for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, addressPrefixesSequenceElement3, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                    var addressPrefixesElement3 = js2xml.getElements(responseDoc, addressPrefixesSequenceElement3, 'ADDRESSPREFIX', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                    vPNClientAddressPoolInstance.addressPrefixes.push(addressPrefixesElement3);
                  }
                }
              }
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Set Network Configuration operation asynchronously configures the
   * virtual network.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx for
   * more information)
   * 
   * @param {NetworkSetConfigurationParameters} parameters Parameters supplied
   * to the Set Network Configuration operation.
   * 
   * @param {string} parameters.configuration The network configuration for
   * this subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkOperations.prototype.setConfiguration = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networks.beginSettingConfiguration(parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Succeeded') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return NetworkOperations;
})();

var ReservedIPOperations = ( /** @lends ReservedIPOperations */ function() {
  /**
   * @class
   * The Network Management API includes operations for managing the reserved
   * IPs for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkManagementClient] {@link
   * NetworkManagementClient~NetworkManagementClient}.
   * See [reservedIPs] {@link
   * NetworkManagementClient~NetworkManagementClient#reservedIPs}.
   * Initializes a new instance of the ReservedIPOperations class.
   * @constructor
   * 
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  function ReservedIPOperations(client) {
    this.client = client;
  }
  
  /**
   * The Begin Creating Reserved IP operation creates a reserved IP from your
   * the subscription.
   * 
   * @param {NetworkReservedIPCreateParameters} parameters Parameters supplied
   * to the Begin Creating Reserved IP operation.
   * 
   * @param {string} [parameters.name] Name of the reserved IP.
   * 
   * @param {string} [parameters.label] The friendly identifier for the site.
   * 
   * @param {string} [parameters.location] Location where the virtual network
   * exists.
   * 
   * @param {string} [parameters.serviceName] The name of the service the IP
   * belongs to, if used.
   * 
   * @param {string} [parameters.deploymentName] The name of the deployment the
   * IP belongs to, if used.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ReservedIPOperations.prototype.beginCreating = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/reservedips';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var reservedIPElement = js2xml.createElement('ReservedIP', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, reservedIPElement);
    
    if (parameters.name) {
      var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(nameElement, parameters.name);
      js2xml.addChildElement(reservedIPElement, nameElement);
    }
    
    if (parameters.label) {
      var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(labelElement, parameters.label);
      js2xml.addChildElement(reservedIPElement, labelElement);
    }
    
    if (parameters.location) {
      var locationElement = js2xml.createElement('Location', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(locationElement, parameters.location);
      js2xml.addChildElement(reservedIPElement, locationElement);
    }
    
    if (parameters.serviceName) {
      var serviceNameElement = js2xml.createElement('ServiceName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(serviceNameElement, parameters.serviceName);
      js2xml.addChildElement(reservedIPElement, serviceNameElement);
    }
    
    if (parameters.deploymentName) {
      var deploymentNameElement = js2xml.createElement('DeploymentName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(deploymentNameElement, parameters.deploymentName);
      js2xml.addChildElement(reservedIPElement, deploymentNameElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Begin Deleting Reserved IP operation removes a reserved IP from your
   * the subscription.
   * 
   * @param {string} ipName The name of the reserved IP.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ReservedIPOperations.prototype.beginDeleting = function(ipName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (ipName === null || ipName === undefined) {
      return callback(new Error('ipName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/reservedips/' + ipName.trim();
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Create Reserved IP operation creates a reserved IP from your the
   * subscription.
   * 
   * @param {NetworkReservedIPCreateParameters} parameters Parameters supplied
   * to the Create Reserved IP operation.
   * 
   * @param {string} [parameters.name] Name of the reserved IP.
   * 
   * @param {string} [parameters.label] The friendly identifier for the site.
   * 
   * @param {string} [parameters.location] Location where the virtual network
   * exists.
   * 
   * @param {string} [parameters.serviceName] The name of the service the IP
   * belongs to, if used.
   * 
   * @param {string} [parameters.deploymentName] The name of the deployment the
   * IP belongs to, if used.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ReservedIPOperations.prototype.create = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.reservedIPs.beginCreating(parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      if (result.status === 'Succeeded') {
        return callback(null, result);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Succeeded') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Reserved IP operation removes a reserved IP from your the
   * subscription.
   * 
   * @param {string} ipName The name of the reserved IP.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ReservedIPOperations.prototype.delete = function(ipName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.reservedIPs.beginDeleting(ipName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Succeeded') {
                  if (result2.error) {
                    var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                    ex.errorCode = result2.error.code;
                    ex.errorMessage = result2.error.message;
                    return callback(ex);
                  } else {
                    var ex = new Error('');
                    return callback(ex);
                  }
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get Reserved IP operation retrieves the details for the virtual IP
   * reserved for the subscription.
   * 
   * @param {string} ipName The name of the reserved IP to retrieve.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ReservedIPOperations.prototype.get = function(ipName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (ipName === null || ipName === undefined) {
      return callback(new Error('ipName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/reservedips/' + ipName.trim();
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var reservedIPElement = js2xml.getElement(responseDoc, responseDoc, 'RESERVEDIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (reservedIPElement) {
          var nameElement = js2xml.getElement(responseDoc, reservedIPElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var addressElement = js2xml.getElement(responseDoc, reservedIPElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (addressElement) {
            var addressInstance = addressElement;
            result.address = addressInstance;
          }
          
          var idElement = js2xml.getElement(responseDoc, reservedIPElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var labelElement = js2xml.getElement(responseDoc, reservedIPElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement) {
            var labelInstance = labelElement;
            result.label = labelInstance;
          }
          
          var stateElement = js2xml.getElement(responseDoc, reservedIPElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (stateElement) {
            var stateInstance = stateElement;
            result.state = stateInstance;
          }
          
          var inUseElement = js2xml.getElement(responseDoc, reservedIPElement, 'INUSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (inUseElement) {
            var inUseInstance = inUseElement === 'true';
            result.inUse = inUseInstance;
          }
          
          var serviceNameElement = js2xml.getElement(responseDoc, reservedIPElement, 'SERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (serviceNameElement) {
            var serviceNameInstance = serviceNameElement;
            result.serviceName = serviceNameInstance;
          }
          
          var deploymentNameElement = js2xml.getElement(responseDoc, reservedIPElement, 'DEPLOYMENTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (deploymentNameElement) {
            var deploymentNameInstance = deploymentNameElement;
            result.deploymentName = deploymentNameInstance;
          }
          
          var locationElement = js2xml.getElement(responseDoc, reservedIPElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (locationElement) {
            var locationInstance = locationElement;
            result.location = locationInstance;
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Reserved IP operation retrieves all of the virtual IPs reserved
   * for the subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ReservedIPOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/reservedips';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { reservedIPs: [] };
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var reservedIPsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'RESERVEDIPS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (reservedIPsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, reservedIPsSequenceElement, 'RESERVEDIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var reservedIPsElement = js2xml.getElements(responseDoc, reservedIPsSequenceElement, 'RESERVEDIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var reservedIPInstance = {};
            result.reservedIPs.push(reservedIPInstance);
            
            var nameElement = js2xml.getElement(responseDoc, reservedIPsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              reservedIPInstance.name = nameInstance;
            }
            
            var addressElement = js2xml.getElement(responseDoc, reservedIPsElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (addressElement) {
              var addressInstance = addressElement;
              reservedIPInstance.address = addressInstance;
            }
            
            var idElement = js2xml.getElement(responseDoc, reservedIPsElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (idElement) {
              var idInstance = idElement;
              reservedIPInstance.id = idInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, reservedIPsElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = labelElement;
              reservedIPInstance.label = labelInstance;
            }
            
            var stateElement = js2xml.getElement(responseDoc, reservedIPsElement, 'STATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (stateElement) {
              var stateInstance = stateElement;
              reservedIPInstance.state = stateInstance;
            }
            
            var inUseElement = js2xml.getElement(responseDoc, reservedIPsElement, 'INUSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (inUseElement) {
              var inUseInstance = inUseElement === 'true';
              reservedIPInstance.inUse = inUseInstance;
            }
            
            var serviceNameElement = js2xml.getElement(responseDoc, reservedIPsElement, 'SERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (serviceNameElement) {
              var serviceNameInstance = serviceNameElement;
              reservedIPInstance.serviceName = serviceNameInstance;
            }
            
            var deploymentNameElement = js2xml.getElement(responseDoc, reservedIPsElement, 'DEPLOYMENTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (deploymentNameElement) {
              var deploymentNameInstance = deploymentNameElement;
              reservedIPInstance.deploymentName = deploymentNameInstance;
            }
            
            var locationElement = js2xml.getElement(responseDoc, reservedIPsElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (locationElement) {
              var locationInstance = locationElement;
              reservedIPInstance.location = locationInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  return ReservedIPOperations;
})();

var StaticIPOperations = ( /** @lends StaticIPOperations */ function() {
  /**
   * @class
   * The Network Management API includes operations for managing the static IPs
   * for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkManagementClient] {@link
   * NetworkManagementClient~NetworkManagementClient}.
   * See [staticIPs] {@link
   * NetworkManagementClient~NetworkManagementClient#staticIPs}.
   * Initializes a new instance of the StaticIPOperations class.
   * @constructor
   * 
   * @param {NetworkManagementClient} client Reference to the service client.
   */
  function StaticIPOperations(client) {
    this.client = client;
  }
  
  /**
   * The Check Static IP operation retrieves the details for the availability
   * of static IP addresses for the given virtual network.
   * 
   * @param {string} networkName The name of the virtual network.
   * 
   * @param {string} ipAddress The address of the static IP.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StaticIPOperations.prototype.check = function(networkName, ipAddress, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (networkName === null || networkName === undefined) {
      return callback(new Error('networkName cannot be null.'));
    }
    if (ipAddress === null || ipAddress === undefined) {
      return callback(new Error('ipAddress cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/services/networking/' + networkName.trim() + '?';
    url2 = url2 + 'op=checkavailability';
    url2 = url2 + '&address=' + encodeURIComponent(ipAddress);
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { availableAddresses: [] };
      var options = {};
      options.trim = false;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var addressAvailabilityResponseElement = js2xml.getElement(responseDoc, responseDoc, 'ADDRESSAVAILABILITYRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (addressAvailabilityResponseElement) {
          var isAvailableElement = js2xml.getElement(responseDoc, addressAvailabilityResponseElement, 'ISAVAILABLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isAvailableElement) {
            var isAvailableInstance = isAvailableElement === 'true';
            result.isAvailable = isAvailableInstance;
          }
          
          var availableAddressesSequenceElement = js2xml.getElement(responseDoc, addressAvailabilityResponseElement, 'AVAILABLEADDRESSES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (availableAddressesSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, availableAddressesSequenceElement, 'AVAILABLEADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var availableAddressesElement = js2xml.getElements(responseDoc, availableAddressesSequenceElement, 'AVAILABLEADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              result.availableAddresses.push(availableAddressesElement);
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  return StaticIPOperations;
})();
