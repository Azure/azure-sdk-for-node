/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var GalleryClient = ( /** @lends GalleryClient */ function() {
  /**
   * @class
   * Initializes a new instance of the GalleryClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function GalleryClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    GalleryClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://gallery.azure.com/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2013-03-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [ItemOperations](-ItemOperations.html)
     * object.
     * @type {object}
     */
    this.items = new ItemOperations(this);
  }
  
  util.inherits(GalleryClient, Service);
  
  
  return GalleryClient;
})();
exports.GalleryClient = GalleryClient;

var ItemOperations = ( /** @lends ItemOperations */ function() {
  /**
   * @class
   * Operations for working with gallery items.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [GalleryClient] {@link GalleryClient~GalleryClient}.
   * See [items] {@link GalleryClient~GalleryClient#items}.
   * Initializes a new instance of the ItemOperations class.
   * @constructor
   * 
   * @param {GalleryClient} client Reference to the service client.
   */
  function ItemOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets a gallery items.
   * 
   * @param {string} [itemIdentity] Gallery item identity.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ItemOperations.prototype.get = function(itemIdentity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/Microsoft.Gallery/galleryitems/' + (itemIdentity ? itemIdentity.trim() : '');
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var itemInstance = { categoryIds: [], iconFileUrls: {}, screenshotUrls: [] };
        result.item = itemInstance;
        
        var identityValue = responseDoc['identity'];
        if (identityValue) {
          var identityInstance = identityValue;
          itemInstance.identity = identityInstance;
        }
        
        var itemNameValue = responseDoc['itemName'];
        if (itemNameValue) {
          var itemNameInstance = itemNameValue;
          itemInstance.name = itemNameInstance;
        }
        
        var itemDisplayNameValue = responseDoc['itemDisplayName'];
        if (itemDisplayNameValue) {
          var itemDisplayNameInstance = itemDisplayNameValue;
          itemInstance.displayName = itemDisplayNameInstance;
        }
        
        var publisherValue = responseDoc['publisher'];
        if (publisherValue) {
          var publisherInstance = publisherValue;
          itemInstance.publisher = publisherInstance;
        }
        
        var publisherDisplayNameValue = responseDoc['publisherDisplayName'];
        if (publisherDisplayNameValue) {
          var publisherDisplayNameInstance = publisherDisplayNameValue;
          itemInstance.publisherDisplayName = publisherDisplayNameInstance;
        }
        
        var versionValue = responseDoc['version'];
        if (versionValue) {
          var versionInstance = versionValue;
          itemInstance.version = versionInstance;
        }
        
        var summaryValue = responseDoc['summary'];
        if (summaryValue) {
          var summaryInstance = summaryValue;
          itemInstance.summary = summaryInstance;
        }
        
        var descriptionValue = responseDoc['description'];
        if (descriptionValue) {
          var descriptionInstance = descriptionValue;
          itemInstance.description = descriptionInstance;
        }
        
        var resourceGroupNameValue = responseDoc['resourceGroupName'];
        if (resourceGroupNameValue) {
          var resourceGroupNameInstance = resourceGroupNameValue;
          itemInstance.resourceGroupName = resourceGroupNameInstance;
        }
        
        var definitionTemplatesValue = responseDoc['definitionTemplates'];
        if (definitionTemplatesValue) {
          var definitionTemplatesInstance = { deploymentTemplateFileUrls: {} };
          itemInstance.definitionTemplates = definitionTemplatesInstance;
          
          var uiDefinitionFileUrlValue = definitionTemplatesValue['uiDefinitionFileUrl'];
          if (uiDefinitionFileUrlValue) {
            var uiDefinitionFileUrlInstance = uiDefinitionFileUrlValue;
            definitionTemplatesInstance.uiDefinitionFileUrl = uiDefinitionFileUrlInstance;
          }
          
          var defaultDeploymentTemplateIdValue = definitionTemplatesValue['defaultDeploymentTemplateId'];
          if (defaultDeploymentTemplateIdValue) {
            var defaultDeploymentTemplateIdInstance = defaultDeploymentTemplateIdValue;
            definitionTemplatesInstance.defaultDeploymentTemplateId = defaultDeploymentTemplateIdInstance;
          }
          
          var deploymentTemplateFileUrlsSequenceElement = definitionTemplatesValue['deploymentTemplateFileUrls'];
          if (deploymentTemplateFileUrlsSequenceElement) {
            for (var property in deploymentTemplateFileUrlsSequenceElement) {
              var deploymentTemplateFileUrlsKey = property;
              var deploymentTemplateFileUrlsValue = deploymentTemplateFileUrlsSequenceElement[property];
              definitionTemplatesInstance.deploymentTemplateFileUrls[deploymentTemplateFileUrlsKey] = deploymentTemplateFileUrlsValue;
            }
          }
        }
        
        var categoryIdsArray = responseDoc['categoryIds'];
        if (categoryIdsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < categoryIdsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var categoryIdsValue = categoryIdsArray[loweredIndex1];
            itemInstance.categoryIds.push(categoryIdsValue);
          }
        }
        
        var screenshotUrlsArray = responseDoc['screenshotUrls'];
        if (screenshotUrlsArray) {
          for (var loweredIndex2 = 0; loweredIndex2 < screenshotUrlsArray.length; loweredIndex2 = loweredIndex2 + 1) {
            var screenshotUrlsValue = screenshotUrlsArray[loweredIndex2];
            itemInstance.screenshotUrls.push(screenshotUrlsValue);
          }
        }
        
        var iconFileUrlsSequenceElement = responseDoc['iconFileUrls'];
        if (iconFileUrlsSequenceElement) {
          for (var property2 in iconFileUrlsSequenceElement) {
            var iconFileUrlsKey = property2;
            var iconFileUrlsValue = iconFileUrlsSequenceElement[property2];
            itemInstance.iconFileUrls[iconFileUrlsKey] = iconFileUrlsValue;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets collection of gallery items.
   * 
   * @param {ItemListParameters} [parametersOrCallback] Query parameters. If
   * null is passed returns all gallery items.
   * 
   * @param {string} [parametersOrCallback.filter] Gets or sets OData filter.
   * Optional.
   * 
   * @param {number} [parametersOrCallback.top] Number of items to return.
   * Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ItemOperations.prototype.list = function(parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/Microsoft.Gallery/galleryitems?';
    var appendFilter = true;
    if (parameters && parameters.filter) {
      appendFilter = false;
      url2 = url2 + '$filter=' + encodeURIComponent(parameters.filter ? parameters.filter.trim() : '');
    }
    if (parameters && parameters.top) {
      url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { items: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var itemsArray = responseDoc;
        if (itemsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < itemsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var itemsValue = itemsArray[loweredIndex1];
            var galleryItemInstance = { categoryIds: [], iconFileUrls: {}, screenshotUrls: [] };
            result.items.push(galleryItemInstance);
            
            var identityValue = itemsValue['identity'];
            if (identityValue) {
              var identityInstance = identityValue;
              galleryItemInstance.identity = identityInstance;
            }
            
            var itemNameValue = itemsValue['itemName'];
            if (itemNameValue) {
              var itemNameInstance = itemNameValue;
              galleryItemInstance.name = itemNameInstance;
            }
            
            var itemDisplayNameValue = itemsValue['itemDisplayName'];
            if (itemDisplayNameValue) {
              var itemDisplayNameInstance = itemDisplayNameValue;
              galleryItemInstance.displayName = itemDisplayNameInstance;
            }
            
            var publisherValue = itemsValue['publisher'];
            if (publisherValue) {
              var publisherInstance = publisherValue;
              galleryItemInstance.publisher = publisherInstance;
            }
            
            var publisherDisplayNameValue = itemsValue['publisherDisplayName'];
            if (publisherDisplayNameValue) {
              var publisherDisplayNameInstance = publisherDisplayNameValue;
              galleryItemInstance.publisherDisplayName = publisherDisplayNameInstance;
            }
            
            var versionValue = itemsValue['version'];
            if (versionValue) {
              var versionInstance = versionValue;
              galleryItemInstance.version = versionInstance;
            }
            
            var summaryValue = itemsValue['summary'];
            if (summaryValue) {
              var summaryInstance = summaryValue;
              galleryItemInstance.summary = summaryInstance;
            }
            
            var descriptionValue = itemsValue['description'];
            if (descriptionValue) {
              var descriptionInstance = descriptionValue;
              galleryItemInstance.description = descriptionInstance;
            }
            
            var resourceGroupNameValue = itemsValue['resourceGroupName'];
            if (resourceGroupNameValue) {
              var resourceGroupNameInstance = resourceGroupNameValue;
              galleryItemInstance.resourceGroupName = resourceGroupNameInstance;
            }
            
            var definitionTemplatesValue = itemsValue['definitionTemplates'];
            if (definitionTemplatesValue) {
              var definitionTemplatesInstance = { deploymentTemplateFileUrls: {} };
              galleryItemInstance.definitionTemplates = definitionTemplatesInstance;
              
              var uiDefinitionFileUrlValue = definitionTemplatesValue['uiDefinitionFileUrl'];
              if (uiDefinitionFileUrlValue) {
                var uiDefinitionFileUrlInstance = uiDefinitionFileUrlValue;
                definitionTemplatesInstance.uiDefinitionFileUrl = uiDefinitionFileUrlInstance;
              }
              
              var defaultDeploymentTemplateIdValue = definitionTemplatesValue['defaultDeploymentTemplateId'];
              if (defaultDeploymentTemplateIdValue) {
                var defaultDeploymentTemplateIdInstance = defaultDeploymentTemplateIdValue;
                definitionTemplatesInstance.defaultDeploymentTemplateId = defaultDeploymentTemplateIdInstance;
              }
              
              var deploymentTemplateFileUrlsSequenceElement = definitionTemplatesValue['deploymentTemplateFileUrls'];
              if (deploymentTemplateFileUrlsSequenceElement) {
                for (var property in deploymentTemplateFileUrlsSequenceElement) {
                  var deploymentTemplateFileUrlsKey = property;
                  var deploymentTemplateFileUrlsValue = deploymentTemplateFileUrlsSequenceElement[property];
                  definitionTemplatesInstance.deploymentTemplateFileUrls[deploymentTemplateFileUrlsKey] = deploymentTemplateFileUrlsValue;
                }
              }
            }
            
            var categoryIdsArray = itemsValue['categoryIds'];
            if (categoryIdsArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < categoryIdsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var categoryIdsValue = categoryIdsArray[loweredIndex2];
                galleryItemInstance.categoryIds.push(categoryIdsValue);
              }
            }
            
            var screenshotUrlsArray = itemsValue['screenshotUrls'];
            if (screenshotUrlsArray) {
              for (var loweredIndex3 = 0; loweredIndex3 < screenshotUrlsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var screenshotUrlsValue = screenshotUrlsArray[loweredIndex3];
                galleryItemInstance.screenshotUrls.push(screenshotUrlsValue);
              }
            }
            
            var iconFileUrlsSequenceElement = itemsValue['iconFileUrls'];
            if (iconFileUrlsSequenceElement) {
              for (var property2 in iconFileUrlsSequenceElement) {
                var iconFileUrlsKey = property2;
                var iconFileUrlsValue = iconFileUrlsSequenceElement[property2];
                galleryItemInstance.iconFileUrls[iconFileUrlsKey] = iconFileUrlsValue;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ItemOperations;
})();
