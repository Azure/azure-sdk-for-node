/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a ClientCertAuthentication.
 * @extends models['HttpAuthentication']
 */
class ClientCertAuthentication extends models['HttpAuthentication'] {
  /**
   * Create a ClientCertAuthentication.
   * @member {string} [password] Gets or sets the certificate password, return
   * value will always be empty.
   * @member {string} [pfx] Gets or sets the pfx certificate. Accepts
   * certification in base64 encoding, return value will always be empty.
   * @member {string} [certificateThumbprint] Gets or sets the certificate
   * thumbprint.
   * @member {date} [certificateExpirationDate] Gets or sets the certificate
   * expiration date.
   * @member {string} [certificateSubjectName] Gets or sets the certificate
   * subject name.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ClientCertAuthentication
   *
   * @returns {object} metadata of ClientCertAuthentication
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClientCertificate',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'HttpAuthentication',
        className: 'ClientCertAuthentication',
        modelProperties: {
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          password: {
            required: false,
            serializedName: 'password',
            type: {
              name: 'String'
            }
          },
          pfx: {
            required: false,
            serializedName: 'pfx',
            type: {
              name: 'String'
            }
          },
          certificateThumbprint: {
            required: false,
            serializedName: 'certificateThumbprint',
            type: {
              name: 'String'
            }
          },
          certificateExpirationDate: {
            required: false,
            serializedName: 'certificateExpirationDate',
            type: {
              name: 'DateTime'
            }
          },
          certificateSubjectName: {
            required: false,
            serializedName: 'certificateSubjectName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ClientCertAuthentication;
