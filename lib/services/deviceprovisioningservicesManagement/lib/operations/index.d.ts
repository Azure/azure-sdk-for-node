/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the IotDpsClient.
 */
export interface Operations {


    /**
     * Lists all of the available Microsoft.Devices REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Microsoft.Devices REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Microsoft.Devices REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Microsoft.Devices REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * DpsCertificate
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the IotDpsClient.
 */
export interface DpsCertificate {


    /**
     * Get the certificate from the provisioning service.
     *
     * @param {string} certificateName Name of the certificate to retrieve.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of the provisioning service the
     * certificate is associated with.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the certificate.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateResponse>>;

    /**
     * Get the certificate from the provisioning service.
     *
     * @param {string} certificateName Name of the certificate to retrieve.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of the provisioning service the
     * certificate is associated with.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the certificate.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateResponse>;
    get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, callback: ServiceCallback<models.CertificateResponse>): void;
    get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateResponse>): void;


    /**
     * @summary Upload the certificate to the provisioning service.
     *
     * Add new certificate or update an existing certificate.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName The name of the provisioning
     * service.
     *
     * @param {string} certificateName The name of the certificate create or
     * update.
     *
     * @param {object} certificateDescription The certificate body.
     *
     * @param {string} [certificateDescription.certificate] Base-64 representation
     * of the X509 leaf certificate .cer file or just .pem file content.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the certificate. This is required
     * to update an existing certificate, and ignored while creating a brand new
     * certificate.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: models.CertificateBodyDescription, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateResponse>>;

    /**
     * @summary Upload the certificate to the provisioning service.
     *
     * Add new certificate or update an existing certificate.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName The name of the provisioning
     * service.
     *
     * @param {string} certificateName The name of the certificate create or
     * update.
     *
     * @param {object} certificateDescription The certificate body.
     *
     * @param {string} [certificateDescription.certificate] Base-64 representation
     * of the X509 leaf certificate .cer file or just .pem file content.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.ifMatch] ETag of the certificate. This is required
     * to update an existing certificate, and ignored while creating a brand new
     * certificate.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: models.CertificateBodyDescription, options?: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateResponse>;
    createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: models.CertificateBodyDescription, callback: ServiceCallback<models.CertificateResponse>): void;
    createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: models.CertificateBodyDescription, options: { ifMatch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateResponse>): void;


    /**
     * @summary Delete the Provisioning Service Certificate.
     *
     * Deletes the specified certificate associated with the Provisioning Service
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} ifMatch ETag of the certificate
     *
     * @param {string} provisioningServiceName The name of the provisioning
     * service.
     *
     * @param {string} certificateName This is a mandatory field, and is the
     * logical name of the certificate that the provisioning service will access
     * by.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.certificatename] This is optional, and it is the
     * Common Name of the certificate.
     *
     * @param {buffer} [options.certificaterawBytes] Raw data within the
     * certificate.
     *
     * @param {boolean} [options.certificateisVerified] Indicates if certificate
     * has been verified by owner of the private key.
     *
     * @param {string} [options.certificatepurpose] A description that mentions the
     * purpose of the certificate. Possible values include: 'clientAuthentication',
     * 'serverAuthentication'
     *
     * @param {date} [options.certificatecreated] Time the certificate is created.
     *
     * @param {date} [options.certificatelastUpdated] Time the certificate is last
     * updated.
     *
     * @param {boolean} [options.certificatehasPrivateKey] Indicates if the
     * certificate contains a private key.
     *
     * @param {string} [options.certificatenonce] Random number generated to
     * indicate Proof of Possession.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options?: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete the Provisioning Service Certificate.
     *
     * Deletes the specified certificate associated with the Provisioning Service
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} ifMatch ETag of the certificate
     *
     * @param {string} provisioningServiceName The name of the provisioning
     * service.
     *
     * @param {string} certificateName This is a mandatory field, and is the
     * logical name of the certificate that the provisioning service will access
     * by.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.certificatename] This is optional, and it is the
     * Common Name of the certificate.
     *
     * @param {buffer} [options.certificaterawBytes] Raw data within the
     * certificate.
     *
     * @param {boolean} [options.certificateisVerified] Indicates if certificate
     * has been verified by owner of the private key.
     *
     * @param {string} [options.certificatepurpose] A description that mentions the
     * purpose of the certificate. Possible values include: 'clientAuthentication',
     * 'serverAuthentication'
     *
     * @param {date} [options.certificatecreated] Time the certificate is created.
     *
     * @param {date} [options.certificatelastUpdated] Time the certificate is last
     * updated.
     *
     * @param {boolean} [options.certificatehasPrivateKey] Indicates if the
     * certificate contains a private key.
     *
     * @param {string} [options.certificatenonce] Random number generated to
     * indicate Proof of Possession.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options?: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get all the certificates tied to the provisioning service.
     *
     * @param {string} resourceGroupName Name of resource group.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * retrieve certificates for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateListDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, provisioningServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateListDescription>>;

    /**
     * Get all the certificates tied to the provisioning service.
     *
     * @param {string} resourceGroupName Name of resource group.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * retrieve certificates for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateListDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateListDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateListDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, provisioningServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateListDescription>;
    list(resourceGroupName: string, provisioningServiceName: string, callback: ServiceCallback<models.CertificateListDescription>): void;
    list(resourceGroupName: string, provisioningServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListDescription>): void;


    /**
     * Generate verification code for Proof of Possession.
     *
     * @param {string} certificateName The mandatory logical name of the
     * certificate, that the provisioning service uses to access.
     *
     * @param {string} ifMatch ETag of the certificate. This is required to update
     * an existing certificate, and ignored while creating a brand new certificate.
     *
     * @param {string} resourceGroupName name of resource group.
     *
     * @param {string} provisioningServiceName Name of provisioning service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.certificatename] Common Name for the certificate.
     *
     * @param {buffer} [options.certificaterawBytes] Raw data of certificate.
     *
     * @param {boolean} [options.certificateisVerified] Indicates if the
     * certificate has been verified by owner of the private key.
     *
     * @param {string} [options.certificatepurpose] Description mentioning the
     * purpose of the certificate. Possible values include: 'clientAuthentication',
     * 'serverAuthentication'
     *
     * @param {date} [options.certificatecreated] Certificate creation time.
     *
     * @param {date} [options.certificatelastUpdated] Certificate last updated
     * time.
     *
     * @param {boolean} [options.certificatehasPrivateKey] Indicates if the
     * certificate contains private key.
     *
     * @param {string} [options.certificatenonce] Random number generated to
     * indicate Proof of Possession.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VerificationCodeResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateVerificationCodeWithHttpOperationResponse(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, options?: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VerificationCodeResponse>>;

    /**
     * Generate verification code for Proof of Possession.
     *
     * @param {string} certificateName The mandatory logical name of the
     * certificate, that the provisioning service uses to access.
     *
     * @param {string} ifMatch ETag of the certificate. This is required to update
     * an existing certificate, and ignored while creating a brand new certificate.
     *
     * @param {string} resourceGroupName name of resource group.
     *
     * @param {string} provisioningServiceName Name of provisioning service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.certificatename] Common Name for the certificate.
     *
     * @param {buffer} [options.certificaterawBytes] Raw data of certificate.
     *
     * @param {boolean} [options.certificateisVerified] Indicates if the
     * certificate has been verified by owner of the private key.
     *
     * @param {string} [options.certificatepurpose] Description mentioning the
     * purpose of the certificate. Possible values include: 'clientAuthentication',
     * 'serverAuthentication'
     *
     * @param {date} [options.certificatecreated] Certificate creation time.
     *
     * @param {date} [options.certificatelastUpdated] Certificate last updated
     * time.
     *
     * @param {boolean} [options.certificatehasPrivateKey] Indicates if the
     * certificate contains private key.
     *
     * @param {string} [options.certificatenonce] Random number generated to
     * indicate Proof of Possession.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VerificationCodeResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VerificationCodeResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VerificationCodeResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, options?: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.VerificationCodeResponse>;
    generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, callback: ServiceCallback<models.VerificationCodeResponse>): void;
    generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, options: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VerificationCodeResponse>): void;


    /**
     * @summary Verify certificate's private key possession.
     *
     * Verifies the certificate's private key possession by providing the leaf cert
     * issued by the verifying pre uploaded certificate.
     *
     * @param {string} certificateName The mandatory logical name of the
     * certificate, that the provisioning service uses to access.
     *
     * @param {string} ifMatch ETag of the certificate.
     *
     * @param {object} request The name of the certificate
     *
     * @param {string} [request.certificate] base-64 representation of X509
     * certificate .cer file or just .pem file content.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} provisioningServiceName Provisioning service name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.certificatename] Common Name for the certificate.
     *
     * @param {buffer} [options.certificaterawBytes] Raw data of certificate.
     *
     * @param {boolean} [options.certificateisVerified] Indicates if the
     * certificate has been verified by owner of the private key.
     *
     * @param {string} [options.certificatepurpose] Describe the purpose of the
     * certificate. Possible values include: 'clientAuthentication',
     * 'serverAuthentication'
     *
     * @param {date} [options.certificatecreated] Certificate creation time.
     *
     * @param {date} [options.certificatelastUpdated] Certificate last updated
     * time.
     *
     * @param {boolean} [options.certificatehasPrivateKey] Indicates if the
     * certificate contains private key.
     *
     * @param {string} [options.certificatenonce] Random number generated to
     * indicate Proof of Possession.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    verifyCertificateWithHttpOperationResponse(certificateName: string, ifMatch: string, request: models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, options?: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateResponse>>;

    /**
     * @summary Verify certificate's private key possession.
     *
     * Verifies the certificate's private key possession by providing the leaf cert
     * issued by the verifying pre uploaded certificate.
     *
     * @param {string} certificateName The mandatory logical name of the
     * certificate, that the provisioning service uses to access.
     *
     * @param {string} ifMatch ETag of the certificate.
     *
     * @param {object} request The name of the certificate
     *
     * @param {string} [request.certificate] base-64 representation of X509
     * certificate .cer file or just .pem file content.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {string} provisioningServiceName Provisioning service name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.certificatename] Common Name for the certificate.
     *
     * @param {buffer} [options.certificaterawBytes] Raw data of certificate.
     *
     * @param {boolean} [options.certificateisVerified] Indicates if the
     * certificate has been verified by owner of the private key.
     *
     * @param {string} [options.certificatepurpose] Describe the purpose of the
     * certificate. Possible values include: 'clientAuthentication',
     * 'serverAuthentication'
     *
     * @param {date} [options.certificatecreated] Certificate creation time.
     *
     * @param {date} [options.certificatelastUpdated] Certificate last updated
     * time.
     *
     * @param {boolean} [options.certificatehasPrivateKey] Indicates if the
     * certificate contains private key.
     *
     * @param {string} [options.certificatenonce] Random number generated to
     * indicate Proof of Possession.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    verifyCertificate(certificateName: string, ifMatch: string, request: models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, options?: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateResponse>;
    verifyCertificate(certificateName: string, ifMatch: string, request: models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, callback: ServiceCallback<models.CertificateResponse>): void;
    verifyCertificate(certificateName: string, ifMatch: string, request: models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, options: { certificatename? : string, certificaterawBytes? : Buffer, certificateisVerified? : boolean, certificatepurpose? : string, certificatecreated? : Date, certificatelastUpdated? : Date, certificatehasPrivateKey? : boolean, certificatenonce? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateResponse>): void;
}

/**
 * @class
 * IotDpsResource
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the IotDpsClient.
 */
export interface IotDpsResource {


    /**
     * @summary Get the non-security related metadata of the provisioning service.
     *
     * Get the metadata of the provisioning service without SAS keys.
     *
     * @param {string} provisioningServiceName Name of the provisioning service to
     * retrieve.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescription>>;

    /**
     * @summary Get the non-security related metadata of the provisioning service.
     *
     * Get the metadata of the provisioning service without SAS keys.
     *
     * @param {string} provisioningServiceName Name of the provisioning service to
     * retrieve.
     *
     * @param {string} resourceGroupName Resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescription>;
    get(provisioningServiceName: string, resourceGroupName: string, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;
    get(provisioningServiceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;


    /**
     * @summary Create or update the metadata of the provisioning service.
     *
     * Create or update the metadata of the provisioning service. The usual pattern
     * to modify a property is to retrieve the provisioning service metadata and
     * security metadata, and then combine them with the modified values in a new
     * body to update the provisioning service.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} iotDpsDescription Description of the provisioning service to
     * create or update.
     *
     * @param {string} [iotDpsDescription.etag] The Etag field is *not* required.
     * If it is provided in the response body, it must also be provided as a header
     * per the normal ETag convention.
     *
     * @param {object} iotDpsDescription.properties Service specific properties for
     * a provisioning service
     *
     * @param {string} [iotDpsDescription.properties.state] Current state of the
     * provisioning service. Possible values include: 'Activating', 'Active',
     * 'Deleting', 'Deleted', 'ActivationFailed', 'DeletionFailed',
     * 'Transitioning', 'Suspending', 'Suspended', 'Resuming', 'FailingOver',
     * 'FailoverFailed'
     *
     * @param {string} [iotDpsDescription.properties.provisioningState] The ARM
     * provisioning state of the provisioning service.
     *
     * @param {array} [iotDpsDescription.properties.iotHubs] List of IoT hubs
     * associated with this provisioning service.
     *
     * @param {string} [iotDpsDescription.properties.allocationPolicy] Allocation
     * policy to be used by this provisioning service. Possible values include:
     * 'Hashed', 'GeoLatency', 'Static'
     *
     * @param {array} [iotDpsDescription.properties.authorizationPolicies] List of
     * authorization keys for a provisioning service.
     *
     * @param {object} iotDpsDescription.sku Sku info for a provisioning Service.
     *
     * @param {string} [iotDpsDescription.sku.name] Sku name. Possible values
     * include: 'S1'
     *
     * @param {number} [iotDpsDescription.sku.capacity] The number of units to
     * provision
     *
     * @param {string} iotDpsDescription.location The resource location.
     *
     * @param {object} [iotDpsDescription.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescription>>;

    /**
     * @summary Create or update the metadata of the provisioning service.
     *
     * Create or update the metadata of the provisioning service. The usual pattern
     * to modify a property is to retrieve the provisioning service metadata and
     * security metadata, and then combine them with the modified values in a new
     * body to update the provisioning service.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} iotDpsDescription Description of the provisioning service to
     * create or update.
     *
     * @param {string} [iotDpsDescription.etag] The Etag field is *not* required.
     * If it is provided in the response body, it must also be provided as a header
     * per the normal ETag convention.
     *
     * @param {object} iotDpsDescription.properties Service specific properties for
     * a provisioning service
     *
     * @param {string} [iotDpsDescription.properties.state] Current state of the
     * provisioning service. Possible values include: 'Activating', 'Active',
     * 'Deleting', 'Deleted', 'ActivationFailed', 'DeletionFailed',
     * 'Transitioning', 'Suspending', 'Suspended', 'Resuming', 'FailingOver',
     * 'FailoverFailed'
     *
     * @param {string} [iotDpsDescription.properties.provisioningState] The ARM
     * provisioning state of the provisioning service.
     *
     * @param {array} [iotDpsDescription.properties.iotHubs] List of IoT hubs
     * associated with this provisioning service.
     *
     * @param {string} [iotDpsDescription.properties.allocationPolicy] Allocation
     * policy to be used by this provisioning service. Possible values include:
     * 'Hashed', 'GeoLatency', 'Static'
     *
     * @param {array} [iotDpsDescription.properties.authorizationPolicies] List of
     * authorization keys for a provisioning service.
     *
     * @param {object} iotDpsDescription.sku Sku info for a provisioning Service.
     *
     * @param {string} [iotDpsDescription.sku.name] Sku name. Possible values
     * include: 'S1'
     *
     * @param {number} [iotDpsDescription.sku.capacity] The number of units to
     * provision
     *
     * @param {string} iotDpsDescription.location The resource location.
     *
     * @param {object} [iotDpsDescription.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescription>;
    createOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;
    createOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;


    /**
     * @summary Update an existing provisioning service's tags.
     *
     * Update an existing provisioning service's tags. to update other fields use
     * the CreateOrUpdate method
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} provisioningServiceTags Updated tag information to set into
     * the provisioning service instance.
     *
     * @param {object} [provisioningServiceTags.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescription>>;

    /**
     * @summary Update an existing provisioning service's tags.
     *
     * Update an existing provisioning service's tags. to update other fields use
     * the CreateOrUpdate method
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} provisioningServiceTags Updated tag information to set into
     * the provisioning service instance.
     *
     * @param {object} [provisioningServiceTags.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescription>;
    update(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;
    update(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;


    /**
     * @summary Delete the Provisioning Service
     *
     * Deletes the Provisioning Service.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * delete.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete the Provisioning Service
     *
     * Deletes the Provisioning Service.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * delete.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(provisioningServiceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(provisioningServiceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get all the provisioning services in a subscription.
     *
     * List all the provisioning services for a given subscription id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescriptionListResult>>;

    /**
     * @summary Get all the provisioning services in a subscription.
     *
     * List all the provisioning services for a given subscription id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescriptionListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescriptionListResult>;
    listBySubscription(callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;


    /**
     * Get a list of all provisioning services in the given resource group.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescriptionListResult>>;

    /**
     * Get a list of all provisioning services in the given resource group.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescriptionListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescriptionListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;


    /**
     * Gets the status of a long running operation, such as create, update or
     * delete a provisioning service.
     *
     * @param {string} operationId Operation id corresponding to long running
     * operation. Use this to poll for the status.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service that
     * the operation is running on.
     *
     * @param {string} asyncinfo Async header used to poll on the status of the
     * operation, obtained while creating the long running operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AsyncOperationResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getOperationResultWithHttpOperationResponse(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AsyncOperationResult>>;

    /**
     * Gets the status of a long running operation, such as create, update or
     * delete a provisioning service.
     *
     * @param {string} operationId Operation id corresponding to long running
     * operation. Use this to poll for the status.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service that
     * the operation is running on.
     *
     * @param {string} asyncinfo Async header used to poll on the status of the
     * operation, obtained while creating the long running operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AsyncOperationResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AsyncOperationResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AsyncOperationResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AsyncOperationResult>;
    getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, callback: ServiceCallback<models.AsyncOperationResult>): void;
    getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AsyncOperationResult>): void;


    /**
     * @summary Get the list of valid SKUs for a provisioning service.
     *
     * Gets the list of valid SKUs and tiers for a provisioning service.
     *
     * @param {string} provisioningServiceName Name of provisioning service.
     *
     * @param {string} resourceGroupName Name of resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IotDpsSkuDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listValidSkusWithHttpOperationResponse(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IotDpsSkuDefinitionListResult>>;

    /**
     * @summary Get the list of valid SKUs for a provisioning service.
     *
     * Gets the list of valid SKUs and tiers for a provisioning service.
     *
     * @param {string} provisioningServiceName Name of provisioning service.
     *
     * @param {string} resourceGroupName Name of resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IotDpsSkuDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IotDpsSkuDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IotDpsSkuDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listValidSkus(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IotDpsSkuDefinitionListResult>;
    listValidSkus(provisioningServiceName: string, resourceGroupName: string, callback: ServiceCallback<models.IotDpsSkuDefinitionListResult>): void;
    listValidSkus(provisioningServiceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IotDpsSkuDefinitionListResult>): void;


    /**
     * @summary Check if a provisioning service name is available.
     *
     * Check if a provisioning service name is available. This will validate if the
     * name is syntactically valid and if the name is usable
     *
     * @param {object} argumentsParameter Set the name parameter in the
     * OperationInputs structure to the name of the provisioning service to check.
     *
     * @param {string} argumentsParameter.name The name of the Provisioning Service
     * to check.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NameAvailabilityInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkProvisioningServiceNameAvailabilityWithHttpOperationResponse(argumentsParameter: models.OperationInputs, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NameAvailabilityInfo>>;

    /**
     * @summary Check if a provisioning service name is available.
     *
     * Check if a provisioning service name is available. This will validate if the
     * name is syntactically valid and if the name is usable
     *
     * @param {object} argumentsParameter Set the name parameter in the
     * OperationInputs structure to the name of the provisioning service to check.
     *
     * @param {string} argumentsParameter.name The name of the Provisioning Service
     * to check.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NameAvailabilityInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NameAvailabilityInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NameAvailabilityInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkProvisioningServiceNameAvailability(argumentsParameter: models.OperationInputs, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NameAvailabilityInfo>;
    checkProvisioningServiceNameAvailability(argumentsParameter: models.OperationInputs, callback: ServiceCallback<models.NameAvailabilityInfo>): void;
    checkProvisioningServiceNameAvailability(argumentsParameter: models.OperationInputs, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameAvailabilityInfo>): void;


    /**
     * @summary Get the security metadata for a provisioning service.
     *
     * List the primary and secondary keys for a provisioning service.
     *
     * @param {string} provisioningServiceName The provisioning service name to get
     * the shared access keys for.
     *
     * @param {string} resourceGroupName resource group name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessSignatureAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessSignatureAuthorizationRuleListResult>>;

    /**
     * @summary Get the security metadata for a provisioning service.
     *
     * List the primary and secondary keys for a provisioning service.
     *
     * @param {string} provisioningServiceName The provisioning service name to get
     * the shared access keys for.
     *
     * @param {string} resourceGroupName resource group name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessSignatureAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessSignatureAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      SharedAccessSignatureAuthorizationRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessSignatureAuthorizationRuleListResult>;
    listKeys(provisioningServiceName: string, resourceGroupName: string, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRuleListResult>): void;
    listKeys(provisioningServiceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRuleListResult>): void;


    /**
     * @summary Get a shared access policy by name from a provisioning service.
     *
     * List primary and secondary keys for a specific key name
     *
     * @param {string} provisioningServiceName Name of the provisioning service.
     *
     * @param {string} keyName Logical key name to get key-values for.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the provisioning service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysForKeyNameWithHttpOperationResponse(provisioningServiceName: string, keyName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>>;

    /**
     * @summary Get a shared access policy by name from a provisioning service.
     *
     * List primary and secondary keys for a specific key name
     *
     * @param {string} provisioningServiceName Name of the provisioning service.
     *
     * @param {string} keyName Logical key name to get key-values for.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the provisioning service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessSignatureAuthorizationRuleAccessRightsDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessSignatureAuthorizationRuleAccessRightsDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      SharedAccessSignatureAuthorizationRuleAccessRightsDescription}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>;
    listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>): void;
    listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>): void;


    /**
     * @summary Create or update the metadata of the provisioning service.
     *
     * Create or update the metadata of the provisioning service. The usual pattern
     * to modify a property is to retrieve the provisioning service metadata and
     * security metadata, and then combine them with the modified values in a new
     * body to update the provisioning service.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} iotDpsDescription Description of the provisioning service to
     * create or update.
     *
     * @param {string} [iotDpsDescription.etag] The Etag field is *not* required.
     * If it is provided in the response body, it must also be provided as a header
     * per the normal ETag convention.
     *
     * @param {object} iotDpsDescription.properties Service specific properties for
     * a provisioning service
     *
     * @param {string} [iotDpsDescription.properties.state] Current state of the
     * provisioning service. Possible values include: 'Activating', 'Active',
     * 'Deleting', 'Deleted', 'ActivationFailed', 'DeletionFailed',
     * 'Transitioning', 'Suspending', 'Suspended', 'Resuming', 'FailingOver',
     * 'FailoverFailed'
     *
     * @param {string} [iotDpsDescription.properties.provisioningState] The ARM
     * provisioning state of the provisioning service.
     *
     * @param {array} [iotDpsDescription.properties.iotHubs] List of IoT hubs
     * associated with this provisioning service.
     *
     * @param {string} [iotDpsDescription.properties.allocationPolicy] Allocation
     * policy to be used by this provisioning service. Possible values include:
     * 'Hashed', 'GeoLatency', 'Static'
     *
     * @param {array} [iotDpsDescription.properties.authorizationPolicies] List of
     * authorization keys for a provisioning service.
     *
     * @param {object} iotDpsDescription.sku Sku info for a provisioning Service.
     *
     * @param {string} [iotDpsDescription.sku.name] Sku name. Possible values
     * include: 'S1'
     *
     * @param {number} [iotDpsDescription.sku.capacity] The number of units to
     * provision
     *
     * @param {string} iotDpsDescription.location The resource location.
     *
     * @param {object} [iotDpsDescription.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescription>>;

    /**
     * @summary Create or update the metadata of the provisioning service.
     *
     * Create or update the metadata of the provisioning service. The usual pattern
     * to modify a property is to retrieve the provisioning service metadata and
     * security metadata, and then combine them with the modified values in a new
     * body to update the provisioning service.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} iotDpsDescription Description of the provisioning service to
     * create or update.
     *
     * @param {string} [iotDpsDescription.etag] The Etag field is *not* required.
     * If it is provided in the response body, it must also be provided as a header
     * per the normal ETag convention.
     *
     * @param {object} iotDpsDescription.properties Service specific properties for
     * a provisioning service
     *
     * @param {string} [iotDpsDescription.properties.state] Current state of the
     * provisioning service. Possible values include: 'Activating', 'Active',
     * 'Deleting', 'Deleted', 'ActivationFailed', 'DeletionFailed',
     * 'Transitioning', 'Suspending', 'Suspended', 'Resuming', 'FailingOver',
     * 'FailoverFailed'
     *
     * @param {string} [iotDpsDescription.properties.provisioningState] The ARM
     * provisioning state of the provisioning service.
     *
     * @param {array} [iotDpsDescription.properties.iotHubs] List of IoT hubs
     * associated with this provisioning service.
     *
     * @param {string} [iotDpsDescription.properties.allocationPolicy] Allocation
     * policy to be used by this provisioning service. Possible values include:
     * 'Hashed', 'GeoLatency', 'Static'
     *
     * @param {array} [iotDpsDescription.properties.authorizationPolicies] List of
     * authorization keys for a provisioning service.
     *
     * @param {object} iotDpsDescription.sku Sku info for a provisioning Service.
     *
     * @param {string} [iotDpsDescription.sku.name] Sku name. Possible values
     * include: 'S1'
     *
     * @param {number} [iotDpsDescription.sku.capacity] The number of units to
     * provision
     *
     * @param {string} iotDpsDescription.location The resource location.
     *
     * @param {object} [iotDpsDescription.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescription>;
    beginCreateOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;
    beginCreateOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: models.ProvisioningServiceDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;


    /**
     * @summary Update an existing provisioning service's tags.
     *
     * Update an existing provisioning service's tags. to update other fields use
     * the CreateOrUpdate method
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} provisioningServiceTags Updated tag information to set into
     * the provisioning service instance.
     *
     * @param {object} [provisioningServiceTags.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescription>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescription>>;

    /**
     * @summary Update an existing provisioning service's tags.
     *
     * Update an existing provisioning service's tags. to update other fields use
     * the CreateOrUpdate method
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * create or update.
     *
     * @param {object} provisioningServiceTags Updated tag information to set into
     * the provisioning service instance.
     *
     * @param {object} [provisioningServiceTags.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescription} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescription} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescription} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescription>;
    beginUpdate(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;
    beginUpdate(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: models.TagsResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescription>): void;


    /**
     * @summary Delete the Provisioning Service
     *
     * Deletes the Provisioning Service.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * delete.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete the Provisioning Service
     *
     * Deletes the Provisioning Service.
     *
     * @param {string} provisioningServiceName Name of provisioning service to
     * delete.
     *
     * @param {string} resourceGroupName Resource group identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(provisioningServiceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(provisioningServiceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(provisioningServiceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get all the provisioning services in a subscription.
     *
     * List all the provisioning services for a given subscription id.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescriptionListResult>>;

    /**
     * @summary Get all the provisioning services in a subscription.
     *
     * List all the provisioning services for a given subscription id.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescriptionListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescriptionListResult>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;


    /**
     * Get a list of all provisioning services in the given resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProvisioningServiceDescriptionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProvisioningServiceDescriptionListResult>>;

    /**
     * Get a list of all provisioning services in the given resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProvisioningServiceDescriptionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProvisioningServiceDescriptionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProvisioningServiceDescriptionListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProvisioningServiceDescriptionListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningServiceDescriptionListResult>): void;


    /**
     * @summary Get the list of valid SKUs for a provisioning service.
     *
     * Gets the list of valid SKUs and tiers for a provisioning service.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IotDpsSkuDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listValidSkusNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IotDpsSkuDefinitionListResult>>;

    /**
     * @summary Get the list of valid SKUs for a provisioning service.
     *
     * Gets the list of valid SKUs and tiers for a provisioning service.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IotDpsSkuDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IotDpsSkuDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IotDpsSkuDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listValidSkusNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IotDpsSkuDefinitionListResult>;
    listValidSkusNext(nextPageLink: string, callback: ServiceCallback<models.IotDpsSkuDefinitionListResult>): void;
    listValidSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IotDpsSkuDefinitionListResult>): void;


    /**
     * @summary Get the security metadata for a provisioning service.
     *
     * List the primary and secondary keys for a provisioning service.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessSignatureAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessSignatureAuthorizationRuleListResult>>;

    /**
     * @summary Get the security metadata for a provisioning service.
     *
     * List the primary and secondary keys for a provisioning service.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessSignatureAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessSignatureAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      SharedAccessSignatureAuthorizationRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeysNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessSignatureAuthorizationRuleListResult>;
    listKeysNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRuleListResult>): void;
    listKeysNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRuleListResult>): void;
}
