/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * File Server mounting configuration.
 *
 */
class FileServerReference {
  /**
   * Create a FileServerReference.
   * @property {object} fileServer File server. Resource ID of the existing
   * File Server to be mounted.
   * @property {string} [fileServer.id] The ID of the resource
   * @property {string} [sourceDirectory] Source directory. File Server
   * directory that needs to be mounted. If this property is not specified, the
   * entire File Server will be mounted.
   * @property {string} relativeMountPath Relative mount path. The relative
   * path on the compute node where the File Server will be mounted. Note that
   * all cluster level file servers will be mounted under
   * $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be
   * mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
   * @property {string} [mountOptions] Mount options. Mount options to be
   * passed to mount command.
   */
  constructor() {
  }

  /**
   * Defines the metadata of FileServerReference
   *
   * @returns {object} metadata of FileServerReference
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FileServerReference',
      type: {
        name: 'Composite',
        className: 'FileServerReference',
        modelProperties: {
          fileServer: {
            required: true,
            serializedName: 'fileServer',
            type: {
              name: 'Composite',
              className: 'ResourceId'
            }
          },
          sourceDirectory: {
            required: false,
            serializedName: 'sourceDirectory',
            type: {
              name: 'String'
            }
          },
          relativeMountPath: {
            required: true,
            serializedName: 'relativeMountPath',
            type: {
              name: 'String'
            }
          },
          mountOptions: {
            required: false,
            serializedName: 'mountOptions',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = FileServerReference;
