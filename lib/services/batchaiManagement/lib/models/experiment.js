/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Experiment information.
 *
 * @extends models['ProxyResource']
 */
class Experiment extends models['ProxyResource'] {
  /**
   * Create a Experiment.
   * @property {date} [creationTime] Creation time. Time when the Experiment
   * was created.
   * @property {string} [provisioningState] Provisioning state. The provisioned
   * state of the experiment. Possible values include: 'creating', 'succeeded',
   * 'failed', 'deleting'
   * @property {date} [provisioningStateTransitionTime] Provisioning state
   * transition time. The time at which the experiment entered its current
   * provisioning state.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Experiment
   *
   * @returns {object} metadata of Experiment
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Experiment',
      type: {
        name: 'Composite',
        className: 'Experiment',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          creationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationTime',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          provisioningStateTransitionTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = Experiment;
