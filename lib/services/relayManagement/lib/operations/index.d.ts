/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RelayManagementClient.
 */
export interface Operations {


    /**
     * Lists all available Relay REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all available Relay REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all available Relay REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all available Relay REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RelayManagementClient.
 */
export interface Namespaces {


    /**
     * Check the specified namespace name availability.
     *
     * @param {object} parameters Parameters to check availability of the specified
     * namespace name.
     *
     * @param {string} parameters.name The namespace name to check for
     * availability. The namespace name can contain only letters, numbers, and
     * hyphens. The namespace must start with a letter, and it must end with a
     * letter or number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckNameAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityMethodWithHttpOperationResponse(parameters: models.CheckNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckNameAvailabilityResult>>;

    /**
     * Check the specified namespace name availability.
     *
     * @param {object} parameters Parameters to check availability of the specified
     * namespace name.
     *
     * @param {string} parameters.name The namespace name to check for
     * availability. The namespace name can contain only letters, numbers, and
     * hyphens. The namespace must start with a letter, and it must end with a
     * letter or number.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckNameAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckNameAvailabilityResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckNameAvailabilityResult>;
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;
    checkNameAvailabilityMethod(parameters: models.CheckNameAvailability, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;


    /**
     * Lists all the available namespaces within the subscription regardless of the
     * resourceGroups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespaceListResult>>;

    /**
     * Lists all the available namespaces within the subscription regardless of the
     * resourceGroups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespaceListResult>;
    list(callback: ServiceCallback<models.RelayNamespaceListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespaceListResult>): void;


    /**
     * Lists all the available namespaces within the ResourceGroup.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespaceListResult>>;

    /**
     * Lists all the available namespaces within the ResourceGroup.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespaceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RelayNamespaceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespaceListResult>): void;


    /**
     * Create Azure Relay namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] SKU of the namespace.
     *
     * @param {string} [parameters.sku.tier] The tier of this SKU. Possible values
     * include: 'Standard'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespace>>;

    /**
     * Create Azure Relay namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] SKU of the namespace.
     *
     * @param {string} [parameters.sku.tier] The tier of this SKU. Possible values
     * include: 'Standard'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespace>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, callback: ServiceCallback<models.RelayNamespace>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespace>): void;


    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the description for the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespace>>;

    /**
     * Returns the description for the specified namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespace>;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.RelayNamespace>): void;
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespace>): void;


    /**
     * Creates or updates a namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters for updating a namespace resource.
     *
     * @param {object} [parameters.sku] SKU of the namespace.
     *
     * @param {string} [parameters.sku.tier] The tier of this SKU. Possible values
     * include: 'Standard'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.RelayUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespace>>;

    /**
     * Creates or updates a namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters for updating a namespace resource.
     *
     * @param {object} [parameters.sku] SKU of the namespace.
     *
     * @param {string} [parameters.sku.tier] The tier of this SKU. Possible values
     * include: 'Standard'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, namespaceName: string, parameters: models.RelayUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespace>;
    update(resourceGroupName: string, namespaceName: string, parameters: models.RelayUpdateParameters, callback: ServiceCallback<models.RelayNamespace>): void;
    update(resourceGroupName: string, namespaceName: string, parameters: models.RelayUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespace>): void;


    /**
     * Authorization rules for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRuleListResult>>;

    /**
     * Authorization rules for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;


    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The authorization rule parameters.
     *
     * @param {array} [parameters.rights] The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRule>>;

    /**
     * Creates or updates an authorization rule for a namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The authorization rule parameters.
     *
     * @param {array} [parameters.rights] The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRule>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, callback: ServiceCallback<models.AuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRule>): void;


    /**
     * Deletes a namespace authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a namespace authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Authorization rule for a namespace by name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRule>>;

    /**
     * Authorization rule for a namespace by name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRule>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.AuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRule>): void;


    /**
     * Primary and secondary connection strings to the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Primary and secondary connection strings to the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.AccessKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Regenerates the primary or secondary connection strings to the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate authorization
     * rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional. If the key value is provided,
     * this is set to key type, or autogenerated key value set for key type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Regenerates the primary or secondary connection strings to the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate authorization
     * rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional. If the key value is provided,
     * this is set to key type, or autogenerated key value set for key type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, callback: ServiceCallback<models.AccessKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Create Azure Relay namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] SKU of the namespace.
     *
     * @param {string} [parameters.sku.tier] The tier of this SKU. Possible values
     * include: 'Standard'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespace>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespace>>;

    /**
     * Create Azure Relay namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} parameters Parameters supplied to create a namespace
     * resource.
     *
     * @param {object} [parameters.sku] SKU of the namespace.
     *
     * @param {string} [parameters.sku.tier] The tier of this SKU. Possible values
     * include: 'Standard'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespace} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespace} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespace} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespace>;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, callback: ServiceCallback<models.RelayNamespace>): void;
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.RelayNamespace, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespace>): void;


    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * resources under the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all the available namespaces within the subscription regardless of the
     * resourceGroups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespaceListResult>>;

    /**
     * Lists all the available namespaces within the subscription regardless of the
     * resourceGroups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespaceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RelayNamespaceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespaceListResult>): void;


    /**
     * Lists all the available namespaces within the ResourceGroup.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayNamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayNamespaceListResult>>;

    /**
     * Lists all the available namespaces within the ResourceGroup.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayNamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayNamespaceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayNamespaceListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RelayNamespaceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayNamespaceListResult>): void;


    /**
     * Authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRuleListResult>>;

    /**
     * Authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
}

/**
 * @class
 * HybridConnections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RelayManagementClient.
 */
export interface HybridConnections {


    /**
     * Lists the hybrid connection within the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionListResult>>;

    /**
     * Lists the hybrid connection within the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionListResult>;
    listByNamespace(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.HybridConnectionListResult>): void;
    listByNamespace(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionListResult>): void;


    /**
     * Creates or updates a service hybrid connection. This operation is
     * idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} parameters Parameters supplied to create a hybrid
     * connection.
     *
     * @param {boolean} [parameters.requiresClientAuthorization] Returns true if
     * client authorization is needed for this hybrid connection; otherwise, false.
     *
     * @param {string} [parameters.userMetadata] The usermetadata is a placeholder
     * to store user-defined string data for the hybrid connection endpoint. For
     * example, it can be used to store descriptive data, such as a list of teams
     * and their contact information. Also, user-defined configuration settings can
     * be stored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, parameters: models.HybridConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * Creates or updates a service hybrid connection. This operation is
     * idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} parameters Parameters supplied to create a hybrid
     * connection.
     *
     * @param {boolean} [parameters.requiresClientAuthorization] Returns true if
     * client authorization is needed for this hybrid connection; otherwise, false.
     *
     * @param {string} [parameters.userMetadata] The usermetadata is a placeholder
     * to store user-defined string data for the hybrid connection endpoint. For
     * example, it can be used to store descriptive data, such as a list of teams
     * and their contact information. Also, user-defined configuration settings can
     * be stored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, parameters: models.HybridConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, parameters: models.HybridConnection, callback: ServiceCallback<models.HybridConnection>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, parameters: models.HybridConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * Deletes a hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the description for the specified hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * Returns the description for the specified hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    get(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, callback: ServiceCallback<models.HybridConnection>): void;
    get(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * Authorization rules for a hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRuleListResult>>;

    /**
     * Authorization rules for a hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;


    /**
     * Creates or updates an authorization rule for a hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The authorization rule parameters.
     *
     * @param {array} [parameters.rights] The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRule>>;

    /**
     * Creates or updates an authorization rule for a hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The authorization rule parameters.
     *
     * @param {array} [parameters.rights] The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRule>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, callback: ServiceCallback<models.AuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRule>): void;


    /**
     * Deletes a hybrid connection authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a hybrid connection authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Hybrid connection authorization rule for a hybrid connection by name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRule>>;

    /**
     * Hybrid connection authorization rule for a hybrid connection by name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRule>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, callback: ServiceCallback<models.AuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRule>): void;


    /**
     * Primary and secondary connection strings to the hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Primary and secondary connection strings to the hybrid connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, callback: ServiceCallback<models.AccessKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Regenerates the primary or secondary connection strings to the hybrid
     * connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate authorization
     * rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional. If the key value is provided,
     * this is set to key type, or autogenerated key value set for key type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Regenerates the primary or secondary connection strings to the hybrid
     * connection.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} hybridConnectionName The hybrid connection name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate authorization
     * rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional. If the key value is provided,
     * this is set to key type, or autogenerated key value set for key type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, callback: ServiceCallback<models.AccessKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Lists the hybrid connection within the namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionListResult>>;

    /**
     * Lists the hybrid connection within the namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionListResult>;
    listByNamespaceNext(nextPageLink: string, callback: ServiceCallback<models.HybridConnectionListResult>): void;
    listByNamespaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionListResult>): void;


    /**
     * Authorization rules for a hybrid connection.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRuleListResult>>;

    /**
     * Authorization rules for a hybrid connection.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
}

/**
 * @class
 * WCFRelays
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RelayManagementClient.
 */
export interface WCFRelays {


    /**
     * Lists the WCF relays within the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WcfRelaysListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WcfRelaysListResult>>;

    /**
     * Lists the WCF relays within the namespace.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WcfRelaysListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WcfRelaysListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WcfRelaysListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WcfRelaysListResult>;
    listByNamespace(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.WcfRelaysListResult>): void;
    listByNamespace(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WcfRelaysListResult>): void;


    /**
     * Creates or updates a WCF relay. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} parameters Parameters supplied to create a WCF relay.
     *
     * @param {string} [parameters.relayType] WCF relay type. Possible values
     * include: 'NetTcp', 'Http'
     *
     * @param {boolean} [parameters.requiresClientAuthorization] Returns true if
     * client authorization is needed for this relay; otherwise, false.
     *
     * @param {boolean} [parameters.requiresTransportSecurity] Returns true if
     * transport security is needed for this relay; otherwise, false.
     *
     * @param {string} [parameters.userMetadata] The usermetadata is a placeholder
     * to store user-defined string data for the WCF Relay endpoint. For example,
     * it can be used to store descriptive data, such as list of teams and their
     * contact information. Also, user-defined configuration settings can be
     * stored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WcfRelay>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, parameters: models.WcfRelay, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WcfRelay>>;

    /**
     * Creates or updates a WCF relay. This operation is idempotent.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} parameters Parameters supplied to create a WCF relay.
     *
     * @param {string} [parameters.relayType] WCF relay type. Possible values
     * include: 'NetTcp', 'Http'
     *
     * @param {boolean} [parameters.requiresClientAuthorization] Returns true if
     * client authorization is needed for this relay; otherwise, false.
     *
     * @param {boolean} [parameters.requiresTransportSecurity] Returns true if
     * transport security is needed for this relay; otherwise, false.
     *
     * @param {string} [parameters.userMetadata] The usermetadata is a placeholder
     * to store user-defined string data for the WCF Relay endpoint. For example,
     * it can be used to store descriptive data, such as list of teams and their
     * contact information. Also, user-defined configuration settings can be
     * stored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WcfRelay} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WcfRelay} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WcfRelay} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, relayName: string, parameters: models.WcfRelay, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WcfRelay>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, relayName: string, parameters: models.WcfRelay, callback: ServiceCallback<models.WcfRelay>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, relayName: string, parameters: models.WcfRelay, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WcfRelay>): void;


    /**
     * Deletes a WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, relayName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the description for the specified WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WcfRelay>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WcfRelay>>;

    /**
     * Returns the description for the specified WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WcfRelay} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WcfRelay} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WcfRelay} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WcfRelay>;
    get(resourceGroupName: string, namespaceName: string, relayName: string, callback: ServiceCallback<models.WcfRelay>): void;
    get(resourceGroupName: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WcfRelay>): void;


    /**
     * Authorization rules for a WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRuleListResult>>;

    /**
     * Authorization rules for a WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, relayName: string, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;


    /**
     * Creates or updates an authorization rule for a WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The authorization rule parameters.
     *
     * @param {array} [parameters.rights] The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRule>>;

    /**
     * Creates or updates an authorization rule for a WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters The authorization rule parameters.
     *
     * @param {array} [parameters.rights] The rights associated with the rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRule>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, callback: ServiceCallback<models.AuthorizationRule>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.AuthorizationRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRule>): void;


    /**
     * Deletes a WCF relay authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a WCF relay authorization rule.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get authorizationRule for a WCF relay by name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRule>>;

    /**
     * Get authorizationRule for a WCF relay by name.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRule>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, callback: ServiceCallback<models.AuthorizationRule>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRule>): void;


    /**
     * Primary and secondary connection strings to the WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Primary and secondary connection strings to the WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, callback: ServiceCallback<models.AccessKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Regenerates the primary or secondary connection strings to the WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate authorization
     * rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional. If the key value is provided,
     * this is set to key type, or autogenerated key value set for key type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessKeys>>;

    /**
     * Regenerates the primary or secondary connection strings to the WCF relay.
     *
     * @param {string} resourceGroupName Name of the Resource group within the
     * Azure subscription.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} relayName The relay name.
     *
     * @param {string} authorizationRuleName The authorization rule name.
     *
     * @param {object} parameters Parameters supplied to regenerate authorization
     * rule.
     *
     * @param {string} parameters.keyType The access key to regenerate. Possible
     * values include: 'PrimaryKey', 'SecondaryKey'
     *
     * @param {string} [parameters.key] Optional. If the key value is provided,
     * this is set to key type, or autogenerated key value set for key type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, callback: ServiceCallback<models.AccessKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: models.RegenerateAccessKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessKeys>): void;


    /**
     * Lists the WCF relays within the namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WcfRelaysListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByNamespaceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WcfRelaysListResult>>;

    /**
     * Lists the WCF relays within the namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WcfRelaysListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WcfRelaysListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WcfRelaysListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByNamespaceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WcfRelaysListResult>;
    listByNamespaceNext(nextPageLink: string, callback: ServiceCallback<models.WcfRelaysListResult>): void;
    listByNamespaceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WcfRelaysListResult>): void;


    /**
     * Authorization rules for a WCF relay.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationRuleListResult>>;

    /**
     * Authorization rules for a WCF relay.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationRuleListResult>): void;
}
