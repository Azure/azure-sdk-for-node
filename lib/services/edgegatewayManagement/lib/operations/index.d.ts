/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Operations {


    /**
     * @summary Lists all the operations supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationsList>>;

    /**
     * @summary Lists all the operations supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationsList>;
    list(callback: ServiceCallback<models.OperationsList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationsList>): void;


    /**
     * @summary Lists all the operations supported.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationsList>>;

    /**
     * @summary Lists all the operations supported.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationsList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationsList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationsList>): void;
}

/**
 * @class
 * Devices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Devices {


    /**
     * Retrieves all data box edge/gateway devices in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the resource or Specify $skipToken=<token> to
     * populate the next page in the list.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDeviceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDeviceList>>;

    /**
     * Retrieves all data box edge/gateway devices in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the resource or Specify $skipToken=<token> to
     * populate the next page in the list.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDeviceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDeviceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDeviceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDeviceList>;
    listBySubscription(callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;
    listBySubscription(options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;


    /**
     * Retrieves all data box edge/gateway devices in a resource group.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the resource or Specify $skipToken=<token> to
     * populate the next page in the list.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDeviceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDeviceList>>;

    /**
     * Retrieves all data box edge/gateway devices in a resource group.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the resource or Specify $skipToken=<token> to
     * populate the next page in the list.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDeviceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDeviceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDeviceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDeviceList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;
    listByResourceGroup(resourceGroupName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;


    /**
     * Returns the properties of the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDevice>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDevice>>;

    /**
     * Returns the properties of the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDevice} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDevice} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDevice} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDevice>;
    get(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;
    get(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;


    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} dataBoxEdgeDevice The resource object.
     *
     * @param {string} dataBoxEdgeDevice.location The location of the device. This
     * will be one of the supported and registered Azure Geo Regions (e.g. West US,
     * East US, Southeast Asia, etc.). The geo region of a device cannot be changed
     * once it is created, but if an identical geo region is specified on update
     * the request will succeed.
     *
     * @param {object} [dataBoxEdgeDevice.tags] The list of tags that describe the
     * device. These tags can be used in viewing and grouping this device (across
     * resource groups).
     *
     * @param {object} [dataBoxEdgeDevice.sku] The sku type.
     *
     * @param {string} [dataBoxEdgeDevice.sku.name] Sku name. Possible values
     * include: 'Gateway', 'Edge'
     *
     * @param {string} [dataBoxEdgeDevice.sku.tier] The SKU tier. This is based on
     * the SKU name. Possible values include: 'Standard'
     *
     * @param {string} [dataBoxEdgeDevice.etag] The etag of the devices.
     *
     * @param {string} [dataBoxEdgeDevice.dataBoxEdgeDeviceStatus] The status of
     * the Data Box Edge/Gateway device. Possible values include: 'ReadyToSetup',
     * 'Online', 'Offline', 'NeedsAttention', 'Disconnected',
     * 'PartiallyDisconnected'
     *
     * @param {string} [dataBoxEdgeDevice.description] The Description of the Data
     * Box Edge/Gateway device.
     *
     * @param {string} [dataBoxEdgeDevice.modelDescription] The description of the
     * Data Box Edge/Gateway device model.
     *
     * @param {string} [dataBoxEdgeDevice.friendlyName] The Data Box Edge/Gateway
     * device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDevice>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDevice>>;

    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} dataBoxEdgeDevice The resource object.
     *
     * @param {string} dataBoxEdgeDevice.location The location of the device. This
     * will be one of the supported and registered Azure Geo Regions (e.g. West US,
     * East US, Southeast Asia, etc.). The geo region of a device cannot be changed
     * once it is created, but if an identical geo region is specified on update
     * the request will succeed.
     *
     * @param {object} [dataBoxEdgeDevice.tags] The list of tags that describe the
     * device. These tags can be used in viewing and grouping this device (across
     * resource groups).
     *
     * @param {object} [dataBoxEdgeDevice.sku] The sku type.
     *
     * @param {string} [dataBoxEdgeDevice.sku.name] Sku name. Possible values
     * include: 'Gateway', 'Edge'
     *
     * @param {string} [dataBoxEdgeDevice.sku.tier] The SKU tier. This is based on
     * the SKU name. Possible values include: 'Standard'
     *
     * @param {string} [dataBoxEdgeDevice.etag] The etag of the devices.
     *
     * @param {string} [dataBoxEdgeDevice.dataBoxEdgeDeviceStatus] The status of
     * the Data Box Edge/Gateway device. Possible values include: 'ReadyToSetup',
     * 'Online', 'Offline', 'NeedsAttention', 'Disconnected',
     * 'PartiallyDisconnected'
     *
     * @param {string} [dataBoxEdgeDevice.description] The Description of the Data
     * Box Edge/Gateway device.
     *
     * @param {string} [dataBoxEdgeDevice.modelDescription] The description of the
     * Data Box Edge/Gateway device model.
     *
     * @param {string} [dataBoxEdgeDevice.friendlyName] The Data Box Edge/Gateway
     * device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDevice} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDevice} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDevice} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDevice>;
    createOrUpdate(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;
    createOrUpdate(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;


    /**
     * Deletes the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.tags] The tags attached to the Data Box
     * Edge/Gateway resource.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDevice>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDevice>>;

    /**
     * Updates data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.tags] The tags attached to the Data Box
     * Edge/Gateway resource.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDevice} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDevice} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDevice} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(deviceName: string, resourceGroupName: string, options?: { tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDevice>;
    update(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;
    update(deviceName: string, resourceGroupName: string, options: { tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;


    /**
     * @summary Downloads the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    downloadUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Downloads the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    downloadUpdates(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    downloadUpdates(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    downloadUpdates(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the extended info of the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} parameters The device extended information.
     *
     * @param {string} parameters.integrityKey The Channel Integrity Key (CIK) of
     * the device.
     *
     * @param {string} [parameters.encryptionKeyThumbprint] The certificate
     * thumbprint that was used to encrypt the Channel Integrity Key (CIK).
     *
     * @param {string} [parameters.encryptionKey] The Channel Integrity Key (CIK)
     * of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDeviceExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateExtendedInfoWithHttpOperationResponse(deviceName: string, parameters: models.DataBoxEdgeDeviceExtendedInfo, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDeviceExtendedInfo>>;

    /**
     * Creates or updates the extended info of the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} parameters The device extended information.
     *
     * @param {string} parameters.integrityKey The Channel Integrity Key (CIK) of
     * the device.
     *
     * @param {string} [parameters.encryptionKeyThumbprint] The certificate
     * thumbprint that was used to encrypt the Channel Integrity Key (CIK).
     *
     * @param {string} [parameters.encryptionKey] The Channel Integrity Key (CIK)
     * of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDeviceExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDeviceExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDeviceExtendedInfo} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateExtendedInfo(deviceName: string, parameters: models.DataBoxEdgeDeviceExtendedInfo, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDeviceExtendedInfo>;
    createOrUpdateExtendedInfo(deviceName: string, parameters: models.DataBoxEdgeDeviceExtendedInfo, resourceGroupName: string, callback: ServiceCallback<models.DataBoxEdgeDeviceExtendedInfo>): void;
    createOrUpdateExtendedInfo(deviceName: string, parameters: models.DataBoxEdgeDeviceExtendedInfo, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDeviceExtendedInfo>): void;


    /**
     * Returns the extended information of the specified data box edge/gateway
     * device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDeviceExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getExtendedInformationWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDeviceExtendedInfo>>;

    /**
     * Returns the extended information of the specified data box edge/gateway
     * device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDeviceExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDeviceExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDeviceExtendedInfo} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getExtendedInformation(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDeviceExtendedInfo>;
    getExtendedInformation(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.DataBoxEdgeDeviceExtendedInfo>): void;
    getExtendedInformation(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDeviceExtendedInfo>): void;


    /**
     * @summary Installs the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    installUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Installs the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    installUpdates(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    installUpdates(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    installUpdates(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the network settings of the specified data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkSettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSettings>>;

    /**
     * Returns the network settings of the specified data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkSettings(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSettings>;
    getNetworkSettings(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.NetworkSettings>): void;
    getNetworkSettings(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSettings>): void;


    /**
     * @summary Scans for updates on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    scanForUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Scans for updates on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    scanForUpdates(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    scanForUpdates(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    scanForUpdates(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates the security settings on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} deviceAdminPassword Device administrator password as an
     * encrypted string (encrypted using RSA PKCS #1) is used to log into the
     * local web UI of the device. Actual password could have at least 8 characters
     * that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     *
     * @param {string} deviceAdminPassword.value The value of the secret.
     *
     * @param {string} [deviceAdminPassword.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} deviceAdminPassword.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateSecuritySettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the security settings on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} deviceAdminPassword Device administrator password as an
     * encrypted string (encrypted using RSA PKCS #1) is used to log into the
     * local web UI of the device. Actual password could have at least 8 characters
     * that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     *
     * @param {string} deviceAdminPassword.value The value of the secret.
     *
     * @param {string} [deviceAdminPassword.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} deviceAdminPassword.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    createOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, callback: ServiceCallback<void>): void;
    createOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Returns information about the availability of updates as per the
     * last scan done on the device. It also returns information about any ongoing
     * download or install jobs on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UpdateSummary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUpdateSummaryWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UpdateSummary>>;

    /**
     * @summary Returns information about the availability of updates as per the
     * last scan done on the device. It also returns information about any ongoing
     * download or install jobs on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UpdateSummary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UpdateSummary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UpdateSummary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUpdateSummary(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UpdateSummary>;
    getUpdateSummary(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.UpdateSummary>): void;
    getUpdateSummary(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UpdateSummary>): void;


    /**
     * Uploads registration certificate for the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} certificate The base64 encoded certificate raw data.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.authenticationType] The authentication type.
     * Possible values include: 'Invalid', 'AzureActiveDirectory'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UploadCertificateResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadCertificateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, certificate: string, options?: { authenticationType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UploadCertificateResponse>>;

    /**
     * Uploads registration certificate for the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} certificate The base64 encoded certificate raw data.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.authenticationType] The authentication type.
     * Possible values include: 'Invalid', 'AzureActiveDirectory'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UploadCertificateResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UploadCertificateResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UploadCertificateResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadCertificate(deviceName: string, resourceGroupName: string, certificate: string, options?: { authenticationType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UploadCertificateResponse>;
    uploadCertificate(deviceName: string, resourceGroupName: string, certificate: string, callback: ServiceCallback<models.UploadCertificateResponse>): void;
    uploadCertificate(deviceName: string, resourceGroupName: string, certificate: string, options: { authenticationType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UploadCertificateResponse>): void;


    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} dataBoxEdgeDevice The resource object.
     *
     * @param {string} dataBoxEdgeDevice.location The location of the device. This
     * will be one of the supported and registered Azure Geo Regions (e.g. West US,
     * East US, Southeast Asia, etc.). The geo region of a device cannot be changed
     * once it is created, but if an identical geo region is specified on update
     * the request will succeed.
     *
     * @param {object} [dataBoxEdgeDevice.tags] The list of tags that describe the
     * device. These tags can be used in viewing and grouping this device (across
     * resource groups).
     *
     * @param {object} [dataBoxEdgeDevice.sku] The sku type.
     *
     * @param {string} [dataBoxEdgeDevice.sku.name] Sku name. Possible values
     * include: 'Gateway', 'Edge'
     *
     * @param {string} [dataBoxEdgeDevice.sku.tier] The SKU tier. This is based on
     * the SKU name. Possible values include: 'Standard'
     *
     * @param {string} [dataBoxEdgeDevice.etag] The etag of the devices.
     *
     * @param {string} [dataBoxEdgeDevice.dataBoxEdgeDeviceStatus] The status of
     * the Data Box Edge/Gateway device. Possible values include: 'ReadyToSetup',
     * 'Online', 'Offline', 'NeedsAttention', 'Disconnected',
     * 'PartiallyDisconnected'
     *
     * @param {string} [dataBoxEdgeDevice.description] The Description of the Data
     * Box Edge/Gateway device.
     *
     * @param {string} [dataBoxEdgeDevice.modelDescription] The description of the
     * Data Box Edge/Gateway device model.
     *
     * @param {string} [dataBoxEdgeDevice.friendlyName] The Data Box Edge/Gateway
     * device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDevice>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDevice>>;

    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} dataBoxEdgeDevice The resource object.
     *
     * @param {string} dataBoxEdgeDevice.location The location of the device. This
     * will be one of the supported and registered Azure Geo Regions (e.g. West US,
     * East US, Southeast Asia, etc.). The geo region of a device cannot be changed
     * once it is created, but if an identical geo region is specified on update
     * the request will succeed.
     *
     * @param {object} [dataBoxEdgeDevice.tags] The list of tags that describe the
     * device. These tags can be used in viewing and grouping this device (across
     * resource groups).
     *
     * @param {object} [dataBoxEdgeDevice.sku] The sku type.
     *
     * @param {string} [dataBoxEdgeDevice.sku.name] Sku name. Possible values
     * include: 'Gateway', 'Edge'
     *
     * @param {string} [dataBoxEdgeDevice.sku.tier] The SKU tier. This is based on
     * the SKU name. Possible values include: 'Standard'
     *
     * @param {string} [dataBoxEdgeDevice.etag] The etag of the devices.
     *
     * @param {string} [dataBoxEdgeDevice.dataBoxEdgeDeviceStatus] The status of
     * the Data Box Edge/Gateway device. Possible values include: 'ReadyToSetup',
     * 'Online', 'Offline', 'NeedsAttention', 'Disconnected',
     * 'PartiallyDisconnected'
     *
     * @param {string} [dataBoxEdgeDevice.description] The Description of the Data
     * Box Edge/Gateway device.
     *
     * @param {string} [dataBoxEdgeDevice.modelDescription] The description of the
     * Data Box Edge/Gateway device model.
     *
     * @param {string} [dataBoxEdgeDevice.friendlyName] The Data Box Edge/Gateway
     * device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDevice} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDevice} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDevice} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDevice>;
    beginCreateOrUpdate(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;
    beginCreateOrUpdate(deviceName: string, dataBoxEdgeDevice: models.DataBoxEdgeDevice, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDevice>): void;


    /**
     * Deletes the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Downloads the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDownloadUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Downloads the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Installs the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInstallUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Installs the updates on the data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInstallUpdates(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginInstallUpdates(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginInstallUpdates(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Scans for updates on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginScanForUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Scans for updates on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginScanForUpdates(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginScanForUpdates(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginScanForUpdates(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates the security settings on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} deviceAdminPassword Device administrator password as an
     * encrypted string (encrypted using RSA PKCS #1) is used to log into the
     * local web UI of the device. Actual password could have at least 8 characters
     * that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     *
     * @param {string} deviceAdminPassword.value The value of the secret.
     *
     * @param {string} [deviceAdminPassword.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} deviceAdminPassword.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateSecuritySettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the security settings on a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} deviceAdminPassword Device administrator password as an
     * encrypted string (encrypted using RSA PKCS #1) is used to log into the
     * local web UI of the device. Actual password could have at least 8 characters
     * that are a combination of  uppercase, lowercase, numeric, and special
     * characters.
     *
     * @param {string} deviceAdminPassword.value The value of the secret.
     *
     * @param {string} [deviceAdminPassword.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} deviceAdminPassword.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCreateOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, callback: ServiceCallback<void>): void;
    beginCreateOrUpdateSecuritySettings(deviceName: string, resourceGroupName: string, deviceAdminPassword: models.AsymmetricEncryptedSecret, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves all data box edge/gateway devices in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDeviceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDeviceList>>;

    /**
     * Retrieves all data box edge/gateway devices in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDeviceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDeviceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDeviceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDeviceList>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;


    /**
     * Retrieves all data box edge/gateway devices in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataBoxEdgeDeviceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataBoxEdgeDeviceList>>;

    /**
     * Retrieves all data box edge/gateway devices in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataBoxEdgeDeviceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataBoxEdgeDeviceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataBoxEdgeDeviceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataBoxEdgeDeviceList>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataBoxEdgeDeviceList>): void;
}

/**
 * @class
 * Alerts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Alerts {


    /**
     * Retrieves all the alerts for a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * Retrieves all the alerts for a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.AlertList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * @summary Returns an alert by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the alert which needs to be retrieved.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Alert>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Alert>>;

    /**
     * @summary Returns an alert by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the alert which needs to be retrieved.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Alert} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Alert} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Alert} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Alert>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.Alert>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Alert>): void;


    /**
     * Retrieves all the alerts for a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * Retrieves all the alerts for a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.AlertList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;
}

/**
 * @class
 * BandwidthSchedules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface BandwidthSchedules {


    /**
     * Returns all the bandwidth Schedules for a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSchedulesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSchedulesList>>;

    /**
     * Returns all the bandwidth Schedules for a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSchedulesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSchedulesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSchedulesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSchedulesList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.BandwidthSchedulesList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSchedulesList>): void;


    /**
     * Returns the properties of the specified bandwidth schedule name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSchedule>>;

    /**
     * Returns the properties of the specified bandwidth schedule name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSchedule>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.BandwidthSchedule>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSchedule>): void;


    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name which needs to be
     * added/updated.
     *
     * @param {object} parameters The bandwidth schedule to be added or updated.
     *
     * @param {string} parameters.start The start time of the schedule in UTC.
     *
     * @param {string} parameters.stop The stop time of the schedule in UTC.
     *
     * @param {number} parameters.rateInMbps The bandwidth rate in Mbps.
     *
     * @param {array} parameters.days The days of the week when this schedule is
     * applicable.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSchedule>>;

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name which needs to be
     * added/updated.
     *
     * @param {object} parameters The bandwidth schedule to be added or updated.
     *
     * @param {string} parameters.start The start time of the schedule in UTC.
     *
     * @param {string} parameters.stop The stop time of the schedule in UTC.
     *
     * @param {number} parameters.rateInMbps The bandwidth rate in Mbps.
     *
     * @param {array} parameters.days The days of the week when this schedule is
     * applicable.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSchedule>;
    createOrUpdate(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, callback: ServiceCallback<models.BandwidthSchedule>): void;
    createOrUpdate(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSchedule>): void;


    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name which needs to be
     * added/updated.
     *
     * @param {object} parameters The bandwidth schedule to be added or updated.
     *
     * @param {string} parameters.start The start time of the schedule in UTC.
     *
     * @param {string} parameters.stop The stop time of the schedule in UTC.
     *
     * @param {number} parameters.rateInMbps The bandwidth rate in Mbps.
     *
     * @param {array} parameters.days The days of the week when this schedule is
     * applicable.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSchedule>>;

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name which needs to be
     * added/updated.
     *
     * @param {object} parameters The bandwidth schedule to be added or updated.
     *
     * @param {string} parameters.start The start time of the schedule in UTC.
     *
     * @param {string} parameters.stop The stop time of the schedule in UTC.
     *
     * @param {number} parameters.rateInMbps The bandwidth rate in Mbps.
     *
     * @param {array} parameters.days The days of the week when this schedule is
     * applicable.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSchedule>;
    beginCreateOrUpdate(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, callback: ServiceCallback<models.BandwidthSchedule>): void;
    beginCreateOrUpdate(deviceName: string, name: string, parameters: models.BandwidthSchedule, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSchedule>): void;


    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The bandwidth schedule name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all the bandwidth Schedules for a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSchedulesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSchedulesList>>;

    /**
     * Returns all the bandwidth Schedules for a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSchedulesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSchedulesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSchedulesList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSchedulesList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.BandwidthSchedulesList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSchedulesList>): void;
}

/**
 * @class
 * OperationsStatus
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface OperationsStatus {


    /**
     * @summary Returns the job details of the specified job on a data box
     * edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The job name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * @summary Returns the job details of the specified job on a data box
     * edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The job name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.Job>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;
}

/**
 * @class
 * Orders
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Orders {


    /**
     * @summary List all the orders related to the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OrderList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OrderList>>;

    /**
     * @summary List all the orders related to the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OrderList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OrderList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OrderList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OrderList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.OrderList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OrderList>): void;


    /**
     * @summary Get a specific order by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Order>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Order>>;

    /**
     * @summary Get a specific order by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Order} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Order} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Order} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Order>;
    get(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.Order>): void;
    get(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Order>): void;


    /**
     * @summary Creates or updates an order.
     *
     * @param {string} deviceName Name of the edge device for which order needs to
     * be added or updated.
     *
     * @param {object} order Order to be added.
     *
     * @param {object} [order.contactInformation] The contact details.
     *
     * @param {string} order.contactInformation.contactPerson Gets or sets the
     * contact person.
     *
     * @param {string} order.contactInformation.companyName Gets or sets the name
     * of the company.
     *
     * @param {string} order.contactInformation.phone Gets or sets the phone
     * number.
     *
     * @param {array} order.contactInformation.emailList Gets or sets the email
     * list.
     *
     * @param {object} [order.shippingAddress] The shipping address.
     *
     * @param {string} order.shippingAddress.addressLine1 The address line1.
     *
     * @param {string} order.shippingAddress.addressLine2 The address line2.
     *
     * @param {string} order.shippingAddress.addressLine3 The address line3.
     *
     * @param {string} order.shippingAddress.postalCode The postal code.
     *
     * @param {string} order.shippingAddress.city The city name.
     *
     * @param {string} order.shippingAddress.state The state name.
     *
     * @param {string} order.shippingAddress.country The country name.
     *
     * @param {object} [order.changeStatusTo] Current status of the Order.
     *
     * @param {string} order.changeStatusTo.status Status of the order pertaining
     * to the allowed StatusTypes. Possible values include: 'Untracked',
     * 'AwaitingFulfilment', 'AwaitingPreparation', 'AwaitingShipment', 'Shipped',
     * 'Arriving', 'Delivered', 'ReplacementRequested', 'LostDevice', 'Declined',
     * 'ReturnInitiated', 'AwaitingReturnShipment', 'ShippedBack',
     * 'CollectedAtMicrosoft'
     *
     * @param {string} [order.changeStatusTo.comments] Comments related to this
     * status change.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Order>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, order: models.Order, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Order>>;

    /**
     * @summary Creates or updates an order.
     *
     * @param {string} deviceName Name of the edge device for which order needs to
     * be added or updated.
     *
     * @param {object} order Order to be added.
     *
     * @param {object} [order.contactInformation] The contact details.
     *
     * @param {string} order.contactInformation.contactPerson Gets or sets the
     * contact person.
     *
     * @param {string} order.contactInformation.companyName Gets or sets the name
     * of the company.
     *
     * @param {string} order.contactInformation.phone Gets or sets the phone
     * number.
     *
     * @param {array} order.contactInformation.emailList Gets or sets the email
     * list.
     *
     * @param {object} [order.shippingAddress] The shipping address.
     *
     * @param {string} order.shippingAddress.addressLine1 The address line1.
     *
     * @param {string} order.shippingAddress.addressLine2 The address line2.
     *
     * @param {string} order.shippingAddress.addressLine3 The address line3.
     *
     * @param {string} order.shippingAddress.postalCode The postal code.
     *
     * @param {string} order.shippingAddress.city The city name.
     *
     * @param {string} order.shippingAddress.state The state name.
     *
     * @param {string} order.shippingAddress.country The country name.
     *
     * @param {object} [order.changeStatusTo] Current status of the Order.
     *
     * @param {string} order.changeStatusTo.status Status of the order pertaining
     * to the allowed StatusTypes. Possible values include: 'Untracked',
     * 'AwaitingFulfilment', 'AwaitingPreparation', 'AwaitingShipment', 'Shipped',
     * 'Arriving', 'Delivered', 'ReplacementRequested', 'LostDevice', 'Declined',
     * 'ReturnInitiated', 'AwaitingReturnShipment', 'ShippedBack',
     * 'CollectedAtMicrosoft'
     *
     * @param {string} [order.changeStatusTo.comments] Comments related to this
     * status change.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Order} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Order} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Order} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, order: models.Order, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Order>;
    createOrUpdate(deviceName: string, order: models.Order, resourceGroupName: string, callback: ServiceCallback<models.Order>): void;
    createOrUpdate(deviceName: string, order: models.Order, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Order>): void;


    /**
     * @summary Deletes the order related to the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the order related to the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates an order.
     *
     * @param {string} deviceName Name of the edge device for which order needs to
     * be added or updated.
     *
     * @param {object} order Order to be added.
     *
     * @param {object} [order.contactInformation] The contact details.
     *
     * @param {string} order.contactInformation.contactPerson Gets or sets the
     * contact person.
     *
     * @param {string} order.contactInformation.companyName Gets or sets the name
     * of the company.
     *
     * @param {string} order.contactInformation.phone Gets or sets the phone
     * number.
     *
     * @param {array} order.contactInformation.emailList Gets or sets the email
     * list.
     *
     * @param {object} [order.shippingAddress] The shipping address.
     *
     * @param {string} order.shippingAddress.addressLine1 The address line1.
     *
     * @param {string} order.shippingAddress.addressLine2 The address line2.
     *
     * @param {string} order.shippingAddress.addressLine3 The address line3.
     *
     * @param {string} order.shippingAddress.postalCode The postal code.
     *
     * @param {string} order.shippingAddress.city The city name.
     *
     * @param {string} order.shippingAddress.state The state name.
     *
     * @param {string} order.shippingAddress.country The country name.
     *
     * @param {object} [order.changeStatusTo] Current status of the Order.
     *
     * @param {string} order.changeStatusTo.status Status of the order pertaining
     * to the allowed StatusTypes. Possible values include: 'Untracked',
     * 'AwaitingFulfilment', 'AwaitingPreparation', 'AwaitingShipment', 'Shipped',
     * 'Arriving', 'Delivered', 'ReplacementRequested', 'LostDevice', 'Declined',
     * 'ReturnInitiated', 'AwaitingReturnShipment', 'ShippedBack',
     * 'CollectedAtMicrosoft'
     *
     * @param {string} [order.changeStatusTo.comments] Comments related to this
     * status change.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Order>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, order: models.Order, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Order>>;

    /**
     * @summary Creates or updates an order.
     *
     * @param {string} deviceName Name of the edge device for which order needs to
     * be added or updated.
     *
     * @param {object} order Order to be added.
     *
     * @param {object} [order.contactInformation] The contact details.
     *
     * @param {string} order.contactInformation.contactPerson Gets or sets the
     * contact person.
     *
     * @param {string} order.contactInformation.companyName Gets or sets the name
     * of the company.
     *
     * @param {string} order.contactInformation.phone Gets or sets the phone
     * number.
     *
     * @param {array} order.contactInformation.emailList Gets or sets the email
     * list.
     *
     * @param {object} [order.shippingAddress] The shipping address.
     *
     * @param {string} order.shippingAddress.addressLine1 The address line1.
     *
     * @param {string} order.shippingAddress.addressLine2 The address line2.
     *
     * @param {string} order.shippingAddress.addressLine3 The address line3.
     *
     * @param {string} order.shippingAddress.postalCode The postal code.
     *
     * @param {string} order.shippingAddress.city The city name.
     *
     * @param {string} order.shippingAddress.state The state name.
     *
     * @param {string} order.shippingAddress.country The country name.
     *
     * @param {object} [order.changeStatusTo] Current status of the Order.
     *
     * @param {string} order.changeStatusTo.status Status of the order pertaining
     * to the allowed StatusTypes. Possible values include: 'Untracked',
     * 'AwaitingFulfilment', 'AwaitingPreparation', 'AwaitingShipment', 'Shipped',
     * 'Arriving', 'Delivered', 'ReplacementRequested', 'LostDevice', 'Declined',
     * 'ReturnInitiated', 'AwaitingReturnShipment', 'ShippedBack',
     * 'CollectedAtMicrosoft'
     *
     * @param {string} [order.changeStatusTo.comments] Comments related to this
     * status change.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Order} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Order} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Order} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, order: models.Order, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Order>;
    beginCreateOrUpdate(deviceName: string, order: models.Order, resourceGroupName: string, callback: ServiceCallback<models.Order>): void;
    beginCreateOrUpdate(deviceName: string, order: models.Order, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Order>): void;


    /**
     * @summary Deletes the order related to the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the order related to the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List all the orders related to the device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OrderList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OrderList>>;

    /**
     * @summary List all the orders related to the device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OrderList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OrderList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OrderList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OrderList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.OrderList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OrderList>): void;
}

/**
 * @class
 * Roles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Roles {


    /**
     * Lists all the roles configured in a data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleList>>;

    /**
     * Lists all the roles configured in a data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.RoleList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleList>): void;


    /**
     * Get a specific role by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of role to be fetched.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Role>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Role>>;

    /**
     * Get a specific role by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of role to be fetched.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Role} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Role} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Role} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Role>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.Role>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Role>): void;


    /**
     * Create or update a role.
     *
     * @param {string} deviceName Name of the device in which the role needs to be
     * added or updated.
     *
     * @param {string} name Name of the role to be updated.
     *
     * @param {object} role Role to be added.
     *
     * @param {string} role.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Role>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, name: string, role: models.Role, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Role>>;

    /**
     * Create or update a role.
     *
     * @param {string} deviceName Name of the device in which the role needs to be
     * added or updated.
     *
     * @param {string} name Name of the role to be updated.
     *
     * @param {object} role Role to be added.
     *
     * @param {string} role.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Role} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Role} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Role} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, name: string, role: models.Role, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Role>;
    createOrUpdate(deviceName: string, name: string, role: models.Role, resourceGroupName: string, callback: ServiceCallback<models.Role>): void;
    createOrUpdate(deviceName: string, name: string, role: models.Role, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Role>): void;


    /**
     * Deletes the role on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the role which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the role on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the role which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or update a role.
     *
     * @param {string} deviceName Name of the device in which the role needs to be
     * added or updated.
     *
     * @param {string} name Name of the role to be updated.
     *
     * @param {object} role Role to be added.
     *
     * @param {string} role.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Role>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, name: string, role: models.Role, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Role>>;

    /**
     * Create or update a role.
     *
     * @param {string} deviceName Name of the device in which the role needs to be
     * added or updated.
     *
     * @param {string} name Name of the role to be updated.
     *
     * @param {object} role Role to be added.
     *
     * @param {string} role.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Role} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Role} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Role} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, name: string, role: models.Role, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Role>;
    beginCreateOrUpdate(deviceName: string, name: string, role: models.Role, resourceGroupName: string, callback: ServiceCallback<models.Role>): void;
    beginCreateOrUpdate(deviceName: string, name: string, role: models.Role, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Role>): void;


    /**
     * Deletes the role on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the role which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the role on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the role which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all the roles configured in a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleList>>;

    /**
     * Lists all the roles configured in a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.RoleList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleList>): void;
}

/**
 * @class
 * Shares
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Shares {


    /**
     * @summary Lists all the shares in a data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ShareList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ShareList>>;

    /**
     * @summary Lists all the shares in a data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ShareList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ShareList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ShareList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ShareList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.ShareList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ShareList>): void;


    /**
     * @summary Returns a particular share by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Share>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Share>>;

    /**
     * @summary Returns a particular share by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Share} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Share} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Share} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Share>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.Share>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Share>): void;


    /**
     * @summary Creates a new share or update an existing share on the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be added/updated.
     *
     * @param {object} share The share object containing the share details.
     *
     * @param {string} [share.description] Description for the share.
     *
     * @param {string} share.shareStatus Current status of the share. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} share.monitoringStatus Current monitoring status of the
     * share. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [share.azureContainerInfo] Azure container mapping for the
     * share.
     *
     * @param {string} share.azureContainerInfo.storageAccountCredentialId ID of
     * the Storage account credential to be used for accessing storage.
     *
     * @param {string} share.azureContainerInfo.containerName Container name (Based
     * on the data format specified, represents the name of Azure file/ Page blob /
     * Block blob).
     *
     * @param {string} share.azureContainerInfo.dataFormat Storage format used for
     * the file represented by the share. Possible values include: 'BlockBlob',
     * 'PageBlob', 'AzureFile'
     *
     * @param {string} share.accessProtocol Access protocol to be used by the
     * share. Possible values include: 'SMB', 'NFS'
     *
     * @param {array} [share.userAccessRights] Mapping of Users and corresponding
     * access rights on the share (mandatory for SMB protocol).
     *
     * @param {array} [share.clientAccessRights] List of IP addresses and
     * corresponding access rights on the share(mandatory for NFS protocol).
     *
     * @param {object} [share.refreshDetails] Details of the refresh job on this
     * share.
     *
     * @param {string} [share.refreshDetails.inProgressRefreshJobId] If a
     * RefreshShare job is currently inprogress on this share - this field
     * indicates the ArmId of that job. Empty otherwise.
     *
     * @param {date} [share.refreshDetails.lastCompletedRefreshJobTimeInUTC]
     * Indicates the job completed time of the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.errorManifestFile] Indicates the
     * relative path of the error xml for the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.lastJob] Indicates the id of the last
     * refresh job on this particular share,if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.dataPolicy] Data policy of the share. Possible values
     * include: 'Cloud', 'Local'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Share>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, name: string, share: models.Share, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Share>>;

    /**
     * @summary Creates a new share or update an existing share on the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be added/updated.
     *
     * @param {object} share The share object containing the share details.
     *
     * @param {string} [share.description] Description for the share.
     *
     * @param {string} share.shareStatus Current status of the share. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} share.monitoringStatus Current monitoring status of the
     * share. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [share.azureContainerInfo] Azure container mapping for the
     * share.
     *
     * @param {string} share.azureContainerInfo.storageAccountCredentialId ID of
     * the Storage account credential to be used for accessing storage.
     *
     * @param {string} share.azureContainerInfo.containerName Container name (Based
     * on the data format specified, represents the name of Azure file/ Page blob /
     * Block blob).
     *
     * @param {string} share.azureContainerInfo.dataFormat Storage format used for
     * the file represented by the share. Possible values include: 'BlockBlob',
     * 'PageBlob', 'AzureFile'
     *
     * @param {string} share.accessProtocol Access protocol to be used by the
     * share. Possible values include: 'SMB', 'NFS'
     *
     * @param {array} [share.userAccessRights] Mapping of Users and corresponding
     * access rights on the share (mandatory for SMB protocol).
     *
     * @param {array} [share.clientAccessRights] List of IP addresses and
     * corresponding access rights on the share(mandatory for NFS protocol).
     *
     * @param {object} [share.refreshDetails] Details of the refresh job on this
     * share.
     *
     * @param {string} [share.refreshDetails.inProgressRefreshJobId] If a
     * RefreshShare job is currently inprogress on this share - this field
     * indicates the ArmId of that job. Empty otherwise.
     *
     * @param {date} [share.refreshDetails.lastCompletedRefreshJobTimeInUTC]
     * Indicates the job completed time of the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.errorManifestFile] Indicates the
     * relative path of the error xml for the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.lastJob] Indicates the id of the last
     * refresh job on this particular share,if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.dataPolicy] Data policy of the share. Possible values
     * include: 'Cloud', 'Local'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Share} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Share} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Share} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, name: string, share: models.Share, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Share>;
    createOrUpdate(deviceName: string, name: string, share: models.Share, resourceGroupName: string, callback: ServiceCallback<models.Share>): void;
    createOrUpdate(deviceName: string, name: string, share: models.Share, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Share>): void;


    /**
     * Deletes the share on the data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the share on the data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Triggers a manual refresh of the share metadata with the actual
     * cloud storage account.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Triggers a manual refresh of the share metadata with the actual
     * cloud storage account.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refresh(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    refresh(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    refresh(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a new share or update an existing share on the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be added/updated.
     *
     * @param {object} share The share object containing the share details.
     *
     * @param {string} [share.description] Description for the share.
     *
     * @param {string} share.shareStatus Current status of the share. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} share.monitoringStatus Current monitoring status of the
     * share. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [share.azureContainerInfo] Azure container mapping for the
     * share.
     *
     * @param {string} share.azureContainerInfo.storageAccountCredentialId ID of
     * the Storage account credential to be used for accessing storage.
     *
     * @param {string} share.azureContainerInfo.containerName Container name (Based
     * on the data format specified, represents the name of Azure file/ Page blob /
     * Block blob).
     *
     * @param {string} share.azureContainerInfo.dataFormat Storage format used for
     * the file represented by the share. Possible values include: 'BlockBlob',
     * 'PageBlob', 'AzureFile'
     *
     * @param {string} share.accessProtocol Access protocol to be used by the
     * share. Possible values include: 'SMB', 'NFS'
     *
     * @param {array} [share.userAccessRights] Mapping of Users and corresponding
     * access rights on the share (mandatory for SMB protocol).
     *
     * @param {array} [share.clientAccessRights] List of IP addresses and
     * corresponding access rights on the share(mandatory for NFS protocol).
     *
     * @param {object} [share.refreshDetails] Details of the refresh job on this
     * share.
     *
     * @param {string} [share.refreshDetails.inProgressRefreshJobId] If a
     * RefreshShare job is currently inprogress on this share - this field
     * indicates the ArmId of that job. Empty otherwise.
     *
     * @param {date} [share.refreshDetails.lastCompletedRefreshJobTimeInUTC]
     * Indicates the job completed time of the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.errorManifestFile] Indicates the
     * relative path of the error xml for the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.lastJob] Indicates the id of the last
     * refresh job on this particular share,if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.dataPolicy] Data policy of the share. Possible values
     * include: 'Cloud', 'Local'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Share>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, name: string, share: models.Share, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Share>>;

    /**
     * @summary Creates a new share or update an existing share on the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be added/updated.
     *
     * @param {object} share The share object containing the share details.
     *
     * @param {string} [share.description] Description for the share.
     *
     * @param {string} share.shareStatus Current status of the share. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} share.monitoringStatus Current monitoring status of the
     * share. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [share.azureContainerInfo] Azure container mapping for the
     * share.
     *
     * @param {string} share.azureContainerInfo.storageAccountCredentialId ID of
     * the Storage account credential to be used for accessing storage.
     *
     * @param {string} share.azureContainerInfo.containerName Container name (Based
     * on the data format specified, represents the name of Azure file/ Page blob /
     * Block blob).
     *
     * @param {string} share.azureContainerInfo.dataFormat Storage format used for
     * the file represented by the share. Possible values include: 'BlockBlob',
     * 'PageBlob', 'AzureFile'
     *
     * @param {string} share.accessProtocol Access protocol to be used by the
     * share. Possible values include: 'SMB', 'NFS'
     *
     * @param {array} [share.userAccessRights] Mapping of Users and corresponding
     * access rights on the share (mandatory for SMB protocol).
     *
     * @param {array} [share.clientAccessRights] List of IP addresses and
     * corresponding access rights on the share(mandatory for NFS protocol).
     *
     * @param {object} [share.refreshDetails] Details of the refresh job on this
     * share.
     *
     * @param {string} [share.refreshDetails.inProgressRefreshJobId] If a
     * RefreshShare job is currently inprogress on this share - this field
     * indicates the ArmId of that job. Empty otherwise.
     *
     * @param {date} [share.refreshDetails.lastCompletedRefreshJobTimeInUTC]
     * Indicates the job completed time of the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.errorManifestFile] Indicates the
     * relative path of the error xml for the last refresh job on this particular
     * share, if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.refreshDetails.lastJob] Indicates the id of the last
     * refresh job on this particular share,if any.
     * This could be a failed job or a successful job.
     *
     * @param {string} [share.dataPolicy] Data policy of the share. Possible values
     * include: 'Cloud', 'Local'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Share} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Share} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Share} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, name: string, share: models.Share, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Share>;
    beginCreateOrUpdate(deviceName: string, name: string, share: models.Share, resourceGroupName: string, callback: ServiceCallback<models.Share>): void;
    beginCreateOrUpdate(deviceName: string, name: string, share: models.Share, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Share>): void;


    /**
     * Deletes the share on the data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the share on the data box edge/gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Triggers a manual refresh of the share metadata with the actual
     * cloud storage account.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRefreshWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Triggers a manual refresh of the share metadata with the actual
     * cloud storage account.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the share.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRefresh(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRefresh(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginRefresh(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Lists all the shares in a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ShareList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ShareList>>;

    /**
     * @summary Lists all the shares in a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ShareList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ShareList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ShareList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ShareList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.ShareList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ShareList>): void;
}

/**
 * @class
 * StorageAccountCredentials
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface StorageAccountCredentials {


    /**
     * @summary Gets all the storage account credentials in a data box edge/gateway
     * device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredentialList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredentialList>>;

    /**
     * @summary Gets all the storage account credentials in a data box edge/gateway
     * device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredentialList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredentialList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredentialList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredentialList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.StorageAccountCredentialList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredentialList>): void;


    /**
     * Gets the properties of the specified storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the storage account credential to be fetched.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Gets the properties of the specified storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the storage account credential to be fetched.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name The storage account credential name.
     *
     * @param {object} storageAccountCredential The storage account credential to
     * be added or updated.
     *
     * @param {string} storageAccountCredential.alias Alias for the storage
     * account.
     *
     * @param {string} [storageAccountCredential.userName] UserName for the storage
     * account.
     *
     * @param {object} [storageAccountCredential.accountKey] Encrypted storage key.
     *
     * @param {string} storageAccountCredential.accountKey.value The value of the
     * secret.
     *
     * @param {string}
     * [storageAccountCredential.accountKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} storageAccountCredential.accountKey.encryptionAlgorithm The
     * algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [storageAccountCredential.connectionString] ConnectionString
     * for the storage account. This needs to be specified if UserName/AccountKey
     * are not specified.
     *
     * @param {string} storageAccountCredential.sslStatus Signifies whether SSL
     * needs to be enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [storageAccountCredential.blobDomainName] Blob end point for
     * private clouds.
     *
     * @param {string} storageAccountCredential.accountType Type of storage
     * accessed on the storage account. Possible values include:
     * 'GeneralPurposeStorage', 'BlobStorage'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name The storage account credential name.
     *
     * @param {object} storageAccountCredential The storage account credential to
     * be added or updated.
     *
     * @param {string} storageAccountCredential.alias Alias for the storage
     * account.
     *
     * @param {string} [storageAccountCredential.userName] UserName for the storage
     * account.
     *
     * @param {object} [storageAccountCredential.accountKey] Encrypted storage key.
     *
     * @param {string} storageAccountCredential.accountKey.value The value of the
     * secret.
     *
     * @param {string}
     * [storageAccountCredential.accountKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} storageAccountCredential.accountKey.encryptionAlgorithm The
     * algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [storageAccountCredential.connectionString] ConnectionString
     * for the storage account. This needs to be specified if UserName/AccountKey
     * are not specified.
     *
     * @param {string} storageAccountCredential.sslStatus Signifies whether SSL
     * needs to be enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [storageAccountCredential.blobDomainName] Blob end point for
     * private clouds.
     *
     * @param {string} storageAccountCredential.accountType Type of storage
     * accessed on the storage account. Possible values include:
     * 'GeneralPurposeStorage', 'BlobStorage'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    createOrUpdate(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    createOrUpdate(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Deletes the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name The storage account credential name.
     *
     * @param {object} storageAccountCredential The storage account credential to
     * be added or updated.
     *
     * @param {string} storageAccountCredential.alias Alias for the storage
     * account.
     *
     * @param {string} [storageAccountCredential.userName] UserName for the storage
     * account.
     *
     * @param {object} [storageAccountCredential.accountKey] Encrypted storage key.
     *
     * @param {string} storageAccountCredential.accountKey.value The value of the
     * secret.
     *
     * @param {string}
     * [storageAccountCredential.accountKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} storageAccountCredential.accountKey.encryptionAlgorithm The
     * algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [storageAccountCredential.connectionString] ConnectionString
     * for the storage account. This needs to be specified if UserName/AccountKey
     * are not specified.
     *
     * @param {string} storageAccountCredential.sslStatus Signifies whether SSL
     * needs to be enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [storageAccountCredential.blobDomainName] Blob end point for
     * private clouds.
     *
     * @param {string} storageAccountCredential.accountType Type of storage
     * accessed on the storage account. Possible values include:
     * 'GeneralPurposeStorage', 'BlobStorage'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name The storage account credential name.
     *
     * @param {object} storageAccountCredential The storage account credential to
     * be added or updated.
     *
     * @param {string} storageAccountCredential.alias Alias for the storage
     * account.
     *
     * @param {string} [storageAccountCredential.userName] UserName for the storage
     * account.
     *
     * @param {object} [storageAccountCredential.accountKey] Encrypted storage key.
     *
     * @param {string} storageAccountCredential.accountKey.value The value of the
     * secret.
     *
     * @param {string}
     * [storageAccountCredential.accountKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} storageAccountCredential.accountKey.encryptionAlgorithm The
     * algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [storageAccountCredential.connectionString] ConnectionString
     * for the storage account. This needs to be specified if UserName/AccountKey
     * are not specified.
     *
     * @param {string} storageAccountCredential.sslStatus Signifies whether SSL
     * needs to be enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [storageAccountCredential.blobDomainName] Blob end point for
     * private clouds.
     *
     * @param {string} storageAccountCredential.accountType Type of storage
     * accessed on the storage account. Possible values include:
     * 'GeneralPurposeStorage', 'BlobStorage'
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    beginCreateOrUpdate(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    beginCreateOrUpdate(deviceName: string, name: string, storageAccountCredential: models.StorageAccountCredential, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Deletes the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage account credential.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets all the storage account credentials in a data box edge/gateway
     * device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredentialList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredentialList>>;

    /**
     * @summary Gets all the storage account credentials in a data box edge/gateway
     * device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredentialList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredentialList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredentialList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredentialList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.StorageAccountCredentialList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredentialList>): void;
}

/**
 * @class
 * Triggers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Triggers {


    /**
     * List all the triggers configured in the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggerList>>;

    /**
     * List all the triggers configured in the device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggerList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.TriggerList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggerList>): void;


    /**
     * Get a specific trigger by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of trigger to be fetched.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Trigger>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Trigger>>;

    /**
     * Get a specific trigger by name.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of trigger to be fetched.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Trigger} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Trigger} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Trigger} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Trigger>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.Trigger>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Trigger>): void;


    /**
     * Create or update a trigger.
     *
     * @param {string} deviceName Name of the edge device in which trigger needs to
     * be added or updated.
     *
     * @param {string} name Name of trigger to be added or updated.
     *
     * @param {object} trigger Trigger to be added.
     *
     * @param {string} trigger.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Trigger>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Trigger>>;

    /**
     * Create or update a trigger.
     *
     * @param {string} deviceName Name of the edge device in which trigger needs to
     * be added or updated.
     *
     * @param {string} name Name of trigger to be added or updated.
     *
     * @param {object} trigger Trigger to be added.
     *
     * @param {string} trigger.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Trigger} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Trigger} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Trigger} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Trigger>;
    createOrUpdate(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, callback: ServiceCallback<models.Trigger>): void;
    createOrUpdate(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Trigger>): void;


    /**
     * Deletes the trigger on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the trigger which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the trigger on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the trigger which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or update a trigger.
     *
     * @param {string} deviceName Name of the edge device in which trigger needs to
     * be added or updated.
     *
     * @param {string} name Name of trigger to be added or updated.
     *
     * @param {object} trigger Trigger to be added.
     *
     * @param {string} trigger.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Trigger>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Trigger>>;

    /**
     * Create or update a trigger.
     *
     * @param {string} deviceName Name of the edge device in which trigger needs to
     * be added or updated.
     *
     * @param {string} name Name of trigger to be added or updated.
     *
     * @param {object} trigger Trigger to be added.
     *
     * @param {string} trigger.kind Polymorphic Discriminator
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Trigger} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Trigger} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Trigger} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Trigger>;
    beginCreateOrUpdate(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, callback: ServiceCallback<models.Trigger>): void;
    beginCreateOrUpdate(deviceName: string, name: string, trigger: models.Trigger, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Trigger>): void;


    /**
     * Deletes the trigger on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the trigger which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the trigger on the gateway device.
     *
     * @param {string} deviceName Name of the device.
     *
     * @param {string} name Name of the trigger which needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List all the triggers configured in the device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggerList>>;

    /**
     * List all the triggers configured in the device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggerList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.TriggerList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggerList>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataBoxEdgeManagementClient.
 */
export interface Users {


    /**
     * Returns all the users registered in a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserList>>;

    /**
     * Returns all the users registered in a data box edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserList>;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, callback: ServiceCallback<models.UserList>): void;
    listByDataBoxEdgeDevice(deviceName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserList>): void;


    /**
     * Returns the properties of the specified user.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be retrieved.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Returns the properties of the specified user.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be retrieved.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    get(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.User>): void;
    get(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Create a new user or update an existing user's information on a data box
     * edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be added/updated.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.encryptedPassword] The details of the password
     * specified for the user.
     *
     * @param {string} options.encryptedPassword.value The value of the secret.
     *
     * @param {string} [options.encryptedPassword.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} options.encryptedPassword.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {array} [options.shareAccessRights] List of shares that the user has
     * rights on. This field should not be specified during user creation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { encryptedPassword? : models.AsymmetricEncryptedSecret, shareAccessRights? : models.ShareAccessRight[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Create a new user or update an existing user's information on a data box
     * edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be added/updated.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.encryptedPassword] The details of the password
     * specified for the user.
     *
     * @param {string} options.encryptedPassword.value The value of the secret.
     *
     * @param {string} [options.encryptedPassword.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} options.encryptedPassword.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {array} [options.shareAccessRights] List of shares that the user has
     * rights on. This field should not be specified during user creation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, name: string, resourceGroupName: string, options?: { encryptedPassword? : models.AsymmetricEncryptedSecret, shareAccessRights? : models.ShareAccessRight[], customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    createOrUpdate(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.User>): void;
    createOrUpdate(deviceName: string, name: string, resourceGroupName: string, options: { encryptedPassword? : models.AsymmetricEncryptedSecret, shareAccessRights? : models.ShareAccessRight[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Deletes the user on a databox edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the user on a databox edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a new user or update an existing user's information on a data box
     * edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be added/updated.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.encryptedPassword] The details of the password
     * specified for the user.
     *
     * @param {string} options.encryptedPassword.value The value of the secret.
     *
     * @param {string} [options.encryptedPassword.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} options.encryptedPassword.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {array} [options.shareAccessRights] List of shares that the user has
     * rights on. This field should not be specified during user creation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { encryptedPassword? : models.AsymmetricEncryptedSecret, shareAccessRights? : models.ShareAccessRight[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Create a new user or update an existing user's information on a data box
     * edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be added/updated.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.encryptedPassword] The details of the password
     * specified for the user.
     *
     * @param {string} options.encryptedPassword.value The value of the secret.
     *
     * @param {string} [options.encryptedPassword.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} options.encryptedPassword.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {array} [options.shareAccessRights] List of shares that the user has
     * rights on. This field should not be specified during user creation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, options?: { encryptedPassword? : models.AsymmetricEncryptedSecret, shareAccessRights? : models.ShareAccessRight[], customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<models.User>): void;
    beginCreateOrUpdate(deviceName: string, name: string, resourceGroupName: string, options: { encryptedPassword? : models.AsymmetricEncryptedSecret, shareAccessRights? : models.ShareAccessRight[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Deletes the user on a databox edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the user on a databox edge/gateway device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} name The name of the user who needs to be deleted.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, name: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all the users registered in a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDataBoxEdgeDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserList>>;

    /**
     * Returns all the users registered in a data box edge/gateway device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserList>;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, callback: ServiceCallback<models.UserList>): void;
    listByDataBoxEdgeDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserList>): void;
}
