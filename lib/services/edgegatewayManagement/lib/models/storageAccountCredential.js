/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The storage account credential.
 *
 * @extends models['ARMBaseModel']
 */
class StorageAccountCredential extends models['ARMBaseModel'] {
  /**
   * Create a StorageAccountCredential.
   * @property {string} alias Alias for the storage account.
   * @property {string} [userName] UserName for the storage account.
   * @property {object} [accountKey] Encrypted storage key.
   * @property {string} [accountKey.value] The value of the secret.
   * @property {string} [accountKey.encryptionCertThumbprint] Thumbprint
   * certificate that was used to encrypt "Value". If the value in unencrypted,
   * it will be null.
   * @property {string} [accountKey.encryptionAlgorithm] The algorithm used to
   * encrypt "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   * @property {string} [connectionString] ConnectionString for the storage
   * account. This needs to be specified if UserName/AccountKey are not
   * specified.
   * @property {string} sslStatus Signifies whether SSL needs to be enabled or
   * not. Possible values include: 'Enabled', 'Disabled'
   * @property {string} [blobDomainName] Blob end point for private clouds.
   * @property {string} accountType Type of storage accessed on the storage
   * account. Possible values include: 'GeneralPurposeStorage', 'BlobStorage'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StorageAccountCredential
   *
   * @returns {object} metadata of StorageAccountCredential
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StorageAccountCredential',
      type: {
        name: 'Composite',
        className: 'StorageAccountCredential',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          alias: {
            required: true,
            serializedName: 'properties.alias',
            type: {
              name: 'String'
            }
          },
          userName: {
            required: false,
            serializedName: 'properties.userName',
            type: {
              name: 'String'
            }
          },
          accountKey: {
            required: false,
            serializedName: 'properties.accountKey',
            type: {
              name: 'Composite',
              className: 'AsymmetricEncryptedSecret'
            }
          },
          connectionString: {
            required: false,
            serializedName: 'properties.connectionString',
            type: {
              name: 'String'
            }
          },
          sslStatus: {
            required: true,
            serializedName: 'properties.sslStatus',
            type: {
              name: 'String'
            }
          },
          blobDomainName: {
            required: false,
            serializedName: 'properties.blobDomainName',
            type: {
              name: 'String'
            }
          },
          accountType: {
            required: true,
            serializedName: 'properties.accountType',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = StorageAccountCredential;
