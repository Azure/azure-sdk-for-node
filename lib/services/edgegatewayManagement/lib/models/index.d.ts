/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The shipping address of the customer.
 */
export interface Address {
  /**
   * The address line1.
   */
  addressLine1: string;
  /**
   * The address line2.
   */
  addressLine2: string;
  /**
   * The address line3.
   */
  addressLine3: string;
  /**
   * The postal code.
   */
  postalCode: string;
  /**
   * The city name.
   */
  city: string;
  /**
   * The state name.
   */
  state: string;
  /**
   * The country name.
   */
  country: string;
}

/**
 * Error details for the alert.
 */
export interface AlertErrorDetails {
  /**
   * Error code.
   */
  readonly errorCode?: string;
  /**
   * Error Message.
   */
  readonly errorMessage?: string;
  /**
   * Number of occurrences.
   */
  readonly occurrences?: number;
}

/**
 * Represents the base class for all object models.
 */
export interface ARMBaseModel extends BaseResource {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The name of the object.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
}

/**
 * Alert on the data box edge/gateway device.
 */
export interface Alert extends ARMBaseModel {
  /**
   * Title of the alert.
   */
  readonly title?: string;
  /**
   * Type of the alert.
   */
  readonly alertType?: string;
  /**
   * UTC time at which the alert appeared.
   */
  readonly appearedAtDateTime?: Date;
  /**
   * Recommendation for acting on the alert.
   */
  readonly recommendation?: string;
  /**
   * Severity of the alert. Possible values include: 'Informational', 'Warning', 'Critical'
   */
  readonly severity?: string;
  /**
   * Error details of the alert.
   */
  readonly errorDetails?: AlertErrorDetails;
  /**
   * Detailed information about the alert.
   */
  readonly detailedInformation?: { [propertyName: string]: string };
}

/**
 * Represent the secrets intended for encryption with asymmetric key pair.
 */
export interface AsymmetricEncryptedSecret {
  /**
   * The value of the secret.
   */
  value: string;
  /**
   * Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will
   * be null.
   */
  encryptionCertThumbprint?: string;
  /**
   * The algorithm used to encrypt "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   */
  encryptionAlgorithm: string;
}

/**
 * Symmetric Key for authentication.
 */
export interface SymmetricKey {
  /**
   * Connection string based on symmetric key.
   */
  connectionString?: AsymmetricEncryptedSecret;
}

/**
 * Authentication mechanism for IoT devices.
 */
export interface Authentication {
  /**
   * Symmetric key for authentication.
   */
  symmetricKey?: SymmetricKey;
}

/**
 * Azure container mapping of the endpoint.
 */
export interface AzureContainerInfo {
  /**
   * ID of the Storage account credential to be used for accessing storage.
   */
  storageAccountCredentialId: string;
  /**
   * Container name (Based on the data format specified, represents the name of Azure file/ Page
   * blob / Block blob).
   */
  containerName: string;
  /**
   * Storage format used for the file represented by the share. Possible values include:
   * 'BlockBlob', 'PageBlob', 'AzureFile'
   */
  dataFormat: string;
}

/**
 * The bandwidth schedule details.
 */
export interface BandwidthSchedule extends ARMBaseModel {
  /**
   * The start time of the schedule in UTC.
   */
  start: string;
  /**
   * The stop time of the schedule in UTC.
   */
  stop: string;
  /**
   * The bandwidth rate in Mbps.
   */
  rateInMbps: number;
  /**
   * The days of the week when this schedule is applicable.
   */
  days: string[];
}

/**
 * The mapping between a particular client ip and the type of access client has on the NFS share.
 */
export interface ClientAccessRight {
  /**
   * Ip of the client.
   */
  client: string;
  /**
   * Type of access to be allowed for the client. Possible values include: 'NoAccess', 'ReadOnly',
   * 'ReadWrite'
   */
  accessPermission: string;
}

/**
 * Contains all the contact details of the customer.
 */
export interface ContactDetails {
  /**
   * Gets or sets the contact person.
   */
  contactPerson: string;
  /**
   * Gets or sets the name of the company.
   */
  companyName: string;
  /**
   * Gets or sets the phone number.
   */
  phone: string;
  /**
   * Gets or sets the email list.
   */
  emailList: string[];
}

/**
 * The SKU type.
 */
export interface Sku {
  /**
   * Sku name. Possible values include: 'Gateway', 'Edge'
   */
  name?: string;
  /**
   * The SKU tier. This is based on the SKU name. Possible values include: 'Standard'
   */
  tier?: string;
}

/**
 * The Data Box Edge/Gateway device.
 */
export interface DataBoxEdgeDevice extends ARMBaseModel {
  /**
   * The location of the device. This will be one of the supported and registered Azure Geo Regions
   * (e.g. West US, East US, Southeast Asia, etc.). The geo region of a device cannot be changed
   * once it is created, but if an identical geo region is specified on update the request will
   * succeed.
   */
  location: string;
  /**
   * The list of tags that describe the device. These tags can be used in viewing and grouping this
   * device (across resource groups).
   */
  tags?: { [propertyName: string]: string };
  /**
   * The sku type.
   */
  sku?: Sku;
  /**
   * The etag of the devices.
   */
  etag?: string;
  /**
   * The status of the Data Box Edge/Gateway device. Possible values include: 'ReadyToSetup',
   * 'Online', 'Offline', 'NeedsAttention', 'Disconnected', 'PartiallyDisconnected'
   */
  dataBoxEdgeDeviceStatus?: string;
  /**
   * The Serial Number of Data Box Edge/Gateway device.
   */
  readonly serialNumber?: string;
  /**
   * The Description of the Data Box Edge/Gateway device.
   */
  description?: string;
  /**
   * The description of the Data Box Edge/Gateway device model.
   */
  modelDescription?: string;
  /**
   * The type of the Data Box Edge/Gateway device. Possible values include: 'DataBoxEdgeDevice'
   */
  readonly deviceType?: string;
  /**
   * The Data Box Edge/Gateway device name.
   */
  friendlyName?: string;
  /**
   * The Data Box Edge/Gateway device culture.
   */
  readonly culture?: string;
  /**
   * The Data Box Edge/Gateway device model.
   */
  readonly deviceModel?: string;
  /**
   * The Data Box Edge/Gateway device software version.
   */
  readonly deviceSoftwareVersion?: string;
  /**
   * The Data Box Edge/Gateway device local capacity in MB.
   */
  readonly deviceLocalCapacity?: number;
  /**
   * The Data Box Edge/Gateway device timezone.
   */
  readonly timeZone?: string;
  /**
   * The device software version number of the device (eg: 1.2.18105.6).
   */
  readonly deviceHcsVersion?: string;
  /**
   * Type of compute roles configured.
   */
  readonly configuredRoleTypes?: string[];
}

/**
 * The extended Info of the Data Box Edge/Gateway device.
 */
export interface DataBoxEdgeDeviceExtendedInfo extends ARMBaseModel {
  /**
   * The Channel Integrity Key (CIK) of the device.
   */
  integrityKey: string;
  /**
   * The certificate thumbprint that was used to encrypt the Channel Integrity Key (CIK).
   */
  encryptionKeyThumbprint?: string;
  /**
   * The Channel Integrity Key (CIK) of the device.
   */
  encryptionKey?: string;
  /**
   * The Resource Id of the Resource.
   */
  readonly resourceKey?: string;
}

/**
 * The Data Box Edge/Gateway device patch.
 */
export interface DataBoxEdgeDevicePatch {
  /**
   * The tags attached to the Data Box Edge/Gateway resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * File source details.
 */
export interface FileSourceInfo {
  /**
   * File share ID.
   */
  shareId: string;
}

/**
 * Compute role against which events will be raised.
 */
export interface RoleSinkInfo {
  /**
   * Compute role ID.
   */
  roleId: string;
}

/**
 * Trigger details.
 */
export interface Trigger extends ARMBaseModel {
  /**
   * Polymorphic Discriminator
   */
  kind: string;
}

/**
 * Trigger details.
 */
export interface FileEventTrigger extends Trigger {
  /**
   * File event source details.
   */
  sourceInfo?: FileSourceInfo;
  /**
   * Role Sink info.
   */
  sinkInfo?: RoleSinkInfo;
  /**
   * Custom context tag, typically used to co-relate the trigger against its usage. Eg. If a
   * PeriodicTimer trigger may be intended for certain specific IOT modules in device, the tag can
   * be the name/image url of the module.
   */
  customContextTag?: string;
}

/**
 * Metadata of IoT device/IoT edge device to be configured.
 */
export interface IoTDeviceInfo {
  /**
   * Id of the IoT device/edge device.
   */
  deviceId: string;
  /**
   * Host name for IoT hub which is associated to the device.
   */
  ioTHostHub: string;
  /**
   * IoT device authentication info.
   */
  authentication?: Authentication;
}

/**
 * The share mount point.
 */
export interface MountPointMap {
  /**
   * ID of the share which is mounted to role VM.
   */
  shareId: string;
  /**
   * ID of the role to which share is mounted.
   */
  readonly roleId?: string;
  /**
   * Mount point for the share.
   */
  readonly mountPoint?: string;
  /**
   * Role type. Possible values include: 'IOT', 'ASA', 'Functions', 'Cognitive'
   */
  readonly roleType?: string;
}

/**
 * Compute role.
 */
export interface Role extends ARMBaseModel {
  /**
   * Polymorphic Discriminator
   */
  kind: string;
}

/**
 * Compute role.
 */
export interface IoTRole extends Role {
  /**
   * Host OS which IoT role support. Possible values include: 'Windows', 'Linux'
   */
  hostPlatform: string;
  /**
   * IoT device metadata to which data box edge device needs to be connected.
   */
  ioTDeviceDetails: IoTDeviceInfo;
  /**
   * IoT edge device to which the IoT role needs to be configured.
   */
  ioTEdgeDeviceDetails: IoTDeviceInfo;
  /**
   * Mount points of shares in role(s).
   */
  shareMappings?: MountPointMap[];
  /**
   * Role status. Possible values include: 'Enabled', 'Disabled'
   */
  roleStatus: string;
}

/**
 * Details related to the IPv4 address configuration.
 */
export interface Ipv4Config {
  /**
   * The IPv4 address of the network adapter.
   */
  readonly ipAddress?: string;
  /**
   * The IPv4 subnet of the network adapter.
   */
  readonly subnet?: string;
  /**
   * The IPv4 gateway of the network adapter.
   */
  readonly gateway?: string;
}

/**
 * Details related to the IPv6 address configuration.
 */
export interface Ipv6Config {
  /**
   * The IPv6 address of the network adapter.
   */
  readonly ipAddress?: string;
  /**
   * The IPv6 prefix of the network adapter.
   */
  readonly prefixLength?: number;
  /**
   * The IPv6 gateway of the network adapter.
   */
  readonly gateway?: string;
}

/**
 * The job error items.
 */
export interface JobErrorItem {
  /**
   * The recommended actions.
   */
  readonly recommendations?: string[];
  /**
   * The code intended for programmatic access.
   */
  readonly code?: string;
  /**
   * The message intended to describe the error in detail.
   */
  readonly message?: string;
}

/**
 * The job error information containing List of JobErrorItem.
 */
export interface JobErrorDetails {
  /**
   * The error details.
   */
  readonly errorDetails?: JobErrorItem[];
  /**
   * The code intended for programmatic access.
   */
  readonly code?: string;
  /**
   * The message intended to describe the error in detail.
   */
  readonly message?: string;
}

/**
 * Details about the download progress of update.
 */
export interface UpdateDownloadProgress {
  /**
   * The download phase. Possible values include: 'Unknown', 'Initializing', 'Downloading',
   * 'Verifying'
   */
  readonly downloadPhase?: string;
  /**
   * Percentage of completion.
   */
  readonly percentComplete?: number;
  /**
   * Total bytes to download.
   */
  readonly totalBytesToDownload?: number;
  /**
   * Total bytes downloaded.
   */
  readonly totalBytesDownloaded?: number;
  /**
   * Number of updates to download.
   */
  readonly numberOfUpdatesToDownload?: number;
  /**
   * Number of updates downloaded.
   */
  readonly numberOfUpdatesDownloaded?: number;
}

/**
 * Details about the progress during installation of updates.
 */
export interface UpdateInstallProgress {
  /**
   * Percentage of completion.
   */
  readonly percentComplete?: number;
  /**
   * Number of updates to install.
   */
  readonly numberOfUpdatesToInstall?: number;
  /**
   * Number of updates installed.
   */
  readonly numberOfUpdatesInstalled?: number;
}

/**
 * A device job.
 */
export interface Job {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The name of the object.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
  /**
   * The current status of the job. Possible values include: 'Invalid', 'Running', 'Succeeded',
   * 'Failed', 'Canceled', 'Paused', 'Scheduled'
   */
  readonly status?: string;
  /**
   * The UTC datetime at which the job was started.
   */
  readonly startTime?: Date;
  /**
   * The UTC datetime at which the job completed.
   */
  readonly endTime?: Date;
  /**
   * The percentage of the job that is already complete.
   */
  readonly percentComplete?: number;
  /**
   * The Error details.
   */
  readonly error?: JobErrorDetails;
  /**
   * The type of the job. Possible values include: 'Invalid', 'ScanForUpdates', 'DownloadUpdates',
   * 'InstallUpdates', 'RefreshShare'
   */
  readonly jobType?: string;
  /**
   * Current stage of the update operation. Possible values include: 'Unknown', 'Initial',
   * 'ScanStarted', 'ScanComplete', 'ScanFailed', 'DownloadStarted', 'DownloadComplete',
   * 'DownloadFailed', 'InstallStarted', 'InstallComplete', 'InstallFailed', 'RebootInitiated',
   * 'Success', 'Failure', 'RescanStarted', 'RescanComplete', 'RescanFailed'
   */
  readonly currentStage?: string;
  /**
   * The download progress.
   */
  readonly downloadProgress?: UpdateDownloadProgress;
  /**
   * The install progress.
   */
  readonly installProgress?: UpdateInstallProgress;
  /**
   * Total number of errors encountered during the refresh process.
   */
  readonly totalRefreshErrors?: number;
  /**
   * Local Share/Remote Container relative path to the error manifest file of the refresh.
   */
  readonly errorManifestFile?: string;
  /**
   * ARM id of the Share on which the Refresh operation was done.
   */
  readonly shareId?: string;
  /**
   * If only subfolders need to be refreshed, then the sub folder path inside the share. Empty
   * otherwise.
   */
  folder?: string;
}

/**
 * Metric Dimension v1.
 */
export interface MetricDimensionV1 {
  /**
   * Name of the metrics dimension.
   */
  name?: string;
  /**
   * Display name of the metrics dimension.
   */
  displayName?: string;
  /**
   * To be exported to shoe box.
   */
  toBeExportedForShoebox?: boolean;
}

/**
 * Metric specification version 1.
 */
export interface MetricSpecificationV1 {
  /**
   * Name of the metric.
   */
  name?: string;
  /**
   * Display name of the metric.
   */
  displayName?: string;
  /**
   * Description of the metric to be displayed.
   */
  displayDescription?: string;
  /**
   * Metric units. Possible values include: 'NotSpecified', 'Percent', 'Count', 'Seconds',
   * 'Milliseconds', 'Bytes', 'BytesPerSecond', 'CountPerSecond'
   */
  unit?: string;
  /**
   * Metric aggregation type. Possible values include: 'NotSpecified', 'None', 'Average',
   * 'Minimum', 'Maximum', 'Total', 'Count'
   */
  aggregationType?: string;
  /**
   * Metric dimensions, other than default dimension which is resource.
   */
  dimensions?: MetricDimensionV1[];
  /**
   * set true to fill the gaps with zero.
   */
  fillGapWithZero?: boolean;
  /**
   * Metric category. Possible values include: 'Capacity', 'Transaction'
   */
  category?: string;
  /**
   * Resource name override.
   */
  resourceIdDimensionNameOverride?: string;
  /**
   * Support granularity of metrics.
   */
  supportedTimeGrainTypes?: string[];
  /**
   * Support metric aggregation type.
   */
  supportedAggregationTypes?: string[];
}

/**
 * The network adapter position.
 */
export interface NetworkAdapterPosition {
  /**
   * The network group. Possible values include: 'None', 'NonRDMA', 'RDMA'
   */
  readonly networkGroup?: string;
  /**
   * The port.
   */
  readonly port?: number;
}

/**
 * Represents the networkAdapter on a device.
 */
export interface NetworkAdapter {
  /**
   * Instance ID of network adapter.
   */
  readonly adapterId?: string;
  /**
   * Hardware position of network adapter.
   */
  readonly adapterPosition?: NetworkAdapterPosition;
  /**
   * Logical index of the adapter.
   */
  readonly index?: number;
  /**
   * Node ID of the network adapter.
   */
  readonly nodeId?: string;
  /**
   * Network Adapter Name.
   */
  readonly networkAdapterName?: string;
  /**
   * Hardware label for the adapter.
   */
  readonly label?: string;
  /**
   * MAC Address.
   */
  readonly macAddress?: string;
  /**
   * Link Speed.
   */
  readonly linkSpeed?: number;
  /**
   * Value indicating whether this adapter is valid. Possible values include: 'Inactive', 'Active'
   */
  readonly status?: string;
  /**
   * Value indicating whether this adapter is RDMA Capable. Possible values include: 'Incapable',
   * 'Capable'
   */
  rdmaStatus?: string;
  /**
   * Value indicating whether this adapter has DHCP Enabled. Possible values include: 'Disabled',
   * 'Enabled'
   */
  dhcpStatus?: string;
  /**
   * The IPv4 configuration of the network adapter.
   */
  readonly ipv4Configuration?: Ipv4Config;
  /**
   * The IPv6 configuration of the network adapter.
   */
  readonly ipv6Configuration?: Ipv6Config;
  /**
   * The IPv6 local address.
   */
  readonly ipv6LinkLocalAddress?: string;
  /**
   * The list DNS Servers of the device.
   */
  readonly dnsServers?: string[];
}

/**
 * The NetworkSettings of a device.
 */
export interface NetworkSettings extends ARMBaseModel {
  /**
   * The network adapter list on the device.
   */
  readonly networkAdapters?: NetworkAdapter[];
}

/**
 * Operation display properties.
 */
export interface OperationDisplay {
  /**
   * Provider name.
   */
  provider?: string;
  /**
   * The type of resource in which the operation is performed.
   */
  resource?: string;
  /**
   * Operation to be performed on the resource.
   */
  operation?: string;
  /**
   * Description of the operation to be performed.
   */
  description?: string;
}

/**
 * Service specification.
 */
export interface ServiceSpecification {
  /**
   * Metric specification as defined by shoebox.
   */
  metricSpecifications?: MetricSpecificationV1[];
}

/**
 * Operations.
 */
export interface Operation {
  /**
   * Name of the operation.
   */
  name?: string;
  /**
   * Properties to displayed for the operation.
   */
  display?: OperationDisplay;
  /**
   * Origin of the operation.
   */
  origin?: string;
  /**
   * Service specification.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Represents a single status change.
 */
export interface OrderStatus {
  /**
   * Status of the order pertaining to the allowed StatusTypes. Possible values include:
   * 'Untracked', 'AwaitingFulfilment', 'AwaitingPreparation', 'AwaitingShipment', 'Shipped',
   * 'Arriving', 'Delivered', 'ReplacementRequested', 'LostDevice', 'Declined', 'ReturnInitiated',
   * 'AwaitingReturnShipment', 'ShippedBack', 'CollectedAtMicrosoft'
   */
  status: string;
  /**
   * Time of status update.
   */
  readonly updateDateTime?: Date;
  /**
   * Comments related to this status change.
   */
  comments?: string;
}

/**
 * Tracking courier information.
 */
export interface TrackingInfo {
  /**
   * Serial number of the device being tracked.
   */
  serialNumber?: string;
  /**
   * Name of the carrier used in the delivery.
   */
  carrierName?: string;
  /**
   * Tracking ID of the shipment.
   */
  trackingId?: string;
  /**
   * Tracking URL of the shipment.
   */
  trackingUrl?: string;
}

/**
 * The order details.
 */
export interface Order extends ARMBaseModel {
  /**
   * The contact details.
   */
  contactInformation?: ContactDetails;
  /**
   * The shipping address.
   */
  shippingAddress?: Address;
  /**
   * Current status of the Order.
   */
  changeStatusTo?: OrderStatus;
  /**
   * List of status changes in the order.
   */
  readonly orderHistory?: OrderStatus[];
  /**
   * Serial number of the device.
   */
  readonly serialNumber?: string;
  /**
   * Tracking information related to the packages being delivered to the customer whether original
   * or replacement devices.
   */
  readonly deliveryTrackingInfo?: TrackingInfo[];
  /**
   * Tracking information related to the package being returned from the customer whether original
   * or replacement devices.
   */
  readonly returnTrackingInfo?: TrackingInfo[];
}

/**
 * Periodic timer event source.
 */
export interface PeriodicTimerSourceInfo {
  /**
   * Time time [UTC] of the day, from which the trigger will be valid. Schedule will be computed
   * with reference to the time specified.
   */
  startTime: Date;
  /**
   * Periodic frequency at which timer event needs to be raised. Supports Daily, Hourly, Minutes
   * and seconds.
   */
  schedule: string;
  /**
   * Topic with which periodic events needs to be published to IOT device.
   */
  topic?: string;
}

/**
 * Trigger details.
 */
export interface PeriodicTimerEventTrigger extends Trigger {
  /**
   * Periodic timer details.
   */
  sourceInfo?: PeriodicTimerSourceInfo;
  /**
   * Role Sink info.
   */
  sinkInfo?: RoleSinkInfo;
  /**
   * Custom context tag, typically used to co-relate the trigger against its usage. Eg. If a
   * PeriodicTimer trigger may be intended for certain specific IOT modules in device, the tag can
   * be the name/image url of the module.
   */
  customContextTag?: string;
}

/**
 * Fields for tracking refresh job on the share.
 */
export interface RefreshDetails {
  /**
   * If a RefreshShare job is currently inprogress on this share - this field indicates the ArmId
   * of that job. Empty otherwise.
   */
  inProgressRefreshJobId?: string;
  /**
   * Indicates the job completed time of the last refresh job on this particular share, if any.
   * This could be a failed job or a successful job.
   */
  lastCompletedRefreshJobTimeInUTC?: Date;
  /**
   * Indicates the relative path of the error xml for the last refresh job on this particular
   * share, if any.
   * This could be a failed job or a successful job.
   */
  errorManifestFile?: string;
  /**
   * Indicates the id of the last refresh job on this particular share,if any.
   * This could be a failed job or a successful job.
   */
  lastJob?: string;
}

/**
 * The security settings of a device.
 */
export interface SecuritySettings extends ARMBaseModel {
  /**
   * Device administrator password as an encrypted string (encrypted using RSA PKCS #1) is used to
   * log into the  local web UI of the device. Actual password could have at least 8 characters
   * that are a combination of  uppercase, lowercase, numeric, and special characters.
   */
  deviceAdminPassword: AsymmetricEncryptedSecret;
}

/**
 * The mapping between a particular user and the type of access they have on the SMB share.
 */
export interface UserAccessRight {
  /**
   * Id of the user (already existing in the device).
   */
  userId: string;
  /**
   * Type of access to be allowed for the user. Possible values include: 'Change', 'Read', 'Custom'
   */
  accessType: string;
}

/**
 * Represents a share on the  Data Box Edge/Gateway device.
 */
export interface Share extends ARMBaseModel {
  /**
   * Description for the share.
   */
  description?: string;
  /**
   * Current status of the share. Possible values include: 'Online', 'Offline'
   */
  shareStatus: string;
  /**
   * Current monitoring status of the share. Possible values include: 'Enabled', 'Disabled'
   */
  monitoringStatus: string;
  /**
   * Azure container mapping for the share.
   */
  azureContainerInfo?: AzureContainerInfo;
  /**
   * Access protocol to be used by the share. Possible values include: 'SMB', 'NFS'
   */
  accessProtocol: string;
  /**
   * Mapping of Users and corresponding access rights on the share (mandatory for SMB protocol).
   */
  userAccessRights?: UserAccessRight[];
  /**
   * List of IP addresses and corresponding access rights on the share(mandatory for NFS protocol).
   */
  clientAccessRights?: ClientAccessRight[];
  /**
   * Details of the refresh job on this share.
   */
  refreshDetails?: RefreshDetails;
  /**
   * Share mount point to the role.
   */
  readonly shareMappings?: MountPointMap[];
  /**
   * Data policy of the share. Possible values include: 'Cloud', 'Local'
   */
  dataPolicy?: string;
}

/**
 * Specifies the mapping between this particular user and the type of access he has on shares on
 * this device.
 */
export interface ShareAccessRight {
  /**
   * Id of the share.
   */
  shareId: string;
  /**
   * Type of access to be allowed on the share for this user. Possible values include: 'Change',
   * 'Read', 'Custom'
   */
  accessType: string;
}

/**
 * The storage account credential.
 */
export interface StorageAccountCredential extends ARMBaseModel {
  /**
   * Alias for the storage account.
   */
  alias: string;
  /**
   * UserName for the storage account.
   */
  userName?: string;
  /**
   * Encrypted storage key.
   */
  accountKey?: AsymmetricEncryptedSecret;
  /**
   * ConnectionString for the storage account. This needs to be specified if UserName/AccountKey
   * are not specified.
   */
  connectionString?: string;
  /**
   * Signifies whether SSL needs to be enabled or not. Possible values include: 'Enabled',
   * 'Disabled'
   */
  sslStatus: string;
  /**
   * Blob end point for private clouds.
   */
  blobDomainName?: string;
  /**
   * Type of storage accessed on the storage account. Possible values include:
   * 'GeneralPurposeStorage', 'BlobStorage'
   */
  accountType: string;
}

/**
 * Details about ongoing updates and availability of updates on the device.
 */
export interface UpdateSummary extends ARMBaseModel {
  /**
   * The current version of the device, of format: 1.2.17312.13.
   */
  deviceVersionNumber?: string;
  /**
   * The current version of the device represented in text format.
   */
  friendlyDeviceVersionName?: string;
  /**
   * The last time when a scan was done on the device.
   */
  deviceLastScannedDateTime?: Date;
  /**
   * The time when the last scan job was completed (success/cancelled/failed) on the appliance.
   */
  lastCompletedScanJobDateTime?: Date;
  /**
   * The time when the last Download job was completed (success/cancelled/failed) on the appliance.
   */
  readonly lastCompletedDownloadJobDateTime?: Date;
  /**
   * The time when the last Install job was completed (success/cancelled/failed) on the appliance.
   */
  readonly lastCompletedInstallJobDateTime?: Date;
  /**
   * Count of updates that are available for the current device version as per the last scan on the
   * device.
   */
  readonly totalNumberOfUpdatesAvailable?: number;
  /**
   * The total number of items pending download.
   */
  readonly totalNumberOfUpdatesPendingDownload?: number;
  /**
   * The total number of items pending install.
   */
  readonly totalNumberOfUpdatesPendingInstall?: number;
  /**
   * Indicates if updates are available and at least one of the update items detected needs a
   * reboot. Possible values include: 'NeverReboots', 'RequiresReboot', 'RequestReboot'
   */
  readonly rebootBehavior?: string;
  /**
   * The current update operation. Possible values include: 'None', 'Scan', 'Download', 'Install'
   */
  readonly ongoingUpdateOperation?: string;
  /**
   * The Job ID of the download job if a download is in progress.
   */
  readonly inProgressDownloadJobId?: string;
  /**
   * The Job ID of the install job if an install is in progress.
   */
  readonly inProgressInstallJobId?: string;
  /**
   * The time when the currently running download (if any) started.
   */
  readonly inProgressDownloadJobStartedDateTime?: Date;
  /**
   * The time when the currently running install (if any) started.
   */
  readonly inProgressInstallJobStartedDateTime?: Date;
  /**
   * The list of update titles which are available for install.
   */
  readonly updateTitles?: string[];
  /**
   * The total size of updates available for download in bytes.
   */
  readonly totalUpdateSizeInBytes?: number;
}

/**
 * The Upload certificate request.
 */
export interface UploadCertificateRequest {
  /**
   * The authentication type. Possible values include: 'Invalid', 'AzureActiveDirectory'
   */
  authenticationType?: string;
  /**
   * The base64 encoded certificate raw data.
   */
  certificate: string;
}

/**
 * The upload registration certificate response.
 */
export interface UploadCertificateResponse {
  /**
   * Specifies the Authentication type. Possible values include: 'Invalid', 'AzureActiveDirectory'
   */
  authType?: string;
  /**
   * The resource ID of the edge device.
   */
  resourceId: string;
  /**
   * Azure Active Directory tenant authority.
   */
  aadAuthority: string;
  /**
   * Azure Active Directory tenant ID.
   */
  aadTenantId: string;
  /**
   * Azure Active Directory service principal client ID.
   */
  servicePrincipalClientId: string;
  /**
   * Azure Active Directory service principal Object ID.
   */
  servicePrincipalObjectId: string;
  /**
   * The Azure Management Endpoint Audience.
   */
  azureManagementEndpointAudience: string;
}

/**
 * Represents a user who has access to one or more shares on the Edge storage device.
 */
export interface User extends ARMBaseModel {
  /**
   * The details of the password specified for the user.
   */
  encryptedPassword?: AsymmetricEncryptedSecret;
  /**
   * List of shares that the user has rights on. This field should not be specified during user
   * creation.
   */
  shareAccessRights?: ShareAccessRight[];
}

/**
 * Class for set of operations used for discovery of available provider operations.
 */
export interface OperationsList extends Array<Operation> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * The collection of Data Box Edge/Gateway devices.
 */
export interface DataBoxEdgeDeviceList extends Array<DataBoxEdgeDevice> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Collection of Alerts.
 */
export interface AlertList extends Array<Alert> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The collection of bandwidth schedules.
 */
export interface BandwidthSchedulesList extends Array<BandwidthSchedule> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * List of order entities.
 */
export interface OrderList extends Array<Order> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Collection of all role on the data box edge device.
 */
export interface RoleList extends Array<Role> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Collection of all shares on the Data Box Edge/Gateway device.
 */
export interface ShareList extends Array<Share> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * The collection of storage account credential entities.
 */
export interface StorageAccountCredentialList extends Array<StorageAccountCredential> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Collection of all trigger on the data box edge device.
 */
export interface TriggerList extends Array<Trigger> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}

/**
 * Collection of users.
 */
export interface UserList extends Array<User> {
  /**
   * Link to the next set of results.
   */
  readonly nextLink?: string;
}
