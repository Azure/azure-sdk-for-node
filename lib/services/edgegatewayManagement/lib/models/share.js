/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents a share on the  Data Box Edge/Gateway device.
 *
 * @extends models['ARMBaseModel']
 */
class Share extends models['ARMBaseModel'] {
  /**
   * Create a Share.
   * @property {string} [description] Description for the share.
   * @property {string} shareStatus Current status of the share. Possible
   * values include: 'Online', 'Offline'
   * @property {string} monitoringStatus Current monitoring status of the
   * share. Possible values include: 'Enabled', 'Disabled'
   * @property {object} [azureContainerInfo] Azure container mapping for the
   * share.
   * @property {string} [azureContainerInfo.storageAccountCredentialId] ID of
   * the Storage account credential to be used for accessing storage.
   * @property {string} [azureContainerInfo.containerName] Container name
   * (Based on the data format specified, represents the name of Azure file/
   * Page blob / Block blob).
   * @property {string} [azureContainerInfo.dataFormat] Storage format used for
   * the file represented by the share. Possible values include: 'BlockBlob',
   * 'PageBlob', 'AzureFile'
   * @property {string} accessProtocol Access protocol to be used by the share.
   * Possible values include: 'SMB', 'NFS'
   * @property {array} [userAccessRights] Mapping of Users and corresponding
   * access rights on the share (mandatory for SMB protocol).
   * @property {array} [clientAccessRights] List of IP addresses and
   * corresponding access rights on the share(mandatory for NFS protocol).
   * @property {object} [refreshDetails] Details of the refresh job on this
   * share.
   * @property {string} [refreshDetails.inProgressRefreshJobId] If a
   * RefreshShare job is currently inprogress on this share - this field
   * indicates the ArmId of that job. Empty otherwise.
   * @property {date} [refreshDetails.lastCompletedRefreshJobTimeInUTC]
   * Indicates the job completed time of the last refresh job on this
   * particular share, if any.
   * This could be a failed job or a successful job.
   * @property {string} [refreshDetails.errorManifestFile] Indicates the
   * relative path of the error xml for the last refresh job on this particular
   * share, if any.
   * This could be a failed job or a successful job.
   * @property {string} [refreshDetails.lastJob] Indicates the id of the last
   * refresh job on this particular share,if any.
   * This could be a failed job or a successful job.
   * @property {array} [shareMappings] Share mount point to the role.
   * @property {string} [dataPolicy] Data policy of the share. Possible values
   * include: 'Cloud', 'Local'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Share
   *
   * @returns {object} metadata of Share
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Share',
      type: {
        name: 'Composite',
        className: 'Share',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          shareStatus: {
            required: true,
            serializedName: 'properties.shareStatus',
            type: {
              name: 'String'
            }
          },
          monitoringStatus: {
            required: true,
            serializedName: 'properties.monitoringStatus',
            type: {
              name: 'String'
            }
          },
          azureContainerInfo: {
            required: false,
            serializedName: 'properties.azureContainerInfo',
            type: {
              name: 'Composite',
              className: 'AzureContainerInfo'
            }
          },
          accessProtocol: {
            required: true,
            serializedName: 'properties.accessProtocol',
            type: {
              name: 'String'
            }
          },
          userAccessRights: {
            required: false,
            serializedName: 'properties.userAccessRights',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'UserAccessRightElementType',
                  type: {
                    name: 'Composite',
                    className: 'UserAccessRight'
                  }
              }
            }
          },
          clientAccessRights: {
            required: false,
            serializedName: 'properties.clientAccessRights',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientAccessRightElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientAccessRight'
                  }
              }
            }
          },
          refreshDetails: {
            required: false,
            serializedName: 'properties.refreshDetails',
            type: {
              name: 'Composite',
              className: 'RefreshDetails'
            }
          },
          shareMappings: {
            required: false,
            readOnly: true,
            serializedName: 'properties.shareMappings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MountPointMapElementType',
                  type: {
                    name: 'Composite',
                    className: 'MountPointMap'
                  }
              }
            }
          },
          dataPolicy: {
            required: false,
            serializedName: 'properties.dataPolicy',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Share;
