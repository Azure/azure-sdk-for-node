/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Compute role.
 *
 * @extends models['Role']
 */
class IoTRole extends models['Role'] {
  /**
   * Create a IoTRole.
   * @property {string} hostPlatform Host OS which IoT role support. Possible
   * values include: 'Windows', 'Linux'
   * @property {object} ioTDeviceDetails IoT device metadata to which data box
   * edge device needs to be connected.
   * @property {string} [ioTDeviceDetails.deviceId] Id of the IoT device/edge
   * device.
   * @property {string} [ioTDeviceDetails.ioTHostHub] Host name for IoT hub
   * which is associated to the device.
   * @property {object} [ioTDeviceDetails.authentication] IoT device
   * authentication info.
   * @property {object} [ioTDeviceDetails.authentication.symmetricKey]
   * Symmetric key for authentication.
   * @property {object}
   * [ioTDeviceDetails.authentication.symmetricKey.connectionString] Connection
   * string based on symmetric key.
   * @property {string}
   * [ioTDeviceDetails.authentication.symmetricKey.connectionString.value] The
   * value of the secret.
   * @property {string}
   * [ioTDeviceDetails.authentication.symmetricKey.connectionString.encryptionCertThumbprint]
   * Thumbprint certificate that was used to encrypt "Value". If the value in
   * unencrypted, it will be null.
   * @property {string}
   * [ioTDeviceDetails.authentication.symmetricKey.connectionString.encryptionAlgorithm]
   * The algorithm used to encrypt "Value". Possible values include: 'None',
   * 'AES256', 'RSAES_PKCS1_v_1_5'
   * @property {object} ioTEdgeDeviceDetails IoT edge device to which the IoT
   * role needs to be configured.
   * @property {string} [ioTEdgeDeviceDetails.deviceId] Id of the IoT
   * device/edge device.
   * @property {string} [ioTEdgeDeviceDetails.ioTHostHub] Host name for IoT hub
   * which is associated to the device.
   * @property {object} [ioTEdgeDeviceDetails.authentication] IoT device
   * authentication info.
   * @property {object} [ioTEdgeDeviceDetails.authentication.symmetricKey]
   * Symmetric key for authentication.
   * @property {object}
   * [ioTEdgeDeviceDetails.authentication.symmetricKey.connectionString]
   * Connection string based on symmetric key.
   * @property {string}
   * [ioTEdgeDeviceDetails.authentication.symmetricKey.connectionString.value]
   * The value of the secret.
   * @property {string}
   * [ioTEdgeDeviceDetails.authentication.symmetricKey.connectionString.encryptionCertThumbprint]
   * Thumbprint certificate that was used to encrypt "Value". If the value in
   * unencrypted, it will be null.
   * @property {string}
   * [ioTEdgeDeviceDetails.authentication.symmetricKey.connectionString.encryptionAlgorithm]
   * The algorithm used to encrypt "Value". Possible values include: 'None',
   * 'AES256', 'RSAES_PKCS1_v_1_5'
   * @property {array} [shareMappings] Mount points of shares in role(s).
   * @property {string} roleStatus Role status. Possible values include:
   * 'Enabled', 'Disabled'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of IoTRole
   *
   * @returns {object} metadata of IoTRole
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'IOT',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'BaseResource',
        className: 'IoTRole',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          hostPlatform: {
            required: true,
            serializedName: 'properties.hostPlatform',
            type: {
              name: 'String'
            }
          },
          ioTDeviceDetails: {
            required: true,
            serializedName: 'properties.ioTDeviceDetails',
            type: {
              name: 'Composite',
              className: 'IoTDeviceInfo'
            }
          },
          ioTEdgeDeviceDetails: {
            required: true,
            serializedName: 'properties.ioTEdgeDeviceDetails',
            type: {
              name: 'Composite',
              className: 'IoTDeviceInfo'
            }
          },
          shareMappings: {
            required: false,
            serializedName: 'properties.shareMappings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MountPointMapElementType',
                  type: {
                    name: 'Composite',
                    className: 'MountPointMap'
                  }
              }
            }
          },
          roleStatus: {
            required: true,
            serializedName: 'properties.roleStatus',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = IoTRole;
