/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Symmetric Key for authentication.
 *
 */
class SymmetricKey {
  /**
   * Create a SymmetricKey.
   * @property {object} [connectionString] Connection string based on symmetric
   * key.
   * @property {string} [connectionString.value] The value of the secret.
   * @property {string} [connectionString.encryptionCertThumbprint] Thumbprint
   * certificate that was used to encrypt "Value". If the value in unencrypted,
   * it will be null.
   * @property {string} [connectionString.encryptionAlgorithm] The algorithm
   * used to encrypt "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   */
  constructor() {
  }

  /**
   * Defines the metadata of SymmetricKey
   *
   * @returns {object} metadata of SymmetricKey
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SymmetricKey',
      type: {
        name: 'Composite',
        className: 'SymmetricKey',
        modelProperties: {
          connectionString: {
            required: false,
            serializedName: 'connectionString',
            type: {
              name: 'Composite',
              className: 'AsymmetricEncryptedSecret'
            }
          }
        }
      }
    };
  }
}

module.exports = SymmetricKey;
