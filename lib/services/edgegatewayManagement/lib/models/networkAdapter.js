/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents the networkAdapter on a device.
 *
 */
class NetworkAdapter {
  /**
   * Create a NetworkAdapter.
   * @property {string} [adapterId] Instance ID of network adapter.
   * @property {object} [adapterPosition] Hardware position of network adapter.
   * @property {string} [adapterPosition.networkGroup] The network group.
   * Possible values include: 'None', 'NonRDMA', 'RDMA'
   * @property {number} [adapterPosition.port] The port.
   * @property {number} [index] Logical index of the adapter.
   * @property {string} [nodeId] Node ID of the network adapter.
   * @property {string} [networkAdapterName] Network Adapter Name.
   * @property {string} [label] Hardware label for the adapter.
   * @property {string} [macAddress] MAC Address.
   * @property {number} [linkSpeed] Link Speed.
   * @property {string} [status] Value indicating whether this adapter is
   * valid. Possible values include: 'Inactive', 'Active'
   * @property {string} [rdmaStatus] Value indicating whether this adapter is
   * RDMA Capable. Possible values include: 'Incapable', 'Capable'
   * @property {string} [dhcpStatus] Value indicating whether this adapter has
   * DHCP Enabled. Possible values include: 'Disabled', 'Enabled'
   * @property {object} [ipv4Configuration] The IPv4 configuration of the
   * network adapter.
   * @property {string} [ipv4Configuration.ipAddress] The IPv4 address of the
   * network adapter.
   * @property {string} [ipv4Configuration.subnet] The IPv4 subnet of the
   * network adapter.
   * @property {string} [ipv4Configuration.gateway] The IPv4 gateway of the
   * network adapter.
   * @property {object} [ipv6Configuration] The IPv6 configuration of the
   * network adapter.
   * @property {string} [ipv6Configuration.ipAddress] The IPv6 address of the
   * network adapter.
   * @property {number} [ipv6Configuration.prefixLength] The IPv6 prefix of the
   * network adapter.
   * @property {string} [ipv6Configuration.gateway] The IPv6 gateway of the
   * network adapter.
   * @property {string} [ipv6LinkLocalAddress] The IPv6 local address.
   * @property {array} [dnsServers] The list DNS Servers of the device.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NetworkAdapter
   *
   * @returns {object} metadata of NetworkAdapter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NetworkAdapter',
      type: {
        name: 'Composite',
        className: 'NetworkAdapter',
        modelProperties: {
          adapterId: {
            required: false,
            readOnly: true,
            serializedName: 'adapterId',
            type: {
              name: 'String'
            }
          },
          adapterPosition: {
            required: false,
            readOnly: true,
            serializedName: 'adapterPosition',
            type: {
              name: 'Composite',
              className: 'NetworkAdapterPosition'
            }
          },
          index: {
            required: false,
            readOnly: true,
            serializedName: 'index',
            type: {
              name: 'Number'
            }
          },
          nodeId: {
            required: false,
            readOnly: true,
            serializedName: 'nodeId',
            type: {
              name: 'String'
            }
          },
          networkAdapterName: {
            required: false,
            readOnly: true,
            serializedName: 'networkAdapterName',
            type: {
              name: 'String'
            }
          },
          label: {
            required: false,
            readOnly: true,
            serializedName: 'label',
            type: {
              name: 'String'
            }
          },
          macAddress: {
            required: false,
            readOnly: true,
            serializedName: 'macAddress',
            type: {
              name: 'String'
            }
          },
          linkSpeed: {
            required: false,
            readOnly: true,
            serializedName: 'linkSpeed',
            type: {
              name: 'Number'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          rdmaStatus: {
            required: false,
            serializedName: 'rdmaStatus',
            type: {
              name: 'String'
            }
          },
          dhcpStatus: {
            required: false,
            serializedName: 'dhcpStatus',
            type: {
              name: 'String'
            }
          },
          ipv4Configuration: {
            required: false,
            readOnly: true,
            serializedName: 'ipv4Configuration',
            type: {
              name: 'Composite',
              className: 'Ipv4Config'
            }
          },
          ipv6Configuration: {
            required: false,
            readOnly: true,
            serializedName: 'ipv6Configuration',
            type: {
              name: 'Composite',
              className: 'Ipv6Config'
            }
          },
          ipv6LinkLocalAddress: {
            required: false,
            readOnly: true,
            serializedName: 'ipv6LinkLocalAddress',
            type: {
              name: 'String'
            }
          },
          dnsServers: {
            required: false,
            readOnly: true,
            serializedName: 'dnsServers',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = NetworkAdapter;
