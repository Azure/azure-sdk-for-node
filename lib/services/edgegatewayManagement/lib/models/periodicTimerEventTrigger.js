/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Trigger details.
 *
 * @extends models['Trigger']
 */
class PeriodicTimerEventTrigger extends models['Trigger'] {
  /**
   * Create a PeriodicTimerEventTrigger.
   * @property {object} [sourceInfo] Periodic timer details.
   * @property {date} [sourceInfo.startTime] Time time [UTC] of the day, from
   * which the trigger will be valid. Schedule will be computed with reference
   * to the time specified.
   * @property {string} [sourceInfo.schedule] Periodic frequency at which timer
   * event needs to be raised. Supports Daily, Hourly, Minutes and seconds.
   * @property {string} [sourceInfo.topic] Topic with which periodic events
   * needs to be published to IOT device.
   * @property {object} [sinkInfo] Role Sink info.
   * @property {string} [sinkInfo.roleId] Compute role ID.
   * @property {string} [customContextTag] Custom context tag, typically used
   * to co-relate the trigger against its usage. Eg. If a PeriodicTimer trigger
   * may be intended for certain specific IOT modules in device, the tag can be
   * the name/image url of the module.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PeriodicTimerEventTrigger
   *
   * @returns {object} metadata of PeriodicTimerEventTrigger
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PeriodicTimerEvent',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'kind',
          clientName: 'kind'
        },
        uberParent: 'BaseResource',
        className: 'PeriodicTimerEventTrigger',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          sourceInfo: {
            required: false,
            serializedName: 'properties.sourceInfo',
            type: {
              name: 'Composite',
              className: 'PeriodicTimerSourceInfo'
            }
          },
          sinkInfo: {
            required: false,
            serializedName: 'properties.sinkInfo',
            type: {
              name: 'Composite',
              className: 'RoleSinkInfo'
            }
          },
          customContextTag: {
            required: false,
            serializedName: 'properties.customContextTag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PeriodicTimerEventTrigger;
