/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * A device job.
 *
 */
class Job {
  /**
   * Create a Job.
   * @property {string} [id] The path ID that uniquely identifies the object.
   * @property {string} [name] The name of the object.
   * @property {string} [type] The hierarchical type of the object.
   * @property {string} [status] The current status of the job. Possible values
   * include: 'Invalid', 'Running', 'Succeeded', 'Failed', 'Canceled',
   * 'Paused', 'Scheduled'
   * @property {date} [startTime] The UTC datetime at which the job was
   * started.
   * @property {date} [endTime] The UTC datetime at which the job completed.
   * @property {number} [percentComplete] The percentage of the job that is
   * already complete.
   * @property {object} [error] The Error details.
   * @property {array} [error.errorDetails] The error details.
   * @property {string} [error.code] The code intended for programmatic access.
   * @property {string} [error.message] The message intended to describe the
   * error in detail.
   * @property {string} [jobType] The type of the job. Possible values include:
   * 'Invalid', 'ScanForUpdates', 'DownloadUpdates', 'InstallUpdates',
   * 'RefreshShare'
   * @property {string} [currentStage] Current stage of the update operation.
   * Possible values include: 'Unknown', 'Initial', 'ScanStarted',
   * 'ScanComplete', 'ScanFailed', 'DownloadStarted', 'DownloadComplete',
   * 'DownloadFailed', 'InstallStarted', 'InstallComplete', 'InstallFailed',
   * 'RebootInitiated', 'Success', 'Failure', 'RescanStarted',
   * 'RescanComplete', 'RescanFailed'
   * @property {object} [downloadProgress] The download progress.
   * @property {string} [downloadProgress.downloadPhase] The download phase.
   * Possible values include: 'Unknown', 'Initializing', 'Downloading',
   * 'Verifying'
   * @property {number} [downloadProgress.percentComplete] Percentage of
   * completion.
   * @property {number} [downloadProgress.totalBytesToDownload] Total bytes to
   * download.
   * @property {number} [downloadProgress.totalBytesDownloaded] Total bytes
   * downloaded.
   * @property {number} [downloadProgress.numberOfUpdatesToDownload] Number of
   * updates to download.
   * @property {number} [downloadProgress.numberOfUpdatesDownloaded] Number of
   * updates downloaded.
   * @property {object} [installProgress] The install progress.
   * @property {number} [installProgress.percentComplete] Percentage of
   * completion.
   * @property {number} [installProgress.numberOfUpdatesToInstall] Number of
   * updates to install.
   * @property {number} [installProgress.numberOfUpdatesInstalled] Number of
   * updates installed.
   * @property {number} [totalRefreshErrors] Total number of errors encountered
   * during the refresh process.
   * @property {string} [errorManifestFile] Local Share/Remote Container
   * relative path to the error manifest file of the refresh.
   * @property {string} [shareId] ARM id of the Share on which the Refresh
   * operation was done.
   * @property {string} [folder] If only subfolders need to be refreshed, then
   * the sub folder path inside the share. Empty otherwise.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Job
   *
   * @returns {object} metadata of Job
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Job',
      type: {
        name: 'Composite',
        className: 'Job',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          startTime: {
            required: false,
            readOnly: true,
            serializedName: 'startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            readOnly: true,
            serializedName: 'endTime',
            type: {
              name: 'DateTime'
            }
          },
          percentComplete: {
            required: false,
            readOnly: true,
            serializedName: 'percentComplete',
            type: {
              name: 'Number'
            }
          },
          error: {
            required: false,
            readOnly: true,
            serializedName: 'error',
            type: {
              name: 'Composite',
              className: 'JobErrorDetails'
            }
          },
          jobType: {
            required: false,
            readOnly: true,
            serializedName: 'properties.jobType',
            type: {
              name: 'String'
            }
          },
          currentStage: {
            required: false,
            readOnly: true,
            serializedName: 'properties.currentStage',
            type: {
              name: 'String'
            }
          },
          downloadProgress: {
            required: false,
            readOnly: true,
            serializedName: 'properties.downloadProgress',
            type: {
              name: 'Composite',
              className: 'UpdateDownloadProgress'
            }
          },
          installProgress: {
            required: false,
            readOnly: true,
            serializedName: 'properties.installProgress',
            type: {
              name: 'Composite',
              className: 'UpdateInstallProgress'
            }
          },
          totalRefreshErrors: {
            required: false,
            readOnly: true,
            serializedName: 'properties.totalRefreshErrors',
            type: {
              name: 'Number'
            }
          },
          errorManifestFile: {
            required: false,
            readOnly: true,
            serializedName: 'properties.errorManifestFile',
            type: {
              name: 'String'
            }
          },
          shareId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.shareId',
            type: {
              name: 'String'
            }
          },
          folder: {
            required: false,
            serializedName: 'properties.folder',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Job;
