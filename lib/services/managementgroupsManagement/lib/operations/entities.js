/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * List all entities (Management Groups, Subscriptions, etc.) for the
 * authenticated user.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.skiptoken] Page continuation token is only used if
 * a previous operation returned a partial result. If a previous response
 * contains a nextLink element, the value of the nextLink element will include
 * a token parameter that specifies a starting point to use for subsequent
 * calls.
 *
 * @param {number} [options.skip] Number of entities to skip over when
 * retrieving results. Passing this in will override $skipToken.
 *
 * @param {number} [options.top] Number of elements to return when retrieving
 * results. Passing this in will override $skipToken.
 *
 * @param {string} [options.select] This parameter specifies the fields to
 * include in the response. Can include any combination of
 * Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
 * '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When
 * specified the $select parameter can override select in $skipToken.
 *
 * @param {string} [options.search] The $search parameter is used in
 * conjunction with the $filter parameter to return three different outputs
 * depending on the parameter passed in. With $search=AllowedParents the API
 * will return the entity info of all groups that the requested entity will be
 * able to reparent to as determined by the user's permissions. With
 * $search=AllowedChildren the API will return the entity info of all entities
 * that can be added as children of the requested entity. With
 * $search=ParentAndFirstLevelChildren the API will return the parent and
 * first level of children that the user has either direct access to or
 * indirect access via one of their descendants. Possible values include:
 * 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren',
 * 'ParentOnly', 'ChildrenOnly'
 *
 * @param {string} [options.filter] The filter parameter allows you to filter
 * on the name or display name fields. You can check for equality on the name
 * field (e.g. name eq '{entityName}')  and you can check for substrings on
 * either the name or display name fields(e.g. contains(name,
 * '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note
 * that the '{entityName}' and '{substringToSearch}' fields are checked case
 * insensitively.
 *
 * @param {string} [options.view] The view parameter allows clients to filter
 * the type of data that is returned by the getEntities call. Possible values
 * include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
 *
 * @param {string} [options.groupName] A filter which allows the get entities
 * call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
 *
 * @param {string} [options.cacheControl] Indicates that the request shouldn't
 * utilize any caches.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EntityListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let skiptoken = (options && options.skiptoken !== undefined) ? options.skiptoken : undefined;
  let skip = (options && options.skip !== undefined) ? options.skip : undefined;
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  let search = (options && options.search !== undefined) ? options.search : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let view = (options && options.view !== undefined) ? options.view : undefined;
  let groupName = (options && options.groupName !== undefined) ? options.groupName : undefined;
  let cacheControl = (options && options.cacheControl !== undefined) ? options.cacheControl : 'no-cache';
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (skiptoken !== null && skiptoken !== undefined && typeof skiptoken.valueOf() !== 'string') {
      throw new Error('skiptoken must be of type string.');
    }
    if (skip !== null && skip !== undefined && typeof skip !== 'number') {
      throw new Error('skip must be of type number.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
      throw new Error('select must be of type string.');
    }
    if (search !== null && search !== undefined && typeof search.valueOf() !== 'string') {
      throw new Error('search must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (view !== null && view !== undefined && typeof view.valueOf() !== 'string') {
      throw new Error('view must be of type string.');
    }
    if (groupName !== null && groupName !== undefined && typeof groupName.valueOf() !== 'string') {
      throw new Error('groupName must be of type string.');
    }
    if (cacheControl !== null && cacheControl !== undefined && typeof cacheControl.valueOf() !== 'string') {
      throw new Error('cacheControl must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'providers/Microsoft.Management/getEntities';
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (skiptoken !== null && skiptoken !== undefined) {
    queryParameters.push('$skiptoken=' + encodeURIComponent(skiptoken));
  }
  if (skip !== null && skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(skip.toString()));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select));
  }
  if (search !== null && search !== undefined) {
    queryParameters.push('$search=' + encodeURIComponent(search));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (view !== null && view !== undefined) {
    queryParameters.push('$view=' + encodeURIComponent(view));
  }
  if (groupName !== null && groupName !== undefined) {
    queryParameters.push('groupName=' + encodeURIComponent(groupName));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (cacheControl !== undefined && cacheControl !== null) {
    httpRequest.headers['Cache-Control'] = cacheControl;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EntityListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List all entities (Management Groups, Subscriptions, etc.) for the
 * authenticated user.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.cacheControl] Indicates that the request shouldn't
 * utilize any caches.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EntityListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheControl = (options && options.cacheControl !== undefined) ? options.cacheControl : 'no-cache';
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (cacheControl !== null && cacheControl !== undefined && typeof cacheControl.valueOf() !== 'string') {
      throw new Error('cacheControl must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (cacheControl !== undefined && cacheControl !== null) {
    httpRequest.headers['Cache-Control'] = cacheControl;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EntityListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Entities. */
class Entities {
  /**
   * Create a Entities.
   * @param {ManagementGroupsAPI} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._listNext = _listNext;
  }

  /**
   * List all entities (Management Groups, Subscriptions, etc.) for the
   * authenticated user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.skiptoken] Page continuation token is only used if
   * a previous operation returned a partial result. If a previous response
   * contains a nextLink element, the value of the nextLink element will include
   * a token parameter that specifies a starting point to use for subsequent
   * calls.
   *
   * @param {number} [options.skip] Number of entities to skip over when
   * retrieving results. Passing this in will override $skipToken.
   *
   * @param {number} [options.top] Number of elements to return when retrieving
   * results. Passing this in will override $skipToken.
   *
   * @param {string} [options.select] This parameter specifies the fields to
   * include in the response. Can include any combination of
   * Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
   * '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When
   * specified the $select parameter can override select in $skipToken.
   *
   * @param {string} [options.search] The $search parameter is used in
   * conjunction with the $filter parameter to return three different outputs
   * depending on the parameter passed in. With $search=AllowedParents the API
   * will return the entity info of all groups that the requested entity will be
   * able to reparent to as determined by the user's permissions. With
   * $search=AllowedChildren the API will return the entity info of all entities
   * that can be added as children of the requested entity. With
   * $search=ParentAndFirstLevelChildren the API will return the parent and
   * first level of children that the user has either direct access to or
   * indirect access via one of their descendants. Possible values include:
   * 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren',
   * 'ParentOnly', 'ChildrenOnly'
   *
   * @param {string} [options.filter] The filter parameter allows you to filter
   * on the name or display name fields. You can check for equality on the name
   * field (e.g. name eq '{entityName}')  and you can check for substrings on
   * either the name or display name fields(e.g. contains(name,
   * '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note
   * that the '{entityName}' and '{substringToSearch}' fields are checked case
   * insensitively.
   *
   * @param {string} [options.view] The view parameter allows clients to filter
   * the type of data that is returned by the getEntities call. Possible values
   * include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
   *
   * @param {string} [options.groupName] A filter which allows the get entities
   * call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
   *
   * @param {string} [options.cacheControl] Indicates that the request shouldn't
   * utilize any caches.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List all entities (Management Groups, Subscriptions, etc.) for the
   * authenticated user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.skiptoken] Page continuation token is only used if
   * a previous operation returned a partial result. If a previous response
   * contains a nextLink element, the value of the nextLink element will include
   * a token parameter that specifies a starting point to use for subsequent
   * calls.
   *
   * @param {number} [options.skip] Number of entities to skip over when
   * retrieving results. Passing this in will override $skipToken.
   *
   * @param {number} [options.top] Number of elements to return when retrieving
   * results. Passing this in will override $skipToken.
   *
   * @param {string} [options.select] This parameter specifies the fields to
   * include in the response. Can include any combination of
   * Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
   * '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When
   * specified the $select parameter can override select in $skipToken.
   *
   * @param {string} [options.search] The $search parameter is used in
   * conjunction with the $filter parameter to return three different outputs
   * depending on the parameter passed in. With $search=AllowedParents the API
   * will return the entity info of all groups that the requested entity will be
   * able to reparent to as determined by the user's permissions. With
   * $search=AllowedChildren the API will return the entity info of all entities
   * that can be added as children of the requested entity. With
   * $search=ParentAndFirstLevelChildren the API will return the parent and
   * first level of children that the user has either direct access to or
   * indirect access via one of their descendants. Possible values include:
   * 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren',
   * 'ParentOnly', 'ChildrenOnly'
   *
   * @param {string} [options.filter] The filter parameter allows you to filter
   * on the name or display name fields. You can check for equality on the name
   * field (e.g. name eq '{entityName}')  and you can check for substrings on
   * either the name or display name fields(e.g. contains(name,
   * '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note
   * that the '{entityName}' and '{substringToSearch}' fields are checked case
   * insensitively.
   *
   * @param {string} [options.view] The view parameter allows clients to filter
   * the type of data that is returned by the getEntities call. Possible values
   * include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
   *
   * @param {string} [options.groupName] A filter which allows the get entities
   * call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
   *
   * @param {string} [options.cacheControl] Indicates that the request shouldn't
   * utilize any caches.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EntityListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * List all entities (Management Groups, Subscriptions, etc.) for the
   * authenticated user.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.cacheControl] Indicates that the request shouldn't
   * utilize any caches.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List all entities (Management Groups, Subscriptions, etc.) for the
   * authenticated user.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.cacheControl] Indicates that the request shouldn't
   * utilize any caches.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EntityListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = Entities;
