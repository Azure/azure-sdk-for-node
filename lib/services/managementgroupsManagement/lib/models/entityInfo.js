/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The entity.
 *
 */
class EntityInfo {
  /**
   * Create a EntityInfo.
   * @property {string} [id] The fully qualified ID for the entity.  For
   * example,
   * /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   * @property {string} [type] The type of the resource. For example,
   * /providers/Microsoft.Management/managementGroups
   * @property {string} [name] The name of the entity. For example,
   * 00000000-0000-0000-0000-000000000000
   * @property {string} [tenantId] The AAD Tenant ID associated with the
   * entity. For example, 00000000-0000-0000-0000-000000000000
   * @property {string} [displayName] The friendly name of the management
   * group.
   * @property {object} [parent] Parent.
   * @property {string} [parent.id] The fully qualified ID for the parent
   * management group.  For example,
   * /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
   * @property {string} [permissions] Permissions. Possible values include:
   * 'noaccess', 'view', 'edit', 'delete'
   * @property {string} [inheritedPermissions] Inherited Permissions. Possible
   * values include: 'noaccess', 'view', 'edit', 'delete'
   * @property {number} [numberOfDescendants] Number of Descendants.
   * @property {number} [numberOfChildren] Number of Children. Number of
   * children is the number of Groups and Subscriptions that are exactly one
   * level underneath the current Group.
   * @property {number} [numberOfChildGroups] Number of Child Groups. Number of
   * child groups is the number of Groups that are exactly one level underneath
   * the current Group.
   * @property {array} [parentDisplayNameChain] The parent display name chain
   * from the root group to the immediate parent
   * @property {array} [parentNameChain] The parent name chain from the root
   * group to the immediate parent
   */
  constructor() {
  }

  /**
   * Defines the metadata of EntityInfo
   *
   * @returns {object} metadata of EntityInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EntityInfo',
      type: {
        name: 'Composite',
        className: 'EntityInfo',
        modelProperties: {
          id: {
            required: false,
            nullable: true,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            nullable: true,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          tenantId: {
            required: false,
            nullable: true,
            serializedName: 'properties.tenantId',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            nullable: true,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          parent: {
            required: false,
            nullable: true,
            serializedName: 'properties.parent',
            type: {
              name: 'Composite',
              className: 'EntityParentGroupInfo'
            }
          },
          permissions: {
            required: false,
            serializedName: 'properties.permissions',
            type: {
              name: 'String'
            }
          },
          inheritedPermissions: {
            required: false,
            serializedName: 'properties.inheritedPermissions',
            type: {
              name: 'String'
            }
          },
          numberOfDescendants: {
            required: false,
            nullable: true,
            serializedName: 'properties.numberOfDescendants',
            type: {
              name: 'Number'
            }
          },
          numberOfChildren: {
            required: false,
            nullable: true,
            serializedName: 'properties.numberOfChildren',
            type: {
              name: 'Number'
            }
          },
          numberOfChildGroups: {
            required: false,
            nullable: true,
            serializedName: 'properties.numberOfChildGroups',
            type: {
              name: 'Number'
            }
          },
          parentDisplayNameChain: {
            required: false,
            nullable: true,
            serializedName: 'properties.parentDisplayNameChain',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          parentNameChain: {
            required: false,
            nullable: true,
            serializedName: 'properties.parentNameChain',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = EntityInfo;
