/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes the result of the request to check management group name
 * availability.
 *
 */
class CheckNameAvailabilityResult {
  /**
   * Create a CheckNameAvailabilityResult.
   * @property {boolean} [nameAvailable] Required. True indicates name is valid
   * and available. False indicates the name is invalid, unavailable, or both.
   * @property {string} [reason] Required if nameAvailable == false. Invalid
   * indicates the name provided does not match the resource provider's naming
   * requirements (incorrect length, unsupported characters, etc.)
   * AlreadyExists indicates that the name is already in use and is therefore
   * unavailable. Possible values include: 'Invalid', 'AlreadyExists'
   * @property {string} [message] Required if nameAvailable == false.
   * Localized. If reason == invalid, provide the user with the reason why the
   * given name is invalid, and provide the resource naming requirements so
   * that the user can select a valid name. If reason == AlreadyExists, explain
   * that is already in use, and direct them to select a different name.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CheckNameAvailabilityResult
   *
   * @returns {object} metadata of CheckNameAvailabilityResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CheckNameAvailabilityResult',
      type: {
        name: 'Composite',
        className: 'CheckNameAvailabilityResult',
        modelProperties: {
          nameAvailable: {
            required: false,
            readOnly: true,
            serializedName: 'nameAvailable',
            type: {
              name: 'Boolean'
            }
          },
          reason: {
            required: false,
            readOnly: true,
            serializedName: 'reason',
            type: {
              name: 'Enum',
              allowedValues: [ 'Invalid', 'AlreadyExists' ]
            }
          },
          message: {
            required: false,
            readOnly: true,
            serializedName: 'message',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = CheckNameAvailabilityResult;
