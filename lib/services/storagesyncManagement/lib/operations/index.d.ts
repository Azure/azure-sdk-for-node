/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Gateway
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServerManagement.
 */
export interface Gateway {


    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResource>>;

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResource>;
    create(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<models.GatewayResource>): void;
    create(resourceGroupName: string, gatewayName: string, options: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResource>): void;


    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResource>>;

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResource>;
    update(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<models.GatewayResource>): void;
    update(resourceGroupName: string, gatewayName: string, options: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResource>): void;


    /**
     * Deletes a gateway from a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a gateway from a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Gets subscription credentials which
     * uniquely identify Microsoft Azure subscription. The subscription ID forms
     * part of the URI for every service call. Possible values include: 'status',
     * 'download'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResource>>;

    /**
     * Gets a gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Gets subscription credentials which
     * uniquely identify Microsoft Azure subscription. The subscription ID forms
     * part of the URI for every service call. Possible values include: 'status',
     * 'download'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, gatewayName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResource>;
    get(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<models.GatewayResource>): void;
    get(resourceGroupName: string, gatewayName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResource>): void;


    /**
     * Returns gateways in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResources>>;

    /**
     * Returns gateways in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResources>;
    list(callback: ServiceCallback<models.GatewayResources>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResources>): void;


    /**
     * Returns gateways in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResources>>;

    /**
     * Returns gateways in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResources>;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.GatewayResources>): void;
    listForResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResources>): void;


    /**
     * Upgrades a gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    upgradeWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Upgrades a gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    upgrade(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    upgrade(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<void>): void;
    upgrade(resourceGroupName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerate a gateway's profile
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateProfileWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerate a gateway's profile
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateProfile(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regenerateProfile(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<void>): void;
    regenerateProfile(resourceGroupName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a gateway profile.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayProfile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProfileWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayProfile>>;

    /**
     * Gets a gateway profile.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayProfile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayProfile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayProfile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProfile(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayProfile>;
    getProfile(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<models.GatewayProfile>): void;
    getProfile(resourceGroupName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayProfile>): void;


    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResource>>;

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResource>;
    beginCreate(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<models.GatewayResource>): void;
    beginCreate(resourceGroupName: string, gatewayName: string, options: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResource>): void;


    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResource>>;

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.upgradeMode] The upgradeMode property gives the
     * flexibility to gateway to auto upgrade itself. If properties value not
     * specified, then we assume upgradeMode = Automatic. Possible values include:
     * 'Manual', 'Automatic'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, gatewayName: string, options?: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResource>;
    beginUpdate(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<models.GatewayResource>): void;
    beginUpdate(resourceGroupName: string, gatewayName: string, options: { location? : string, tags? : any, upgradeMode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResource>): void;


    /**
     * Upgrades a gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpgradeWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Upgrades a gateway.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpgrade(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginUpgrade(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<void>): void;
    beginUpgrade(resourceGroupName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerate a gateway's profile
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRegenerateProfileWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerate a gateway's profile
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRegenerateProfile(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRegenerateProfile(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<void>): void;
    beginRegenerateProfile(resourceGroupName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a gateway profile.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayProfile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginGetProfileWithHttpOperationResponse(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayProfile>>;

    /**
     * Gets a gateway profile.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} gatewayName The gateway name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayProfile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayProfile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayProfile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginGetProfile(resourceGroupName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayProfile>;
    beginGetProfile(resourceGroupName: string, gatewayName: string, callback: ServiceCallback<models.GatewayProfile>): void;
    beginGetProfile(resourceGroupName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayProfile>): void;


    /**
     * Returns gateways in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResources>>;

    /**
     * Returns gateways in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResources>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.GatewayResources>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResources>): void;


    /**
     * Returns gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GatewayResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayResources>>;

    /**
     * Returns gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GatewayResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GatewayResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GatewayResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayResources>;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.GatewayResources>): void;
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayResources>): void;
}

/**
 * @class
 * Node
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServerManagement.
 */
export interface Node {


    /**
     * Creates or updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResource>>;

    /**
     * Creates or updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResource>;
    create(resourceGroupName: string, nodeName: string, callback: ServiceCallback<models.NodeResource>): void;
    create(resourceGroupName: string, nodeName: string, options: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResource>): void;


    /**
     * Updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResource>>;

    /**
     * Updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResource>;
    update(resourceGroupName: string, nodeName: string, callback: ServiceCallback<models.NodeResource>): void;
    update(resourceGroupName: string, nodeName: string, options: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResource>): void;


    /**
     * deletes a management node
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * deletes a management node
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, nodeName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResource>>;

    /**
     * Gets a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, nodeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResource>;
    get(resourceGroupName: string, nodeName: string, callback: ServiceCallback<models.NodeResource>): void;
    get(resourceGroupName: string, nodeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResource>): void;


    /**
     * Lists nodes in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResources>>;

    /**
     * Lists nodes in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResources>;
    list(callback: ServiceCallback<models.NodeResources>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResources>): void;


    /**
     * Lists nodes in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResources>>;

    /**
     * Lists nodes in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResources>;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.NodeResources>): void;
    listForResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResources>): void;


    /**
     * Creates or updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResource>>;

    /**
     * Creates or updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResource>;
    beginCreate(resourceGroupName: string, nodeName: string, callback: ServiceCallback<models.NodeResource>): void;
    beginCreate(resourceGroupName: string, nodeName: string, options: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResource>): void;


    /**
     * Updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResource>>;

    /**
     * Updates a management node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.location] Location of the resource.
     *
     * @param {object} [options.tags] Resource tags.
     *
     * @param {string} [options.gatewayId] Gateway ID which will manage this node.
     *
     * @param {string} [options.connectionName] myhost.domain.com
     *
     * @param {string} [options.userName] User name to be used to connect to node.
     *
     * @param {string} [options.password] Password associated with user name.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, nodeName: string, options?: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResource>;
    beginUpdate(resourceGroupName: string, nodeName: string, callback: ServiceCallback<models.NodeResource>): void;
    beginUpdate(resourceGroupName: string, nodeName: string, options: { location? : string, tags? : any, gatewayId? : string, connectionName? : string, userName? : string, password? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResource>): void;


    /**
     * Lists nodes in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResources>>;

    /**
     * Lists nodes in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResources>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NodeResources>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResources>): void;


    /**
     * Lists nodes in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NodeResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NodeResources>>;

    /**
     * Lists nodes in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NodeResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NodeResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NodeResources} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NodeResources>;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.NodeResources>): void;
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NodeResources>): void;
}

/**
 * @class
 * Session
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServerManagement.
 */
export interface Session {


    /**
     * Creates a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userName] Encrypted User name to be used to connect
     * to node.
     *
     * @param {string} [options.password] Encrypted Password associated with user
     * name.
     *
     * @param {string} [options.retentionPeriod] Session retention period. Possible
     * values include: 'Session', 'Persistent'
     *
     * @param {string} [options.credentialDataFormat] Credential data format.
     * Possible values include: 'RsaEncrypted'
     *
     * @param {string} [options.encryptionCertificateThumbprint] Encryption
     * certificate thumbprint.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SessionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, options?: { userName? : string, password? : string, retentionPeriod? : string, credentialDataFormat? : string, encryptionCertificateThumbprint? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SessionResource>>;

    /**
     * Creates a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userName] Encrypted User name to be used to connect
     * to node.
     *
     * @param {string} [options.password] Encrypted Password associated with user
     * name.
     *
     * @param {string} [options.retentionPeriod] Session retention period. Possible
     * values include: 'Session', 'Persistent'
     *
     * @param {string} [options.credentialDataFormat] Credential data format.
     * Possible values include: 'RsaEncrypted'
     *
     * @param {string} [options.encryptionCertificateThumbprint] Encryption
     * certificate thumbprint.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SessionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SessionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SessionResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, nodeName: string, session: string, options?: { userName? : string, password? : string, retentionPeriod? : string, credentialDataFormat? : string, encryptionCertificateThumbprint? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SessionResource>;
    create(resourceGroupName: string, nodeName: string, session: string, callback: ServiceCallback<models.SessionResource>): void;
    create(resourceGroupName: string, nodeName: string, session: string, options: { userName? : string, password? : string, retentionPeriod? : string, credentialDataFormat? : string, encryptionCertificateThumbprint? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionResource>): void;


    /**
     * Deletes a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, nodeName: string, session: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, nodeName: string, session: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, nodeName: string, session: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SessionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SessionResource>>;

    /**
     * Gets a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SessionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SessionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SessionResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, nodeName: string, session: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SessionResource>;
    get(resourceGroupName: string, nodeName: string, session: string, callback: ServiceCallback<models.SessionResource>): void;
    get(resourceGroupName: string, nodeName: string, session: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionResource>): void;


    /**
     * Creates a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userName] Encrypted User name to be used to connect
     * to node.
     *
     * @param {string} [options.password] Encrypted Password associated with user
     * name.
     *
     * @param {string} [options.retentionPeriod] Session retention period. Possible
     * values include: 'Session', 'Persistent'
     *
     * @param {string} [options.credentialDataFormat] Credential data format.
     * Possible values include: 'RsaEncrypted'
     *
     * @param {string} [options.encryptionCertificateThumbprint] Encryption
     * certificate thumbprint.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SessionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, options?: { userName? : string, password? : string, retentionPeriod? : string, credentialDataFormat? : string, encryptionCertificateThumbprint? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SessionResource>>;

    /**
     * Creates a session for a node.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userName] Encrypted User name to be used to connect
     * to node.
     *
     * @param {string} [options.password] Encrypted Password associated with user
     * name.
     *
     * @param {string} [options.retentionPeriod] Session retention period. Possible
     * values include: 'Session', 'Persistent'
     *
     * @param {string} [options.credentialDataFormat] Credential data format.
     * Possible values include: 'RsaEncrypted'
     *
     * @param {string} [options.encryptionCertificateThumbprint] Encryption
     * certificate thumbprint.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SessionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SessionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SessionResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, nodeName: string, session: string, options?: { userName? : string, password? : string, retentionPeriod? : string, credentialDataFormat? : string, encryptionCertificateThumbprint? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SessionResource>;
    beginCreate(resourceGroupName: string, nodeName: string, session: string, callback: ServiceCallback<models.SessionResource>): void;
    beginCreate(resourceGroupName: string, nodeName: string, session: string, options: { userName? : string, password? : string, retentionPeriod? : string, credentialDataFormat? : string, encryptionCertificateThumbprint? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionResource>): void;
}

/**
 * @class
 * PowerShell
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServerManagement.
 */
export interface PowerShell {


    /**
     * Gets a list of the active sessions.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellSessionResources>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSessionWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellSessionResources>>;

    /**
     * Gets a list of the active sessions.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellSessionResources} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellSessionResources} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellSessionResources} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSession(resourceGroupName: string, nodeName: string, session: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellSessionResources>;
    listSession(resourceGroupName: string, nodeName: string, session: string, callback: ServiceCallback<models.PowerShellSessionResources>): void;
    listSession(resourceGroupName: string, nodeName: string, session: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellSessionResources>): void;


    /**
     * Creates a PowerShell session.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellSessionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createSessionWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellSessionResource>>;

    /**
     * Creates a PowerShell session.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellSessionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellSessionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellSessionResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createSession(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellSessionResource>;
    createSession(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellSessionResource>): void;
    createSession(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellSessionResource>): void;


    /**
     * Gets the status of a command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Gets current output from an ongoing call.
     * Possible values include: 'output'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellCommandStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCommandStatusWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellCommandStatus>>;

    /**
     * Gets the status of a command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Gets current output from an ongoing call.
     * Possible values include: 'output'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellCommandStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellCommandStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellCommandStatus} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCommandStatus(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellCommandStatus>;
    getCommandStatus(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellCommandStatus>): void;
    getCommandStatus(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellCommandStatus>): void;


    /**
     * Updates a running PowerShell command with more data.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellCommandResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateCommandWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellCommandResults>>;

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellCommandResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellCommandResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellCommandResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellCommandResults>;
    updateCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellCommandResults>): void;
    updateCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellCommandResults>): void;


    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.command] Script to execute.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellCommandResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    invokeCommandWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { command? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellCommandResults>>;

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.command] Script to execute.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellCommandResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellCommandResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellCommandResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    invokeCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { command? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellCommandResults>;
    invokeCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellCommandResults>): void;
    invokeCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { command? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellCommandResults>): void;


    /**
     * Cancels a PowerShell command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellCommandResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelCommandWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellCommandResults>>;

    /**
     * Cancels a PowerShell command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellCommandResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellCommandResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellCommandResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellCommandResults>;
    cancelCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellCommandResults>): void;
    cancelCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellCommandResults>): void;


    /**
     * Gets tab completion values for a command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.command] Command to get tab completion for.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellTabCompletionResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    tabCompletionWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { command? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellTabCompletionResults>>;

    /**
     * Gets tab completion values for a command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.command] Command to get tab completion for.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellTabCompletionResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellTabCompletionResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellTabCompletionResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    tabCompletion(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { command? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellTabCompletionResults>;
    tabCompletion(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellTabCompletionResults>): void;
    tabCompletion(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { command? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellTabCompletionResults>): void;


    /**
     * Creates a PowerShell session.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellSessionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateSessionWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellSessionResource>>;

    /**
     * Creates a PowerShell session.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellSessionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellSessionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellSessionResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateSession(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellSessionResource>;
    beginCreateSession(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellSessionResource>): void;
    beginCreateSession(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellSessionResource>): void;


    /**
     * Updates a running PowerShell command with more data.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellCommandResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateCommandWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellCommandResults>>;

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellCommandResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellCommandResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellCommandResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellCommandResults>;
    beginUpdateCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellCommandResults>): void;
    beginUpdateCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellCommandResults>): void;


    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.command] Script to execute.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellCommandResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInvokeCommandWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { command? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellCommandResults>>;

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.command] Script to execute.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellCommandResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellCommandResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellCommandResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInvokeCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { command? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellCommandResults>;
    beginInvokeCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellCommandResults>): void;
    beginInvokeCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { command? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellCommandResults>): void;


    /**
     * Cancels a PowerShell command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PowerShellCommandResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCancelCommandWithHttpOperationResponse(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PowerShellCommandResults>>;

    /**
     * Cancels a PowerShell command.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     *
     * @param {string} nodeName The node name (256 characters maximum).
     *
     * @param {string} session The sessionId from the user.
     *
     * @param {string} pssession The PowerShell sessionId from the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PowerShellCommandResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PowerShellCommandResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PowerShellCommandResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCancelCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PowerShellCommandResults>;
    beginCancelCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, callback: ServiceCallback<models.PowerShellCommandResults>): void;
    beginCancelCommand(resourceGroupName: string, nodeName: string, session: string, pssession: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PowerShellCommandResults>): void;
}
