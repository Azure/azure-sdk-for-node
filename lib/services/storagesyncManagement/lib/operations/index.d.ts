/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageSyncManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Storage Sync Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationEntityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationEntityListResult>>;

    /**
     * Lists all of the available Storage Sync Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationEntityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationEntityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationEntityListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationEntityListResult>;
    list(callback: ServiceCallback<models.OperationEntityListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationEntityListResult>): void;


    /**
     * Lists all of the available Storage Sync Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationEntityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationEntityListResult>>;

    /**
     * Lists all of the available Storage Sync Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationEntityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationEntityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationEntityListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationEntityListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationEntityListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationEntityListResult>): void;
}

/**
 * @class
 * StorageSyncServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageSyncManagementClient.
 */
export interface StorageSyncServices {


    /**
     * Check the give namespace name availability.
     *
     * @param {string} locationName The desired region for the name check.
     *
     * @param {object} parameters Parameters to check availability of the given
     * namespace name
     *
     * @param {string} parameters.name The name to check for availability
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckNameAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(locationName: string, parameters: models.CheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckNameAvailabilityResult>>;

    /**
     * Check the give namespace name availability.
     *
     * @param {string} locationName The desired region for the name check.
     *
     * @param {object} parameters Parameters to check availability of the given
     * namespace name
     *
     * @param {string} parameters.name The name to check for availability
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckNameAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckNameAvailabilityResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(locationName: string, parameters: models.CheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckNameAvailabilityResult>;
    checkNameAvailability(locationName: string, parameters: models.CheckNameAvailabilityParameters, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;
    checkNameAvailability(locationName: string, parameters: models.CheckNameAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;


    /**
     * Create a new StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} parameters Storage Sync Service resource name.
     *
     * @param {string} parameters.location Required. Gets or sets the location of
     * the resource. This will be one of the supported and registered Azure Geo
     * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
     * resource cannot be changed once it is created, but if an identical geo
     * region is specified on update, the request will succeed.
     *
     * @param {object} [parameters.tags] Gets or sets a list of key value pairs
     * that describe the resource. These tags can be used for viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be provided
     * for a resource. Each tag must have a key with a length no greater than 128
     * characters and a value with a length no greater than 256 characters.
     *
     * @param {object} [parameters.properties]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageSyncService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, parameters: models.StorageSyncServiceCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageSyncService>>;

    /**
     * Create a new StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} parameters Storage Sync Service resource name.
     *
     * @param {string} parameters.location Required. Gets or sets the location of
     * the resource. This will be one of the supported and registered Azure Geo
     * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
     * resource cannot be changed once it is created, but if an identical geo
     * region is specified on update, the request will succeed.
     *
     * @param {object} [parameters.tags] Gets or sets a list of key value pairs
     * that describe the resource. These tags can be used for viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be provided
     * for a resource. Each tag must have a key with a length no greater than 128
     * characters and a value with a length no greater than 256 characters.
     *
     * @param {object} [parameters.properties]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageSyncService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageSyncService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageSyncService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, storageSyncServiceName: string, parameters: models.StorageSyncServiceCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageSyncService>;
    create(resourceGroupName: string, storageSyncServiceName: string, parameters: models.StorageSyncServiceCreateParameters, callback: ServiceCallback<models.StorageSyncService>): void;
    create(resourceGroupName: string, storageSyncServiceName: string, parameters: models.StorageSyncServiceCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageSyncService>): void;


    /**
     * Get a given StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageSyncService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageSyncService>>;

    /**
     * Get a given StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageSyncService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageSyncService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageSyncService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageSyncService>;
    get(resourceGroupName: string, storageSyncServiceName: string, callback: ServiceCallback<models.StorageSyncService>): void;
    get(resourceGroupName: string, storageSyncServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageSyncService>): void;


    /**
     * Patch a given StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Storage Sync Service resource.
     *
     * @param {object} [options.parameters.tags] The user-specified tags associated
     * with the storage sync service.
     *
     * @param {object} [options.parameters.properties] The properties of the
     * storage sync service.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageSyncService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, options?: { parameters? : models.StorageSyncServiceUpdateParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageSyncService>>;

    /**
     * Patch a given StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Storage Sync Service resource.
     *
     * @param {object} [options.parameters.tags] The user-specified tags associated
     * with the storage sync service.
     *
     * @param {object} [options.parameters.properties] The properties of the
     * storage sync service.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageSyncService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageSyncService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageSyncService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, storageSyncServiceName: string, options?: { parameters? : models.StorageSyncServiceUpdateParameters, customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageSyncService>;
    update(resourceGroupName: string, storageSyncServiceName: string, callback: ServiceCallback<models.StorageSyncService>): void;
    update(resourceGroupName: string, storageSyncServiceName: string, options: { parameters? : models.StorageSyncServiceUpdateParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageSyncService>): void;


    /**
     * Delete a given StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a given StorageSyncService.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get a StorageSyncService list by Resource group name.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageSyncServiceArray>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageSyncServiceArray>>;

    /**
     * Get a StorageSyncService list by Resource group name.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageSyncServiceArray} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageSyncServiceArray} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageSyncServiceArray} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageSyncServiceArray>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.StorageSyncServiceArray>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageSyncServiceArray>): void;


    /**
     * Get a StorageSyncService list by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageSyncServiceArray>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageSyncServiceArray>>;

    /**
     * Get a StorageSyncService list by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageSyncServiceArray} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageSyncServiceArray} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageSyncServiceArray} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageSyncServiceArray>;
    listBySubscription(callback: ServiceCallback<models.StorageSyncServiceArray>): void;
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageSyncServiceArray>): void;
}

/**
 * @class
 * SyncGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageSyncManagementClient.
 */
export interface SyncGroups {


    /**
     * Get a SyncGroup List.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroupArray>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByStorageSyncServiceWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroupArray>>;

    /**
     * Get a SyncGroup List.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroupArray} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroupArray} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroupArray} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroupArray>;
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, callback: ServiceCallback<models.SyncGroupArray>): void;
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroupArray>): void;


    /**
     * Create a new SyncGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} parameters Sync Group Body
     *
     * @param {object} [parameters.properties] The parameters used to create the
     * sync group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, parameters: models.SyncGroupCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroup>>;

    /**
     * Create a new SyncGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} parameters Sync Group Body
     *
     * @param {object} [parameters.properties] The parameters used to create the
     * sync group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, parameters: models.SyncGroupCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroup>;
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, parameters: models.SyncGroupCreateParameters, callback: ServiceCallback<models.SyncGroup>): void;
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, parameters: models.SyncGroupCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroup>): void;


    /**
     * Get a given SyncGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroup>>;

    /**
     * Get a given SyncGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroup>;
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, callback: ServiceCallback<models.SyncGroup>): void;
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroup>): void;


    /**
     * Delete a given SyncGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a given SyncGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * CloudEndpoints
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageSyncManagementClient.
 */
export interface CloudEndpoints {


    /**
     * Create a new CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint resource.
     *
     * @param {string} [parameters.storageAccountResourceId] Storage Account
     * Resource Id
     *
     * @param {string} [parameters.storageAccountShareName] Storage Account Share
     * name
     *
     * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
     * Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CloudEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CloudEndpoint>>;

    /**
     * Create a new CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint resource.
     *
     * @param {string} [parameters.storageAccountResourceId] Storage Account
     * Resource Id
     *
     * @param {string} [parameters.storageAccountShareName] Storage Account Share
     * name
     *
     * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
     * Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CloudEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CloudEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CloudEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CloudEndpoint>;
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, callback: ServiceCallback<models.CloudEndpoint>): void;
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudEndpoint>): void;


    /**
     * Get a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CloudEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CloudEndpoint>>;

    /**
     * Get a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CloudEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CloudEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CloudEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CloudEndpoint>;
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, callback: ServiceCallback<models.CloudEndpoint>): void;
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudEndpoint>): void;


    /**
     * Delete a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get a CloudEndpoint List.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CloudEndpointArray>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySyncGroupWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CloudEndpointArray>>;

    /**
     * Get a CloudEndpoint List.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CloudEndpointArray} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CloudEndpointArray} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CloudEndpointArray} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CloudEndpointArray>;
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, callback: ServiceCallback<models.CloudEndpointArray>): void;
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudEndpointArray>): void;


    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    preBackupWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    preBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    preBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, callback: ServiceCallback<void>): void;
    preBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PostBackupResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postBackupWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PostBackupResponse>>;

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PostBackupResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PostBackupResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PostBackupResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PostBackupResponse>;
    postBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, callback: ServiceCallback<models.PostBackupResponse>): void;
    postBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostBackupResponse>): void;


    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Pre Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Pre Restore replica group.
     *
     * @param {string} [parameters.requestId] Pre Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Pre Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
     * metadata property bag.
     *
     * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
     * array.
     *
     * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
     * Restore pause wait for sync drain time period in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    preRestoreWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Pre Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Pre Restore replica group.
     *
     * @param {string} [parameters.requestId] Pre Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Pre Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
     * metadata property bag.
     *
     * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
     * array.
     *
     * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
     * Restore pause wait for sync drain time period in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    preRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    preRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, callback: ServiceCallback<void>): void;
    preRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Restore Heartbeat a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreheartbeatWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Restore Heartbeat a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreheartbeat(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreheartbeat(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, callback: ServiceCallback<void>): void;
    restoreheartbeat(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Post Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Post Restore replica group.
     *
     * @param {string} [parameters.requestId] Post Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Post Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.failedFileList] Post Restore Azure failed file
     * list.
     *
     * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
     * array.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    postRestoreWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Post Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Post Restore replica group.
     *
     * @param {string} [parameters.requestId] Post Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Post Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.failedFileList] Post Restore Azure failed file
     * list.
     *
     * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
     * array.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    postRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    postRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, callback: ServiceCallback<void>): void;
    postRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a new CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint resource.
     *
     * @param {string} [parameters.storageAccountResourceId] Storage Account
     * Resource Id
     *
     * @param {string} [parameters.storageAccountShareName] Storage Account Share
     * name
     *
     * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
     * Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CloudEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CloudEndpoint>>;

    /**
     * Create a new CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint resource.
     *
     * @param {string} [parameters.storageAccountResourceId] Storage Account
     * Resource Id
     *
     * @param {string} [parameters.storageAccountShareName] Storage Account Share
     * name
     *
     * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
     * Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CloudEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CloudEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CloudEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CloudEndpoint>;
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, callback: ServiceCallback<models.CloudEndpoint>): void;
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.CloudEndpointCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudEndpoint>): void;


    /**
     * Delete a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPreBackupWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPreBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginPreBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, callback: ServiceCallback<void>): void;
    beginPreBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PostBackupResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPostBackupWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PostBackupResponse>>;

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Backup request.
     *
     * @param {string} [parameters.azureFileShare] Azure File Share.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PostBackupResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PostBackupResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PostBackupResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPostBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PostBackupResponse>;
    beginPostBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, callback: ServiceCallback<models.PostBackupResponse>): void;
    beginPostBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostBackupResponse>): void;


    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Pre Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Pre Restore replica group.
     *
     * @param {string} [parameters.requestId] Pre Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Pre Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
     * metadata property bag.
     *
     * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
     * array.
     *
     * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
     * Restore pause wait for sync drain time period in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPreRestoreWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Pre Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Pre Restore replica group.
     *
     * @param {string} [parameters.requestId] Pre Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Pre Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
     * metadata property bag.
     *
     * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
     * array.
     *
     * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
     * Restore pause wait for sync drain time period in seconds.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPreRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginPreRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, callback: ServiceCallback<void>): void;
    beginPreRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PreRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Post Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Post Restore replica group.
     *
     * @param {string} [parameters.requestId] Post Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Post Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.failedFileList] Post Restore Azure failed file
     * list.
     *
     * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
     * array.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPostRestoreWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} cloudEndpointName Name of Cloud Endpoint object.
     *
     * @param {object} parameters Body of Cloud Endpoint object.
     *
     * @param {string} [parameters.partition] Post Restore partition.
     *
     * @param {string} [parameters.replicaGroup] Post Restore replica group.
     *
     * @param {string} [parameters.requestId] Post Restore request id.
     *
     * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
     * uri.
     *
     * @param {string} [parameters.status] Post Restore Azure status.
     *
     * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
     * source azure file share uri.
     *
     * @param {string} [parameters.failedFileList] Post Restore Azure failed file
     * list.
     *
     * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
     * array.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPostRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginPostRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, callback: ServiceCallback<void>): void;
    beginPostRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: models.PostRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ServerEndpoints
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageSyncManagementClient.
 */
export interface ServerEndpoints {


    /**
     * Create a new ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Server Endpoint object.
     *
     * @param {string} [parameters.serverLocalPath] Server Local path.
     *
     * @param {string} [parameters.cloudTiering] Cloud Tiering. Possible values
     * include: 'on', 'off'
     *
     * @param {number} [parameters.volumeFreeSpacePercent] Level of free space to
     * be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [parameters.tierFilesOlderThanDays] Tier files older than
     * days.
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {string} [parameters.serverResourceId] Server Resource Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerEndpoint>>;

    /**
     * Create a new ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Server Endpoint object.
     *
     * @param {string} [parameters.serverLocalPath] Server Local path.
     *
     * @param {string} [parameters.cloudTiering] Cloud Tiering. Possible values
     * include: 'on', 'off'
     *
     * @param {number} [parameters.volumeFreeSpacePercent] Level of free space to
     * be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [parameters.tierFilesOlderThanDays] Tier files older than
     * days.
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {string} [parameters.serverResourceId] Server Resource Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerEndpoint>;
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, callback: ServiceCallback<models.ServerEndpoint>): void;
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerEndpoint>): void;


    /**
     * Patch a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Any of the properties applicable in PUT
     * request.
     *
     * @param {string} [options.parameters.cloudTiering] Cloud Tiering. Possible
     * values include: 'on', 'off'
     *
     * @param {number} [options.parameters.volumeFreeSpacePercent] Level of free
     * space to be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [options.parameters.tierFilesOlderThanDays] Tier files older
     * than days.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { parameters? : models.ServerEndpointUpdateParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerEndpoint>>;

    /**
     * Patch a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Any of the properties applicable in PUT
     * request.
     *
     * @param {string} [options.parameters.cloudTiering] Cloud Tiering. Possible
     * values include: 'on', 'off'
     *
     * @param {number} [options.parameters.volumeFreeSpacePercent] Level of free
     * space to be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [options.parameters.tierFilesOlderThanDays] Tier files older
     * than days.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { parameters? : models.ServerEndpointUpdateParameters, customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerEndpoint>;
    update(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, callback: ServiceCallback<models.ServerEndpoint>): void;
    update(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options: { parameters? : models.ServerEndpointUpdateParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerEndpoint>): void;


    /**
     * Get a ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerEndpoint>>;

    /**
     * Get a ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerEndpoint>;
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, callback: ServiceCallback<models.ServerEndpoint>): void;
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerEndpoint>): void;


    /**
     * Delete a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get a ServerEndpoint list.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerEndpointArray>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySyncGroupWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerEndpointArray>>;

    /**
     * Get a ServerEndpoint list.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerEndpointArray} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerEndpointArray} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerEndpointArray} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerEndpointArray>;
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, callback: ServiceCallback<models.ServerEndpointArray>): void;
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerEndpointArray>): void;


    /**
     * Recall a server endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Recall Action object.
     *
     * @param {string} [parameters.pattern] Pattern of the files.
     *
     * @param {string} [parameters.recallPath] Recall path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    recallActionWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Recall a server endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Recall Action object.
     *
     * @param {string} [parameters.pattern] Pattern of the files.
     *
     * @param {string} [parameters.recallPath] Recall path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    recallAction(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    recallAction(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, callback: ServiceCallback<void>): void;
    recallAction(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a new ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Server Endpoint object.
     *
     * @param {string} [parameters.serverLocalPath] Server Local path.
     *
     * @param {string} [parameters.cloudTiering] Cloud Tiering. Possible values
     * include: 'on', 'off'
     *
     * @param {number} [parameters.volumeFreeSpacePercent] Level of free space to
     * be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [parameters.tierFilesOlderThanDays] Tier files older than
     * days.
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {string} [parameters.serverResourceId] Server Resource Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerEndpoint>>;

    /**
     * Create a new ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Server Endpoint object.
     *
     * @param {string} [parameters.serverLocalPath] Server Local path.
     *
     * @param {string} [parameters.cloudTiering] Cloud Tiering. Possible values
     * include: 'on', 'off'
     *
     * @param {number} [parameters.volumeFreeSpacePercent] Level of free space to
     * be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [parameters.tierFilesOlderThanDays] Tier files older than
     * days.
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {string} [parameters.serverResourceId] Server Resource Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerEndpoint>;
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, callback: ServiceCallback<models.ServerEndpoint>): void;
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.ServerEndpointCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerEndpoint>): void;


    /**
     * Patch a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Any of the properties applicable in PUT
     * request.
     *
     * @param {string} [options.parameters.cloudTiering] Cloud Tiering. Possible
     * values include: 'on', 'off'
     *
     * @param {number} [options.parameters.volumeFreeSpacePercent] Level of free
     * space to be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [options.parameters.tierFilesOlderThanDays] Tier files older
     * than days.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerEndpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { parameters? : models.ServerEndpointUpdateParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerEndpoint>>;

    /**
     * Patch a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Any of the properties applicable in PUT
     * request.
     *
     * @param {string} [options.parameters.cloudTiering] Cloud Tiering. Possible
     * values include: 'on', 'off'
     *
     * @param {number} [options.parameters.volumeFreeSpacePercent] Level of free
     * space to be maintained by Cloud Tiering if it is enabled.
     *
     * @param {number} [options.parameters.tierFilesOlderThanDays] Tier files older
     * than days.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerEndpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerEndpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerEndpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { parameters? : models.ServerEndpointUpdateParameters, customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerEndpoint>;
    beginUpdate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, callback: ServiceCallback<models.ServerEndpoint>): void;
    beginUpdate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options: { parameters? : models.ServerEndpointUpdateParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerEndpoint>): void;


    /**
     * Delete a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a given ServerEndpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Recall a server endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Recall Action object.
     *
     * @param {string} [parameters.pattern] Pattern of the files.
     *
     * @param {string} [parameters.recallPath] Recall path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRecallActionWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Recall a server endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} syncGroupName Name of Sync Group resource.
     *
     * @param {string} serverEndpointName Name of Server Endpoint object.
     *
     * @param {object} parameters Body of Recall Action object.
     *
     * @param {string} [parameters.pattern] Pattern of the files.
     *
     * @param {string} [parameters.recallPath] Recall path.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRecallAction(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRecallAction(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, callback: ServiceCallback<void>): void;
    beginRecallAction(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: models.RecallActionParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * RegisteredServers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageSyncManagementClient.
 */
export interface RegisteredServers {


    /**
     * Get a given registered server list.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegisteredServerArray>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByStorageSyncServiceWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegisteredServerArray>>;

    /**
     * Get a given registered server list.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegisteredServerArray} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegisteredServerArray} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegisteredServerArray} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegisteredServerArray>;
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, callback: ServiceCallback<models.RegisteredServerArray>): void;
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegisteredServerArray>): void;


    /**
     * Get a given registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegisteredServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegisteredServer>>;

    /**
     * Get a given registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegisteredServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegisteredServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegisteredServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegisteredServer>;
    get(resourceGroupName: string, storageSyncServiceName: string, serverId: string, callback: ServiceCallback<models.RegisteredServer>): void;
    get(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegisteredServer>): void;


    /**
     * Add a new registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} parameters Body of Registered Server object.
     *
     * @param {string} [parameters.serverCertificate] Registered Server Certificate
     *
     * @param {string} [parameters.agentVersion] Registered Server Agent Version
     *
     * @param {string} [parameters.serverOSVersion] Registered Server OS Version
     *
     * @param {string} [parameters.lastHeartBeat] Registered Server last heart beat
     *
     * @param {string} [parameters.serverRole] Registered Server serverRole
     *
     * @param {string} [parameters.clusterId] Registered Server clusterId
     *
     * @param {string} [parameters.clusterName] Registered Server clusterName
     *
     * @param {string} [parameters.serverId] Registered Server serverId
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegisteredServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegisteredServer>>;

    /**
     * Add a new registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} parameters Body of Registered Server object.
     *
     * @param {string} [parameters.serverCertificate] Registered Server Certificate
     *
     * @param {string} [parameters.agentVersion] Registered Server Agent Version
     *
     * @param {string} [parameters.serverOSVersion] Registered Server OS Version
     *
     * @param {string} [parameters.lastHeartBeat] Registered Server last heart beat
     *
     * @param {string} [parameters.serverRole] Registered Server serverRole
     *
     * @param {string} [parameters.clusterId] Registered Server clusterId
     *
     * @param {string} [parameters.clusterName] Registered Server clusterName
     *
     * @param {string} [parameters.serverId] Registered Server serverId
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegisteredServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegisteredServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegisteredServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegisteredServer>;
    create(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, callback: ServiceCallback<models.RegisteredServer>): void;
    create(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegisteredServer>): void;


    /**
     * Delete the given registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete the given registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, serverId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Triggers Server certificate rollover.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId Server Id
     *
     * @param {object} parameters Body of Trigger Rollover request.
     *
     * @param {string} [parameters.serverCertificate] Certificate Data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    triggerRolloverWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Triggers Server certificate rollover.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId Server Id
     *
     * @param {object} parameters Body of Trigger Rollover request.
     *
     * @param {string} [parameters.serverCertificate] Certificate Data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    triggerRollover(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    triggerRollover(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, callback: ServiceCallback<void>): void;
    triggerRollover(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Add a new registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} parameters Body of Registered Server object.
     *
     * @param {string} [parameters.serverCertificate] Registered Server Certificate
     *
     * @param {string} [parameters.agentVersion] Registered Server Agent Version
     *
     * @param {string} [parameters.serverOSVersion] Registered Server OS Version
     *
     * @param {string} [parameters.lastHeartBeat] Registered Server last heart beat
     *
     * @param {string} [parameters.serverRole] Registered Server serverRole
     *
     * @param {string} [parameters.clusterId] Registered Server clusterId
     *
     * @param {string} [parameters.clusterName] Registered Server clusterName
     *
     * @param {string} [parameters.serverId] Registered Server serverId
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegisteredServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegisteredServer>>;

    /**
     * Add a new registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} parameters Body of Registered Server object.
     *
     * @param {string} [parameters.serverCertificate] Registered Server Certificate
     *
     * @param {string} [parameters.agentVersion] Registered Server Agent Version
     *
     * @param {string} [parameters.serverOSVersion] Registered Server OS Version
     *
     * @param {string} [parameters.lastHeartBeat] Registered Server last heart beat
     *
     * @param {string} [parameters.serverRole] Registered Server serverRole
     *
     * @param {string} [parameters.clusterId] Registered Server clusterId
     *
     * @param {string} [parameters.clusterName] Registered Server clusterName
     *
     * @param {string} [parameters.serverId] Registered Server serverId
     *
     * @param {string} [parameters.friendlyName] Friendly Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegisteredServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegisteredServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegisteredServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegisteredServer>;
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, callback: ServiceCallback<models.RegisteredServer>): void;
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.RegisteredServerCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegisteredServer>): void;


    /**
     * Delete the given registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete the given registered server.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId GUID identifying the on-premises server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, serverId: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Triggers Server certificate rollover.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId Server Id
     *
     * @param {object} parameters Body of Trigger Rollover request.
     *
     * @param {string} [parameters.serverCertificate] Certificate Data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginTriggerRolloverWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Triggers Server certificate rollover.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} serverId Server Id
     *
     * @param {object} parameters Body of Trigger Rollover request.
     *
     * @param {string} [parameters.serverCertificate] Certificate Data
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginTriggerRollover(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginTriggerRollover(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, callback: ServiceCallback<void>): void;
    beginTriggerRollover(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: models.TriggerRolloverRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Workflows
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageSyncManagementClient.
 */
export interface Workflows {


    /**
     * Get a Workflow List
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowArray>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByStorageSyncServiceWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowArray>>;

    /**
     * Get a Workflow List
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowArray} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowArray} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowArray} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowArray>;
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, callback: ServiceCallback<models.WorkflowArray>): void;
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowArray>): void;


    /**
     * Get Workflows resource
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} workflowId workflow Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workflow>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workflow>>;

    /**
     * Get Workflows resource
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} workflowId workflow Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workflow} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workflow} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workflow} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workflow>;
    get(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, callback: ServiceCallback<models.Workflow>): void;
    get(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workflow>): void;


    /**
     * Abort the given workflow.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} workflowId workflow Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    abortWithHttpOperationResponse(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Abort the given workflow.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} storageSyncServiceName Name of Storage Sync Service
     * resource.
     *
     * @param {string} workflowId workflow Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    abort(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    abort(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, callback: ServiceCallback<void>): void;
    abort(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
