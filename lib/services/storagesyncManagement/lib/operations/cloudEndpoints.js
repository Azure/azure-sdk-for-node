/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Create a new CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Cloud Endpoint resource.
 *
 * @param {string} [parameters.location] Required. Gets or sets the location of
 * the resource. This will be one of the supported and registered Azure Geo
 * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
 * resource cannot be changed once it is created, but if an identical geo
 * region is specified on update, the request will succeed.
 *
 * @param {object} [parameters.tags] Gets or sets a list of key value pairs
 * that describe the resource. These tags can be used for viewing and grouping
 * this resource (across resource groups). A maximum of 15 tags can be provided
 * for a resource. Each tag must have a key with a length no greater than 128
 * characters and a value with a length no greater than 256 characters.
 *
 * @param {string} [parameters.storageAccountResourceId] Storage Account
 * Resource Id
 *
 * @param {string} [parameters.storageAccountShareName] Storage Account Share
 * name
 *
 * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
 * Id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CloudEndpoint} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CloudEndpoint']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Get a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CloudEndpoint} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CloudEndpoint']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Delete a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Get a CloudEndpoint List.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CloudEndpointArray} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CloudEndpointArray']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Pre Backup a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Backup request.
 *
 * @param {string} [parameters.azureFileShare] Azure File Share.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _preBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Post Backup a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Backup request.
 *
 * @param {string} [parameters.azureFileShare] Azure File Share.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PostBackupResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PostBackupResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Pre Restore a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Cloud Endpoint object.
 *
 * @param {string} [parameters.partition] Pre Restore partition.
 *
 * @param {string} [parameters.replicaGroup] Pre Restore replica group.
 *
 * @param {string} [parameters.requestId] Pre Restore request id.
 *
 * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
 * uri.
 *
 * @param {string} [parameters.status] Pre Restore Azure status.
 *
 * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
 * source azure file share uri.
 *
 * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
 * metadata property bag.
 *
 * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
 * array.
 *
 * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
 * Restore pause wait for sync drain time period in seconds.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _preRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Restore Heartbeat a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/restoreheartbeat';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Post Restore a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Cloud Endpoint object.
 *
 * @param {string} [parameters.partition] Post Restore partition.
 *
 * @param {string} [parameters.replicaGroup] Post Restore replica group.
 *
 * @param {string} [parameters.requestId] Post Restore request id.
 *
 * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
 * uri.
 *
 * @param {string} [parameters.status] Post Restore Azure status.
 *
 * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
 * source azure file share uri.
 *
 * @param {string} [parameters.failedFileList] Post Restore Azure failed file
 * list.
 *
 * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
 * array.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Create a new CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Cloud Endpoint resource.
 *
 * @param {string} [parameters.location] Required. Gets or sets the location of
 * the resource. This will be one of the supported and registered Azure Geo
 * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
 * resource cannot be changed once it is created, but if an identical geo
 * region is specified on update, the request will succeed.
 *
 * @param {object} [parameters.tags] Gets or sets a list of key value pairs
 * that describe the resource. These tags can be used for viewing and grouping
 * this resource (across resource groups). A maximum of 15 tags can be provided
 * for a resource. Each tag must have a key with a length no greater than 128
 * characters and a value with a length no greater than 256 characters.
 *
 * @param {string} [parameters.storageAccountResourceId] Storage Account
 * Resource Id
 *
 * @param {string} [parameters.storageAccountShareName] Storage Account Share
 * name
 *
 * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
 * Id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CloudEndpoint} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['CloudEndpointCreateParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CloudEndpoint']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Delete a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Pre Backup a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Backup request.
 *
 * @param {string} [parameters.azureFileShare] Azure File Share.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['BackupRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Post Backup a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Backup request.
 *
 * @param {string} [parameters.azureFileShare] Azure File Share.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PostBackupResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postbackup';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['BackupRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PostBackupResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Pre Restore a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Cloud Endpoint object.
 *
 * @param {string} [parameters.partition] Pre Restore partition.
 *
 * @param {string} [parameters.replicaGroup] Pre Restore replica group.
 *
 * @param {string} [parameters.requestId] Pre Restore request id.
 *
 * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
 * uri.
 *
 * @param {string} [parameters.status] Pre Restore Azure status.
 *
 * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
 * source azure file share uri.
 *
 * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
 * metadata property bag.
 *
 * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
 * array.
 *
 * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
 * Restore pause wait for sync drain time period in seconds.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prerestore';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['PreRestoreRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Post Restore a given CloudEndpoint.
 *
 * @param {string} resourceGroupName The name of the resource group. The name
 * is case insensitive.
 *
 * @param {string} storageSyncServiceName Name of Storage Sync Service
 * resource.
 *
 * @param {string} syncGroupName Name of Sync Group resource.
 *
 * @param {string} cloudEndpointName Name of Cloud Endpoint object.
 *
 * @param {object} parameters Body of Cloud Endpoint object.
 *
 * @param {string} [parameters.partition] Post Restore partition.
 *
 * @param {string} [parameters.replicaGroup] Post Restore replica group.
 *
 * @param {string} [parameters.requestId] Post Restore request id.
 *
 * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
 * uri.
 *
 * @param {string} [parameters.status] Post Restore Azure status.
 *
 * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
 * source azure file share uri.
 *
 * @param {string} [parameters.failedFileList] Post Restore Azure failed file
 * list.
 *
 * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
 * array.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (storageSyncServiceName === null || storageSyncServiceName === undefined || typeof storageSyncServiceName.valueOf() !== 'string') {
      throw new Error('storageSyncServiceName cannot be null or undefined and it must be of type string.');
    }
    if (syncGroupName === null || syncGroupName === undefined || typeof syncGroupName.valueOf() !== 'string') {
      throw new Error('syncGroupName cannot be null or undefined and it must be of type string.');
    }
    if (cloudEndpointName === null || cloudEndpointName === undefined || typeof cloudEndpointName.valueOf() !== 'string') {
      throw new Error('cloudEndpointName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postrestore';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{storageSyncServiceName}', encodeURIComponent(storageSyncServiceName));
  requestUrl = requestUrl.replace('{syncGroupName}', encodeURIComponent(syncGroupName));
  requestUrl = requestUrl.replace('{cloudEndpointName}', encodeURIComponent(cloudEndpointName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['PostRestoreRequest']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['StorageSyncError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a CloudEndpoints. */
class CloudEndpoints {
  /**
   * Create a CloudEndpoints.
   * @param {StorageSyncManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._create = _create;
    this._get = _get;
    this._deleteMethod = _deleteMethod;
    this._listBySyncGroup = _listBySyncGroup;
    this._preBackup = _preBackup;
    this._postBackup = _postBackup;
    this._preRestore = _preRestore;
    this._restoreheartbeat = _restoreheartbeat;
    this._postRestore = _postRestore;
    this._beginCreate = _beginCreate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginPreBackup = _beginPreBackup;
    this._beginPostBackup = _beginPostBackup;
    this._beginPreRestore = _beginPreRestore;
    this._beginPostRestore = _beginPostRestore;
  }

  /**
   * Create a new CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint resource.
   *
   * @param {string} [parameters.location] Required. Gets or sets the location of
   * the resource. This will be one of the supported and registered Azure Geo
   * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
   * resource cannot be changed once it is created, but if an identical geo
   * region is specified on update, the request will succeed.
   *
   * @param {object} [parameters.tags] Gets or sets a list of key value pairs
   * that describe the resource. These tags can be used for viewing and grouping
   * this resource (across resource groups). A maximum of 15 tags can be provided
   * for a resource. Each tag must have a key with a length no greater than 128
   * characters and a value with a length no greater than 256 characters.
   *
   * @param {string} [parameters.storageAccountResourceId] Storage Account
   * Resource Id
   *
   * @param {string} [parameters.storageAccountShareName] Storage Account Share
   * name
   *
   * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
   * Id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CloudEndpoint>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create a new CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint resource.
   *
   * @param {string} [parameters.location] Required. Gets or sets the location of
   * the resource. This will be one of the supported and registered Azure Geo
   * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
   * resource cannot be changed once it is created, but if an identical geo
   * region is specified on update, the request will succeed.
   *
   * @param {object} [parameters.tags] Gets or sets a list of key value pairs
   * that describe the resource. These tags can be used for viewing and grouping
   * this resource (across resource groups). A maximum of 15 tags can be provided
   * for a resource. Each tag must have a key with a length no greater than 128
   * characters and a value with a length no greater than 256 characters.
   *
   * @param {string} [parameters.storageAccountResourceId] Storage Account
   * Resource Id
   *
   * @param {string} [parameters.storageAccountShareName] Storage Account Share
   * name
   *
   * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
   * Id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CloudEndpoint} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CloudEndpoint} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Get a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CloudEndpoint>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CloudEndpoint} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CloudEndpoint} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback);
    }
  }

  /**
   * Delete a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback);
    }
  }

  /**
   * Get a CloudEndpoint List.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CloudEndpointArray>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBySyncGroupWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get a CloudEndpoint List.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CloudEndpointArray} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CloudEndpointArray} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options, optionalCallback);
    }
  }

  /**
   * Pre Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  preBackupWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._preBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Pre Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  preBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._preBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._preBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Post Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PostBackupResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postBackupWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PostBackupResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PostBackupResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Pre Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Pre Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Pre Restore replica group.
   *
   * @param {string} [parameters.requestId] Pre Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Pre Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
   * metadata property bag.
   *
   * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
   * array.
   *
   * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
   * Restore pause wait for sync drain time period in seconds.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  preRestoreWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._preRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Pre Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Pre Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Pre Restore replica group.
   *
   * @param {string} [parameters.requestId] Pre Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Pre Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
   * metadata property bag.
   *
   * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
   * array.
   *
   * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
   * Restore pause wait for sync drain time period in seconds.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  preRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._preRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._preRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Restore Heartbeat a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  restoreheartbeatWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Restore Heartbeat a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback);
    }
  }

  /**
   * Post Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Post Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Post Restore replica group.
   *
   * @param {string} [parameters.requestId] Post Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Post Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.failedFileList] Post Restore Azure failed file
   * list.
   *
   * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
   * array.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postRestoreWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Post Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Post Restore replica group.
   *
   * @param {string} [parameters.requestId] Post Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Post Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.failedFileList] Post Restore Azure failed file
   * list.
   *
   * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
   * array.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Create a new CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint resource.
   *
   * @param {string} [parameters.location] Required. Gets or sets the location of
   * the resource. This will be one of the supported and registered Azure Geo
   * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
   * resource cannot be changed once it is created, but if an identical geo
   * region is specified on update, the request will succeed.
   *
   * @param {object} [parameters.tags] Gets or sets a list of key value pairs
   * that describe the resource. These tags can be used for viewing and grouping
   * this resource (across resource groups). A maximum of 15 tags can be provided
   * for a resource. Each tag must have a key with a length no greater than 128
   * characters and a value with a length no greater than 256 characters.
   *
   * @param {string} [parameters.storageAccountResourceId] Storage Account
   * Resource Id
   *
   * @param {string} [parameters.storageAccountShareName] Storage Account Share
   * name
   *
   * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
   * Id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CloudEndpoint>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create a new CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint resource.
   *
   * @param {string} [parameters.location] Required. Gets or sets the location of
   * the resource. This will be one of the supported and registered Azure Geo
   * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
   * resource cannot be changed once it is created, but if an identical geo
   * region is specified on update, the request will succeed.
   *
   * @param {object} [parameters.tags] Gets or sets a list of key value pairs
   * that describe the resource. These tags can be used for viewing and grouping
   * this resource (across resource groups). A maximum of 15 tags can be provided
   * for a resource. Each tag must have a key with a length no greater than 128
   * characters and a value with a length no greater than 256 characters.
   *
   * @param {string} [parameters.storageAccountResourceId] Storage Account
   * Resource Id
   *
   * @param {string} [parameters.storageAccountShareName] Storage Account Share
   * name
   *
   * @param {string} [parameters.storageAccountTenantId] Storage Account Tenant
   * Id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CloudEndpoint} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CloudEndpoint} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Delete a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options, optionalCallback);
    }
  }

  /**
   * Pre Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPreBackupWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Pre Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Post Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PostBackupResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPostBackupWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post Backup a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Backup request.
   *
   * @param {string} [parameters.azureFileShare] Azure File Share.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PostBackupResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PostBackupResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Pre Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Pre Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Pre Restore replica group.
   *
   * @param {string} [parameters.requestId] Pre Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Pre Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
   * metadata property bag.
   *
   * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
   * array.
   *
   * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
   * Restore pause wait for sync drain time period in seconds.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPreRestoreWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Pre Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Pre Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Pre Restore replica group.
   *
   * @param {string} [parameters.requestId] Pre Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Pre Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Pre Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Pre Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.backupMetadataPropertyBag] Pre Restore backup
   * metadata property bag.
   *
   * @param {array} [parameters.restoreFileSpec] Pre Restore restore file spec
   * array.
   *
   * @param {number} [parameters.pauseWaitForSyncDrainTimePeriodInSeconds] Pre
   * Restore pause wait for sync drain time period in seconds.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Post Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Post Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Post Restore replica group.
   *
   * @param {string} [parameters.requestId] Post Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Post Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.failedFileList] Post Restore Azure failed file
   * list.
   *
   * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
   * array.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginPostRestoreWithHttpOperationResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Post Restore a given CloudEndpoint.
   *
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   *
   * @param {string} storageSyncServiceName Name of Storage Sync Service
   * resource.
   *
   * @param {string} syncGroupName Name of Sync Group resource.
   *
   * @param {string} cloudEndpointName Name of Cloud Endpoint object.
   *
   * @param {object} parameters Body of Cloud Endpoint object.
   *
   * @param {string} [parameters.partition] Post Restore partition.
   *
   * @param {string} [parameters.replicaGroup] Post Restore replica group.
   *
   * @param {string} [parameters.requestId] Post Restore request id.
   *
   * @param {string} [parameters.azureFileShareUri] Post Restore Azure file share
   * uri.
   *
   * @param {string} [parameters.status] Post Restore Azure status.
   *
   * @param {string} [parameters.sourceAzureFileShareUri] Post Restore Azure
   * source azure file share uri.
   *
   * @param {string} [parameters.failedFileList] Post Restore Azure failed file
   * list.
   *
   * @param {array} [parameters.restoreFileSpec] Post Restore restore file spec
   * array.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options, optionalCallback);
    }
  }

}

module.exports = CloudEndpoints;
