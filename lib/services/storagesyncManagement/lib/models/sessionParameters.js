/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Parameter collection for creation and other operations on sessions.
 *
 */
class SessionParameters {
  /**
   * Create a SessionParameters.
   * @member {string} [userName] Encrypted User name to be used to connect to
   * node.
   * @member {string} [password] Encrypted Password associated with user name.
   * @member {string} [retentionPeriod] Session retention period. Possible
   * values include: 'Session', 'Persistent'
   * @member {string} [credentialDataFormat] Credential data format. Possible
   * values include: 'RsaEncrypted'
   * @member {string} [encryptionCertificateThumbprint] Encryption certificate
   * thumbprint.
   */
  constructor() {
  }

  /**
   * Defines the metadata of SessionParameters
   *
   * @returns {object} metadata of SessionParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SessionParameters',
      type: {
        name: 'Composite',
        className: 'SessionParameters',
        modelProperties: {
          userName: {
            required: false,
            serializedName: 'properties.userName',
            type: {
              name: 'String'
            }
          },
          password: {
            required: false,
            serializedName: 'properties.password',
            type: {
              name: 'String'
            }
          },
          retentionPeriod: {
            required: false,
            serializedName: 'properties.retentionPeriod',
            type: {
              name: 'Enum',
              allowedValues: [ 'Session', 'Persistent' ]
            }
          },
          credentialDataFormat: {
            required: false,
            serializedName: 'properties.credentialDataFormat',
            type: {
              name: 'Enum',
              allowedValues: [ 'RsaEncrypted' ]
            }
          },
          encryptionCertificateThumbprint: {
            required: false,
            serializedName: 'properties.EncryptionCertificateThumbprint',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = SessionParameters;
