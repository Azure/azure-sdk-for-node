/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * ServerEndpoint Health object.
 *
 */
class ServerEndpointHealth {
  /**
   * Create a ServerEndpointHealth.
   * @property {string} [downloadHealth] Download Health Status. Possible
   * values include: 'Healthy', 'Error', 'SyncBlockedForRestore',
   * 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
   * @property {string} [uploadHealth] Upload Health Status. Possible values
   * include: 'Healthy', 'Error', 'SyncBlockedForRestore',
   * 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
   * @property {string} [combinedHealth] Combined Health Status. Possible
   * values include: 'Healthy', 'Error', 'SyncBlockedForRestore',
   * 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
   * @property {date} [lastUpdatedTimestamp] Last Updated Timestamp
   * @property {object} [uploadStatus] Upload Status
   * @property {number} [uploadStatus.lastSyncResult] Last sync status
   * @property {date} [uploadStatus.lastSyncTimestamp] Last sync timestamp
   * @property {date} [uploadStatus.lastSyncSuccessTimestamp] Last sync success
   * timestamp
   * @property {number} [uploadStatus.lastSyncPerItemErrorCount] Last sync per
   * item error count.
   * @property {object} [downloadStatus] Download Status
   * @property {number} [downloadStatus.lastSyncResult] Last sync status
   * @property {date} [downloadStatus.lastSyncTimestamp] Last sync timestamp
   * @property {date} [downloadStatus.lastSyncSuccessTimestamp] Last sync
   * success timestamp
   * @property {number} [downloadStatus.lastSyncPerItemErrorCount] Last sync
   * per item error count.
   * @property {object} [currentProgress] Current progress
   * @property {date} [currentProgress.progressTimestamp] Progress timestamp
   * @property {string} [currentProgress.syncDirection] Sync direction.
   * Possible values include: 'none', 'initialize', 'download', 'upload',
   * 'recall'
   * @property {number} [currentProgress.perItemErrorCount] Per item error
   * count
   * @property {number} [currentProgress.appliedItemCount] Applied item count.
   * @property {number} [currentProgress.totalItemCount] Total item count
   * @property {number} [currentProgress.appliedBytes] Applied bytes
   * @property {number} [currentProgress.totalBytes] Total bytes
   * @property {string} [offlineDataTransferStatus] Offline Data Transfer
   * State. Possible values include: 'InProgress', 'Stopping', 'NotRunning',
   * 'Complete'
   */
  constructor() {
  }

  /**
   * Defines the metadata of ServerEndpointHealth
   *
   * @returns {object} metadata of ServerEndpointHealth
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ServerEndpointHealth',
      type: {
        name: 'Composite',
        className: 'ServerEndpointHealth',
        modelProperties: {
          downloadHealth: {
            required: false,
            serializedName: 'downloadHealth',
            type: {
              name: 'String'
            }
          },
          uploadHealth: {
            required: false,
            serializedName: 'uploadHealth',
            type: {
              name: 'String'
            }
          },
          combinedHealth: {
            required: false,
            serializedName: 'combinedHealth',
            type: {
              name: 'String'
            }
          },
          lastUpdatedTimestamp: {
            required: false,
            serializedName: 'lastUpdatedTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          uploadStatus: {
            required: false,
            serializedName: 'uploadStatus',
            type: {
              name: 'Composite',
              className: 'SyncSessionStatus'
            }
          },
          downloadStatus: {
            required: false,
            serializedName: 'downloadStatus',
            type: {
              name: 'Composite',
              className: 'SyncSessionStatus'
            }
          },
          currentProgress: {
            required: false,
            serializedName: 'currentProgress',
            type: {
              name: 'Composite',
              className: 'SyncProgressStatus'
            }
          },
          offlineDataTransferStatus: {
            required: false,
            serializedName: 'offlineDataTransferStatus',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ServerEndpointHealth;
