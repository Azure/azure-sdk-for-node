/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * JSON properties that the gateway service uses know how to communicate with
 * the resource.
 *
 */
class GatewayProfile {
  /**
   * Create a GatewayProfile.
   * @member {string} [dataPlaneServiceBaseAddress] The Dataplane connection
   * URL.
   * @member {string} [gatewayId] The ID of the gateway.
   * @member {string} [environment] The environment for the gateway (DEV,
   * DogFood, or Production).
   * @member {string} [upgradeManifestUrl] Gateway upgrade manifest URL.
   * @member {string} [messagingNamespace] Messaging namespace.
   * @member {string} [messagingAccount] Messaging Account.
   * @member {string} [messagingKey] Messaging Key.
   * @member {string} [requestQueue] Request queue name.
   * @member {string} [responseTopic] Response topic name.
   * @member {string} [statusBlobSignature] The gateway status blob SAS URL.
   */
  constructor() {
  }

  /**
   * Defines the metadata of GatewayProfile
   *
   * @returns {object} metadata of GatewayProfile
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GatewayProfile',
      type: {
        name: 'Composite',
        className: 'GatewayProfile',
        modelProperties: {
          dataPlaneServiceBaseAddress: {
            required: false,
            serializedName: 'dataPlaneServiceBaseAddress',
            type: {
              name: 'String'
            }
          },
          gatewayId: {
            required: false,
            serializedName: 'gatewayId',
            type: {
              name: 'String'
            }
          },
          environment: {
            required: false,
            serializedName: 'environment',
            type: {
              name: 'String'
            }
          },
          upgradeManifestUrl: {
            required: false,
            serializedName: 'upgradeManifestUrl',
            type: {
              name: 'String'
            }
          },
          messagingNamespace: {
            required: false,
            serializedName: 'messagingNamespace',
            type: {
              name: 'String'
            }
          },
          messagingAccount: {
            required: false,
            serializedName: 'messagingAccount',
            type: {
              name: 'String'
            }
          },
          messagingKey: {
            required: false,
            serializedName: 'messagingKey',
            type: {
              name: 'String'
            }
          },
          requestQueue: {
            required: false,
            serializedName: 'requestQueue',
            type: {
              name: 'String'
            }
          },
          responseTopic: {
            required: false,
            serializedName: 'responseTopic',
            type: {
              name: 'String'
            }
          },
          statusBlobSignature: {
            required: false,
            serializedName: 'statusBlobSignature',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = GatewayProfile;
