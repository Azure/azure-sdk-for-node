/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Sync Session status object.
 *
 */
class SyncSessionStatus {
  /**
   * Create a SyncSessionStatus.
   * @property {number} [lastSyncResult] Last sync result (HResult)
   * @property {date} [lastSyncTimestamp] Last sync timestamp
   * @property {date} [lastSyncSuccessTimestamp] Last sync success timestamp
   * @property {number} [lastSyncPerItemErrorCount] Last sync per item error
   * count.
   * @property {number} [persistentFilesNotSyncingCount] Count of persistent
   * files not syncing. Reserved for future use.
   * @property {number} [transientFilesNotSyncingCount] Count of transient
   * files not syncing. Reserved for future use.
   * @property {array} [filesNotSyncingErrors] Array of per-item errors coming
   * from the last sync session. Reserved for future use.
   */
  constructor() {
  }

  /**
   * Defines the metadata of SyncSessionStatus
   *
   * @returns {object} metadata of SyncSessionStatus
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SyncSessionStatus',
      type: {
        name: 'Composite',
        className: 'SyncSessionStatus',
        modelProperties: {
          lastSyncResult: {
            required: false,
            readOnly: true,
            serializedName: 'lastSyncResult',
            type: {
              name: 'Number'
            }
          },
          lastSyncTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'lastSyncTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          lastSyncSuccessTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'lastSyncSuccessTimestamp',
            type: {
              name: 'DateTime'
            }
          },
          lastSyncPerItemErrorCount: {
            required: false,
            serializedName: 'lastSyncPerItemErrorCount',
            type: {
              name: 'Number'
            }
          },
          persistentFilesNotSyncingCount: {
            required: false,
            readOnly: true,
            serializedName: 'persistentFilesNotSyncingCount',
            type: {
              name: 'Number'
            }
          },
          transientFilesNotSyncingCount: {
            required: false,
            readOnly: true,
            serializedName: 'transientFilesNotSyncingCount',
            type: {
              name: 'Number'
            }
          },
          filesNotSyncingErrors: {
            required: false,
            readOnly: true,
            serializedName: 'filesNotSyncingErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FilesNotSyncingErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'FilesNotSyncingError'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = SyncSessionStatus;
