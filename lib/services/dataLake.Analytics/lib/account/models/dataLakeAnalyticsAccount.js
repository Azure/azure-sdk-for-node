/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A Data Lake Analytics account object, containing all information associated
 * with the named Data Lake Analytics account.
 *
 * @extends models['Resource']
 */
class DataLakeAnalyticsAccount extends models['Resource'] {
  /**
   * Create a DataLakeAnalyticsAccount.
   * @member {uuid} [accountId] The unique identifier associated with this Data
   * Lake Analytics account.
   * @member {string} [provisioningState] The provisioning status of the Data
   * Lake Analytics account. Possible values include: 'Failed', 'Creating',
   * 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting',
   * 'Deleted', 'Undeleting', 'Canceled'
   * @member {string} [state] The state of the Data Lake Analytics account.
   * Possible values include: 'Active', 'Suspended'
   * @member {date} [creationTime] The account creation time.
   * @member {date} [lastModifiedTime] The account last modified time.
   * @member {string} [endpoint] The full CName endpoint for this account.
   * @member {string} [defaultDataLakeStoreAccount] The default Data Lake Store
   * account associated with this account.
   * @member {array} [dataLakeStoreAccounts] The list of Data Lake Store
   * accounts associated with this account.
   * @member {array} [storageAccounts] The list of Azure Blob Storage accounts
   * associated with this account.
   * @member {array} [computePolicies] The list of compute policies associated
   * with this account.
   * @member {array} [firewallRules] The list of firewall rules associated with
   * this account.
   * @member {string} [firewallState] The current state of the IP address
   * firewall for this account. Possible values include: 'Enabled', 'Disabled'
   * @member {string} [firewallAllowAzureIps] The current state of allowing or
   * disallowing IPs originating within Azure through the firewall. If the
   * firewall is disabled, this is not enforced. Possible values include:
   * 'Enabled', 'Disabled'
   * @member {string} [newTier] The commitment tier for the next month.
   * Possible values include: 'Consumption', 'Commitment_100AUHours',
   * 'Commitment_500AUHours', 'Commitment_1000AUHours',
   * 'Commitment_5000AUHours', 'Commitment_10000AUHours',
   * 'Commitment_50000AUHours', 'Commitment_100000AUHours',
   * 'Commitment_500000AUHours'
   * @member {string} [currentTier] The commitment tier in use for the current
   * month. Possible values include: 'Consumption', 'Commitment_100AUHours',
   * 'Commitment_500AUHours', 'Commitment_1000AUHours',
   * 'Commitment_5000AUHours', 'Commitment_10000AUHours',
   * 'Commitment_50000AUHours', 'Commitment_100000AUHours',
   * 'Commitment_500000AUHours'
   * @member {number} [maxJobCount] The maximum supported jobs running under
   * the account at the same time. Default value: 3 .
   * @member {number} [systemMaxJobCount] The system defined maximum supported
   * jobs running under the account at the same time, which restricts the
   * maximum number of running jobs the user can set for the account.
   * @member {number} [maxDegreeOfParallelism] The maximum supported degree of
   * parallelism for this account. Default value: 30 .
   * @member {number} [systemMaxDegreeOfParallelism] The system defined maximum
   * supported degree of parallelism for this account, which restricts the
   * maximum value of parallelism the user can set for the account.
   * @member {number} [maxDegreeOfParallelismPerJob] The maximum supported
   * degree of parallelism per job for this account.
   * @member {number} [minPriorityPerJob] The minimum supported priority per
   * job for this account.
   * @member {number} [queryStoreRetention] The number of days that job
   * metadata is retained. Default value: 30 .
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DataLakeAnalyticsAccount
   *
   * @returns {object} metadata of DataLakeAnalyticsAccount
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataLakeAnalyticsAccount',
      type: {
        name: 'Composite',
        className: 'DataLakeAnalyticsAccount',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            readOnly: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            readOnly: true,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          accountId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.accountId',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled' ]
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'properties.state',
            type: {
              name: 'Enum',
              allowedValues: [ 'Active', 'Suspended' ]
            }
          },
          creationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationTime',
            type: {
              name: 'DateTime'
            }
          },
          lastModifiedTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModifiedTime',
            type: {
              name: 'DateTime'
            }
          },
          endpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.endpoint',
            type: {
              name: 'String'
            }
          },
          defaultDataLakeStoreAccount: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultDataLakeStoreAccount',
            type: {
              name: 'String'
            }
          },
          dataLakeStoreAccounts: {
            required: false,
            readOnly: true,
            serializedName: 'properties.dataLakeStoreAccounts',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DataLakeStoreAccountInformationElementType',
                  type: {
                    name: 'Composite',
                    className: 'DataLakeStoreAccountInformation'
                  }
              }
            }
          },
          storageAccounts: {
            required: false,
            readOnly: true,
            serializedName: 'properties.storageAccounts',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StorageAccountInformationElementType',
                  type: {
                    name: 'Composite',
                    className: 'StorageAccountInformation'
                  }
              }
            }
          },
          computePolicies: {
            required: false,
            readOnly: true,
            serializedName: 'properties.computePolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ComputePolicyElementType',
                  type: {
                    name: 'Composite',
                    className: 'ComputePolicy'
                  }
              }
            }
          },
          firewallRules: {
            required: false,
            readOnly: true,
            serializedName: 'properties.firewallRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FirewallRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'FirewallRule'
                  }
              }
            }
          },
          firewallState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.firewallState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          firewallAllowAzureIps: {
            required: false,
            readOnly: true,
            serializedName: 'properties.firewallAllowAzureIps',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          newTier: {
            required: false,
            readOnly: true,
            serializedName: 'properties.newTier',
            type: {
              name: 'Enum',
              allowedValues: [ 'Consumption', 'Commitment_100AUHours', 'Commitment_500AUHours', 'Commitment_1000AUHours', 'Commitment_5000AUHours', 'Commitment_10000AUHours', 'Commitment_50000AUHours', 'Commitment_100000AUHours', 'Commitment_500000AUHours' ]
            }
          },
          currentTier: {
            required: false,
            readOnly: true,
            serializedName: 'properties.currentTier',
            type: {
              name: 'Enum',
              allowedValues: [ 'Consumption', 'Commitment_100AUHours', 'Commitment_500AUHours', 'Commitment_1000AUHours', 'Commitment_5000AUHours', 'Commitment_10000AUHours', 'Commitment_50000AUHours', 'Commitment_100000AUHours', 'Commitment_500000AUHours' ]
            }
          },
          maxJobCount: {
            required: false,
            readOnly: true,
            serializedName: 'properties.maxJobCount',
            defaultValue: 3,
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          systemMaxJobCount: {
            required: false,
            readOnly: true,
            serializedName: 'properties.systemMaxJobCount',
            type: {
              name: 'Number'
            }
          },
          maxDegreeOfParallelism: {
            required: false,
            readOnly: true,
            serializedName: 'properties.maxDegreeOfParallelism',
            defaultValue: 30,
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          systemMaxDegreeOfParallelism: {
            required: false,
            readOnly: true,
            serializedName: 'properties.systemMaxDegreeOfParallelism',
            type: {
              name: 'Number'
            }
          },
          maxDegreeOfParallelismPerJob: {
            required: false,
            readOnly: true,
            serializedName: 'properties.maxDegreeOfParallelismPerJob',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          minPriorityPerJob: {
            required: false,
            readOnly: true,
            serializedName: 'properties.minPriorityPerJob',
            constraints: {
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          queryStoreRetention: {
            required: false,
            readOnly: true,
            serializedName: 'properties.queryStoreRetention',
            defaultValue: 30,
            constraints: {
              InclusiveMaximum: 180,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = DataLakeAnalyticsAccount;
