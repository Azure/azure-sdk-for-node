/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the JobInformation class.
 * @constructor
 * The common Data Lake Analytics job information properties.
 *
 * @member {uuid} [jobId] Gets or sets the job's unique identifier (a GUID).
 * 
 * @member {string} name Gets or sets the friendly name of the job.
 * 
 * @member {string} type Gets or sets the job type of the current job (Hive or
 * USql). Possible values include: 'USql', 'Hive'
 * 
 * @member {string} [submitter] Gets or sets the user or account that
 * submitted the job.
 * 
 * @member {array} [errorMessage] Gets the error message details for the job,
 * if the job failed.
 * 
 * @member {number} [degreeOfParallelism] Gets or sets the degree of
 * parallelism used for this job. This must be greater than 0.
 * 
 * @member {number} [priority] Gets or sets the priority value for the current
 * job. Lower numbers have a higher priority. By default, a job has a
 * priority of 1000. This must be greater than 0.
 * 
 * @member {date} [submitTime] Gets the time the job was submitted to the
 * service.
 * 
 * @member {date} [startTime] Gets the start time of the job.
 * 
 * @member {date} [endTime] Gets the completion time of the job.
 * 
 * @member {string} [state] Gets the job state. When the job is in the Ended
 * state, refer to Result and ErrorMessage for details. Possible values
 * include: 'Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running',
 * 'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity'
 * 
 * @member {string} [result] Gets the result of job execution or the current
 * result of the running job. Possible values include: 'None', 'Succeeded',
 * 'Cancelled', 'Failed'
 * 
 * @member {array} [stateAuditRecords] Gets the job state audit records,
 * indicating when various operations have been performed on this job.
 * 
 * @member {object} properties Gets or sets the job specific properties.
 * 
 * @member {string} [properties.runtimeVersion] Gets or sets the runtime
 * version of the U-SQL engine to use
 * 
 * @member {string} [properties.script] Gets or sets the U-SQL script to run
 * 
 * @member {string} [properties.type] Polymorhpic Discriminator
 * 
 */
function JobInformation() {
}

/**
 * Defines the metadata of JobInformation
 *
 * @returns {object} metadata of JobInformation
 *
 */
JobInformation.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'JobInformation',
    type: {
      name: 'Composite',
      className: 'JobInformation',
      modelProperties: {
        jobId: {
          required: false,
          serializedName: 'jobId',
          type: {
            name: 'String'
          }
        },
        name: {
          required: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: true,
          serializedName: 'type',
          type: {
            name: 'Enum',
            allowedValues: [ 'USql', 'Hive' ]
          }
        },
        submitter: {
          required: false,
          serializedName: 'submitter',
          type: {
            name: 'String'
          }
        },
        errorMessage: {
          required: false,
          readOnly: true,
          serializedName: 'errorMessage',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'JobErrorDetailsElementType',
                type: {
                  name: 'Composite',
                  className: 'JobErrorDetails'
                }
            }
          }
        },
        degreeOfParallelism: {
          required: false,
          serializedName: 'degreeOfParallelism',
          type: {
            name: 'Number'
          }
        },
        priority: {
          required: false,
          serializedName: 'priority',
          type: {
            name: 'Number'
          }
        },
        submitTime: {
          required: false,
          readOnly: true,
          serializedName: 'submitTime',
          type: {
            name: 'DateTime'
          }
        },
        startTime: {
          required: false,
          readOnly: true,
          serializedName: 'startTime',
          type: {
            name: 'DateTime'
          }
        },
        endTime: {
          required: false,
          readOnly: true,
          serializedName: 'endTime',
          type: {
            name: 'DateTime'
          }
        },
        state: {
          required: false,
          readOnly: true,
          serializedName: 'state',
          type: {
            name: 'Enum',
            allowedValues: [ 'Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running', 'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity' ]
          }
        },
        result: {
          required: false,
          readOnly: true,
          serializedName: 'result',
          type: {
            name: 'Enum',
            allowedValues: [ 'None', 'Succeeded', 'Cancelled', 'Failed' ]
          }
        },
        stateAuditRecords: {
          required: false,
          readOnly: true,
          serializedName: 'stateAuditRecords',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'JobStateAuditRecordElementType',
                type: {
                  name: 'Composite',
                  className: 'JobStateAuditRecord'
                }
            }
          }
        },
        properties: {
          required: true,
          serializedName: 'properties',
          type: {
            name: 'Composite',
            polymorphicDiscriminator: 'type',
            uberParent: 'JobProperties',
            className: 'JobProperties'
          }
        }
      }
    }
  };
};

module.exports = JobInformation;
