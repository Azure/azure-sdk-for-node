/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * PipelineModel
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataLakeAnalyticsJobManagementClient.
 */
export interface PipelineModel {


    /**
     * Lists all pipelines.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * list of pipelines. The startDateTime and endDateTime can be no more than 30
     * days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get the list of
     * pipelines. The startDateTime and endDateTime can be no more than 30 days
     * apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobPipelineInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(accountName: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobPipelineInformationListResult>>;

    /**
     * Lists all pipelines.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * list of pipelines. The startDateTime and endDateTime can be no more than 30
     * days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get the list of
     * pipelines. The startDateTime and endDateTime can be no more than 30 days
     * apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobPipelineInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobPipelineInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobPipelineInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(accountName: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobPipelineInformationListResult>;
    list(accountName: string, callback: ServiceCallback<models.JobPipelineInformationListResult>): void;
    list(accountName: string, options: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobPipelineInformationListResult>): void;


    /**
     * Gets the Pipeline information for the specified pipeline ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} pipelineIdentity Pipeline ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * pipeline and aggregate its data. The startDateTime and endDateTime can be no
     * more than 30 days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get the
     * pipeline and aggregate its data. The startDateTime and endDateTime can be no
     * more than 30 days apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobPipelineInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(accountName: string, pipelineIdentity: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobPipelineInformation>>;

    /**
     * Gets the Pipeline information for the specified pipeline ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} pipelineIdentity Pipeline ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * pipeline and aggregate its data. The startDateTime and endDateTime can be no
     * more than 30 days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get the
     * pipeline and aggregate its data. The startDateTime and endDateTime can be no
     * more than 30 days apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobPipelineInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobPipelineInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobPipelineInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(accountName: string, pipelineIdentity: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobPipelineInformation>;
    get(accountName: string, pipelineIdentity: string, callback: ServiceCallback<models.JobPipelineInformation>): void;
    get(accountName: string, pipelineIdentity: string, options: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobPipelineInformation>): void;


    /**
     * Lists all pipelines.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobPipelineInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobPipelineInformationListResult>>;

    /**
     * Lists all pipelines.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobPipelineInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobPipelineInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobPipelineInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobPipelineInformationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.JobPipelineInformationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobPipelineInformationListResult>): void;
}

/**
 * @class
 * Recurrence
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataLakeAnalyticsJobManagementClient.
 */
export interface Recurrence {


    /**
     * Lists all recurrences.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * list of recurrences. The startDateTime and endDateTime can be no more than
     * 30 days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get the list of
     * recurrences. The startDateTime and endDateTime can be no more than 30 days
     * apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobRecurrenceInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(accountName: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobRecurrenceInformationListResult>>;

    /**
     * Lists all recurrences.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * list of recurrences. The startDateTime and endDateTime can be no more than
     * 30 days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get the list of
     * recurrences. The startDateTime and endDateTime can be no more than 30 days
     * apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobRecurrenceInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobRecurrenceInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobRecurrenceInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(accountName: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobRecurrenceInformationListResult>;
    list(accountName: string, callback: ServiceCallback<models.JobRecurrenceInformationListResult>): void;
    list(accountName: string, options: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobRecurrenceInformationListResult>): void;


    /**
     * Gets the recurrence information for the specified recurrence ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} recurrenceIdentity Recurrence ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * recurrence and aggregate its data. The startDateTime and endDateTime can be
     * no more than 30 days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get recurrence
     * and aggregate its data. The startDateTime and endDateTime can be no more
     * than 30 days apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobRecurrenceInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(accountName: string, recurrenceIdentity: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobRecurrenceInformation>>;

    /**
     * Gets the recurrence information for the specified recurrence ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} recurrenceIdentity Recurrence ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startDateTime] The start date for when to get the
     * recurrence and aggregate its data. The startDateTime and endDateTime can be
     * no more than 30 days apart.
     *
     * @param {date} [options.endDateTime] The end date for when to get recurrence
     * and aggregate its data. The startDateTime and endDateTime can be no more
     * than 30 days apart.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobRecurrenceInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobRecurrenceInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobRecurrenceInformation} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(accountName: string, recurrenceIdentity: string, options?: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobRecurrenceInformation>;
    get(accountName: string, recurrenceIdentity: string, callback: ServiceCallback<models.JobRecurrenceInformation>): void;
    get(accountName: string, recurrenceIdentity: string, options: { startDateTime? : Date, endDateTime? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobRecurrenceInformation>): void;


    /**
     * Lists all recurrences.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobRecurrenceInformationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobRecurrenceInformationListResult>>;

    /**
     * Lists all recurrences.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobRecurrenceInformationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobRecurrenceInformationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobRecurrenceInformationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobRecurrenceInformationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.JobRecurrenceInformationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobRecurrenceInformationListResult>): void;
}

/**
 * @class
 * Job
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataLakeAnalyticsJobManagementClient.
 */
export interface Job {


    /**
     * Gets statistics of the specified job.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job Information ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStatistics>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatisticsWithHttpOperationResponse(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStatistics>>;

    /**
     * Gets statistics of the specified job.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job Information ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStatistics} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStatistics} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStatistics} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatistics(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStatistics>;
    getStatistics(accountName: string, jobIdentity: string, callback: ServiceCallback<models.JobStatistics>): void;
    getStatistics(accountName: string, jobIdentity: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStatistics>): void;


    /**
     * Gets the job debug data information specified by the job ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job identifier. Uniquely identifies the job across
     * all jobs submitted to the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobDataPath>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDebugDataPathWithHttpOperationResponse(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobDataPath>>;

    /**
     * Gets the job debug data information specified by the job ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job identifier. Uniquely identifies the job across
     * all jobs submitted to the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobDataPath} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobDataPath} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobDataPath} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDebugDataPath(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobDataPath>;
    getDebugDataPath(accountName: string, jobIdentity: string, callback: ServiceCallback<models.JobDataPath>): void;
    getDebugDataPath(accountName: string, jobIdentity: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobDataPath>): void;


    /**
     * Builds (compiles) the specified job in the specified Data Lake Analytics
     * account for job correctness and validation.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} parameters The parameters to build a job.
     *
     * @param {string} [parameters.name] the friendly name of the job to build.
     *
     * @param {string} parameters.type the job type of the current job (Hive or
     * USql). Possible values include: 'USql', 'Hive'
     *
     * @param {object} parameters.properties the job specific properties.
     *
     * @param {string} [parameters.properties.runtimeVersion] the runtime version
     * of the Data Lake Analytics engine to use for the specific type of job being
     * run.
     *
     * @param {string} parameters.properties.script the script to run. Please note
     * that the maximum script size is 3 MB.
     *
     * @param {string} parameters.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    buildWithHttpOperationResponse(accountName: string, parameters: models.BuildJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobInformation>>;

    /**
     * Builds (compiles) the specified job in the specified Data Lake Analytics
     * account for job correctness and validation.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} parameters The parameters to build a job.
     *
     * @param {string} [parameters.name] the friendly name of the job to build.
     *
     * @param {string} parameters.type the job type of the current job (Hive or
     * USql). Possible values include: 'USql', 'Hive'
     *
     * @param {object} parameters.properties the job specific properties.
     *
     * @param {string} [parameters.properties.runtimeVersion] the runtime version
     * of the Data Lake Analytics engine to use for the specific type of job being
     * run.
     *
     * @param {string} parameters.properties.script the script to run. Please note
     * that the maximum script size is 3 MB.
     *
     * @param {string} parameters.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    build(accountName: string, parameters: models.BuildJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobInformation>;
    build(accountName: string, parameters: models.BuildJobParameters, callback: ServiceCallback<models.JobInformation>): void;
    build(accountName: string, parameters: models.BuildJobParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobInformation>): void;


    /**
     * Cancels the running job specified by the job ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job identifier. Uniquely identifies the job across
     * all jobs submitted to the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels the running job specified by the job ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job identifier. Uniquely identifies the job across
     * all jobs submitted to the service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(accountName: string, jobIdentity: string, callback: ServiceCallback<void>): void;
    cancel(accountName: string, jobIdentity: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Submits a job to the specified Data Lake Analytics account.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job identifier. Uniquely identifies the job across
     * all jobs submitted to the service.
     *
     * @param {object} parameters The parameters to submit a job.
     *
     * @param {string} parameters.name the friendly name of the job to submit.
     *
     * @param {number} [parameters.degreeOfParallelism] the degree of parallelism
     * to use for this job. This must be greater than 0, if set to less than 0 it
     * will default to 1.
     *
     * @param {number} [parameters.priority] the priority value to use for the
     * current job. Lower numbers have a higher priority. By default, a job has a
     * priority of 1000. This must be greater than 0.
     *
     * @param {array} [parameters.logFilePatterns] the list of log file name
     * patterns to find in the logFolder. '*' is the only matching character
     * allowed. Example format: jobExecution*.log or *mylog*.txt
     *
     * @param {object} [parameters.related] the recurring job relationship
     * information properties.
     *
     * @param {uuid} [parameters.related.pipelineId] the job relationship pipeline
     * identifier (a GUID).
     *
     * @param {string} [parameters.related.pipelineName] the friendly name of the
     * job relationship pipeline, which does not need to be unique.
     *
     * @param {string} [parameters.related.pipelineUri] the pipeline uri, unique,
     * links to the originating service for this pipeline.
     *
     * @param {uuid} [parameters.related.runId] the run identifier (a GUID), unique
     * identifier of the iteration of this pipeline.
     *
     * @param {uuid} parameters.related.recurrenceId the recurrence identifier (a
     * GUID), unique per activity/script, regardless of iterations. This is
     * something to link different occurrences of the same job together.
     *
     * @param {string} [parameters.related.recurrenceName] the recurrence name,
     * user friendly name for the correlation between jobs.
     *
     * @param {string} parameters.type the job type of the current job (Hive or
     * USql). Possible values include: 'USql', 'Hive'
     *
     * @param {object} parameters.properties the job specific properties.
     *
     * @param {string} [parameters.properties.runtimeVersion] the runtime version
     * of the Data Lake Analytics engine to use for the specific type of job being
     * run.
     *
     * @param {string} parameters.properties.script the script to run. Please note
     * that the maximum script size is 3 MB.
     *
     * @param {string} parameters.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(accountName: string, jobIdentity: string, parameters: models.CreateJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobInformation>>;

    /**
     * Submits a job to the specified Data Lake Analytics account.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity Job identifier. Uniquely identifies the job across
     * all jobs submitted to the service.
     *
     * @param {object} parameters The parameters to submit a job.
     *
     * @param {string} parameters.name the friendly name of the job to submit.
     *
     * @param {number} [parameters.degreeOfParallelism] the degree of parallelism
     * to use for this job. This must be greater than 0, if set to less than 0 it
     * will default to 1.
     *
     * @param {number} [parameters.priority] the priority value to use for the
     * current job. Lower numbers have a higher priority. By default, a job has a
     * priority of 1000. This must be greater than 0.
     *
     * @param {array} [parameters.logFilePatterns] the list of log file name
     * patterns to find in the logFolder. '*' is the only matching character
     * allowed. Example format: jobExecution*.log or *mylog*.txt
     *
     * @param {object} [parameters.related] the recurring job relationship
     * information properties.
     *
     * @param {uuid} [parameters.related.pipelineId] the job relationship pipeline
     * identifier (a GUID).
     *
     * @param {string} [parameters.related.pipelineName] the friendly name of the
     * job relationship pipeline, which does not need to be unique.
     *
     * @param {string} [parameters.related.pipelineUri] the pipeline uri, unique,
     * links to the originating service for this pipeline.
     *
     * @param {uuid} [parameters.related.runId] the run identifier (a GUID), unique
     * identifier of the iteration of this pipeline.
     *
     * @param {uuid} parameters.related.recurrenceId the recurrence identifier (a
     * GUID), unique per activity/script, regardless of iterations. This is
     * something to link different occurrences of the same job together.
     *
     * @param {string} [parameters.related.recurrenceName] the recurrence name,
     * user friendly name for the correlation between jobs.
     *
     * @param {string} parameters.type the job type of the current job (Hive or
     * USql). Possible values include: 'USql', 'Hive'
     *
     * @param {object} parameters.properties the job specific properties.
     *
     * @param {string} [parameters.properties.runtimeVersion] the runtime version
     * of the Data Lake Analytics engine to use for the specific type of job being
     * run.
     *
     * @param {string} parameters.properties.script the script to run. Please note
     * that the maximum script size is 3 MB.
     *
     * @param {string} parameters.properties.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(accountName: string, jobIdentity: string, parameters: models.CreateJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobInformation>;
    create(accountName: string, jobIdentity: string, parameters: models.CreateJobParameters, callback: ServiceCallback<models.JobInformation>): void;
    create(accountName: string, jobIdentity: string, parameters: models.CreateJobParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobInformation>): void;


    /**
     * Gets the job information for the specified job ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity JobInfo ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobInformation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobInformation>>;

    /**
     * Gets the job information for the specified job ID.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {uuid} jobIdentity JobInfo ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobInformation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobInformation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobInformation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(accountName: string, jobIdentity: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobInformation>;
    get(accountName: string, jobIdentity: string, callback: ServiceCallback<models.JobInformation>): void;
    get(accountName: string, jobIdentity: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobInformation>): void;


    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {number} [options.top] The number of items to return. Optional.
     *
     * @param {number} [options.skip] The number of items to skip over before
     * returning elements. Optional.
     *
     * @param {string} [options.select] OData Select statement. Limits the
     * properties on each entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     *
     * @param {string} [options.orderby] OrderBy clause. One or more
     * comma-separated expressions with an optional "asc" (the default) or "desc"
     * depending on the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     *
     * @param {boolean} [options.count] The Boolean value of true or false to
     * request a count of the matching resources included with the resources in the
     * response, e.g. Categories?$count=true. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobInfoListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(accountName: string, options?: { filter? : string, top? : number, skip? : number, select? : string, orderby? : string, count? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobInfoListResult>>;

    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param {string} accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData filter. Optional.
     *
     * @param {number} [options.top] The number of items to return. Optional.
     *
     * @param {number} [options.skip] The number of items to skip over before
     * returning elements. Optional.
     *
     * @param {string} [options.select] OData Select statement. Limits the
     * properties on each entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     *
     * @param {string} [options.orderby] OrderBy clause. One or more
     * comma-separated expressions with an optional "asc" (the default) or "desc"
     * depending on the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     *
     * @param {boolean} [options.count] The Boolean value of true or false to
     * request a count of the matching resources included with the resources in the
     * response, e.g. Categories?$count=true. Optional.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobInfoListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobInfoListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobInfoListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(accountName: string, options?: { filter? : string, top? : number, skip? : number, select? : string, orderby? : string, count? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobInfoListResult>;
    list(accountName: string, callback: ServiceCallback<models.JobInfoListResult>): void;
    list(accountName: string, options: { filter? : string, top? : number, skip? : number, select? : string, orderby? : string, count? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobInfoListResult>): void;


    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobInfoListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobInfoListResult>>;

    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobInfoListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobInfoListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobInfoListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobInfoListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.JobInfoListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobInfoListResult>): void;
}
