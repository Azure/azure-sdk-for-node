/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlTable class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL table item.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [schemaName] Gets or sets the name of the schema
 * associated with this table and database.
 * 
 * @member {string} [name] Gets or sets the name of the table.
 * 
 * @member {array} [columnList] Gets or sets the list of columns in this table
 * 
 * @member {array} [indexList] Gets or sets the list of indices in this table
 * 
 * @member {array} [partitionKeyList] Gets or sets the list of partition keys
 * in the table
 * 
 * @member {object} [externalTable] Gets or sets the external table associated
 * with the table.
 * 
 * @member {string} [externalTable.tableName] Gets or sets the name of the
 * table associated with this database and schema.
 * 
 * @member {object} [externalTable.dataSource] Gets or sets the data source
 * associated with this external table.
 * 
 * @member {object} [externalTable.dataSource.name] Gets or sets the name of
 * the external table associated with this database, schema and table.
 * 
 * @member {string} [externalTable.dataSource.name.firstPart] Gets or sets the
 * name of the table associated with this database and schema.
 * 
 * @member {string} [externalTable.dataSource.name.secondPart] Gets or sets
 * the name of the table associated with this database and schema.
 * 
 * @member {string} [externalTable.dataSource.name.thirdPart] Gets or sets the
 * name of the table associated with this database and schema.
 * 
 * @member {string} [externalTable.dataSource.name.server] Gets or sets the
 * name of the table associated with this database and schema.
 * 
 * @member {uuid} [externalTable.dataSource.version] Gets or sets the version
 * of the external data source.
 * 
 */
function USqlTable() {
  USqlTable['super_'].call(this);
}

util.inherits(USqlTable, models['CatalogItem']);

/**
 * Defines the metadata of USqlTable
 *
 * @returns {object} metadata of USqlTable
 *
 */
USqlTable.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'USqlTable',
    type: {
      name: 'Composite',
      className: 'USqlTable',
      modelProperties: {
        computeAccountName: {
          required: false,
          serializedName: 'computeAccountName',
          type: {
            name: 'String'
          }
        },
        version: {
          required: false,
          serializedName: 'version',
          type: {
            name: 'String'
          }
        },
        databaseName: {
          required: false,
          serializedName: 'databaseName',
          type: {
            name: 'String'
          }
        },
        schemaName: {
          required: false,
          serializedName: 'schemaName',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'tableName',
          type: {
            name: 'String'
          }
        },
        columnList: {
          required: false,
          serializedName: 'columnList',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'USqlTableColumnElementType',
                type: {
                  name: 'Composite',
                  className: 'USqlTableColumn'
                }
            }
          }
        },
        indexList: {
          required: false,
          serializedName: 'indexList',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'USqlIndexElementType',
                type: {
                  name: 'Composite',
                  className: 'USqlIndex'
                }
            }
          }
        },
        partitionKeyList: {
          required: false,
          serializedName: 'partitionKeyList',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        externalTable: {
          required: false,
          serializedName: 'externalTable',
          type: {
            name: 'Composite',
            className: 'ExternalTable'
          }
        }
      }
    }
  };
};

module.exports = USqlTable;
