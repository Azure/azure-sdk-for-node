/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The Docker build step.
 *
 * @extends models['TaskStepProperties']
 */
class DockerBuildStep extends models['TaskStepProperties'] {
  /**
   * Create a DockerBuildStep.
   * @property {array} [imageNames] The fully qualified image names including
   * the repository and tag.
   * @property {boolean} [isPushEnabled] The value of this property indicates
   * whether the image built should be pushed to the registry or not. Default
   * value: true .
   * @property {boolean} [noCache] The value of this property indicates whether
   * the image cache is enabled or not. Default value: false .
   * @property {string} dockerFilePath The Docker file path relative to the
   * source context.
   * @property {string} [target] The name of the target build stage for the
   * docker build.
   * @property {array} [argumentsProperty] The collection of override arguments
   * to be used when executing this build step.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DockerBuildStep
   *
   * @returns {object} metadata of DockerBuildStep
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Docker',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'type',
          clientName: 'type'
        },
        uberParent: 'TaskStepProperties',
        className: 'DockerBuildStep',
        modelProperties: {
          baseImageDependencies: {
            required: false,
            readOnly: true,
            serializedName: 'baseImageDependencies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'BaseImageDependencyElementType',
                  type: {
                    name: 'Composite',
                    className: 'BaseImageDependency'
                  }
              }
            }
          },
          contextPath: {
            required: false,
            serializedName: 'contextPath',
            type: {
              name: 'String'
            }
          },
          contextAccessToken: {
            required: false,
            serializedName: 'contextAccessToken',
            type: {
              name: 'String'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          imageNames: {
            required: false,
            serializedName: 'imageNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          isPushEnabled: {
            required: false,
            serializedName: 'isPushEnabled',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          noCache: {
            required: false,
            serializedName: 'noCache',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          dockerFilePath: {
            required: true,
            serializedName: 'dockerFilePath',
            type: {
              name: 'String'
            }
          },
          target: {
            required: false,
            serializedName: 'target',
            type: {
              name: 'String'
            }
          },
          argumentsProperty: {
            required: false,
            serializedName: 'arguments',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ArgumentElementType',
                  type: {
                    name: 'Composite',
                    className: 'Argument'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = DockerBuildStep;
