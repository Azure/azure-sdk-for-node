/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An object that represents a webhook for a container registry.
 *
 * @extends models['Resource']
 */
class Webhook extends models['Resource'] {
  /**
   * Create a Webhook.
   * @member {string} [status] The status of the webhook at the time the
   * operation was called. Possible values include: 'enabled', 'disabled'
   * @member {string} [scope] The scope of repositories where the event can be
   * triggered. For example, 'foo:*' means events for all tags under repository
   * 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
   * 'foo:latest'. Empty means all events.
   * @member {array} actions The list of actions that trigger the webhook to
   * post notifications.
   * @member {string} [provisioningState] The provisioning state of the webhook
   * at the time the operation was called. Possible values include: 'Creating',
   * 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Webhook
   *
   * @returns {object} metadata of Webhook
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Webhook',
      type: {
        name: 'Composite',
        className: 'Webhook',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          scope: {
            required: false,
            serializedName: 'properties.scope',
            type: {
              name: 'String'
            }
          },
          actions: {
            required: true,
            serializedName: 'properties.actions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Webhook;
