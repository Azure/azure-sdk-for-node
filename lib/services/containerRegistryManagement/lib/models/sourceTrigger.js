/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The properties of a source based trigger.
 *
 */
class SourceTrigger {
  /**
   * Create a SourceTrigger.
   * @member {object} sourceRepository The properties that describes the
   * source(code) for the task.
   * @member {string} [sourceRepository.sourceControlType] The type of source
   * control service. Possible values include: 'Github',
   * 'VisualStudioTeamService'
   * @member {string} [sourceRepository.repositoryUrl] The full URL to the
   * source code respository
   * @member {string} [sourceRepository.branch] The branch name of the source
   * code.
   * @member {object} [sourceRepository.sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository and to
   * set up
   * webhooks for notifications.
   * @member {string} [sourceRepository.sourceControlAuthProperties.tokenType]
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   * @member {string} [sourceRepository.sourceControlAuthProperties.token] The
   * access token used to access the source control provider.
   * @member {string}
   * [sourceRepository.sourceControlAuthProperties.refreshToken] The refresh
   * token used to refresh the access token.
   * @member {string} [sourceRepository.sourceControlAuthProperties.scope] The
   * scope of the access token.
   * @member {number} [sourceRepository.sourceControlAuthProperties.expiresIn]
   * Time in seconds that the token remains valid
   * @member {array} sourceTriggerEvents The source event corresponding to the
   * trigger.
   * @member {string} [status] The current status of build trigger. Possible
   * values include: 'Disabled', 'Enabled'
   * @member {string} name The name of the trigger.
   */
  constructor() {
  }

  /**
   * Defines the metadata of SourceTrigger
   *
   * @returns {object} metadata of SourceTrigger
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SourceTrigger',
      type: {
        name: 'Composite',
        className: 'SourceTrigger',
        modelProperties: {
          sourceRepository: {
            required: true,
            serializedName: 'sourceRepository',
            type: {
              name: 'Composite',
              className: 'SourceProperties'
            }
          },
          sourceTriggerEvents: {
            required: true,
            serializedName: 'sourceTriggerEvents',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SourceTriggerEventElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          status: {
            required: false,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = SourceTrigger;
