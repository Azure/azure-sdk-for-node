/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The content of the event request message.
 *
 */
class EventContent {
  /**
   * Create a EventContent.
   * @member {string} [id] The event ID.
   * @member {date} [timestamp] The time at which the event occurred.
   * @member {string} [action] The action that encompasses the provided event.
   * @member {object} [target] The target of the event.
   * @member {string} [target.mediaType] The MIME type of the referenced
   * object.
   * @member {number} [target.size] The number of bytes of the content. Same as
   * Length field.
   * @member {string} [target.digest] The digest of the content, as defined by
   * the Registry V2 HTTP API Specification.
   * @member {number} [target.length] The number of bytes of the content. Same
   * as Size field.
   * @member {string} [target.repository] The repository name.
   * @member {string} [target.url] The direct URL to the content.
   * @member {string} [target.tag] The tag name.
   * @member {object} [request] The request that generated the event.
   * @member {string} [request.id] The ID of the request that initiated the
   * event.
   * @member {string} [request.addr] The IP or hostname and possibly port of
   * the client connection that initiated the event. This is the RemoteAddr
   * from the standard http request.
   * @member {string} [request.host] The externally accessible hostname of the
   * registry instance, as specified by the http host header on incoming
   * requests.
   * @member {string} [request.method] The request method that generated the
   * event.
   * @member {string} [request.useragent] The user agent header of the request.
   * @member {object} [actor] The agent that initiated the event. For most
   * situations, this could be from the authorization context of the request.
   * @member {string} [actor.name] The subject or username associated with the
   * request context that generated the event.
   * @member {object} [source] The registry node that generated the event. Put
   * differently, while the actor initiates the event, the source generates it.
   * @member {string} [source.addr] The IP or hostname and the port of the
   * registry node that generated the event. Generally, this will be resolved
   * by os.Hostname() along with the running port.
   * @member {string} [source.instanceID] The running instance of an
   * application. Changes after each restart.
   */
  constructor() {
  }

  /**
   * Defines the metadata of EventContent
   *
   * @returns {object} metadata of EventContent
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EventContent',
      type: {
        name: 'Composite',
        className: 'EventContent',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          timestamp: {
            required: false,
            serializedName: 'timestamp',
            type: {
              name: 'DateTime'
            }
          },
          action: {
            required: false,
            serializedName: 'action',
            type: {
              name: 'String'
            }
          },
          target: {
            required: false,
            serializedName: 'target',
            type: {
              name: 'Composite',
              className: 'Target'
            }
          },
          request: {
            required: false,
            serializedName: 'request',
            type: {
              name: 'Composite',
              className: 'Request'
            }
          },
          actor: {
            required: false,
            serializedName: 'actor',
            type: {
              name: 'Composite',
              className: 'Actor'
            }
          },
          source: {
            required: false,
            serializedName: 'source',
            type: {
              name: 'Composite',
              className: 'Source'
            }
          }
        }
      }
    };
  }
}

module.exports = EventContent;
