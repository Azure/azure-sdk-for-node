/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The task that has the ARM resource and task properties.
 * The  task will have all information to schedule a run against it.
 *
 * @extends models['Resource']
 */
class Task extends models['Resource'] {
  /**
   * Create a Task.
   * @member {string} [provisioningState] The provisioning state of the task.
   * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled'
   * @member {date} [creationDate] The creation date of task.
   * @member {string} [status] The current status of task. Possible values
   * include: 'Disabled', 'Enabled'
   * @member {object} platform The platform properties against which the run
   * has to happen.
   * @member {string} [platform.os] The operating system type required for the
   * run. Possible values include: 'Windows', 'Linux'
   * @member {string} [platform.architecture] The OS architecture. Possible
   * values include: 'amd64', 'x86', 'arm'
   * @member {string} [platform.variant] Variant of the CPU. Possible values
   * include: 'v6', 'v7', 'v8'
   * @member {object} [agentConfiguration] The machine configuration of the run
   * agent.
   * @member {number} [agentConfiguration.cpu] The CPU configuration in terms
   * of number of cores required for the run.
   * @member {number} [timeout] Run timeout in seconds. Default value: 3600 .
   * @member {object} step The properties of a task step.
   * @member {array} [step.baseImageDependencies] List of base image
   * dependencies for a step.
   * @member {string} [step.type] Polymorphic Discriminator
   * @member {object} [trigger] The properties that describe all triggers for
   * the task.
   * @member {array} [trigger.sourceTriggers] The collection of triggers based
   * on source code repository.
   * @member {object} [trigger.baseImageTrigger] The trigger based on base
   * image dependencies.
   * @member {string} [trigger.baseImageTrigger.baseImageTriggerType] The type
   * of the auto trigger for base image dependency updates. Possible values
   * include: 'All', 'Runtime'
   * @member {string} [trigger.baseImageTrigger.status] The current status of
   * build trigger. Possible values include: 'Disabled', 'Enabled'
   * @member {string} [trigger.baseImageTrigger.name] The name of the trigger.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Task
   *
   * @returns {object} metadata of Task
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Task',
      type: {
        name: 'Composite',
        className: 'Task',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          platform: {
            required: true,
            serializedName: 'properties.platform',
            type: {
              name: 'Composite',
              className: 'PlatformProperties'
            }
          },
          agentConfiguration: {
            required: false,
            serializedName: 'properties.agentConfiguration',
            type: {
              name: 'Composite',
              className: 'AgentProperties'
            }
          },
          timeout: {
            required: false,
            serializedName: 'properties.timeout',
            defaultValue: 3600,
            constraints: {
              InclusiveMaximum: 28800,
              InclusiveMinimum: 300
            },
            type: {
              name: 'Number'
            }
          },
          step: {
            required: true,
            serializedName: 'properties.step',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'TaskStepProperties',
              className: 'TaskStepProperties'
            }
          },
          trigger: {
            required: false,
            serializedName: 'properties.trigger',
            type: {
              name: 'Composite',
              className: 'TriggerProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = Task;
