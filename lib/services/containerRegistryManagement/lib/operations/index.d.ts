/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Registries
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface Registries {


    /**
     * Copies an image to this container registry from the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} parameters The parameters specifying the image to copy and
     * the source container registry.
     *
     * @param {object} parameters.source The source of the image.
     *
     * @param {string} [parameters.source.resourceId] The resource identifier of
     * the source Azure Container Registry.
     *
     * @param {string} [parameters.source.registryUri] The address of the source
     * registry.
     *
     * @param {string} parameters.source.sourceImage Repository name of the source
     * image.
     * Specify an image by repository ('hello-world'). This will use the 'latest'
     * tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest
     * ('hello-world@sha256:abc123').
     *
     * @param {array} [parameters.targetTags] List of strings of the form
     * repo[:tag]. When tag is omitted the source will be used (or 'latest' if
     * source tag is also omitted).
     *
     * @param {array} [parameters.untaggedTargetRepositories] List of strings of
     * repository names to do a manifest only copy. No tag will be created.
     *
     * @param {string} [parameters.mode] When Force, any existing target tags will
     * be overwritten. When NoForce, any existing target tags will fail the
     * operation before any copying begins. Possible values include: 'NoForce',
     * 'Force'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    importImageWithHttpOperationResponse(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Copies an image to this container registry from the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} parameters The parameters specifying the image to copy and
     * the source container registry.
     *
     * @param {object} parameters.source The source of the image.
     *
     * @param {string} [parameters.source.resourceId] The resource identifier of
     * the source Azure Container Registry.
     *
     * @param {string} [parameters.source.registryUri] The address of the source
     * registry.
     *
     * @param {string} parameters.source.sourceImage Repository name of the source
     * image.
     * Specify an image by repository ('hello-world'). This will use the 'latest'
     * tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest
     * ('hello-world@sha256:abc123').
     *
     * @param {array} [parameters.targetTags] List of strings of the form
     * repo[:tag]. When tag is omitted the source will be used (or 'latest' if
     * source tag is also omitted).
     *
     * @param {array} [parameters.untaggedTargetRepositories] List of strings of
     * repository names to do a manifest only copy. No tag will be created.
     *
     * @param {string} [parameters.mode] When Force, any existing target tags will
     * be overwritten. When NoForce, any existing target tags will fail the
     * operation before any copying begins. Possible values include: 'NoForce',
     * 'Force'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    importImage(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    importImage(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, callback: ServiceCallback<void>): void;
    importImage(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Checks whether the container registry name is available for use. The name
     * must contain only alphanumeric characters, be globally unique, and between 5
     * and 50 characters in length.
     *
     * @param {object} registryNameCheckRequest The object containing information
     * for the availability request.
     *
     * @param {string} registryNameCheckRequest.name The name of the container
     * registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryNameStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(registryNameCheckRequest: models.RegistryNameCheckRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryNameStatus>>;

    /**
     * Checks whether the container registry name is available for use. The name
     * must contain only alphanumeric characters, be globally unique, and between 5
     * and 50 characters in length.
     *
     * @param {object} registryNameCheckRequest The object containing information
     * for the availability request.
     *
     * @param {string} registryNameCheckRequest.name The name of the container
     * registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryNameStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryNameStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryNameStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(registryNameCheckRequest: models.RegistryNameCheckRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryNameStatus>;
    checkNameAvailability(registryNameCheckRequest: models.RegistryNameCheckRequest, callback: ServiceCallback<models.RegistryNameStatus>): void;
    checkNameAvailability(registryNameCheckRequest: models.RegistryNameCheckRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryNameStatus>): void;


    /**
     * Gets the properties of the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Gets the properties of the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    get(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.Registry>): void;
    get(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registry The parameters for creating a container registry.
     *
     * @param {object} registry.sku The SKU of the container registry.
     *
     * @param {string} registry.sku.name The SKU name of the container registry.
     * Required for registry creation. Possible values include: 'Classic', 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {boolean} [registry.adminUserEnabled] The value that indicates
     * whether the admin user is enabled.
     *
     * @param {object} [registry.storageAccount] The properties of the storage
     * account for the container registry. Only applicable to Classic SKU.
     *
     * @param {string} registry.storageAccount.id The resource ID of the storage
     * account.
     *
     * @param {string} registry.location The location of the resource. This cannot
     * be changed after the resource is created.
     *
     * @param {object} [registry.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, registryName: string, registry: models.Registry, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registry The parameters for creating a container registry.
     *
     * @param {object} registry.sku The SKU of the container registry.
     *
     * @param {string} registry.sku.name The SKU name of the container registry.
     * Required for registry creation. Possible values include: 'Classic', 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {boolean} [registry.adminUserEnabled] The value that indicates
     * whether the admin user is enabled.
     *
     * @param {object} [registry.storageAccount] The properties of the storage
     * account for the container registry. Only applicable to Classic SKU.
     *
     * @param {string} registry.storageAccount.id The resource ID of the storage
     * account.
     *
     * @param {string} registry.location The location of the resource. This cannot
     * be changed after the resource is created.
     *
     * @param {object} [registry.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, registryName: string, registry: models.Registry, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    create(resourceGroupName: string, registryName: string, registry: models.Registry, callback: ServiceCallback<models.Registry>): void;
    create(resourceGroupName: string, registryName: string, registry: models.Registry, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Deletes a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, registryName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryUpdateParameters The parameters for updating a
     * container registry.
     *
     * @param {object} [registryUpdateParameters.tags] The tags for the container
     * registry.
     *
     * @param {object} [registryUpdateParameters.sku] The SKU of the container
     * registry.
     *
     * @param {string} registryUpdateParameters.sku.name The SKU name of the
     * container registry. Required for registry creation. Possible values include:
     * 'Classic', 'Basic', 'Standard', 'Premium'
     *
     * @param {boolean} [registryUpdateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled.
     *
     * @param {object} [registryUpdateParameters.storageAccount] The parameters of
     * a storage account for the container registry. Only applicable to Classic
     * SKU. If specified, the storage account must be in the same physical location
     * as the container registry.
     *
     * @param {string} registryUpdateParameters.storageAccount.id The resource ID
     * of the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Updates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryUpdateParameters The parameters for updating a
     * container registry.
     *
     * @param {object} [registryUpdateParameters.tags] The tags for the container
     * registry.
     *
     * @param {object} [registryUpdateParameters.sku] The SKU of the container
     * registry.
     *
     * @param {string} registryUpdateParameters.sku.name The SKU name of the
     * container registry. Required for registry creation. Possible values include:
     * 'Classic', 'Basic', 'Standard', 'Premium'
     *
     * @param {boolean} [registryUpdateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled.
     *
     * @param {object} [registryUpdateParameters.storageAccount] The parameters of
     * a storage account for the container registry. Only applicable to Classic
     * SKU. If specified, the storage account must be in the same physical location
     * as the container registry.
     *
     * @param {string} registryUpdateParameters.storageAccount.id The resource ID
     * of the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    update(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, callback: ServiceCallback<models.Registry>): void;
    update(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RegistryListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;


    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    list(callback: ServiceCallback<models.RegistryListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;


    /**
     * Lists the login credentials for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListCredentialsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCredentialsWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListCredentialsResult>>;

    /**
     * Lists the login credentials for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListCredentialsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListCredentialsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListCredentialsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCredentials(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListCredentialsResult>;
    listCredentials(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;
    listCredentials(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;


    /**
     * Regenerates one of the login credentials for the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} regenerateCredentialParameters Specifies name of the
     * password which should be regenerated -- password or password2.
     *
     * @param {string} regenerateCredentialParameters.name Specifies name of the
     * password which should be regenerated -- password or password2. Possible
     * values include: 'password', 'password2'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListCredentialsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateCredentialWithHttpOperationResponse(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListCredentialsResult>>;

    /**
     * Regenerates one of the login credentials for the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} regenerateCredentialParameters Specifies name of the
     * password which should be regenerated -- password or password2.
     *
     * @param {string} regenerateCredentialParameters.name Specifies name of the
     * password which should be regenerated -- password or password2. Possible
     * values include: 'password', 'password2'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListCredentialsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListCredentialsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListCredentialsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListCredentialsResult>;
    regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;
    regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: models.RegenerateCredentialParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListCredentialsResult>): void;


    /**
     * Gets the quota usages for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryUsageListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryUsageListResult>>;

    /**
     * Gets the quota usages for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryUsageListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryUsageListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryUsageListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryUsageListResult>;
    listUsages(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.RegistryUsageListResult>): void;
    listUsages(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryUsageListResult>): void;


    /**
     * Lists the policies for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryPolicies>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPoliciesWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryPolicies>>;

    /**
     * Lists the policies for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryPolicies} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryPolicies} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryPolicies} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPolicies(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryPolicies>;
    listPolicies(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.RegistryPolicies>): void;
    listPolicies(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryPolicies>): void;


    /**
     * Updates the policies for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryPoliciesUpdateParameters The parameters for updating
     * policies of a container registry.
     *
     * @param {object} [registryPoliciesUpdateParameters.quarantinePolicy] An
     * object that represents quarantine policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.quarantinePolicy.status]
     * The value that indicates whether the policy is enabled or not. Possible
     * values include: 'enabled', 'disabled'
     *
     * @param {object} [registryPoliciesUpdateParameters.trustPolicy] An object
     * that represents content trust policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.type] The type
     * of trust policy. Possible values include: 'Notary'
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.status] The
     * value that indicates whether the policy is enabled or not. Possible values
     * include: 'enabled', 'disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryPolicies>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePoliciesWithHttpOperationResponse(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryPolicies>>;

    /**
     * Updates the policies for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryPoliciesUpdateParameters The parameters for updating
     * policies of a container registry.
     *
     * @param {object} [registryPoliciesUpdateParameters.quarantinePolicy] An
     * object that represents quarantine policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.quarantinePolicy.status]
     * The value that indicates whether the policy is enabled or not. Possible
     * values include: 'enabled', 'disabled'
     *
     * @param {object} [registryPoliciesUpdateParameters.trustPolicy] An object
     * that represents content trust policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.type] The type
     * of trust policy. Possible values include: 'Notary'
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.status] The
     * value that indicates whether the policy is enabled or not. Possible values
     * include: 'enabled', 'disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryPolicies} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryPolicies} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryPolicies} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePolicies(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryPolicies>;
    updatePolicies(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, callback: ServiceCallback<models.RegistryPolicies>): void;
    updatePolicies(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryPolicies>): void;


    /**
     * Creates a new build based on the request parameters and add it to the build
     * queue.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} buildRequest The parameters of a build that needs to queued.
     *
     * @param {string} buildRequest.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Build>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    queueBuildWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Build>>;

    /**
     * Creates a new build based on the request parameters and add it to the build
     * queue.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} buildRequest The parameters of a build that needs to queued.
     *
     * @param {string} buildRequest.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Build} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Build} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Build} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    queueBuild(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Build>;
    queueBuild(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, callback: ServiceCallback<models.Build>): void;
    queueBuild(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;


    /**
     * Get the upload location for the user to be able to upload the source.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SourceUploadDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBuildSourceUploadUrlWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SourceUploadDefinition>>;

    /**
     * Get the upload location for the user to be able to upload the source.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SourceUploadDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SourceUploadDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SourceUploadDefinition} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SourceUploadDefinition>;
    getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.SourceUploadDefinition>): void;
    getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceUploadDefinition>): void;


    /**
     * Copies an image to this container registry from the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} parameters The parameters specifying the image to copy and
     * the source container registry.
     *
     * @param {object} parameters.source The source of the image.
     *
     * @param {string} [parameters.source.resourceId] The resource identifier of
     * the source Azure Container Registry.
     *
     * @param {string} [parameters.source.registryUri] The address of the source
     * registry.
     *
     * @param {string} parameters.source.sourceImage Repository name of the source
     * image.
     * Specify an image by repository ('hello-world'). This will use the 'latest'
     * tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest
     * ('hello-world@sha256:abc123').
     *
     * @param {array} [parameters.targetTags] List of strings of the form
     * repo[:tag]. When tag is omitted the source will be used (or 'latest' if
     * source tag is also omitted).
     *
     * @param {array} [parameters.untaggedTargetRepositories] List of strings of
     * repository names to do a manifest only copy. No tag will be created.
     *
     * @param {string} [parameters.mode] When Force, any existing target tags will
     * be overwritten. When NoForce, any existing target tags will fail the
     * operation before any copying begins. Possible values include: 'NoForce',
     * 'Force'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginImportImageWithHttpOperationResponse(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Copies an image to this container registry from the specified container
     * registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} parameters The parameters specifying the image to copy and
     * the source container registry.
     *
     * @param {object} parameters.source The source of the image.
     *
     * @param {string} [parameters.source.resourceId] The resource identifier of
     * the source Azure Container Registry.
     *
     * @param {string} [parameters.source.registryUri] The address of the source
     * registry.
     *
     * @param {string} parameters.source.sourceImage Repository name of the source
     * image.
     * Specify an image by repository ('hello-world'). This will use the 'latest'
     * tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest
     * ('hello-world@sha256:abc123').
     *
     * @param {array} [parameters.targetTags] List of strings of the form
     * repo[:tag]. When tag is omitted the source will be used (or 'latest' if
     * source tag is also omitted).
     *
     * @param {array} [parameters.untaggedTargetRepositories] List of strings of
     * repository names to do a manifest only copy. No tag will be created.
     *
     * @param {string} [parameters.mode] When Force, any existing target tags will
     * be overwritten. When NoForce, any existing target tags will fail the
     * operation before any copying begins. Possible values include: 'NoForce',
     * 'Force'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginImportImage(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginImportImage(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, callback: ServiceCallback<void>): void;
    beginImportImage(resourceGroupName: string, registryName: string, parameters: models.ImportImageParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registry The parameters for creating a container registry.
     *
     * @param {object} registry.sku The SKU of the container registry.
     *
     * @param {string} registry.sku.name The SKU name of the container registry.
     * Required for registry creation. Possible values include: 'Classic', 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {boolean} [registry.adminUserEnabled] The value that indicates
     * whether the admin user is enabled.
     *
     * @param {object} [registry.storageAccount] The properties of the storage
     * account for the container registry. Only applicable to Classic SKU.
     *
     * @param {string} registry.storageAccount.id The resource ID of the storage
     * account.
     *
     * @param {string} registry.location The location of the resource. This cannot
     * be changed after the resource is created.
     *
     * @param {object} [registry.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, registryName: string, registry: models.Registry, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Creates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registry The parameters for creating a container registry.
     *
     * @param {object} registry.sku The SKU of the container registry.
     *
     * @param {string} registry.sku.name The SKU name of the container registry.
     * Required for registry creation. Possible values include: 'Classic', 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {boolean} [registry.adminUserEnabled] The value that indicates
     * whether the admin user is enabled.
     *
     * @param {object} [registry.storageAccount] The properties of the storage
     * account for the container registry. Only applicable to Classic SKU.
     *
     * @param {string} registry.storageAccount.id The resource ID of the storage
     * account.
     *
     * @param {string} registry.location The location of the resource. This cannot
     * be changed after the resource is created.
     *
     * @param {object} [registry.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, registryName: string, registry: models.Registry, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    beginCreate(resourceGroupName: string, registryName: string, registry: models.Registry, callback: ServiceCallback<models.Registry>): void;
    beginCreate(resourceGroupName: string, registryName: string, registry: models.Registry, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Deletes a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, registryName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryUpdateParameters The parameters for updating a
     * container registry.
     *
     * @param {object} [registryUpdateParameters.tags] The tags for the container
     * registry.
     *
     * @param {object} [registryUpdateParameters.sku] The SKU of the container
     * registry.
     *
     * @param {string} registryUpdateParameters.sku.name The SKU name of the
     * container registry. Required for registry creation. Possible values include:
     * 'Classic', 'Basic', 'Standard', 'Premium'
     *
     * @param {boolean} [registryUpdateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled.
     *
     * @param {object} [registryUpdateParameters.storageAccount] The parameters of
     * a storage account for the container registry. Only applicable to Classic
     * SKU. If specified, the storage account must be in the same physical location
     * as the container registry.
     *
     * @param {string} registryUpdateParameters.storageAccount.id The resource ID
     * of the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Registry>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Registry>>;

    /**
     * Updates a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryUpdateParameters The parameters for updating a
     * container registry.
     *
     * @param {object} [registryUpdateParameters.tags] The tags for the container
     * registry.
     *
     * @param {object} [registryUpdateParameters.sku] The SKU of the container
     * registry.
     *
     * @param {string} registryUpdateParameters.sku.name The SKU name of the
     * container registry. Required for registry creation. Possible values include:
     * 'Classic', 'Basic', 'Standard', 'Premium'
     *
     * @param {boolean} [registryUpdateParameters.adminUserEnabled] The value that
     * indicates whether the admin user is enabled.
     *
     * @param {object} [registryUpdateParameters.storageAccount] The parameters of
     * a storage account for the container registry. Only applicable to Classic
     * SKU. If specified, the storage account must be in the same physical location
     * as the container registry.
     *
     * @param {string} registryUpdateParameters.storageAccount.id The resource ID
     * of the storage account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Registry} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Registry} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Registry} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Registry>;
    beginUpdate(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, callback: ServiceCallback<models.Registry>): void;
    beginUpdate(resourceGroupName: string, registryName: string, registryUpdateParameters: models.RegistryUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Registry>): void;


    /**
     * Updates the policies for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryPoliciesUpdateParameters The parameters for updating
     * policies of a container registry.
     *
     * @param {object} [registryPoliciesUpdateParameters.quarantinePolicy] An
     * object that represents quarantine policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.quarantinePolicy.status]
     * The value that indicates whether the policy is enabled or not. Possible
     * values include: 'enabled', 'disabled'
     *
     * @param {object} [registryPoliciesUpdateParameters.trustPolicy] An object
     * that represents content trust policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.type] The type
     * of trust policy. Possible values include: 'Notary'
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.status] The
     * value that indicates whether the policy is enabled or not. Possible values
     * include: 'enabled', 'disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryPolicies>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdatePoliciesWithHttpOperationResponse(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryPolicies>>;

    /**
     * Updates the policies for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} registryPoliciesUpdateParameters The parameters for updating
     * policies of a container registry.
     *
     * @param {object} [registryPoliciesUpdateParameters.quarantinePolicy] An
     * object that represents quarantine policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.quarantinePolicy.status]
     * The value that indicates whether the policy is enabled or not. Possible
     * values include: 'enabled', 'disabled'
     *
     * @param {object} [registryPoliciesUpdateParameters.trustPolicy] An object
     * that represents content trust policy for a container registry.
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.type] The type
     * of trust policy. Possible values include: 'Notary'
     *
     * @param {string} [registryPoliciesUpdateParameters.trustPolicy.status] The
     * value that indicates whether the policy is enabled or not. Possible values
     * include: 'enabled', 'disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryPolicies} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryPolicies} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryPolicies} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdatePolicies(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryPolicies>;
    beginUpdatePolicies(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, callback: ServiceCallback<models.RegistryPolicies>): void;
    beginUpdatePolicies(resourceGroupName: string, registryName: string, registryPoliciesUpdateParameters: models.RegistryPolicies, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryPolicies>): void;


    /**
     * Creates a new build based on the request parameters and add it to the build
     * queue.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} buildRequest The parameters of a build that needs to queued.
     *
     * @param {string} buildRequest.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Build>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginQueueBuildWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Build>>;

    /**
     * Creates a new build based on the request parameters and add it to the build
     * queue.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} buildRequest The parameters of a build that needs to queued.
     *
     * @param {string} buildRequest.type Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Build} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Build} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Build} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginQueueBuild(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Build>;
    beginQueueBuild(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, callback: ServiceCallback<models.Build>): void;
    beginQueueBuild(resourceGroupName: string, registryName: string, buildRequest: models.QueueBuildRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;


    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RegistryListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;


    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegistryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegistryListResult>>;

    /**
     * Lists all the container registries under the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegistryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegistryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegistryListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegistryListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RegistryListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Azure Container Registry REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Replications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface Replications {


    /**
     * Gets the properties of the specified replication.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Replication>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, registryName: string, replicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Replication>>;

    /**
     * Gets the properties of the specified replication.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Replication} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Replication} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Replication} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, registryName: string, replicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Replication>;
    get(resourceGroupName: string, registryName: string, replicationName: string, callback: ServiceCallback<models.Replication>): void;
    get(resourceGroupName: string, registryName: string, replicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replication>): void;


    /**
     * Creates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replication The parameters for creating a replication.
     *
     * @param {string} replication.location The location of the resource. This
     * cannot be changed after the resource is created.
     *
     * @param {object} [replication.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Replication>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Replication>>;

    /**
     * Creates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replication The parameters for creating a replication.
     *
     * @param {string} replication.location The location of the resource. This
     * cannot be changed after the resource is created.
     *
     * @param {object} [replication.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Replication} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Replication} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Replication} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Replication>;
    create(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, callback: ServiceCallback<models.Replication>): void;
    create(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replication>): void;


    /**
     * Deletes a replication from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, replicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a replication from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, registryName: string, replicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, registryName: string, replicationName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, registryName: string, replicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replicationUpdateParameters The parameters for updating a
     * replication.
     *
     * @param {object} [replicationUpdateParameters.tags] The tags for the
     * replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Replication>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Replication>>;

    /**
     * Updates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replicationUpdateParameters The parameters for updating a
     * replication.
     *
     * @param {object} [replicationUpdateParameters.tags] The tags for the
     * replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Replication} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Replication} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Replication} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Replication>;
    update(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, callback: ServiceCallback<models.Replication>): void;
    update(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replication>): void;


    /**
     * Lists all the replications for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicationListResult>>;

    /**
     * Lists all the replications for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicationListResult>;
    list(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.ReplicationListResult>): void;
    list(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicationListResult>): void;


    /**
     * Creates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replication The parameters for creating a replication.
     *
     * @param {string} replication.location The location of the resource. This
     * cannot be changed after the resource is created.
     *
     * @param {object} [replication.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Replication>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Replication>>;

    /**
     * Creates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replication The parameters for creating a replication.
     *
     * @param {string} replication.location The location of the resource. This
     * cannot be changed after the resource is created.
     *
     * @param {object} [replication.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Replication} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Replication} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Replication} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Replication>;
    beginCreate(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, callback: ServiceCallback<models.Replication>): void;
    beginCreate(resourceGroupName: string, registryName: string, replicationName: string, replication: models.Replication, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replication>): void;


    /**
     * Deletes a replication from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, replicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a replication from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, registryName: string, replicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, registryName: string, replicationName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, registryName: string, replicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replicationUpdateParameters The parameters for updating a
     * replication.
     *
     * @param {object} [replicationUpdateParameters.tags] The tags for the
     * replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Replication>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Replication>>;

    /**
     * Updates a replication for a container registry with the specified
     * parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} replicationName The name of the replication.
     *
     * @param {object} replicationUpdateParameters The parameters for updating a
     * replication.
     *
     * @param {object} [replicationUpdateParameters.tags] The tags for the
     * replication.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Replication} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Replication} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Replication} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Replication>;
    beginUpdate(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, callback: ServiceCallback<models.Replication>): void;
    beginUpdate(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: models.ReplicationUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Replication>): void;


    /**
     * Lists all the replications for the specified container registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicationListResult>>;

    /**
     * Lists all the replications for the specified container registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ReplicationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicationListResult>): void;
}

/**
 * @class
 * Webhooks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface Webhooks {


    /**
     * Gets the properties of the specified webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Webhook>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Webhook>>;

    /**
     * Gets the properties of the specified webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Webhook} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Webhook} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Webhook} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Webhook>;
    get(resourceGroupName: string, registryName: string, webhookName: string, callback: ServiceCallback<models.Webhook>): void;
    get(resourceGroupName: string, registryName: string, webhookName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Webhook>): void;


    /**
     * Creates a webhook for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookCreateParameters The parameters for creating a
     * webhook.
     *
     * @param {object} [webhookCreateParameters.tags] The tags for the webhook.
     *
     * @param {string} webhookCreateParameters.location The location of the
     * webhook. This cannot be changed after the resource is created.
     *
     * @param {string} webhookCreateParameters.serviceUri The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookCreateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookCreateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} webhookCreateParameters.actions The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookCreateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Webhook>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Webhook>>;

    /**
     * Creates a webhook for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookCreateParameters The parameters for creating a
     * webhook.
     *
     * @param {object} [webhookCreateParameters.tags] The tags for the webhook.
     *
     * @param {string} webhookCreateParameters.location The location of the
     * webhook. This cannot be changed after the resource is created.
     *
     * @param {string} webhookCreateParameters.serviceUri The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookCreateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookCreateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} webhookCreateParameters.actions The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookCreateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Webhook} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Webhook} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Webhook} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Webhook>;
    create(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, callback: ServiceCallback<models.Webhook>): void;
    create(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Webhook>): void;


    /**
     * Deletes a webhook from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a webhook from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, registryName: string, webhookName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, registryName: string, webhookName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a webhook with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookUpdateParameters The parameters for updating a
     * webhook.
     *
     * @param {object} [webhookUpdateParameters.tags] The tags for the webhook.
     *
     * @param {string} [webhookUpdateParameters.serviceUri] The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookUpdateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookUpdateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} [webhookUpdateParameters.actions] The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookUpdateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Webhook>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Webhook>>;

    /**
     * Updates a webhook with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookUpdateParameters The parameters for updating a
     * webhook.
     *
     * @param {object} [webhookUpdateParameters.tags] The tags for the webhook.
     *
     * @param {string} [webhookUpdateParameters.serviceUri] The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookUpdateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookUpdateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} [webhookUpdateParameters.actions] The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookUpdateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Webhook} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Webhook} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Webhook} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Webhook>;
    update(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, callback: ServiceCallback<models.Webhook>): void;
    update(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Webhook>): void;


    /**
     * Lists all the webhooks for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebhookListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebhookListResult>>;

    /**
     * Lists all the webhooks for the specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebhookListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebhookListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebhookListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, registryName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebhookListResult>;
    list(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.WebhookListResult>): void;
    list(resourceGroupName: string, registryName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebhookListResult>): void;


    /**
     * Triggers a ping event to be sent to the webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    pingWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventInfo>>;

    /**
     * Triggers a ping event to be sent to the webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    ping(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventInfo>;
    ping(resourceGroupName: string, registryName: string, webhookName: string, callback: ServiceCallback<models.EventInfo>): void;
    ping(resourceGroupName: string, registryName: string, webhookName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventInfo>): void;


    /**
     * Gets the configuration of service URI and custom headers for the webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CallbackConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCallbackConfigWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CallbackConfig>>;

    /**
     * Gets the configuration of service URI and custom headers for the webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CallbackConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CallbackConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CallbackConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CallbackConfig>;
    getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, callback: ServiceCallback<models.CallbackConfig>): void;
    getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CallbackConfig>): void;


    /**
     * Lists recent events for the specified webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEventsWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventListResult>>;

    /**
     * Lists recent events for the specified webhook.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEvents(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventListResult>;
    listEvents(resourceGroupName: string, registryName: string, webhookName: string, callback: ServiceCallback<models.EventListResult>): void;
    listEvents(resourceGroupName: string, registryName: string, webhookName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventListResult>): void;


    /**
     * Creates a webhook for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookCreateParameters The parameters for creating a
     * webhook.
     *
     * @param {object} [webhookCreateParameters.tags] The tags for the webhook.
     *
     * @param {string} webhookCreateParameters.location The location of the
     * webhook. This cannot be changed after the resource is created.
     *
     * @param {string} webhookCreateParameters.serviceUri The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookCreateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookCreateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} webhookCreateParameters.actions The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookCreateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Webhook>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Webhook>>;

    /**
     * Creates a webhook for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookCreateParameters The parameters for creating a
     * webhook.
     *
     * @param {object} [webhookCreateParameters.tags] The tags for the webhook.
     *
     * @param {string} webhookCreateParameters.location The location of the
     * webhook. This cannot be changed after the resource is created.
     *
     * @param {string} webhookCreateParameters.serviceUri The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookCreateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookCreateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} webhookCreateParameters.actions The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookCreateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Webhook} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Webhook} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Webhook} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Webhook>;
    beginCreate(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, callback: ServiceCallback<models.Webhook>): void;
    beginCreate(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: models.WebhookCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Webhook>): void;


    /**
     * Deletes a webhook from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a webhook from a container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, registryName: string, webhookName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, registryName: string, webhookName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, registryName: string, webhookName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a webhook with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookUpdateParameters The parameters for updating a
     * webhook.
     *
     * @param {object} [webhookUpdateParameters.tags] The tags for the webhook.
     *
     * @param {string} [webhookUpdateParameters.serviceUri] The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookUpdateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookUpdateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} [webhookUpdateParameters.actions] The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookUpdateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Webhook>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Webhook>>;

    /**
     * Updates a webhook with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} webhookName The name of the webhook.
     *
     * @param {object} webhookUpdateParameters The parameters for updating a
     * webhook.
     *
     * @param {object} [webhookUpdateParameters.tags] The tags for the webhook.
     *
     * @param {string} [webhookUpdateParameters.serviceUri] The service URI for the
     * webhook to post notifications.
     *
     * @param {string} [webhookUpdateParameters.status] The status of the webhook
     * at the time the operation was called. Possible values include: 'enabled',
     * 'disabled'
     *
     * @param {string} [webhookUpdateParameters.scope] The scope of repositories
     * where the event can be triggered. For example, 'foo:*' means events for all
     * tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only.
     * 'foo' is equivalent to 'foo:latest'. Empty means all events.
     *
     * @param {array} [webhookUpdateParameters.actions] The list of actions that
     * trigger the webhook to post notifications.
     *
     * @param {object} [webhookUpdateParameters.customHeaders] Custom headers that
     * will be added to the webhook notifications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Webhook} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Webhook} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Webhook} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Webhook>;
    beginUpdate(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, callback: ServiceCallback<models.Webhook>): void;
    beginUpdate(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: models.WebhookUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Webhook>): void;


    /**
     * Lists all the webhooks for the specified container registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebhookListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebhookListResult>>;

    /**
     * Lists all the webhooks for the specified container registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebhookListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebhookListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebhookListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebhookListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WebhookListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebhookListResult>): void;


    /**
     * Lists recent events for the specified webhook.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEventsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventListResult>>;

    /**
     * Lists recent events for the specified webhook.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEventsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventListResult>;
    listEventsNext(nextPageLink: string, callback: ServiceCallback<models.EventListResult>): void;
    listEventsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventListResult>): void;
}

/**
 * @class
 * Builds
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface Builds {


    /**
     * Gets all the builds for a registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The builds filter to apply on the
     * operation.
     *
     * @param {number} [options.top] $top is supported for get list of builds,
     * which limits the maximum number of builds to return.
     *
     * @param {string} [options.skipToken] $skipToken is supported on get list of
     * builds, which provides the next page in the list of builds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { filter? : string, top? : number, skipToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildListResult>>;

    /**
     * Gets all the builds for a registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The builds filter to apply on the
     * operation.
     *
     * @param {number} [options.top] $top is supported for get list of builds,
     * which limits the maximum number of builds to return.
     *
     * @param {string} [options.skipToken] $skipToken is supported on get list of
     * builds, which provides the next page in the list of builds.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, registryName: string, options?: { filter? : string, top? : number, skipToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildListResult>;
    list(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.BuildListResult>): void;
    list(resourceGroupName: string, registryName: string, options: { filter? : string, top? : number, skipToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildListResult>): void;


    /**
     * Gets the detailed information for a given build.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Build>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Build>>;

    /**
     * Gets the detailed information for a given build.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Build} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Build} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Build} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Build>;
    get(resourceGroupName: string, registryName: string, buildId: string, callback: ServiceCallback<models.Build>): void;
    get(resourceGroupName: string, registryName: string, buildId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;


    /**
     * Patch the build properties.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} buildUpdateParameters The build update properties.
     *
     * @param {boolean} [buildUpdateParameters.isArchiveEnabled] The value that
     * indicates whether archiving is enabled or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Build>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Build>>;

    /**
     * Patch the build properties.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} buildUpdateParameters The build update properties.
     *
     * @param {boolean} [buildUpdateParameters.isArchiveEnabled] The value that
     * indicates whether archiving is enabled or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Build} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Build} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Build} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Build>;
    update(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, callback: ServiceCallback<models.Build>): void;
    update(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;


    /**
     * Gets a link to download the build logs.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildGetLogResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLogLinkWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildGetLogResult>>;

    /**
     * Gets a link to download the build logs.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildGetLogResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildGetLogResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildGetLogResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLogLink(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildGetLogResult>;
    getLogLink(resourceGroupName: string, registryName: string, buildId: string, callback: ServiceCallback<models.BuildGetLogResult>): void;
    getLogLink(resourceGroupName: string, registryName: string, buildId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildGetLogResult>): void;


    /**
     * Cancel an existing build.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancel an existing build.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(resourceGroupName: string, registryName: string, buildId: string, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, registryName: string, buildId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patch the build properties.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} buildUpdateParameters The build update properties.
     *
     * @param {boolean} [buildUpdateParameters.isArchiveEnabled] The value that
     * indicates whether archiving is enabled or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Build>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Build>>;

    /**
     * Patch the build properties.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} buildUpdateParameters The build update properties.
     *
     * @param {boolean} [buildUpdateParameters.isArchiveEnabled] The value that
     * indicates whether archiving is enabled or not.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Build} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Build} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Build} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Build>;
    beginUpdate(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, callback: ServiceCallback<models.Build>): void;
    beginUpdate(resourceGroupName: string, registryName: string, buildId: string, buildUpdateParameters: models.BuildUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;


    /**
     * Cancel an existing build.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCancelWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancel an existing build.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildId The build ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCancel(resourceGroupName: string, registryName: string, buildId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCancel(resourceGroupName: string, registryName: string, buildId: string, callback: ServiceCallback<void>): void;
    beginCancel(resourceGroupName: string, registryName: string, buildId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the builds for a registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildListResult>>;

    /**
     * Gets all the builds for a registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.BuildListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildListResult>): void;
}

/**
 * @class
 * BuildSteps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface BuildSteps {


    /**
     * List all the build steps for a given build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildStepList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildStepList>>;

    /**
     * List all the build steps for a given build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildStepList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildStepList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildStepList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildStepList>;
    list(resourceGroupName: string, registryName: string, buildTaskName: string, callback: ServiceCallback<models.BuildStepList>): void;
    list(resourceGroupName: string, registryName: string, buildTaskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildStepList>): void;


    /**
     * Gets the build step for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildStep>>;

    /**
     * Gets the build step for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildStep>;
    get(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, callback: ServiceCallback<models.BuildStep>): void;
    get(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildStep>): void;


    /**
     * Creates a build step for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepCreateParameters The parameters for creating a
     * build step.
     *
     * @param {object} [buildStepCreateParameters.properties] The properties of a
     * build step.
     *
     * @param {string} buildStepCreateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildStep>>;

    /**
     * Creates a build step for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepCreateParameters The parameters for creating a
     * build step.
     *
     * @param {object} [buildStepCreateParameters.properties] The properties of a
     * build step.
     *
     * @param {string} buildStepCreateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildStep>;
    create(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, callback: ServiceCallback<models.BuildStep>): void;
    create(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildStep>): void;


    /**
     * Deletes a build step from the build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a build step from the build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a build step in a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepUpdateParameters The parameters for updating a
     * build step.
     *
     * @param {object} [buildStepUpdateParameters.properties] The properties for
     * updating a build step.
     *
     * @param {string} buildStepUpdateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [buildStepUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildStep>>;

    /**
     * Updates a build step in a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepUpdateParameters The parameters for updating a
     * build step.
     *
     * @param {object} [buildStepUpdateParameters.properties] The properties for
     * updating a build step.
     *
     * @param {string} buildStepUpdateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [buildStepUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildStep>;
    update(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, callback: ServiceCallback<models.BuildStep>): void;
    update(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildStep>): void;


    /**
     * List the build arguments for a step including the secret arguments.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildArgumentList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBuildArgumentsWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildArgumentList>>;

    /**
     * List the build arguments for a step including the secret arguments.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildArgumentList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildArgumentList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildArgumentList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBuildArguments(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildArgumentList>;
    listBuildArguments(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, callback: ServiceCallback<models.BuildArgumentList>): void;
    listBuildArguments(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildArgumentList>): void;


    /**
     * Creates a build step for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepCreateParameters The parameters for creating a
     * build step.
     *
     * @param {object} [buildStepCreateParameters.properties] The properties of a
     * build step.
     *
     * @param {string} buildStepCreateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildStep>>;

    /**
     * Creates a build step for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepCreateParameters The parameters for creating a
     * build step.
     *
     * @param {object} [buildStepCreateParameters.properties] The properties of a
     * build step.
     *
     * @param {string} buildStepCreateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildStep>;
    beginCreate(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, callback: ServiceCallback<models.BuildStep>): void;
    beginCreate(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepCreateParameters: models.BuildStep, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildStep>): void;


    /**
     * Deletes a build step from the build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a build step from the build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a build step in a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepUpdateParameters The parameters for updating a
     * build step.
     *
     * @param {object} [buildStepUpdateParameters.properties] The properties for
     * updating a build step.
     *
     * @param {string} buildStepUpdateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [buildStepUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildStep>>;

    /**
     * Updates a build step in a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {string} stepName The name of a build step for a container registry
     * build task.
     *
     * @param {object} buildStepUpdateParameters The parameters for updating a
     * build step.
     *
     * @param {object} [buildStepUpdateParameters.properties] The properties for
     * updating a build step.
     *
     * @param {string} buildStepUpdateParameters.properties.type Polymorphic
     * Discriminator
     *
     * @param {object} [buildStepUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildStep>;
    beginUpdate(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, callback: ServiceCallback<models.BuildStep>): void;
    beginUpdate(resourceGroupName: string, registryName: string, buildTaskName: string, stepName: string, buildStepUpdateParameters: models.BuildStepUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildStep>): void;


    /**
     * List all the build steps for a given build task.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildStepList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildStepList>>;

    /**
     * List all the build steps for a given build task.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildStepList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildStepList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildStepList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildStepList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.BuildStepList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildStepList>): void;


    /**
     * List the build arguments for a step including the secret arguments.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildArgumentList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBuildArgumentsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildArgumentList>>;

    /**
     * List the build arguments for a step including the secret arguments.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildArgumentList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildArgumentList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildArgumentList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBuildArgumentsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildArgumentList>;
    listBuildArgumentsNext(nextPageLink: string, callback: ServiceCallback<models.BuildArgumentList>): void;
    listBuildArgumentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildArgumentList>): void;
}

/**
 * @class
 * BuildTasks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerRegistryManagementClient.
 */
export interface BuildTasks {


    /**
     * Lists all the build tasks for a specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The build task filter to apply on the
     * operation.
     *
     * @param {string} [options.skipToken] $skipToken is supported on get list of
     * build tasks, which provides the next page in the list of tasks.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildTaskListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, registryName: string, options?: { filter? : string, skipToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildTaskListResult>>;

    /**
     * Lists all the build tasks for a specified container registry.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The build task filter to apply on the
     * operation.
     *
     * @param {string} [options.skipToken] $skipToken is supported on get list of
     * build tasks, which provides the next page in the list of tasks.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildTaskListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildTaskListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildTaskListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, registryName: string, options?: { filter? : string, skipToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildTaskListResult>;
    list(resourceGroupName: string, registryName: string, callback: ServiceCallback<models.BuildTaskListResult>): void;
    list(resourceGroupName: string, registryName: string, options: { filter? : string, skipToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildTaskListResult>): void;


    /**
     * Get the properties of a specified build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildTask>>;

    /**
     * Get the properties of a specified build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildTask>;
    get(resourceGroupName: string, registryName: string, buildTaskName: string, callback: ServiceCallback<models.BuildTask>): void;
    get(resourceGroupName: string, registryName: string, buildTaskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildTask>): void;


    /**
     * Creates a build task for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskCreateParameters The parameters for creating a
     * build task.
     *
     * @param {string} buildTaskCreateParameters.alias The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskCreateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} buildTaskCreateParameters.sourceRepository The properties
     * that describes the source(code) for the build task.
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
     * The type of source control service. Possible values include: 'Github',
     * 'VisualStudioTeamService'
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
     * full URL to the source code respository
     *
     * @param {boolean}
     * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {object} buildTaskCreateParameters.platform The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskCreateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {string} buildTaskCreateParameters.location The location of the
     * resource. This cannot be changed after the resource is created.
     *
     * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildTask>>;

    /**
     * Creates a build task for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskCreateParameters The parameters for creating a
     * build task.
     *
     * @param {string} buildTaskCreateParameters.alias The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskCreateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} buildTaskCreateParameters.sourceRepository The properties
     * that describes the source(code) for the build task.
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
     * The type of source control service. Possible values include: 'Github',
     * 'VisualStudioTeamService'
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
     * full URL to the source code respository
     *
     * @param {boolean}
     * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {object} buildTaskCreateParameters.platform The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskCreateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {string} buildTaskCreateParameters.location The location of the
     * resource. This cannot be changed after the resource is created.
     *
     * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildTask>;
    create(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, callback: ServiceCallback<models.BuildTask>): void;
    create(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildTask>): void;


    /**
     * Deletes a specified build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a specified build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a build task with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskUpdateParameters The parameters for updating a
     * build task.
     *
     * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskUpdateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} [buildTaskUpdateParameters.platform] The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskUpdateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
     * that describes the source(code) for the build task.
     *
     * @param {object}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {boolean}
     * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildTask>>;

    /**
     * Updates a build task with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskUpdateParameters The parameters for updating a
     * build task.
     *
     * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskUpdateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} [buildTaskUpdateParameters.platform] The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskUpdateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
     * that describes the source(code) for the build task.
     *
     * @param {object}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {boolean}
     * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildTask>;
    update(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, callback: ServiceCallback<models.BuildTask>): void;
    update(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildTask>): void;


    /**
     * Get the source control properties for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SourceRepositoryProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSourceRepositoryPropertiesWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SourceRepositoryProperties>>;

    /**
     * Get the source control properties for a build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SourceRepositoryProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SourceRepositoryProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SourceRepositoryProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSourceRepositoryProperties(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SourceRepositoryProperties>;
    listSourceRepositoryProperties(resourceGroupName: string, registryName: string, buildTaskName: string, callback: ServiceCallback<models.SourceRepositoryProperties>): void;
    listSourceRepositoryProperties(resourceGroupName: string, registryName: string, buildTaskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceRepositoryProperties>): void;


    /**
     * Creates a build task for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskCreateParameters The parameters for creating a
     * build task.
     *
     * @param {string} buildTaskCreateParameters.alias The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskCreateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} buildTaskCreateParameters.sourceRepository The properties
     * that describes the source(code) for the build task.
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
     * The type of source control service. Possible values include: 'Github',
     * 'VisualStudioTeamService'
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
     * full URL to the source code respository
     *
     * @param {boolean}
     * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {object} buildTaskCreateParameters.platform The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskCreateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {string} buildTaskCreateParameters.location The location of the
     * resource. This cannot be changed after the resource is created.
     *
     * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildTask>>;

    /**
     * Creates a build task for a container registry with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskCreateParameters The parameters for creating a
     * build task.
     *
     * @param {string} buildTaskCreateParameters.alias The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskCreateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} buildTaskCreateParameters.sourceRepository The properties
     * that describes the source(code) for the build task.
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.sourceControlType
     * The type of source control service. Possible values include: 'Github',
     * 'VisualStudioTeamService'
     *
     * @param {string} buildTaskCreateParameters.sourceRepository.repositoryUrl The
     * full URL to the source code respository
     *
     * @param {boolean}
     * [buildTaskCreateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskCreateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {object} buildTaskCreateParameters.platform The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskCreateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskCreateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskCreateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {string} buildTaskCreateParameters.location The location of the
     * resource. This cannot be changed after the resource is created.
     *
     * @param {object} [buildTaskCreateParameters.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildTask>;
    beginCreate(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, callback: ServiceCallback<models.BuildTask>): void;
    beginCreate(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskCreateParameters: models.BuildTask, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildTask>): void;


    /**
     * Deletes a specified build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a specified build task.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, registryName: string, buildTaskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a build task with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskUpdateParameters The parameters for updating a
     * build task.
     *
     * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskUpdateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} [buildTaskUpdateParameters.platform] The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskUpdateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
     * that describes the source(code) for the build task.
     *
     * @param {object}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {boolean}
     * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildTask>>;

    /**
     * Updates a build task with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the container registry belongs.
     *
     * @param {string} registryName The name of the container registry.
     *
     * @param {string} buildTaskName The name of the container registry build task.
     *
     * @param {object} buildTaskUpdateParameters The parameters for updating a
     * build task.
     *
     * @param {string} [buildTaskUpdateParameters.alias] The alternative updatable
     * name for a build task.
     *
     * @param {string} [buildTaskUpdateParameters.status] The current status of
     * build task. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} [buildTaskUpdateParameters.platform] The platform properties
     * against which the build has to happen.
     *
     * @param {string} buildTaskUpdateParameters.platform.osType The operating
     * system type required for the build. Possible values include: 'Windows',
     * 'Linux'
     *
     * @param {number} [buildTaskUpdateParameters.platform.cpu] The CPU
     * configuration in terms of number of cores required for the build.
     *
     * @param {number} [buildTaskUpdateParameters.timeout] Build timeout in
     * seconds.
     *
     * @param {object} [buildTaskUpdateParameters.sourceRepository] The properties
     * that describes the source(code) for the build task.
     *
     * @param {object}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties] The
     * authorization properties for accessing the source code repository.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.tokenType]
     * The type of Auth token. Possible values include: 'PAT', 'OAuth'
     *
     * @param {string}
     * buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.token
     * The access token used to access the source control provider.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.refreshToken]
     * The refresh token used to refresh the access token.
     *
     * @param {string}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.scope]
     * The scope of the access token.
     *
     * @param {number}
     * [buildTaskUpdateParameters.sourceRepository.sourceControlAuthProperties.expiresIn]
     * Time in seconds that the token remains valid
     *
     * @param {boolean}
     * [buildTaskUpdateParameters.sourceRepository.isCommitTriggerEnabled] The
     * value of this property indicates whether the source control commit trigger
     * is enabled or not.
     *
     * @param {object} [buildTaskUpdateParameters.tags] The ARM resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildTask>;
    beginUpdate(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, callback: ServiceCallback<models.BuildTask>): void;
    beginUpdate(resourceGroupName: string, registryName: string, buildTaskName: string, buildTaskUpdateParameters: models.BuildTaskUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildTask>): void;


    /**
     * Lists all the build tasks for a specified container registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BuildTaskListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BuildTaskListResult>>;

    /**
     * Lists all the build tasks for a specified container registry.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BuildTaskListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BuildTaskListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BuildTaskListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BuildTaskListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.BuildTaskListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildTaskListResult>): void;
}
