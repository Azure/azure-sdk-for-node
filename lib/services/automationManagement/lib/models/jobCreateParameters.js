/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The parameters supplied to the create job operation.
 *
 */
class JobCreateParameters {
  /**
   * Create a JobCreateParameters.
   * @member {object} runbook Gets or sets the runbook.
   * @member {string} [runbook.name] Gets or sets the name of the runbook.
   * @member {object} [parameters] Gets or sets the parameters of the job.
   * @member {string} [runOn] Gets or sets the runOn which specifies the group
   * name where the job is to be executed.
   */
  constructor() {
  }

  /**
   * Defines the metadata of JobCreateParameters
   *
   * @returns {object} metadata of JobCreateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'JobCreateParameters',
      type: {
        name: 'Composite',
        className: 'JobCreateParameters',
        modelProperties: {
          runbook: {
            required: true,
            serializedName: 'properties.runbook',
            type: {
              name: 'Composite',
              className: 'RunbookAssociationProperty'
            }
          },
          parameters: {
            required: false,
            serializedName: 'properties.parameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          runOn: {
            required: false,
            serializedName: 'properties.runOn',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = JobCreateParameters;
