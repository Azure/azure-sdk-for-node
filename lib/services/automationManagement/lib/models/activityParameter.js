/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Definition of the activity parameter.
 *
 */
class ActivityParameter {
  /**
   * Create a ActivityParameter.
   * @member {string} [name] Gets or sets the name of the activity parameter.
   * @member {string} [type] Gets or sets the type of the activity parameter.
   * @member {boolean} [isMandatory] Gets or sets a Boolean value that
   * indicates true if the parameter is required. If the value is false, the
   * parameter is optional.
   * @member {boolean} [isDynamic] Gets or sets a Boolean value that indicates
   * true if the parameter is dynamic.
   * @member {number} [position] Gets or sets the position of the activity
   * parameter.
   * @member {boolean} [valueFromPipeline] Gets or sets a Boolean value that
   * indicates true if the parameter can take values from the incoming pipeline
   * objects. This setting is used if the cmdlet must access the complete input
   * object. false indicates that the parameter cannot take values from the
   * complete input object.
   * @member {boolean} [valueFromPipelineByPropertyName] Gets or sets a Boolean
   * value that indicates true if the parameter can be filled from a property
   * of the incoming pipeline object that has the same name as this parameter.
   * false indicates that the parameter cannot be filled from the incoming
   * pipeline object property with the same name.
   * @member {boolean} [valueFromRemainingArguments] Gets or sets a Boolean
   * value that indicates true if the cmdlet parameter accepts all the
   * remaining command-line arguments that are associated with this parameter
   * in the form of an array. false if the cmdlet parameter does not accept all
   * the remaining argument values.
   * @member {string} [description] Gets or sets the description of the
   * activity parameter.
   * @member {array} [validationSet] Gets or sets the validation set of
   * activity parameter.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ActivityParameter
   *
   * @returns {object} metadata of ActivityParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ActivityParameter',
      type: {
        name: 'Composite',
        className: 'ActivityParameter',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          isMandatory: {
            required: false,
            serializedName: 'isMandatory',
            type: {
              name: 'Boolean'
            }
          },
          isDynamic: {
            required: false,
            serializedName: 'isDynamic',
            type: {
              name: 'Boolean'
            }
          },
          position: {
            required: false,
            serializedName: 'position',
            type: {
              name: 'Number'
            }
          },
          valueFromPipeline: {
            required: false,
            serializedName: 'valueFromPipeline',
            type: {
              name: 'Boolean'
            }
          },
          valueFromPipelineByPropertyName: {
            required: false,
            serializedName: 'valueFromPipelineByPropertyName',
            type: {
              name: 'Boolean'
            }
          },
          valueFromRemainingArguments: {
            required: false,
            serializedName: 'valueFromRemainingArguments',
            type: {
              name: 'Boolean'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          validationSet: {
            required: false,
            serializedName: 'validationSet',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActivityParameterValidationSetElementType',
                  type: {
                    name: 'Composite',
                    className: 'ActivityParameterValidationSet'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ActivityParameter;
