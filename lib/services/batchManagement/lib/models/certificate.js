/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Contains information about a certificate.
 *
 * @extends models['ProxyResource']
 */
class Certificate extends models['ProxyResource'] {
  /**
   * Create a Certificate.
   * @member {string} [thumbprintAlgorithm] The algorithm of the certificate
   * thumbprint. This must match the first portion of the certificate name.
   * Currently required to be 'SHA1'.
   * @member {string} [thumbprint] The thumbprint of the certificate. This must
   * match the thumbprint from the name.
   * @member {string} [format] The format of the certificate - either Pfx or
   * Cer. If omitted, the default is Pfx. Possible values include: 'Pfx', 'Cer'
   * @member {string} [provisioningState] The provisioned state of the
   * resource. Values are:
   *
   * Succeeded - The certificate is available for use in pools.
   * Deleting - The user has requested that the certificate be deleted, but the
   * delete operation has not yet completed. You may not reference the
   * certificate when creating or updating pools.
   * Failed - The user requested that the certificate be deleted, but there are
   * pools that still have references to the certificate, or it is still
   * installed on one or more compute nodes. (The latter can occur if the
   * certificate has been removed from the pool, but the node has not yet
   * restarted. Nodes refresh their certificates only when they restart.) You
   * may use the cancel certificate delete operation to cancel the delete, or
   * the delete certificate operation to retry the delete. Possible values
   * include: 'Succeeded', 'Deleting', 'Failed'
   * @member {date} [provisioningStateTransitionTime] The time at which the
   * certificate entered its current state.
   * @member {string} [previousProvisioningState] The previous provisioned
   * state of the resource. Possible values include: 'Succeeded', 'Deleting',
   * 'Failed'
   * @member {date} [previousProvisioningStateTransitionTime] The time at which
   * the certificate entered its previous state.
   * @member {string} [publicData] The public key of the certificate.
   * @member {object} [deleteCertificateError] The error which occurred while
   * deleting the certificate. This is only returned when the certificate
   * provisioningState is 'Failed'.
   * @member {string} [deleteCertificateError.code] An identifier for the
   * error. Codes are invariant and are intended to be consumed
   * programmatically.
   * @member {string} [deleteCertificateError.message] A message describing the
   * error, intended to be suitable for display in a user interface.
   * @member {string} [deleteCertificateError.target] The target of the
   * particular error. For example, the name of the property in error.
   * @member {array} [deleteCertificateError.details] A list of additional
   * details about the error.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Certificate
   *
   * @returns {object} metadata of Certificate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Certificate',
      type: {
        name: 'Composite',
        className: 'Certificate',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          thumbprintAlgorithm: {
            required: false,
            serializedName: 'properties.thumbprintAlgorithm',
            type: {
              name: 'String'
            }
          },
          thumbprint: {
            required: false,
            serializedName: 'properties.thumbprint',
            type: {
              name: 'String'
            }
          },
          format: {
            required: false,
            nullable: false,
            serializedName: 'properties.format',
            type: {
              name: 'Enum',
              allowedValues: [ 'Pfx', 'Cer' ]
            }
          },
          provisioningState: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Succeeded', 'Deleting', 'Failed' ]
            }
          },
          provisioningStateTransitionTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          previousProvisioningState: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.previousProvisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Succeeded', 'Deleting', 'Failed' ]
            }
          },
          previousProvisioningStateTransitionTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.previousProvisioningStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          publicData: {
            required: false,
            readOnly: true,
            serializedName: 'properties.publicData',
            type: {
              name: 'String'
            }
          },
          deleteCertificateError: {
            required: false,
            readOnly: true,
            serializedName: 'properties.deleteCertificateError',
            type: {
              name: 'Composite',
              className: 'DeleteCertificateError'
            }
          }
        }
      }
    };
  }
}

module.exports = Certificate;
