/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary A inbound NAT pool that can be used to address specific ports on
 * compute nodes in a Batch pool externally.
  *
 */
class InboundNatPool {
  /**
   * Create a InboundNatPool.
   * @property {string} name The name of the endpoint. The name must be unique
   * within a Batch pool, can contain letters, numbers, underscores, periods,
   * and hyphens. Names must start with a letter or number, must end with a
   * letter, number, or underscore, and cannot exceed 77 characters.  If any
   * invalid values are provided the request fails with HTTP status code 400.
   * @property {string} protocol The protocol of the endpoint. Possible values
   * include: 'TCP', 'UDP'
   * @property {number} backendPort The port number on the compute node. This
   * must be unique within a Batch pool. Acceptable values are between 1 and
   * 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any
   * reserved values are provided the request fails with HTTP status code 400.
   * @property {number} frontendPortRangeStart The first port number in the
   * range of external ports that will be used to provide inbound access to the
   * backendPort on individual compute nodes. Acceptable values range between 1
   * and 65534 except ports from 50000 to 55000 which are reserved. All ranges
   * within a pool must be distinct and cannot overlap. If any reserved or
   * overlapping values are provided the request fails with HTTP status code
   * 400.
   * @property {number} frontendPortRangeEnd The last port number in the range
   * of external ports that will be used to provide inbound access to the
   * backendPort on individual compute nodes. Acceptable values range between 1
   * and 65534 except ports from 50000 to 55000 which are reserved by the Batch
   * service. All ranges within a pool must be distinct and cannot overlap. If
   * any reserved or overlapping values are provided the request fails with
   * HTTP status code 400.
   * @property {array} [networkSecurityGroupRules] A list of network security
   * group rules that will be applied to the endpoint. The maximum number of
   * rules that can be specified across all the endpoints on a Batch pool is
   * 25. If no network security group rules are specified, a default rule will
   * be created to allow inbound access to the specified backendPort. If the
   * maximum number of network security group rules is exceeded the request
   * fails with HTTP status code 400.
   */
  constructor() {
  }

  /**
   * Defines the metadata of InboundNatPool
   *
   * @returns {object} metadata of InboundNatPool
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'InboundNatPool',
      type: {
        name: 'Composite',
        className: 'InboundNatPool',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          protocol: {
            required: true,
            serializedName: 'protocol',
            type: {
              name: 'Enum',
              allowedValues: [ 'TCP', 'UDP' ]
            }
          },
          backendPort: {
            required: true,
            serializedName: 'backendPort',
            type: {
              name: 'Number'
            }
          },
          frontendPortRangeStart: {
            required: true,
            serializedName: 'frontendPortRangeStart',
            type: {
              name: 'Number'
            }
          },
          frontendPortRangeEnd: {
            required: true,
            serializedName: 'frontendPortRangeEnd',
            type: {
              name: 'Number'
            }
          },
          networkSecurityGroupRules: {
            required: false,
            serializedName: 'networkSecurityGroupRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NetworkSecurityGroupRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'NetworkSecurityGroupRule'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = InboundNatPool;
