/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The key item containing key metadata.
 *
 */
class KeyItem {
  /**
   * Create a KeyItem.
   * @member {string} [kid] Key identifier.
   * @member {object} [attributes] The key management attributes.
   * @member {string} [attributes.recoveryLevel] Reflects the deletion recovery
   * level currently in effect for keys in the current vault. If it contains
   * 'Purgeable' the key can be permanently deleted by a privileged user;
   * otherwise, only the system can purge the key, at the end of the retention
   * interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable',
   * 'Recoverable', 'Recoverable+ProtectedSubscription'
   * @member {object} [tags] Application specific metadata in the form of
   * key-value pairs.
   * @member {boolean} [managed] True if the key's lifetime is managed by key
   * vault. If this is a key backing a certificate, then managed will be true.
   */
  constructor() {
  }

  /**
   * Defines the metadata of KeyItem
   *
   * @returns {object} metadata of KeyItem
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'KeyItem',
      type: {
        name: 'Composite',
        className: 'KeyItem',
        modelProperties: {
          kid: {
            required: false,
            serializedName: 'kid',
            type: {
              name: 'String'
            }
          },
          attributes: {
            required: false,
            serializedName: 'attributes',
            type: {
              name: 'Composite',
              className: 'KeyAttributes'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          managed: {
            required: false,
            readOnly: true,
            serializedName: 'managed',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = KeyItem;
