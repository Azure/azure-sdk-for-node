/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import { AzureServiceClient, AzureServiceClientOptions } from 'ms-rest-azure';
import * as models from "./models";

export default class KeyVaultClient extends AzureServiceClient {
  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @constructor
   *
   * @class
   * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
   *
   * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
   *
   * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
   *
   */
  constructor(credentials: ServiceClientCredentials, options?: AzureServiceClientOptions);

  credentials: ServiceClientCredentials;

  apiVersion: string;

  acceptLanguage: string;

  longRunningOperationRetryTimeout: number;

  generateClientRequestId: boolean;



  /**
   * @summary Creates a new key, stores it, then returns key parameters and
   * attributes to the client.
   *
   * The create key operation can be used to create any key type in Azure Key
   * Vault. If the named key already exists, Azure Key Vault creates a new
   * version of the key. It requires the keys/create permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name for the new key. The system will generate
   * the version name for the new key.
   *
   * @param {string} kty The type of key to create. For valid values, see
   * JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM',
   * 'oct'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.keySize] The key size in bits. For example: 2048,
   * 3072, or 4096 for RSA.
   *
   * @param {array} [options.keyOps]
   *
   * @param {object} [options.keyAttributes]
   *
   * @param {boolean} [options.keyAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.keyAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.keyAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {string} [options.curve] Elliptic curve name. For valid values, see
   * JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521',
   * 'P-256K'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, kty: string, options?: { keySize? : number, keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, curve? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyBundle>>;

  /**
   * @summary Creates a new key, stores it, then returns key parameters and
   * attributes to the client.
   *
   * The create key operation can be used to create any key type in Azure Key
   * Vault. If the named key already exists, Azure Key Vault creates a new
   * version of the key. It requires the keys/create permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name for the new key. The system will generate
   * the version name for the new key.
   *
   * @param {string} kty The type of key to create. For valid values, see
   * JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM',
   * 'oct'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.keySize] The key size in bits. For example: 2048,
   * 3072, or 4096 for RSA.
   *
   * @param {array} [options.keyOps]
   *
   * @param {object} [options.keyAttributes]
   *
   * @param {boolean} [options.keyAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.keyAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.keyAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {string} [options.curve] Elliptic curve name. For valid values, see
   * JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521',
   * 'P-256K'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createKey(vaultBaseUrl: string, keyName: string, kty: string, options?: { keySize? : number, keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, curve? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyBundle>;
  createKey(vaultBaseUrl: string, keyName: string, kty: string, callback: ServiceCallback<models.KeyBundle>): void;
  createKey(vaultBaseUrl: string, keyName: string, kty: string, options: { keySize? : number, keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, curve? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;


  /**
   * @summary Imports an externally created key, stores it, and returns key
   * parameters and attributes to the client.
   *
   * The import key operation may be used to import any key type into an Azure
   * Key Vault. If the named key already exists, Azure Key Vault creates a new
   * version of the key. This operation requires the keys/import permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName Name for the imported key.
   *
   * @param {object} key The Json web key
   *
   * @param {string} [key.kid] Key identifier.
   *
   * @param {string} [key.kty] JsonWebKey Key Type (kty), as defined in
   * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. Possible
   * values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {array} [key.keyOps]
   *
   * @param {buffer} [key.n] RSA modulus.
   *
   * @param {buffer} [key.e] RSA public exponent.
   *
   * @param {buffer} [key.d] RSA private exponent, or the D component of an EC
   * private key.
   *
   * @param {buffer} [key.dp] RSA private key parameter.
   *
   * @param {buffer} [key.dq] RSA private key parameter.
   *
   * @param {buffer} [key.qi] RSA private key parameter.
   *
   * @param {buffer} [key.p] RSA secret prime.
   *
   * @param {buffer} [key.q] RSA secret prime, with p < q.
   *
   * @param {buffer} [key.k] Symmetric key.
   *
   * @param {buffer} [key.t] HSM Token, used with 'Bring Your Own Key'.
   *
   * @param {string} [key.crv] Elliptic curve name. For valid values, see
   * JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521',
   * 'P-256K'
   *
   * @param {buffer} [key.x] X component of an EC public key.
   *
   * @param {buffer} [key.y] Y component of an EC public key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.hsm] Whether to import as a hardware key (HSM) or
   * software key.
   *
   * @param {object} [options.keyAttributes] The key management attributes.
   *
   * @param {boolean} [options.keyAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.keyAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.keyAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  importKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, key: models.JsonWebKey, options?: { hsm? : boolean, keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyBundle>>;

  /**
   * @summary Imports an externally created key, stores it, and returns key
   * parameters and attributes to the client.
   *
   * The import key operation may be used to import any key type into an Azure
   * Key Vault. If the named key already exists, Azure Key Vault creates a new
   * version of the key. This operation requires the keys/import permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName Name for the imported key.
   *
   * @param {object} key The Json web key
   *
   * @param {string} [key.kid] Key identifier.
   *
   * @param {string} [key.kty] JsonWebKey Key Type (kty), as defined in
   * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. Possible
   * values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {array} [key.keyOps]
   *
   * @param {buffer} [key.n] RSA modulus.
   *
   * @param {buffer} [key.e] RSA public exponent.
   *
   * @param {buffer} [key.d] RSA private exponent, or the D component of an EC
   * private key.
   *
   * @param {buffer} [key.dp] RSA private key parameter.
   *
   * @param {buffer} [key.dq] RSA private key parameter.
   *
   * @param {buffer} [key.qi] RSA private key parameter.
   *
   * @param {buffer} [key.p] RSA secret prime.
   *
   * @param {buffer} [key.q] RSA secret prime, with p < q.
   *
   * @param {buffer} [key.k] Symmetric key.
   *
   * @param {buffer} [key.t] HSM Token, used with 'Bring Your Own Key'.
   *
   * @param {string} [key.crv] Elliptic curve name. For valid values, see
   * JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521',
   * 'P-256K'
   *
   * @param {buffer} [key.x] X component of an EC public key.
   *
   * @param {buffer} [key.y] Y component of an EC public key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.hsm] Whether to import as a hardware key (HSM) or
   * software key.
   *
   * @param {object} [options.keyAttributes] The key management attributes.
   *
   * @param {boolean} [options.keyAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.keyAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.keyAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  importKey(vaultBaseUrl: string, keyName: string, key: models.JsonWebKey, options?: { hsm? : boolean, keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyBundle>;
  importKey(vaultBaseUrl: string, keyName: string, key: models.JsonWebKey, callback: ServiceCallback<models.KeyBundle>): void;
  importKey(vaultBaseUrl: string, keyName: string, key: models.JsonWebKey, options: { hsm? : boolean, keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;


  /**
   * @summary Deletes a key of any type from storage in Azure Key Vault.
   *
   * The delete key operation cannot be used to remove individual versions of a
   * key. This operation removes the cryptographic material associated with the
   * key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or
   * Encrypt/Decrypt operations. This operation requires the keys/delete
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedKeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedKeyBundle>>;

  /**
   * @summary Deletes a key of any type from storage in Azure Key Vault.
   *
   * The delete key operation cannot be used to remove individual versions of a
   * key. This operation removes the cryptographic material associated with the
   * key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or
   * Encrypt/Decrypt operations. This operation requires the keys/delete
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key to delete.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedKeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedKeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedKeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteKey(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedKeyBundle>;
  deleteKey(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.DeletedKeyBundle>): void;
  deleteKey(vaultBaseUrl: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedKeyBundle>): void;


  /**
   * @summary The update key operation changes specified attributes of a stored
   * key and can be applied to any key type and key version stored in Azure Key
   * Vault.
   *
   * In order to perform this operation, the key must already exist in the Key
   * Vault. Note: The cryptographic material of a key itself cannot be changed.
   * This operation requires the keys/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of key to update.
   *
   * @param {string} keyVersion The version of the key to update.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.keyOps] Json web key operations. For more
   * information on possible key operations, see JsonWebKeyOperation.
   *
   * @param {object} [options.keyAttributes]
   *
   * @param {boolean} [options.keyAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.keyAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.keyAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: { keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyBundle>>;

  /**
   * @summary The update key operation changes specified attributes of a stored
   * key and can be applied to any key type and key version stored in Azure Key
   * Vault.
   *
   * In order to perform this operation, the key must already exist in the Key
   * Vault. Note: The cryptographic material of a key itself cannot be changed.
   * This operation requires the keys/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of key to update.
   *
   * @param {string} keyVersion The version of the key to update.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.keyOps] Json web key operations. For more
   * information on possible key operations, see JsonWebKeyOperation.
   *
   * @param {object} [options.keyAttributes]
   *
   * @param {boolean} [options.keyAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.keyAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.keyAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: { keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyBundle>;
  updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, callback: ServiceCallback<models.KeyBundle>): void;
  updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options: { keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;


  /**
   * @summary Gets the public part of a stored key.
   *
   * The get key operation is applicable to all key types. If the requested key
   * is symmetric, then no key material is released in the response. This
   * operation requires the keys/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key to get.
   *
   * @param {string} keyVersion Adding the version parameter retrieves a specific
   * version of a key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyBundle>>;

  /**
   * @summary Gets the public part of a stored key.
   *
   * The get key operation is applicable to all key types. If the requested key
   * is symmetric, then no key material is released in the response. This
   * operation requires the keys/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key to get.
   *
   * @param {string} keyVersion Adding the version parameter retrieves a specific
   * version of a key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyBundle>;
  getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, callback: ServiceCallback<models.KeyBundle>): void;
  getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;


  /**
   * @summary Retrieves a list of individual key versions with the same key name.
   *
   * The full key identifier, attributes, and tags are provided in the response.
   * This operation requires the keys/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getKeyVersionsWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyListResult>>;

  /**
   * @summary Retrieves a list of individual key versions with the same key name.
   *
   * The full key identifier, attributes, and tags are provided in the response.
   * This operation requires the keys/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getKeyVersions(vaultBaseUrl: string, keyName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyListResult>;
  getKeyVersions(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.KeyListResult>): void;
  getKeyVersions(vaultBaseUrl: string, keyName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;


  /**
   * @summary List keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a stored key. The LIST operation is
   * applicable to all key types, however only the base key identifier,
   * attributes, and tags are provided in the response. Individual versions of a
   * key are not listed in the response. This operation requires the keys/list
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getKeysWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyListResult>>;

  /**
   * @summary List keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a stored key. The LIST operation is
   * applicable to all key types, however only the base key identifier,
   * attributes, and tags are provided in the response. Individual versions of a
   * key are not listed in the response. This operation requires the keys/list
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getKeys(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyListResult>;
  getKeys(vaultBaseUrl: string, callback: ServiceCallback<models.KeyListResult>): void;
  getKeys(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;


  /**
   * @summary Requests that a backup of the specified key be downloaded to the
   * client.
   *
   * The Key Backup operation exports a key from Azure Key Vault in a protected
   * form. Note that this operation does NOT return key material in a form that
   * can be used outside the Azure Key Vault system, the returned key material is
   * either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The
   * intent of this operation is to allow a client to GENERATE a key in one Azure
   * Key Vault instance, BACKUP the key, and then RESTORE it into another Azure
   * Key Vault instance. The BACKUP operation may be used to export, in protected
   * form, any key type from Azure Key Vault. Individual versions of a key cannot
   * be backed up. BACKUP / RESTORE can be performed within geographical
   * boundaries only; meaning that a BACKUP from one geographical area cannot be
   * restored to another geographical area. For example, a backup from the US
   * geographical area cannot be restored in an EU geographical area. This
   * operation requires the key/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BackupKeyResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  backupKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupKeyResult>>;

  /**
   * @summary Requests that a backup of the specified key be downloaded to the
   * client.
   *
   * The Key Backup operation exports a key from Azure Key Vault in a protected
   * form. Note that this operation does NOT return key material in a form that
   * can be used outside the Azure Key Vault system, the returned key material is
   * either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The
   * intent of this operation is to allow a client to GENERATE a key in one Azure
   * Key Vault instance, BACKUP the key, and then RESTORE it into another Azure
   * Key Vault instance. The BACKUP operation may be used to export, in protected
   * form, any key type from Azure Key Vault. Individual versions of a key cannot
   * be backed up. BACKUP / RESTORE can be performed within geographical
   * boundaries only; meaning that a BACKUP from one geographical area cannot be
   * restored to another geographical area. For example, a backup from the US
   * geographical area cannot be restored in an EU geographical area. This
   * operation requires the key/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BackupKeyResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BackupKeyResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BackupKeyResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  backupKey(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupKeyResult>;
  backupKey(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.BackupKeyResult>): void;
  backupKey(vaultBaseUrl: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupKeyResult>): void;


  /**
   * @summary Restores a backed up key to a vault.
   *
   * Imports a previously backed up key into Azure Key Vault, restoring the key,
   * its key identifier, attributes and access control policies. The RESTORE
   * operation may be used to import a previously backed up key. Individual
   * versions of a key cannot be restored. The key is restored in its entirety
   * with the same key name as it had when it was backed up. If the key name is
   * not available in the target Key Vault, the RESTORE operation will be
   * rejected. While the key name is retained during restore, the final key
   * identifier will change if the key is restored to a different vault. Restore
   * will restore all versions and preserve version identifiers. The RESTORE
   * operation is subject to security constraints: The target Key Vault must be
   * owned by the same Microsoft Azure Subscription as the source Key Vault The
   * user must have RESTORE permission in the target Key Vault. This operation
   * requires the keys/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} keyBundleBackup The backup blob associated with a key
   * bundle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  restoreKeyWithHttpOperationResponse(vaultBaseUrl: string, keyBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyBundle>>;

  /**
   * @summary Restores a backed up key to a vault.
   *
   * Imports a previously backed up key into Azure Key Vault, restoring the key,
   * its key identifier, attributes and access control policies. The RESTORE
   * operation may be used to import a previously backed up key. Individual
   * versions of a key cannot be restored. The key is restored in its entirety
   * with the same key name as it had when it was backed up. If the key name is
   * not available in the target Key Vault, the RESTORE operation will be
   * rejected. While the key name is retained during restore, the final key
   * identifier will change if the key is restored to a different vault. Restore
   * will restore all versions and preserve version identifiers. The RESTORE
   * operation is subject to security constraints: The target Key Vault must be
   * owned by the same Microsoft Azure Subscription as the source Key Vault The
   * user must have RESTORE permission in the target Key Vault. This operation
   * requires the keys/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} keyBundleBackup The backup blob associated with a key
   * bundle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyBundle>;
  restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer, callback: ServiceCallback<models.KeyBundle>): void;
  restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;


  /**
   * @summary Encrypts an arbitrary sequence of bytes using an encryption key
   * that is stored in a key vault.
   *
   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an
   * encryption key that is stored in Azure Key Vault. Note that the ENCRYPT
   * operation only supports a single block of data, the size of which is
   * dependent on the target key and the encryption algorithm to be used. The
   * ENCRYPT operation is only strictly necessary for symmetric keys stored in
   * Azure Key Vault since protection with an asymmetric key can be performed
   * using public portion of the key. This operation is supported for asymmetric
   * keys as a convenience for callers that have a key-reference but do not have
   * access to the public key material. This operation requires the keys/encypt
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyOperationResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  encryptWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyOperationResult>>;

  /**
   * @summary Encrypts an arbitrary sequence of bytes using an encryption key
   * that is stored in a key vault.
   *
   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an
   * encryption key that is stored in Azure Key Vault. Note that the ENCRYPT
   * operation only supports a single block of data, the size of which is
   * dependent on the target key and the encryption algorithm to be used. The
   * ENCRYPT operation is only strictly necessary for symmetric keys stored in
   * Azure Key Vault since protection with an asymmetric key can be performed
   * using public portion of the key. This operation is supported for asymmetric
   * keys as a convenience for callers that have a key-reference but do not have
   * access to the public key material. This operation requires the keys/encypt
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyOperationResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyOperationResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyOperationResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyOperationResult>;
  encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;
  encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;


  /**
   * @summary Decrypts a single block of encrypted data.
   *
   * The DECRYPT operation decrypts a well-formed block of ciphertext using the
   * target encryption key and specified algorithm. This operation is the reverse
   * of the ENCRYPT operation; only a single block of data may be decrypted, the
   * size of this block is dependent on the target key and the algorithm to be
   * used. The DECRYPT operation applies to asymmetric and symmetric keys stored
   * in Azure Key Vault since it uses the private portion of the key. This
   * operation requires the keys/decrypt permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyOperationResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  decryptWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyOperationResult>>;

  /**
   * @summary Decrypts a single block of encrypted data.
   *
   * The DECRYPT operation decrypts a well-formed block of ciphertext using the
   * target encryption key and specified algorithm. This operation is the reverse
   * of the ENCRYPT operation; only a single block of data may be decrypted, the
   * size of this block is dependent on the target key and the algorithm to be
   * used. The DECRYPT operation applies to asymmetric and symmetric keys stored
   * in Azure Key Vault since it uses the private portion of the key. This
   * operation requires the keys/decrypt permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyOperationResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyOperationResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyOperationResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyOperationResult>;
  decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;
  decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;


  /**
   * @summary Creates a signature from a digest using the specified key.
   *
   * The SIGN operation is applicable to asymmetric and symmetric keys stored in
   * Azure Key Vault since this operation uses the private portion of the key.
   * This operation requires the keys/sign permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm The signing/verification algorithm identifier. For
   * more information on possible algorithm types, see
   * JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',
   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512',
   * 'ES256K'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyOperationResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  signWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyOperationResult>>;

  /**
   * @summary Creates a signature from a digest using the specified key.
   *
   * The SIGN operation is applicable to asymmetric and symmetric keys stored in
   * Azure Key Vault since this operation uses the private portion of the key.
   * This operation requires the keys/sign permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm The signing/verification algorithm identifier. For
   * more information on possible algorithm types, see
   * JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',
   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512',
   * 'ES256K'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyOperationResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyOperationResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyOperationResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyOperationResult>;
  sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;
  sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;


  /**
   * @summary Verifies a signature using a specified key.
   *
   * The VERIFY operation is applicable to symmetric keys stored in Azure Key
   * Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure
   * Key Vault since signature verification can be performed using the public
   * portion of the key but this operation is supported as a convenience for
   * callers that only have a key-reference and not the public portion of the
   * key. This operation requires the keys/verify permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm The signing/verification algorithm. For more
   * information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
   * Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384',
   * 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   *
   * @param {buffer} digest The digest used for signing.
   *
   * @param {buffer} signature The signature to be verified.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyVerifyResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  verifyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, digest: Buffer, signature: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyVerifyResult>>;

  /**
   * @summary Verifies a signature using a specified key.
   *
   * The VERIFY operation is applicable to symmetric keys stored in Azure Key
   * Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure
   * Key Vault since signature verification can be performed using the public
   * portion of the key but this operation is supported as a convenience for
   * callers that only have a key-reference and not the public portion of the
   * key. This operation requires the keys/verify permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm The signing/verification algorithm. For more
   * information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
   * Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384',
   * 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   *
   * @param {buffer} digest The digest used for signing.
   *
   * @param {buffer} signature The signature to be verified.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyVerifyResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyVerifyResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyVerifyResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, digest: Buffer, signature: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyVerifyResult>;
  verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, digest: Buffer, signature: Buffer, callback: ServiceCallback<models.KeyVerifyResult>): void;
  verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, digest: Buffer, signature: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyVerifyResult>): void;


  /**
   * @summary Wraps a symmetric key using a specified key.
   *
   * The WRAP operation supports encryption of a symmetric key using a key
   * encryption key that has previously been stored in an Azure Key Vault. The
   * WRAP operation is only strictly necessary for symmetric keys stored in Azure
   * Key Vault since protection with an asymmetric key can be performed using the
   * public portion of the key. This operation is supported for asymmetric keys
   * as a convenience for callers that have a key-reference but do not have
   * access to the public key material. This operation requires the keys/wrapKey
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyOperationResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  wrapKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyOperationResult>>;

  /**
   * @summary Wraps a symmetric key using a specified key.
   *
   * The WRAP operation supports encryption of a symmetric key using a key
   * encryption key that has previously been stored in an Azure Key Vault. The
   * WRAP operation is only strictly necessary for symmetric keys stored in Azure
   * Key Vault since protection with an asymmetric key can be performed using the
   * public portion of the key. This operation is supported for asymmetric keys
   * as a convenience for callers that have a key-reference but do not have
   * access to the public key material. This operation requires the keys/wrapKey
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyOperationResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyOperationResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyOperationResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyOperationResult>;
  wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;
  wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;


  /**
   * @summary Unwraps a symmetric key using the specified key that was initially
   * used for wrapping that key.
   *
   * The UNWRAP operation supports decryption of a symmetric key using the target
   * key encryption key. This operation is the reverse of the WRAP operation. The
   * UNWRAP operation applies to asymmetric and symmetric keys stored in Azure
   * Key Vault since it uses the private portion of the key. This operation
   * requires the keys/unwrapKey permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyOperationResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unwrapKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyOperationResult>>;

  /**
   * @summary Unwraps a symmetric key using the specified key that was initially
   * used for wrapping that key.
   *
   * The UNWRAP operation supports decryption of a symmetric key using the target
   * key encryption key. This operation is the reverse of the WRAP operation. The
   * UNWRAP operation applies to asymmetric and symmetric keys stored in Azure
   * Key Vault since it uses the private portion of the key. This operation
   * requires the keys/unwrapKey permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {string} keyVersion The version of the key.
   *
   * @param {string} algorithm algorithm identifier. Possible values include:
   * 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   *
   * @param {buffer} value
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyOperationResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyOperationResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyOperationResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyOperationResult>;
  unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;
  unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;


  /**
   * @summary Lists the deleted keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a deleted key. This operation includes
   * deletion-specific information. The Get Deleted Keys operation is applicable
   * for vaults enabled for soft-delete. While the operation can be invoked on
   * any vault, it will return an error if invoked on a non soft-delete enabled
   * vault. This operation requires the keys/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedKeyListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedKeysWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedKeyListResult>>;

  /**
   * @summary Lists the deleted keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a deleted key. This operation includes
   * deletion-specific information. The Get Deleted Keys operation is applicable
   * for vaults enabled for soft-delete. While the operation can be invoked on
   * any vault, it will return an error if invoked on a non soft-delete enabled
   * vault. This operation requires the keys/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedKeyListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedKeyListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedKeyListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedKeys(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedKeyListResult>;
  getDeletedKeys(vaultBaseUrl: string, callback: ServiceCallback<models.DeletedKeyListResult>): void;
  getDeletedKeys(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedKeyListResult>): void;


  /**
   * @summary Gets the public part of a deleted key.
   *
   * The Get Deleted Key operation is applicable for soft-delete enabled vaults.
   * While the operation can be invoked on any vault, it will return an error if
   * invoked on a non soft-delete enabled vault. This operation requires the
   * keys/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedKeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedKeyBundle>>;

  /**
   * @summary Gets the public part of a deleted key.
   *
   * The Get Deleted Key operation is applicable for soft-delete enabled vaults.
   * While the operation can be invoked on any vault, it will return an error if
   * invoked on a non soft-delete enabled vault. This operation requires the
   * keys/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedKeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedKeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedKeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedKey(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedKeyBundle>;
  getDeletedKey(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.DeletedKeyBundle>): void;
  getDeletedKey(vaultBaseUrl: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedKeyBundle>): void;


  /**
   * @summary Permanently deletes the specified key.
   *
   * The Purge Deleted Key operation is applicable for soft-delete enabled
   * vaults. While the operation can be invoked on any vault, it will return an
   * error if invoked on a non soft-delete enabled vault. This operation requires
   * the keys/purge permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  purgeDeletedKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Permanently deletes the specified key.
   *
   * The Purge Deleted Key operation is applicable for soft-delete enabled
   * vaults. While the operation can be invoked on any vault, it will return an
   * error if invoked on a non soft-delete enabled vault. This operation requires
   * the keys/purge permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the key
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  purgeDeletedKey(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  purgeDeletedKey(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<void>): void;
  purgeDeletedKey(vaultBaseUrl: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Recovers the deleted key to its latest version.
   *
   * The Recover Deleted Key operation is applicable for deleted keys in
   * soft-delete enabled vaults. It recovers the deleted key back to its latest
   * version under /keys. An attempt to recover an non-deleted key will return an
   * error. Consider this the inverse of the delete operation on soft-delete
   * enabled vaults. This operation requires the keys/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the deleted key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recoverDeletedKeyWithHttpOperationResponse(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyBundle>>;

  /**
   * @summary Recovers the deleted key to its latest version.
   *
   * The Recover Deleted Key operation is applicable for deleted keys in
   * soft-delete enabled vaults. It recovers the deleted key back to its latest
   * version under /keys. An attempt to recover an non-deleted key will return an
   * error. Consider this the inverse of the delete operation on soft-delete
   * enabled vaults. This operation requires the keys/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} keyName The name of the deleted key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recoverDeletedKey(vaultBaseUrl: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyBundle>;
  recoverDeletedKey(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.KeyBundle>): void;
  recoverDeletedKey(vaultBaseUrl: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;


  /**
   * @summary Sets a secret in a specified key vault.
   *
   * The SET operation adds a secret to the Azure Key Vault. If the named secret
   * already exists, Azure Key Vault creates a new version of that secret. This
   * operation requires the secrets/set permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {string} value The value of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {string} [options.contentType] Type of the secret value such as a
   * password.
   *
   * @param {object} [options.secretAttributes] The secret management attributes.
   *
   * @param {boolean} [options.secretAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.secretAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.secretAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  setSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, value: string, options?: { tags? : { [propertyName: string]: string }, contentType? : string, secretAttributes? : models.SecretAttributes, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretBundle>>;

  /**
   * @summary Sets a secret in a specified key vault.
   *
   * The SET operation adds a secret to the Azure Key Vault. If the named secret
   * already exists, Azure Key Vault creates a new version of that secret. This
   * operation requires the secrets/set permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {string} value The value of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {string} [options.contentType] Type of the secret value such as a
   * password.
   *
   * @param {object} [options.secretAttributes] The secret management attributes.
   *
   * @param {boolean} [options.secretAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.secretAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.secretAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  setSecret(vaultBaseUrl: string, secretName: string, value: string, options?: { tags? : { [propertyName: string]: string }, contentType? : string, secretAttributes? : models.SecretAttributes, customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretBundle>;
  setSecret(vaultBaseUrl: string, secretName: string, value: string, callback: ServiceCallback<models.SecretBundle>): void;
  setSecret(vaultBaseUrl: string, secretName: string, value: string, options: { tags? : { [propertyName: string]: string }, contentType? : string, secretAttributes? : models.SecretAttributes, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;


  /**
   * @summary Deletes a secret from a specified key vault.
   *
   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE
   * cannot be applied to an individual version of a secret. This operation
   * requires the secrets/delete permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSecretBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSecretBundle>>;

  /**
   * @summary Deletes a secret from a specified key vault.
   *
   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE
   * cannot be applied to an individual version of a secret. This operation
   * requires the secrets/delete permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSecretBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSecretBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSecretBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSecret(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSecretBundle>;
  deleteSecret(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<models.DeletedSecretBundle>): void;
  deleteSecret(vaultBaseUrl: string, secretName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSecretBundle>): void;


  /**
   * @summary Updates the attributes associated with a specified secret in a
   * given key vault.
   *
   * The UPDATE operation changes specified attributes of an existing stored
   * secret. Attributes that are not specified in the request are left unchanged.
   * The value of a secret itself cannot be changed. This operation requires the
   * secrets/set permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {string} secretVersion The version of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.contentType] Type of the secret value such as a
   * password.
   *
   * @param {object} [options.secretAttributes] The secret management attributes.
   *
   * @param {boolean} [options.secretAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.secretAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.secretAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: { contentType? : string, secretAttributes? : models.SecretAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretBundle>>;

  /**
   * @summary Updates the attributes associated with a specified secret in a
   * given key vault.
   *
   * The UPDATE operation changes specified attributes of an existing stored
   * secret. Attributes that are not specified in the request are left unchanged.
   * The value of a secret itself cannot be changed. This operation requires the
   * secrets/set permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {string} secretVersion The version of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.contentType] Type of the secret value such as a
   * password.
   *
   * @param {object} [options.secretAttributes] The secret management attributes.
   *
   * @param {boolean} [options.secretAttributes.enabled] Determines whether the
   * object is enabled.
   *
   * @param {date} [options.secretAttributes.notBefore] Not before date in UTC.
   *
   * @param {date} [options.secretAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: { contentType? : string, secretAttributes? : models.SecretAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretBundle>;
  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, callback: ServiceCallback<models.SecretBundle>): void;
  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: { contentType? : string, secretAttributes? : models.SecretAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;


  /**
   * @summary Get a specified secret from a given key vault.
   *
   * The GET operation is applicable to any secret stored in Azure Key Vault.
   * This operation requires the secrets/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {string} secretVersion The version of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretBundle>>;

  /**
   * @summary Get a specified secret from a given key vault.
   *
   * The GET operation is applicable to any secret stored in Azure Key Vault.
   * This operation requires the secrets/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {string} secretVersion The version of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretBundle>;
  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, callback: ServiceCallback<models.SecretBundle>): void;
  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;


  /**
   * @summary List secrets in a specified key vault.
   *
   * The Get Secrets operation is applicable to the entire vault. However, only
   * the base secret identifier and its attributes are provided in the response.
   * Individual secret versions are not listed in the response. This operation
   * requires the secrets/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified, the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSecretsWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretListResult>>;

  /**
   * @summary List secrets in a specified key vault.
   *
   * The Get Secrets operation is applicable to the entire vault. However, only
   * the base secret identifier and its attributes are provided in the response.
   * Individual secret versions are not listed in the response. This operation
   * requires the secrets/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified, the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSecrets(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretListResult>;
  getSecrets(vaultBaseUrl: string, callback: ServiceCallback<models.SecretListResult>): void;
  getSecrets(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;


  /**
   * @summary List all versions of the specified secret.
   *
   * The full secret identifier and attributes are provided in the response. No
   * values are returned for the secrets. This operations requires the
   * secrets/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified, the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSecretVersionsWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretListResult>>;

  /**
   * @summary List all versions of the specified secret.
   *
   * The full secret identifier and attributes are provided in the response. No
   * values are returned for the secrets. This operations requires the
   * secrets/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified, the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSecretVersions(vaultBaseUrl: string, secretName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretListResult>;
  getSecretVersions(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<models.SecretListResult>): void;
  getSecretVersions(vaultBaseUrl: string, secretName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;


  /**
   * @summary Lists deleted secrets for the specified vault.
   *
   * The Get Deleted Secrets operation returns the secrets that have been deleted
   * for a vault enabled for soft-delete. This operation requires the
   * secrets/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSecretListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedSecretsWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSecretListResult>>;

  /**
   * @summary Lists deleted secrets for the specified vault.
   *
   * The Get Deleted Secrets operation returns the secrets that have been deleted
   * for a vault enabled for soft-delete. This operation requires the
   * secrets/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSecretListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSecretListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSecretListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedSecrets(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSecretListResult>;
  getDeletedSecrets(vaultBaseUrl: string, callback: ServiceCallback<models.DeletedSecretListResult>): void;
  getDeletedSecrets(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSecretListResult>): void;


  /**
   * @summary Gets the specified deleted secret.
   *
   * The Get Deleted Secret operation returns the specified deleted secret along
   * with its attributes. This operation requires the secrets/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSecretBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSecretBundle>>;

  /**
   * @summary Gets the specified deleted secret.
   *
   * The Get Deleted Secret operation returns the specified deleted secret along
   * with its attributes. This operation requires the secrets/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSecretBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSecretBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSecretBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedSecret(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSecretBundle>;
  getDeletedSecret(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<models.DeletedSecretBundle>): void;
  getDeletedSecret(vaultBaseUrl: string, secretName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSecretBundle>): void;


  /**
   * @summary Permanently deletes the specified secret.
   *
   * The purge deleted secret operation removes the secret permanently, without
   * the possibility of recovery. This operation can only be enabled on a
   * soft-delete enabled vault. This operation requires the secrets/purge
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  purgeDeletedSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Permanently deletes the specified secret.
   *
   * The purge deleted secret operation removes the secret permanently, without
   * the possibility of recovery. This operation can only be enabled on a
   * soft-delete enabled vault. This operation requires the secrets/purge
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<void>): void;
  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Recovers the deleted secret to the latest version.
   *
   * Recovers the deleted secret in the specified vault. This operation can only
   * be performed on a soft-delete enabled vault. This operation requires the
   * secrets/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the deleted secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recoverDeletedSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretBundle>>;

  /**
   * @summary Recovers the deleted secret to the latest version.
   *
   * Recovers the deleted secret in the specified vault. This operation can only
   * be performed on a soft-delete enabled vault. This operation requires the
   * secrets/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the deleted secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretBundle>;
  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<models.SecretBundle>): void;
  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;


  /**
   * @summary Backs up the specified secret.
   *
   * Requests that a backup of the specified secret be downloaded to the client.
   * All versions of the secret will be downloaded. This operation requires the
   * secrets/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BackupSecretResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  backupSecretWithHttpOperationResponse(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupSecretResult>>;

  /**
   * @summary Backs up the specified secret.
   *
   * Requests that a backup of the specified secret be downloaded to the client.
   * All versions of the secret will be downloaded. This operation requires the
   * secrets/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} secretName The name of the secret.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BackupSecretResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BackupSecretResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BackupSecretResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  backupSecret(vaultBaseUrl: string, secretName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupSecretResult>;
  backupSecret(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<models.BackupSecretResult>): void;
  backupSecret(vaultBaseUrl: string, secretName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupSecretResult>): void;


  /**
   * @summary Restores a backed up secret to a vault.
   *
   * Restores a backed up secret, and all its versions, to a vault. This
   * operation requires the secrets/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} secretBundleBackup The backup blob associated with a secret
   * bundle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  restoreSecretWithHttpOperationResponse(vaultBaseUrl: string, secretBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretBundle>>;

  /**
   * @summary Restores a backed up secret to a vault.
   *
   * Restores a backed up secret, and all its versions, to a vault. This
   * operation requires the secrets/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} secretBundleBackup The backup blob associated with a secret
   * bundle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretBundle>;
  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Buffer, callback: ServiceCallback<models.SecretBundle>): void;
  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;


  /**
   * @summary List certificates in a specified key vault
   *
   * The GetCertificates operation returns the set of certificates resources in
   * the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {boolean} [options.includePending] Specifies whether to include
   * certificates which are not completely provisioned.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificatesWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, includePending? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateListResult>>;

  /**
   * @summary List certificates in a specified key vault
   *
   * The GetCertificates operation returns the set of certificates resources in
   * the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {boolean} [options.includePending] Specifies whether to include
   * certificates which are not completely provisioned.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificates(vaultBaseUrl: string, options?: { maxresults? : number, includePending? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateListResult>;
  getCertificates(vaultBaseUrl: string, callback: ServiceCallback<models.CertificateListResult>): void;
  getCertificates(vaultBaseUrl: string, options: { maxresults? : number, includePending? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;


  /**
   * @summary Deletes a certificate from a specified key vault.
   *
   * Deletes all versions of a certificate object along with its associated
   * policy. Delete certificate cannot be used to remove individual versions of a
   * certificate object. This operation requires the certificates/delete
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedCertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedCertificateBundle>>;

  /**
   * @summary Deletes a certificate from a specified key vault.
   *
   * Deletes all versions of a certificate object along with its associated
   * policy. Delete certificate cannot be used to remove individual versions of a
   * certificate object. This operation requires the certificates/delete
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedCertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedCertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedCertificateBundle} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCertificate(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedCertificateBundle>;
  deleteCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.DeletedCertificateBundle>): void;
  deleteCertificate(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedCertificateBundle>): void;


  /**
   * @summary Sets the certificate contacts for the specified key vault.
   *
   * Sets the certificate contacts for the specified key vault. This operation
   * requires the certificates/managecontacts permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} contacts The contacts for the key vault certificate.
   *
   * @param {array} [contacts.contactList] The contact list for the vault
   * certificates.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Contacts>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  setCertificateContactsWithHttpOperationResponse(vaultBaseUrl: string, contacts: models.Contacts, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Contacts>>;

  /**
   * @summary Sets the certificate contacts for the specified key vault.
   *
   * Sets the certificate contacts for the specified key vault. This operation
   * requires the certificates/managecontacts permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} contacts The contacts for the key vault certificate.
   *
   * @param {array} [contacts.contactList] The contact list for the vault
   * certificates.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Contacts} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Contacts} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Contacts} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  setCertificateContacts(vaultBaseUrl: string, contacts: models.Contacts, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Contacts>;
  setCertificateContacts(vaultBaseUrl: string, contacts: models.Contacts, callback: ServiceCallback<models.Contacts>): void;
  setCertificateContacts(vaultBaseUrl: string, contacts: models.Contacts, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contacts>): void;


  /**
   * @summary Lists the certificate contacts for a specified key vault.
   *
   * The GetCertificateContacts operation returns the set of certificate contact
   * resources in the specified key vault. This operation requires the
   * certificates/managecontacts permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Contacts>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateContactsWithHttpOperationResponse(vaultBaseUrl: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Contacts>>;

  /**
   * @summary Lists the certificate contacts for a specified key vault.
   *
   * The GetCertificateContacts operation returns the set of certificate contact
   * resources in the specified key vault. This operation requires the
   * certificates/managecontacts permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Contacts} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Contacts} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Contacts} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificateContacts(vaultBaseUrl: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Contacts>;
  getCertificateContacts(vaultBaseUrl: string, callback: ServiceCallback<models.Contacts>): void;
  getCertificateContacts(vaultBaseUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contacts>): void;


  /**
   * @summary Deletes the certificate contacts for a specified key vault.
   *
   * Deletes the certificate contacts for a specified key vault certificate. This
   * operation requires the certificates/managecontacts permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Contacts>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteCertificateContactsWithHttpOperationResponse(vaultBaseUrl: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Contacts>>;

  /**
   * @summary Deletes the certificate contacts for a specified key vault.
   *
   * Deletes the certificate contacts for a specified key vault certificate. This
   * operation requires the certificates/managecontacts permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Contacts} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Contacts} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Contacts} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCertificateContacts(vaultBaseUrl: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Contacts>;
  deleteCertificateContacts(vaultBaseUrl: string, callback: ServiceCallback<models.Contacts>): void;
  deleteCertificateContacts(vaultBaseUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contacts>): void;


  /**
   * @summary List certificate issuers for a specified key vault.
   *
   * The GetCertificateIssuers operation returns the set of certificate issuer
   * resources in the specified key vault. This operation requires the
   * certificates/manageissuers/getissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateIssuerListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateIssuersWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateIssuerListResult>>;

  /**
   * @summary List certificate issuers for a specified key vault.
   *
   * The GetCertificateIssuers operation returns the set of certificate issuer
   * resources in the specified key vault. This operation requires the
   * certificates/manageissuers/getissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateIssuerListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateIssuerListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateIssuerListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificateIssuers(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateIssuerListResult>;
  getCertificateIssuers(vaultBaseUrl: string, callback: ServiceCallback<models.CertificateIssuerListResult>): void;
  getCertificateIssuers(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateIssuerListResult>): void;


  /**
   * @summary Sets the specified certificate issuer.
   *
   * The SetCertificateIssuer operation adds or updates the specified certificate
   * issuer. This operation requires the certificates/setissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {string} provider The issuer provider.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.credentials] The credentials to be used for the
   * issuer.
   *
   * @param {string} [options.credentials.accountId] The user name/account
   * name/account id.
   *
   * @param {string} [options.credentials.password] The password/secret/account
   * key.
   *
   * @param {object} [options.organizationDetails] Details of the organization as
   * provided to the issuer.
   *
   * @param {string} [options.organizationDetails.id] Id of the organization.
   *
   * @param {array} [options.organizationDetails.adminDetails] Details of the
   * organization administrator.
   *
   * @param {object} [options.attributes] Attributes of the issuer object.
   *
   * @param {boolean} [options.attributes.enabled] Determines whether the issuer
   * is enabled.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IssuerBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  setCertificateIssuerWithHttpOperationResponse(vaultBaseUrl: string, issuerName: string, provider: string, options?: { credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssuerBundle>>;

  /**
   * @summary Sets the specified certificate issuer.
   *
   * The SetCertificateIssuer operation adds or updates the specified certificate
   * issuer. This operation requires the certificates/setissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {string} provider The issuer provider.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.credentials] The credentials to be used for the
   * issuer.
   *
   * @param {string} [options.credentials.accountId] The user name/account
   * name/account id.
   *
   * @param {string} [options.credentials.password] The password/secret/account
   * key.
   *
   * @param {object} [options.organizationDetails] Details of the organization as
   * provided to the issuer.
   *
   * @param {string} [options.organizationDetails.id] Id of the organization.
   *
   * @param {array} [options.organizationDetails.adminDetails] Details of the
   * organization administrator.
   *
   * @param {object} [options.attributes] Attributes of the issuer object.
   *
   * @param {boolean} [options.attributes.enabled] Determines whether the issuer
   * is enabled.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {IssuerBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {IssuerBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IssuerBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, options?: { credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssuerBundle>;
  setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, callback: ServiceCallback<models.IssuerBundle>): void;
  setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, options: { credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;


  /**
   * @summary Updates the specified certificate issuer.
   *
   * The UpdateCertificateIssuer operation performs an update on the specified
   * certificate issuer entity. This operation requires the
   * certificates/setissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.provider] The issuer provider.
   *
   * @param {object} [options.credentials] The credentials to be used for the
   * issuer.
   *
   * @param {string} [options.credentials.accountId] The user name/account
   * name/account id.
   *
   * @param {string} [options.credentials.password] The password/secret/account
   * key.
   *
   * @param {object} [options.organizationDetails] Details of the organization as
   * provided to the issuer.
   *
   * @param {string} [options.organizationDetails.id] Id of the organization.
   *
   * @param {array} [options.organizationDetails.adminDetails] Details of the
   * organization administrator.
   *
   * @param {object} [options.attributes] Attributes of the issuer object.
   *
   * @param {boolean} [options.attributes.enabled] Determines whether the issuer
   * is enabled.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IssuerBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateCertificateIssuerWithHttpOperationResponse(vaultBaseUrl: string, issuerName: string, options?: { provider? : string, credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssuerBundle>>;

  /**
   * @summary Updates the specified certificate issuer.
   *
   * The UpdateCertificateIssuer operation performs an update on the specified
   * certificate issuer entity. This operation requires the
   * certificates/setissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.provider] The issuer provider.
   *
   * @param {object} [options.credentials] The credentials to be used for the
   * issuer.
   *
   * @param {string} [options.credentials.accountId] The user name/account
   * name/account id.
   *
   * @param {string} [options.credentials.password] The password/secret/account
   * key.
   *
   * @param {object} [options.organizationDetails] Details of the organization as
   * provided to the issuer.
   *
   * @param {string} [options.organizationDetails.id] Id of the organization.
   *
   * @param {array} [options.organizationDetails.adminDetails] Details of the
   * organization administrator.
   *
   * @param {object} [options.attributes] Attributes of the issuer object.
   *
   * @param {boolean} [options.attributes.enabled] Determines whether the issuer
   * is enabled.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {IssuerBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {IssuerBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IssuerBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: { provider? : string, credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }): Promise<models.IssuerBundle>;
  updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: ServiceCallback<models.IssuerBundle>): void;
  updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: { provider? : string, credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;


  /**
   * @summary Lists the specified certificate issuer.
   *
   * The GetCertificateIssuer operation returns the specified certificate issuer
   * resources in the specified key vault. This operation requires the
   * certificates/manageissuers/getissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IssuerBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateIssuerWithHttpOperationResponse(vaultBaseUrl: string, issuerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssuerBundle>>;

  /**
   * @summary Lists the specified certificate issuer.
   *
   * The GetCertificateIssuer operation returns the specified certificate issuer
   * resources in the specified key vault. This operation requires the
   * certificates/manageissuers/getissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {IssuerBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {IssuerBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IssuerBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssuerBundle>;
  getCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: ServiceCallback<models.IssuerBundle>): void;
  getCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;


  /**
   * @summary Deletes the specified certificate issuer.
   *
   * The DeleteCertificateIssuer operation permanently removes the specified
   * certificate issuer from the vault. This operation requires the
   * certificates/manageissuers/deleteissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IssuerBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteCertificateIssuerWithHttpOperationResponse(vaultBaseUrl: string, issuerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IssuerBundle>>;

  /**
   * @summary Deletes the specified certificate issuer.
   *
   * The DeleteCertificateIssuer operation permanently removes the specified
   * certificate issuer from the vault. This operation requires the
   * certificates/manageissuers/deleteissuers permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} issuerName The name of the issuer.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {IssuerBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {IssuerBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IssuerBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IssuerBundle>;
  deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: ServiceCallback<models.IssuerBundle>): void;
  deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;


  /**
   * @summary Creates a new certificate.
   *
   * If this is the first version, the certificate resource is created. This
   * operation requires the certificates/create permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.certificatePolicy] The management policy for the
   * certificate.
   *
   * @param {object} [options.certificatePolicy.keyProperties] Properties of the
   * key backing a certificate.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
   * Indicates if the private key can be exported.
   *
   * @param {string} [options.certificatePolicy.keyProperties.keyType] The type
   * of key pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
   * size in bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
   * Indicates if the same key pair will be used on certificate renewal.
   *
   * @param {string} [options.certificatePolicy.keyProperties.curve] Elliptic
   * curve name. For valid values, see JsonWebKeyCurveName. Possible values
   * include: 'P-256', 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [options.certificatePolicy.secretProperties] Properties of
   * the secret backing a certificate.
   *
   * @param {string} [options.certificatePolicy.secretProperties.contentType] The
   * media type (MIME type).
   *
   * @param {object} [options.certificatePolicy.x509CertificateProperties]
   * Properties of the X509 component of a certificate.
   *
   * @param {string}
   * [options.certificatePolicy.x509CertificateProperties.subject] The subject
   * name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
   * The enhanced key usage.
   *
   * @param {object}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
   * The subject alternative names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
   * usages.
   *
   * @param {number}
   * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
   * duration that the ceritifcate is valid in months.
   *
   * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
   * be performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
   * the issuer of the X509 component of a certificate.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
   * the referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
   * Type of certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [options.certificatePolicy.issuerParameters.certificateTransparency]
   * Indicates if the certificates generated under this policy should be
   * published to certificate transparency logs.
   *
   * @param {object} [options.certificatePolicy.attributes] The certificate
   * attributes.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateOperation>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateOperation>>;

  /**
   * @summary Creates a new certificate.
   *
   * If this is the first version, the certificate resource is created. This
   * operation requires the certificates/create permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.certificatePolicy] The management policy for the
   * certificate.
   *
   * @param {object} [options.certificatePolicy.keyProperties] Properties of the
   * key backing a certificate.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
   * Indicates if the private key can be exported.
   *
   * @param {string} [options.certificatePolicy.keyProperties.keyType] The type
   * of key pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
   * size in bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
   * Indicates if the same key pair will be used on certificate renewal.
   *
   * @param {string} [options.certificatePolicy.keyProperties.curve] Elliptic
   * curve name. For valid values, see JsonWebKeyCurveName. Possible values
   * include: 'P-256', 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [options.certificatePolicy.secretProperties] Properties of
   * the secret backing a certificate.
   *
   * @param {string} [options.certificatePolicy.secretProperties.contentType] The
   * media type (MIME type).
   *
   * @param {object} [options.certificatePolicy.x509CertificateProperties]
   * Properties of the X509 component of a certificate.
   *
   * @param {string}
   * [options.certificatePolicy.x509CertificateProperties.subject] The subject
   * name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
   * The enhanced key usage.
   *
   * @param {object}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
   * The subject alternative names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
   * usages.
   *
   * @param {number}
   * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
   * duration that the ceritifcate is valid in months.
   *
   * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
   * be performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
   * the issuer of the X509 component of a certificate.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
   * the referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
   * Type of certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [options.certificatePolicy.issuerParameters.certificateTransparency]
   * Indicates if the certificates generated under this policy should be
   * published to certificate transparency logs.
   *
   * @param {object} [options.certificatePolicy.attributes] The certificate
   * attributes.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateOperation} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateOperation} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateOperation} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createCertificate(vaultBaseUrl: string, certificateName: string, options?: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateOperation>;
  createCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateOperation>): void;
  createCertificate(vaultBaseUrl: string, certificateName: string, options: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;


  /**
   * @summary Imports a certificate into a specified key vault.
   *
   * Imports an existing valid certificate, containing a private key, into Azure
   * Key Vault. The certificate to be imported can be in either PFX or PEM
   * format. If the certificate is in PEM format the PEM file must contain the
   * key as well as x509 certificates. This operation requires the
   * certificates/import permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {string} base64EncodedCertificate Base64 encoded representation of
   * the certificate object to import. This certificate needs to contain the
   * private key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.password] If the private key in
   * base64EncodedCertificate is encrypted, the password used for encryption.
   *
   * @param {object} [options.certificatePolicy] The management policy for the
   * certificate.
   *
   * @param {object} [options.certificatePolicy.keyProperties] Properties of the
   * key backing a certificate.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
   * Indicates if the private key can be exported.
   *
   * @param {string} [options.certificatePolicy.keyProperties.keyType] The type
   * of key pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
   * size in bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
   * Indicates if the same key pair will be used on certificate renewal.
   *
   * @param {string} [options.certificatePolicy.keyProperties.curve] Elliptic
   * curve name. For valid values, see JsonWebKeyCurveName. Possible values
   * include: 'P-256', 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [options.certificatePolicy.secretProperties] Properties of
   * the secret backing a certificate.
   *
   * @param {string} [options.certificatePolicy.secretProperties.contentType] The
   * media type (MIME type).
   *
   * @param {object} [options.certificatePolicy.x509CertificateProperties]
   * Properties of the X509 component of a certificate.
   *
   * @param {string}
   * [options.certificatePolicy.x509CertificateProperties.subject] The subject
   * name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
   * The enhanced key usage.
   *
   * @param {object}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
   * The subject alternative names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
   * usages.
   *
   * @param {number}
   * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
   * duration that the ceritifcate is valid in months.
   *
   * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
   * be performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
   * the issuer of the X509 component of a certificate.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
   * the referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
   * Type of certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [options.certificatePolicy.issuerParameters.certificateTransparency]
   * Indicates if the certificates generated under this policy should be
   * published to certificate transparency logs.
   *
   * @param {object} [options.certificatePolicy.attributes] The certificate
   * attributes.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  importCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, options?: { password? : string, certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateBundle>>;

  /**
   * @summary Imports a certificate into a specified key vault.
   *
   * Imports an existing valid certificate, containing a private key, into Azure
   * Key Vault. The certificate to be imported can be in either PFX or PEM
   * format. If the certificate is in PEM format the PEM file must contain the
   * key as well as x509 certificates. This operation requires the
   * certificates/import permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {string} base64EncodedCertificate Base64 encoded representation of
   * the certificate object to import. This certificate needs to contain the
   * private key.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.password] If the private key in
   * base64EncodedCertificate is encrypted, the password used for encryption.
   *
   * @param {object} [options.certificatePolicy] The management policy for the
   * certificate.
   *
   * @param {object} [options.certificatePolicy.keyProperties] Properties of the
   * key backing a certificate.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
   * Indicates if the private key can be exported.
   *
   * @param {string} [options.certificatePolicy.keyProperties.keyType] The type
   * of key pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
   * size in bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
   * Indicates if the same key pair will be used on certificate renewal.
   *
   * @param {string} [options.certificatePolicy.keyProperties.curve] Elliptic
   * curve name. For valid values, see JsonWebKeyCurveName. Possible values
   * include: 'P-256', 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [options.certificatePolicy.secretProperties] Properties of
   * the secret backing a certificate.
   *
   * @param {string} [options.certificatePolicy.secretProperties.contentType] The
   * media type (MIME type).
   *
   * @param {object} [options.certificatePolicy.x509CertificateProperties]
   * Properties of the X509 component of a certificate.
   *
   * @param {string}
   * [options.certificatePolicy.x509CertificateProperties.subject] The subject
   * name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
   * The enhanced key usage.
   *
   * @param {object}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
   * The subject alternative names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
   * usages.
   *
   * @param {number}
   * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
   * duration that the ceritifcate is valid in months.
   *
   * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
   * be performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
   * the issuer of the X509 component of a certificate.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
   * the referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
   * Type of certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [options.certificatePolicy.issuerParameters.certificateTransparency]
   * Indicates if the certificates generated under this policy should be
   * published to certificate transparency logs.
   *
   * @param {object} [options.certificatePolicy.attributes] The certificate
   * attributes.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, options?: { password? : string, certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateBundle>;
  importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, callback: ServiceCallback<models.CertificateBundle>): void;
  importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, options: { password? : string, certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;


  /**
   * @summary List the versions of a certificate.
   *
   * The GetCertificateVersions operation returns the versions of a certificate
   * in the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateVersionsWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateListResult>>;

  /**
   * @summary List the versions of a certificate.
   *
   * The GetCertificateVersions operation returns the versions of a certificate
   * in the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificateVersions(vaultBaseUrl: string, certificateName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateListResult>;
  getCertificateVersions(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateListResult>): void;
  getCertificateVersions(vaultBaseUrl: string, certificateName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;


  /**
   * @summary Lists the policy for a certificate.
   *
   * The GetCertificatePolicy operation returns the specified certificate policy
   * resources in the specified key vault. This operation requires the
   * certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in a given key
   * vault.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificatePolicy>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificatePolicyWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificatePolicy>>;

  /**
   * @summary Lists the policy for a certificate.
   *
   * The GetCertificatePolicy operation returns the specified certificate policy
   * resources in the specified key vault. This operation requires the
   * certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in a given key
   * vault.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificatePolicy} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificatePolicy} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificatePolicy} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificatePolicy(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificatePolicy>;
  getCertificatePolicy(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificatePolicy>): void;
  getCertificatePolicy(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificatePolicy>): void;


  /**
   * @summary Updates the policy for a certificate.
   *
   * Set specified members in the certificate policy. Leave others as null. This
   * operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in the given
   * vault.
   *
   * @param {object} certificatePolicy The policy for the certificate.
   *
   * @param {object} [certificatePolicy.keyProperties] Properties of the key
   * backing a certificate.
   *
   * @param {boolean} [certificatePolicy.keyProperties.exportable] Indicates if
   * the private key can be exported.
   *
   * @param {string} [certificatePolicy.keyProperties.keyType] The type of key
   * pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [certificatePolicy.keyProperties.keySize] The key size in
   * bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [certificatePolicy.keyProperties.reuseKey] Indicates if the
   * same key pair will be used on certificate renewal.
   *
   * @param {string} [certificatePolicy.keyProperties.curve] Elliptic curve name.
   * For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256',
   * 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [certificatePolicy.secretProperties] Properties of the
   * secret backing a certificate.
   *
   * @param {string} [certificatePolicy.secretProperties.contentType] The media
   * type (MIME type).
   *
   * @param {object} [certificatePolicy.x509CertificateProperties] Properties of
   * the X509 component of a certificate.
   *
   * @param {string} [certificatePolicy.x509CertificateProperties.subject] The
   * subject name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [certificatePolicy.x509CertificateProperties.ekus] The
   * enhanced key usage.
   *
   * @param {object}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames] The
   * subject alternative names.
   *
   * @param {array}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array} [certificatePolicy.x509CertificateProperties.keyUsage] List
   * of key usages.
   *
   * @param {number}
   * [certificatePolicy.x509CertificateProperties.validityInMonths] The duration
   * that the ceritifcate is valid in months.
   *
   * @param {array} [certificatePolicy.lifetimeActions] Actions that will be
   * performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [certificatePolicy.issuerParameters] Parameters for the
   * issuer of the X509 component of a certificate.
   *
   * @param {string} [certificatePolicy.issuerParameters.name] Name of the
   * referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [certificatePolicy.issuerParameters.certificateType] Type of
   * certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [certificatePolicy.issuerParameters.certificateTransparency] Indicates if
   * the certificates generated under this policy should be published to
   * certificate transparency logs.
   *
   * @param {object} [certificatePolicy.attributes] The certificate attributes.
   *
   * @param {boolean} [certificatePolicy.attributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [certificatePolicy.attributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [certificatePolicy.attributes.expires] Expiry date in UTC.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificatePolicy>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateCertificatePolicyWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, certificatePolicy: models.CertificatePolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificatePolicy>>;

  /**
   * @summary Updates the policy for a certificate.
   *
   * Set specified members in the certificate policy. Leave others as null. This
   * operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in the given
   * vault.
   *
   * @param {object} certificatePolicy The policy for the certificate.
   *
   * @param {object} [certificatePolicy.keyProperties] Properties of the key
   * backing a certificate.
   *
   * @param {boolean} [certificatePolicy.keyProperties.exportable] Indicates if
   * the private key can be exported.
   *
   * @param {string} [certificatePolicy.keyProperties.keyType] The type of key
   * pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [certificatePolicy.keyProperties.keySize] The key size in
   * bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [certificatePolicy.keyProperties.reuseKey] Indicates if the
   * same key pair will be used on certificate renewal.
   *
   * @param {string} [certificatePolicy.keyProperties.curve] Elliptic curve name.
   * For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256',
   * 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [certificatePolicy.secretProperties] Properties of the
   * secret backing a certificate.
   *
   * @param {string} [certificatePolicy.secretProperties.contentType] The media
   * type (MIME type).
   *
   * @param {object} [certificatePolicy.x509CertificateProperties] Properties of
   * the X509 component of a certificate.
   *
   * @param {string} [certificatePolicy.x509CertificateProperties.subject] The
   * subject name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [certificatePolicy.x509CertificateProperties.ekus] The
   * enhanced key usage.
   *
   * @param {object}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames] The
   * subject alternative names.
   *
   * @param {array}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array} [certificatePolicy.x509CertificateProperties.keyUsage] List
   * of key usages.
   *
   * @param {number}
   * [certificatePolicy.x509CertificateProperties.validityInMonths] The duration
   * that the ceritifcate is valid in months.
   *
   * @param {array} [certificatePolicy.lifetimeActions] Actions that will be
   * performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [certificatePolicy.issuerParameters] Parameters for the
   * issuer of the X509 component of a certificate.
   *
   * @param {string} [certificatePolicy.issuerParameters.name] Name of the
   * referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [certificatePolicy.issuerParameters.certificateType] Type of
   * certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [certificatePolicy.issuerParameters.certificateTransparency] Indicates if
   * the certificates generated under this policy should be published to
   * certificate transparency logs.
   *
   * @param {object} [certificatePolicy.attributes] The certificate attributes.
   *
   * @param {boolean} [certificatePolicy.attributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [certificatePolicy.attributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [certificatePolicy.attributes.expires] Expiry date in UTC.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificatePolicy} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificatePolicy} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificatePolicy} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: models.CertificatePolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificatePolicy>;
  updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: models.CertificatePolicy, callback: ServiceCallback<models.CertificatePolicy>): void;
  updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: models.CertificatePolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificatePolicy>): void;


  /**
   * @summary Updates the specified attributes associated with the given
   * certificate.
   *
   * The UpdateCertificate operation applies the specified update on the given
   * certificate; the only elements updated are the certificate's attributes.
   * This operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in the given key
   * vault.
   *
   * @param {string} certificateVersion The version of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.certificatePolicy] The management policy for the
   * certificate.
   *
   * @param {object} [options.certificatePolicy.keyProperties] Properties of the
   * key backing a certificate.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
   * Indicates if the private key can be exported.
   *
   * @param {string} [options.certificatePolicy.keyProperties.keyType] The type
   * of key pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
   * size in bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
   * Indicates if the same key pair will be used on certificate renewal.
   *
   * @param {string} [options.certificatePolicy.keyProperties.curve] Elliptic
   * curve name. For valid values, see JsonWebKeyCurveName. Possible values
   * include: 'P-256', 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [options.certificatePolicy.secretProperties] Properties of
   * the secret backing a certificate.
   *
   * @param {string} [options.certificatePolicy.secretProperties.contentType] The
   * media type (MIME type).
   *
   * @param {object} [options.certificatePolicy.x509CertificateProperties]
   * Properties of the X509 component of a certificate.
   *
   * @param {string}
   * [options.certificatePolicy.x509CertificateProperties.subject] The subject
   * name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
   * The enhanced key usage.
   *
   * @param {object}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
   * The subject alternative names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
   * usages.
   *
   * @param {number}
   * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
   * duration that the ceritifcate is valid in months.
   *
   * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
   * be performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
   * the issuer of the X509 component of a certificate.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
   * the referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
   * Type of certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [options.certificatePolicy.issuerParameters.certificateTransparency]
   * Indicates if the certificates generated under this policy should be
   * published to certificate transparency logs.
   *
   * @param {object} [options.certificatePolicy.attributes] The certificate
   * attributes.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateBundle>>;

  /**
   * @summary Updates the specified attributes associated with the given
   * certificate.
   *
   * The UpdateCertificate operation applies the specified update on the given
   * certificate; the only elements updated are the certificate's attributes.
   * This operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in the given key
   * vault.
   *
   * @param {string} certificateVersion The version of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.certificatePolicy] The management policy for the
   * certificate.
   *
   * @param {object} [options.certificatePolicy.keyProperties] Properties of the
   * key backing a certificate.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
   * Indicates if the private key can be exported.
   *
   * @param {string} [options.certificatePolicy.keyProperties.keyType] The type
   * of key pair to be used for the certificate. Possible values include: 'EC',
   * 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   *
   * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
   * size in bits. For example: 2048, 3072, or 4096 for RSA.
   *
   * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
   * Indicates if the same key pair will be used on certificate renewal.
   *
   * @param {string} [options.certificatePolicy.keyProperties.curve] Elliptic
   * curve name. For valid values, see JsonWebKeyCurveName. Possible values
   * include: 'P-256', 'P-384', 'P-521', 'P-256K'
   *
   * @param {object} [options.certificatePolicy.secretProperties] Properties of
   * the secret backing a certificate.
   *
   * @param {string} [options.certificatePolicy.secretProperties.contentType] The
   * media type (MIME type).
   *
   * @param {object} [options.certificatePolicy.x509CertificateProperties]
   * Properties of the X509 component of a certificate.
   *
   * @param {string}
   * [options.certificatePolicy.x509CertificateProperties.subject] The subject
   * name. Should be a valid X509 distinguished Name.
   *
   * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
   * The enhanced key usage.
   *
   * @param {object}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
   * The subject alternative names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
   * Email addresses.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
   * Domain names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
   * User principal names.
   *
   * @param {array}
   * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
   * usages.
   *
   * @param {number}
   * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
   * duration that the ceritifcate is valid in months.
   *
   * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
   * be performed by Key Vault over the lifetime of a certificate.
   *
   * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
   * the issuer of the X509 component of a certificate.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
   * the referenced issuer object or reserved names; for example, 'Self' or
   * 'Unknown'.
   *
   * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
   * Type of certificate to be requested from the issuer provider.
   *
   * @param {boolean}
   * [options.certificatePolicy.issuerParameters.certificateTransparency]
   * Indicates if the certificates generated under this policy should be
   * published to certificate transparency logs.
   *
   * @param {object} [options.certificatePolicy.attributes] The certificate
   * attributes.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateBundle>;
  updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, callback: ServiceCallback<models.CertificateBundle>): void;
  updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;


  /**
   * @summary Gets information about a certificate.
   *
   * Gets information about a specific certificate. This operation requires the
   * certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in the given
   * vault.
   *
   * @param {string} certificateVersion The version of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateBundle>>;

  /**
   * @summary Gets information about a certificate.
   *
   * Gets information about a specific certificate. This operation requires the
   * certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate in the given
   * vault.
   *
   * @param {string} certificateVersion The version of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateBundle>;
  getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, callback: ServiceCallback<models.CertificateBundle>): void;
  getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;


  /**
   * @summary Updates a certificate operation.
   *
   * Updates a certificate creation operation that is already in progress. This
   * operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {boolean} cancellationRequested Indicates if cancellation was
   * requested on the certificate operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateOperation>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateCertificateOperationWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateOperation>>;

  /**
   * @summary Updates a certificate operation.
   *
   * Updates a certificate creation operation that is already in progress. This
   * operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {boolean} cancellationRequested Indicates if cancellation was
   * requested on the certificate operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateOperation} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateOperation} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateOperation} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateOperation>;
  updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, callback: ServiceCallback<models.CertificateOperation>): void;
  updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;


  /**
   * @summary Gets the creation operation of a certificate.
   *
   * Gets the creation operation associated with a specified certificate. This
   * operation requires the certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateOperation>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateOperationWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateOperation>>;

  /**
   * @summary Gets the creation operation of a certificate.
   *
   * Gets the creation operation associated with a specified certificate. This
   * operation requires the certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateOperation} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateOperation} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateOperation} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificateOperation(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateOperation>;
  getCertificateOperation(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateOperation>): void;
  getCertificateOperation(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;


  /**
   * @summary Deletes the creation operation for a specific certificate.
   *
   * Deletes the creation operation for a specified certificate that is in the
   * process of being created. The certificate is no longer created. This
   * operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateOperation>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteCertificateOperationWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateOperation>>;

  /**
   * @summary Deletes the creation operation for a specific certificate.
   *
   * Deletes the creation operation for a specified certificate that is in the
   * process of being created. The certificate is no longer created. This
   * operation requires the certificates/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateOperation} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateOperation} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateOperation} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateOperation>;
  deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateOperation>): void;
  deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;


  /**
   * @summary Merges a certificate or a certificate chain with a key pair
   * existing on the server.
   *
   * The MergeCertificate operation performs the merging of a certificate or
   * certificate chain with a key pair currently available in the service. This
   * operation requires the certificates/create permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {array} x509Certificates The certificate or the certificate chain to
   * merge.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  mergeCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, x509Certificates: Buffer[], options?: { certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateBundle>>;

  /**
   * @summary Merges a certificate or a certificate chain with a key pair
   * existing on the server.
   *
   * The MergeCertificate operation performs the merging of a certificate or
   * certificate chain with a key pair currently available in the service. This
   * operation requires the certificates/create permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {array} x509Certificates The certificate or the certificate chain to
   * merge.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.certificateAttributes] The attributes of the
   * certificate (optional).
   *
   * @param {boolean} [options.certificateAttributes.enabled] Determines whether
   * the object is enabled.
   *
   * @param {date} [options.certificateAttributes.notBefore] Not before date in
   * UTC.
   *
   * @param {date} [options.certificateAttributes.expires] Expiry date in UTC.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Buffer[], options?: { certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateBundle>;
  mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Buffer[], callback: ServiceCallback<models.CertificateBundle>): void;
  mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Buffer[], options: { certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;


  /**
   * @summary Backs up the specified certificate.
   *
   * Requests that a backup of the specified certificate be downloaded to the
   * client. All versions of the certificate will be downloaded. This operation
   * requires the certificates/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BackupCertificateResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  backupCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupCertificateResult>>;

  /**
   * @summary Backs up the specified certificate.
   *
   * Requests that a backup of the specified certificate be downloaded to the
   * client. All versions of the certificate will be downloaded. This operation
   * requires the certificates/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BackupCertificateResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BackupCertificateResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BackupCertificateResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  backupCertificate(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupCertificateResult>;
  backupCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.BackupCertificateResult>): void;
  backupCertificate(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupCertificateResult>): void;


  /**
   * @summary Restores a backed up certificate to a vault.
   *
   * Restores a backed up certificate, and all its versions, to a vault. This
   * operation requires the certificates/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} certificateBundleBackup The backup blob associated with a
   * certificate bundle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  restoreCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateBundle>>;

  /**
   * @summary Restores a backed up certificate to a vault.
   *
   * Restores a backed up certificate, and all its versions, to a vault. This
   * operation requires the certificates/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} certificateBundleBackup The backup blob associated with a
   * certificate bundle.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  restoreCertificate(vaultBaseUrl: string, certificateBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateBundle>;
  restoreCertificate(vaultBaseUrl: string, certificateBundleBackup: Buffer, callback: ServiceCallback<models.CertificateBundle>): void;
  restoreCertificate(vaultBaseUrl: string, certificateBundleBackup: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;


  /**
   * @summary Lists the deleted certificates in the specified vault currently
   * available for recovery.
   *
   * The GetDeletedCertificates operation retrieves the certificates in the
   * current vault which are in a deleted state and ready for recovery or
   * purging. This operation includes deletion-specific information. This
   * operation requires the certificates/get/list permission. This operation can
   * only be enabled on soft-delete enabled vaults.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {boolean} [options.includePending] Specifies whether to include
   * certificates which are not completely provisioned.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedCertificateListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedCertificatesWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, includePending? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedCertificateListResult>>;

  /**
   * @summary Lists the deleted certificates in the specified vault currently
   * available for recovery.
   *
   * The GetDeletedCertificates operation retrieves the certificates in the
   * current vault which are in a deleted state and ready for recovery or
   * purging. This operation includes deletion-specific information. This
   * operation requires the certificates/get/list permission. This operation can
   * only be enabled on soft-delete enabled vaults.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {boolean} [options.includePending] Specifies whether to include
   * certificates which are not completely provisioned.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedCertificateListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedCertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedCertificateListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedCertificates(vaultBaseUrl: string, options?: { maxresults? : number, includePending? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedCertificateListResult>;
  getDeletedCertificates(vaultBaseUrl: string, callback: ServiceCallback<models.DeletedCertificateListResult>): void;
  getDeletedCertificates(vaultBaseUrl: string, options: { maxresults? : number, includePending? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedCertificateListResult>): void;


  /**
   * @summary Retrieves information about the specified deleted certificate.
   *
   * The GetDeletedCertificate operation retrieves the deleted certificate
   * information plus its attributes, such as retention interval, scheduled
   * permanent deletion and the current deletion recovery level. This operation
   * requires the certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedCertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedCertificateBundle>>;

  /**
   * @summary Retrieves information about the specified deleted certificate.
   *
   * The GetDeletedCertificate operation retrieves the deleted certificate
   * information plus its attributes, such as retention interval, scheduled
   * permanent deletion and the current deletion recovery level. This operation
   * requires the certificates/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedCertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedCertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedCertificateBundle} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedCertificateBundle>;
  getDeletedCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.DeletedCertificateBundle>): void;
  getDeletedCertificate(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedCertificateBundle>): void;


  /**
   * @summary Permanently deletes the specified deleted certificate.
   *
   * The PurgeDeletedCertificate operation performs an irreversible deletion of
   * the specified certificate, without possibility for recovery. The operation
   * is not available if the recovery level does not specify 'Purgeable'. This
   * operation requires the certificate/purge permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  purgeDeletedCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Permanently deletes the specified deleted certificate.
   *
   * The PurgeDeletedCertificate operation performs an irreversible deletion of
   * the specified certificate, without possibility for recovery. The operation
   * is not available if the recovery level does not specify 'Purgeable'. This
   * operation requires the certificate/purge permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  purgeDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  purgeDeletedCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<void>): void;
  purgeDeletedCertificate(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Recovers the deleted certificate back to its current version under
   * /certificates.
   *
   * The RecoverDeletedCertificate operation performs the reversal of the Delete
   * operation. The operation is applicable in vaults enabled for soft-delete,
   * and must be issued during the retention interval (available in the deleted
   * certificate's attributes). This operation requires the certificates/recover
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the deleted certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recoverDeletedCertificateWithHttpOperationResponse(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateBundle>>;

  /**
   * @summary Recovers the deleted certificate back to its current version under
   * /certificates.
   *
   * The RecoverDeletedCertificate operation performs the reversal of the Delete
   * operation. The operation is applicable in vaults enabled for soft-delete,
   * and must be issued during the retention interval (available in the deleted
   * certificate's attributes). This operation requires the certificates/recover
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} certificateName The name of the deleted certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recoverDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateBundle>;
  recoverDeletedCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateBundle>): void;
  recoverDeletedCertificate(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;


  /**
   * List storage accounts managed by the specified key vault. This operation
   * requires the storage/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getStorageAccountsWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageListResult>>;

  /**
   * List storage accounts managed by the specified key vault. This operation
   * requires the storage/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getStorageAccounts(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageListResult>;
  getStorageAccounts(vaultBaseUrl: string, callback: ServiceCallback<models.StorageListResult>): void;
  getStorageAccounts(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageListResult>): void;


  /**
   * @summary Lists deleted storage accounts for the specified vault.
   *
   * The Get Deleted Storage Accounts operation returns the storage accounts that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedStorageListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedStorageAccountsWithHttpOperationResponse(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedStorageListResult>>;

  /**
   * @summary Lists deleted storage accounts for the specified vault.
   *
   * The Get Deleted Storage Accounts operation returns the storage accounts that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/list permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedStorageListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedStorageListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedStorageListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedStorageAccounts(vaultBaseUrl: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedStorageListResult>;
  getDeletedStorageAccounts(vaultBaseUrl: string, callback: ServiceCallback<models.DeletedStorageListResult>): void;
  getDeletedStorageAccounts(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedStorageListResult>): void;


  /**
   * @summary Gets the specified deleted storage account.
   *
   * The Get Deleted Storage Account operation returns the specified deleted
   * storage account along with its attributes. This operation requires the
   * storage/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedStorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedStorageBundle>>;

  /**
   * @summary Gets the specified deleted storage account.
   *
   * The Get Deleted Storage Account operation returns the specified deleted
   * storage account along with its attributes. This operation requires the
   * storage/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedStorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedStorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedStorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedStorageBundle>;
  getDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.DeletedStorageBundle>): void;
  getDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedStorageBundle>): void;


  /**
   * @summary Permanently deletes the specified storage account.
   *
   * The purge deleted storage account operation removes the secret permanently,
   * without the possibility of recovery. This operation can only be performed on
   * a soft-delete enabled vault. This operation requires the storage/purge
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  purgeDeletedStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Permanently deletes the specified storage account.
   *
   * The purge deleted storage account operation removes the secret permanently,
   * without the possibility of recovery. This operation can only be performed on
   * a soft-delete enabled vault. This operation requires the storage/purge
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  purgeDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  purgeDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<void>): void;
  purgeDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Recovers the deleted storage account.
   *
   * Recovers the deleted storage account in the specified vault. This operation
   * can only be performed on a soft-delete enabled vault. This operation
   * requires the storage/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recoverDeletedStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageBundle>>;

  /**
   * @summary Recovers the deleted storage account.
   *
   * Recovers the deleted storage account in the specified vault. This operation
   * can only be performed on a soft-delete enabled vault. This operation
   * requires the storage/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recoverDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageBundle>;
  recoverDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.StorageBundle>): void;
  recoverDeletedStorageAccount(vaultBaseUrl: string, storageAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageBundle>): void;


  /**
   * @summary Backs up the specified storage account.
   *
   * Requests that a backup of the specified storage account be downloaded to the
   * client. This operation requires the storage/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BackupStorageResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  backupStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupStorageResult>>;

  /**
   * @summary Backs up the specified storage account.
   *
   * Requests that a backup of the specified storage account be downloaded to the
   * client. This operation requires the storage/backup permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BackupStorageResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BackupStorageResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BackupStorageResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  backupStorageAccount(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupStorageResult>;
  backupStorageAccount(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.BackupStorageResult>): void;
  backupStorageAccount(vaultBaseUrl: string, storageAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupStorageResult>): void;


  /**
   * @summary Restores a backed up storage account to a vault.
   *
   * Restores a backed up storage account to a vault. This operation requires the
   * storage/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} storageBundleBackup The backup blob associated with a
   * storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  restoreStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageBundle>>;

  /**
   * @summary Restores a backed up storage account to a vault.
   *
   * Restores a backed up storage account to a vault. This operation requires the
   * storage/restore permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {buffer} storageBundleBackup The backup blob associated with a
   * storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  restoreStorageAccount(vaultBaseUrl: string, storageBundleBackup: Buffer, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageBundle>;
  restoreStorageAccount(vaultBaseUrl: string, storageBundleBackup: Buffer, callback: ServiceCallback<models.StorageBundle>): void;
  restoreStorageAccount(vaultBaseUrl: string, storageBundleBackup: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageBundle>): void;


  /**
   * Deletes a storage account. This operation requires the storage/delete
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedStorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedStorageBundle>>;

  /**
   * Deletes a storage account. This operation requires the storage/delete
   * permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedStorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedStorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedStorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteStorageAccount(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedStorageBundle>;
  deleteStorageAccount(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.DeletedStorageBundle>): void;
  deleteStorageAccount(vaultBaseUrl: string, storageAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedStorageBundle>): void;


  /**
   * Gets information about a specified storage account. This operation requires
   * the storage/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageBundle>>;

  /**
   * Gets information about a specified storage account. This operation requires
   * the storage/get permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getStorageAccount(vaultBaseUrl: string, storageAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageBundle>;
  getStorageAccount(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.StorageBundle>): void;
  getStorageAccount(vaultBaseUrl: string, storageAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageBundle>): void;


  /**
   * Creates or updates a new storage account. This operation requires the
   * storage/set permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} resourceId Storage account resource id.
   *
   * @param {string} activeKeyName Current active storage account key name.
   *
   * @param {boolean} autoRegenerateKey whether keyvault should manage the
   * storage account for the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.regenerationPeriod] The key regeneration time
   * duration specified in ISO-8601 format.
   *
   * @param {object} [options.storageAccountAttributes] The attributes of the
   * storage account.
   *
   * @param {boolean} [options.storageAccountAttributes.enabled] the enabled
   * state of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  setStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, resourceId: string, activeKeyName: string, autoRegenerateKey: boolean, options?: { regenerationPeriod? : string, storageAccountAttributes? : models.StorageAccountAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageBundle>>;

  /**
   * Creates or updates a new storage account. This operation requires the
   * storage/set permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} resourceId Storage account resource id.
   *
   * @param {string} activeKeyName Current active storage account key name.
   *
   * @param {boolean} autoRegenerateKey whether keyvault should manage the
   * storage account for the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.regenerationPeriod] The key regeneration time
   * duration specified in ISO-8601 format.
   *
   * @param {object} [options.storageAccountAttributes] The attributes of the
   * storage account.
   *
   * @param {boolean} [options.storageAccountAttributes.enabled] the enabled
   * state of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  setStorageAccount(vaultBaseUrl: string, storageAccountName: string, resourceId: string, activeKeyName: string, autoRegenerateKey: boolean, options?: { regenerationPeriod? : string, storageAccountAttributes? : models.StorageAccountAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageBundle>;
  setStorageAccount(vaultBaseUrl: string, storageAccountName: string, resourceId: string, activeKeyName: string, autoRegenerateKey: boolean, callback: ServiceCallback<models.StorageBundle>): void;
  setStorageAccount(vaultBaseUrl: string, storageAccountName: string, resourceId: string, activeKeyName: string, autoRegenerateKey: boolean, options: { regenerationPeriod? : string, storageAccountAttributes? : models.StorageAccountAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageBundle>): void;


  /**
   * Updates the specified attributes associated with the given storage account.
   * This operation requires the storage/set/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.activeKeyName] The current active storage account
   * key name.
   *
   * @param {boolean} [options.autoRegenerateKey] whether keyvault should manage
   * the storage account for the user.
   *
   * @param {string} [options.regenerationPeriod] The key regeneration time
   * duration specified in ISO-8601 format.
   *
   * @param {object} [options.storageAccountAttributes] The attributes of the
   * storage account.
   *
   * @param {boolean} [options.storageAccountAttributes.enabled] the enabled
   * state of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateStorageAccountWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { activeKeyName? : string, autoRegenerateKey? : boolean, regenerationPeriod? : string, storageAccountAttributes? : models.StorageAccountAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageBundle>>;

  /**
   * Updates the specified attributes associated with the given storage account.
   * This operation requires the storage/set/update permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.activeKeyName] The current active storage account
   * key name.
   *
   * @param {boolean} [options.autoRegenerateKey] whether keyvault should manage
   * the storage account for the user.
   *
   * @param {string} [options.regenerationPeriod] The key regeneration time
   * duration specified in ISO-8601 format.
   *
   * @param {object} [options.storageAccountAttributes] The attributes of the
   * storage account.
   *
   * @param {boolean} [options.storageAccountAttributes.enabled] the enabled
   * state of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateStorageAccount(vaultBaseUrl: string, storageAccountName: string, options?: { activeKeyName? : string, autoRegenerateKey? : boolean, regenerationPeriod? : string, storageAccountAttributes? : models.StorageAccountAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageBundle>;
  updateStorageAccount(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.StorageBundle>): void;
  updateStorageAccount(vaultBaseUrl: string, storageAccountName: string, options: { activeKeyName? : string, autoRegenerateKey? : boolean, regenerationPeriod? : string, storageAccountAttributes? : models.StorageAccountAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageBundle>): void;


  /**
   * Regenerates the specified key value for the given storage account. This
   * operation requires the storage/regeneratekey permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} keyName The storage account key name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  regenerateStorageAccountKeyWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageBundle>>;

  /**
   * Regenerates the specified key value for the given storage account. This
   * operation requires the storage/regeneratekey permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} keyName The storage account key name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  regenerateStorageAccountKey(vaultBaseUrl: string, storageAccountName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageBundle>;
  regenerateStorageAccountKey(vaultBaseUrl: string, storageAccountName: string, keyName: string, callback: ServiceCallback<models.StorageBundle>): void;
  regenerateStorageAccountKey(vaultBaseUrl: string, storageAccountName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageBundle>): void;


  /**
   * List storage SAS definitions for the given storage account. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SasDefinitionListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSasDefinitionsWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SasDefinitionListResult>>;

  /**
   * List storage SAS definitions for the given storage account. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SasDefinitionListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SasDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SasDefinitionListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSasDefinitions(vaultBaseUrl: string, storageAccountName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SasDefinitionListResult>;
  getSasDefinitions(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.SasDefinitionListResult>): void;
  getSasDefinitions(vaultBaseUrl: string, storageAccountName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SasDefinitionListResult>): void;


  /**
   * @summary Lists deleted SAS definitions for the specified vault and storage
   * account.
   *
   * The Get Deleted Sas Definitions operation returns the SAS definitions that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSasDefinitionListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedSasDefinitionsWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSasDefinitionListResult>>;

  /**
   * @summary Lists deleted SAS definitions for the specified vault and storage
   * account.
   *
   * The Get Deleted Sas Definitions operation returns the SAS definitions that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.maxresults] Maximum number of results to return in
   * a page. If not specified the service will return up to 25 results.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSasDefinitionListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSasDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSasDefinitionListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedSasDefinitions(vaultBaseUrl: string, storageAccountName: string, options?: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSasDefinitionListResult>;
  getDeletedSasDefinitions(vaultBaseUrl: string, storageAccountName: string, callback: ServiceCallback<models.DeletedSasDefinitionListResult>): void;
  getDeletedSasDefinitions(vaultBaseUrl: string, storageAccountName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSasDefinitionListResult>): void;


  /**
   * @summary Gets the specified deleted sas definition.
   *
   * The Get Deleted SAS Definition operation returns the specified deleted SAS
   * definition along with its attributes. This operation requires the
   * storage/getsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSasDefinitionBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSasDefinitionBundle>>;

  /**
   * @summary Gets the specified deleted sas definition.
   *
   * The Get Deleted SAS Definition operation returns the specified deleted SAS
   * definition along with its attributes. This operation requires the
   * storage/getsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSasDefinitionBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSasDefinitionBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSasDefinitionBundle} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSasDefinitionBundle>;
  getDeletedSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, callback: ServiceCallback<models.DeletedSasDefinitionBundle>): void;
  getDeletedSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSasDefinitionBundle>): void;


  /**
   * @summary Recovers the deleted SAS definition.
   *
   * Recovers the deleted SAS definition for the specified storage account. This
   * operation can only be performed on a soft-delete enabled vault. This
   * operation requires the storage/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SasDefinitionBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  recoverDeletedSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SasDefinitionBundle>>;

  /**
   * @summary Recovers the deleted SAS definition.
   *
   * Recovers the deleted SAS definition for the specified storage account. This
   * operation can only be performed on a soft-delete enabled vault. This
   * operation requires the storage/recover permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SasDefinitionBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SasDefinitionBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SasDefinitionBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  recoverDeletedSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SasDefinitionBundle>;
  recoverDeletedSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, callback: ServiceCallback<models.SasDefinitionBundle>): void;
  recoverDeletedSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SasDefinitionBundle>): void;


  /**
   * Deletes a SAS definition from a specified storage account. This operation
   * requires the storage/deletesas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSasDefinitionBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSasDefinitionBundle>>;

  /**
   * Deletes a SAS definition from a specified storage account. This operation
   * requires the storage/deletesas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSasDefinitionBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSasDefinitionBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSasDefinitionBundle} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSasDefinitionBundle>;
  deleteSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, callback: ServiceCallback<models.DeletedSasDefinitionBundle>): void;
  deleteSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSasDefinitionBundle>): void;


  /**
   * Gets information about a SAS definition for the specified storage account.
   * This operation requires the storage/getsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SasDefinitionBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SasDefinitionBundle>>;

  /**
   * Gets information about a SAS definition for the specified storage account.
   * This operation requires the storage/getsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SasDefinitionBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SasDefinitionBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SasDefinitionBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SasDefinitionBundle>;
  getSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, callback: ServiceCallback<models.SasDefinitionBundle>): void;
  getSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SasDefinitionBundle>): void;


  /**
   * Creates or updates a new SAS definition for the specified storage account.
   * This operation requires the storage/setsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {string} templateUri The SAS definition token template signed with an
   * arbitrary key.  Tokens created according to the SAS definition will have the
   * same properties as the template.
   *
   * @param {string} sasType The type of SAS token the SAS definition will
   * create. Possible values include: 'account', 'service'
   *
   * @param {string} validityPeriod The validity period of SAS tokens created
   * according to the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.sasDefinitionAttributes] The attributes of the SAS
   * definition.
   *
   * @param {boolean} [options.sasDefinitionAttributes.enabled] the enabled state
   * of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SasDefinitionBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  setSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, templateUri: string, sasType: string, validityPeriod: string, options?: { sasDefinitionAttributes? : models.SasDefinitionAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SasDefinitionBundle>>;

  /**
   * Creates or updates a new SAS definition for the specified storage account.
   * This operation requires the storage/setsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {string} templateUri The SAS definition token template signed with an
   * arbitrary key.  Tokens created according to the SAS definition will have the
   * same properties as the template.
   *
   * @param {string} sasType The type of SAS token the SAS definition will
   * create. Possible values include: 'account', 'service'
   *
   * @param {string} validityPeriod The validity period of SAS tokens created
   * according to the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.sasDefinitionAttributes] The attributes of the SAS
   * definition.
   *
   * @param {boolean} [options.sasDefinitionAttributes.enabled] the enabled state
   * of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SasDefinitionBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SasDefinitionBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SasDefinitionBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  setSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, templateUri: string, sasType: string, validityPeriod: string, options?: { sasDefinitionAttributes? : models.SasDefinitionAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.SasDefinitionBundle>;
  setSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, templateUri: string, sasType: string, validityPeriod: string, callback: ServiceCallback<models.SasDefinitionBundle>): void;
  setSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, templateUri: string, sasType: string, validityPeriod: string, options: { sasDefinitionAttributes? : models.SasDefinitionAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SasDefinitionBundle>): void;


  /**
   * Updates the specified attributes associated with the given SAS definition.
   * This operation requires the storage/setsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.templateUri] The SAS definition token template
   * signed with an arbitrary key.  Tokens created according to the SAS
   * definition will have the same properties as the template.
   *
   * @param {string} [options.sasType] The type of SAS token the SAS definition
   * will create. Possible values include: 'account', 'service'
   *
   * @param {string} [options.validityPeriod] The validity period of SAS tokens
   * created according to the SAS definition.
   *
   * @param {object} [options.sasDefinitionAttributes] The attributes of the SAS
   * definition.
   *
   * @param {boolean} [options.sasDefinitionAttributes.enabled] the enabled state
   * of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SasDefinitionBundle>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateSasDefinitionWithHttpOperationResponse(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { templateUri? : string, sasType? : string, validityPeriod? : string, sasDefinitionAttributes? : models.SasDefinitionAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SasDefinitionBundle>>;

  /**
   * Updates the specified attributes associated with the given SAS definition.
   * This operation requires the storage/setsas permission.
   *
   * @param {string} vaultBaseUrl The vault name, for example
   * https://myvault.vault.azure.net.
   *
   * @param {string} storageAccountName The name of the storage account.
   *
   * @param {string} sasDefinitionName The name of the SAS definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.templateUri] The SAS definition token template
   * signed with an arbitrary key.  Tokens created according to the SAS
   * definition will have the same properties as the template.
   *
   * @param {string} [options.sasType] The type of SAS token the SAS definition
   * will create. Possible values include: 'account', 'service'
   *
   * @param {string} [options.validityPeriod] The validity period of SAS tokens
   * created according to the SAS definition.
   *
   * @param {object} [options.sasDefinitionAttributes] The attributes of the SAS
   * definition.
   *
   * @param {boolean} [options.sasDefinitionAttributes.enabled] the enabled state
   * of the object.
   *
   * @param {object} [options.tags] Application specific metadata in the form of
   * key-value pairs.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SasDefinitionBundle} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SasDefinitionBundle} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SasDefinitionBundle} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options?: { templateUri? : string, sasType? : string, validityPeriod? : string, sasDefinitionAttributes? : models.SasDefinitionAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.SasDefinitionBundle>;
  updateSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, callback: ServiceCallback<models.SasDefinitionBundle>): void;
  updateSasDefinition(vaultBaseUrl: string, storageAccountName: string, sasDefinitionName: string, options: { templateUri? : string, sasType? : string, validityPeriod? : string, sasDefinitionAttributes? : models.SasDefinitionAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SasDefinitionBundle>): void;


  /**
   * @summary Retrieves a list of individual key versions with the same key name.
   *
   * The full key identifier, attributes, and tags are provided in the response.
   * This operation requires the keys/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getKeyVersionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyListResult>>;

  /**
   * @summary Retrieves a list of individual key versions with the same key name.
   *
   * The full key identifier, attributes, and tags are provided in the response.
   * This operation requires the keys/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getKeyVersionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyListResult>;
  getKeyVersionsNext(nextPageLink: string, callback: ServiceCallback<models.KeyListResult>): void;
  getKeyVersionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;


  /**
   * @summary List keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a stored key. The LIST operation is
   * applicable to all key types, however only the base key identifier,
   * attributes, and tags are provided in the response. Individual versions of a
   * key are not listed in the response. This operation requires the keys/list
   * permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<KeyListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getKeysNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyListResult>>;

  /**
   * @summary List keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a stored key. The LIST operation is
   * applicable to all key types, however only the base key identifier,
   * attributes, and tags are provided in the response. Individual versions of a
   * key are not listed in the response. This operation requires the keys/list
   * permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {KeyListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {KeyListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link KeyListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getKeysNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyListResult>;
  getKeysNext(nextPageLink: string, callback: ServiceCallback<models.KeyListResult>): void;
  getKeysNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;


  /**
   * @summary Lists the deleted keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a deleted key. This operation includes
   * deletion-specific information. The Get Deleted Keys operation is applicable
   * for vaults enabled for soft-delete. While the operation can be invoked on
   * any vault, it will return an error if invoked on a non soft-delete enabled
   * vault. This operation requires the keys/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedKeyListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedKeysNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedKeyListResult>>;

  /**
   * @summary Lists the deleted keys in the specified vault.
   *
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures
   * that contain the public part of a deleted key. This operation includes
   * deletion-specific information. The Get Deleted Keys operation is applicable
   * for vaults enabled for soft-delete. While the operation can be invoked on
   * any vault, it will return an error if invoked on a non soft-delete enabled
   * vault. This operation requires the keys/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedKeyListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedKeyListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedKeyListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedKeysNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedKeyListResult>;
  getDeletedKeysNext(nextPageLink: string, callback: ServiceCallback<models.DeletedKeyListResult>): void;
  getDeletedKeysNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedKeyListResult>): void;


  /**
   * @summary List secrets in a specified key vault.
   *
   * The Get Secrets operation is applicable to the entire vault. However, only
   * the base secret identifier and its attributes are provided in the response.
   * Individual secret versions are not listed in the response. This operation
   * requires the secrets/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSecretsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretListResult>>;

  /**
   * @summary List secrets in a specified key vault.
   *
   * The Get Secrets operation is applicable to the entire vault. However, only
   * the base secret identifier and its attributes are provided in the response.
   * Individual secret versions are not listed in the response. This operation
   * requires the secrets/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSecretsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretListResult>;
  getSecretsNext(nextPageLink: string, callback: ServiceCallback<models.SecretListResult>): void;
  getSecretsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;


  /**
   * @summary List all versions of the specified secret.
   *
   * The full secret identifier and attributes are provided in the response. No
   * values are returned for the secrets. This operations requires the
   * secrets/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SecretListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSecretVersionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecretListResult>>;

  /**
   * @summary List all versions of the specified secret.
   *
   * The full secret identifier and attributes are provided in the response. No
   * values are returned for the secrets. This operations requires the
   * secrets/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SecretListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SecretListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SecretListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSecretVersionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecretListResult>;
  getSecretVersionsNext(nextPageLink: string, callback: ServiceCallback<models.SecretListResult>): void;
  getSecretVersionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;


  /**
   * @summary Lists deleted secrets for the specified vault.
   *
   * The Get Deleted Secrets operation returns the secrets that have been deleted
   * for a vault enabled for soft-delete. This operation requires the
   * secrets/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSecretListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedSecretsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSecretListResult>>;

  /**
   * @summary Lists deleted secrets for the specified vault.
   *
   * The Get Deleted Secrets operation returns the secrets that have been deleted
   * for a vault enabled for soft-delete. This operation requires the
   * secrets/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSecretListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSecretListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSecretListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedSecretsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSecretListResult>;
  getDeletedSecretsNext(nextPageLink: string, callback: ServiceCallback<models.DeletedSecretListResult>): void;
  getDeletedSecretsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSecretListResult>): void;


  /**
   * @summary List certificates in a specified key vault
   *
   * The GetCertificates operation returns the set of certificates resources in
   * the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificatesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateListResult>>;

  /**
   * @summary List certificates in a specified key vault
   *
   * The GetCertificates operation returns the set of certificates resources in
   * the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificatesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateListResult>;
  getCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.CertificateListResult>): void;
  getCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;


  /**
   * @summary List certificate issuers for a specified key vault.
   *
   * The GetCertificateIssuers operation returns the set of certificate issuer
   * resources in the specified key vault. This operation requires the
   * certificates/manageissuers/getissuers permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateIssuerListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateIssuersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateIssuerListResult>>;

  /**
   * @summary List certificate issuers for a specified key vault.
   *
   * The GetCertificateIssuers operation returns the set of certificate issuer
   * resources in the specified key vault. This operation requires the
   * certificates/manageissuers/getissuers permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateIssuerListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateIssuerListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateIssuerListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificateIssuersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateIssuerListResult>;
  getCertificateIssuersNext(nextPageLink: string, callback: ServiceCallback<models.CertificateIssuerListResult>): void;
  getCertificateIssuersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateIssuerListResult>): void;


  /**
   * @summary List the versions of a certificate.
   *
   * The GetCertificateVersions operation returns the versions of a certificate
   * in the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCertificateVersionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateListResult>>;

  /**
   * @summary List the versions of a certificate.
   *
   * The GetCertificateVersions operation returns the versions of a certificate
   * in the specified key vault. This operation requires the certificates/list
   * permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCertificateVersionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateListResult>;
  getCertificateVersionsNext(nextPageLink: string, callback: ServiceCallback<models.CertificateListResult>): void;
  getCertificateVersionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;


  /**
   * @summary Lists the deleted certificates in the specified vault currently
   * available for recovery.
   *
   * The GetDeletedCertificates operation retrieves the certificates in the
   * current vault which are in a deleted state and ready for recovery or
   * purging. This operation includes deletion-specific information. This
   * operation requires the certificates/get/list permission. This operation can
   * only be enabled on soft-delete enabled vaults.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedCertificateListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedCertificatesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedCertificateListResult>>;

  /**
   * @summary Lists the deleted certificates in the specified vault currently
   * available for recovery.
   *
   * The GetDeletedCertificates operation retrieves the certificates in the
   * current vault which are in a deleted state and ready for recovery or
   * purging. This operation includes deletion-specific information. This
   * operation requires the certificates/get/list permission. This operation can
   * only be enabled on soft-delete enabled vaults.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedCertificateListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedCertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedCertificateListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedCertificatesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedCertificateListResult>;
  getDeletedCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.DeletedCertificateListResult>): void;
  getDeletedCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedCertificateListResult>): void;


  /**
   * List storage accounts managed by the specified key vault. This operation
   * requires the storage/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StorageListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getStorageAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageListResult>>;

  /**
   * List storage accounts managed by the specified key vault. This operation
   * requires the storage/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StorageListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StorageListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StorageListResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getStorageAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageListResult>;
  getStorageAccountsNext(nextPageLink: string, callback: ServiceCallback<models.StorageListResult>): void;
  getStorageAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageListResult>): void;


  /**
   * @summary Lists deleted storage accounts for the specified vault.
   *
   * The Get Deleted Storage Accounts operation returns the storage accounts that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedStorageListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedStorageAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedStorageListResult>>;

  /**
   * @summary Lists deleted storage accounts for the specified vault.
   *
   * The Get Deleted Storage Accounts operation returns the storage accounts that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/list permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedStorageListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedStorageListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedStorageListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedStorageAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedStorageListResult>;
  getDeletedStorageAccountsNext(nextPageLink: string, callback: ServiceCallback<models.DeletedStorageListResult>): void;
  getDeletedStorageAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedStorageListResult>): void;


  /**
   * List storage SAS definitions for the given storage account. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SasDefinitionListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSasDefinitionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SasDefinitionListResult>>;

  /**
   * List storage SAS definitions for the given storage account. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SasDefinitionListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SasDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SasDefinitionListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSasDefinitionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SasDefinitionListResult>;
  getSasDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.SasDefinitionListResult>): void;
  getSasDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SasDefinitionListResult>): void;


  /**
   * @summary Lists deleted SAS definitions for the specified vault and storage
   * account.
   *
   * The Get Deleted Sas Definitions operation returns the SAS definitions that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeletedSasDefinitionListResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDeletedSasDefinitionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedSasDefinitionListResult>>;

  /**
   * @summary Lists deleted SAS definitions for the specified vault and storage
   * account.
   *
   * The Get Deleted Sas Definitions operation returns the SAS definitions that
   * have been deleted for a vault enabled for soft-delete. This operation
   * requires the storage/listsas permission.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeletedSasDefinitionListResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeletedSasDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeletedSasDefinitionListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDeletedSasDefinitionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedSasDefinitionListResult>;
  getDeletedSasDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.DeletedSasDefinitionListResult>): void;
  getDeletedSasDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSasDefinitionListResult>): void;
}

export { KeyVaultClient, models as KeyVaultModels };
