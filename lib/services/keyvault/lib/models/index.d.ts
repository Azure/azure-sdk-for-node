/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The object attributes managed by the KeyVault service.
 */
export interface Attributes {
  /**
   * Determines whether the object is enabled.
   */
  enabled?: boolean;
  /**
   * Not before date in UTC.
   */
  notBefore?: Date;
  /**
   * Expiry date in UTC.
   */
  expires?: Date;
  /**
   * Creation time in UTC.
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   */
  readonly updated?: Date;
}

/**
 * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
 */
export interface JsonWebKey {
  /**
   * Key identifier.
   */
  kid?: string;
  /**
   * JsonWebKey Key Type (kty), as defined in
   * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. Possible values include:
   * 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   */
  kty?: string;
  keyOps?: string[];
  /**
   * RSA modulus.
  */
  n?: Buffer;
  /**
   * RSA public exponent.
  */
  e?: Buffer;
  /**
   * RSA private exponent, or the D component of an EC private key.
  */
  d?: Buffer;
  /**
   * RSA private key parameter.
  */
  dp?: Buffer;
  /**
   * RSA private key parameter.
  */
  dq?: Buffer;
  /**
   * RSA private key parameter.
  */
  qi?: Buffer;
  /**
   * RSA secret prime.
  */
  p?: Buffer;
  /**
   * RSA secret prime, with p < q.
  */
  q?: Buffer;
  /**
   * Symmetric key.
  */
  k?: Buffer;
  /**
   * HSM Token, used with 'Bring Your Own Key'.
  */
  t?: Buffer;
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:
   * 'P-256', 'P-384', 'P-521', 'P-256K'
  */
  crv?: string;
  /**
   * X component of an EC public key.
  */
  x?: Buffer;
  /**
   * Y component of an EC public key.
  */
  y?: Buffer;
}

/**
 * The attributes of a key managed by the key vault service.
*/
export interface KeyAttributes extends Attributes {
  /**
   * Reflects the deletion recovery level currently in effect for keys in the current vault. If it
   * contains 'Purgeable' the key can be permanently deleted by a privileged user; otherwise, only
   * the system can purge the key, at the end of the retention interval. Possible values include:
   * 'Purgeable', 'Recoverable+Purgeable', 'Recoverable', 'Recoverable+ProtectedSubscription'
  */
  readonly recoveryLevel?: string;
}

/**
 * A KeyBundle consisting of a WebKey plus its attributes.
*/
export interface KeyBundle {
  /**
   * The Json web key.
  */
  key?: JsonWebKey;
  /**
   * The key management attributes.
  */
  attributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate,
   * then managed will be true.
  */
  readonly managed?: boolean;
}

/**
 * The key item containing key metadata.
*/
export interface KeyItem {
  /**
   * Key identifier.
  */
  kid?: string;
  /**
   * The key management attributes.
  */
  attributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate,
   * then managed will be true.
  */
  readonly managed?: boolean;
}

/**
 * A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info
*/
export interface DeletedKeyBundle extends KeyBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted key.
  */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The deleted key item containing the deleted key metadata and information about deletion.
*/
export interface DeletedKeyItem extends KeyItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted key.
  */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The secret management attributes.
*/
export interface SecretAttributes extends Attributes {
  /**
   * Reflects the deletion recovery level currently in effect for secrets in the current vault. If
   * it contains 'Purgeable', the secret can be permanently deleted by a privileged user;
   * otherwise, only the system can purge the secret, at the end of the retention interval.
   * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
   * 'Recoverable+ProtectedSubscription'
  */
  readonly recoveryLevel?: string;
}

/**
 * A secret consisting of a value, id and its attributes.
*/
export interface SecretBundle {
  /**
   * The secret value.
  */
  value?: string;
  /**
   * The secret id.
  */
  id?: string;
  /**
   * The content type of the secret.
  */
  contentType?: string;
  /**
   * The secret management attributes.
  */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
  /**
   * If this is a secret backing a KV certificate, then this field specifies the corresponding key
   * backing the KV certificate.
  */
  readonly kid?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a secret backing a
   * certificate, then managed will be true.
  */
  readonly managed?: boolean;
}

/**
 * The secret item containing secret metadata.
*/
export interface SecretItem {
  /**
   * Secret identifier.
  */
  id?: string;
  /**
   * The secret management attributes.
  */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
  */
  contentType?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a key backing a certificate,
   * then managed will be true.
  */
  readonly managed?: boolean;
}

/**
 * A Deleted Secret consisting of its previous id, attributes and its tags, as well as information
 * on when it will be purged.
*/
export interface DeletedSecretBundle extends SecretBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
  */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The deleted secret item containing metadata about the deleted secret.
*/
export interface DeletedSecretItem extends SecretItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
  */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The secret restore parameters.
*/
export interface SecretRestoreParameters {
  /**
   * The backup blob associated with a secret bundle.
  */
  secretBundleBackup: Buffer;
}

/**
 * The secret restore parameters.
*/
export interface StorageRestoreParameters {
  /**
   * The backup blob associated with a storage account.
  */
  storageBundleBackup: Buffer;
}

/**
 * The certificate management attributes.
*/
export interface CertificateAttributes extends Attributes {
  /**
   * Reflects the deletion recovery level currently in effect for certificates in the current
   * vault. If it contains 'Purgeable', the certificate can be permanently deleted by a privileged
   * user; otherwise, only the system can purge the certificate, at the end of the retention
   * interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
   * 'Recoverable+ProtectedSubscription'
  */
  readonly recoveryLevel?: string;
}

/**
 * The certificate item containing certificate metadata.
*/
export interface CertificateItem {
  /**
   * Certificate identifier.
  */
  id?: string;
  /**
   * The certificate management attributes.
  */
  attributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
  /**
   * Thumbprint of the certificate.
  */
  x509Thumbprint?: Buffer;
}

/**
 * The certificate issuer item containing certificate issuer metadata.
*/
export interface CertificateIssuerItem {
  /**
   * Certificate Identifier.
  */
  id?: string;
  /**
   * The issuer provider.
  */
  provider?: string;
}

/**
 * Properties of the key pair backing a certificate.
*/
export interface KeyProperties {
  /**
   * Indicates if the private key can be exported.
  */
  exportable?: boolean;
  /**
   * The type of key pair to be used for the certificate. Possible values include: 'EC', 'EC-HSM',
   * 'RSA', 'RSA-HSM', 'oct'
  */
  keyType?: string;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
  */
  keySize?: number;
  /**
   * Indicates if the same key pair will be used on certificate renewal.
  */
  reuseKey?: boolean;
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:
   * 'P-256', 'P-384', 'P-521', 'P-256K'
  */
  curve?: string;
}

/**
 * Properties of the key backing a certificate.
*/
export interface SecretProperties {
  /**
   * The media type (MIME type).
  */
  contentType?: string;
}

/**
 * The subject alternate names of a X509 object.
*/
export interface SubjectAlternativeNames {
  /**
   * Email addresses.
  */
  emails?: string[];
  /**
   * Domain names.
  */
  dnsNames?: string[];
  /**
   * User principal names.
  */
  upns?: string[];
}

/**
 * Properties of the X509 component of a certificate.
*/
export interface X509CertificateProperties {
  /**
   * The subject name. Should be a valid X509 distinguished Name.
  */
  subject?: string;
  /**
   * The enhanced key usage.
  */
  ekus?: string[];
  /**
   * The subject alternative names.
  */
  subjectAlternativeNames?: SubjectAlternativeNames;
  /**
   * List of key usages.
  */
  keyUsage?: string[];
  /**
   * The duration that the certificate is valid in months.
  */
  validityInMonths?: number;
}

/**
 * A condition to be satisfied for an action to be executed.
*/
export interface Trigger {
  /**
   * Percentage of lifetime at which to trigger. Value should be between 1 and 99.
  */
  lifetimePercentage?: number;
  /**
   * Days before expiry to attempt renewal. Value should be between 1 and validity_in_months
   * multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 *
   * 27).
  */
  daysBeforeExpiry?: number;
}

/**
 * The action that will be executed.
*/
export interface Action {
  /**
   * The type of the action. Possible values include: 'EmailContacts', 'AutoRenew'
  */
  actionType?: string;
}

/**
 * Action and its trigger that will be performed by Key Vault over the lifetime of a certificate.
*/
export interface LifetimeAction {
  /**
   * The condition that will execute the action.
  */
  trigger?: Trigger;
  /**
   * The action that will be executed.
  */
  action?: Action;
}

/**
 * Parameters for the issuer of the X509 component of a certificate.
*/
export interface IssuerParameters {
  /**
   * Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
  */
  name?: string;
  /**
   * Type of certificate to be requested from the issuer provider.
  */
  certificateType?: string;
  /**
   * Indicates if the certificates generated under this policy should be published to certificate
   * transparency logs.
  */
  certificateTransparency?: boolean;
}

/**
 * Management policy for a certificate.
*/
export interface CertificatePolicy {
  /**
   * The certificate id.
  */
  readonly id?: string;
  /**
   * Properties of the key backing a certificate.
  */
  keyProperties?: KeyProperties;
  /**
   * Properties of the secret backing a certificate.
  */
  secretProperties?: SecretProperties;
  /**
   * Properties of the X509 component of a certificate.
  */
  x509CertificateProperties?: X509CertificateProperties;
  /**
   * Actions that will be performed by Key Vault over the lifetime of a certificate.
  */
  lifetimeActions?: LifetimeAction[];
  /**
   * Parameters for the issuer of the X509 component of a certificate.
  */
  issuerParameters?: IssuerParameters;
  /**
   * The certificate attributes.
  */
  attributes?: CertificateAttributes;
}

/**
 * A certificate bundle consists of a certificate (X509) plus its attributes.
*/
export interface CertificateBundle {
  /**
   * The certificate id.
  */
  readonly id?: string;
  /**
   * The key id.
  */
  readonly kid?: string;
  /**
   * The secret id.
  */
  readonly sid?: string;
  /**
   * Thumbprint of the certificate.
  */
  readonly x509Thumbprint?: Buffer;
  /**
   * The management policy.
  */
  readonly policy?: CertificatePolicy;
  /**
   * CER contents of x509 certificate.
  */
  cer?: Buffer;
  /**
   * The content type of the secret.
  */
  contentType?: string;
  /**
   * The certificate attributes.
  */
  attributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
  */
  tags?: { [propertyName: string]: string };
}

/**
 * A Deleted Certificate consisting of its previous id, attributes and its tags, as well as
 * information on when it will be purged.
*/
export interface DeletedCertificateBundle extends CertificateBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted certificate.
  */
  recoveryId?: string;
  /**
   * The time when the certificate is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the certificate was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The deleted certificate item containing metadata about the deleted certificate.
*/
export interface DeletedCertificateItem extends CertificateItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted certificate.
  */
  recoveryId?: string;
  /**
   * The time when the certificate is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the certificate was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The key vault server error.
*/
export interface ErrorModel {
  /**
   * The error code.
  */
  readonly code?: string;
  /**
   * The error message.
  */
  readonly message?: string;
  readonly innerError?: ErrorModel;
}

/**
 * A certificate operation is returned in case of asynchronous requests.
*/
export interface CertificateOperation {
  /**
   * The certificate id.
  */
  readonly id?: string;
  /**
   * Parameters for the issuer of the X509 component of a certificate.
  */
  issuerParameters?: IssuerParameters;
  /**
   * The certificate signing request (CSR) that is being used in the certificate operation.
  */
  csr?: Buffer;
  /**
   * Indicates if cancellation was requested on the certificate operation.
  */
  cancellationRequested?: boolean;
  /**
   * Status of the certificate operation.
  */
  status?: string;
  /**
   * The status details of the certificate operation.
  */
  statusDetails?: string;
  /**
   * Error encountered, if any, during the certificate operation.
  */
  error?: ErrorModel;
  /**
   * Location which contains the result of the certificate operation.
  */
  target?: string;
  /**
   * Identifier for the certificate operation.
  */
  requestId?: string;
}

/**
 * The credentials to be used for the certificate issuer.
*/
export interface IssuerCredentials {
  /**
   * The user name/account name/account id.
  */
  accountId?: string;
  /**
   * The password/secret/account key.
  */
  password?: string;
}

/**
 * Details of the organization administrator of the certificate issuer.
*/
export interface AdministratorDetails {
  /**
   * First name.
  */
  firstName?: string;
  /**
   * Last name.
  */
  lastName?: string;
  /**
   * Email address.
  */
  emailAddress?: string;
  /**
   * Phone number.
  */
  phone?: string;
}

/**
 * Details of the organization of the certificate issuer.
*/
export interface OrganizationDetails {
  /**
   * Id of the organization.
  */
  id?: string;
  /**
   * Details of the organization administrator.
  */
  adminDetails?: AdministratorDetails[];
}

/**
 * The attributes of an issuer managed by the Key Vault service.
*/
export interface IssuerAttributes {
  /**
   * Determines whether the issuer is enabled.
  */
  enabled?: boolean;
  /**
   * Creation time in UTC.
  */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
  */
  readonly updated?: Date;
}

/**
 * The issuer for Key Vault certificate.
*/
export interface IssuerBundle {
  /**
   * Identifier for the issuer object.
  */
  readonly id?: string;
  /**
   * The issuer provider.
  */
  provider?: string;
  /**
   * The credentials to be used for the issuer.
  */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
  */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
  */
  attributes?: IssuerAttributes;
}

/**
 * The contact information for the vault certificates.
*/
export interface Contact {
  /**
   * Email address.
  */
  emailAddress?: string;
  /**
   * Name.
  */
  name?: string;
  /**
   * Phone number.
  */
  phone?: string;
}

/**
 * The contacts for the vault certificates.
*/
export interface Contacts {
  /**
   * Identifier for the contacts collection.
  */
  readonly id?: string;
  /**
   * The contact list for the vault certificates.
  */
  contactList?: Contact[];
}

/**
 * The key create parameters.
*/
export interface KeyCreateParameters {
  /**
   * The type of key to create. For valid values, see JsonWebKeyType. Possible values include:
   * 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
  */
  kty: string;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
  */
  keySize?: number;
  keyOps?: string[];
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:
   * 'P-256', 'P-384', 'P-521', 'P-256K'
  */
  curve?: string;
}

/**
 * The key import parameters.
*/
export interface KeyImportParameters {
  /**
   * Whether to import as a hardware key (HSM) or software key.
  */
  hsm?: boolean;
  /**
   * The Json web key
  */
  key: JsonWebKey;
  /**
   * The key management attributes.
  */
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The key operations parameters.
*/
export interface KeyOperationsParameters {
  /**
   * algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
  */
  algorithm: string;
  value: Buffer;
}

/**
 * The key operations parameters.
*/
export interface KeySignParameters {
  /**
   * The signing/verification algorithm identifier. For more information on possible algorithm
   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',
   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
  */
  algorithm: string;
  value: Buffer;
}

/**
 * The key verify parameters.
*/
export interface KeyVerifyParameters {
  /**
   * The signing/verification algorithm. For more information on possible algorithm types, see
   * JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256',
   * 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
  */
  algorithm: string;
  /**
   * The digest used for signing.
  */
  digest: Buffer;
  /**
   * The signature to be verified.
  */
  signature: Buffer;
}

/**
 * The key update parameters.
*/
export interface KeyUpdateParameters {
  /**
   * Json web key operations. For more information on possible key operations, see
   * JsonWebKeyOperation.
  */
  keyOps?: string[];
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The key restore parameters.
*/
export interface KeyRestoreParameters {
  /**
   * The backup blob associated with a key bundle.
  */
  keyBundleBackup: Buffer;
}

/**
 * The secret set parameters.
*/
export interface SecretSetParameters {
  /**
   * The value of the secret.
  */
  value: string;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
  */
  contentType?: string;
  /**
   * The secret management attributes.
  */
  secretAttributes?: SecretAttributes;
}

/**
 * The secret update parameters.
*/
export interface SecretUpdateParameters {
  /**
   * Type of the secret value such as a password.
  */
  contentType?: string;
  /**
   * The secret management attributes.
  */
  secretAttributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate create parameters.
*/
export interface CertificateCreateParameters {
  /**
   * The management policy for the certificate.
  */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
  */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate import parameters.
*/
export interface CertificateImportParameters {
  /**
   * Base64 encoded representation of the certificate object to import. This certificate needs to
   * contain the private key.
  */
  base64EncodedCertificate: string;
  /**
   * If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
  */
  password?: string;
  /**
   * The management policy for the certificate.
  */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
  */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate update parameters.
*/
export interface CertificateUpdateParameters {
  /**
   * The management policy for the certificate.
  */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
  */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate merge parameters
*/
export interface CertificateMergeParameters {
  /**
   * The certificate or the certificate chain to merge.
  */
  x509Certificates: Buffer[];
  /**
   * The attributes of the certificate (optional).
  */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate issuer set parameters.
*/
export interface CertificateIssuerSetParameters {
  /**
   * The issuer provider.
  */
  provider: string;
  /**
   * The credentials to be used for the issuer.
  */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
  */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
  */
  attributes?: IssuerAttributes;
}

/**
 * The certificate issuer update parameters.
*/
export interface CertificateIssuerUpdateParameters {
  /**
   * The issuer provider.
  */
  provider?: string;
  /**
   * The credentials to be used for the issuer.
  */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
  */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
  */
  attributes?: IssuerAttributes;
}

/**
 * The certificate operation update parameters.
*/
export interface CertificateOperationUpdateParameter {
  /**
   * Indicates if cancellation was requested on the certificate operation.
  */
  cancellationRequested: boolean;
}

/**
 * The key operation result.
*/
export interface KeyOperationResult {
  /**
   * Key identifier
  */
  readonly kid?: string;
  readonly result?: Buffer;
}

/**
 * The key verify result.
*/
export interface KeyVerifyResult {
  /**
   * True if the signature is verified, otherwise false.
  */
  readonly value?: boolean;
}

/**
 * The backup key result, containing the backup blob.
*/
export interface BackupKeyResult {
  /**
   * The backup blob containing the backed up key.
  */
  readonly value?: Buffer;
}

/**
 * The backup secret result, containing the backup blob.
*/
export interface BackupSecretResult {
  /**
   * The backup blob containing the backed up secret.
  */
  readonly value?: Buffer;
}

/**
 * The backup storage result, containing the backup blob.
*/
export interface BackupStorageResult {
  /**
   * The backup blob containing the backed up storage account.
  */
  readonly value?: Buffer;
}

/**
 * The pending certificate signing request result.
*/
export interface PendingCertificateSigningRequestResult {
  /**
   * The pending certificate signing request as Base64 encoded string.
  */
  readonly value?: string;
}

/**
 * The storage account management attributes.
*/
export interface StorageAccountAttributes {
  /**
   * the enabled state of the object.
  */
  enabled?: boolean;
  /**
   * Creation time in UTC.
  */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
  */
  readonly updated?: Date;
  /**
   * Reflects the deletion recovery level currently in effect for storage accounts in the current
   * vault. If it contains 'Purgeable' the storage account can be permanently deleted by a
   * privileged user; otherwise, only the system can purge the storage account, at the end of the
   * retention interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable',
   * 'Recoverable', 'Recoverable+ProtectedSubscription'
  */
  readonly recoveryLevel?: string;
}

/**
 * A Storage account bundle consists of key vault storage account details plus its attributes.
*/
export interface StorageBundle {
  /**
   * The storage account id.
  */
  readonly id?: string;
  /**
   * The storage account resource id.
  */
  readonly resourceId?: string;
  /**
   * The current active storage account key name.
  */
  readonly activeKeyName?: string;
  /**
   * whether keyvault should manage the storage account for the user.
  */
  readonly autoRegenerateKey?: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
  */
  readonly regenerationPeriod?: string;
  /**
   * The storage account attributes.
  */
  readonly attributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
  */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * A deleted storage account bundle consisting of its previous id, attributes and its tags, as well
 * as information on when it will be purged.
*/
export interface DeletedStorageBundle extends StorageBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted storage account.
  */
  recoveryId?: string;
  /**
   * The time when the storage account is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the storage account was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The storage account create parameters.
*/
export interface StorageAccountCreateParameters {
  /**
   * Storage account resource id.
  */
  resourceId: string;
  /**
   * Current active storage account key name.
  */
  activeKeyName: string;
  /**
   * whether keyvault should manage the storage account for the user.
  */
  autoRegenerateKey: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
  */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
  */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The storage account update parameters.
*/
export interface StorageAccountUpdateParameters {
  /**
   * The current active storage account key name.
  */
  activeKeyName?: string;
  /**
   * whether keyvault should manage the storage account for the user.
  */
  autoRegenerateKey?: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
  */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
  */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The storage account key regenerate parameters.
*/
export interface StorageAccountRegenerteKeyParameters {
  /**
   * The storage account key name.
  */
  keyName: string;
}

/**
 * The storage account item containing storage account metadata.
*/
export interface StorageAccountItem {
  /**
   * Storage identifier.
  */
  readonly id?: string;
  /**
   * Storage account resource Id.
  */
  readonly resourceId?: string;
  /**
   * The storage account management attributes.
  */
  readonly attributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * The deleted storage account item containing metadata about the deleted storage account.
*/
export interface DeletedStorageAccountItem extends StorageAccountItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted storage account.
  */
  recoveryId?: string;
  /**
   * The time when the storage account is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the storage account was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The SAS definition management attributes.
*/
export interface SasDefinitionAttributes {
  /**
   * the enabled state of the object.
  */
  enabled?: boolean;
  /**
   * Creation time in UTC.
  */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
  */
  readonly updated?: Date;
  /**
   * Reflects the deletion recovery level currently in effect for SAS definitions in the current
   * vault. If it contains 'Purgeable' the SAS definition can be permanently deleted by a
   * privileged user; otherwise, only the system can purge the SAS definition, at the end of the
   * retention interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable',
   * 'Recoverable', 'Recoverable+ProtectedSubscription'
  */
  readonly recoveryLevel?: string;
}

/**
 * A SAS definition bundle consists of key vault SAS definition details plus its attributes.
*/
export interface SasDefinitionBundle {
  /**
   * The SAS definition id.
  */
  readonly id?: string;
  /**
   * Storage account SAS definition secret id.
  */
  readonly secretId?: string;
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to
   * the SAS definition will have the same properties as the template.
  */
  readonly templateUri?: string;
  /**
   * The type of SAS token the SAS definition will create. Possible values include: 'account',
   * 'service'
  */
  readonly sasType?: string;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
  */
  readonly validityPeriod?: string;
  /**
   * The SAS definition attributes.
  */
  readonly attributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
  */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * A deleted SAS definition bundle consisting of its previous id, attributes and its tags, as well
 * as information on when it will be purged.
*/
export interface DeletedSasDefinitionBundle extends SasDefinitionBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted SAS definition.
  */
  recoveryId?: string;
  /**
   * The time when the SAS definition is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the SAS definition was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The SAS definition item containing storage SAS definition metadata.
*/
export interface SasDefinitionItem {
  /**
   * The storage SAS identifier.
  */
  readonly id?: string;
  /**
   * The storage account SAS definition secret id.
  */
  readonly secretId?: string;
  /**
   * The SAS definition management attributes.
  */
  readonly attributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * The deleted SAS definition item containing metadata about the deleted SAS definition.
*/
export interface DeletedSasDefinitionItem extends SasDefinitionItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted SAS definition.
  */
  recoveryId?: string;
  /**
   * The time when the SAS definition is scheduled to be purged, in UTC
  */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the SAS definition was deleted, in UTC
  */
  readonly deletedDate?: Date;
}

/**
 * The SAS definition create parameters.
*/
export interface SasDefinitionCreateParameters {
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to
   * the SAS definition will have the same properties as the template.
  */
  templateUri: string;
  /**
   * The type of SAS token the SAS definition will create. Possible values include: 'account',
   * 'service'
  */
  sasType: string;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
  */
  validityPeriod: string;
  /**
   * The attributes of the SAS definition.
  */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The SAS definition update parameters.
*/
export interface SasDefinitionUpdateParameters {
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to
   * the SAS definition will have the same properties as the template.
  */
  templateUri?: string;
  /**
   * The type of SAS token the SAS definition will create. Possible values include: 'account',
   * 'service'
  */
  sasType?: string;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
  */
  validityPeriod?: string;
  /**
   * The attributes of the SAS definition.
  */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The key vault error exception.
*/
export interface KeyVaultError {
  readonly error?: ErrorModel;
}

/**
 * The certificate restore parameters.
*/
export interface CertificateRestoreParameters {
  /**
   * The backup blob associated with a certificate bundle.
  */
  certificateBundleBackup: Buffer;
}

/**
 * The backup certificate result, containing the backup blob.
*/
export interface BackupCertificateResult {
  /**
   * The backup blob containing the backed up certificate.
  */
  readonly value?: Buffer;
}

/**
 * The key list result.
*/
export interface KeyListResult extends Array<KeyItem> {
  /**
   * The URL to get the next set of keys.
  */
  readonly nextLink?: string;
}

/**
 * A list of keys that have been deleted in this vault.
*/
export interface DeletedKeyListResult extends Array<DeletedKeyItem> {
  /**
   * The URL to get the next set of deleted keys.
  */
  readonly nextLink?: string;
}

/**
 * The secret list result.
*/
export interface SecretListResult extends Array<SecretItem> {
  /**
   * The URL to get the next set of secrets.
  */
  readonly nextLink?: string;
}

/**
 * The deleted secret list result
*/
export interface DeletedSecretListResult extends Array<DeletedSecretItem> {
  /**
   * The URL to get the next set of deleted secrets.
  */
  readonly nextLink?: string;
}

/**
 * The certificate list result.
*/
export interface CertificateListResult extends Array<CertificateItem> {
  /**
   * The URL to get the next set of certificates.
  */
  readonly nextLink?: string;
}

/**
 * The certificate issuer list result.
*/
export interface CertificateIssuerListResult extends Array<CertificateIssuerItem> {
  /**
   * The URL to get the next set of certificate issuers.
  */
  readonly nextLink?: string;
}

/**
 * A list of certificates that have been deleted in this vault.
*/
export interface DeletedCertificateListResult extends Array<DeletedCertificateItem> {
  /**
   * The URL to get the next set of deleted certificates.
  */
  readonly nextLink?: string;
}

/**
 * The storage accounts list result.
*/
export interface StorageListResult extends Array<StorageAccountItem> {
  /**
   * The URL to get the next set of storage accounts.
  */
  readonly nextLink?: string;
}

/**
 * The deleted storage account list result
*/
export interface DeletedStorageListResult extends Array<DeletedStorageAccountItem> {
  /**
   * The URL to get the next set of deleted storage accounts.
  */
  readonly nextLink?: string;
}

/**
 * The storage account SAS definition list result.
*/
export interface SasDefinitionListResult extends Array<SasDefinitionItem> {
  /**
   * The URL to get the next set of SAS definitions.
  */
  readonly nextLink?: string;
}

/**
 * The deleted SAS definition list result
*/
export interface DeletedSasDefinitionListResult extends Array<DeletedSasDefinitionItem> {
  /**
   * The URL to get the next set of deleted SAS definitions.
  */
  readonly nextLink?: string;
}
