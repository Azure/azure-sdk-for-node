/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Locations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageImportExportManagementClient.
 */
export interface Locations {


    /**
     * Returns a list of locations to which you can ship the disks associated with
     * an import or export job. A location is a Microsoft data center region.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocationsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocationsResponse>>;

    /**
     * Returns a list of locations to which you can ship the disks associated with
     * an import or export job. A location is a Microsoft data center region.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocationsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocationsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocationsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LocationsResponse>;
    list(callback: ServiceCallback<models.LocationsResponse>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocationsResponse>): void;


    /**
     * Returns the details about a location to which you can ship the disks
     * associated with an import or export job. A location is an Azure region.
     *
     * @param {string} locationName The name of the location. For example, West US
     * or westus.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Location>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Location>>;

    /**
     * Returns the details about a location to which you can ship the disks
     * associated with an import or export job. A location is an Azure region.
     *
     * @param {string} locationName The name of the location. For example, West US
     * or westus.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Location} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Location} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Location} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Location>;
    get(locationName: string, callback: ServiceCallback<models.Location>): void;
    get(locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Location>): void;
}

/**
 * @class
 * Jobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageImportExportManagementClient.
 */
export interface Jobs {


    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListJobsResponse>>;

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListJobsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListJobsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListJobsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListJobsResponse>;
    listBySubscription(callback: ServiceCallback<models.ListJobsResponse>): void;
    listBySubscription(options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListJobsResponse>): void;


    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListJobsResponse>>;

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] An integer value that specifies how many jobs
     * at most should be returned. The value cannot exceed 100.
     *
     * @param {string} [options.filter] Can be used to restrict the results to
     * certain conditions.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListJobsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListJobsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListJobsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ListJobsResponse>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ListJobsResponse>): void;
    listByResourceGroup(resourceGroupName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListJobsResponse>): void;


    /**
     * Gets information about an existing job.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(jobName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobResponse>>;

    /**
     * Gets information about an existing job.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(jobName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobResponse>;
    get(jobName: string, resourceGroupName: string, callback: ServiceCallback<models.JobResponse>): void;
    get(jobName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobResponse>): void;


    /**
     * Updates specific properties of a job. You can call this operation to notify
     * the Import/Export service that the hard drives comprising the import or
     * export job have been shipped to the Microsoft data center. It can also be
     * used to cancel an existing job.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} body The parameters to update in the job
     *
     * @param {object} [body.tags] Specifies the tags that will be assigned to the
     * job
     *
     * @param {boolean} [body.cancelRequested] If specified, the value must be
     * true. The service will attempt to cancel the job.
     *
     * @param {string} [body.state] If specified, the value must be Shipping, which
     * tells the Import/Export service that the package for the job has been
     * shipped. The ReturnAddress and DeliveryPackage properties must have been set
     * either in this request or in a previous request, otherwise the request will
     * fail.
     *
     * @param {object} [body.returnAddress] Specifies the return address
     * information for the job.
     *
     * @param {string} body.returnAddress.recipientName The name of the recipient
     * who will receive the hard drives when they are returned.
     *
     * @param {string} body.returnAddress.streetAddress1 The first line of the
     * street address to use when returning the drives.
     *
     * @param {string} [body.returnAddress.streetAddress2] The second line of the
     * street address to use when returning the drives.
     *
     * @param {string} body.returnAddress.city The city name to use when returning
     * the drives.
     *
     * @param {string} [body.returnAddress.stateOrProvince] The state or province
     * to use when returning the drives.
     *
     * @param {string} body.returnAddress.postalCode The postal code to use when
     * returning the drives.
     *
     * @param {string} body.returnAddress.countryOrRegion The country or region to
     * use when returning the drives.
     *
     * @param {string} body.returnAddress.phone Phone number of the recipient of
     * the returned drives.
     *
     * @param {string} body.returnAddress.email Email address of the recipient of
     * the returned drives.
     *
     * @param {object} [body.returnShipping] Specifies the return carrier and
     * customer's account with the carrier.
     *
     * @param {string} body.returnShipping.carrierName The carrier's name.
     *
     * @param {string} body.returnShipping.carrierAccountNumber The customer's
     * account number with the carrier.
     *
     * @param {object} [body.deliveryPackage] Contains information about the
     * package being shipped by the customer to the Microsoft data center.
     *
     * @param {string} body.deliveryPackage.carrierName The name of the carrier
     * that is used to ship the import or export drives.
     *
     * @param {string} body.deliveryPackage.trackingNumber The tracking number of
     * the package.
     *
     * @param {number} body.deliveryPackage.driveCount The number of drives
     * included in the package.
     *
     * @param {string} body.deliveryPackage.shipDate The date when the package is
     * shipped.
     *
     * @param {string} [body.logLevel] Indicates whether error logging or verbose
     * logging is enabled.
     *
     * @param {boolean} [body.backupDriveManifest] Indicates whether the manifest
     * files on the drives should be copied to block blobs.
     *
     * @param {array} [body.driveList] List of drives that comprise the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(jobName: string, resourceGroupName: string, body: models.UpdateJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobResponse>>;

    /**
     * Updates specific properties of a job. You can call this operation to notify
     * the Import/Export service that the hard drives comprising the import or
     * export job have been shipped to the Microsoft data center. It can also be
     * used to cancel an existing job.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} body The parameters to update in the job
     *
     * @param {object} [body.tags] Specifies the tags that will be assigned to the
     * job
     *
     * @param {boolean} [body.cancelRequested] If specified, the value must be
     * true. The service will attempt to cancel the job.
     *
     * @param {string} [body.state] If specified, the value must be Shipping, which
     * tells the Import/Export service that the package for the job has been
     * shipped. The ReturnAddress and DeliveryPackage properties must have been set
     * either in this request or in a previous request, otherwise the request will
     * fail.
     *
     * @param {object} [body.returnAddress] Specifies the return address
     * information for the job.
     *
     * @param {string} body.returnAddress.recipientName The name of the recipient
     * who will receive the hard drives when they are returned.
     *
     * @param {string} body.returnAddress.streetAddress1 The first line of the
     * street address to use when returning the drives.
     *
     * @param {string} [body.returnAddress.streetAddress2] The second line of the
     * street address to use when returning the drives.
     *
     * @param {string} body.returnAddress.city The city name to use when returning
     * the drives.
     *
     * @param {string} [body.returnAddress.stateOrProvince] The state or province
     * to use when returning the drives.
     *
     * @param {string} body.returnAddress.postalCode The postal code to use when
     * returning the drives.
     *
     * @param {string} body.returnAddress.countryOrRegion The country or region to
     * use when returning the drives.
     *
     * @param {string} body.returnAddress.phone Phone number of the recipient of
     * the returned drives.
     *
     * @param {string} body.returnAddress.email Email address of the recipient of
     * the returned drives.
     *
     * @param {object} [body.returnShipping] Specifies the return carrier and
     * customer's account with the carrier.
     *
     * @param {string} body.returnShipping.carrierName The carrier's name.
     *
     * @param {string} body.returnShipping.carrierAccountNumber The customer's
     * account number with the carrier.
     *
     * @param {object} [body.deliveryPackage] Contains information about the
     * package being shipped by the customer to the Microsoft data center.
     *
     * @param {string} body.deliveryPackage.carrierName The name of the carrier
     * that is used to ship the import or export drives.
     *
     * @param {string} body.deliveryPackage.trackingNumber The tracking number of
     * the package.
     *
     * @param {number} body.deliveryPackage.driveCount The number of drives
     * included in the package.
     *
     * @param {string} body.deliveryPackage.shipDate The date when the package is
     * shipped.
     *
     * @param {string} [body.logLevel] Indicates whether error logging or verbose
     * logging is enabled.
     *
     * @param {boolean} [body.backupDriveManifest] Indicates whether the manifest
     * files on the drives should be copied to block blobs.
     *
     * @param {array} [body.driveList] List of drives that comprise the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(jobName: string, resourceGroupName: string, body: models.UpdateJobParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobResponse>;
    update(jobName: string, resourceGroupName: string, body: models.UpdateJobParameters, callback: ServiceCallback<models.JobResponse>): void;
    update(jobName: string, resourceGroupName: string, body: models.UpdateJobParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobResponse>): void;


    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} body The parameters used for creating the job
     *
     * @param {string} [body.location] Specifies the supported Azure location where
     * the job should be created
     *
     * @param {object} [body.tags] Specifies the tags that will be assigned to the
     * job.
     *
     * @param {object} [body.properties] Specifies the job properties
     *
     * @param {string} [body.properties.storageAccountId] The resource identifier
     * of the storage account where data will be imported to or exported from.
     *
     * @param {string} [body.properties.jobType] The type of job
     *
     * @param {object} [body.properties.returnAddress] Specifies the return address
     * information for the job.
     *
     * @param {string} body.properties.returnAddress.recipientName The name of the
     * recipient who will receive the hard drives when they are returned.
     *
     * @param {string} body.properties.returnAddress.streetAddress1 The first line
     * of the street address to use when returning the drives.
     *
     * @param {string} [body.properties.returnAddress.streetAddress2] The second
     * line of the street address to use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.city The city name to use when
     * returning the drives.
     *
     * @param {string} [body.properties.returnAddress.stateOrProvince] The state or
     * province to use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.postalCode The postal code to
     * use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.countryOrRegion The country or
     * region to use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.phone Phone number of the
     * recipient of the returned drives.
     *
     * @param {string} body.properties.returnAddress.email Email address of the
     * recipient of the returned drives.
     *
     * @param {object} [body.properties.returnShipping] Specifies the return
     * carrier and customer's account with the carrier.
     *
     * @param {string} body.properties.returnShipping.carrierName The carrier's
     * name.
     *
     * @param {string} body.properties.returnShipping.carrierAccountNumber The
     * customer's account number with the carrier.
     *
     * @param {object} [body.properties.shippingInformation] Contains information
     * about the Microsoft datacenter to which the drives should be shipped.
     *
     * @param {string} body.properties.shippingInformation.recipientName The name
     * of the recipient who will receive the hard drives when they are returned.
     *
     * @param {string} body.properties.shippingInformation.streetAddress1 The first
     * line of the street address to use when returning the drives.
     *
     * @param {string} [body.properties.shippingInformation.streetAddress2] The
     * second line of the street address to use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.city The city name to
     * use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.stateOrProvince The
     * state or province to use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.postalCode The postal
     * code to use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.countryOrRegion The
     * country or region to use when returning the drives.
     *
     * @param {string} [body.properties.shippingInformation.phone] Phone number of
     * the recipient of the returned drives.
     *
     * @param {object} [body.properties.deliveryPackage] Contains information about
     * the package being shipped by the customer to the Microsoft data center.
     *
     * @param {object} [body.properties.returnPackage] Contains information about
     * the package being shipped from the Microsoft data center to the customer to
     * return the drives. The format is the same as the deliveryPackage property
     * above. This property is not included if the drives have not yet been
     * returned.
     *
     * @param {string} body.properties.returnPackage.carrierName The name of the
     * carrier that is used to ship the import or export drives.
     *
     * @param {string} body.properties.returnPackage.trackingNumber The tracking
     * number of the package.
     *
     * @param {number} body.properties.returnPackage.driveCount The number of
     * drives included in the package.
     *
     * @param {string} body.properties.returnPackage.shipDate The date when the
     * package is shipped.
     *
     * @param {string} [body.properties.diagnosticsPath] The virtual blob directory
     * to which the copy logs and backups of drive manifest files (if enabled) will
     * be stored.
     *
     * @param {string} [body.properties.logLevel] Default value is Error. Indicates
     * whether error logging or verbose logging will be enabled.
     *
     * @param {boolean} [body.properties.backupDriveManifest] Default value is
     * false. Indicates whether the manifest files on the drives should be copied
     * to block blobs.
     *
     * @param {string} [body.properties.state] Current state of the job.
     *
     * @param {boolean} [body.properties.cancelRequested] Indicates whether a
     * request has been submitted to cancel the job.
     *
     * @param {number} [body.properties.percentComplete] Overall percentage
     * completed for the job.
     *
     * @param {string} [body.properties.incompleteBlobListUri] A blob path that
     * points to a block blob containing a list of blob names that were not
     * exported due to insufficient drive space. If all blobs were exported
     * successfully, then this element is not included in the response.
     *
     * @param {array} [body.properties.driveList] List of up to ten drives that
     * comprise the job. The drive list is a required element for an import job; it
     * is not specified for export jobs.
     *
     * @param {object} [body.properties.exportProperty] A property containing
     * information about the blobs to be exported for an export job. This property
     * is included for export jobs only.
     *
     * @param {array} [body.properties.exportProperty.blobPath] A collection of
     * blob-path strings.
     *
     * @param {array} [body.properties.exportProperty.blobPathPrefix] A collection
     * of blob-prefix strings.
     *
     * @param {string} [body.properties.exportProperty.blobListblobPath] The
     * relative URI to the block blob that contains the list of blob paths or blob
     * path prefixes as defined above, beginning with the container name. If the
     * blob is in root container, the URI must begin with $root.
     *
     * @param {string} [body.properties.provisioningState] Specifies the
     * provisioning state of the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientTenantId] The tenant ID of the client making
     * the request.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(jobName: string, resourceGroupName: string, body: models.PutJobParameters, options?: { clientTenantId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobResponse>>;

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} body The parameters used for creating the job
     *
     * @param {string} [body.location] Specifies the supported Azure location where
     * the job should be created
     *
     * @param {object} [body.tags] Specifies the tags that will be assigned to the
     * job.
     *
     * @param {object} [body.properties] Specifies the job properties
     *
     * @param {string} [body.properties.storageAccountId] The resource identifier
     * of the storage account where data will be imported to or exported from.
     *
     * @param {string} [body.properties.jobType] The type of job
     *
     * @param {object} [body.properties.returnAddress] Specifies the return address
     * information for the job.
     *
     * @param {string} body.properties.returnAddress.recipientName The name of the
     * recipient who will receive the hard drives when they are returned.
     *
     * @param {string} body.properties.returnAddress.streetAddress1 The first line
     * of the street address to use when returning the drives.
     *
     * @param {string} [body.properties.returnAddress.streetAddress2] The second
     * line of the street address to use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.city The city name to use when
     * returning the drives.
     *
     * @param {string} [body.properties.returnAddress.stateOrProvince] The state or
     * province to use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.postalCode The postal code to
     * use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.countryOrRegion The country or
     * region to use when returning the drives.
     *
     * @param {string} body.properties.returnAddress.phone Phone number of the
     * recipient of the returned drives.
     *
     * @param {string} body.properties.returnAddress.email Email address of the
     * recipient of the returned drives.
     *
     * @param {object} [body.properties.returnShipping] Specifies the return
     * carrier and customer's account with the carrier.
     *
     * @param {string} body.properties.returnShipping.carrierName The carrier's
     * name.
     *
     * @param {string} body.properties.returnShipping.carrierAccountNumber The
     * customer's account number with the carrier.
     *
     * @param {object} [body.properties.shippingInformation] Contains information
     * about the Microsoft datacenter to which the drives should be shipped.
     *
     * @param {string} body.properties.shippingInformation.recipientName The name
     * of the recipient who will receive the hard drives when they are returned.
     *
     * @param {string} body.properties.shippingInformation.streetAddress1 The first
     * line of the street address to use when returning the drives.
     *
     * @param {string} [body.properties.shippingInformation.streetAddress2] The
     * second line of the street address to use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.city The city name to
     * use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.stateOrProvince The
     * state or province to use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.postalCode The postal
     * code to use when returning the drives.
     *
     * @param {string} body.properties.shippingInformation.countryOrRegion The
     * country or region to use when returning the drives.
     *
     * @param {string} [body.properties.shippingInformation.phone] Phone number of
     * the recipient of the returned drives.
     *
     * @param {object} [body.properties.deliveryPackage] Contains information about
     * the package being shipped by the customer to the Microsoft data center.
     *
     * @param {object} [body.properties.returnPackage] Contains information about
     * the package being shipped from the Microsoft data center to the customer to
     * return the drives. The format is the same as the deliveryPackage property
     * above. This property is not included if the drives have not yet been
     * returned.
     *
     * @param {string} body.properties.returnPackage.carrierName The name of the
     * carrier that is used to ship the import or export drives.
     *
     * @param {string} body.properties.returnPackage.trackingNumber The tracking
     * number of the package.
     *
     * @param {number} body.properties.returnPackage.driveCount The number of
     * drives included in the package.
     *
     * @param {string} body.properties.returnPackage.shipDate The date when the
     * package is shipped.
     *
     * @param {string} [body.properties.diagnosticsPath] The virtual blob directory
     * to which the copy logs and backups of drive manifest files (if enabled) will
     * be stored.
     *
     * @param {string} [body.properties.logLevel] Default value is Error. Indicates
     * whether error logging or verbose logging will be enabled.
     *
     * @param {boolean} [body.properties.backupDriveManifest] Default value is
     * false. Indicates whether the manifest files on the drives should be copied
     * to block blobs.
     *
     * @param {string} [body.properties.state] Current state of the job.
     *
     * @param {boolean} [body.properties.cancelRequested] Indicates whether a
     * request has been submitted to cancel the job.
     *
     * @param {number} [body.properties.percentComplete] Overall percentage
     * completed for the job.
     *
     * @param {string} [body.properties.incompleteBlobListUri] A blob path that
     * points to a block blob containing a list of blob names that were not
     * exported due to insufficient drive space. If all blobs were exported
     * successfully, then this element is not included in the response.
     *
     * @param {array} [body.properties.driveList] List of up to ten drives that
     * comprise the job. The drive list is a required element for an import job; it
     * is not specified for export jobs.
     *
     * @param {object} [body.properties.exportProperty] A property containing
     * information about the blobs to be exported for an export job. This property
     * is included for export jobs only.
     *
     * @param {array} [body.properties.exportProperty.blobPath] A collection of
     * blob-path strings.
     *
     * @param {array} [body.properties.exportProperty.blobPathPrefix] A collection
     * of blob-prefix strings.
     *
     * @param {string} [body.properties.exportProperty.blobListblobPath] The
     * relative URI to the block blob that contains the list of blob paths or blob
     * path prefixes as defined above, beginning with the container name. If the
     * blob is in root container, the URI must begin with $root.
     *
     * @param {string} [body.properties.provisioningState] Specifies the
     * provisioning state of the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.clientTenantId] The tenant ID of the client making
     * the request.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(jobName: string, resourceGroupName: string, body: models.PutJobParameters, options?: { clientTenantId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobResponse>;
    create(jobName: string, resourceGroupName: string, body: models.PutJobParameters, callback: ServiceCallback<models.JobResponse>): void;
    create(jobName: string, resourceGroupName: string, body: models.PutJobParameters, options: { clientTenantId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobResponse>): void;


    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can
     * be deleted.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(jobName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can
     * be deleted.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(jobName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(jobName: string, resourceGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(jobName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListJobsResponse>>;

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListJobsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListJobsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListJobsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListJobsResponse>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.ListJobsResponse>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListJobsResponse>): void;


    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListJobsResponse>>;

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListJobsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListJobsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListJobsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListJobsResponse>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ListJobsResponse>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListJobsResponse>): void;
}

/**
 * @class
 * BitLockerKeys
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageImportExportManagementClient.
 */
export interface BitLockerKeys {


    /**
     * Returns the BitLocker Keys for all drives in the specified job.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetBitLockerKeysResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(jobName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetBitLockerKeysResponse>>;

    /**
     * Returns the BitLocker Keys for all drives in the specified job.
     *
     * @param {string} jobName The name of the import/export job.
     *
     * @param {string} resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetBitLockerKeysResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetBitLockerKeysResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetBitLockerKeysResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(jobName: string, resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetBitLockerKeysResponse>;
    list(jobName: string, resourceGroupName: string, callback: ServiceCallback<models.GetBitLockerKeysResponse>): void;
    list(jobName: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetBitLockerKeysResponse>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageImportExportManagementClient.
 */
export interface Operations {


    /**
     * Returns the list of operations supported by the import/export resource
     * provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListOperationsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListOperationsResponse>>;

    /**
     * Returns the list of operations supported by the import/export resource
     * provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListOperationsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListOperationsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListOperationsResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListOperationsResponse>;
    list(callback: ServiceCallback<models.ListOperationsResponse>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListOperationsResponse>): void;
}
