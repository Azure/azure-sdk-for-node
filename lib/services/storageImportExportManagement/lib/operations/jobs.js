/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Gets all the active and completed import/export jobs in a subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.top] An integer value that specifies how many jobs
 * at most should be returned. The value cannot exceed 100.
 *
 * @param {string} [options.filter] Can be used to restrict the results to
 * certain conditions. The following possible values can be used with $filter:
 * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
 * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
 * combination of the above, for example: $filter=type eq 'Import' and state eq
 * 'Transferring'. Valid values for type are Import and Export. Valid values
 * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
 * and Completed.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (top !== null && top !== undefined) {
      if (top > 100)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMaximum": 100');
      }
      if (top < 1)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMinimum": 1');
      }
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns all active and completed import/export jobs in a resource group.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.top] An integer value that specifies how many jobs
 * at most should be returned. The value cannot exceed 100.
 *
 * @param {string} [options.filter] Can be used to restrict the results to
 * certain conditions. The following possible values can be used with $filter:
 * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
 * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
 * combination of the above, for example: $filter=type eq 'Import' and state eq
 * 'Transferring'. Valid values for type are Import and Export. Valid values
 * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
 * and Completed.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (top !== null && top !== undefined) {
      if (top > 100)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMaximum": 100');
      }
      if (top < 1)
      {
        throw new Error('"top" should satisfy the constraint - "InclusiveMinimum": 1');
      }
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets information about an existing import/export job.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Job} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, jobName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Job']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates specific properties of the import/export job. You can call this
 * operation to notify the Import/Export service that the hard drives
 * comprising the import or export job have been shipped to the Microsoft data
 * center. It can also be used to cancel an existing job.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {object} jobProperties Import/export job properties that need to be
 * updated.
 *
 * @param {object} [jobProperties.tags]
 *
 * @param {boolean} [jobProperties.cancelRequested] If specified, the value
 * must be true. The service will attempt to cancel the job.
 *
 * @param {string} [jobProperties.state] If specified, the value must be
 * Shipping, which tells the Import/Export service that the package for the job
 * has been shipped. The ReturnAddress and DeliveryPackage properties must have
 * been set either in this request or in a previous request, otherwise the
 * request will fail. Possible values include: 'Shipping'
 *
 * @param {object} [jobProperties.returnAddress] Specifies the return address
 * information for the job.
 *
 * @param {string} jobProperties.returnAddress.recipientName The name of the
 * recipient who will receive the hard drives when they are returned.
 *
 * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
 * the street address to use when returning the drives.
 *
 * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
 * of the street address to use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.city The city name to use when
 * returning the drives.
 *
 * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
 * province to use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.postalCode The postal code to
 * use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.countryOrRegion The country or
 * region to use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.phone Phone number of the
 * recipient of the returned drives.
 *
 * @param {string} jobProperties.returnAddress.email Email address of the
 * recipient of the returned drives.
 *
 * @param {object} [jobProperties.returnShipping] Specifies the return carrier
 * and customer's account with the carrier.
 *
 * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
 *
 * @param {string} jobProperties.returnShipping.carrierAccountNumber The
 * customer's account number with the carrier.
 *
 * @param {object} [jobProperties.deliveryPackage] Contains information about
 * the package being shipped by the customer to the Microsoft data center.
 *
 * @param {string} jobProperties.deliveryPackage.carrierName The name of the
 * carrier that is used to ship the import or export drives.
 *
 * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
 * number of the package.
 *
 * @param {number} jobProperties.deliveryPackage.driveCount The number of
 * drives included in the package.
 *
 * @param {string} jobProperties.deliveryPackage.shipDate The date the package
 * is shipped.
 *
 * @param {string} [jobProperties.logLevel] Indicates whether error logging or
 * verbose logging is enabled.
 *
 * @param {boolean} [jobProperties.backupDriveManifest] Indicates whether the
 * manifest files on the drives should be copied to block blobs.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Job} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(resourceGroupName, jobName, jobProperties, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
    if (jobProperties === null || jobProperties === undefined) {
      throw new Error('jobProperties cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (jobProperties !== null && jobProperties !== undefined) {
      let requestModelMapper = new client.models['MutableJob']().mapper();
      requestModel = client.serialize(requestModelMapper, jobProperties, 'jobProperties');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(jobProperties, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Job']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates a new import/export job or updates an existing import/export job in
 * the specified subscription.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {object} jobProperties Properties of the import/export job that need
 * to be specified during creation.
 *
 * @param {string} jobProperties.storageAccountId The resource identifier of
 * the storage account where data will be imported to or exported from.
 *
 * @param {string} [jobProperties.containerSas] The container shared access
 * signature (SAS) to be used to import or export data to or from the storage
 * account.
 *
 * @param {string} jobProperties.jobType The type of job: Import or Export.
 * Possible values include: 'Import', 'Export'
 *
 * @param {object} jobProperties.returnAddress Specifies the return address
 * information for the job.
 *
 * @param {string} jobProperties.returnAddress.recipientName The name of the
 * recipient who will receive the hard drives when they are returned.
 *
 * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
 * the street address to use when returning the drives.
 *
 * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
 * of the street address to use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.city The city name to use when
 * returning the drives.
 *
 * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
 * province to use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.postalCode The postal code to
 * use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.countryOrRegion The country or
 * region to use when returning the drives.
 *
 * @param {string} jobProperties.returnAddress.phone Phone number of the
 * recipient of the returned drives.
 *
 * @param {string} jobProperties.returnAddress.email Email address of the
 * recipient of the returned drives.
 *
 * @param {object} jobProperties.returnShipping Specifies the return carrier
 * and customer's account with the carrier.
 *
 * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
 *
 * @param {string} jobProperties.returnShipping.carrierAccountNumber The
 * customer's account number with the carrier.
 *
 * @param {object} [jobProperties.deliveryPackage] Contains information about
 * the package being shipped by the customer to the Microsoft data center.
 *
 * @param {string} jobProperties.deliveryPackage.carrierName The name of the
 * carrier that is used to ship the import or export drives.
 *
 * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
 * number of the package.
 *
 * @param {number} jobProperties.deliveryPackage.driveCount The number of
 * drives included in the package.
 *
 * @param {string} jobProperties.deliveryPackage.shipDate The date the package
 * is shipped.
 *
 * @param {string} jobProperties.diagnosticsPath The virtual blob directory to
 * which the copy logs and backups of drive manifest files (if enabled) will be
 * stored.
 *
 * @param {string} [jobProperties.logLevel] Default value is Error. Indicates
 * whether error logging or verbose logging will be enabled. Possible values
 * include: 'Error', 'Verbose'
 *
 * @param {boolean} [jobProperties.backupDriveManifest] Default value is false.
 * Indicates whether the manifest files on the drives should be copied to block
 * blobs.
 *
 * @param {boolean} [jobProperties.cancelRequested] Indicates whether a request
 * has been submitted to cancel the job.
 *
 * @param {array} [jobProperties.driveList] List of up to ten drives that
 * comprise the job. The drive list is a required element for an import job; it
 * is not specified for export jobs.
 *
 * @param {object} [jobProperties.exportProperty] A property containing
 * information about the blobs to be exported for an export job. This property
 * is included for export jobs only.
 *
 * @param {array} [jobProperties.exportProperty.blobPath] A collection of
 * blob-path strings.
 *
 * @param {array} [jobProperties.exportProperty.blobPathPrefix] A collection of
 * blob-prefix strings.
 *
 * @param {string} [jobProperties.exportProperty.blobListblobPath] The relative
 * URI to the block blob that contains the list of blob paths or blob path
 * prefixes as defined above, beginning with the container name. If the blob is
 * in the root container, the URI must begin with $root.
 *
 * @param {string} jobProperties.location Specifies the Azure location where
 * the job is created.
 *
 * @param {object} [jobProperties.tags] Specifies the tags that are assigned to
 * the job.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Job} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, jobName, jobProperties, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
    if (jobProperties === null || jobProperties === undefined) {
      throw new Error('jobProperties cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (jobProperties !== null && jobProperties !== undefined) {
      let requestModelMapper = new client.models['Job']().mapper();
      requestModel = client.serialize(requestModelMapper, jobProperties, 'jobProperties');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(jobProperties, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Job']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Job']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes an existing import/export job. Only import/export jobs in the
 * Creating or Completed states can be deleted.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, jobName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Moves the specified import/export jobs from the resource group to a target
 * resource group. The target resource group may be in a different
 * subscription.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {object} moveJobsParameters Parameters to be provided to move a job
 * from one resource group to another.
 *
 * @param {string} moveJobsParameters.targetResourceGroup Specifies the target
 * resource group ID to move the jobs to.
 *
 * @param {array} moveJobsParameters.resources Specifies the list of jobs to
 * move to the target resource group. The jobs must be from the current
 * resource group from the request URL.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _move(resourceGroupName, moveJobsParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (moveJobsParameters === null || moveJobsParameters === undefined) {
      throw new Error('moveJobsParameters cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/moveResources';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (moveJobsParameters !== null && moveJobsParameters !== undefined) {
      let requestModelMapper = new client.models['MoveJobParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, moveJobsParameters, 'moveJobsParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(moveJobsParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists the BitLocker keys for all drives in the specified import/export job.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BitLockerKeysListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBitLockerKeys(resourceGroupName, jobName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}/listBitLockerKeys';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BitLockerKeysListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all the active and completed import/export jobs in a subscription.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns all active and completed import/export jobs in a resource group.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Jobs. */
class Jobs {
  /**
   * Create a Jobs.
   * @param {StorageImportExportManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._listByResourceGroup = _listByResourceGroup;
    this._get = _get;
    this._update = _update;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._move = _move;
    this._listBitLockerKeys = _listBitLockerKeys;
    this._listNext = _listNext;
    this._listByResourceGroupNext = _listByResourceGroupNext;
  }

  /**
   * Gets all the active and completed import/export jobs in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions. The following possible values can be used with $filter:
   * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
   * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
   * combination of the above, for example: $filter=type eq 'Import' and state eq
   * 'Transferring'. Valid values for type are Import and Export. Valid values
   * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
   * and Completed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all the active and completed import/export jobs in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions. The following possible values can be used with $filter:
   * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
   * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
   * combination of the above, for example: $filter=type eq 'Import' and state eq
   * 'Transferring'. Valid values for type are Import and Export. Valid values
   * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
   * and Completed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Returns all active and completed import/export jobs in a resource group.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions. The following possible values can be used with $filter:
   * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
   * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
   * combination of the above, for example: $filter=type eq 'Import' and state eq
   * 'Transferring'. Valid values for type are Import and Export. Valid values
   * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
   * and Completed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns all active and completed import/export jobs in a resource group.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions. The following possible values can be used with $filter:
   * 1) $filter=type eq '{type}'; 2) $filter=trackingnumber eq
   * '{trackingnumber}'; 3) $filter=state eq '{state}'; 4) Logical and
   * combination of the above, for example: $filter=type eq 'Import' and state eq
   * 'Transferring'. Valid values for type are Import and Export. Valid values
   * for state are Creating, Shipping, Received, Transferring, Packaging, Closed,
   * and Completed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Gets information about an existing import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, jobName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, jobName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets information about an existing import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Job} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Job} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, jobName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, jobName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, jobName, options, optionalCallback);
    }
  }

  /**
   * Updates specific properties of the import/export job. You can call this
   * operation to notify the Import/Export service that the hard drives
   * comprising the import or export job have been shipped to the Microsoft data
   * center. It can also be used to cancel an existing job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} jobProperties Import/export job properties that need to be
   * updated.
   *
   * @param {object} [jobProperties.tags]
   *
   * @param {boolean} [jobProperties.cancelRequested] If specified, the value
   * must be true. The service will attempt to cancel the job.
   *
   * @param {string} [jobProperties.state] If specified, the value must be
   * Shipping, which tells the Import/Export service that the package for the job
   * has been shipped. The ReturnAddress and DeliveryPackage properties must have
   * been set either in this request or in a previous request, otherwise the
   * request will fail. Possible values include: 'Shipping'
   *
   * @param {object} [jobProperties.returnAddress] Specifies the return address
   * information for the job.
   *
   * @param {string} jobProperties.returnAddress.recipientName The name of the
   * recipient who will receive the hard drives when they are returned.
   *
   * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
   * the street address to use when returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
   * of the street address to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.city The city name to use when
   * returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
   * province to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.postalCode The postal code to
   * use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.countryOrRegion The country or
   * region to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.phone Phone number of the
   * recipient of the returned drives.
   *
   * @param {string} jobProperties.returnAddress.email Email address of the
   * recipient of the returned drives.
   *
   * @param {object} [jobProperties.returnShipping] Specifies the return carrier
   * and customer's account with the carrier.
   *
   * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
   *
   * @param {string} jobProperties.returnShipping.carrierAccountNumber The
   * customer's account number with the carrier.
   *
   * @param {object} [jobProperties.deliveryPackage] Contains information about
   * the package being shipped by the customer to the Microsoft data center.
   *
   * @param {string} jobProperties.deliveryPackage.carrierName The name of the
   * carrier that is used to ship the import or export drives.
   *
   * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
   * number of the package.
   *
   * @param {number} jobProperties.deliveryPackage.driveCount The number of
   * drives included in the package.
   *
   * @param {string} jobProperties.deliveryPackage.shipDate The date the package
   * is shipped.
   *
   * @param {string} [jobProperties.logLevel] Indicates whether error logging or
   * verbose logging is enabled.
   *
   * @param {boolean} [jobProperties.backupDriveManifest] Indicates whether the
   * manifest files on the drives should be copied to block blobs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(resourceGroupName, jobName, jobProperties, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(resourceGroupName, jobName, jobProperties, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates specific properties of the import/export job. You can call this
   * operation to notify the Import/Export service that the hard drives
   * comprising the import or export job have been shipped to the Microsoft data
   * center. It can also be used to cancel an existing job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} jobProperties Import/export job properties that need to be
   * updated.
   *
   * @param {object} [jobProperties.tags]
   *
   * @param {boolean} [jobProperties.cancelRequested] If specified, the value
   * must be true. The service will attempt to cancel the job.
   *
   * @param {string} [jobProperties.state] If specified, the value must be
   * Shipping, which tells the Import/Export service that the package for the job
   * has been shipped. The ReturnAddress and DeliveryPackage properties must have
   * been set either in this request or in a previous request, otherwise the
   * request will fail. Possible values include: 'Shipping'
   *
   * @param {object} [jobProperties.returnAddress] Specifies the return address
   * information for the job.
   *
   * @param {string} jobProperties.returnAddress.recipientName The name of the
   * recipient who will receive the hard drives when they are returned.
   *
   * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
   * the street address to use when returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
   * of the street address to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.city The city name to use when
   * returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
   * province to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.postalCode The postal code to
   * use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.countryOrRegion The country or
   * region to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.phone Phone number of the
   * recipient of the returned drives.
   *
   * @param {string} jobProperties.returnAddress.email Email address of the
   * recipient of the returned drives.
   *
   * @param {object} [jobProperties.returnShipping] Specifies the return carrier
   * and customer's account with the carrier.
   *
   * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
   *
   * @param {string} jobProperties.returnShipping.carrierAccountNumber The
   * customer's account number with the carrier.
   *
   * @param {object} [jobProperties.deliveryPackage] Contains information about
   * the package being shipped by the customer to the Microsoft data center.
   *
   * @param {string} jobProperties.deliveryPackage.carrierName The name of the
   * carrier that is used to ship the import or export drives.
   *
   * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
   * number of the package.
   *
   * @param {number} jobProperties.deliveryPackage.driveCount The number of
   * drives included in the package.
   *
   * @param {string} jobProperties.deliveryPackage.shipDate The date the package
   * is shipped.
   *
   * @param {string} [jobProperties.logLevel] Indicates whether error logging or
   * verbose logging is enabled.
   *
   * @param {boolean} [jobProperties.backupDriveManifest] Indicates whether the
   * manifest files on the drives should be copied to block blobs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Job} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Job} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName, jobName, jobProperties, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(resourceGroupName, jobName, jobProperties, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(resourceGroupName, jobName, jobProperties, options, optionalCallback);
    }
  }

  /**
   * Creates a new import/export job or updates an existing import/export job in
   * the specified subscription.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} jobProperties Properties of the import/export job that need
   * to be specified during creation.
   *
   * @param {string} jobProperties.storageAccountId The resource identifier of
   * the storage account where data will be imported to or exported from.
   *
   * @param {string} [jobProperties.containerSas] The container shared access
   * signature (SAS) to be used to import or export data to or from the storage
   * account.
   *
   * @param {string} jobProperties.jobType The type of job: Import or Export.
   * Possible values include: 'Import', 'Export'
   *
   * @param {object} jobProperties.returnAddress Specifies the return address
   * information for the job.
   *
   * @param {string} jobProperties.returnAddress.recipientName The name of the
   * recipient who will receive the hard drives when they are returned.
   *
   * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
   * the street address to use when returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
   * of the street address to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.city The city name to use when
   * returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
   * province to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.postalCode The postal code to
   * use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.countryOrRegion The country or
   * region to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.phone Phone number of the
   * recipient of the returned drives.
   *
   * @param {string} jobProperties.returnAddress.email Email address of the
   * recipient of the returned drives.
   *
   * @param {object} jobProperties.returnShipping Specifies the return carrier
   * and customer's account with the carrier.
   *
   * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
   *
   * @param {string} jobProperties.returnShipping.carrierAccountNumber The
   * customer's account number with the carrier.
   *
   * @param {object} [jobProperties.deliveryPackage] Contains information about
   * the package being shipped by the customer to the Microsoft data center.
   *
   * @param {string} jobProperties.deliveryPackage.carrierName The name of the
   * carrier that is used to ship the import or export drives.
   *
   * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
   * number of the package.
   *
   * @param {number} jobProperties.deliveryPackage.driveCount The number of
   * drives included in the package.
   *
   * @param {string} jobProperties.deliveryPackage.shipDate The date the package
   * is shipped.
   *
   * @param {string} jobProperties.diagnosticsPath The virtual blob directory to
   * which the copy logs and backups of drive manifest files (if enabled) will be
   * stored.
   *
   * @param {string} [jobProperties.logLevel] Default value is Error. Indicates
   * whether error logging or verbose logging will be enabled. Possible values
   * include: 'Error', 'Verbose'
   *
   * @param {boolean} [jobProperties.backupDriveManifest] Default value is false.
   * Indicates whether the manifest files on the drives should be copied to block
   * blobs.
   *
   * @param {boolean} [jobProperties.cancelRequested] Indicates whether a request
   * has been submitted to cancel the job.
   *
   * @param {array} [jobProperties.driveList] List of up to ten drives that
   * comprise the job. The drive list is a required element for an import job; it
   * is not specified for export jobs.
   *
   * @param {object} [jobProperties.exportProperty] A property containing
   * information about the blobs to be exported for an export job. This property
   * is included for export jobs only.
   *
   * @param {array} [jobProperties.exportProperty.blobPath] A collection of
   * blob-path strings.
   *
   * @param {array} [jobProperties.exportProperty.blobPathPrefix] A collection of
   * blob-prefix strings.
   *
   * @param {string} [jobProperties.exportProperty.blobListblobPath] The relative
   * URI to the block blob that contains the list of blob paths or blob path
   * prefixes as defined above, beginning with the container name. If the blob is
   * in the root container, the URI must begin with $root.
   *
   * @param {string} jobProperties.location Specifies the Azure location where
   * the job is created.
   *
   * @param {object} [jobProperties.tags] Specifies the tags that are assigned to
   * the job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, jobName, jobProperties, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, jobName, jobProperties, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new import/export job or updates an existing import/export job in
   * the specified subscription.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} jobProperties Properties of the import/export job that need
   * to be specified during creation.
   *
   * @param {string} jobProperties.storageAccountId The resource identifier of
   * the storage account where data will be imported to or exported from.
   *
   * @param {string} [jobProperties.containerSas] The container shared access
   * signature (SAS) to be used to import or export data to or from the storage
   * account.
   *
   * @param {string} jobProperties.jobType The type of job: Import or Export.
   * Possible values include: 'Import', 'Export'
   *
   * @param {object} jobProperties.returnAddress Specifies the return address
   * information for the job.
   *
   * @param {string} jobProperties.returnAddress.recipientName The name of the
   * recipient who will receive the hard drives when they are returned.
   *
   * @param {string} jobProperties.returnAddress.streetAddress1 The first line of
   * the street address to use when returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.streetAddress2] The second line
   * of the street address to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.city The city name to use when
   * returning the drives.
   *
   * @param {string} [jobProperties.returnAddress.stateOrProvince] The state or
   * province to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.postalCode The postal code to
   * use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.countryOrRegion The country or
   * region to use when returning the drives.
   *
   * @param {string} jobProperties.returnAddress.phone Phone number of the
   * recipient of the returned drives.
   *
   * @param {string} jobProperties.returnAddress.email Email address of the
   * recipient of the returned drives.
   *
   * @param {object} jobProperties.returnShipping Specifies the return carrier
   * and customer's account with the carrier.
   *
   * @param {string} jobProperties.returnShipping.carrierName The carrier's name.
   *
   * @param {string} jobProperties.returnShipping.carrierAccountNumber The
   * customer's account number with the carrier.
   *
   * @param {object} [jobProperties.deliveryPackage] Contains information about
   * the package being shipped by the customer to the Microsoft data center.
   *
   * @param {string} jobProperties.deliveryPackage.carrierName The name of the
   * carrier that is used to ship the import or export drives.
   *
   * @param {string} jobProperties.deliveryPackage.trackingNumber The tracking
   * number of the package.
   *
   * @param {number} jobProperties.deliveryPackage.driveCount The number of
   * drives included in the package.
   *
   * @param {string} jobProperties.deliveryPackage.shipDate The date the package
   * is shipped.
   *
   * @param {string} jobProperties.diagnosticsPath The virtual blob directory to
   * which the copy logs and backups of drive manifest files (if enabled) will be
   * stored.
   *
   * @param {string} [jobProperties.logLevel] Default value is Error. Indicates
   * whether error logging or verbose logging will be enabled. Possible values
   * include: 'Error', 'Verbose'
   *
   * @param {boolean} [jobProperties.backupDriveManifest] Default value is false.
   * Indicates whether the manifest files on the drives should be copied to block
   * blobs.
   *
   * @param {boolean} [jobProperties.cancelRequested] Indicates whether a request
   * has been submitted to cancel the job.
   *
   * @param {array} [jobProperties.driveList] List of up to ten drives that
   * comprise the job. The drive list is a required element for an import job; it
   * is not specified for export jobs.
   *
   * @param {object} [jobProperties.exportProperty] A property containing
   * information about the blobs to be exported for an export job. This property
   * is included for export jobs only.
   *
   * @param {array} [jobProperties.exportProperty.blobPath] A collection of
   * blob-path strings.
   *
   * @param {array} [jobProperties.exportProperty.blobPathPrefix] A collection of
   * blob-prefix strings.
   *
   * @param {string} [jobProperties.exportProperty.blobListblobPath] The relative
   * URI to the block blob that contains the list of blob paths or blob path
   * prefixes as defined above, beginning with the container name. If the blob is
   * in the root container, the URI must begin with $root.
   *
   * @param {string} jobProperties.location Specifies the Azure location where
   * the job is created.
   *
   * @param {object} [jobProperties.tags] Specifies the tags that are assigned to
   * the job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Job} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Job} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, jobName, jobProperties, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, jobName, jobProperties, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, jobName, jobProperties, options, optionalCallback);
    }
  }

  /**
   * Deletes an existing import/export job. Only import/export jobs in the
   * Creating or Completed states can be deleted.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, jobName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, jobName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes an existing import/export job. Only import/export jobs in the
   * Creating or Completed states can be deleted.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, jobName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, jobName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, jobName, options, optionalCallback);
    }
  }

  /**
   * Moves the specified import/export jobs from the resource group to a target
   * resource group. The target resource group may be in a different
   * subscription.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} moveJobsParameters Parameters to be provided to move a job
   * from one resource group to another.
   *
   * @param {string} moveJobsParameters.targetResourceGroup Specifies the target
   * resource group ID to move the jobs to.
   *
   * @param {array} moveJobsParameters.resources Specifies the list of jobs to
   * move to the target resource group. The jobs must be from the current
   * resource group from the request URL.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  moveWithHttpOperationResponse(resourceGroupName, moveJobsParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._move(resourceGroupName, moveJobsParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Moves the specified import/export jobs from the resource group to a target
   * resource group. The target resource group may be in a different
   * subscription.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} moveJobsParameters Parameters to be provided to move a job
   * from one resource group to another.
   *
   * @param {string} moveJobsParameters.targetResourceGroup Specifies the target
   * resource group ID to move the jobs to.
   *
   * @param {array} moveJobsParameters.resources Specifies the list of jobs to
   * move to the target resource group. The jobs must be from the current
   * resource group from the request URL.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  move(resourceGroupName, moveJobsParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._move(resourceGroupName, moveJobsParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._move(resourceGroupName, moveJobsParameters, options, optionalCallback);
    }
  }

  /**
   * Lists the BitLocker keys for all drives in the specified import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BitLockerKeysListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBitLockerKeysWithHttpOperationResponse(resourceGroupName, jobName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBitLockerKeys(resourceGroupName, jobName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists the BitLocker keys for all drives in the specified import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BitLockerKeysListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BitLockerKeysListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBitLockerKeys(resourceGroupName, jobName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBitLockerKeys(resourceGroupName, jobName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBitLockerKeys(resourceGroupName, jobName, options, optionalCallback);
    }
  }

  /**
   * Gets all the active and completed import/export jobs in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all the active and completed import/export jobs in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * Returns all active and completed import/export jobs in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns all active and completed import/export jobs in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = Jobs;
