/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Returns all active and completed jobs in a subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.top] An integer value that specifies how many jobs
 * at most should be returned. The value cannot exceed 100.
 *
 * @param {string} [options.filter] Can be used to restrict the results to
 * certain conditions.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ListJobsResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBySubscription(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ListJobsResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns all active and completed jobs in a resource group.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.top] An integer value that specifies how many jobs
 * at most should be returned. The value cannot exceed 100.
 *
 * @param {string} [options.filter] Can be used to restrict the results to
 * certain conditions.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ListJobsResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ListJobsResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets information about an existing job.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(jobName, resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates specific properties of a job. You can call this operation to notify
 * the Import/Export service that the hard drives comprising the import or
 * export job have been shipped to the Microsoft data center. It can also be
 * used to cancel an existing job.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {object} body The parameters to update in the job
 *
 * @param {object} [body.tags] Specifies the tags that will be assigned to the
 * job
 *
 * @param {boolean} [body.cancelRequested] If specified, the value must be
 * true. The service will attempt to cancel the job.
 *
 * @param {string} [body.state] If specified, the value must be Shipping, which
 * tells the Import/Export service that the package for the job has been
 * shipped. The ReturnAddress and DeliveryPackage properties must have been set
 * either in this request or in a previous request, otherwise the request will
 * fail.
 *
 * @param {object} [body.returnAddress] Specifies the return address
 * information for the job.
 *
 * @param {string} body.returnAddress.recipientName The name of the recipient
 * who will receive the hard drives when they are returned.
 *
 * @param {string} body.returnAddress.streetAddress1 The first line of the
 * street address to use when returning the drives.
 *
 * @param {string} [body.returnAddress.streetAddress2] The second line of the
 * street address to use when returning the drives.
 *
 * @param {string} body.returnAddress.city The city name to use when returning
 * the drives.
 *
 * @param {string} [body.returnAddress.stateOrProvince] The state or province
 * to use when returning the drives.
 *
 * @param {string} body.returnAddress.postalCode The postal code to use when
 * returning the drives.
 *
 * @param {string} body.returnAddress.countryOrRegion The country or region to
 * use when returning the drives.
 *
 * @param {string} body.returnAddress.phone Phone number of the recipient of
 * the returned drives.
 *
 * @param {string} body.returnAddress.email Email address of the recipient of
 * the returned drives.
 *
 * @param {object} [body.returnShipping] Specifies the return carrier and
 * customer's account with the carrier.
 *
 * @param {string} body.returnShipping.carrierName The carrier's name.
 *
 * @param {string} body.returnShipping.carrierAccountNumber The customer's
 * account number with the carrier.
 *
 * @param {object} [body.deliveryPackage] Contains information about the
 * package being shipped by the customer to the Microsoft data center.
 *
 * @param {string} body.deliveryPackage.carrierName The name of the carrier
 * that is used to ship the import or export drives.
 *
 * @param {string} body.deliveryPackage.trackingNumber The tracking number of
 * the package.
 *
 * @param {number} body.deliveryPackage.driveCount The number of drives
 * included in the package.
 *
 * @param {string} body.deliveryPackage.shipDate The date when the package is
 * shipped.
 *
 * @param {string} [body.logLevel] Indicates whether error logging or verbose
 * logging is enabled.
 *
 * @param {boolean} [body.backupDriveManifest] Indicates whether the manifest
 * files on the drives should be copied to block blobs.
 *
 * @param {array} [body.driveList] List of drives that comprise the job.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(jobName, resourceGroupName, body, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['UpdateJobParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates a new job or updates an existing job in the specified subscription.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {object} body The parameters used for creating the job
 *
 * @param {string} [body.location] Specifies the supported Azure location where
 * the job should be created
 *
 * @param {object} [body.tags] Specifies the tags that will be assigned to the
 * job.
 *
 * @param {object} [body.properties] Specifies the job properties
 *
 * @param {string} [body.properties.storageAccountId] The resource identifier
 * of the storage account where data will be imported to or exported from.
 *
 * @param {string} [body.properties.jobType] The type of job
 *
 * @param {object} [body.properties.returnAddress] Specifies the return address
 * information for the job.
 *
 * @param {string} body.properties.returnAddress.recipientName The name of the
 * recipient who will receive the hard drives when they are returned.
 *
 * @param {string} body.properties.returnAddress.streetAddress1 The first line
 * of the street address to use when returning the drives.
 *
 * @param {string} [body.properties.returnAddress.streetAddress2] The second
 * line of the street address to use when returning the drives.
 *
 * @param {string} body.properties.returnAddress.city The city name to use when
 * returning the drives.
 *
 * @param {string} [body.properties.returnAddress.stateOrProvince] The state or
 * province to use when returning the drives.
 *
 * @param {string} body.properties.returnAddress.postalCode The postal code to
 * use when returning the drives.
 *
 * @param {string} body.properties.returnAddress.countryOrRegion The country or
 * region to use when returning the drives.
 *
 * @param {string} body.properties.returnAddress.phone Phone number of the
 * recipient of the returned drives.
 *
 * @param {string} body.properties.returnAddress.email Email address of the
 * recipient of the returned drives.
 *
 * @param {object} [body.properties.returnShipping] Specifies the return
 * carrier and customer's account with the carrier.
 *
 * @param {string} body.properties.returnShipping.carrierName The carrier's
 * name.
 *
 * @param {string} body.properties.returnShipping.carrierAccountNumber The
 * customer's account number with the carrier.
 *
 * @param {object} [body.properties.shippingInformation] Contains information
 * about the Microsoft datacenter to which the drives should be shipped.
 *
 * @param {string} body.properties.shippingInformation.recipientName The name
 * of the recipient who will receive the hard drives when they are returned.
 *
 * @param {string} body.properties.shippingInformation.streetAddress1 The first
 * line of the street address to use when returning the drives.
 *
 * @param {string} [body.properties.shippingInformation.streetAddress2] The
 * second line of the street address to use when returning the drives.
 *
 * @param {string} body.properties.shippingInformation.city The city name to
 * use when returning the drives.
 *
 * @param {string} body.properties.shippingInformation.stateOrProvince The
 * state or province to use when returning the drives.
 *
 * @param {string} body.properties.shippingInformation.postalCode The postal
 * code to use when returning the drives.
 *
 * @param {string} body.properties.shippingInformation.countryOrRegion The
 * country or region to use when returning the drives.
 *
 * @param {string} [body.properties.shippingInformation.phone] Phone number of
 * the recipient of the returned drives.
 *
 * @param {object} [body.properties.deliveryPackage] Contains information about
 * the package being shipped by the customer to the Microsoft data center.
 *
 * @param {object} [body.properties.returnPackage] Contains information about
 * the package being shipped from the Microsoft data center to the customer to
 * return the drives. The format is the same as the deliveryPackage property
 * above. This property is not included if the drives have not yet been
 * returned.
 *
 * @param {string} body.properties.returnPackage.carrierName The name of the
 * carrier that is used to ship the import or export drives.
 *
 * @param {string} body.properties.returnPackage.trackingNumber The tracking
 * number of the package.
 *
 * @param {number} body.properties.returnPackage.driveCount The number of
 * drives included in the package.
 *
 * @param {string} body.properties.returnPackage.shipDate The date when the
 * package is shipped.
 *
 * @param {string} [body.properties.diagnosticsPath] The virtual blob directory
 * to which the copy logs and backups of drive manifest files (if enabled) will
 * be stored.
 *
 * @param {string} [body.properties.logLevel] Default value is Error. Indicates
 * whether error logging or verbose logging will be enabled.
 *
 * @param {boolean} [body.properties.backupDriveManifest] Default value is
 * false. Indicates whether the manifest files on the drives should be copied
 * to block blobs.
 *
 * @param {string} [body.properties.state] Current state of the job.
 *
 * @param {boolean} [body.properties.cancelRequested] Indicates whether a
 * request has been submitted to cancel the job.
 *
 * @param {number} [body.properties.percentComplete] Overall percentage
 * completed for the job.
 *
 * @param {string} [body.properties.incompleteBlobListUri] A blob path that
 * points to a block blob containing a list of blob names that were not
 * exported due to insufficient drive space. If all blobs were exported
 * successfully, then this element is not included in the response.
 *
 * @param {array} [body.properties.driveList] List of up to ten drives that
 * comprise the job. The drive list is a required element for an import job; it
 * is not specified for export jobs.
 *
 * @param {object} [body.properties.exportProperty] A property containing
 * information about the blobs to be exported for an export job. This property
 * is included for export jobs only.
 *
 * @param {array} [body.properties.exportProperty.blobPath] A collection of
 * blob-path strings.
 *
 * @param {array} [body.properties.exportProperty.blobPathPrefix] A collection
 * of blob-prefix strings.
 *
 * @param {string} [body.properties.exportProperty.blobListblobPath] The
 * relative URI to the block blob that contains the list of blob paths or blob
 * path prefixes as defined above, beginning with the container name. If the
 * blob is in root container, the URI must begin with $root.
 *
 * @param {string} [body.properties.provisioningState] Specifies the
 * provisioning state of the job.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.clientTenantId] The tenant ID of the client making
 * the request.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JobResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(jobName, resourceGroupName, body, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let clientTenantId = (options && options.clientTenantId !== undefined) ? options.clientTenantId : undefined;
  // Validate
  try {
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
    if (clientTenantId !== null && clientTenantId !== undefined && typeof clientTenantId.valueOf() !== 'string') {
      throw new Error('clientTenantId must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if (clientTenantId !== undefined && clientTenantId !== null) {
    httpRequest.headers['x-ms-client-tenant-id'] = clientTenantId;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['PutJobParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JobResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes an existing job. Only jobs in the Creating or Completed states can
 * be deleted.
 *
 * @param {string} jobName The name of the import/export job.
 *
 * @param {string} resourceGroupName The resource group name uniquely
 * identifies the resource group within the user subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(jobName, resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (jobName === null || jobName === undefined || typeof jobName.valueOf() !== 'string') {
      throw new Error('jobName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}';
  requestUrl = requestUrl.replace('{jobName}', encodeURIComponent(jobName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns all active and completed jobs in a subscription.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ListJobsResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listBySubscriptionNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ListJobsResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns all active and completed jobs in a resource group.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ListJobsResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['Accept-Language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ListJobsResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Jobs. */
class Jobs {
  /**
   * Create a Jobs.
   * @param {StorageImportExportManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._listBySubscription = _listBySubscription;
    this._listByResourceGroup = _listByResourceGroup;
    this._get = _get;
    this._update = _update;
    this._create = _create;
    this._deleteMethod = _deleteMethod;
    this._listBySubscriptionNext = _listBySubscriptionNext;
    this._listByResourceGroupNext = _listByResourceGroupNext;
  }

  /**
   * Returns all active and completed jobs in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBySubscriptionWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBySubscription(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns all active and completed jobs in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ListJobsResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListJobsResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBySubscription(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBySubscription(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBySubscription(options, optionalCallback);
    }
  }

  /**
   * Returns all active and completed jobs in a resource group.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns all active and completed jobs in a resource group.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.top] An integer value that specifies how many jobs
   * at most should be returned. The value cannot exceed 100.
   *
   * @param {string} [options.filter] Can be used to restrict the results to
   * certain conditions.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ListJobsResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListJobsResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Gets information about an existing job.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(jobName, resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(jobName, resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets information about an existing job.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(jobName, resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(jobName, resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(jobName, resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Updates specific properties of a job. You can call this operation to notify
   * the Import/Export service that the hard drives comprising the import or
   * export job have been shipped to the Microsoft data center. It can also be
   * used to cancel an existing job.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} body The parameters to update in the job
   *
   * @param {object} [body.tags] Specifies the tags that will be assigned to the
   * job
   *
   * @param {boolean} [body.cancelRequested] If specified, the value must be
   * true. The service will attempt to cancel the job.
   *
   * @param {string} [body.state] If specified, the value must be Shipping, which
   * tells the Import/Export service that the package for the job has been
   * shipped. The ReturnAddress and DeliveryPackage properties must have been set
   * either in this request or in a previous request, otherwise the request will
   * fail.
   *
   * @param {object} [body.returnAddress] Specifies the return address
   * information for the job.
   *
   * @param {string} body.returnAddress.recipientName The name of the recipient
   * who will receive the hard drives when they are returned.
   *
   * @param {string} body.returnAddress.streetAddress1 The first line of the
   * street address to use when returning the drives.
   *
   * @param {string} [body.returnAddress.streetAddress2] The second line of the
   * street address to use when returning the drives.
   *
   * @param {string} body.returnAddress.city The city name to use when returning
   * the drives.
   *
   * @param {string} [body.returnAddress.stateOrProvince] The state or province
   * to use when returning the drives.
   *
   * @param {string} body.returnAddress.postalCode The postal code to use when
   * returning the drives.
   *
   * @param {string} body.returnAddress.countryOrRegion The country or region to
   * use when returning the drives.
   *
   * @param {string} body.returnAddress.phone Phone number of the recipient of
   * the returned drives.
   *
   * @param {string} body.returnAddress.email Email address of the recipient of
   * the returned drives.
   *
   * @param {object} [body.returnShipping] Specifies the return carrier and
   * customer's account with the carrier.
   *
   * @param {string} body.returnShipping.carrierName The carrier's name.
   *
   * @param {string} body.returnShipping.carrierAccountNumber The customer's
   * account number with the carrier.
   *
   * @param {object} [body.deliveryPackage] Contains information about the
   * package being shipped by the customer to the Microsoft data center.
   *
   * @param {string} body.deliveryPackage.carrierName The name of the carrier
   * that is used to ship the import or export drives.
   *
   * @param {string} body.deliveryPackage.trackingNumber The tracking number of
   * the package.
   *
   * @param {number} body.deliveryPackage.driveCount The number of drives
   * included in the package.
   *
   * @param {string} body.deliveryPackage.shipDate The date when the package is
   * shipped.
   *
   * @param {string} [body.logLevel] Indicates whether error logging or verbose
   * logging is enabled.
   *
   * @param {boolean} [body.backupDriveManifest] Indicates whether the manifest
   * files on the drives should be copied to block blobs.
   *
   * @param {array} [body.driveList] List of drives that comprise the job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(jobName, resourceGroupName, body, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(jobName, resourceGroupName, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates specific properties of a job. You can call this operation to notify
   * the Import/Export service that the hard drives comprising the import or
   * export job have been shipped to the Microsoft data center. It can also be
   * used to cancel an existing job.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} body The parameters to update in the job
   *
   * @param {object} [body.tags] Specifies the tags that will be assigned to the
   * job
   *
   * @param {boolean} [body.cancelRequested] If specified, the value must be
   * true. The service will attempt to cancel the job.
   *
   * @param {string} [body.state] If specified, the value must be Shipping, which
   * tells the Import/Export service that the package for the job has been
   * shipped. The ReturnAddress and DeliveryPackage properties must have been set
   * either in this request or in a previous request, otherwise the request will
   * fail.
   *
   * @param {object} [body.returnAddress] Specifies the return address
   * information for the job.
   *
   * @param {string} body.returnAddress.recipientName The name of the recipient
   * who will receive the hard drives when they are returned.
   *
   * @param {string} body.returnAddress.streetAddress1 The first line of the
   * street address to use when returning the drives.
   *
   * @param {string} [body.returnAddress.streetAddress2] The second line of the
   * street address to use when returning the drives.
   *
   * @param {string} body.returnAddress.city The city name to use when returning
   * the drives.
   *
   * @param {string} [body.returnAddress.stateOrProvince] The state or province
   * to use when returning the drives.
   *
   * @param {string} body.returnAddress.postalCode The postal code to use when
   * returning the drives.
   *
   * @param {string} body.returnAddress.countryOrRegion The country or region to
   * use when returning the drives.
   *
   * @param {string} body.returnAddress.phone Phone number of the recipient of
   * the returned drives.
   *
   * @param {string} body.returnAddress.email Email address of the recipient of
   * the returned drives.
   *
   * @param {object} [body.returnShipping] Specifies the return carrier and
   * customer's account with the carrier.
   *
   * @param {string} body.returnShipping.carrierName The carrier's name.
   *
   * @param {string} body.returnShipping.carrierAccountNumber The customer's
   * account number with the carrier.
   *
   * @param {object} [body.deliveryPackage] Contains information about the
   * package being shipped by the customer to the Microsoft data center.
   *
   * @param {string} body.deliveryPackage.carrierName The name of the carrier
   * that is used to ship the import or export drives.
   *
   * @param {string} body.deliveryPackage.trackingNumber The tracking number of
   * the package.
   *
   * @param {number} body.deliveryPackage.driveCount The number of drives
   * included in the package.
   *
   * @param {string} body.deliveryPackage.shipDate The date when the package is
   * shipped.
   *
   * @param {string} [body.logLevel] Indicates whether error logging or verbose
   * logging is enabled.
   *
   * @param {boolean} [body.backupDriveManifest] Indicates whether the manifest
   * files on the drives should be copied to block blobs.
   *
   * @param {array} [body.driveList] List of drives that comprise the job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(jobName, resourceGroupName, body, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(jobName, resourceGroupName, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(jobName, resourceGroupName, body, options, optionalCallback);
    }
  }

  /**
   * Creates a new job or updates an existing job in the specified subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} body The parameters used for creating the job
   *
   * @param {string} [body.location] Specifies the supported Azure location where
   * the job should be created
   *
   * @param {object} [body.tags] Specifies the tags that will be assigned to the
   * job.
   *
   * @param {object} [body.properties] Specifies the job properties
   *
   * @param {string} [body.properties.storageAccountId] The resource identifier
   * of the storage account where data will be imported to or exported from.
   *
   * @param {string} [body.properties.jobType] The type of job
   *
   * @param {object} [body.properties.returnAddress] Specifies the return address
   * information for the job.
   *
   * @param {string} body.properties.returnAddress.recipientName The name of the
   * recipient who will receive the hard drives when they are returned.
   *
   * @param {string} body.properties.returnAddress.streetAddress1 The first line
   * of the street address to use when returning the drives.
   *
   * @param {string} [body.properties.returnAddress.streetAddress2] The second
   * line of the street address to use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.city The city name to use when
   * returning the drives.
   *
   * @param {string} [body.properties.returnAddress.stateOrProvince] The state or
   * province to use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.postalCode The postal code to
   * use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.countryOrRegion The country or
   * region to use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.phone Phone number of the
   * recipient of the returned drives.
   *
   * @param {string} body.properties.returnAddress.email Email address of the
   * recipient of the returned drives.
   *
   * @param {object} [body.properties.returnShipping] Specifies the return
   * carrier and customer's account with the carrier.
   *
   * @param {string} body.properties.returnShipping.carrierName The carrier's
   * name.
   *
   * @param {string} body.properties.returnShipping.carrierAccountNumber The
   * customer's account number with the carrier.
   *
   * @param {object} [body.properties.shippingInformation] Contains information
   * about the Microsoft datacenter to which the drives should be shipped.
   *
   * @param {string} body.properties.shippingInformation.recipientName The name
   * of the recipient who will receive the hard drives when they are returned.
   *
   * @param {string} body.properties.shippingInformation.streetAddress1 The first
   * line of the street address to use when returning the drives.
   *
   * @param {string} [body.properties.shippingInformation.streetAddress2] The
   * second line of the street address to use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.city The city name to
   * use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.stateOrProvince The
   * state or province to use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.postalCode The postal
   * code to use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.countryOrRegion The
   * country or region to use when returning the drives.
   *
   * @param {string} [body.properties.shippingInformation.phone] Phone number of
   * the recipient of the returned drives.
   *
   * @param {object} [body.properties.deliveryPackage] Contains information about
   * the package being shipped by the customer to the Microsoft data center.
   *
   * @param {object} [body.properties.returnPackage] Contains information about
   * the package being shipped from the Microsoft data center to the customer to
   * return the drives. The format is the same as the deliveryPackage property
   * above. This property is not included if the drives have not yet been
   * returned.
   *
   * @param {string} body.properties.returnPackage.carrierName The name of the
   * carrier that is used to ship the import or export drives.
   *
   * @param {string} body.properties.returnPackage.trackingNumber The tracking
   * number of the package.
   *
   * @param {number} body.properties.returnPackage.driveCount The number of
   * drives included in the package.
   *
   * @param {string} body.properties.returnPackage.shipDate The date when the
   * package is shipped.
   *
   * @param {string} [body.properties.diagnosticsPath] The virtual blob directory
   * to which the copy logs and backups of drive manifest files (if enabled) will
   * be stored.
   *
   * @param {string} [body.properties.logLevel] Default value is Error. Indicates
   * whether error logging or verbose logging will be enabled.
   *
   * @param {boolean} [body.properties.backupDriveManifest] Default value is
   * false. Indicates whether the manifest files on the drives should be copied
   * to block blobs.
   *
   * @param {string} [body.properties.state] Current state of the job.
   *
   * @param {boolean} [body.properties.cancelRequested] Indicates whether a
   * request has been submitted to cancel the job.
   *
   * @param {number} [body.properties.percentComplete] Overall percentage
   * completed for the job.
   *
   * @param {string} [body.properties.incompleteBlobListUri] A blob path that
   * points to a block blob containing a list of blob names that were not
   * exported due to insufficient drive space. If all blobs were exported
   * successfully, then this element is not included in the response.
   *
   * @param {array} [body.properties.driveList] List of up to ten drives that
   * comprise the job. The drive list is a required element for an import job; it
   * is not specified for export jobs.
   *
   * @param {object} [body.properties.exportProperty] A property containing
   * information about the blobs to be exported for an export job. This property
   * is included for export jobs only.
   *
   * @param {array} [body.properties.exportProperty.blobPath] A collection of
   * blob-path strings.
   *
   * @param {array} [body.properties.exportProperty.blobPathPrefix] A collection
   * of blob-prefix strings.
   *
   * @param {string} [body.properties.exportProperty.blobListblobPath] The
   * relative URI to the block blob that contains the list of blob paths or blob
   * path prefixes as defined above, beginning with the container name. If the
   * blob is in root container, the URI must begin with $root.
   *
   * @param {string} [body.properties.provisioningState] Specifies the
   * provisioning state of the job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.clientTenantId] The tenant ID of the client making
   * the request.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JobResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(jobName, resourceGroupName, body, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(jobName, resourceGroupName, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new job or updates an existing job in the specified subscription.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} body The parameters used for creating the job
   *
   * @param {string} [body.location] Specifies the supported Azure location where
   * the job should be created
   *
   * @param {object} [body.tags] Specifies the tags that will be assigned to the
   * job.
   *
   * @param {object} [body.properties] Specifies the job properties
   *
   * @param {string} [body.properties.storageAccountId] The resource identifier
   * of the storage account where data will be imported to or exported from.
   *
   * @param {string} [body.properties.jobType] The type of job
   *
   * @param {object} [body.properties.returnAddress] Specifies the return address
   * information for the job.
   *
   * @param {string} body.properties.returnAddress.recipientName The name of the
   * recipient who will receive the hard drives when they are returned.
   *
   * @param {string} body.properties.returnAddress.streetAddress1 The first line
   * of the street address to use when returning the drives.
   *
   * @param {string} [body.properties.returnAddress.streetAddress2] The second
   * line of the street address to use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.city The city name to use when
   * returning the drives.
   *
   * @param {string} [body.properties.returnAddress.stateOrProvince] The state or
   * province to use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.postalCode The postal code to
   * use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.countryOrRegion The country or
   * region to use when returning the drives.
   *
   * @param {string} body.properties.returnAddress.phone Phone number of the
   * recipient of the returned drives.
   *
   * @param {string} body.properties.returnAddress.email Email address of the
   * recipient of the returned drives.
   *
   * @param {object} [body.properties.returnShipping] Specifies the return
   * carrier and customer's account with the carrier.
   *
   * @param {string} body.properties.returnShipping.carrierName The carrier's
   * name.
   *
   * @param {string} body.properties.returnShipping.carrierAccountNumber The
   * customer's account number with the carrier.
   *
   * @param {object} [body.properties.shippingInformation] Contains information
   * about the Microsoft datacenter to which the drives should be shipped.
   *
   * @param {string} body.properties.shippingInformation.recipientName The name
   * of the recipient who will receive the hard drives when they are returned.
   *
   * @param {string} body.properties.shippingInformation.streetAddress1 The first
   * line of the street address to use when returning the drives.
   *
   * @param {string} [body.properties.shippingInformation.streetAddress2] The
   * second line of the street address to use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.city The city name to
   * use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.stateOrProvince The
   * state or province to use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.postalCode The postal
   * code to use when returning the drives.
   *
   * @param {string} body.properties.shippingInformation.countryOrRegion The
   * country or region to use when returning the drives.
   *
   * @param {string} [body.properties.shippingInformation.phone] Phone number of
   * the recipient of the returned drives.
   *
   * @param {object} [body.properties.deliveryPackage] Contains information about
   * the package being shipped by the customer to the Microsoft data center.
   *
   * @param {object} [body.properties.returnPackage] Contains information about
   * the package being shipped from the Microsoft data center to the customer to
   * return the drives. The format is the same as the deliveryPackage property
   * above. This property is not included if the drives have not yet been
   * returned.
   *
   * @param {string} body.properties.returnPackage.carrierName The name of the
   * carrier that is used to ship the import or export drives.
   *
   * @param {string} body.properties.returnPackage.trackingNumber The tracking
   * number of the package.
   *
   * @param {number} body.properties.returnPackage.driveCount The number of
   * drives included in the package.
   *
   * @param {string} body.properties.returnPackage.shipDate The date when the
   * package is shipped.
   *
   * @param {string} [body.properties.diagnosticsPath] The virtual blob directory
   * to which the copy logs and backups of drive manifest files (if enabled) will
   * be stored.
   *
   * @param {string} [body.properties.logLevel] Default value is Error. Indicates
   * whether error logging or verbose logging will be enabled.
   *
   * @param {boolean} [body.properties.backupDriveManifest] Default value is
   * false. Indicates whether the manifest files on the drives should be copied
   * to block blobs.
   *
   * @param {string} [body.properties.state] Current state of the job.
   *
   * @param {boolean} [body.properties.cancelRequested] Indicates whether a
   * request has been submitted to cancel the job.
   *
   * @param {number} [body.properties.percentComplete] Overall percentage
   * completed for the job.
   *
   * @param {string} [body.properties.incompleteBlobListUri] A blob path that
   * points to a block blob containing a list of blob names that were not
   * exported due to insufficient drive space. If all blobs were exported
   * successfully, then this element is not included in the response.
   *
   * @param {array} [body.properties.driveList] List of up to ten drives that
   * comprise the job. The drive list is a required element for an import job; it
   * is not specified for export jobs.
   *
   * @param {object} [body.properties.exportProperty] A property containing
   * information about the blobs to be exported for an export job. This property
   * is included for export jobs only.
   *
   * @param {array} [body.properties.exportProperty.blobPath] A collection of
   * blob-path strings.
   *
   * @param {array} [body.properties.exportProperty.blobPathPrefix] A collection
   * of blob-prefix strings.
   *
   * @param {string} [body.properties.exportProperty.blobListblobPath] The
   * relative URI to the block blob that contains the list of blob paths or blob
   * path prefixes as defined above, beginning with the container name. If the
   * blob is in root container, the URI must begin with $root.
   *
   * @param {string} [body.properties.provisioningState] Specifies the
   * provisioning state of the job.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.clientTenantId] The tenant ID of the client making
   * the request.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JobResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JobResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(jobName, resourceGroupName, body, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(jobName, resourceGroupName, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(jobName, resourceGroupName, body, options, optionalCallback);
    }
  }

  /**
   * Deletes an existing job. Only jobs in the Creating or Completed states can
   * be deleted.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(jobName, resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(jobName, resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes an existing job. Only jobs in the Creating or Completed states can
   * be deleted.
   *
   * @param {string} jobName The name of the import/export job.
   *
   * @param {string} resourceGroupName The resource group name uniquely
   * identifies the resource group within the user subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(jobName, resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(jobName, resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(jobName, resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Returns all active and completed jobs in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listBySubscriptionNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listBySubscriptionNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns all active and completed jobs in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ListJobsResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListJobsResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listBySubscriptionNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listBySubscriptionNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listBySubscriptionNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * Returns all active and completed jobs in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListJobsResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns all active and completed jobs in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ListJobsResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListJobsResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = Jobs;
