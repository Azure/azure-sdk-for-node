/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NotificationHubsManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available NotificationHubs REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available NotificationHubs REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available NotificationHubs REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available NotificationHubs REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NotificationHubsManagementClient.
 */
export interface Namespaces {


    /**
     * Checks the availability of the given service namespace across all Azure
     * subscriptions. This is useful because the domain name is created based on
     * the service namespace name.
     *
     * @param {object} parameters The namespace name.
     *
     * @param {string} parameters.name Resource name
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {boolean} [parameters.isAvailiable] True if the name is available and
     * can be used to create new Namespace/NotificationHub. Otherwise false.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkAvailabilityWithHttpOperationResponse(parameters: models.CheckAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckAvailabilityResult>>;

    /**
     * Checks the availability of the given service namespace across all Azure
     * subscriptions. This is useful because the domain name is created based on
     * the service namespace name.
     *
     * @param {object} parameters The namespace name.
     *
     * @param {string} parameters.name Resource name
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {boolean} [parameters.isAvailiable] True if the name is available and
     * can be used to create new Namespace/NotificationHub. Otherwise false.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckAvailabilityResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkAvailability(parameters: models.CheckAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckAvailabilityResult>;
    checkAvailability(parameters: models.CheckAvailabilityParameters, callback: ServiceCallback<models.CheckAvailabilityResult>): void;
    checkAvailability(parameters: models.CheckAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckAvailabilityResult>): void;


    /**
     * Creates/Updates a service namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a Namespace
     * Resource.
     *
     * @param {string} [parameters.namespaceCreateOrUpdateParametersName] The name
     * of the namespace.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * Namespace.
     *
     * @param {string} [parameters.region] Specifies the targeted region in which
     * the namespace should be created. It can be any of the following values:
     * Australia EastAustralia SoutheastCentral USEast USEast US 2West USNorth
     * Central USSouth Central USEast AsiaSoutheast AsiaBrazil SouthJapan EastJapan
     * WestNorth EuropeWest Europe
     *
     * @param {string} [parameters.status] Status of the namespace. It can be any
     * of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
     *
     * @param {date} [parameters.createdAt] The time the namespace was created.
     *
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     *
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform NotificationHub operations.
     *
     * @param {string} [parameters.subscriptionId] The Id of the Azure subscription
     * associated with the namespace.
     *
     * @param {string} [parameters.scaleUnit] ScaleUnit where the namespace gets
     * created
     *
     * @param {boolean} [parameters.enabled] Whether or not the namespace is
     * currently enabled.
     *
     * @param {boolean} [parameters.critical] Whether or not the namespace is set
     * as Critical.
     *
     * @param {string} [parameters.dataCenter] Data center for the namespace
     *
     * @param {string} [parameters.namespaceType] The namespace type. Possible
     * values include: 'Messaging', 'NotificationHub'
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NamespaceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NamespaceResource>>;

    /**
     * Creates/Updates a service namespace. Once created, this namespace's resource
     * manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to create a Namespace
     * Resource.
     *
     * @param {string} [parameters.namespaceCreateOrUpdateParametersName] The name
     * of the namespace.
     *
     * @param {string} [parameters.provisioningState] Provisioning state of the
     * Namespace.
     *
     * @param {string} [parameters.region] Specifies the targeted region in which
     * the namespace should be created. It can be any of the following values:
     * Australia EastAustralia SoutheastCentral USEast USEast US 2West USNorth
     * Central USSouth Central USEast AsiaSoutheast AsiaBrazil SouthJapan EastJapan
     * WestNorth EuropeWest Europe
     *
     * @param {string} [parameters.status] Status of the namespace. It can be any
     * of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
     *
     * @param {date} [parameters.createdAt] The time the namespace was created.
     *
     * @param {date} [parameters.updatedAt] The time the namespace was updated.
     *
     * @param {string} [parameters.serviceBusEndpoint] Endpoint you can use to
     * perform NotificationHub operations.
     *
     * @param {string} [parameters.subscriptionId] The Id of the Azure subscription
     * associated with the namespace.
     *
     * @param {string} [parameters.scaleUnit] ScaleUnit where the namespace gets
     * created
     *
     * @param {boolean} [parameters.enabled] Whether or not the namespace is
     * currently enabled.
     *
     * @param {boolean} [parameters.critical] Whether or not the namespace is set
     * as Critical.
     *
     * @param {string} [parameters.dataCenter] Data center for the namespace
     *
     * @param {string} [parameters.namespaceType] The namespace type. Possible
     * values include: 'Messaging', 'NotificationHub'
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NamespaceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NamespaceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NamespaceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NamespaceResource>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;


    /**
     * Patches the existing namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to patch a Namespace
     * Resource.
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NamespaceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.NamespacePatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NamespaceResource>>;

    /**
     * Patches the existing namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters Parameters supplied to patch a Namespace
     * Resource.
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NamespaceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NamespaceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NamespaceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(resourceGroupName: string, namespaceName: string, parameters: models.NamespacePatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NamespaceResource>;
    patch(resourceGroupName: string, namespaceName: string, parameters: models.NamespacePatchParameters, callback: ServiceCallback<models.NamespaceResource>): void;
    patch(resourceGroupName: string, namespaceName: string, parameters: models.NamespacePatchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;


    /**
     * Deletes an existing namespace. This operation also removes all associated
     * notificationHubs under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * notificationHubs under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the description for the specified namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NamespaceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NamespaceResource>>;

    /**
     * Returns the description for the specified namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NamespaceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NamespaceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NamespaceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NamespaceResource>;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.NamespaceResource>): void;
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;


    /**
     * Creates an authorization rule for a namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {object} parameters.properties Properties of the Namespace
     * AuthorizationRules.
     *
     * @param {array} [parameters.properties.rights] The rights associated with the
     * rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleResource>>;

    /**
     * Creates an authorization rule for a namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {object} parameters.properties Properties of the Namespace
     * AuthorizationRules.
     *
     * @param {array} [parameters.properties.rights] The rights associated with the
     * rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleResource>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;


    /**
     * Deletes a namespace authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a namespace authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets an authorization rule for a namespace by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleResource>>;

    /**
     * Gets an authorization rule for a namespace by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} authorizationRuleName Authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleResource>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;


    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. If
     * resourceGroupName value is null the method lists all the namespaces within
     * subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NamespaceListResult>>;

    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. If
     * resourceGroupName value is null the method lists all the namespaces within
     * subscription
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NamespaceListResult>;
    list(resourceGroupName: string, callback: ServiceCallback<models.NamespaceListResult>): void;
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;


    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NamespaceListResult>>;

    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NamespaceListResult>;
    listAll(callback: ServiceCallback<models.NamespaceListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;


    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;


    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The connection string of the namespace
     * for the specified authorizationRule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleListResult>>;

    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The connection string of the namespace
     * for the specified authorizationRule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleListResult>;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;


    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The connection string of the namespace
     * for the specified authorizationRule.
     *
     * @param {object} parameters Parameters supplied to regenerate the Namespace
     * Authorization Rule Key.
     *
     * @param {string} [parameters.policyKey] Name of the key that has to be
     * regenerated for the Namespace/Notification Hub Authorization Rule. The value
     * can be Primary Key/Secondary Key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceListKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceListKeys>>;

    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} authorizationRuleName The connection string of the namespace
     * for the specified authorizationRule.
     *
     * @param {object} parameters Parameters supplied to regenerate the Namespace
     * Authorization Rule Key.
     *
     * @param {string} [parameters.policyKey] Name of the key that has to be
     * regenerated for the Namespace/Notification Hub Authorization Rule. The value
     * can be Primary Key/Secondary Key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceListKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceListKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceListKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceListKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;


    /**
     * Deletes an existing namespace. This operation also removes all associated
     * notificationHubs under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * notificationHubs under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NamespaceListResult>>;

    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NamespaceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;


    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NamespaceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NamespaceListResult>>;

    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NamespaceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NamespaceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NamespaceListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NamespaceListResult>;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;


    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * NotificationHubs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NotificationHubsManagementClient.
 */
export interface NotificationHubs {


    /**
     * Checks the availability of the given notificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters The notificationHub name.
     *
     * @param {string} parameters.name Resource name
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {boolean} [parameters.isAvailiable] True if the name is available and
     * can be used to create new Namespace/NotificationHub. Otherwise false.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckAvailabilityResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNotificationHubAvailabilityWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, parameters: models.CheckAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckAvailabilityResult>>;

    /**
     * Checks the availability of the given notificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} parameters The notificationHub name.
     *
     * @param {string} parameters.name Resource name
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {boolean} [parameters.isAvailiable] True if the name is available and
     * can be used to create new Namespace/NotificationHub. Otherwise false.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckAvailabilityResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckAvailabilityResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: models.CheckAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckAvailabilityResult>;
    checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: models.CheckAvailabilityParameters, callback: ServiceCallback<models.CheckAvailabilityResult>): void;
    checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: models.CheckAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckAvailabilityResult>): void;


    /**
     * Creates/Update a NotificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} parameters Parameters supplied to the create/update a
     * NotificationHub Resource.
     *
     * @param {string} [parameters.notificationHubCreateOrUpdateParametersName] The
     * NotificationHub name.
     *
     * @param {string} [parameters.registrationTtl] The RegistrationTtl of the
     * created NotificationHub
     *
     * @param {array} [parameters.authorizationRules] The AuthorizationRules of the
     * created NotificationHub
     *
     * @param {object} [parameters.apnsCredential] The ApnsCredential of the
     * created NotificationHub
     *
     * @param {string} [parameters.apnsCredential.apnsCertificate] The APNS
     * certificate.
     *
     * @param {string} [parameters.apnsCredential.certificateKey] The certificate
     * key.
     *
     * @param {string} [parameters.apnsCredential.endpoint] The endpoint of this
     * credential.
     *
     * @param {string} [parameters.apnsCredential.thumbprint] The APNS certificate
     * Thumbprint
     *
     * @param {string} [parameters.apnsCredential.keyId] A 10-character key
     * identifier (kid) key, obtained from your developer account
     *
     * @param {string} [parameters.apnsCredential.appName] The name of the
     * application
     *
     * @param {string} [parameters.apnsCredential.appId] The issuer (iss)
     * registered claim key, whose value is your 10-character Team ID, obtained
     * from your developer account
     *
     * @param {string} [parameters.apnsCredential.token] Provider Authentication
     * Token, obtained through your developer account
     *
     * @param {object} [parameters.wnsCredential] The WnsCredential of the created
     * NotificationHub
     *
     * @param {string} [parameters.wnsCredential.packageSid] The package ID for
     * this credential.
     *
     * @param {string} [parameters.wnsCredential.secretKey] The secret key.
     *
     * @param {string} [parameters.wnsCredential.windowsLiveEndpoint] The Windows
     * Live endpoint.
     *
     * @param {object} [parameters.gcmCredential] The GcmCredential of the created
     * NotificationHub
     *
     * @param {string} [parameters.gcmCredential.gcmEndpoint] The GCM endpoint.
     *
     * @param {string} [parameters.gcmCredential.googleApiKey] The Google API key.
     *
     * @param {object} [parameters.mpnsCredential] The MpnsCredential of the
     * created NotificationHub
     *
     * @param {string} [parameters.mpnsCredential.mpnsCertificate] The MPNS
     * certificate.
     *
     * @param {string} [parameters.mpnsCredential.certificateKey] The certificate
     * key for this credential.
     *
     * @param {string} [parameters.mpnsCredential.thumbprint] The MPNS certificate
     * Thumbprint
     *
     * @param {object} [parameters.admCredential] The AdmCredential of the created
     * NotificationHub
     *
     * @param {string} [parameters.admCredential.clientId] The client identifier.
     *
     * @param {string} [parameters.admCredential.clientSecret] The credential
     * secret access key.
     *
     * @param {string} [parameters.admCredential.authTokenUrl] The URL of the
     * authorization token.
     *
     * @param {object} [parameters.baiduCredential] The BaiduCredential of the
     * created NotificationHub
     *
     * @param {string} [parameters.baiduCredential.baiduApiKey] Baidu Api Key.
     *
     * @param {string} [parameters.baiduCredential.baiduEndPoint] Baidu Endpoint.
     *
     * @param {string} [parameters.baiduCredential.baiduSecretKey] Baidu Secret Key
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationHubResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: models.NotificationHubCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationHubResource>>;

    /**
     * Creates/Update a NotificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} parameters Parameters supplied to the create/update a
     * NotificationHub Resource.
     *
     * @param {string} [parameters.notificationHubCreateOrUpdateParametersName] The
     * NotificationHub name.
     *
     * @param {string} [parameters.registrationTtl] The RegistrationTtl of the
     * created NotificationHub
     *
     * @param {array} [parameters.authorizationRules] The AuthorizationRules of the
     * created NotificationHub
     *
     * @param {object} [parameters.apnsCredential] The ApnsCredential of the
     * created NotificationHub
     *
     * @param {string} [parameters.apnsCredential.apnsCertificate] The APNS
     * certificate.
     *
     * @param {string} [parameters.apnsCredential.certificateKey] The certificate
     * key.
     *
     * @param {string} [parameters.apnsCredential.endpoint] The endpoint of this
     * credential.
     *
     * @param {string} [parameters.apnsCredential.thumbprint] The APNS certificate
     * Thumbprint
     *
     * @param {string} [parameters.apnsCredential.keyId] A 10-character key
     * identifier (kid) key, obtained from your developer account
     *
     * @param {string} [parameters.apnsCredential.appName] The name of the
     * application
     *
     * @param {string} [parameters.apnsCredential.appId] The issuer (iss)
     * registered claim key, whose value is your 10-character Team ID, obtained
     * from your developer account
     *
     * @param {string} [parameters.apnsCredential.token] Provider Authentication
     * Token, obtained through your developer account
     *
     * @param {object} [parameters.wnsCredential] The WnsCredential of the created
     * NotificationHub
     *
     * @param {string} [parameters.wnsCredential.packageSid] The package ID for
     * this credential.
     *
     * @param {string} [parameters.wnsCredential.secretKey] The secret key.
     *
     * @param {string} [parameters.wnsCredential.windowsLiveEndpoint] The Windows
     * Live endpoint.
     *
     * @param {object} [parameters.gcmCredential] The GcmCredential of the created
     * NotificationHub
     *
     * @param {string} [parameters.gcmCredential.gcmEndpoint] The GCM endpoint.
     *
     * @param {string} [parameters.gcmCredential.googleApiKey] The Google API key.
     *
     * @param {object} [parameters.mpnsCredential] The MpnsCredential of the
     * created NotificationHub
     *
     * @param {string} [parameters.mpnsCredential.mpnsCertificate] The MPNS
     * certificate.
     *
     * @param {string} [parameters.mpnsCredential.certificateKey] The certificate
     * key for this credential.
     *
     * @param {string} [parameters.mpnsCredential.thumbprint] The MPNS certificate
     * Thumbprint
     *
     * @param {object} [parameters.admCredential] The AdmCredential of the created
     * NotificationHub
     *
     * @param {string} [parameters.admCredential.clientId] The client identifier.
     *
     * @param {string} [parameters.admCredential.clientSecret] The credential
     * secret access key.
     *
     * @param {string} [parameters.admCredential.authTokenUrl] The URL of the
     * authorization token.
     *
     * @param {object} [parameters.baiduCredential] The BaiduCredential of the
     * created NotificationHub
     *
     * @param {string} [parameters.baiduCredential.baiduApiKey] Baidu Api Key.
     *
     * @param {string} [parameters.baiduCredential.baiduEndPoint] Baidu Endpoint.
     *
     * @param {string} [parameters.baiduCredential.baiduSecretKey] Baidu Secret Key
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [parameters.sku] The sku of the created namespace
     *
     * @param {string} parameters.sku.name Name of the notification hub sku.
     * Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [parameters.sku.size] The Sku size
     *
     * @param {string} [parameters.sku.family] The Sku Family
     *
     * @param {number} [parameters.sku.capacity] The capacity of the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationHubResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationHubResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationHubResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: models.NotificationHubCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationHubResource>;
    createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: models.NotificationHubCreateOrUpdateParameters, callback: ServiceCallback<models.NotificationHubResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: models.NotificationHubCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubResource>): void;


    /**
     * Patch a NotificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to patch a
     * NotificationHub Resource.
     *
     * @param {string} [options.parameters.notificationHubPatchParametersName] The
     * NotificationHub name.
     *
     * @param {string} [options.parameters.registrationTtl] The RegistrationTtl of
     * the created NotificationHub
     *
     * @param {array} [options.parameters.authorizationRules] The
     * AuthorizationRules of the created NotificationHub
     *
     * @param {object} [options.parameters.apnsCredential] The ApnsCredential of
     * the created NotificationHub
     *
     * @param {string} [options.parameters.apnsCredential.apnsCertificate] The APNS
     * certificate.
     *
     * @param {string} [options.parameters.apnsCredential.certificateKey] The
     * certificate key.
     *
     * @param {string} [options.parameters.apnsCredential.endpoint] The endpoint of
     * this credential.
     *
     * @param {string} [options.parameters.apnsCredential.thumbprint] The APNS
     * certificate Thumbprint
     *
     * @param {string} [options.parameters.apnsCredential.keyId] A 10-character key
     * identifier (kid) key, obtained from your developer account
     *
     * @param {string} [options.parameters.apnsCredential.appName] The name of the
     * application
     *
     * @param {string} [options.parameters.apnsCredential.appId] The issuer (iss)
     * registered claim key, whose value is your 10-character Team ID, obtained
     * from your developer account
     *
     * @param {string} [options.parameters.apnsCredential.token] Provider
     * Authentication Token, obtained through your developer account
     *
     * @param {object} [options.parameters.wnsCredential] The WnsCredential of the
     * created NotificationHub
     *
     * @param {string} [options.parameters.wnsCredential.packageSid] The package ID
     * for this credential.
     *
     * @param {string} [options.parameters.wnsCredential.secretKey] The secret key.
     *
     * @param {string} [options.parameters.wnsCredential.windowsLiveEndpoint] The
     * Windows Live endpoint.
     *
     * @param {object} [options.parameters.gcmCredential] The GcmCredential of the
     * created NotificationHub
     *
     * @param {string} [options.parameters.gcmCredential.gcmEndpoint] The GCM
     * endpoint.
     *
     * @param {string} [options.parameters.gcmCredential.googleApiKey] The Google
     * API key.
     *
     * @param {object} [options.parameters.mpnsCredential] The MpnsCredential of
     * the created NotificationHub
     *
     * @param {string} [options.parameters.mpnsCredential.mpnsCertificate] The MPNS
     * certificate.
     *
     * @param {string} [options.parameters.mpnsCredential.certificateKey] The
     * certificate key for this credential.
     *
     * @param {string} [options.parameters.mpnsCredential.thumbprint] The MPNS
     * certificate Thumbprint
     *
     * @param {object} [options.parameters.admCredential] The AdmCredential of the
     * created NotificationHub
     *
     * @param {string} [options.parameters.admCredential.clientId] The client
     * identifier.
     *
     * @param {string} [options.parameters.admCredential.clientSecret] The
     * credential secret access key.
     *
     * @param {string} [options.parameters.admCredential.authTokenUrl] The URL of
     * the authorization token.
     *
     * @param {object} [options.parameters.baiduCredential] The BaiduCredential of
     * the created NotificationHub
     *
     * @param {string} [options.parameters.baiduCredential.baiduApiKey] Baidu Api
     * Key.
     *
     * @param {string} [options.parameters.baiduCredential.baiduEndPoint] Baidu
     * Endpoint.
     *
     * @param {string} [options.parameters.baiduCredential.baiduSecretKey] Baidu
     * Secret Key
     *
     * @param {string} [options.parameters.location] Resource location
     *
     * @param {object} [options.parameters.tags] Resource tags
     *
     * @param {object} [options.parameters.sku] The sku of the created namespace
     *
     * @param {string} options.parameters.sku.name Name of the notification hub
     * sku. Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [options.parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [options.parameters.sku.size] The Sku size
     *
     * @param {string} [options.parameters.sku.family] The Sku Family
     *
     * @param {number} [options.parameters.sku.capacity] The capacity of the
     * resource
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationHubResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { parameters? : models.NotificationHubPatchParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationHubResource>>;

    /**
     * Patch a NotificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Parameters supplied to patch a
     * NotificationHub Resource.
     *
     * @param {string} [options.parameters.notificationHubPatchParametersName] The
     * NotificationHub name.
     *
     * @param {string} [options.parameters.registrationTtl] The RegistrationTtl of
     * the created NotificationHub
     *
     * @param {array} [options.parameters.authorizationRules] The
     * AuthorizationRules of the created NotificationHub
     *
     * @param {object} [options.parameters.apnsCredential] The ApnsCredential of
     * the created NotificationHub
     *
     * @param {string} [options.parameters.apnsCredential.apnsCertificate] The APNS
     * certificate.
     *
     * @param {string} [options.parameters.apnsCredential.certificateKey] The
     * certificate key.
     *
     * @param {string} [options.parameters.apnsCredential.endpoint] The endpoint of
     * this credential.
     *
     * @param {string} [options.parameters.apnsCredential.thumbprint] The APNS
     * certificate Thumbprint
     *
     * @param {string} [options.parameters.apnsCredential.keyId] A 10-character key
     * identifier (kid) key, obtained from your developer account
     *
     * @param {string} [options.parameters.apnsCredential.appName] The name of the
     * application
     *
     * @param {string} [options.parameters.apnsCredential.appId] The issuer (iss)
     * registered claim key, whose value is your 10-character Team ID, obtained
     * from your developer account
     *
     * @param {string} [options.parameters.apnsCredential.token] Provider
     * Authentication Token, obtained through your developer account
     *
     * @param {object} [options.parameters.wnsCredential] The WnsCredential of the
     * created NotificationHub
     *
     * @param {string} [options.parameters.wnsCredential.packageSid] The package ID
     * for this credential.
     *
     * @param {string} [options.parameters.wnsCredential.secretKey] The secret key.
     *
     * @param {string} [options.parameters.wnsCredential.windowsLiveEndpoint] The
     * Windows Live endpoint.
     *
     * @param {object} [options.parameters.gcmCredential] The GcmCredential of the
     * created NotificationHub
     *
     * @param {string} [options.parameters.gcmCredential.gcmEndpoint] The GCM
     * endpoint.
     *
     * @param {string} [options.parameters.gcmCredential.googleApiKey] The Google
     * API key.
     *
     * @param {object} [options.parameters.mpnsCredential] The MpnsCredential of
     * the created NotificationHub
     *
     * @param {string} [options.parameters.mpnsCredential.mpnsCertificate] The MPNS
     * certificate.
     *
     * @param {string} [options.parameters.mpnsCredential.certificateKey] The
     * certificate key for this credential.
     *
     * @param {string} [options.parameters.mpnsCredential.thumbprint] The MPNS
     * certificate Thumbprint
     *
     * @param {object} [options.parameters.admCredential] The AdmCredential of the
     * created NotificationHub
     *
     * @param {string} [options.parameters.admCredential.clientId] The client
     * identifier.
     *
     * @param {string} [options.parameters.admCredential.clientSecret] The
     * credential secret access key.
     *
     * @param {string} [options.parameters.admCredential.authTokenUrl] The URL of
     * the authorization token.
     *
     * @param {object} [options.parameters.baiduCredential] The BaiduCredential of
     * the created NotificationHub
     *
     * @param {string} [options.parameters.baiduCredential.baiduApiKey] Baidu Api
     * Key.
     *
     * @param {string} [options.parameters.baiduCredential.baiduEndPoint] Baidu
     * Endpoint.
     *
     * @param {string} [options.parameters.baiduCredential.baiduSecretKey] Baidu
     * Secret Key
     *
     * @param {string} [options.parameters.location] Resource location
     *
     * @param {object} [options.parameters.tags] Resource tags
     *
     * @param {object} [options.parameters.sku] The sku of the created namespace
     *
     * @param {string} options.parameters.sku.name Name of the notification hub
     * sku. Possible values include: 'Free', 'Basic', 'Standard'
     *
     * @param {string} [options.parameters.sku.tier] The tier of particular sku
     *
     * @param {string} [options.parameters.sku.size] The Sku size
     *
     * @param {string} [options.parameters.sku.family] The Sku Family
     *
     * @param {number} [options.parameters.sku.capacity] The capacity of the
     * resource
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationHubResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationHubResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationHubResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { parameters? : models.NotificationHubPatchParameters, customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationHubResource>;
    patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.NotificationHubResource>): void;
    patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { parameters? : models.NotificationHubPatchParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubResource>): void;


    /**
     * Deletes a notification hub associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a notification hub associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationHubResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationHubResource>>;

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationHubResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationHubResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationHubResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationHubResource>;
    get(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.NotificationHubResource>): void;
    get(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubResource>): void;


    /**
     * test send a push notification
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Debug send parameters
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DebugSendResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    debugSendWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { parameters? : any, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DebugSendResponse>>;

    /**
     * test send a push notification
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] Debug send parameters
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DebugSendResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DebugSendResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DebugSendResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { parameters? : any, customHeaders? : { [headerName: string]: string; } }): Promise<models.DebugSendResponse>;
    debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.DebugSendResponse>): void;
    debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { parameters? : any, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DebugSendResponse>): void;


    /**
     * Creates/Updates an authorization rule for a NotificationHub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {object} parameters.properties Properties of the Namespace
     * AuthorizationRules.
     *
     * @param {array} [parameters.properties.rights] The rights associated with the
     * rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleResource>>;

    /**
     * Creates/Updates an authorization rule for a NotificationHub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} parameters The shared access authorization rule.
     *
     * @param {object} parameters.properties Properties of the Namespace
     * AuthorizationRules.
     *
     * @param {array} [parameters.properties.rights] The rights associated with the
     * rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleResource>;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;


    /**
     * Deletes a notificationHub authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a notificationHub authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName Authorization Rule Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets an authorization rule for a NotificationHub by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleResource>>;

    /**
     * Gets an authorization rule for a NotificationHub by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName authorization rule name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleResource>;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;


    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationHubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationHubListResult>>;

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationHubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationHubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationHubListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, namespaceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationHubListResult>;
    list(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.NotificationHubListResult>): void;
    list(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubListResult>): void;


    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleListResult>;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;


    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName The connection string of the
     * NotificationHub for the specified authorizationRule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceListKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceListKeys>>;

    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName The connection string of the
     * NotificationHub for the specified authorizationRule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceListKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceListKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceListKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceListKeys>;
    listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;


    /**
     * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization
     * Rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName The connection string of the
     * NotificationHub for the specified authorizationRule.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * NotificationHub Authorization Rule Key.
     *
     * @param {string} [parameters.policyKey] Name of the key that has to be
     * regenerated for the Namespace/Notification Hub Authorization Rule. The value
     * can be Primary Key/Secondary Key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceListKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeysWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceListKeys>>;

    /**
     * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization
     * Rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {string} authorizationRuleName The connection string of the
     * NotificationHub for the specified authorizationRule.
     *
     * @param {object} parameters Parameters supplied to regenerate the
     * NotificationHub Authorization Rule Key.
     *
     * @param {string} [parameters.policyKey] Name of the key that has to be
     * regenerated for the Namespace/Notification Hub Authorization Rule. The value
     * can be Primary Key/Secondary Key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceListKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceListKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceListKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceListKeys>;
    regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, callback: ServiceCallback<models.ResourceListKeys>): void;
    regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.PolicykeyResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;


    /**
     * Lists the PNS Credentials associated with a notification hub .
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PnsCredentialsResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPnsCredentialsWithHttpOperationResponse(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PnsCredentialsResource>>;

    /**
     * Lists the PNS Credentials associated with a notification hub .
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} namespaceName The namespace name.
     *
     * @param {string} notificationHubName The notification hub name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PnsCredentialsResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PnsCredentialsResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PnsCredentialsResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PnsCredentialsResource>;
    getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.PnsCredentialsResource>): void;
    getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PnsCredentialsResource>): void;


    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationHubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationHubListResult>>;

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationHubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationHubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationHubListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationHubListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NotificationHubListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubListResult>): void;


    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SharedAccessAuthorizationRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SharedAccessAuthorizationRuleListResult>>;

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SharedAccessAuthorizationRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SharedAccessAuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SharedAccessAuthorizationRuleListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAuthorizationRulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SharedAccessAuthorizationRuleListResult>;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}
