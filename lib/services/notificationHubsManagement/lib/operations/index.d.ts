/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Namespaces
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NotificationHubsManagementClient.
 */
export interface Namespaces {

    /**
     * Checks the availability of the given service namespace across all Windows
     * Azure subscriptions. This is useful because the domain name is created
     * based on the service namespace name.
     *
     * @param {object} parameters The namespace name.
     * 
     * @param {string} [parameters.name] Gets or sets name
     * 
     * @param {string} [parameters.location] Gets or sets location.
     * 
     * @param {object} [parameters.tags] Gets or sets tags.
     * 
     * @param {boolean} [parameters.isAvailiable] Gets or sets true if the name is
     * available and can be used to create new Namespace/NotificationHub.
     * Otherwise false.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkAvailability(parameters: models.CheckAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckAvailabilityResource>): void;
    checkAvailability(parameters: models.CheckAvailabilityParameters, callback: ServiceCallback<models.CheckAvailabilityResource>): void;

    /**
     * Creates/Updates a service namespace. Once created, this namespace's
     * resource manifest is immutable. This operation is idempotent.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} parameters Parameters supplied to create a Namespace
     * Resource.
     * 
     * @param {string} [parameters.location] Gets or sets Namespace data center
     * location.
     * 
     * @param {object} [parameters.tags] Gets or sets Namespace tags.
     * 
     * @param {object} [parameters.properties] Gets or sets properties of the
     * Namespace.
     * 
     * @param {string} [parameters.properties.name] The name of the namespace.
     * 
     * @param {string} [parameters.properties.provisioningState] Gets or sets
     * provisioning state of the Namespace.
     * 
     * @param {string} [parameters.properties.region] Specifies the targeted
     * region in which the namespace should be created. It can be any of the
     * following values: Australia EastAustralia SoutheastCentral USEast USEast
     * US 2West USNorth Central USSouth Central USEast AsiaSoutheast AsiaBrazil
     * SouthJapan EastJapan WestNorth EuropeWest Europe
     * 
     * @param {string} [parameters.properties.status] Status of the namespace. It
     * can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 =
     * Deleting
     * 
     * @param {date} [parameters.properties.createdAt] The time the namespace was
     * created.
     * 
     * @param {string} [parameters.properties.serviceBusEndpoint] Endpoint you can
     * use to perform NotificationHub operations.
     * 
     * @param {string} [parameters.properties.subscriptionId] The Id of the Azure
     * subscription associated with the namespace.
     * 
     * @param {string} [parameters.properties.scaleUnit] ScaleUnit where the
     * namespace gets created
     * 
     * @param {boolean} [parameters.properties.enabled] Whether or not the
     * namespace is currently enabled.
     * 
     * @param {boolean} [parameters.properties.critical] Whether or not the
     * namespace is set as Critical.
     * 
     * @param {string} [parameters.properties.namespaceType] Gets or sets the
     * namespace type. Possible values include: 'Messaging', 'NotificationHub'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: models.NamespaceCreateOrUpdateParameters, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * notificationHubs under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Deletes an existing namespace. This operation also removes all associated
     * notificationHubs under the namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the description for the specified namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceResource>): void;
    get(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.NamespaceResource>): void;

    /**
     * Creates an authorization rule for a namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} authorizationRuleName Aauthorization Rule Name.
     * 
     * @param {object} parameters The shared access authorization rule.
     * 
     * @param {string} [parameters.location] Gets or sets Namespace data center
     * location.
     * 
     * @param {string} [parameters.name] Gets or sets Name of the Namespace
     * AuthorizationRule.
     * 
     * @param {object} [parameters.properties] Gets or sets properties of the
     * Namespace AuthorizationRules.
     * 
     * @param {string} [parameters.properties.primaryKey] The primary key that was
     * used.
     * 
     * @param {string} [parameters.properties.secondaryKey] The secondary key that
     * was used.
     * 
     * @param {string} [parameters.properties.keyName] The name of the key that
     * was used.
     * 
     * @param {string} [parameters.properties.claimType] The type of the claim.
     * 
     * @param {string} [parameters.properties.claimValue] The value of the claim.
     * 
     * @param {array} [parameters.properties.rights] The rights associated with
     * the rule.
     * 
     * @param {date} [parameters.properties.createdTime] The time at which the
     * authorization rule was created.
     * 
     * @param {date} [parameters.properties.modifiedTime] The most recent time the
     * rule was updated.
     * 
     * @param {number} [parameters.properties.revision] The revision number for
     * the rule.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes a namespace authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} authorizationRuleName Authorization Rule Name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an authorization rule for a namespace by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name
     * 
     * @param {string} authorizationRuleName Authorization rule name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * The Get Operation Status operation returns the status of the specified
     * operation. After calling an asynchronous operation, you can call Get
     * Operation Status to determine whether the operation has succeeded, failed,
     * or is still in progress.
     *
     * @param {string} operationStatusLink Location value returned by the Begin
     * operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLongRunningOperationStatus(operationStatusLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    getLongRunningOperationStatus(operationStatusLink: string, callback: ServiceCallback<void>): void;

    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} resourceGroupName The name of the resource group. If
     * resourceGroupName value is null the method lists all the namespaces within
     * subscription
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    list(resourceGroupName: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listAll(callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} authorizationRuleName The connection string of the
     * namespace for the specified authorizationRule.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Lists all the available namespaces within the subscription irrespective of
     * the resourceGroups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAllNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NamespaceListResult>): void;
    listAllNext(nextPageLink: string, callback: ServiceCallback<models.NamespaceListResult>): void;

    /**
     * Gets the authorization rules for a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}

/**
 * @class
 * NotificationHubs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the NotificationHubsManagementClient.
 */
export interface NotificationHubs {

    /**
     * Checks the availability of the given notificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} parameters The notificationHub name.
     * 
     * @param {string} [parameters.name] Gets or sets name
     * 
     * @param {string} [parameters.location] Gets or sets location.
     * 
     * @param {object} [parameters.tags] Gets or sets tags.
     * 
     * @param {boolean} [parameters.isAvailiable] Gets or sets true if the name is
     * available and can be used to create new Namespace/NotificationHub.
     * Otherwise false.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkAvailability(resourceGroupName: string, namespaceName: string, parameters: models.CheckAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckAvailabilityResource>): void;
    checkAvailability(resourceGroupName: string, namespaceName: string, parameters: models.CheckAvailabilityParameters, callback: ServiceCallback<models.CheckAvailabilityResource>): void;

    /**
     * Creates/Update a NotificationHub in a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {object} parameters Parameters supplied to the create/update a
     * NotificationHub Resource.
     * 
     * @param {string} [parameters.location] Gets or sets NotificationHub data
     * center location.
     * 
     * @param {object} [parameters.tags] Gets or sets NotificationHub tags.
     * 
     * @param {object} [parameters.properties] Gets or sets properties of the
     * NotificationHub.
     * 
     * @param {string} [parameters.properties.name] The NotificationHub name.
     * 
     * @param {string} [parameters.properties.registrationTtl] The RegistrationTtl
     * of the created NotificationHub
     * 
     * @param {array} [parameters.properties.authorizationRules] The
     * AuthorizationRules of the created NotificationHub
     * 
     * @param {object} [parameters.properties.apnsCredential] The ApnsCredential
     * of the created NotificationHub
     * 
     * @param {object} [parameters.properties.apnsCredential.properties] Gets or
     * sets properties of NotificationHub ApnsCredential.
     * 
     * @param {string}
     * [parameters.properties.apnsCredential.properties.apnsCertificate] Gets or
     * sets the APNS certificate.
     * 
     * @param {string}
     * [parameters.properties.apnsCredential.properties.certificateKey] Gets or
     * sets the certificate key.
     * 
     * @param {string} [parameters.properties.apnsCredential.properties.endpoint]
     * Gets or sets the endpoint of this credential.
     * 
     * @param {string}
     * [parameters.properties.apnsCredential.properties.thumbprint] Gets or sets
     * the Apns certificate Thumbprint
     * 
     * @param {object} [parameters.properties.wnsCredential] The WnsCredential of
     * the created NotificationHub
     * 
     * @param {object} [parameters.properties.wnsCredential.properties] Gets or
     * sets properties of NotificationHub WnsCredential.
     * 
     * @param {string} [parameters.properties.wnsCredential.properties.packageSid]
     * Gets or sets the package ID for this credential.
     * 
     * @param {string} [parameters.properties.wnsCredential.properties.secretKey]
     * Gets or sets the secret key.
     * 
     * @param {string}
     * [parameters.properties.wnsCredential.properties.windowsLiveEndpoint] Gets
     * or sets the Windows Live endpoint.
     * 
     * @param {object} [parameters.properties.gcmCredential] The GcmCredential of
     * the created NotificationHub
     * 
     * @param {object} [parameters.properties.gcmCredential.properties] Gets or
     * sets properties of NotificationHub GcmCredential.
     * 
     * @param {string}
     * [parameters.properties.gcmCredential.properties.gcmEndpoint] Gets or sets
     * the GCM endpoint.
     * 
     * @param {string}
     * [parameters.properties.gcmCredential.properties.googleApiKey] Gets or sets
     * the Google API key.
     * 
     * @param {object} [parameters.properties.mpnsCredential] The MpnsCredential
     * of the created NotificationHub
     * 
     * @param {object} [parameters.properties.mpnsCredential.properties] Gets or
     * sets properties of NotificationHub MpnsCredential.
     * 
     * @param {string}
     * [parameters.properties.mpnsCredential.properties.mpnsCertificate] Gets or
     * sets the MPNS certificate.
     * 
     * @param {string}
     * [parameters.properties.mpnsCredential.properties.certificateKey] Gets or
     * sets the certificate key for this credential.
     * 
     * @param {string}
     * [parameters.properties.mpnsCredential.properties.thumbprint] Gets or sets
     * the Mpns certificate Thumbprint
     * 
     * @param {object} [parameters.properties.admCredential] The AdmCredential of
     * the created NotificationHub
     * 
     * @param {object} [parameters.properties.admCredential.properties] Gets or
     * sets properties of NotificationHub AdmCredential.
     * 
     * @param {string} [parameters.properties.admCredential.properties.clientId]
     * Gets or sets the client identifier.
     * 
     * @param {string}
     * [parameters.properties.admCredential.properties.clientSecret] Gets or sets
     * the credential secret access key.
     * 
     * @param {string}
     * [parameters.properties.admCredential.properties.authTokenUrl] Gets or sets
     * the URL of the authorization token.
     * 
     * @param {object} [parameters.properties.baiduCredential] The BaiduCredential
     * of the created NotificationHub
     * 
     * @param {object} [parameters.properties.baiduCredential.properties] Gets or
     * sets properties of NotificationHub BaiduCredential.
     * 
     * @param {string}
     * [parameters.properties.baiduCredential.properties.baiduApiKey] Get or Set
     * Baidu Api Key.
     * 
     * @param {string}
     * [parameters.properties.baiduCredential.properties.baiduEndPoint] Get or
     * Set Baidu Endpoint.
     * 
     * @param {string}
     * [parameters.properties.baiduCredential.properties.baiduSecretKey] Get or
     * Set Baidu Secret Key
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: models.NotificationHubCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubResource>): void;
    createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: models.NotificationHubCreateOrUpdateParameters, callback: ServiceCallback<models.NotificationHubResource>): void;

    /**
     * Deletes a notification hub associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<void>): void;

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubResource>): void;
    get(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.NotificationHubResource>): void;

    /**
     * Creates/Updates an authorization rule for a NotificationHub
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {string} authorizationRuleName Authorization Rule Name.
     * 
     * @param {object} parameters The shared access authorization rule.
     * 
     * @param {string} [parameters.location] Gets or sets Namespace data center
     * location.
     * 
     * @param {string} [parameters.name] Gets or sets Name of the Namespace
     * AuthorizationRule.
     * 
     * @param {object} [parameters.properties] Gets or sets properties of the
     * Namespace AuthorizationRules.
     * 
     * @param {string} [parameters.properties.primaryKey] The primary key that was
     * used.
     * 
     * @param {string} [parameters.properties.secondaryKey] The secondary key that
     * was used.
     * 
     * @param {string} [parameters.properties.keyName] The name of the key that
     * was used.
     * 
     * @param {string} [parameters.properties.claimType] The type of the claim.
     * 
     * @param {string} [parameters.properties.claimValue] The value of the claim.
     * 
     * @param {array} [parameters.properties.rights] The rights associated with
     * the rule.
     * 
     * @param {date} [parameters.properties.createdTime] The time at which the
     * authorization rule was created.
     * 
     * @param {date} [parameters.properties.modifiedTime] The most recent time the
     * rule was updated.
     * 
     * @param {number} [parameters.properties.revision] The revision number for
     * the rule.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Deletes a notificationHub authorization rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {string} authorizationRuleName Authorization Rule Name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets an authorization rule for a NotificationHub by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {string} authorizationRuleName authorization rule name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleResource>): void;

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceGroupName: string, namespaceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubListResult>): void;
    list(resourceGroupName: string, namespaceName: string, callback: ServiceCallback<models.NotificationHubListResult>): void;

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;

    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {string} authorizationRuleName The connection string of the
     * NotificationHub for the specified authorizationRule.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceListKeys>): void;
    listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: ServiceCallback<models.ResourceListKeys>): void;

    /**
     * Lists the PNS Credentials associated with a notification hub .
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} namespaceName The namespace name.
     * 
     * @param {string} notificationHubName The notification hub name.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubResource>): void;
    getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: ServiceCallback<models.NotificationHubResource>): void;

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationHubListResult>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.NotificationHubListResult>): void;

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAuthorizationRulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
    listAuthorizationRulesNext(nextPageLink: string, callback: ServiceCallback<models.SharedAccessAuthorizationRuleListResult>): void;
}
