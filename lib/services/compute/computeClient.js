/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty: false */

// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var xml = require('xml2js');
var util = require('util');
var js2xml = require('../../util/js2xml');
var Service = require('../core/service');
var WebResource = require('../../http/webresource');

/**
 * The Service Management API provides programmatic access to much of the
 * functionality available through the Management Portal. The Service
 * Management API is a REST API. All API operations are performed over SSL and
 * mutually authenticated using X.509 v3 certificates.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/ee460799.aspx for more
 * information)
 */
var ComputeManagementClient = (function() {
  /**
   * Initializes a new instance of the ComputeManagementClient class.
   *
   * @constructor
   *
   * @param {SubscriptionCloudCredentials} credentials - When you create a
   * Windows Azure subscription, it is uniquely identified by a subscription
   * ID. The subscription ID forms part of the URI for every call that you
   * make to the Service Management API.  The Windows Azure Service
   * ManagementAPI use mutual authentication of management certificates over
   * SSL to ensure that a request made to the service is secure.  No anonymous
   * requests are allowed.
   *
   * @param {String} baseUri - The URI used as the base for all Service
   * Management requests.
   */
  function ComputeManagementClient(credentials, baseUri) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    ComputeManagementClient['super_'].call(this, credentials);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    this.deployments = new DeploymentOperations(this);
    this.hostedServices = new HostedServiceOperations(this);
    this.operatingSystems = new OperatingSystemOperations(this);
    this.serviceCertificates = new ServiceCertificateOperations(this);
    this.virtualMachineDisks = new VirtualMachineDiskOperations(this);
    this.virtualMachineImages = new VirtualMachineImageOperations(this);
    this.virtualMachines = new VirtualMachineOperations(this);
  }
  
  util.inherits(ComputeManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of thespecified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
   * more information)
   *
   * @param {String} requestId - The request ID for the request you wish to
   * track. The request ID is returned in the x-ms-request-id response header
   * for every request.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  ComputeManagementClient.prototype.getOperationStatus = function(requestId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (requestId === null || requestId === undefined) {
      return callback(new Error('requestId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + '/' + this.credentials.subscriptionId + '/operations/' + requestId;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var operationElement = js2xml.getElement(responseDoc, responseDoc, 'OPERATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (operationElement) {
          var idElement = js2xml.getElement(responseDoc, operationElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, operationElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var httpStatusCodeElement = js2xml.getElement(responseDoc, operationElement, 'HTTPSTATUSCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpStatusCodeElement) {
            var httpStatusCodeInstance = httpStatusCodeElement;
            result.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorElement = js2xml.getElement(responseDoc, operationElement, 'ERROR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (errorElement) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeElement = js2xml.getElement(responseDoc, errorElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (codeElement) {
              var codeInstance = codeElement;
              errorInstance.code = codeInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, errorElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              errorInstance.message = messageInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return ComputeManagementClient;
})();
exports.ComputeManagementClient = ComputeManagementClient;

/**
 * The Service Management API includes operations for managing the deployments
 * beneath your subscription.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for more
 * information)
 */
var DeploymentOperations = (function() {
  /**
   * Initializes a new instance of the DeploymentOperations class.
   *
   * @constructor
   *
   * @param {ComputeManagementClient} client - Reference to the service client.
   */
  function DeploymentOperations(client) {
    this.client = client;
  }
  
  /**
   * The Change Deployment Configuration operation initiates a change to the
   * deployment configuration.  The Change Deployment Configuration operation
   * is an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status.  For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to change deployment
   * configuration for.
   *
   * @param {String} deploymentName - The deployment to change configuration
   * for.
   *
   * @param {DeploymentChangeConfigurationParameters} parameters - Parameters
   * supplied to the Change Configuration Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginChangingConfigurationByName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.configuration === null || parameters.configuration === undefined) {
      return callback(new Error('parameters.configuration cannot be null.'));
    }
    if (parameters.extensionConfiguration) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.extensionConfiguration.allRoles.length; loweredIndex1 = loweredIndex1 + 1) {
        var allRolesParameterItem = parameters.extensionConfiguration.allRoles[loweredIndex1];
        if (allRolesParameterItem.id === null || allRolesParameterItem.id === undefined) {
          return callback(new Error('parameters.extensionConfiguration.allRoles.id cannot be null.'));
        }
      }
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.extensionConfiguration.namedRoles.length; loweredIndex2 = loweredIndex2 + 1) {
        var namedRolesParameterItem = parameters.extensionConfiguration.namedRoles[loweredIndex2];
        if (namedRolesParameterItem.extensions === null || namedRolesParameterItem.extensions === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions cannot be null.'));
        }
        for (var loweredIndex3 = 0; loweredIndex3 < namedRolesParameterItem.extensions.length; loweredIndex3 = loweredIndex3 + 1) {
          var extensionsParameterItem = namedRolesParameterItem.extensions[loweredIndex3];
          if (extensionsParameterItem.id === null || extensionsParameterItem.id === undefined) {
            return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions.id cannot be null.'));
          }
        }
        if (namedRolesParameterItem.roleName === null || namedRolesParameterItem.roleName === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.roleName cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/?comp=config';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var changeConfigurationElement = js2xml.createElement('ChangeConfiguration', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, changeConfigurationElement);
    
    var configurationElement = js2xml.createElement('Configuration', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(configurationElement, new Buffer(parameters.configuration).toString('base64'));
    js2xml.addChildElement(changeConfigurationElement, configurationElement);
    
    if (parameters.treatWarningsAsError) {
      var treatWarningsAsErrorElement = js2xml.createElement('TreatWarningsAsError', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(treatWarningsAsErrorElement, parameters.treatWarningsAsError.toString());
      js2xml.addChildElement(changeConfigurationElement, treatWarningsAsErrorElement);
    }
    
    if (parameters.mode) {
      var modeElement = js2xml.createElement('Mode', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(modeElement, parameters.mode ? parameters.mode.toString() : 'Auto');
      js2xml.addChildElement(changeConfigurationElement, modeElement);
    }
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(changeConfigurationElement, extendedPropertiesDictionaryElement);
    }
    
    if (parameters.extensionConfiguration) {
      var extensionConfigurationElement = js2xml.createElement('ExtensionConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(changeConfigurationElement, extensionConfigurationElement);
      
      if (parameters.extensionConfiguration.allRoles) {
        var allRolesSequenceElement = js2xml.createElement('AllRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.extensionConfiguration.allRoles.length; loweredIndex4 = loweredIndex4 + 1) {
          var allRolesItem = parameters.extensionConfiguration.allRoles[loweredIndex4];
          var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(allRolesSequenceElement, extensionElement);
          
          var idElement = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(idElement, allRolesItem.id);
          js2xml.addChildElement(extensionElement, idElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, allRolesSequenceElement);
      }
      
      if (parameters.extensionConfiguration.namedRoles) {
        var namedRolesSequenceElement = js2xml.createElement('NamedRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex5 = 0; loweredIndex5 < parameters.extensionConfiguration.namedRoles.length; loweredIndex5 = loweredIndex5 + 1) {
          var namedRolesItem = parameters.extensionConfiguration.namedRoles[loweredIndex5];
          var roleElement = js2xml.createElement('Role', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(namedRolesSequenceElement, roleElement);
          
          var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(roleNameElement, namedRolesItem.roleName);
          js2xml.addChildElement(roleElement, roleNameElement);
          
          var extensionsSequenceElement = js2xml.createElement('Extensions', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex6 = 0; loweredIndex6 < namedRolesItem.extensions.length; loweredIndex6 = loweredIndex6 + 1) {
            var extensionsItem = namedRolesItem.extensions[loweredIndex6];
            var extensionElement2 = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(extensionsSequenceElement, extensionElement2);
            
            var idElement2 = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(idElement2, extensionsItem.id);
            js2xml.addChildElement(extensionElement2, idElement2);
          }
          js2xml.addChildElement(roleElement, extensionsSequenceElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, namedRolesSequenceElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Change Deployment Configuration operation initiates a change to the
   * deployment configuration.  The Change Deployment Configuration operation
   * is an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status.  For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to change deployment
   * configuration for.
   *
   * @param {DeploymentSlot} deploymentSlot - The slot to change deployment
   * configuration for.
   *
   * @param {DeploymentChangeConfigurationParameters} parameters - Parameters
   * supplied to the Change Configuration Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginChangingConfigurationBySlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.configuration === null || parameters.configuration === undefined) {
      return callback(new Error('parameters.configuration cannot be null.'));
    }
    if (parameters.extensionConfiguration) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.extensionConfiguration.allRoles.length; loweredIndex1 = loweredIndex1 + 1) {
        var allRolesParameterItem = parameters.extensionConfiguration.allRoles[loweredIndex1];
        if (allRolesParameterItem.id === null || allRolesParameterItem.id === undefined) {
          return callback(new Error('parameters.extensionConfiguration.allRoles.id cannot be null.'));
        }
      }
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.extensionConfiguration.namedRoles.length; loweredIndex2 = loweredIndex2 + 1) {
        var namedRolesParameterItem = parameters.extensionConfiguration.namedRoles[loweredIndex2];
        if (namedRolesParameterItem.extensions === null || namedRolesParameterItem.extensions === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions cannot be null.'));
        }
        for (var loweredIndex3 = 0; loweredIndex3 < namedRolesParameterItem.extensions.length; loweredIndex3 = loweredIndex3 + 1) {
          var extensionsParameterItem = namedRolesParameterItem.extensions[loweredIndex3];
          if (extensionsParameterItem.id === null || extensionsParameterItem.id === undefined) {
            return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions.id cannot be null.'));
          }
        }
        if (namedRolesParameterItem.roleName === null || namedRolesParameterItem.roleName === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.roleName cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '/?comp=config';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var changeConfigurationElement = js2xml.createElement('ChangeConfiguration', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, changeConfigurationElement);
    
    var configurationElement = js2xml.createElement('Configuration', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(configurationElement, new Buffer(parameters.configuration).toString('base64'));
    js2xml.addChildElement(changeConfigurationElement, configurationElement);
    
    if (parameters.treatWarningsAsError) {
      var treatWarningsAsErrorElement = js2xml.createElement('TreatWarningsAsError', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(treatWarningsAsErrorElement, parameters.treatWarningsAsError.toString());
      js2xml.addChildElement(changeConfigurationElement, treatWarningsAsErrorElement);
    }
    
    if (parameters.mode) {
      var modeElement = js2xml.createElement('Mode', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(modeElement, parameters.mode ? parameters.mode.toString() : 'Auto');
      js2xml.addChildElement(changeConfigurationElement, modeElement);
    }
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(changeConfigurationElement, extendedPropertiesDictionaryElement);
    }
    
    if (parameters.extensionConfiguration) {
      var extensionConfigurationElement = js2xml.createElement('ExtensionConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(changeConfigurationElement, extensionConfigurationElement);
      
      if (parameters.extensionConfiguration.allRoles) {
        var allRolesSequenceElement = js2xml.createElement('AllRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.extensionConfiguration.allRoles.length; loweredIndex4 = loweredIndex4 + 1) {
          var allRolesItem = parameters.extensionConfiguration.allRoles[loweredIndex4];
          var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(allRolesSequenceElement, extensionElement);
          
          var idElement = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(idElement, allRolesItem.id);
          js2xml.addChildElement(extensionElement, idElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, allRolesSequenceElement);
      }
      
      if (parameters.extensionConfiguration.namedRoles) {
        var namedRolesSequenceElement = js2xml.createElement('NamedRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex5 = 0; loweredIndex5 < parameters.extensionConfiguration.namedRoles.length; loweredIndex5 = loweredIndex5 + 1) {
          var namedRolesItem = parameters.extensionConfiguration.namedRoles[loweredIndex5];
          var roleElement = js2xml.createElement('Role', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(namedRolesSequenceElement, roleElement);
          
          var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(roleNameElement, namedRolesItem.roleName);
          js2xml.addChildElement(roleElement, roleNameElement);
          
          var extensionsSequenceElement = js2xml.createElement('Extensions', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex6 = 0; loweredIndex6 < namedRolesItem.extensions.length; loweredIndex6 = loweredIndex6 + 1) {
            var extensionsItem = namedRolesItem.extensions[loweredIndex6];
            var extensionElement2 = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(extensionsSequenceElement, extensionElement2);
            
            var idElement2 = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(idElement2, extensionsItem.id);
            js2xml.addChildElement(extensionElement2, idElement2);
          }
          js2xml.addChildElement(roleElement, extensionsSequenceElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, namedRolesSequenceElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Create Deployment operation uploads a new service package and creates
   * a new deployment in the staging or production environments.  The Create
   * Deployment operation is an asynchronous operation. To determine whether
   * the management service has finished processing the request, call Get
   * Operation Status. For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to create a deployment for.
   *
   * @param {DeploymentSlot} deploymentSlot - The slot to create a deployment
   * for.
   *
   * @param {DeploymentCreateParameters} parameters - Parameters supplied to
   * the Create Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginCreating = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.configuration === null || parameters.configuration === undefined) {
      return callback(new Error('parameters.configuration cannot be null.'));
    }
    if (parameters.extensionConfiguration) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.extensionConfiguration.allRoles.length; loweredIndex1 = loweredIndex1 + 1) {
        var allRolesParameterItem = parameters.extensionConfiguration.allRoles[loweredIndex1];
        if (allRolesParameterItem.id === null || allRolesParameterItem.id === undefined) {
          return callback(new Error('parameters.extensionConfiguration.allRoles.id cannot be null.'));
        }
      }
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.extensionConfiguration.namedRoles.length; loweredIndex2 = loweredIndex2 + 1) {
        var namedRolesParameterItem = parameters.extensionConfiguration.namedRoles[loweredIndex2];
        if (namedRolesParameterItem.extensions === null || namedRolesParameterItem.extensions === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions cannot be null.'));
        }
        for (var loweredIndex3 = 0; loweredIndex3 < namedRolesParameterItem.extensions.length; loweredIndex3 = loweredIndex3 + 1) {
          var extensionsParameterItem = namedRolesParameterItem.extensions[loweredIndex3];
          if (extensionsParameterItem.id === null || extensionsParameterItem.id === undefined) {
            return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions.id cannot be null.'));
          }
        }
        if (namedRolesParameterItem.roleName === null || namedRolesParameterItem.roleName === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.roleName cannot be null.'));
        }
      }
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.label.length > 100) {
      return callback(new Error('parameters.label is outside the valid range.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    if (parameters.packageUri === null || parameters.packageUri === undefined) {
      return callback(new Error('parameters.packageUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var createDeploymentElement = js2xml.createElement('CreateDeployment', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, createDeploymentElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, parameters.name);
    js2xml.addChildElement(createDeploymentElement, nameElement);
    
    var packageUrlElement = js2xml.createElement('PackageUrl', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(packageUrlElement, parameters.packageUri);
    js2xml.addChildElement(createDeploymentElement, packageUrlElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
    js2xml.addChildElement(createDeploymentElement, labelElement);
    
    var configurationElement = js2xml.createElement('Configuration', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(configurationElement, new Buffer(parameters.configuration).toString('base64'));
    js2xml.addChildElement(createDeploymentElement, configurationElement);
    
    if (parameters.startDeployment) {
      var startDeploymentElement = js2xml.createElement('StartDeployment', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(startDeploymentElement, parameters.startDeployment.toString());
      js2xml.addChildElement(createDeploymentElement, startDeploymentElement);
    }
    
    if (parameters.treatWarningsAsError) {
      var treatWarningsAsErrorElement = js2xml.createElement('TreatWarningsAsError', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(treatWarningsAsErrorElement, parameters.treatWarningsAsError.toString());
      js2xml.addChildElement(createDeploymentElement, treatWarningsAsErrorElement);
    }
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(createDeploymentElement, extendedPropertiesDictionaryElement);
    }
    
    if (parameters.extensionConfiguration) {
      var extensionConfigurationElement = js2xml.createElement('ExtensionConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(createDeploymentElement, extensionConfigurationElement);
      
      if (parameters.extensionConfiguration.allRoles) {
        var allRolesSequenceElement = js2xml.createElement('AllRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.extensionConfiguration.allRoles.length; loweredIndex4 = loweredIndex4 + 1) {
          var allRolesItem = parameters.extensionConfiguration.allRoles[loweredIndex4];
          var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(allRolesSequenceElement, extensionElement);
          
          var idElement = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(idElement, allRolesItem.id);
          js2xml.addChildElement(extensionElement, idElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, allRolesSequenceElement);
      }
      
      if (parameters.extensionConfiguration.namedRoles) {
        var namedRolesSequenceElement = js2xml.createElement('NamedRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex5 = 0; loweredIndex5 < parameters.extensionConfiguration.namedRoles.length; loweredIndex5 = loweredIndex5 + 1) {
          var namedRolesItem = parameters.extensionConfiguration.namedRoles[loweredIndex5];
          var roleElement = js2xml.createElement('Role', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(namedRolesSequenceElement, roleElement);
          
          var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(roleNameElement, namedRolesItem.roleName);
          js2xml.addChildElement(roleElement, roleNameElement);
          
          var extensionsSequenceElement = js2xml.createElement('Extensions', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex6 = 0; loweredIndex6 < namedRolesItem.extensions.length; loweredIndex6 = loweredIndex6 + 1) {
            var extensionsItem = namedRolesItem.extensions[loweredIndex6];
            var extensionElement2 = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(extensionsSequenceElement, extensionElement2);
            
            var idElement2 = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(idElement2, extensionsItem.id);
            js2xml.addChildElement(extensionElement2, idElement2);
          }
          js2xml.addChildElement(roleElement, extensionsSequenceElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, namedRolesSequenceElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Deployment operation deletes the specified deployment.  The
   * Delete Deployment operation is an asynchronous operation. To determine
   * whether the Management service has finished processing the request, call
   * Get Operation Status. For more information on asynchronous operations,
   * see Tracking Asynchronous Service Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginDeletingByName = function(serviceName, deploymentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Deployment operation deletes the specified deployment.  The
   * Delete Deployment operation is an asynchronous operation. To determine
   * whether the Management service has finished processing the request, call
   * Get Operation Status. For more information on asynchronous operations,
   * see Tracking Asynchronous Service Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginDeletingBySlot = function(serviceName, deploymentSlot, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reboot Role Instance operation requests a reboot of a role instance
   * that is running in a deployment.  The Reboot Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginRebootingRoleInstanceByDeploymentName = function(serviceName, deploymentName, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (roleInstanceName === null || roleInstanceName === undefined) {
      return callback(new Error('roleInstanceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roleinstances/' + roleInstanceName + '?comp=reboot';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reboot Role Instance operation requests a reboot of a role instance
   * that is running in a deployment.  The Reboot Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginRebootingRoleInstanceByDeploymentSlot = function(serviceName, deploymentSlot, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (roleInstanceName === null || roleInstanceName === undefined) {
      return callback(new Error('roleInstanceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '/roleinstances/' + roleInstanceName + '?comp=reboot';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reimage Role Instance operation requests a reimage of a role instance
   * that is running in a deployment.  The Reimage Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginReimagingRoleInstanceByDeploymentName = function(serviceName, deploymentName, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (roleInstanceName === null || roleInstanceName === undefined) {
      return callback(new Error('roleInstanceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roleinstances/' + roleInstanceName + '?comp=reimage';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reimage Role Instance operation requests a reimage of a role instance
   * that is running in a deployment.  The Reimage Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginReimagingRoleInstanceByDeploymentSlot = function(serviceName, deploymentSlot, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (roleInstanceName === null || roleInstanceName === undefined) {
      return callback(new Error('roleInstanceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '/roleinstances/' + roleInstanceName + '?comp=reimage';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Swap Deployment operation initiates a virtual IP address swap between
   * the staging and production deployment environments for a service. If the
   * service is currently running in the staging environment, it will be
   * swapped to the production environment. If it is running in the production
   * environment, it will be swapped to staging. For more information on this
   * type of upgrade, see Performing Virtual IP Swap Upgrades.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {DeploymentSwapParameters} parameters - Parameters supplied to the
   * Swap Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginSwapping = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.sourceDeployment === null || parameters.sourceDeployment === undefined) {
      return callback(new Error('parameters.sourceDeployment cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var swapElement = js2xml.createElement('Swap', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, swapElement);
    
    if (parameters.productionDeployment) {
      var productionElement = js2xml.createElement('Production', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(productionElement, parameters.productionDeployment);
      js2xml.addChildElement(swapElement, productionElement);
    }
    
    var sourceDeploymentElement = js2xml.createElement('SourceDeployment', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(sourceDeploymentElement, parameters.sourceDeployment);
    js2xml.addChildElement(swapElement, sourceDeploymentElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Update Deployment Status operation initiates a change in the running
   * status of a deployment. The status of a deployment can be running or
   * suspended.  The Update Deployment Status operation is an asynchronous
   * operation. To determine whether the Management service has finished
   * processing the request, call Get Operation Status. For more information
   * on asynchronous operations, see Tracking Asynchronous Service Management
   * Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {DeploymentUpdateStatusParameters} parameters - Parameters supplied
   * to the Update Deployment Status operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginUpdatingStatusByDeploymentName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/?comp=status';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var updateDeploymentStatusElement = js2xml.createElement('UpdateDeploymentStatus', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, updateDeploymentStatusElement);
    
    var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(statusElement, parameters.status ? parameters.status.toString() : 'Running');
    js2xml.addChildElement(updateDeploymentStatusElement, statusElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Update Deployment Status operation initiates a change in the running
   * status of a deployment. The status of a deployment can be running or
   * suspended.  The Update Deployment Status operation is an asynchronous
   * operation. To determine whether the Management service has finished
   * processing the request, call Get Operation Status. For more information
   * on asynchronous operations, see Tracking Asynchronous Service Management
   * Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {DeploymentUpdateStatusParameters} parameters - Parameters supplied
   * to the Update Deployment Status operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginUpdatingStatusByDeploymentSlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '/?comp=status';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var updateDeploymentStatusElement = js2xml.createElement('UpdateDeploymentStatus', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, updateDeploymentStatusElement);
    
    var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(statusElement, parameters.status ? parameters.status.toString() : 'Running');
    js2xml.addChildElement(updateDeploymentStatusElement, statusElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Upgrade Deployment operation initiates an update of role instances in
   * a deployment using the package and configuration that you specify. For
   * more information about updating role instances, see Update a Windows
   * Azure Service.  The Upgrade Deployment operation is an asynchronous
   * operation. To determine whether the request has been processed, call Get
   * Operation Status. For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.To perform an automatic
   * update of a deployment, call Upgrade Deployment or Change Deployment
   * Configuration with the Mode element set to automatic. The update proceeds
   * from that point without a need for further input. You can call Get
   * Operation Status to determine when the update is complete.  To perform a
   * manual update, first call Upgrade Deployment with the Mode element set to
   * manual. Next, call Walk Upgrade Domain to update each domain within the
   * deployment. You should make sure that the operation is complete by
   * calling Get Operation Status before updating the next domain.  Important:
   * An update that adds or removes role instances will result in a
   * configuration update to all roles that are deployed in the cloud service.
   * Existing role instances need to be notified of new role instances so that
   * all role instances can communicate together in the cloud service.  By
   * default, a cloud service is deployed with five update domains, which are
   * updated one at a time during an in-place update. For information on
   * modifying the number of update domains in the service definition file,
   * see Windows Azure Service Definition Schema (.csdef File).  To determine
   * the update domain in which a particular instance is running in Windows
   * Azure, use the UpdateDomain property of the RoleInstance class. See the
   * Windows Azure Managed Library Reference for more information.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to upgrade.
   *
   * @param {String} deploymentName - The deployment to upgrade.
   *
   * @param {DeploymentUpgradeParameters} parameters - Parameters supplied to
   * the Upgrade Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginUpgradingByName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.configuration === null || parameters.configuration === undefined) {
      return callback(new Error('parameters.configuration cannot be null.'));
    }
    if (parameters.extensionConfiguration) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.extensionConfiguration.allRoles.length; loweredIndex1 = loweredIndex1 + 1) {
        var allRolesParameterItem = parameters.extensionConfiguration.allRoles[loweredIndex1];
        if (allRolesParameterItem.id === null || allRolesParameterItem.id === undefined) {
          return callback(new Error('parameters.extensionConfiguration.allRoles.id cannot be null.'));
        }
      }
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.extensionConfiguration.namedRoles.length; loweredIndex2 = loweredIndex2 + 1) {
        var namedRolesParameterItem = parameters.extensionConfiguration.namedRoles[loweredIndex2];
        if (namedRolesParameterItem.extensions === null || namedRolesParameterItem.extensions === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions cannot be null.'));
        }
        for (var loweredIndex3 = 0; loweredIndex3 < namedRolesParameterItem.extensions.length; loweredIndex3 = loweredIndex3 + 1) {
          var extensionsParameterItem = namedRolesParameterItem.extensions[loweredIndex3];
          if (extensionsParameterItem.id === null || extensionsParameterItem.id === undefined) {
            return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions.id cannot be null.'));
          }
        }
        if (namedRolesParameterItem.roleName === null || namedRolesParameterItem.roleName === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.roleName cannot be null.'));
        }
      }
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.label.length > 100) {
      return callback(new Error('parameters.label is outside the valid range.'));
    }
    if (parameters.packageUri === null || parameters.packageUri === undefined) {
      return callback(new Error('parameters.packageUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/?comp=upgrade';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var upgradeDeploymentElement = js2xml.createElement('UpgradeDeployment', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, upgradeDeploymentElement);
    
    var modeElement = js2xml.createElement('Mode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(modeElement, parameters.mode ? parameters.mode.toString() : 'Auto');
    js2xml.addChildElement(upgradeDeploymentElement, modeElement);
    
    var packageUrlElement = js2xml.createElement('PackageUrl', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(packageUrlElement, parameters.packageUri);
    js2xml.addChildElement(upgradeDeploymentElement, packageUrlElement);
    
    var configurationElement = js2xml.createElement('Configuration', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(configurationElement, new Buffer(parameters.configuration).toString('base64'));
    js2xml.addChildElement(upgradeDeploymentElement, configurationElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
    js2xml.addChildElement(upgradeDeploymentElement, labelElement);
    
    if (parameters.roleToUpgrade) {
      var roleToUpgradeElement = js2xml.createElement('RoleToUpgrade', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(roleToUpgradeElement, parameters.roleToUpgrade);
      js2xml.addChildElement(upgradeDeploymentElement, roleToUpgradeElement);
    }
    
    var forceElement = js2xml.createElement('Force', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(forceElement, parameters.force.toString());
    js2xml.addChildElement(upgradeDeploymentElement, forceElement);
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(upgradeDeploymentElement, extendedPropertiesDictionaryElement);
    }
    
    if (parameters.extensionConfiguration) {
      var extensionConfigurationElement = js2xml.createElement('ExtensionConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(upgradeDeploymentElement, extensionConfigurationElement);
      
      if (parameters.extensionConfiguration.allRoles) {
        var allRolesSequenceElement = js2xml.createElement('AllRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.extensionConfiguration.allRoles.length; loweredIndex4 = loweredIndex4 + 1) {
          var allRolesItem = parameters.extensionConfiguration.allRoles[loweredIndex4];
          var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(allRolesSequenceElement, extensionElement);
          
          var idElement = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(idElement, allRolesItem.id);
          js2xml.addChildElement(extensionElement, idElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, allRolesSequenceElement);
      }
      
      if (parameters.extensionConfiguration.namedRoles) {
        var namedRolesSequenceElement = js2xml.createElement('NamedRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex5 = 0; loweredIndex5 < parameters.extensionConfiguration.namedRoles.length; loweredIndex5 = loweredIndex5 + 1) {
          var namedRolesItem = parameters.extensionConfiguration.namedRoles[loweredIndex5];
          var roleElement = js2xml.createElement('Role', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(namedRolesSequenceElement, roleElement);
          
          var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(roleNameElement, namedRolesItem.roleName);
          js2xml.addChildElement(roleElement, roleNameElement);
          
          var extensionsSequenceElement = js2xml.createElement('Extensions', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex6 = 0; loweredIndex6 < namedRolesItem.extensions.length; loweredIndex6 = loweredIndex6 + 1) {
            var extensionsItem = namedRolesItem.extensions[loweredIndex6];
            var extensionElement2 = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(extensionsSequenceElement, extensionElement2);
            
            var idElement2 = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(idElement2, extensionsItem.id);
            js2xml.addChildElement(extensionElement2, idElement2);
          }
          js2xml.addChildElement(roleElement, extensionsSequenceElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, namedRolesSequenceElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Upgrade Deployment operation initiates an update of role instances in
   * a deployment using the package and configuration that you specify. For
   * more information about updating role instances, see Update a Windows
   * Azure Service.  The Upgrade Deployment operation is an asynchronous
   * operation. To determine whether the request has been processed, call Get
   * Operation Status. For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.  To perform an
   * automatic update of a deployment, call Upgrade Deployment or Change
   * Deployment Configuration with the Mode element set to automatic. The
   * update proceeds from that point without a need for further input. You can
   * call Get Operation Status to determine when the update is complete.  To
   * perform a manual update, first call Upgrade Deployment with the Mode
   * element set to manual. Next, call Walk Upgrade Domain to update each
   * domain within the deployment. You should make sure that the operation is
   * complete by calling Get Operation Status before updating the next domain.
   * Important: An update that adds or removes role instances will result in
   * a configuration update to all roles that are deployed in the cloud
   * service. Existing role instances need to be notified of new role
   * instances so that all role instances can communicate together in the
   * cloud service.  By default, a cloud service is deployed with five update
   * domains, which are updated one at a time during an in-place update. For
   * information on modifying the number of update domains in the service
   * definition file, see Windows Azure Service Definition Schema (.csdef
   * File).  To determine the update domain in which a particular instance is
   * running in Windows Azure, use the UpdateDomain property of the
   * RoleInstance class. See the Windows Azure Managed Library Reference for
   * more information.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to upgrade.
   *
   * @param {DeploymentSlot} deploymentSlot - The slot to upgrade.
   *
   * @param {DeploymentUpgradeParameters} parameters - Parameters supplied to
   * the Upgrade Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginUpgradingBySlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.configuration === null || parameters.configuration === undefined) {
      return callback(new Error('parameters.configuration cannot be null.'));
    }
    if (parameters.extensionConfiguration) {
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.extensionConfiguration.allRoles.length; loweredIndex1 = loweredIndex1 + 1) {
        var allRolesParameterItem = parameters.extensionConfiguration.allRoles[loweredIndex1];
        if (allRolesParameterItem.id === null || allRolesParameterItem.id === undefined) {
          return callback(new Error('parameters.extensionConfiguration.allRoles.id cannot be null.'));
        }
      }
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.extensionConfiguration.namedRoles.length; loweredIndex2 = loweredIndex2 + 1) {
        var namedRolesParameterItem = parameters.extensionConfiguration.namedRoles[loweredIndex2];
        if (namedRolesParameterItem.extensions === null || namedRolesParameterItem.extensions === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions cannot be null.'));
        }
        for (var loweredIndex3 = 0; loweredIndex3 < namedRolesParameterItem.extensions.length; loweredIndex3 = loweredIndex3 + 1) {
          var extensionsParameterItem = namedRolesParameterItem.extensions[loweredIndex3];
          if (extensionsParameterItem.id === null || extensionsParameterItem.id === undefined) {
            return callback(new Error('parameters.extensionConfiguration.namedRoles.extensions.id cannot be null.'));
          }
        }
        if (namedRolesParameterItem.roleName === null || namedRolesParameterItem.roleName === undefined) {
          return callback(new Error('parameters.extensionConfiguration.namedRoles.roleName cannot be null.'));
        }
      }
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.label.length > 100) {
      return callback(new Error('parameters.label is outside the valid range.'));
    }
    if (parameters.packageUri === null || parameters.packageUri === undefined) {
      return callback(new Error('parameters.packageUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '/?comp=upgrade';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var upgradeDeploymentElement = js2xml.createElement('UpgradeDeployment', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, upgradeDeploymentElement);
    
    var modeElement = js2xml.createElement('Mode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(modeElement, parameters.mode ? parameters.mode.toString() : 'Auto');
    js2xml.addChildElement(upgradeDeploymentElement, modeElement);
    
    var packageUrlElement = js2xml.createElement('PackageUrl', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(packageUrlElement, parameters.packageUri);
    js2xml.addChildElement(upgradeDeploymentElement, packageUrlElement);
    
    var configurationElement = js2xml.createElement('Configuration', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(configurationElement, new Buffer(parameters.configuration).toString('base64'));
    js2xml.addChildElement(upgradeDeploymentElement, configurationElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
    js2xml.addChildElement(upgradeDeploymentElement, labelElement);
    
    if (parameters.roleToUpgrade) {
      var roleToUpgradeElement = js2xml.createElement('RoleToUpgrade', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(roleToUpgradeElement, parameters.roleToUpgrade);
      js2xml.addChildElement(upgradeDeploymentElement, roleToUpgradeElement);
    }
    
    var forceElement = js2xml.createElement('Force', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(forceElement, parameters.force.toString());
    js2xml.addChildElement(upgradeDeploymentElement, forceElement);
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(upgradeDeploymentElement, extendedPropertiesDictionaryElement);
    }
    
    if (parameters.extensionConfiguration) {
      var extensionConfigurationElement = js2xml.createElement('ExtensionConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(upgradeDeploymentElement, extensionConfigurationElement);
      
      if (parameters.extensionConfiguration.allRoles) {
        var allRolesSequenceElement = js2xml.createElement('AllRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.extensionConfiguration.allRoles.length; loweredIndex4 = loweredIndex4 + 1) {
          var allRolesItem = parameters.extensionConfiguration.allRoles[loweredIndex4];
          var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(allRolesSequenceElement, extensionElement);
          
          var idElement = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(idElement, allRolesItem.id);
          js2xml.addChildElement(extensionElement, idElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, allRolesSequenceElement);
      }
      
      if (parameters.extensionConfiguration.namedRoles) {
        var namedRolesSequenceElement = js2xml.createElement('NamedRoles', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex5 = 0; loweredIndex5 < parameters.extensionConfiguration.namedRoles.length; loweredIndex5 = loweredIndex5 + 1) {
          var namedRolesItem = parameters.extensionConfiguration.namedRoles[loweredIndex5];
          var roleElement = js2xml.createElement('Role', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(namedRolesSequenceElement, roleElement);
          
          var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(roleNameElement, namedRolesItem.roleName);
          js2xml.addChildElement(roleElement, roleNameElement);
          
          var extensionsSequenceElement = js2xml.createElement('Extensions', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex6 = 0; loweredIndex6 < namedRolesItem.extensions.length; loweredIndex6 = loweredIndex6 + 1) {
            var extensionsItem = namedRolesItem.extensions[loweredIndex6];
            var extensionElement2 = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(extensionsSequenceElement, extensionElement2);
            
            var idElement2 = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(idElement2, extensionsItem.id);
            js2xml.addChildElement(extensionElement2, idElement2);
          }
          js2xml.addChildElement(roleElement, extensionsSequenceElement);
        }
        js2xml.addChildElement(extensionConfigurationElement, namedRolesSequenceElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Walk Upgrade Domain operation specifies an update domain in which a
   * role instance must be updated. For more information about updating role
   * instances, see Update a Windows Azure Service.  The Walk Upgrade Domain
   * operation is an asynchronous operation. To determine whether the
   * Management service has finished processing the request, call Get
   * Operation Status.  For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.  Prior to calling the
   * Walk Upgrade Domain operation you must have called Upgrade Deployment,
   * Change Deployment Configuration, or Rollback Update Or Upgrade.  By
   * default, a service is deployed with five update domains, which are
   * updated one at a time during an in-place update. For information on
   * modifying the number of update domains in the service definition file,
   * see Windows Azure Service Definition Schema (.csdef File).  To perform a
   * manual update of your deployment, proceed in this order:  Call Upgrade
   * Deployment with the Mode element set to manual.   Call Walk Upgrade
   * Domain to update each domain within the deployment. Update domains must
   * be updated in order. For example, begin with domain 0, proceed to domain
   * 1, and so on.  Important: An update that adds or removes role instances
   * will result in a configuration update to all roles that are deployed in
   * the cloud service. Existing role instances need to be notified of new
   * role instances so that all role instances can communicate together in the
   * cloud service.  While an update is in progress, call Get Deployment to
   * determine its status. If the update is in progress, Get Deployment
   * returns an UpgradeStatus element that contains information about the
   * update. If the update is complete, or if no update is in progress, then
   * the UpgradeStatus element is null.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {DeploymentWalkUpgradeDomainParameters} parameters - Parameters
   * supplied to the Walk Upgrade Domain operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginWalkingUpgradeDomainByDeploymentName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '?comp=walkupgradedomain';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var walkUpgradeDomainElement = js2xml.createElement('WalkUpgradeDomain', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, walkUpgradeDomainElement);
    
    var upgradeDomainElement = js2xml.createElement('UpgradeDomain', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(upgradeDomainElement, parameters.upgradeDomain.toString());
    js2xml.addChildElement(walkUpgradeDomainElement, upgradeDomainElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Walk Upgrade Domain operation specifies an update domain in which a
   * role instance must be updated. For more information about updating role
   * instances, see Update a Windows Azure Service.  The Walk Upgrade Domain
   * operation is an asynchronous operation. To determine whether the
   * Management service has finished processing the request, call Get
   * Operation Status.  For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.  Prior to calling the
   * Walk Upgrade Domain operation you must have called Upgrade Deployment,
   * Change Deployment Configuration, or Rollback Update Or Upgrade.  By
   * default, a service is deployed with five update domains, which are
   * updated one at a time during an in-place update. For information on
   * modifying the number of update domains in the service definition file,
   * see Windows Azure Service Definition Schema (.csdef File).  To perform a
   * manual update of your deployment, proceed in this order:  Call Upgrade
   * Deployment with the Mode element set to manual.   Call Walk Upgrade
   * Domain to update each domain within the deployment. Update domains must
   * be updated in order. For example, begin with domain 0, proceed to domain
   * 1, and so on.  Important: An update that adds or removes role instances
   * will result in a configuration update to all roles that are deployed in
   * the cloud service. Existing role instances need to be notified of new
   * role instances so that all role instances can communicate together in the
   * cloud service.  While an update is in progress, call Get Deployment to
   * determine its status. If the update is in progress, Get Deployment
   * returns an UpgradeStatus element that contains information about the
   * update. If the update is complete, or if no update is in progress, then
   * the UpgradeStatus element is null.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {DeploymentWalkUpgradeDomainParameters} parameters - Parameters
   * supplied to the Walk Upgrade Domain operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.beginWalkingUpgradeDomainByDeploymentSlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '/?comp=walkupgradedomain';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var walkUpgradeDomainElement = js2xml.createElement('WalkUpgradeDomain', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, walkUpgradeDomainElement);
    
    var upgradeDomainElement = js2xml.createElement('UpgradeDomain', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(upgradeDomainElement, parameters.upgradeDomain.toString());
    js2xml.addChildElement(walkUpgradeDomainElement, upgradeDomainElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Change Deployment Configuration operation initiates a change to the
   * deployment configuration.  The Change Deployment Configuration operation
   * is an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status.  For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to change deployment
   * configuration for.
   *
   * @param {String} deploymentName - The deployment to change configuration
   * for.
   *
   * @param {DeploymentChangeConfigurationParameters} parameters - Parameters
   * supplied to the Change Configuration Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.changeConfigurationByName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginChangingConfigurationByName(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Change Deployment Configuration operation initiates a change to the
   * deployment configuration.  The Change Deployment Configuration operation
   * is an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status.  For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to change deployment
   * configuration for.
   *
   * @param {DeploymentSlot} deploymentSlot - The slot to change deployment
   * configuration for.
   *
   * @param {DeploymentChangeConfigurationParameters} parameters - Parameters
   * supplied to the Change Configuration Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.changeConfigurationBySlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginChangingConfigurationBySlot(serviceName, deploymentSlot, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Create Deployment operation uploads a new service package and creates
   * a new deployment in the staging or production environments.  The Create
   * Deployment operation is an asynchronous operation. To determine whether
   * the management service has finished processing the request, call Get
   * Operation Status. For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to create a deployment for.
   *
   * @param {DeploymentSlot} deploymentSlot - The slot to create a deployment
   * for.
   *
   * @param {DeploymentCreateParameters} parameters - Parameters supplied to
   * the Create Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.create = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginCreating(serviceName, deploymentSlot, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Deployment operation deletes the specified deployment.  The
   * Delete Deployment operation is an asynchronous operation. To determine
   * whether the Management service has finished processing the request, call
   * Get Operation Status. For more information on asynchronous operations,
   * see Tracking Asynchronous Service Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.deleteByName = function(serviceName, deploymentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginDeletingByName(serviceName, deploymentName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Deployment operation deletes the specified deployment.  The
   * Delete Deployment operation is an asynchronous operation. To determine
   * whether the Management service has finished processing the request, call
   * Get Operation Status. For more information on asynchronous operations,
   * see Tracking Asynchronous Service Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.deleteBySlot = function(serviceName, deploymentSlot, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginDeletingBySlot(serviceName, deploymentSlot, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get Deployment operation returns configuration information, status,
   * and system properties for a deployment.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of the deployment.
   *
   * @param {Function} callback
   *
   * @returns {DeploymentGetResponse} - A deployment that exists in the cloud
   * service.
   */
  DeploymentOperations.prototype.getByName = function(serviceName, deploymentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { extendedProperties: {}, roleInstances: [], roles: [], virtualIPAddresses: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var deploymentElement = js2xml.getElement(responseDoc, responseDoc, 'DEPLOYMENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (deploymentElement) {
          var nameElement = js2xml.getElement(responseDoc, deploymentElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var deploymentSlotElement = js2xml.getElement(responseDoc, deploymentElement, 'DEPLOYMENTSLOT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (deploymentSlotElement) {
            var deploymentSlotInstance = deploymentSlotElement;
            result.deploymentSlot = deploymentSlotInstance;
          }
          
          var privateIDElement = js2xml.getElement(responseDoc, deploymentElement, 'PRIVATEID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (privateIDElement) {
            var privateIDInstance = privateIDElement;
            result.privateId = privateIDInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, deploymentElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var labelElement = js2xml.getElement(responseDoc, deploymentElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement) {
            var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
            result.label = labelInstance;
          }
          
          var urlElement = js2xml.getElement(responseDoc, deploymentElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (urlElement) {
            var urlInstance = urlElement;
            result.uri = urlInstance;
          }
          
          var configurationElement = js2xml.getElement(responseDoc, deploymentElement, 'CONFIGURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (configurationElement) {
            var configurationInstance = new Buffer(configurationElement, 'base64').toString('ascii');
            result.configuration = configurationInstance;
          }
          
          var roleInstanceListSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'ROLEINSTANCELIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (roleInstanceListSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, roleInstanceListSequenceElement, 'ROLEINSTANCE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var roleInstanceListElement = js2xml.getElements(responseDoc, roleInstanceListSequenceElement, 'ROLEINSTANCE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              var roleInstanceInstance = { instanceEndpoints: [] };
              result.roleInstances.push(roleInstanceInstance);
              
              var roleNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleNameElement) {
                var roleNameInstance = roleNameElement;
                roleInstanceInstance.roleName = roleNameInstance;
              }
              
              var instanceNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceNameElement) {
                var instanceNameInstance = instanceNameElement;
                roleInstanceInstance.instanceName = instanceNameInstance;
              }
              
              var instanceStatusElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceStatusElement) {
                var instanceStatusInstance = instanceStatusElement;
                roleInstanceInstance.instanceStatus = instanceStatusInstance;
              }
              
              var instanceUpgradeDomainElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEUPGRADEDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceUpgradeDomainElement && (instanceUpgradeDomainElement === null || instanceUpgradeDomainElement === undefined || instanceUpgradeDomainElement.length === 0) === false) {
                var instanceUpgradeDomainInstance = parseInt(instanceUpgradeDomainElement, 10);
                roleInstanceInstance.instanceUpgradeDomain = instanceUpgradeDomainInstance;
              }
              
              var instanceFaultDomainElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEFAULTDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceFaultDomainElement && (instanceFaultDomainElement === null || instanceFaultDomainElement === undefined || instanceFaultDomainElement.length === 0) === false) {
                var instanceFaultDomainInstance = parseInt(instanceFaultDomainElement, 10);
                roleInstanceInstance.instanceFaultDomain = instanceFaultDomainInstance;
              }
              
              var instanceSizeElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceSizeElement && (instanceSizeElement === null || instanceSizeElement === undefined || instanceSizeElement.length === 0) === false) {
                var instanceSizeInstance = instanceSizeElement;
                roleInstanceInstance.instanceSize = instanceSizeInstance;
              }
              
              var instanceStateDetailsElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESTATEDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceStateDetailsElement) {
                var instanceStateDetailsInstance = instanceStateDetailsElement;
                roleInstanceInstance.instanceStateDetails = instanceStateDetailsInstance;
              }
              
              var instanceErrorCodeElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEERRORCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceErrorCodeElement) {
                var instanceErrorCodeInstance = instanceErrorCodeElement;
                roleInstanceInstance.instanceErrorCode = instanceErrorCodeInstance;
              }
              
              var ipAddressElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'IPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (ipAddressElement) {
                var ipAddressInstance = ipAddressElement;
                roleInstanceInstance.iPAddress = ipAddressInstance;
              }
              
              var instanceEndpointsSequenceElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceEndpointsSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, instanceEndpointsSequenceElement, 'INSTANCEENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var instanceEndpointsElement = js2xml.getElements(responseDoc, instanceEndpointsSequenceElement, 'INSTANCEENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  var instanceEndpointInstance = {};
                  roleInstanceInstance.instanceEndpoints.push(instanceEndpointInstance);
                  
                  var localPortElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'LOCALPORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (localPortElement && (localPortElement === null || localPortElement === undefined || localPortElement.length === 0) === false) {
                    var localPortInstance = parseInt(localPortElement, 10);
                    instanceEndpointInstance.localPort = localPortInstance;
                  }
                  
                  var nameElement2 = js2xml.getElement(responseDoc, instanceEndpointsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (nameElement2) {
                    var nameInstance2 = nameElement2;
                    instanceEndpointInstance.name = nameInstance2;
                  }
                  
                  var portElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (portElement) {
                    var portInstance = parseInt(portElement, 10);
                    instanceEndpointInstance.port = portInstance;
                  }
                  
                  var protocolElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (protocolElement) {
                    var protocolInstance = protocolElement;
                    instanceEndpointInstance.protocol = protocolInstance;
                  }
                  
                  var vipElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'VIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (vipElement) {
                    var vipInstance = vipElement;
                    instanceEndpointInstance.virtualIPAddress = vipInstance;
                  }
                }
              }
              
              var powerStateElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'POWERSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (powerStateElement) {
                var powerStateInstance = powerStateElement;
                roleInstanceInstance.powerState = powerStateInstance;
              }
              
              var hostNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'HOSTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostNameElement) {
                var hostNameInstance = hostNameElement;
                roleInstanceInstance.hostName = hostNameInstance;
              }
              
              var remoteAccessCertificateThumbprintElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'REMOTEACCESSCERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (remoteAccessCertificateThumbprintElement) {
                var remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement;
                roleInstanceInstance.remoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
              }
            }
          }
          
          var upgradeStatusElement = js2xml.getElement(responseDoc, deploymentElement, 'UPGRADESTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (upgradeStatusElement) {
            var upgradeStatusInstance = {};
            result.upgradeStatus = upgradeStatusInstance;
            
            var upgradeTypeElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'UPGRADETYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (upgradeTypeElement) {
              var upgradeTypeInstance = upgradeTypeElement;
              upgradeStatusInstance.upgradeType = upgradeTypeInstance;
            }
            
            var currentUpgradeDomainStateElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'CURRENTUPGRADEDOMAINSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentUpgradeDomainStateElement) {
              var currentUpgradeDomainStateInstance = currentUpgradeDomainStateElement;
              upgradeStatusInstance.currentUpgradeDomainState = currentUpgradeDomainStateInstance;
            }
            
            var currentUpgradeDomainElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'CURRENTUPGRADEDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentUpgradeDomainElement) {
              var currentUpgradeDomainInstance = parseInt(currentUpgradeDomainElement, 10);
              upgradeStatusInstance.currentUpgradeDomain = currentUpgradeDomainInstance;
            }
          }
          
          var upgradeDomainCountElement = js2xml.getElement(responseDoc, deploymentElement, 'UPGRADEDOMAINCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (upgradeDomainCountElement) {
            var upgradeDomainCountInstance = parseInt(upgradeDomainCountElement, 10);
            result.upgradeDomainCount = upgradeDomainCountInstance;
          }
          
          var roleListSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'ROLELIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (roleListSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, roleListSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
              var roleListElement = js2xml.getElements(responseDoc, roleListSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
              var roleInstance = { configurationSets: [], dataVirtualHardDisks: [] };
              result.roles.push(roleInstance);
              
              var roleNameElement2 = js2xml.getElement(responseDoc, roleListElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleNameElement2) {
                var roleNameInstance2 = roleNameElement2;
                roleInstance.roleName = roleNameInstance2;
              }
              
              var oSVersionElement = js2xml.getElement(responseDoc, roleListElement, 'OSVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (oSVersionElement) {
                var oSVersionInstance = oSVersionElement;
                roleInstance.oSVersion = oSVersionInstance;
              }
              
              var roleTypeElement = js2xml.getElement(responseDoc, roleListElement, 'ROLETYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleTypeElement) {
                var roleTypeInstance = roleTypeElement;
                roleInstance.roleType = roleTypeInstance;
              }
              
              var configurationSetsSequenceElement = js2xml.getElement(responseDoc, roleListElement, 'CONFIGURATIONSETS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (configurationSetsSequenceElement) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
                  var configurationSetsElement = js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
                  var configurationSetInstance = { inputEndpoints: [], storedCertificateSettings: [], subnetNames: [] };
                  roleInstance.configurationSets.push(configurationSetInstance);
                  
                  var configurationSetTypeElement = js2xml.getElement(responseDoc, configurationSetsElement, 'CONFIGURATIONSETTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (configurationSetTypeElement) {
                    var configurationSetTypeInstance = configurationSetTypeElement;
                    configurationSetInstance.configurationSetType = configurationSetTypeInstance;
                  }
                  
                  var inputEndpointsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'INPUTENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (inputEndpointsSequenceElement) {
                    for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
                      var inputEndpointsElement = js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
                      var inputEndpointInstance = {};
                      configurationSetInstance.inputEndpoints.push(inputEndpointInstance);
                      
                      var loadBalancedEndpointSetNameElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCEDENDPOINTSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (loadBalancedEndpointSetNameElement) {
                        var loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement;
                        inputEndpointInstance.loadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                      }
                      
                      var localPortElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOCALPORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (localPortElement2 && (localPortElement2 === null || localPortElement2 === undefined || localPortElement2.length === 0) === false) {
                        var localPortInstance2 = parseInt(localPortElement2, 10);
                        inputEndpointInstance.localPort = localPortInstance2;
                      }
                      
                      var nameElement3 = js2xml.getElement(responseDoc, inputEndpointsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (nameElement3) {
                        var nameInstance3 = nameElement3;
                        inputEndpointInstance.name = nameInstance3;
                      }
                      
                      var portElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (portElement2 && (portElement2 === null || portElement2 === undefined || portElement2.length === 0) === false) {
                        var portInstance2 = parseInt(portElement2, 10);
                        inputEndpointInstance.port = portInstance2;
                      }
                      
                      var loadBalancerProbeElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCERPROBE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (loadBalancerProbeElement) {
                        var loadBalancerProbeInstance = {};
                        inputEndpointInstance.loadBalancerProbe = loadBalancerProbeInstance;
                        
                        var pathElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (pathElement) {
                          var pathInstance = pathElement;
                          loadBalancerProbeInstance.path = pathInstance;
                        }
                        
                        var portElement3 = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (portElement3) {
                          var portInstance3 = parseInt(portElement3, 10);
                          loadBalancerProbeInstance.port = portInstance3;
                        }
                        
                        var protocolElement2 = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (protocolElement2) {
                          var protocolInstance2 = protocolElement2;
                          loadBalancerProbeInstance.protocol = protocolInstance2;
                        }
                        
                        var intervalInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'INTERVALINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (intervalInSecondsElement && (intervalInSecondsElement === null || intervalInSecondsElement === undefined || intervalInSecondsElement.length === 0) === false) {
                          var intervalInSecondsInstance = parseInt(intervalInSecondsElement, 10);
                          loadBalancerProbeInstance.intervalInSeconds = intervalInSecondsInstance;
                        }
                        
                        var timeoutInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'TIMEOUTINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (timeoutInSecondsElement && (timeoutInSecondsElement === null || timeoutInSecondsElement === undefined || timeoutInSecondsElement.length === 0) === false) {
                          var timeoutInSecondsInstance = parseInt(timeoutInSecondsElement, 10);
                          loadBalancerProbeInstance.timeoutInSeconds = timeoutInSecondsInstance;
                        }
                      }
                      
                      var protocolElement3 = js2xml.getElement(responseDoc, inputEndpointsElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (protocolElement3) {
                        var protocolInstance3 = protocolElement3;
                        inputEndpointInstance.protocol = protocolInstance3;
                      }
                      
                      var vipElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'VIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (vipElement2) {
                        var vipInstance2 = vipElement2;
                        inputEndpointInstance.virtualIPAddress = vipInstance2;
                      }
                      
                      var enableDirectServerReturnElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ENABLEDIRECTSERVERRETURN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (enableDirectServerReturnElement && (enableDirectServerReturnElement === null || enableDirectServerReturnElement === undefined || enableDirectServerReturnElement.length === 0) === false) {
                        var enableDirectServerReturnInstance = enableDirectServerReturnElement;
                        inputEndpointInstance.enableDirectServerReturn = enableDirectServerReturnInstance;
                      }
                      
                      var accessControlListElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ACCESSCONTROLLIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (accessControlListElement) {
                        var accessControlListInstance = { rules: [] };
                        inputEndpointInstance.accessControlList = accessControlListInstance;
                        
                        var rulesSequenceElement = js2xml.getElement(responseDoc, accessControlListElement, 'RULES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (rulesSequenceElement) {
                          for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex6 = loweredIndex6 + 1) {
                            var rulesElement = js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex6];
                            var ruleInstance = {};
                            accessControlListInstance.rules.push(ruleInstance);
                            
                            var orderElement = js2xml.getElement(responseDoc, rulesElement, 'ORDER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (orderElement && (orderElement === null || orderElement === undefined || orderElement.length === 0) === false) {
                              var orderInstance = parseInt(orderElement, 10);
                              ruleInstance.order = orderInstance;
                            }
                            
                            var actionElement = js2xml.getElement(responseDoc, rulesElement, 'ACTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (actionElement) {
                              var actionInstance = actionElement;
                              ruleInstance.action = actionInstance;
                            }
                            
                            var remoteSubnetElement = js2xml.getElement(responseDoc, rulesElement, 'REMOTESUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (remoteSubnetElement) {
                              var remoteSubnetInstance = remoteSubnetElement;
                              ruleInstance.remoteSubnet = remoteSubnetInstance;
                            }
                            
                            var descriptionElement = js2xml.getElement(responseDoc, rulesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (descriptionElement) {
                              var descriptionInstance = descriptionElement;
                              ruleInstance.description = descriptionInstance;
                            }
                          }
                        }
                      }
                    }
                  }
                  
                  var subnetNamesSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SUBNETNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (subnetNamesSequenceElement) {
                    for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                      var subnetNamesElement = js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                      configurationSetInstance.subnetNames.push(subnetNamesElement);
                    }
                  }
                  
                  var computerNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'COMPUTERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (computerNameElement) {
                    var computerNameInstance = computerNameElement;
                    configurationSetInstance.computerName = computerNameInstance;
                  }
                  
                  var adminPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (adminPasswordElement) {
                    var adminPasswordInstance = adminPasswordElement;
                    configurationSetInstance.adminPassword = adminPasswordInstance;
                  }
                  
                  var resetPasswordOnFirstLogonElement = js2xml.getElement(responseDoc, configurationSetsElement, 'RESETPASSWORDONFIRSTLOGON', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (resetPasswordOnFirstLogonElement && (resetPasswordOnFirstLogonElement === null || resetPasswordOnFirstLogonElement === undefined || resetPasswordOnFirstLogonElement.length === 0) === false) {
                    var resetPasswordOnFirstLogonInstance = resetPasswordOnFirstLogonElement;
                    configurationSetInstance.resetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                  }
                  
                  var enableAutomaticUpdatesElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ENABLEAUTOMATICUPDATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (enableAutomaticUpdatesElement && (enableAutomaticUpdatesElement === null || enableAutomaticUpdatesElement === undefined || enableAutomaticUpdatesElement.length === 0) === false) {
                    var enableAutomaticUpdatesInstance = enableAutomaticUpdatesElement;
                    configurationSetInstance.enableAutomaticUpdates = enableAutomaticUpdatesInstance;
                  }
                  
                  var timeZoneElement = js2xml.getElement(responseDoc, configurationSetsElement, 'TIMEZONE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (timeZoneElement) {
                    var timeZoneInstance = timeZoneElement;
                    configurationSetInstance.timeZone = timeZoneInstance;
                  }
                  
                  var domainJoinElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DOMAINJOIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (domainJoinElement) {
                    var domainJoinInstance = {};
                    configurationSetInstance.domainJoin = domainJoinInstance;
                    
                    var credentialsElement = js2xml.getElement(responseDoc, domainJoinElement, 'CREDENTIALS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (credentialsElement) {
                      var credentialsInstance = {};
                      domainJoinInstance.credentials = credentialsInstance;
                      
                      var domainElement = js2xml.getElement(responseDoc, credentialsElement, 'DOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (domainElement) {
                        var domainInstance = domainElement;
                        credentialsInstance.domain = domainInstance;
                      }
                      
                      var usernameElement = js2xml.getElement(responseDoc, credentialsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (usernameElement) {
                        var usernameInstance = usernameElement;
                        credentialsInstance.userName = usernameInstance;
                      }
                      
                      var passwordElement = js2xml.getElement(responseDoc, credentialsElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (passwordElement) {
                        var passwordInstance = passwordElement;
                        credentialsInstance.password = passwordInstance;
                      }
                    }
                    
                    var joinDomainElement = js2xml.getElement(responseDoc, domainJoinElement, 'JOINDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (joinDomainElement) {
                      var joinDomainInstance = joinDomainElement;
                      domainJoinInstance.domainToJoin = joinDomainInstance;
                    }
                    
                    var machineObjectOUElement = js2xml.getElement(responseDoc, domainJoinElement, 'MACHINEOBJECTOU', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (machineObjectOUElement) {
                      var machineObjectOUInstance = machineObjectOUElement;
                      domainJoinInstance.ldapMachineObjectOU = machineObjectOUInstance;
                    }
                    
                    var provisioningElement = js2xml.getElement(responseDoc, domainJoinElement, 'PROVISIONING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (provisioningElement) {
                      var provisioningInstance = {};
                      domainJoinInstance.provisioning = provisioningInstance;
                      
                      var accountDataElement = js2xml.getElement(responseDoc, provisioningElement, 'ACCOUNTDATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (accountDataElement) {
                        var accountDataInstance = accountDataElement;
                        provisioningInstance.accountData = accountDataInstance;
                      }
                    }
                  }
                  
                  var storedCertificateSettingsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'STOREDCERTIFICATESETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (storedCertificateSettingsSequenceElement) {
                    for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                      var storedCertificateSettingsElement = js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                      var certificateSettingInstance = {};
                      configurationSetInstance.storedCertificateSettings.push(certificateSettingInstance);
                      
                      var storeLocationElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORELOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (storeLocationElement) {
                      }
                      
                      var storeNameElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (storeNameElement) {
                        var storeNameInstance = storeNameElement;
                        certificateSettingInstance.storeName = storeNameInstance;
                      }
                      
                      var thumbprintElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (thumbprintElement) {
                        var thumbprintInstance = thumbprintElement;
                        certificateSettingInstance.thumbprint = thumbprintInstance;
                      }
                    }
                  }
                  
                  var winRMElement = js2xml.getElement(responseDoc, configurationSetsElement, 'WINRM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (winRMElement) {
                    var winRMInstance = { listeners: [] };
                    configurationSetInstance.windowsRemoteManagement = winRMInstance;
                    
                    var listenersSequenceElement = js2xml.getElement(responseDoc, winRMElement, 'LISTENERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (listenersSequenceElement) {
                      for (var loweredIndex9 = 0; loweredIndex9 < js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex9 = loweredIndex9 + 1) {
                        var listenersElement = js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex9];
                        var listenerInstance = {};
                        winRMInstance.listeners.push(listenerInstance);
                        
                        var protocolElement4 = js2xml.getElement(responseDoc, listenersElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (protocolElement4) {
                          var protocolInstance4 = protocolElement4;
                          listenerInstance.listenerType = protocolInstance4;
                        }
                        
                        var certificateThumbprintElement = js2xml.getElement(responseDoc, listenersElement, 'CERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (certificateThumbprintElement) {
                          var certificateThumbprintInstance = certificateThumbprintElement;
                          listenerInstance.certificateThumbprint = certificateThumbprintInstance;
                        }
                      }
                    }
                  }
                  
                  var adminUsernameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINUSERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (adminUsernameElement) {
                    var adminUsernameInstance = adminUsernameElement;
                    configurationSetInstance.adminUserName = adminUsernameInstance;
                  }
                  
                  var hostNameElement2 = js2xml.getElement(responseDoc, configurationSetsElement, 'HOSTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (hostNameElement2) {
                    var hostNameInstance2 = hostNameElement2;
                    configurationSetInstance.hostName = hostNameInstance2;
                  }
                  
                  var userNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (userNameElement) {
                    var userNameInstance = userNameElement;
                    configurationSetInstance.userName = userNameInstance;
                  }
                  
                  var userPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (userPasswordElement) {
                    var userPasswordInstance = userPasswordElement;
                    configurationSetInstance.userPassword = userPasswordInstance;
                  }
                  
                  var disableSshPasswordAuthenticationElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DISABLESSHPASSWORDAUTHENTICATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (disableSshPasswordAuthenticationElement && (disableSshPasswordAuthenticationElement === null || disableSshPasswordAuthenticationElement === undefined || disableSshPasswordAuthenticationElement.length === 0) === false) {
                    var disableSshPasswordAuthenticationInstance = disableSshPasswordAuthenticationElement;
                    configurationSetInstance.disableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                  }
                  
                  var sSHElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SSH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (sSHElement) {
                    var sSHInstance = { keyPairs: [], publicKeys: [] };
                    configurationSetInstance.sshSettings = sSHInstance;
                    
                    var publicKeysSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'PUBLICKEYS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (publicKeysSequenceElement) {
                      for (var loweredIndex10 = 0; loweredIndex10 < js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex10 = loweredIndex10 + 1) {
                        var publicKeysElement = js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex10];
                        var publicKeyInstance = {};
                        sSHInstance.publicKeys.push(publicKeyInstance);
                        
                        var fingerPrintElement = js2xml.getElement(responseDoc, publicKeysElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (fingerPrintElement) {
                          var fingerPrintInstance = fingerPrintElement;
                          publicKeyInstance.fingerprint = fingerPrintInstance;
                        }
                        
                        var pathElement2 = js2xml.getElement(responseDoc, publicKeysElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (pathElement2) {
                          var pathInstance2 = pathElement2;
                          publicKeyInstance.path = pathInstance2;
                        }
                      }
                    }
                    
                    var keyPairsSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'KEYPAIRS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (keyPairsSequenceElement) {
                      for (var loweredIndex11 = 0; loweredIndex11 < js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex11 = loweredIndex11 + 1) {
                        var keyPairsElement = js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex11];
                        var keyPairInstance = {};
                        sSHInstance.keyPairs.push(keyPairInstance);
                        
                        var fingerPrintElement2 = js2xml.getElement(responseDoc, keyPairsElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (fingerPrintElement2) {
                          var fingerPrintInstance2 = fingerPrintElement2;
                          keyPairInstance.fingerprint = fingerPrintInstance2;
                        }
                        
                        var pathElement3 = js2xml.getElement(responseDoc, keyPairsElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (pathElement3) {
                          var pathInstance3 = pathElement3;
                          keyPairInstance.path = pathInstance3;
                        }
                      }
                    }
                  }
                }
              }
              
              var availabilitySetNameElement = js2xml.getElement(responseDoc, roleListElement, 'AVAILABILITYSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (availabilitySetNameElement) {
                var availabilitySetNameInstance = availabilitySetNameElement;
                roleInstance.availabilitySetName = availabilitySetNameInstance;
              }
              
              var dataVirtualHardDisksSequenceElement = js2xml.getElement(responseDoc, roleListElement, 'DATAVIRTUALHARDDISKS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dataVirtualHardDisksSequenceElement) {
                for (var loweredIndex12 = 0; loweredIndex12 < js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex12 = loweredIndex12 + 1) {
                  var dataVirtualHardDisksElement = js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex12];
                  var dataVirtualHardDiskInstance = {};
                  roleInstance.dataVirtualHardDisks.push(dataVirtualHardDiskInstance);
                  
                  var hostCachingElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (hostCachingElement && (hostCachingElement === null || hostCachingElement === undefined || hostCachingElement.length === 0) === false) {
                    var hostCachingInstance = hostCachingElement;
                    dataVirtualHardDiskInstance.hostCaching = hostCachingInstance;
                  }
                  
                  var diskLabelElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (diskLabelElement) {
                    var diskLabelInstance = diskLabelElement;
                    dataVirtualHardDiskInstance.diskLabel = diskLabelInstance;
                  }
                  
                  var diskNameElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (diskNameElement) {
                    var diskNameInstance = diskNameElement;
                    dataVirtualHardDiskInstance.diskName = diskNameInstance;
                  }
                  
                  var lunElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LUN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (lunElement && (lunElement === null || lunElement === undefined || lunElement.length === 0) === false) {
                    var lunInstance = parseInt(lunElement, 10);
                    dataVirtualHardDiskInstance.logicalUnitNumber = lunInstance;
                  }
                  
                  var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (logicalDiskSizeInGBElement) {
                    var logicalDiskSizeInGBInstance = parseInt(logicalDiskSizeInGBElement, 10);
                    dataVirtualHardDiskInstance.logicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                  }
                  
                  var mediaLinkElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (mediaLinkElement) {
                    var mediaLinkInstance = mediaLinkElement;
                    dataVirtualHardDiskInstance.mediaLink = mediaLinkInstance;
                  }
                }
              }
              
              var labelElement2 = js2xml.getElement(responseDoc, roleListElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (labelElement2) {
                var labelInstance2 = labelElement2;
                roleInstance.label = labelInstance2;
              }
              
              var oSVirtualHardDiskElement = js2xml.getElement(responseDoc, roleListElement, 'OSVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (oSVirtualHardDiskElement) {
                var oSVirtualHardDiskInstance = {};
                roleInstance.oSVirtualHardDisk = oSVirtualHardDiskInstance;
                
                var hostCachingElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (hostCachingElement2 && (hostCachingElement2 === null || hostCachingElement2 === undefined || hostCachingElement2.length === 0) === false) {
                  var hostCachingInstance2 = hostCachingElement2;
                  oSVirtualHardDiskInstance.hostCaching = hostCachingInstance2;
                }
                
                var diskLabelElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (diskLabelElement2) {
                  var diskLabelInstance2 = diskLabelElement2;
                  oSVirtualHardDiskInstance.diskLabel = diskLabelInstance2;
                }
                
                var diskNameElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (diskNameElement2) {
                  var diskNameInstance2 = diskNameElement2;
                  oSVirtualHardDiskInstance.diskName = diskNameInstance2;
                }
                
                var mediaLinkElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (mediaLinkElement2) {
                  var mediaLinkInstance2 = mediaLinkElement2;
                  oSVirtualHardDiskInstance.mediaLink = mediaLinkInstance2;
                }
                
                var sourceImageNameElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'SOURCEIMAGENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (sourceImageNameElement) {
                  var sourceImageNameInstance = sourceImageNameElement;
                  oSVirtualHardDiskInstance.sourceImageName = sourceImageNameInstance;
                }
                
                var osElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (osElement) {
                  var osInstance = osElement;
                  oSVirtualHardDiskInstance.operatingSystem = osInstance;
                }
              }
              
              var roleSizeElement = js2xml.getElement(responseDoc, roleListElement, 'ROLESIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleSizeElement && (roleSizeElement === null || roleSizeElement === undefined || roleSizeElement.length === 0) === false) {
                var roleSizeInstance = roleSizeElement;
                roleInstance.roleSize = roleSizeInstance;
              }
              
              var defaultWinRmCertificateThumbprintElement = js2xml.getElement(responseDoc, roleListElement, 'DEFAULTWINRMCERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (defaultWinRmCertificateThumbprintElement) {
                var defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement;
                roleInstance.defaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
              }
            }
          }
          
          var sdkVersionElement = js2xml.getElement(responseDoc, deploymentElement, 'SDKVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sdkVersionElement) {
            var sdkVersionInstance = sdkVersionElement;
            result.sdkVersion = sdkVersionInstance;
          }
          
          var lockedElement = js2xml.getElement(responseDoc, deploymentElement, 'LOCKED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lockedElement) {
            var lockedInstance = lockedElement;
            result.locked = lockedInstance;
          }
          
          var rollbackAllowedElement = js2xml.getElement(responseDoc, deploymentElement, 'ROLLBACKALLOWED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (rollbackAllowedElement) {
            var rollbackAllowedInstance = rollbackAllowedElement;
            result.rollbackAllowed = rollbackAllowedInstance;
          }
          
          var createdTimeElement = js2xml.getElement(responseDoc, deploymentElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (createdTimeElement) {
            var createdTimeInstance = new Date(createdTimeElement);
            result.createdTime = createdTimeInstance;
          }
          
          var lastModifiedTimeElement = js2xml.getElement(responseDoc, deploymentElement, 'LASTMODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lastModifiedTimeElement) {
            var lastModifiedTimeInstance = new Date(lastModifiedTimeElement);
            result.lastModifiedTime = lastModifiedTimeInstance;
          }
          
          var virtualNetworkNameElement = js2xml.getElement(responseDoc, deploymentElement, 'VIRTUALNETWORKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (virtualNetworkNameElement) {
            var virtualNetworkNameInstance = virtualNetworkNameElement;
            result.virtualNetworkName = virtualNetworkNameInstance;
          }
          
          var extendedPropertiesSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (extendedPropertiesSequenceElement) {
            for (var loweredIndex13 = 0; loweredIndex13 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex13 = loweredIndex13 + 1) {
              var extendedPropertiesElement = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex13];
              var extendedPropertiesKey = js2xml.getElement(responseDoc, extendedPropertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              var extendedPropertiesValue = js2xml.getElement(responseDoc, extendedPropertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              result.extendedProperties[extendedPropertiesKey] = extendedPropertiesValue;
            }
          }
          
          var persistentVMDowntimeElement = js2xml.getElement(responseDoc, deploymentElement, 'PERSISTENTVMDOWNTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (persistentVMDowntimeElement) {
            var persistentVMDowntimeInstance = {};
            result.persistentVMDowntime = persistentVMDowntimeInstance;
            
            var startTimeElement = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'STARTTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (startTimeElement) {
              var startTimeInstance = new Date(startTimeElement);
              persistentVMDowntimeInstance.startTime = startTimeInstance;
            }
            
            var endTimeElement = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'ENDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (endTimeElement) {
              var endTimeInstance = new Date(endTimeElement);
              persistentVMDowntimeInstance.endTime = endTimeInstance;
            }
            
            var statusElement2 = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusElement2) {
              var statusInstance2 = statusElement2;
              persistentVMDowntimeInstance.status = statusInstance2;
            }
          }
          
          var virtualIPsSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'VIRTUALIPS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (virtualIPsSequenceElement) {
            for (var loweredIndex14 = 0; loweredIndex14 < js2xml.getElements(responseDoc, virtualIPsSequenceElement, 'VIRTUALIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex14 = loweredIndex14 + 1) {
              var virtualIPsElement = js2xml.getElements(responseDoc, virtualIPsSequenceElement, 'VIRTUALIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex14];
              var virtualIPAddressInstance = {};
              result.virtualIPAddresses.push(virtualIPAddressInstance);
              
              var addressElement = js2xml.getElement(responseDoc, virtualIPsElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (addressElement) {
                var addressInstance = addressElement;
                virtualIPAddressInstance.address = addressInstance;
              }
            }
          }
          
          var dnsElement = js2xml.getElement(responseDoc, deploymentElement, 'DNS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (dnsElement) {
            var dnsInstance = { dnsServers: [] };
            result.dnsSettings = dnsInstance;
            
            var dnsServersSequenceElement = js2xml.getElement(responseDoc, dnsElement, 'DNSSERVERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dnsServersSequenceElement) {
              for (var loweredIndex15 = 0; loweredIndex15 < js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex15 = loweredIndex15 + 1) {
                var dnsServersElement = js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex15];
                var dnsServerInstance = {};
                dnsInstance.dnsServers.push(dnsServerInstance);
                
                var nameElement4 = js2xml.getElement(responseDoc, dnsServersElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (nameElement4) {
                  var nameInstance4 = nameElement4;
                  dnsServerInstance.name = nameInstance4;
                }
                
                var addressElement2 = js2xml.getElement(responseDoc, dnsServersElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (addressElement2) {
                  var addressInstance2 = addressElement2;
                  dnsServerInstance.address = addressInstance2;
                }
              }
            }
          }
          
          var extensionConfigurationElement = js2xml.getElement(responseDoc, deploymentElement, 'EXTENSIONCONFIGURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (extensionConfigurationElement) {
            var extensionConfigurationInstance = { allRoles: [], namedRoles: [] };
            result.extensionConfiguration = extensionConfigurationInstance;
            
            var allRolesSequenceElement = js2xml.getElement(responseDoc, extensionConfigurationElement, 'ALLROLES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (allRolesSequenceElement) {
              for (var loweredIndex16 = 0; loweredIndex16 < js2xml.getElements(responseDoc, allRolesSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex16 = loweredIndex16 + 1) {
                var allRolesElement = js2xml.getElements(responseDoc, allRolesSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex16];
                var extensionInstance = {};
                extensionConfigurationInstance.allRoles.push(extensionInstance);
                
                var idElement = js2xml.getElement(responseDoc, allRolesElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (idElement) {
                  var idInstance = idElement;
                  extensionInstance.id = idInstance;
                }
              }
            }
            
            var namedRolesSequenceElement = js2xml.getElement(responseDoc, extensionConfigurationElement, 'NAMEDROLES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (namedRolesSequenceElement) {
              for (var loweredIndex17 = 0; loweredIndex17 < js2xml.getElements(responseDoc, namedRolesSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex17 = loweredIndex17 + 1) {
                var namedRolesElement = js2xml.getElements(responseDoc, namedRolesSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex17];
                var roleInstance2 = { extensions: [] };
                extensionConfigurationInstance.namedRoles.push(roleInstance2);
                
                var roleNameElement3 = js2xml.getElement(responseDoc, namedRolesElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (roleNameElement3) {
                  var roleNameInstance3 = roleNameElement3;
                  roleInstance2.roleName = roleNameInstance3;
                }
                
                var extensionsSequenceElement = js2xml.getElement(responseDoc, namedRolesElement, 'EXTENSIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (extensionsSequenceElement) {
                  for (var loweredIndex18 = 0; loweredIndex18 < js2xml.getElements(responseDoc, extensionsSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex18 = loweredIndex18 + 1) {
                    var extensionsElement = js2xml.getElements(responseDoc, extensionsSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex18];
                    var extensionInstance2 = {};
                    roleInstance2.extensions.push(extensionInstance2);
                    
                    var idElement2 = js2xml.getElement(responseDoc, extensionsElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (idElement2) {
                      var idInstance2 = idElement2;
                      extensionInstance2.id = idInstance2;
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Deployment operation returns configuration information, status,
   * and system properties for a deployment.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {Function} callback
   *
   * @returns {DeploymentGetResponse} - A deployment that exists in the cloud
   * service.
   */
  DeploymentOperations.prototype.getBySlot = function(serviceName, deploymentSlot, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { extendedProperties: {}, roleInstances: [], roles: [], virtualIPAddresses: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var deploymentElement = js2xml.getElement(responseDoc, responseDoc, 'DEPLOYMENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (deploymentElement) {
          var nameElement = js2xml.getElement(responseDoc, deploymentElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var deploymentSlotElement = js2xml.getElement(responseDoc, deploymentElement, 'DEPLOYMENTSLOT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (deploymentSlotElement) {
            var deploymentSlotInstance = deploymentSlotElement;
            result.deploymentSlot = deploymentSlotInstance;
          }
          
          var privateIDElement = js2xml.getElement(responseDoc, deploymentElement, 'PRIVATEID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (privateIDElement) {
            var privateIDInstance = privateIDElement;
            result.privateId = privateIDInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, deploymentElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var labelElement = js2xml.getElement(responseDoc, deploymentElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement) {
            var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
            result.label = labelInstance;
          }
          
          var urlElement = js2xml.getElement(responseDoc, deploymentElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (urlElement) {
            var urlInstance = urlElement;
            result.uri = urlInstance;
          }
          
          var configurationElement = js2xml.getElement(responseDoc, deploymentElement, 'CONFIGURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (configurationElement) {
            var configurationInstance = new Buffer(configurationElement, 'base64').toString('ascii');
            result.configuration = configurationInstance;
          }
          
          var roleInstanceListSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'ROLEINSTANCELIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (roleInstanceListSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, roleInstanceListSequenceElement, 'ROLEINSTANCE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var roleInstanceListElement = js2xml.getElements(responseDoc, roleInstanceListSequenceElement, 'ROLEINSTANCE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              var roleInstanceInstance = { instanceEndpoints: [] };
              result.roleInstances.push(roleInstanceInstance);
              
              var roleNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleNameElement) {
                var roleNameInstance = roleNameElement;
                roleInstanceInstance.roleName = roleNameInstance;
              }
              
              var instanceNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceNameElement) {
                var instanceNameInstance = instanceNameElement;
                roleInstanceInstance.instanceName = instanceNameInstance;
              }
              
              var instanceStatusElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceStatusElement) {
                var instanceStatusInstance = instanceStatusElement;
                roleInstanceInstance.instanceStatus = instanceStatusInstance;
              }
              
              var instanceUpgradeDomainElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEUPGRADEDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceUpgradeDomainElement && (instanceUpgradeDomainElement === null || instanceUpgradeDomainElement === undefined || instanceUpgradeDomainElement.length === 0) === false) {
                var instanceUpgradeDomainInstance = parseInt(instanceUpgradeDomainElement, 10);
                roleInstanceInstance.instanceUpgradeDomain = instanceUpgradeDomainInstance;
              }
              
              var instanceFaultDomainElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEFAULTDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceFaultDomainElement && (instanceFaultDomainElement === null || instanceFaultDomainElement === undefined || instanceFaultDomainElement.length === 0) === false) {
                var instanceFaultDomainInstance = parseInt(instanceFaultDomainElement, 10);
                roleInstanceInstance.instanceFaultDomain = instanceFaultDomainInstance;
              }
              
              var instanceSizeElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceSizeElement && (instanceSizeElement === null || instanceSizeElement === undefined || instanceSizeElement.length === 0) === false) {
                var instanceSizeInstance = instanceSizeElement;
                roleInstanceInstance.instanceSize = instanceSizeInstance;
              }
              
              var instanceStateDetailsElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESTATEDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceStateDetailsElement) {
                var instanceStateDetailsInstance = instanceStateDetailsElement;
                roleInstanceInstance.instanceStateDetails = instanceStateDetailsInstance;
              }
              
              var instanceErrorCodeElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEERRORCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceErrorCodeElement) {
                var instanceErrorCodeInstance = instanceErrorCodeElement;
                roleInstanceInstance.instanceErrorCode = instanceErrorCodeInstance;
              }
              
              var ipAddressElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'IPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (ipAddressElement) {
                var ipAddressInstance = ipAddressElement;
                roleInstanceInstance.iPAddress = ipAddressInstance;
              }
              
              var instanceEndpointsSequenceElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (instanceEndpointsSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, instanceEndpointsSequenceElement, 'INSTANCEENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var instanceEndpointsElement = js2xml.getElements(responseDoc, instanceEndpointsSequenceElement, 'INSTANCEENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  var instanceEndpointInstance = {};
                  roleInstanceInstance.instanceEndpoints.push(instanceEndpointInstance);
                  
                  var localPortElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'LOCALPORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (localPortElement && (localPortElement === null || localPortElement === undefined || localPortElement.length === 0) === false) {
                    var localPortInstance = parseInt(localPortElement, 10);
                    instanceEndpointInstance.localPort = localPortInstance;
                  }
                  
                  var nameElement2 = js2xml.getElement(responseDoc, instanceEndpointsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (nameElement2) {
                    var nameInstance2 = nameElement2;
                    instanceEndpointInstance.name = nameInstance2;
                  }
                  
                  var portElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (portElement) {
                    var portInstance = parseInt(portElement, 10);
                    instanceEndpointInstance.port = portInstance;
                  }
                  
                  var protocolElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (protocolElement) {
                    var protocolInstance = protocolElement;
                    instanceEndpointInstance.protocol = protocolInstance;
                  }
                  
                  var vipElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'VIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (vipElement) {
                    var vipInstance = vipElement;
                    instanceEndpointInstance.virtualIPAddress = vipInstance;
                  }
                }
              }
              
              var powerStateElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'POWERSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (powerStateElement) {
                var powerStateInstance = powerStateElement;
                roleInstanceInstance.powerState = powerStateInstance;
              }
              
              var hostNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'HOSTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostNameElement) {
                var hostNameInstance = hostNameElement;
                roleInstanceInstance.hostName = hostNameInstance;
              }
              
              var remoteAccessCertificateThumbprintElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'REMOTEACCESSCERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (remoteAccessCertificateThumbprintElement) {
                var remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement;
                roleInstanceInstance.remoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
              }
            }
          }
          
          var upgradeStatusElement = js2xml.getElement(responseDoc, deploymentElement, 'UPGRADESTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (upgradeStatusElement) {
            var upgradeStatusInstance = {};
            result.upgradeStatus = upgradeStatusInstance;
            
            var upgradeTypeElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'UPGRADETYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (upgradeTypeElement) {
              var upgradeTypeInstance = upgradeTypeElement;
              upgradeStatusInstance.upgradeType = upgradeTypeInstance;
            }
            
            var currentUpgradeDomainStateElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'CURRENTUPGRADEDOMAINSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentUpgradeDomainStateElement) {
              var currentUpgradeDomainStateInstance = currentUpgradeDomainStateElement;
              upgradeStatusInstance.currentUpgradeDomainState = currentUpgradeDomainStateInstance;
            }
            
            var currentUpgradeDomainElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'CURRENTUPGRADEDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (currentUpgradeDomainElement) {
              var currentUpgradeDomainInstance = parseInt(currentUpgradeDomainElement, 10);
              upgradeStatusInstance.currentUpgradeDomain = currentUpgradeDomainInstance;
            }
          }
          
          var upgradeDomainCountElement = js2xml.getElement(responseDoc, deploymentElement, 'UPGRADEDOMAINCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (upgradeDomainCountElement) {
            var upgradeDomainCountInstance = parseInt(upgradeDomainCountElement, 10);
            result.upgradeDomainCount = upgradeDomainCountInstance;
          }
          
          var roleListSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'ROLELIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (roleListSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, roleListSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
              var roleListElement = js2xml.getElements(responseDoc, roleListSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
              var roleInstance = { configurationSets: [], dataVirtualHardDisks: [] };
              result.roles.push(roleInstance);
              
              var roleNameElement2 = js2xml.getElement(responseDoc, roleListElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleNameElement2) {
                var roleNameInstance2 = roleNameElement2;
                roleInstance.roleName = roleNameInstance2;
              }
              
              var oSVersionElement = js2xml.getElement(responseDoc, roleListElement, 'OSVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (oSVersionElement) {
                var oSVersionInstance = oSVersionElement;
                roleInstance.oSVersion = oSVersionInstance;
              }
              
              var roleTypeElement = js2xml.getElement(responseDoc, roleListElement, 'ROLETYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleTypeElement) {
                var roleTypeInstance = roleTypeElement;
                roleInstance.roleType = roleTypeInstance;
              }
              
              var configurationSetsSequenceElement = js2xml.getElement(responseDoc, roleListElement, 'CONFIGURATIONSETS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (configurationSetsSequenceElement) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
                  var configurationSetsElement = js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
                  var configurationSetInstance = { inputEndpoints: [], storedCertificateSettings: [], subnetNames: [] };
                  roleInstance.configurationSets.push(configurationSetInstance);
                  
                  var configurationSetTypeElement = js2xml.getElement(responseDoc, configurationSetsElement, 'CONFIGURATIONSETTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (configurationSetTypeElement) {
                    var configurationSetTypeInstance = configurationSetTypeElement;
                    configurationSetInstance.configurationSetType = configurationSetTypeInstance;
                  }
                  
                  var inputEndpointsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'INPUTENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (inputEndpointsSequenceElement) {
                    for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
                      var inputEndpointsElement = js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
                      var inputEndpointInstance = {};
                      configurationSetInstance.inputEndpoints.push(inputEndpointInstance);
                      
                      var loadBalancedEndpointSetNameElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCEDENDPOINTSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (loadBalancedEndpointSetNameElement) {
                        var loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement;
                        inputEndpointInstance.loadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                      }
                      
                      var localPortElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOCALPORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (localPortElement2 && (localPortElement2 === null || localPortElement2 === undefined || localPortElement2.length === 0) === false) {
                        var localPortInstance2 = parseInt(localPortElement2, 10);
                        inputEndpointInstance.localPort = localPortInstance2;
                      }
                      
                      var nameElement3 = js2xml.getElement(responseDoc, inputEndpointsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (nameElement3) {
                        var nameInstance3 = nameElement3;
                        inputEndpointInstance.name = nameInstance3;
                      }
                      
                      var portElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (portElement2 && (portElement2 === null || portElement2 === undefined || portElement2.length === 0) === false) {
                        var portInstance2 = parseInt(portElement2, 10);
                        inputEndpointInstance.port = portInstance2;
                      }
                      
                      var loadBalancerProbeElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCERPROBE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (loadBalancerProbeElement) {
                        var loadBalancerProbeInstance = {};
                        inputEndpointInstance.loadBalancerProbe = loadBalancerProbeInstance;
                        
                        var pathElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (pathElement) {
                          var pathInstance = pathElement;
                          loadBalancerProbeInstance.path = pathInstance;
                        }
                        
                        var portElement3 = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (portElement3) {
                          var portInstance3 = parseInt(portElement3, 10);
                          loadBalancerProbeInstance.port = portInstance3;
                        }
                        
                        var protocolElement2 = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (protocolElement2) {
                          var protocolInstance2 = protocolElement2;
                          loadBalancerProbeInstance.protocol = protocolInstance2;
                        }
                        
                        var intervalInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'INTERVALINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (intervalInSecondsElement && (intervalInSecondsElement === null || intervalInSecondsElement === undefined || intervalInSecondsElement.length === 0) === false) {
                          var intervalInSecondsInstance = parseInt(intervalInSecondsElement, 10);
                          loadBalancerProbeInstance.intervalInSeconds = intervalInSecondsInstance;
                        }
                        
                        var timeoutInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'TIMEOUTINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (timeoutInSecondsElement && (timeoutInSecondsElement === null || timeoutInSecondsElement === undefined || timeoutInSecondsElement.length === 0) === false) {
                          var timeoutInSecondsInstance = parseInt(timeoutInSecondsElement, 10);
                          loadBalancerProbeInstance.timeoutInSeconds = timeoutInSecondsInstance;
                        }
                      }
                      
                      var protocolElement3 = js2xml.getElement(responseDoc, inputEndpointsElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (protocolElement3) {
                        var protocolInstance3 = protocolElement3;
                        inputEndpointInstance.protocol = protocolInstance3;
                      }
                      
                      var vipElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'VIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (vipElement2) {
                        var vipInstance2 = vipElement2;
                        inputEndpointInstance.virtualIPAddress = vipInstance2;
                      }
                      
                      var enableDirectServerReturnElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ENABLEDIRECTSERVERRETURN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (enableDirectServerReturnElement && (enableDirectServerReturnElement === null || enableDirectServerReturnElement === undefined || enableDirectServerReturnElement.length === 0) === false) {
                        var enableDirectServerReturnInstance = enableDirectServerReturnElement;
                        inputEndpointInstance.enableDirectServerReturn = enableDirectServerReturnInstance;
                      }
                      
                      var accessControlListElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ACCESSCONTROLLIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (accessControlListElement) {
                        var accessControlListInstance = { rules: [] };
                        inputEndpointInstance.accessControlList = accessControlListInstance;
                        
                        var rulesSequenceElement = js2xml.getElement(responseDoc, accessControlListElement, 'RULES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (rulesSequenceElement) {
                          for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex6 = loweredIndex6 + 1) {
                            var rulesElement = js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex6];
                            var ruleInstance = {};
                            accessControlListInstance.rules.push(ruleInstance);
                            
                            var orderElement = js2xml.getElement(responseDoc, rulesElement, 'ORDER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (orderElement && (orderElement === null || orderElement === undefined || orderElement.length === 0) === false) {
                              var orderInstance = parseInt(orderElement, 10);
                              ruleInstance.order = orderInstance;
                            }
                            
                            var actionElement = js2xml.getElement(responseDoc, rulesElement, 'ACTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (actionElement) {
                              var actionInstance = actionElement;
                              ruleInstance.action = actionInstance;
                            }
                            
                            var remoteSubnetElement = js2xml.getElement(responseDoc, rulesElement, 'REMOTESUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (remoteSubnetElement) {
                              var remoteSubnetInstance = remoteSubnetElement;
                              ruleInstance.remoteSubnet = remoteSubnetInstance;
                            }
                            
                            var descriptionElement = js2xml.getElement(responseDoc, rulesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (descriptionElement) {
                              var descriptionInstance = descriptionElement;
                              ruleInstance.description = descriptionInstance;
                            }
                          }
                        }
                      }
                    }
                  }
                  
                  var subnetNamesSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SUBNETNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (subnetNamesSequenceElement) {
                    for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                      var subnetNamesElement = js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                      configurationSetInstance.subnetNames.push(subnetNamesElement);
                    }
                  }
                  
                  var computerNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'COMPUTERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (computerNameElement) {
                    var computerNameInstance = computerNameElement;
                    configurationSetInstance.computerName = computerNameInstance;
                  }
                  
                  var adminPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (adminPasswordElement) {
                    var adminPasswordInstance = adminPasswordElement;
                    configurationSetInstance.adminPassword = adminPasswordInstance;
                  }
                  
                  var resetPasswordOnFirstLogonElement = js2xml.getElement(responseDoc, configurationSetsElement, 'RESETPASSWORDONFIRSTLOGON', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (resetPasswordOnFirstLogonElement && (resetPasswordOnFirstLogonElement === null || resetPasswordOnFirstLogonElement === undefined || resetPasswordOnFirstLogonElement.length === 0) === false) {
                    var resetPasswordOnFirstLogonInstance = resetPasswordOnFirstLogonElement;
                    configurationSetInstance.resetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                  }
                  
                  var enableAutomaticUpdatesElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ENABLEAUTOMATICUPDATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (enableAutomaticUpdatesElement && (enableAutomaticUpdatesElement === null || enableAutomaticUpdatesElement === undefined || enableAutomaticUpdatesElement.length === 0) === false) {
                    var enableAutomaticUpdatesInstance = enableAutomaticUpdatesElement;
                    configurationSetInstance.enableAutomaticUpdates = enableAutomaticUpdatesInstance;
                  }
                  
                  var timeZoneElement = js2xml.getElement(responseDoc, configurationSetsElement, 'TIMEZONE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (timeZoneElement) {
                    var timeZoneInstance = timeZoneElement;
                    configurationSetInstance.timeZone = timeZoneInstance;
                  }
                  
                  var domainJoinElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DOMAINJOIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (domainJoinElement) {
                    var domainJoinInstance = {};
                    configurationSetInstance.domainJoin = domainJoinInstance;
                    
                    var credentialsElement = js2xml.getElement(responseDoc, domainJoinElement, 'CREDENTIALS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (credentialsElement) {
                      var credentialsInstance = {};
                      domainJoinInstance.credentials = credentialsInstance;
                      
                      var domainElement = js2xml.getElement(responseDoc, credentialsElement, 'DOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (domainElement) {
                        var domainInstance = domainElement;
                        credentialsInstance.domain = domainInstance;
                      }
                      
                      var usernameElement = js2xml.getElement(responseDoc, credentialsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (usernameElement) {
                        var usernameInstance = usernameElement;
                        credentialsInstance.userName = usernameInstance;
                      }
                      
                      var passwordElement = js2xml.getElement(responseDoc, credentialsElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (passwordElement) {
                        var passwordInstance = passwordElement;
                        credentialsInstance.password = passwordInstance;
                      }
                    }
                    
                    var joinDomainElement = js2xml.getElement(responseDoc, domainJoinElement, 'JOINDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (joinDomainElement) {
                      var joinDomainInstance = joinDomainElement;
                      domainJoinInstance.domainToJoin = joinDomainInstance;
                    }
                    
                    var machineObjectOUElement = js2xml.getElement(responseDoc, domainJoinElement, 'MACHINEOBJECTOU', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (machineObjectOUElement) {
                      var machineObjectOUInstance = machineObjectOUElement;
                      domainJoinInstance.ldapMachineObjectOU = machineObjectOUInstance;
                    }
                    
                    var provisioningElement = js2xml.getElement(responseDoc, domainJoinElement, 'PROVISIONING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (provisioningElement) {
                      var provisioningInstance = {};
                      domainJoinInstance.provisioning = provisioningInstance;
                      
                      var accountDataElement = js2xml.getElement(responseDoc, provisioningElement, 'ACCOUNTDATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (accountDataElement) {
                        var accountDataInstance = accountDataElement;
                        provisioningInstance.accountData = accountDataInstance;
                      }
                    }
                  }
                  
                  var storedCertificateSettingsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'STOREDCERTIFICATESETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (storedCertificateSettingsSequenceElement) {
                    for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                      var storedCertificateSettingsElement = js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                      var certificateSettingInstance = {};
                      configurationSetInstance.storedCertificateSettings.push(certificateSettingInstance);
                      
                      var storeLocationElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORELOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (storeLocationElement) {
                      }
                      
                      var storeNameElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (storeNameElement) {
                        var storeNameInstance = storeNameElement;
                        certificateSettingInstance.storeName = storeNameInstance;
                      }
                      
                      var thumbprintElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (thumbprintElement) {
                        var thumbprintInstance = thumbprintElement;
                        certificateSettingInstance.thumbprint = thumbprintInstance;
                      }
                    }
                  }
                  
                  var winRMElement = js2xml.getElement(responseDoc, configurationSetsElement, 'WINRM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (winRMElement) {
                    var winRMInstance = { listeners: [] };
                    configurationSetInstance.windowsRemoteManagement = winRMInstance;
                    
                    var listenersSequenceElement = js2xml.getElement(responseDoc, winRMElement, 'LISTENERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (listenersSequenceElement) {
                      for (var loweredIndex9 = 0; loweredIndex9 < js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex9 = loweredIndex9 + 1) {
                        var listenersElement = js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex9];
                        var listenerInstance = {};
                        winRMInstance.listeners.push(listenerInstance);
                        
                        var protocolElement4 = js2xml.getElement(responseDoc, listenersElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (protocolElement4) {
                          var protocolInstance4 = protocolElement4;
                          listenerInstance.listenerType = protocolInstance4;
                        }
                        
                        var certificateThumbprintElement = js2xml.getElement(responseDoc, listenersElement, 'CERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (certificateThumbprintElement) {
                          var certificateThumbprintInstance = certificateThumbprintElement;
                          listenerInstance.certificateThumbprint = certificateThumbprintInstance;
                        }
                      }
                    }
                  }
                  
                  var adminUsernameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINUSERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (adminUsernameElement) {
                    var adminUsernameInstance = adminUsernameElement;
                    configurationSetInstance.adminUserName = adminUsernameInstance;
                  }
                  
                  var hostNameElement2 = js2xml.getElement(responseDoc, configurationSetsElement, 'HOSTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (hostNameElement2) {
                    var hostNameInstance2 = hostNameElement2;
                    configurationSetInstance.hostName = hostNameInstance2;
                  }
                  
                  var userNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (userNameElement) {
                    var userNameInstance = userNameElement;
                    configurationSetInstance.userName = userNameInstance;
                  }
                  
                  var userPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (userPasswordElement) {
                    var userPasswordInstance = userPasswordElement;
                    configurationSetInstance.userPassword = userPasswordInstance;
                  }
                  
                  var disableSshPasswordAuthenticationElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DISABLESSHPASSWORDAUTHENTICATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (disableSshPasswordAuthenticationElement && (disableSshPasswordAuthenticationElement === null || disableSshPasswordAuthenticationElement === undefined || disableSshPasswordAuthenticationElement.length === 0) === false) {
                    var disableSshPasswordAuthenticationInstance = disableSshPasswordAuthenticationElement;
                    configurationSetInstance.disableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                  }
                  
                  var sSHElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SSH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (sSHElement) {
                    var sSHInstance = { keyPairs: [], publicKeys: [] };
                    configurationSetInstance.sshSettings = sSHInstance;
                    
                    var publicKeysSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'PUBLICKEYS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (publicKeysSequenceElement) {
                      for (var loweredIndex10 = 0; loweredIndex10 < js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex10 = loweredIndex10 + 1) {
                        var publicKeysElement = js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex10];
                        var publicKeyInstance = {};
                        sSHInstance.publicKeys.push(publicKeyInstance);
                        
                        var fingerPrintElement = js2xml.getElement(responseDoc, publicKeysElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (fingerPrintElement) {
                          var fingerPrintInstance = fingerPrintElement;
                          publicKeyInstance.fingerprint = fingerPrintInstance;
                        }
                        
                        var pathElement2 = js2xml.getElement(responseDoc, publicKeysElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (pathElement2) {
                          var pathInstance2 = pathElement2;
                          publicKeyInstance.path = pathInstance2;
                        }
                      }
                    }
                    
                    var keyPairsSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'KEYPAIRS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (keyPairsSequenceElement) {
                      for (var loweredIndex11 = 0; loweredIndex11 < js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex11 = loweredIndex11 + 1) {
                        var keyPairsElement = js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex11];
                        var keyPairInstance = {};
                        sSHInstance.keyPairs.push(keyPairInstance);
                        
                        var fingerPrintElement2 = js2xml.getElement(responseDoc, keyPairsElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (fingerPrintElement2) {
                          var fingerPrintInstance2 = fingerPrintElement2;
                          keyPairInstance.fingerprint = fingerPrintInstance2;
                        }
                        
                        var pathElement3 = js2xml.getElement(responseDoc, keyPairsElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (pathElement3) {
                          var pathInstance3 = pathElement3;
                          keyPairInstance.path = pathInstance3;
                        }
                      }
                    }
                  }
                }
              }
              
              var availabilitySetNameElement = js2xml.getElement(responseDoc, roleListElement, 'AVAILABILITYSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (availabilitySetNameElement) {
                var availabilitySetNameInstance = availabilitySetNameElement;
                roleInstance.availabilitySetName = availabilitySetNameInstance;
              }
              
              var dataVirtualHardDisksSequenceElement = js2xml.getElement(responseDoc, roleListElement, 'DATAVIRTUALHARDDISKS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dataVirtualHardDisksSequenceElement) {
                for (var loweredIndex12 = 0; loweredIndex12 < js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex12 = loweredIndex12 + 1) {
                  var dataVirtualHardDisksElement = js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex12];
                  var dataVirtualHardDiskInstance = {};
                  roleInstance.dataVirtualHardDisks.push(dataVirtualHardDiskInstance);
                  
                  var hostCachingElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (hostCachingElement && (hostCachingElement === null || hostCachingElement === undefined || hostCachingElement.length === 0) === false) {
                    var hostCachingInstance = hostCachingElement;
                    dataVirtualHardDiskInstance.hostCaching = hostCachingInstance;
                  }
                  
                  var diskLabelElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (diskLabelElement) {
                    var diskLabelInstance = diskLabelElement;
                    dataVirtualHardDiskInstance.diskLabel = diskLabelInstance;
                  }
                  
                  var diskNameElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (diskNameElement) {
                    var diskNameInstance = diskNameElement;
                    dataVirtualHardDiskInstance.diskName = diskNameInstance;
                  }
                  
                  var lunElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LUN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (lunElement && (lunElement === null || lunElement === undefined || lunElement.length === 0) === false) {
                    var lunInstance = parseInt(lunElement, 10);
                    dataVirtualHardDiskInstance.logicalUnitNumber = lunInstance;
                  }
                  
                  var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (logicalDiskSizeInGBElement) {
                    var logicalDiskSizeInGBInstance = parseInt(logicalDiskSizeInGBElement, 10);
                    dataVirtualHardDiskInstance.logicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                  }
                  
                  var mediaLinkElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (mediaLinkElement) {
                    var mediaLinkInstance = mediaLinkElement;
                    dataVirtualHardDiskInstance.mediaLink = mediaLinkInstance;
                  }
                }
              }
              
              var labelElement2 = js2xml.getElement(responseDoc, roleListElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (labelElement2) {
                var labelInstance2 = labelElement2;
                roleInstance.label = labelInstance2;
              }
              
              var oSVirtualHardDiskElement = js2xml.getElement(responseDoc, roleListElement, 'OSVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (oSVirtualHardDiskElement) {
                var oSVirtualHardDiskInstance = {};
                roleInstance.oSVirtualHardDisk = oSVirtualHardDiskInstance;
                
                var hostCachingElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (hostCachingElement2 && (hostCachingElement2 === null || hostCachingElement2 === undefined || hostCachingElement2.length === 0) === false) {
                  var hostCachingInstance2 = hostCachingElement2;
                  oSVirtualHardDiskInstance.hostCaching = hostCachingInstance2;
                }
                
                var diskLabelElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (diskLabelElement2) {
                  var diskLabelInstance2 = diskLabelElement2;
                  oSVirtualHardDiskInstance.diskLabel = diskLabelInstance2;
                }
                
                var diskNameElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (diskNameElement2) {
                  var diskNameInstance2 = diskNameElement2;
                  oSVirtualHardDiskInstance.diskName = diskNameInstance2;
                }
                
                var mediaLinkElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (mediaLinkElement2) {
                  var mediaLinkInstance2 = mediaLinkElement2;
                  oSVirtualHardDiskInstance.mediaLink = mediaLinkInstance2;
                }
                
                var sourceImageNameElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'SOURCEIMAGENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (sourceImageNameElement) {
                  var sourceImageNameInstance = sourceImageNameElement;
                  oSVirtualHardDiskInstance.sourceImageName = sourceImageNameInstance;
                }
                
                var osElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (osElement) {
                  var osInstance = osElement;
                  oSVirtualHardDiskInstance.operatingSystem = osInstance;
                }
              }
              
              var roleSizeElement = js2xml.getElement(responseDoc, roleListElement, 'ROLESIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleSizeElement && (roleSizeElement === null || roleSizeElement === undefined || roleSizeElement.length === 0) === false) {
                var roleSizeInstance = roleSizeElement;
                roleInstance.roleSize = roleSizeInstance;
              }
              
              var defaultWinRmCertificateThumbprintElement = js2xml.getElement(responseDoc, roleListElement, 'DEFAULTWINRMCERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (defaultWinRmCertificateThumbprintElement) {
                var defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement;
                roleInstance.defaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
              }
            }
          }
          
          var sdkVersionElement = js2xml.getElement(responseDoc, deploymentElement, 'SDKVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sdkVersionElement) {
            var sdkVersionInstance = sdkVersionElement;
            result.sdkVersion = sdkVersionInstance;
          }
          
          var lockedElement = js2xml.getElement(responseDoc, deploymentElement, 'LOCKED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lockedElement) {
            var lockedInstance = lockedElement;
            result.locked = lockedInstance;
          }
          
          var rollbackAllowedElement = js2xml.getElement(responseDoc, deploymentElement, 'ROLLBACKALLOWED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (rollbackAllowedElement) {
            var rollbackAllowedInstance = rollbackAllowedElement;
            result.rollbackAllowed = rollbackAllowedInstance;
          }
          
          var createdTimeElement = js2xml.getElement(responseDoc, deploymentElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (createdTimeElement) {
            var createdTimeInstance = new Date(createdTimeElement);
            result.createdTime = createdTimeInstance;
          }
          
          var lastModifiedTimeElement = js2xml.getElement(responseDoc, deploymentElement, 'LASTMODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lastModifiedTimeElement) {
            var lastModifiedTimeInstance = new Date(lastModifiedTimeElement);
            result.lastModifiedTime = lastModifiedTimeInstance;
          }
          
          var virtualNetworkNameElement = js2xml.getElement(responseDoc, deploymentElement, 'VIRTUALNETWORKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (virtualNetworkNameElement) {
            var virtualNetworkNameInstance = virtualNetworkNameElement;
            result.virtualNetworkName = virtualNetworkNameInstance;
          }
          
          var extendedPropertiesSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (extendedPropertiesSequenceElement) {
            for (var loweredIndex13 = 0; loweredIndex13 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex13 = loweredIndex13 + 1) {
              var extendedPropertiesElement = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex13];
              var extendedPropertiesKey = js2xml.getElement(responseDoc, extendedPropertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              var extendedPropertiesValue = js2xml.getElement(responseDoc, extendedPropertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              result.extendedProperties[extendedPropertiesKey] = extendedPropertiesValue;
            }
          }
          
          var persistentVMDowntimeElement = js2xml.getElement(responseDoc, deploymentElement, 'PERSISTENTVMDOWNTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (persistentVMDowntimeElement) {
            var persistentVMDowntimeInstance = {};
            result.persistentVMDowntime = persistentVMDowntimeInstance;
            
            var startTimeElement = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'STARTTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (startTimeElement) {
              var startTimeInstance = new Date(startTimeElement);
              persistentVMDowntimeInstance.startTime = startTimeInstance;
            }
            
            var endTimeElement = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'ENDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (endTimeElement) {
              var endTimeInstance = new Date(endTimeElement);
              persistentVMDowntimeInstance.endTime = endTimeInstance;
            }
            
            var statusElement2 = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusElement2) {
              var statusInstance2 = statusElement2;
              persistentVMDowntimeInstance.status = statusInstance2;
            }
          }
          
          var virtualIPsSequenceElement = js2xml.getElement(responseDoc, deploymentElement, 'VIRTUALIPS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (virtualIPsSequenceElement) {
            for (var loweredIndex14 = 0; loweredIndex14 < js2xml.getElements(responseDoc, virtualIPsSequenceElement, 'VIRTUALIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex14 = loweredIndex14 + 1) {
              var virtualIPsElement = js2xml.getElements(responseDoc, virtualIPsSequenceElement, 'VIRTUALIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex14];
              var virtualIPAddressInstance = {};
              result.virtualIPAddresses.push(virtualIPAddressInstance);
              
              var addressElement = js2xml.getElement(responseDoc, virtualIPsElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (addressElement) {
                var addressInstance = addressElement;
                virtualIPAddressInstance.address = addressInstance;
              }
            }
          }
          
          var dnsElement = js2xml.getElement(responseDoc, deploymentElement, 'DNS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (dnsElement) {
            var dnsInstance = { dnsServers: [] };
            result.dnsSettings = dnsInstance;
            
            var dnsServersSequenceElement = js2xml.getElement(responseDoc, dnsElement, 'DNSSERVERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dnsServersSequenceElement) {
              for (var loweredIndex15 = 0; loweredIndex15 < js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex15 = loweredIndex15 + 1) {
                var dnsServersElement = js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex15];
                var dnsServerInstance = {};
                dnsInstance.dnsServers.push(dnsServerInstance);
                
                var nameElement4 = js2xml.getElement(responseDoc, dnsServersElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (nameElement4) {
                  var nameInstance4 = nameElement4;
                  dnsServerInstance.name = nameInstance4;
                }
                
                var addressElement2 = js2xml.getElement(responseDoc, dnsServersElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (addressElement2) {
                  var addressInstance2 = addressElement2;
                  dnsServerInstance.address = addressInstance2;
                }
              }
            }
          }
          
          var extensionConfigurationElement = js2xml.getElement(responseDoc, deploymentElement, 'EXTENSIONCONFIGURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (extensionConfigurationElement) {
            var extensionConfigurationInstance = { allRoles: [], namedRoles: [] };
            result.extensionConfiguration = extensionConfigurationInstance;
            
            var allRolesSequenceElement = js2xml.getElement(responseDoc, extensionConfigurationElement, 'ALLROLES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (allRolesSequenceElement) {
              for (var loweredIndex16 = 0; loweredIndex16 < js2xml.getElements(responseDoc, allRolesSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex16 = loweredIndex16 + 1) {
                var allRolesElement = js2xml.getElements(responseDoc, allRolesSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex16];
                var extensionInstance = {};
                extensionConfigurationInstance.allRoles.push(extensionInstance);
                
                var idElement = js2xml.getElement(responseDoc, allRolesElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (idElement) {
                  var idInstance = idElement;
                  extensionInstance.id = idInstance;
                }
              }
            }
            
            var namedRolesSequenceElement = js2xml.getElement(responseDoc, extensionConfigurationElement, 'NAMEDROLES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (namedRolesSequenceElement) {
              for (var loweredIndex17 = 0; loweredIndex17 < js2xml.getElements(responseDoc, namedRolesSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex17 = loweredIndex17 + 1) {
                var namedRolesElement = js2xml.getElements(responseDoc, namedRolesSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex17];
                var roleInstance2 = { extensions: [] };
                extensionConfigurationInstance.namedRoles.push(roleInstance2);
                
                var roleNameElement3 = js2xml.getElement(responseDoc, namedRolesElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (roleNameElement3) {
                  var roleNameInstance3 = roleNameElement3;
                  roleInstance2.roleName = roleNameInstance3;
                }
                
                var extensionsSequenceElement = js2xml.getElement(responseDoc, namedRolesElement, 'EXTENSIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (extensionsSequenceElement) {
                  for (var loweredIndex18 = 0; loweredIndex18 < js2xml.getElements(responseDoc, extensionsSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex18 = loweredIndex18 + 1) {
                    var extensionsElement = js2xml.getElements(responseDoc, extensionsSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex18];
                    var extensionInstance2 = {};
                    roleInstance2.extensions.push(extensionInstance2);
                    
                    var idElement2 = js2xml.getElement(responseDoc, extensionsElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (idElement2) {
                      var idInstance2 = idElement2;
                      extensionInstance2.id = idInstance2;
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Package operation retrieves a cloud service package for a
   * deployment and stores the package files in Windows Azure Blob storage.
   * The following package files are placed in storage:  Service
   * configuration file - The cloud service configuration file (.cscfg)
   * provides configuration settings for the cloud service and individual
   * roles, including the number of role instances.   Service package - The
   * service package (.cspkg) contains the application code and the service
   * definition file.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {DeploymentGetPackageParameters} parameters - Parameters supplied
   * to the Get Package operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.getPackageByName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.containerUri === null || parameters.containerUri === undefined) {
      return callback(new Error('parameters.containerUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/package?containerUri=' + parameters.containerUri + ' +';
    if (parameters.overwriteExisting) {
      url2 = url2 + '&overwriteExisting=' + encodeURIComponent(parameters.overwriteExisting.toString());
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Package operation retrieves a cloud service package for a
   * deployment and stores the package files in Windows Azure Blob storage.
   * The following package files are placed in storage:  Service
   * configuration file - The cloud service configuration file (.cscfg)
   * provides configuration settings for the cloud service and individual
   * roles, including the number of role instances.   Service package - The
   * service package (.cspkg) contains the application code and the service
   * definition file.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {DeploymentGetPackageParameters} parameters - Parameters supplied
   * to the Get Package operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.getPackageBySlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.containerUri === null || parameters.containerUri === undefined) {
      return callback(new Error('parameters.containerUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '/package?containerUri=' + parameters.containerUri + ' +';
    if (parameters.overwriteExisting) {
      url2 = url2 + '&overwriteExisting=' + encodeURIComponent(parameters.overwriteExisting.toString());
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Reboot Role Instance operation requests a reboot of a role instance
   * that is running in a deployment.  The Reboot Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.rebootRoleInstanceByDeploymentName = function(serviceName, deploymentName, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginRebootingRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Reboot Role Instance operation requests a reboot of a role instance
   * that is running in a deployment.  The Reboot Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.rebootRoleInstanceByDeploymentSlot = function(serviceName, deploymentSlot, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginRebootingRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Reimage Role Instance operation requests a reimage of a role instance
   * that is running in a deployment.  The Reimage Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.reimageRoleInstanceByDeploymentName = function(serviceName, deploymentName, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginReimagingRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Reimage Role Instance operation requests a reimage of a role instance
   * that is running in a deployment.  The Reimage Role Instance operation is
   * an asynchronous operation. To determine whether the Management service
   * has finished processing the request, call Get Operation Status. For more
   * information on asynchronous operations, see Tracking Asynchronous Service
   * Management Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {String} roleInstanceName - The name of your role instance.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.reimageRoleInstanceByDeploymentSlot = function(serviceName, deploymentSlot, roleInstanceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginReimagingRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Rollback Update Or Upgrade operation cancels an in-progress
   * configuration update and returns the deployment to its state before the
   * update was started.  The Rollback Update Or Upgrade operation can only be
   * called when an update is in progress on the deployment. The deployment
   * status can be detected by calling the Get Deployment operation or Get
   * Hosted Service Properties operation and inspecting the RollbackAllowed
   * element. If the value returned is true a rollback can be performed.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {DeploymentRollbackUpdateOrUpgradeParameters} parameters -
   * Parameters supplied to the Rollback Update Or Upgrade operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.rollbackUpdateOrUpgradeByDeploymentName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '?comp=rollback';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var rollbackUpdateOrUpgradeElement = js2xml.createElement('RollbackUpdateOrUpgrade', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, rollbackUpdateOrUpgradeElement);
    
    var modeElement = js2xml.createElement('Mode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(modeElement, parameters.mode ? parameters.mode.toString() : 'Auto');
    js2xml.addChildElement(rollbackUpdateOrUpgradeElement, modeElement);
    
    var forceElement = js2xml.createElement('Force', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(forceElement, parameters.force.toString());
    js2xml.addChildElement(rollbackUpdateOrUpgradeElement, forceElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Rollback Update Or Upgrade operation cancels an in-progress
   * configuration update and returns the deployment to its state before the
   * update was started.  The Rollback Update Or Upgrade operation can only be
   * called when an update is in progress on the deployment. The deployment
   * status can be detected by calling the Get Deployment operation or Get
   * Hosted Service Properties operation and inspecting the RollbackAllowed
   * element. If the value returned is true a rollback can be performed.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {DeploymentRollbackUpdateOrUpgradeParameters} parameters -
   * Parameters supplied to the Rollback Update Or Upgrade operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  DeploymentOperations.prototype.rollbackUpdateOrUpgradeByDeploymentSlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deploymentslots/' + deploymentSlot + '?comp=rollback';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var rollbackUpdateOrUpgradeElement = js2xml.createElement('RollbackUpdateOrUpgrade', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, rollbackUpdateOrUpgradeElement);
    
    var modeElement = js2xml.createElement('Mode', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(modeElement, parameters.mode ? parameters.mode.toString() : 'Auto');
    js2xml.addChildElement(rollbackUpdateOrUpgradeElement, modeElement);
    
    var forceElement = js2xml.createElement('Force', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(forceElement, parameters.force.toString());
    js2xml.addChildElement(rollbackUpdateOrUpgradeElement, forceElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Swap Deployment operation initiates a virtual IP address swap between
   * the staging and production deployment environments for a service. If the
   * service is currently running in the staging environment, it will be
   * swapped to the production environment. If it is running in the production
   * environment, it will be swapped to staging. For more information on this
   * type of upgrade, see Performing Virtual IP Swap Upgrades.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {DeploymentSwapParameters} parameters - Parameters supplied to the
   * Swap Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.swap = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginSwapping(serviceName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Update Deployment Status operation initiates a change in the running
   * status of a deployment. The status of a deployment can be running or
   * suspended.  The Update Deployment Status operation is an asynchronous
   * operation. To determine whether the Management service has finished
   * processing the request, call Get Operation Status. For more information
   * on asynchronous operations, see Tracking Asynchronous Service Management
   * Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {DeploymentUpdateStatusParameters} parameters - Parameters supplied
   * to the Update Deployment Status operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.updateStatusByDeploymentName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginUpdatingStatusByDeploymentName(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Update Deployment Status operation initiates a change in the running
   * status of a deployment. The status of a deployment can be running or
   * suspended.  The Update Deployment Status operation is an asynchronous
   * operation. To determine whether the Management service has finished
   * processing the request, call Get Operation Status. For more information
   * on asynchronous operations, see Tracking Asynchronous Service Management
   * Requests.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to swap deployments for.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {DeploymentUpdateStatusParameters} parameters - Parameters supplied
   * to the Update Deployment Status operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.updateStatusByDeploymentSlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginUpdatingStatusByDeploymentSlot(serviceName, deploymentSlot, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Upgrade Deployment operation initiates an update of role instances in
   * a deployment using the package and configuration that you specify. For
   * more information about updating role instances, see Update a Windows
   * Azure Service.  The Upgrade Deployment operation is an asynchronous
   * operation. To determine whether the request has been processed, call Get
   * Operation Status. For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.To perform an automatic
   * update of a deployment, call Upgrade Deployment or Change Deployment
   * Configuration with the Mode element set to automatic. The update proceeds
   * from that point without a need for further input. You can call Get
   * Operation Status to determine when the update is complete.  To perform a
   * manual update, first call Upgrade Deployment with the Mode element set to
   * manual. Next, call Walk Upgrade Domain to update each domain within the
   * deployment. You should make sure that the operation is complete by
   * calling Get Operation Status before updating the next domain.  Important:
   * An update that adds or removes role instances will result in a
   * configuration update to all roles that are deployed in the cloud service.
   * Existing role instances need to be notified of new role instances so that
   * all role instances can communicate together in the cloud service.  By
   * default, a cloud service is deployed with five update domains, which are
   * updated one at a time during an in-place update. For information on
   * modifying the number of update domains in the service definition file,
   * see Windows Azure Service Definition Schema (.csdef File).  To determine
   * the update domain in which a particular instance is running in Windows
   * Azure, use the UpdateDomain property of the RoleInstance class. See the
   * Windows Azure Managed Library Reference for more information.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to upgrade.
   *
   * @param {String} deploymentName - The deployment to upgrade.
   *
   * @param {DeploymentUpgradeParameters} parameters - Parameters supplied to
   * the Upgrade Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.upgradeByName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginUpgradingByName(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Upgrade Deployment operation initiates an update of role instances in
   * a deployment using the package and configuration that you specify. For
   * more information about updating role instances, see Update a Windows
   * Azure Service.  The Upgrade Deployment operation is an asynchronous
   * operation. To determine whether the request has been processed, call Get
   * Operation Status. For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.To perform an automatic
   * update of a deployment, call Upgrade Deployment or Change Deployment
   * Configuration with the Mode element set to automatic. The update proceeds
   * from that point without a need for further input. You can call Get
   * Operation Status to determine when the update is complete.  To perform a
   * manual update, first call Upgrade Deployment with the Mode element set to
   * manual. Next, call Walk Upgrade Domain to update each domain within the
   * deployment. You should make sure that the operation is complete by
   * calling Get Operation Status before updating the next domain.  Important:
   * An update that adds or removes role instances will result in a
   * configuration update to all roles that are deployed in the cloud service.
   * Existing role instances need to be notified of new role instances so that
   * all role instances can communicate together in the cloud service.  By
   * default, a cloud service is deployed with five update domains, which are
   * updated one at a time during an in-place update. For information on
   * modifying the number of update domains in the service definition file,
   * see Windows Azure Service Definition Schema (.csdef File).  To determine
   * the update domain in which a particular instance is running in Windows
   * Azure, use the UpdateDomain property of the RoleInstance class. See the
   * Windows Azure Managed Library Reference for more information.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service to upgrade.
   *
   * @param {DeploymentSlot} deploymentSlot - The slot to upgrade.
   *
   * @param {DeploymentUpgradeParameters} parameters - Parameters supplied to
   * the Upgrade Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.upgradeBySlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginUpgradingBySlot(serviceName, deploymentSlot, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Walk Upgrade Domain operation specifies an update domain in which a
   * role instance must be updated. For more information about updating role
   * instances, see Update a Windows Azure Service.  The Walk Upgrade Domain
   * operation is an asynchronous operation. To determine whether the
   * Management service has finished processing the request, call Get
   * Operation Status.  For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.  Prior to calling the
   * Walk Upgrade Domain operation you must have called Upgrade Deployment,
   * Change Deployment Configuration, or Rollback Update Or Upgrade.  By
   * default, a service is deployed with five update domains, which are
   * updated one at a time during an in-place update. For information on
   * modifying the number of update domains in the service definition file,
   * see Windows Azure Service Definition Schema (.csdef File).  To perform a
   * manual update of your deployment, proceed in this order:  Call Upgrade
   * Deployment with the Mode element set to manual.   Call Walk Upgrade
   * Domain to update each domain within the deployment. Update domains must
   * be updated in order. For example, begin with domain 0, proceed to domain
   * 1, and so on.  Important: An update that adds or removes role instances
   * will result in a configuration update to all roles that are deployed in
   * the cloud service. Existing role instances need to be notified of new
   * role instances so that all role instances can communicate together in the
   * cloud service.  While an update is in progress, call Get Deployment to
   * determine its status. If the update is in progress, Get Deployment
   * returns an UpgradeStatus element that contains information about the
   * update. If the update is complete, or if no update is in progress, then
   * the UpgradeStatus element is null.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {DeploymentWalkUpgradeDomainParameters} parameters - Parameters
   * supplied to the Walk Upgrade Domain operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.walkUpgradeDomainByDeploymentName = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginWalkingUpgradeDomainByDeploymentName(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Walk Upgrade Domain operation specifies an update domain in which a
   * role instance must be updated. For more information about updating role
   * instances, see Update a Windows Azure Service.  The Walk Upgrade Domain
   * operation is an asynchronous operation. To determine whether the
   * Management service has finished processing the request, call Get
   * Operation Status.  For more information on asynchronous operations, see
   * Tracking Asynchronous Service Management Requests.  Prior to calling the
   * Walk Upgrade Domain operation you must have called Upgrade Deployment,
   * Change Deployment Configuration, or Rollback Update Or Upgrade.  By
   * default, a service is deployed with five update domains, which are
   * updated one at a time during an in-place update. For information on
   * modifying the number of update domains in the service definition file,
   * see Windows Azure Service Definition Schema (.csdef File).  To perform a
   * manual update of your deployment, proceed in this order:  Call Upgrade
   * Deployment with the Mode element set to manual.   Call Walk Upgrade
   * Domain to update each domain within the deployment. Update domains must
   * be updated in order. For example, begin with domain 0, proceed to domain
   * 1, and so on.  Important: An update that adds or removes role instances
   * will result in a configuration update to all roles that are deployed in
   * the cloud service. Existing role instances need to be notified of new
   * role instances so that all role instances can communicate together in the
   * cloud service.  While an update is in progress, call Get Deployment to
   * determine its status. If the update is in progress, Get Deployment
   * returns an UpgradeStatus element that contains information about the
   * update. If the update is complete, or if no update is in progress, then
   * the UpgradeStatus element is null.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {DeploymentSlot} deploymentSlot - The deployment slot.
   *
   * @param {DeploymentWalkUpgradeDomainParameters} parameters - Parameters
   * supplied to the Walk Upgrade Domain operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  DeploymentOperations.prototype.walkUpgradeDomainByDeploymentSlot = function(serviceName, deploymentSlot, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.deployments.beginWalkingUpgradeDomainByDeploymentSlot(serviceName, deploymentSlot, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return DeploymentOperations;
})();

/**
 * The Service Management API includes operations for managing the hosted
 * services beneath your subscription.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for more
 * information)
 */
var HostedServiceOperations = (function() {
  /**
   * Initializes a new instance of the HostedServiceOperations class.
   *
   * @constructor
   *
   * @param {ComputeManagementClient} client - Reference to the service client.
   */
  function HostedServiceOperations(client) {
    this.client = client;
  }
  
  /**
   * The Add Extension operation adds an available extension to your cloud
   * service. In Windows Azure, a process can run as an extension of a cloud
   * service. For example, Remote Desktop Access or the Windows Azure
   * Diagnostics Agent can run as extensions to the cloud service. You can
   * find the available extension by using the List Available Extensions
   * operation.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {HostedServiceAddExtensionParameters} parameters - Parameters
   * supplied to the Add Extension operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  HostedServiceOperations.prototype.addExtension = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.hostedServices.beginAddingExtension(serviceName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Add Extension operation adds an available extension to your cloud
   * service. In Windows Azure, a process can run as an extension of a cloud
   * service. For example, Remote Desktop Access or the Windows Azure
   * Diagnostics Agent can run as extensions to the cloud service. You can
   * find the available extension by using the List Available Extensions
   * operation.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {HostedServiceAddExtensionParameters} parameters - Parameters
   * supplied to the Add Extension operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  HostedServiceOperations.prototype.beginAddingExtension = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.id === null || parameters.id === undefined) {
      return callback(new Error('parameters.id cannot be null.'));
    }
    if (parameters.type === null || parameters.type === undefined) {
      return callback(new Error('parameters.type cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/extensions';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var extensionElement = js2xml.createElement('Extension', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, extensionElement);
    
    if (parameters.providerNamespace) {
      var providerNameSpaceElement = js2xml.createElement('ProviderNameSpace', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(providerNameSpaceElement, parameters.providerNamespace);
      js2xml.addChildElement(extensionElement, providerNameSpaceElement);
    }
    
    var typeElement = js2xml.createElement('Type', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(typeElement, parameters.type);
    js2xml.addChildElement(extensionElement, typeElement);
    
    var idElement = js2xml.createElement('Id', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(idElement, parameters.id);
    js2xml.addChildElement(extensionElement, idElement);
    
    if (parameters.thumbprint) {
      var thumbprintElement = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(thumbprintElement, parameters.thumbprint);
      js2xml.addChildElement(extensionElement, thumbprintElement);
    }
    
    if (parameters.thumbprintAlgorithm) {
      var thumbprintAlgorithmElement = js2xml.createElement('ThumbprintAlgorithm', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(thumbprintAlgorithmElement, parameters.thumbprintAlgorithm);
      js2xml.addChildElement(extensionElement, thumbprintAlgorithmElement);
    }
    
    if (parameters.publicConfiguration) {
      var publicConfigurationElement = js2xml.createElement('PublicConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publicConfigurationElement, new Buffer(parameters.publicConfiguration).toString('base64'));
      js2xml.addChildElement(extensionElement, publicConfigurationElement);
    }
    
    if (parameters.privateConfiguration) {
      var privateConfigurationElement = js2xml.createElement('PrivateConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(privateConfigurationElement, new Buffer(parameters.privateConfiguration).toString('base64'));
      js2xml.addChildElement(extensionElement, privateConfigurationElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Extension operation deletes the specified extension from a
   * cloud service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} extensionId - The identifier that was assigned to the
   * extension when it was added to the cloud service
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  HostedServiceOperations.prototype.beginDeletingExtension = function(serviceName, extensionId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (extensionId === null || extensionId === undefined) {
      return callback(new Error('extensionId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/extensions/' + extensionId;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Check Hosted Service Name Availability operation checks for the
   * availability of the specified cloud service name.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154116.aspx for
   * more information)
   *
   * @param {String} serviceName - The cloud service name that you would like
   * to use.
   *
   * @param {Function} callback
   *
   * @returns {HostedServiceCheckNameAvailabilityResponse} - The Check Hosted
   * Service Name Availability operation response.
   */
  HostedServiceOperations.prototype.checkNameAvailability = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/operations/isavailable/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var availabilityResponseElement = js2xml.getElement(responseDoc, responseDoc, 'AVAILABILITYRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (availabilityResponseElement) {
          var resultElement = js2xml.getElement(responseDoc, availabilityResponseElement, 'RESULT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (resultElement) {
            var resultInstance = resultElement;
            result.isAvailable = resultInstance;
          }
          
          var reasonElement = js2xml.getElement(responseDoc, availabilityResponseElement, 'REASON', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (reasonElement) {
            var reasonInstance = reasonElement;
            result.reason = reasonInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Create Hosted Service operation creates a new cloud service in Windows
   * Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441304.aspx for
   * more information)
   *
   * @param {HostedServiceCreateParameters} parameters - Parameters supplied to
   * the Create Hosted Service operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  HostedServiceOperations.prototype.create = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.description && parameters.description.length > 1024) {
      return callback(new Error('parameters.description is outside the valid range.'));
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.serviceName === null || parameters.serviceName === undefined) {
      return callback(new Error('parameters.serviceName cannot be null.'));
    }
    // TODO: Validate parameters.serviceName is a valid DNS name.
    var locationCount = (parameters.affinityGroup ? 1 : 0) + (parameters.location ? 1 : 0);
    if (locationCount !== 1) {
      return callback(new Error('Only one of parameters.affinityGroup, parameters.location may be provided.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var createHostedServiceElement = js2xml.createElement('CreateHostedService', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, createHostedServiceElement);
    
    var serviceNameElement = js2xml.createElement('ServiceName', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(serviceNameElement, parameters.serviceName);
    js2xml.addChildElement(createHostedServiceElement, serviceNameElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
    js2xml.addChildElement(createHostedServiceElement, labelElement);
    
    if (parameters.description) {
      var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(descriptionElement, parameters.description);
      js2xml.addChildElement(createHostedServiceElement, descriptionElement);
    }
    
    if (parameters.location) {
      var locationElement = js2xml.createElement('Location', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(locationElement, parameters.location);
      js2xml.addChildElement(createHostedServiceElement, locationElement);
    }
    
    if (parameters.affinityGroup) {
      var affinityGroupElement = js2xml.createElement('AffinityGroup', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(affinityGroupElement, parameters.affinityGroup);
      js2xml.addChildElement(createHostedServiceElement, affinityGroupElement);
    }
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(createHostedServiceElement, extendedPropertiesDictionaryElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Hosted Service operation deletes the specified cloud service
   * from Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  HostedServiceOperations.prototype.delete = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Extension operation deletes the specified extension from a
   * cloud service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} extensionId - The identifier that was assigned to the
   * extension when it was added to the cloud service
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  HostedServiceOperations.prototype.deleteExtension = function(serviceName, extensionId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.hostedServices.beginDeletingExtension(serviceName, extensionId, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get Hosted Service Properties operation retrieves system properties
   * for the specified cloud service. These properties include the service
   * name and service type; the name of the affinity group to which the
   * service belongs, or its location if it is not part of an affinity group.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx
   * for more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {Function} callback
   *
   * @returns {HostedServiceGetResponse} - The Get Hosted Service operation
   * response.
   */
  HostedServiceOperations.prototype.get = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var hostedServiceElement = js2xml.getElement(responseDoc, responseDoc, 'HOSTEDSERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (hostedServiceElement) {
          var urlElement = js2xml.getElement(responseDoc, hostedServiceElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (urlElement) {
            var urlInstance = urlElement;
            result.uri = urlInstance;
          }
          
          var serviceNameElement = js2xml.getElement(responseDoc, hostedServiceElement, 'SERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (serviceNameElement) {
            var serviceNameInstance = serviceNameElement;
            result.serviceName = serviceNameInstance;
          }
          
          var hostedServicePropertiesElement = js2xml.getElement(responseDoc, hostedServiceElement, 'HOSTEDSERVICEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostedServicePropertiesElement) {
            var hostedServicePropertiesInstance = { extendedProperties: {} };
            result.properties = hostedServicePropertiesInstance;
            
            var descriptionElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (descriptionElement) {
              var descriptionInstance = descriptionElement;
              hostedServicePropertiesInstance.description = descriptionInstance;
            }
            
            var affinityGroupElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (affinityGroupElement) {
              var affinityGroupInstance = affinityGroupElement;
              hostedServicePropertiesInstance.affinityGroup = affinityGroupInstance;
            }
            
            var locationElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (locationElement) {
              var locationInstance = locationElement;
              hostedServicePropertiesInstance.location = locationInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
              hostedServicePropertiesInstance.label = labelInstance;
            }
            
            var statusElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusElement) {
              var statusInstance = statusElement;
              hostedServicePropertiesInstance.status = statusInstance;
            }
            
            var dateCreatedElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DATECREATED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dateCreatedElement) {
              var dateCreatedInstance = new Date(dateCreatedElement);
              hostedServicePropertiesInstance.dateCreated = dateCreatedInstance;
            }
            
            var dateLastModifiedElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DATELASTMODIFIED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dateLastModifiedElement) {
              var dateLastModifiedInstance = new Date(dateLastModifiedElement);
              hostedServicePropertiesInstance.dateLastModified = dateLastModifiedInstance;
            }
            
            var extendedPropertiesSequenceElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (extendedPropertiesSequenceElement) {
              for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
                var extendedPropertiesElement = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
                var extendedPropertiesKey = js2xml.getElement(responseDoc, extendedPropertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var extendedPropertiesValue = js2xml.getElement(responseDoc, extendedPropertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                hostedServicePropertiesInstance.extendedProperties[extendedPropertiesKey] = extendedPropertiesValue;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Hosted Service Properties operation retrieves system properties
   * for the specified cloud service. These properties include the service
   * name and service type; the name of the affinity group to which the
   * service belongs, or its location if it is not part of an affinity group;
   * and information on the deployments of the service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {Function} callback
   *
   * @returns {HostedServiceGetDetailedResponse} - The detailed Get Hosted
   * Service operation response.
   */
  HostedServiceOperations.prototype.getDetailed = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '?embed-detail=true';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { deployments: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var hostedServiceElement = js2xml.getElement(responseDoc, responseDoc, 'HOSTEDSERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (hostedServiceElement) {
          var deploymentsSequenceElement = js2xml.getElement(responseDoc, hostedServiceElement, 'DEPLOYMENTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (deploymentsSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, deploymentsSequenceElement, 'DEPLOYMENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var deploymentsElement = js2xml.getElements(responseDoc, deploymentsSequenceElement, 'DEPLOYMENT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              var deploymentInstance = { extendedProperties: {}, roleInstances: [], roles: [], virtualIPAddresses: [] };
              result.deployments.push(deploymentInstance);
              
              var nameElement = js2xml.getElement(responseDoc, deploymentsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (nameElement) {
                var nameInstance = nameElement;
                deploymentInstance.name = nameInstance;
              }
              
              var deploymentSlotElement = js2xml.getElement(responseDoc, deploymentsElement, 'DEPLOYMENTSLOT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (deploymentSlotElement) {
                var deploymentSlotInstance = deploymentSlotElement;
                deploymentInstance.deploymentSlot = deploymentSlotInstance;
              }
              
              var privateIDElement = js2xml.getElement(responseDoc, deploymentsElement, 'PRIVATEID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (privateIDElement) {
                var privateIDInstance = privateIDElement;
                deploymentInstance.privateId = privateIDInstance;
              }
              
              var statusElement = js2xml.getElement(responseDoc, deploymentsElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (statusElement) {
                var statusInstance = statusElement;
                deploymentInstance.status = statusInstance;
              }
              
              var labelElement = js2xml.getElement(responseDoc, deploymentsElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (labelElement) {
                var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
                deploymentInstance.label = labelInstance;
              }
              
              var urlElement = js2xml.getElement(responseDoc, deploymentsElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (urlElement) {
                var urlInstance = urlElement;
                deploymentInstance.uri = urlInstance;
              }
              
              var configurationElement = js2xml.getElement(responseDoc, deploymentsElement, 'CONFIGURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (configurationElement) {
                var configurationInstance = new Buffer(configurationElement, 'base64').toString('ascii');
                deploymentInstance.configuration = configurationInstance;
              }
              
              var roleInstanceListSequenceElement = js2xml.getElement(responseDoc, deploymentsElement, 'ROLEINSTANCELIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleInstanceListSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, roleInstanceListSequenceElement, 'ROLEINSTANCE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var roleInstanceListElement = js2xml.getElements(responseDoc, roleInstanceListSequenceElement, 'ROLEINSTANCE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  var roleInstanceInstance = { instanceEndpoints: [] };
                  deploymentInstance.roleInstances.push(roleInstanceInstance);
                  
                  var roleNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (roleNameElement) {
                    var roleNameInstance = roleNameElement;
                    roleInstanceInstance.roleName = roleNameInstance;
                  }
                  
                  var instanceNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceNameElement) {
                    var instanceNameInstance = instanceNameElement;
                    roleInstanceInstance.instanceName = instanceNameInstance;
                  }
                  
                  var instanceStatusElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceStatusElement) {
                    var instanceStatusInstance = instanceStatusElement;
                    roleInstanceInstance.instanceStatus = instanceStatusInstance;
                  }
                  
                  var instanceUpgradeDomainElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEUPGRADEDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceUpgradeDomainElement && (instanceUpgradeDomainElement === null || instanceUpgradeDomainElement === undefined || instanceUpgradeDomainElement.length === 0) === false) {
                    var instanceUpgradeDomainInstance = parseInt(instanceUpgradeDomainElement, 10);
                    roleInstanceInstance.instanceUpgradeDomain = instanceUpgradeDomainInstance;
                  }
                  
                  var instanceFaultDomainElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEFAULTDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceFaultDomainElement && (instanceFaultDomainElement === null || instanceFaultDomainElement === undefined || instanceFaultDomainElement.length === 0) === false) {
                    var instanceFaultDomainInstance = parseInt(instanceFaultDomainElement, 10);
                    roleInstanceInstance.instanceFaultDomain = instanceFaultDomainInstance;
                  }
                  
                  var instanceSizeElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceSizeElement && (instanceSizeElement === null || instanceSizeElement === undefined || instanceSizeElement.length === 0) === false) {
                    var instanceSizeInstance = instanceSizeElement;
                    roleInstanceInstance.instanceSize = instanceSizeInstance;
                  }
                  
                  var instanceStateDetailsElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCESTATEDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceStateDetailsElement) {
                    var instanceStateDetailsInstance = instanceStateDetailsElement;
                    roleInstanceInstance.instanceStateDetails = instanceStateDetailsInstance;
                  }
                  
                  var instanceErrorCodeElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEERRORCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceErrorCodeElement) {
                    var instanceErrorCodeInstance = instanceErrorCodeElement;
                    roleInstanceInstance.instanceErrorCode = instanceErrorCodeInstance;
                  }
                  
                  var ipAddressElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'IPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (ipAddressElement) {
                    var ipAddressInstance = ipAddressElement;
                    roleInstanceInstance.iPAddress = ipAddressInstance;
                  }
                  
                  var instanceEndpointsSequenceElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'INSTANCEENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (instanceEndpointsSequenceElement) {
                    for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, instanceEndpointsSequenceElement, 'INSTANCEENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
                      var instanceEndpointsElement = js2xml.getElements(responseDoc, instanceEndpointsSequenceElement, 'INSTANCEENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
                      var instanceEndpointInstance = {};
                      roleInstanceInstance.instanceEndpoints.push(instanceEndpointInstance);
                      
                      var localPortElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'LOCALPORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (localPortElement && (localPortElement === null || localPortElement === undefined || localPortElement.length === 0) === false) {
                        var localPortInstance = parseInt(localPortElement, 10);
                        instanceEndpointInstance.localPort = localPortInstance;
                      }
                      
                      var nameElement2 = js2xml.getElement(responseDoc, instanceEndpointsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (nameElement2) {
                        var nameInstance2 = nameElement2;
                        instanceEndpointInstance.name = nameInstance2;
                      }
                      
                      var portElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (portElement) {
                        var portInstance = parseInt(portElement, 10);
                        instanceEndpointInstance.port = portInstance;
                      }
                      
                      var protocolElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (protocolElement) {
                        var protocolInstance = protocolElement;
                        instanceEndpointInstance.protocol = protocolInstance;
                      }
                      
                      var vipElement = js2xml.getElement(responseDoc, instanceEndpointsElement, 'VIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (vipElement) {
                        var vipInstance = vipElement;
                        instanceEndpointInstance.virtualIPAddress = vipInstance;
                      }
                    }
                  }
                  
                  var powerStateElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'POWERSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (powerStateElement) {
                    var powerStateInstance = powerStateElement;
                    roleInstanceInstance.powerState = powerStateInstance;
                  }
                  
                  var hostNameElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'HOSTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (hostNameElement) {
                    var hostNameInstance = hostNameElement;
                    roleInstanceInstance.hostName = hostNameInstance;
                  }
                  
                  var remoteAccessCertificateThumbprintElement = js2xml.getElement(responseDoc, roleInstanceListElement, 'REMOTEACCESSCERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (remoteAccessCertificateThumbprintElement) {
                    var remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement;
                    roleInstanceInstance.remoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
                  }
                }
              }
              
              var upgradeStatusElement = js2xml.getElement(responseDoc, deploymentsElement, 'UPGRADESTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (upgradeStatusElement) {
                var upgradeStatusInstance = {};
                deploymentInstance.upgradeStatus = upgradeStatusInstance;
                
                var upgradeTypeElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'UPGRADETYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (upgradeTypeElement) {
                  var upgradeTypeInstance = upgradeTypeElement;
                  upgradeStatusInstance.upgradeType = upgradeTypeInstance;
                }
                
                var currentUpgradeDomainStateElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'CURRENTUPGRADEDOMAINSTATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (currentUpgradeDomainStateElement) {
                  var currentUpgradeDomainStateInstance = currentUpgradeDomainStateElement;
                  upgradeStatusInstance.currentUpgradeDomainState = currentUpgradeDomainStateInstance;
                }
                
                var currentUpgradeDomainElement = js2xml.getElement(responseDoc, upgradeStatusElement, 'CURRENTUPGRADEDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (currentUpgradeDomainElement) {
                  var currentUpgradeDomainInstance = parseInt(currentUpgradeDomainElement, 10);
                  upgradeStatusInstance.currentUpgradeDomain = currentUpgradeDomainInstance;
                }
              }
              
              var upgradeDomainCountElement = js2xml.getElement(responseDoc, deploymentsElement, 'UPGRADEDOMAINCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (upgradeDomainCountElement) {
                var upgradeDomainCountInstance = parseInt(upgradeDomainCountElement, 10);
                deploymentInstance.upgradeDomainCount = upgradeDomainCountInstance;
              }
              
              var roleListSequenceElement = js2xml.getElement(responseDoc, deploymentsElement, 'ROLELIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleListSequenceElement) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, roleListSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
                  var roleListElement = js2xml.getElements(responseDoc, roleListSequenceElement, 'ROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
                  var roleInstance = { configurationSets: [], dataVirtualHardDisks: [] };
                  deploymentInstance.roles.push(roleInstance);
                  
                  var roleNameElement2 = js2xml.getElement(responseDoc, roleListElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (roleNameElement2) {
                    var roleNameInstance2 = roleNameElement2;
                    roleInstance.roleName = roleNameInstance2;
                  }
                  
                  var oSVersionElement = js2xml.getElement(responseDoc, roleListElement, 'OSVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (oSVersionElement) {
                    var oSVersionInstance = oSVersionElement;
                    roleInstance.oSVersion = oSVersionInstance;
                  }
                  
                  var roleTypeElement = js2xml.getElement(responseDoc, roleListElement, 'ROLETYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (roleTypeElement) {
                    var roleTypeInstance = roleTypeElement;
                    roleInstance.roleType = roleTypeInstance;
                  }
                  
                  var configurationSetsSequenceElement = js2xml.getElement(responseDoc, roleListElement, 'CONFIGURATIONSETS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (configurationSetsSequenceElement) {
                    for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
                      var configurationSetsElement = js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
                      var configurationSetInstance = { inputEndpoints: [], storedCertificateSettings: [], subnetNames: [] };
                      roleInstance.configurationSets.push(configurationSetInstance);
                      
                      var configurationSetTypeElement = js2xml.getElement(responseDoc, configurationSetsElement, 'CONFIGURATIONSETTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (configurationSetTypeElement) {
                        var configurationSetTypeInstance = configurationSetTypeElement;
                        configurationSetInstance.configurationSetType = configurationSetTypeInstance;
                      }
                      
                      var inputEndpointsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'INPUTENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (inputEndpointsSequenceElement) {
                        for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex6 = loweredIndex6 + 1) {
                          var inputEndpointsElement = js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex6];
                          var inputEndpointInstance = {};
                          configurationSetInstance.inputEndpoints.push(inputEndpointInstance);
                          
                          var loadBalancedEndpointSetNameElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCEDENDPOINTSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (loadBalancedEndpointSetNameElement) {
                            var loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement;
                            inputEndpointInstance.loadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                          }
                          
                          var localPortElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOCALPORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (localPortElement2 && (localPortElement2 === null || localPortElement2 === undefined || localPortElement2.length === 0) === false) {
                            var localPortInstance2 = parseInt(localPortElement2, 10);
                            inputEndpointInstance.localPort = localPortInstance2;
                          }
                          
                          var nameElement3 = js2xml.getElement(responseDoc, inputEndpointsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (nameElement3) {
                            var nameInstance3 = nameElement3;
                            inputEndpointInstance.name = nameInstance3;
                          }
                          
                          var portElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (portElement2 && (portElement2 === null || portElement2 === undefined || portElement2.length === 0) === false) {
                            var portInstance2 = parseInt(portElement2, 10);
                            inputEndpointInstance.port = portInstance2;
                          }
                          
                          var loadBalancerProbeElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCERPROBE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (loadBalancerProbeElement) {
                            var loadBalancerProbeInstance = {};
                            inputEndpointInstance.loadBalancerProbe = loadBalancerProbeInstance;
                            
                            var pathElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (pathElement) {
                              var pathInstance = pathElement;
                              loadBalancerProbeInstance.path = pathInstance;
                            }
                            
                            var portElement3 = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (portElement3) {
                              var portInstance3 = parseInt(portElement3, 10);
                              loadBalancerProbeInstance.port = portInstance3;
                            }
                            
                            var protocolElement2 = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (protocolElement2) {
                              var protocolInstance2 = protocolElement2;
                              loadBalancerProbeInstance.protocol = protocolInstance2;
                            }
                            
                            var intervalInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'INTERVALINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (intervalInSecondsElement && (intervalInSecondsElement === null || intervalInSecondsElement === undefined || intervalInSecondsElement.length === 0) === false) {
                              var intervalInSecondsInstance = parseInt(intervalInSecondsElement, 10);
                              loadBalancerProbeInstance.intervalInSeconds = intervalInSecondsInstance;
                            }
                            
                            var timeoutInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'TIMEOUTINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (timeoutInSecondsElement && (timeoutInSecondsElement === null || timeoutInSecondsElement === undefined || timeoutInSecondsElement.length === 0) === false) {
                              var timeoutInSecondsInstance = parseInt(timeoutInSecondsElement, 10);
                              loadBalancerProbeInstance.timeoutInSeconds = timeoutInSecondsInstance;
                            }
                          }
                          
                          var protocolElement3 = js2xml.getElement(responseDoc, inputEndpointsElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (protocolElement3) {
                            var protocolInstance3 = protocolElement3;
                            inputEndpointInstance.protocol = protocolInstance3;
                          }
                          
                          var vipElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'VIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (vipElement2) {
                            var vipInstance2 = vipElement2;
                            inputEndpointInstance.virtualIPAddress = vipInstance2;
                          }
                          
                          var enableDirectServerReturnElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ENABLEDIRECTSERVERRETURN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (enableDirectServerReturnElement && (enableDirectServerReturnElement === null || enableDirectServerReturnElement === undefined || enableDirectServerReturnElement.length === 0) === false) {
                            var enableDirectServerReturnInstance = enableDirectServerReturnElement;
                            inputEndpointInstance.enableDirectServerReturn = enableDirectServerReturnInstance;
                          }
                          
                          var accessControlListElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ACCESSCONTROLLIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (accessControlListElement) {
                            var accessControlListInstance = { rules: [] };
                            inputEndpointInstance.accessControlList = accessControlListInstance;
                            
                            var rulesSequenceElement = js2xml.getElement(responseDoc, accessControlListElement, 'RULES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (rulesSequenceElement) {
                              for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                                var rulesElement = js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                                var ruleInstance = {};
                                accessControlListInstance.rules.push(ruleInstance);
                                
                                var orderElement = js2xml.getElement(responseDoc, rulesElement, 'ORDER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                                if (orderElement && (orderElement === null || orderElement === undefined || orderElement.length === 0) === false) {
                                  var orderInstance = parseInt(orderElement, 10);
                                  ruleInstance.order = orderInstance;
                                }
                                
                                var actionElement = js2xml.getElement(responseDoc, rulesElement, 'ACTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                                if (actionElement) {
                                  var actionInstance = actionElement;
                                  ruleInstance.action = actionInstance;
                                }
                                
                                var remoteSubnetElement = js2xml.getElement(responseDoc, rulesElement, 'REMOTESUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                                if (remoteSubnetElement) {
                                  var remoteSubnetInstance = remoteSubnetElement;
                                  ruleInstance.remoteSubnet = remoteSubnetInstance;
                                }
                                
                                var descriptionElement = js2xml.getElement(responseDoc, rulesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                                if (descriptionElement) {
                                  var descriptionInstance = descriptionElement;
                                  ruleInstance.description = descriptionInstance;
                                }
                              }
                            }
                          }
                        }
                      }
                      
                      var subnetNamesSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SUBNETNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (subnetNamesSequenceElement) {
                        for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                          var subnetNamesElement = js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                          configurationSetInstance.subnetNames.push(subnetNamesElement);
                        }
                      }
                      
                      var computerNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'COMPUTERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (computerNameElement) {
                        var computerNameInstance = computerNameElement;
                        configurationSetInstance.computerName = computerNameInstance;
                      }
                      
                      var adminPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (adminPasswordElement) {
                        var adminPasswordInstance = adminPasswordElement;
                        configurationSetInstance.adminPassword = adminPasswordInstance;
                      }
                      
                      var resetPasswordOnFirstLogonElement = js2xml.getElement(responseDoc, configurationSetsElement, 'RESETPASSWORDONFIRSTLOGON', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (resetPasswordOnFirstLogonElement && (resetPasswordOnFirstLogonElement === null || resetPasswordOnFirstLogonElement === undefined || resetPasswordOnFirstLogonElement.length === 0) === false) {
                        var resetPasswordOnFirstLogonInstance = resetPasswordOnFirstLogonElement;
                        configurationSetInstance.resetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                      }
                      
                      var enableAutomaticUpdatesElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ENABLEAUTOMATICUPDATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (enableAutomaticUpdatesElement && (enableAutomaticUpdatesElement === null || enableAutomaticUpdatesElement === undefined || enableAutomaticUpdatesElement.length === 0) === false) {
                        var enableAutomaticUpdatesInstance = enableAutomaticUpdatesElement;
                        configurationSetInstance.enableAutomaticUpdates = enableAutomaticUpdatesInstance;
                      }
                      
                      var timeZoneElement = js2xml.getElement(responseDoc, configurationSetsElement, 'TIMEZONE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (timeZoneElement) {
                        var timeZoneInstance = timeZoneElement;
                        configurationSetInstance.timeZone = timeZoneInstance;
                      }
                      
                      var domainJoinElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DOMAINJOIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (domainJoinElement) {
                        var domainJoinInstance = {};
                        configurationSetInstance.domainJoin = domainJoinInstance;
                        
                        var credentialsElement = js2xml.getElement(responseDoc, domainJoinElement, 'CREDENTIALS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (credentialsElement) {
                          var credentialsInstance = {};
                          domainJoinInstance.credentials = credentialsInstance;
                          
                          var domainElement = js2xml.getElement(responseDoc, credentialsElement, 'DOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (domainElement) {
                            var domainInstance = domainElement;
                            credentialsInstance.domain = domainInstance;
                          }
                          
                          var usernameElement = js2xml.getElement(responseDoc, credentialsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (usernameElement) {
                            var usernameInstance = usernameElement;
                            credentialsInstance.userName = usernameInstance;
                          }
                          
                          var passwordElement = js2xml.getElement(responseDoc, credentialsElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (passwordElement) {
                            var passwordInstance = passwordElement;
                            credentialsInstance.password = passwordInstance;
                          }
                        }
                        
                        var joinDomainElement = js2xml.getElement(responseDoc, domainJoinElement, 'JOINDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (joinDomainElement) {
                          var joinDomainInstance = joinDomainElement;
                          domainJoinInstance.domainToJoin = joinDomainInstance;
                        }
                        
                        var machineObjectOUElement = js2xml.getElement(responseDoc, domainJoinElement, 'MACHINEOBJECTOU', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (machineObjectOUElement) {
                          var machineObjectOUInstance = machineObjectOUElement;
                          domainJoinInstance.ldapMachineObjectOU = machineObjectOUInstance;
                        }
                        
                        var provisioningElement = js2xml.getElement(responseDoc, domainJoinElement, 'PROVISIONING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (provisioningElement) {
                          var provisioningInstance = {};
                          domainJoinInstance.provisioning = provisioningInstance;
                          
                          var accountDataElement = js2xml.getElement(responseDoc, provisioningElement, 'ACCOUNTDATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (accountDataElement) {
                            var accountDataInstance = accountDataElement;
                            provisioningInstance.accountData = accountDataInstance;
                          }
                        }
                      }
                      
                      var storedCertificateSettingsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'STOREDCERTIFICATESETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (storedCertificateSettingsSequenceElement) {
                        for (var loweredIndex9 = 0; loweredIndex9 < js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex9 = loweredIndex9 + 1) {
                          var storedCertificateSettingsElement = js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex9];
                          var certificateSettingInstance = {};
                          configurationSetInstance.storedCertificateSettings.push(certificateSettingInstance);
                          
                          var storeLocationElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORELOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (storeLocationElement) {
                          }
                          
                          var storeNameElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (storeNameElement) {
                            var storeNameInstance = storeNameElement;
                            certificateSettingInstance.storeName = storeNameInstance;
                          }
                          
                          var thumbprintElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                          if (thumbprintElement) {
                            var thumbprintInstance = thumbprintElement;
                            certificateSettingInstance.thumbprint = thumbprintInstance;
                          }
                        }
                      }
                      
                      var winRMElement = js2xml.getElement(responseDoc, configurationSetsElement, 'WINRM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (winRMElement) {
                        var winRMInstance = { listeners: [] };
                        configurationSetInstance.windowsRemoteManagement = winRMInstance;
                        
                        var listenersSequenceElement = js2xml.getElement(responseDoc, winRMElement, 'LISTENERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (listenersSequenceElement) {
                          for (var loweredIndex10 = 0; loweredIndex10 < js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex10 = loweredIndex10 + 1) {
                            var listenersElement = js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex10];
                            var listenerInstance = {};
                            winRMInstance.listeners.push(listenerInstance);
                            
                            var protocolElement4 = js2xml.getElement(responseDoc, listenersElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (protocolElement4) {
                              var protocolInstance4 = protocolElement4;
                              listenerInstance.listenerType = protocolInstance4;
                            }
                            
                            var certificateThumbprintElement = js2xml.getElement(responseDoc, listenersElement, 'CERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (certificateThumbprintElement) {
                              var certificateThumbprintInstance = certificateThumbprintElement;
                              listenerInstance.certificateThumbprint = certificateThumbprintInstance;
                            }
                          }
                        }
                      }
                      
                      var adminUsernameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINUSERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (adminUsernameElement) {
                        var adminUsernameInstance = adminUsernameElement;
                        configurationSetInstance.adminUserName = adminUsernameInstance;
                      }
                      
                      var hostNameElement2 = js2xml.getElement(responseDoc, configurationSetsElement, 'HOSTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (hostNameElement2) {
                        var hostNameInstance2 = hostNameElement2;
                        configurationSetInstance.hostName = hostNameInstance2;
                      }
                      
                      var userNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (userNameElement) {
                        var userNameInstance = userNameElement;
                        configurationSetInstance.userName = userNameInstance;
                      }
                      
                      var userPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (userPasswordElement) {
                        var userPasswordInstance = userPasswordElement;
                        configurationSetInstance.userPassword = userPasswordInstance;
                      }
                      
                      var disableSshPasswordAuthenticationElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DISABLESSHPASSWORDAUTHENTICATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (disableSshPasswordAuthenticationElement && (disableSshPasswordAuthenticationElement === null || disableSshPasswordAuthenticationElement === undefined || disableSshPasswordAuthenticationElement.length === 0) === false) {
                        var disableSshPasswordAuthenticationInstance = disableSshPasswordAuthenticationElement;
                        configurationSetInstance.disableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                      }
                      
                      var sSHElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SSH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (sSHElement) {
                        var sSHInstance = { keyPairs: [], publicKeys: [] };
                        configurationSetInstance.sshSettings = sSHInstance;
                        
                        var publicKeysSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'PUBLICKEYS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (publicKeysSequenceElement) {
                          for (var loweredIndex11 = 0; loweredIndex11 < js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex11 = loweredIndex11 + 1) {
                            var publicKeysElement = js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex11];
                            var publicKeyInstance = {};
                            sSHInstance.publicKeys.push(publicKeyInstance);
                            
                            var fingerPrintElement = js2xml.getElement(responseDoc, publicKeysElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (fingerPrintElement) {
                              var fingerPrintInstance = fingerPrintElement;
                              publicKeyInstance.fingerprint = fingerPrintInstance;
                            }
                            
                            var pathElement2 = js2xml.getElement(responseDoc, publicKeysElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (pathElement2) {
                              var pathInstance2 = pathElement2;
                              publicKeyInstance.path = pathInstance2;
                            }
                          }
                        }
                        
                        var keyPairsSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'KEYPAIRS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (keyPairsSequenceElement) {
                          for (var loweredIndex12 = 0; loweredIndex12 < js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex12 = loweredIndex12 + 1) {
                            var keyPairsElement = js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex12];
                            var keyPairInstance = {};
                            sSHInstance.keyPairs.push(keyPairInstance);
                            
                            var fingerPrintElement2 = js2xml.getElement(responseDoc, keyPairsElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (fingerPrintElement2) {
                              var fingerPrintInstance2 = fingerPrintElement2;
                              keyPairInstance.fingerprint = fingerPrintInstance2;
                            }
                            
                            var pathElement3 = js2xml.getElement(responseDoc, keyPairsElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                            if (pathElement3) {
                              var pathInstance3 = pathElement3;
                              keyPairInstance.path = pathInstance3;
                            }
                          }
                        }
                      }
                    }
                  }
                  
                  var availabilitySetNameElement = js2xml.getElement(responseDoc, roleListElement, 'AVAILABILITYSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (availabilitySetNameElement) {
                    var availabilitySetNameInstance = availabilitySetNameElement;
                    roleInstance.availabilitySetName = availabilitySetNameInstance;
                  }
                  
                  var dataVirtualHardDisksSequenceElement = js2xml.getElement(responseDoc, roleListElement, 'DATAVIRTUALHARDDISKS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (dataVirtualHardDisksSequenceElement) {
                    for (var loweredIndex13 = 0; loweredIndex13 < js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex13 = loweredIndex13 + 1) {
                      var dataVirtualHardDisksElement = js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex13];
                      var dataVirtualHardDiskInstance = {};
                      roleInstance.dataVirtualHardDisks.push(dataVirtualHardDiskInstance);
                      
                      var hostCachingElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (hostCachingElement && (hostCachingElement === null || hostCachingElement === undefined || hostCachingElement.length === 0) === false) {
                        var hostCachingInstance = hostCachingElement;
                        dataVirtualHardDiskInstance.hostCaching = hostCachingInstance;
                      }
                      
                      var diskLabelElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (diskLabelElement) {
                        var diskLabelInstance = diskLabelElement;
                        dataVirtualHardDiskInstance.diskLabel = diskLabelInstance;
                      }
                      
                      var diskNameElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (diskNameElement) {
                        var diskNameInstance = diskNameElement;
                        dataVirtualHardDiskInstance.diskName = diskNameInstance;
                      }
                      
                      var lunElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LUN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (lunElement && (lunElement === null || lunElement === undefined || lunElement.length === 0) === false) {
                        var lunInstance = parseInt(lunElement, 10);
                        dataVirtualHardDiskInstance.logicalUnitNumber = lunInstance;
                      }
                      
                      var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (logicalDiskSizeInGBElement) {
                        var logicalDiskSizeInGBInstance = parseInt(logicalDiskSizeInGBElement, 10);
                        dataVirtualHardDiskInstance.logicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                      }
                      
                      var mediaLinkElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                      if (mediaLinkElement) {
                        var mediaLinkInstance = mediaLinkElement;
                        dataVirtualHardDiskInstance.mediaLink = mediaLinkInstance;
                      }
                    }
                  }
                  
                  var labelElement2 = js2xml.getElement(responseDoc, roleListElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (labelElement2) {
                    var labelInstance2 = labelElement2;
                    roleInstance.label = labelInstance2;
                  }
                  
                  var oSVirtualHardDiskElement = js2xml.getElement(responseDoc, roleListElement, 'OSVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (oSVirtualHardDiskElement) {
                    var oSVirtualHardDiskInstance = {};
                    roleInstance.oSVirtualHardDisk = oSVirtualHardDiskInstance;
                    
                    var hostCachingElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (hostCachingElement2 && (hostCachingElement2 === null || hostCachingElement2 === undefined || hostCachingElement2.length === 0) === false) {
                      var hostCachingInstance2 = hostCachingElement2;
                      oSVirtualHardDiskInstance.hostCaching = hostCachingInstance2;
                    }
                    
                    var diskLabelElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (diskLabelElement2) {
                      var diskLabelInstance2 = diskLabelElement2;
                      oSVirtualHardDiskInstance.diskLabel = diskLabelInstance2;
                    }
                    
                    var diskNameElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (diskNameElement2) {
                      var diskNameInstance2 = diskNameElement2;
                      oSVirtualHardDiskInstance.diskName = diskNameInstance2;
                    }
                    
                    var mediaLinkElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (mediaLinkElement2) {
                      var mediaLinkInstance2 = mediaLinkElement2;
                      oSVirtualHardDiskInstance.mediaLink = mediaLinkInstance2;
                    }
                    
                    var sourceImageNameElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'SOURCEIMAGENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (sourceImageNameElement) {
                      var sourceImageNameInstance = sourceImageNameElement;
                      oSVirtualHardDiskInstance.sourceImageName = sourceImageNameInstance;
                    }
                    
                    var osElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (osElement) {
                      var osInstance = osElement;
                      oSVirtualHardDiskInstance.operatingSystem = osInstance;
                    }
                  }
                  
                  var roleSizeElement = js2xml.getElement(responseDoc, roleListElement, 'ROLESIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (roleSizeElement && (roleSizeElement === null || roleSizeElement === undefined || roleSizeElement.length === 0) === false) {
                    var roleSizeInstance = roleSizeElement;
                    roleInstance.roleSize = roleSizeInstance;
                  }
                  
                  var defaultWinRmCertificateThumbprintElement = js2xml.getElement(responseDoc, roleListElement, 'DEFAULTWINRMCERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (defaultWinRmCertificateThumbprintElement) {
                    var defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement;
                    roleInstance.defaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                  }
                }
              }
              
              var sdkVersionElement = js2xml.getElement(responseDoc, deploymentsElement, 'SDKVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (sdkVersionElement) {
                var sdkVersionInstance = sdkVersionElement;
                deploymentInstance.sdkVersion = sdkVersionInstance;
              }
              
              var lockedElement = js2xml.getElement(responseDoc, deploymentsElement, 'LOCKED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (lockedElement) {
                var lockedInstance = lockedElement;
                deploymentInstance.locked = lockedInstance;
              }
              
              var rollbackAllowedElement = js2xml.getElement(responseDoc, deploymentsElement, 'ROLLBACKALLOWED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (rollbackAllowedElement) {
                var rollbackAllowedInstance = rollbackAllowedElement;
                deploymentInstance.rollbackAllowed = rollbackAllowedInstance;
              }
              
              var createdTimeElement = js2xml.getElement(responseDoc, deploymentsElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (createdTimeElement) {
                var createdTimeInstance = new Date(createdTimeElement);
                deploymentInstance.createdTime = createdTimeInstance;
              }
              
              var lastModifiedTimeElement = js2xml.getElement(responseDoc, deploymentsElement, 'LASTMODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (lastModifiedTimeElement) {
                var lastModifiedTimeInstance = lastModifiedTimeElement;
                deploymentInstance.lastModifiedTime = lastModifiedTimeInstance;
              }
              
              var virtualNetworkNameElement = js2xml.getElement(responseDoc, deploymentsElement, 'VIRTUALNETWORKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (virtualNetworkNameElement) {
                var virtualNetworkNameInstance = virtualNetworkNameElement;
                deploymentInstance.virtualNetworkName = virtualNetworkNameInstance;
              }
              
              var extendedPropertiesSequenceElement = js2xml.getElement(responseDoc, deploymentsElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (extendedPropertiesSequenceElement) {
                for (var loweredIndex14 = 0; loweredIndex14 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex14 = loweredIndex14 + 1) {
                  var extendedPropertiesElement = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex14];
                  var extendedPropertiesKey = js2xml.getElement(responseDoc, extendedPropertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  var extendedPropertiesValue = js2xml.getElement(responseDoc, extendedPropertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  deploymentInstance.extendedProperties[extendedPropertiesKey] = extendedPropertiesValue;
                }
              }
              
              var persistentVMDowntimeElement = js2xml.getElement(responseDoc, deploymentsElement, 'PERSISTENTVMDOWNTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (persistentVMDowntimeElement) {
                var persistentVMDowntimeInstance = {};
                deploymentInstance.persistentVMDowntime = persistentVMDowntimeInstance;
                
                var startTimeElement = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'STARTTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (startTimeElement) {
                  var startTimeInstance = new Date(startTimeElement);
                  persistentVMDowntimeInstance.startTime = startTimeInstance;
                }
                
                var endTimeElement = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'ENDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (endTimeElement) {
                  var endTimeInstance = new Date(endTimeElement);
                  persistentVMDowntimeInstance.endTime = endTimeInstance;
                }
                
                var statusElement2 = js2xml.getElement(responseDoc, persistentVMDowntimeElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (statusElement2) {
                  var statusInstance2 = statusElement2;
                  persistentVMDowntimeInstance.status = statusInstance2;
                }
              }
              
              var virtualIPsSequenceElement = js2xml.getElement(responseDoc, deploymentsElement, 'VIRTUALIPS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (virtualIPsSequenceElement) {
                for (var loweredIndex15 = 0; loweredIndex15 < js2xml.getElements(responseDoc, virtualIPsSequenceElement, 'VIRTUALIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex15 = loweredIndex15 + 1) {
                  var virtualIPsElement = js2xml.getElements(responseDoc, virtualIPsSequenceElement, 'VIRTUALIPADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex15];
                  var virtualIPAddressInstance = {};
                  deploymentInstance.virtualIPAddresses.push(virtualIPAddressInstance);
                  
                  var addressElement = js2xml.getElement(responseDoc, virtualIPsElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (addressElement) {
                    var addressInstance = addressElement;
                    virtualIPAddressInstance.address = addressInstance;
                  }
                }
              }
              
              var dnsElement = js2xml.getElement(responseDoc, deploymentsElement, 'DNS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dnsElement) {
                var dnsInstance = { dnsServers: [] };
                deploymentInstance.dnsSettings = dnsInstance;
                
                var dnsServersSequenceElement = js2xml.getElement(responseDoc, dnsElement, 'DNSSERVERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (dnsServersSequenceElement) {
                  for (var loweredIndex16 = 0; loweredIndex16 < js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex16 = loweredIndex16 + 1) {
                    var dnsServersElement = js2xml.getElements(responseDoc, dnsServersSequenceElement, 'DNSSERVER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex16];
                    var dnsServerInstance = {};
                    dnsInstance.dnsServers.push(dnsServerInstance);
                    
                    var nameElement4 = js2xml.getElement(responseDoc, dnsServersElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (nameElement4) {
                      var nameInstance4 = nameElement4;
                      dnsServerInstance.name = nameInstance4;
                    }
                    
                    var addressElement2 = js2xml.getElement(responseDoc, dnsServersElement, 'ADDRESS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (addressElement2) {
                      var addressInstance2 = addressElement2;
                      dnsServerInstance.address = addressInstance2;
                    }
                  }
                }
              }
            }
          }
          
          var urlElement2 = js2xml.getElement(responseDoc, hostedServiceElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (urlElement2) {
            var urlInstance2 = urlElement2;
            result.uri = urlInstance2;
          }
          
          var serviceNameElement = js2xml.getElement(responseDoc, hostedServiceElement, 'SERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (serviceNameElement) {
            var serviceNameInstance = serviceNameElement;
            result.serviceName = serviceNameInstance;
          }
          
          var hostedServicePropertiesElement = js2xml.getElement(responseDoc, hostedServiceElement, 'HOSTEDSERVICEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostedServicePropertiesElement) {
            var hostedServicePropertiesInstance = { extendedProperties: {} };
            result.properties = hostedServicePropertiesInstance;
            
            var descriptionElement2 = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (descriptionElement2) {
              var descriptionInstance2 = descriptionElement2;
              hostedServicePropertiesInstance.description = descriptionInstance2;
            }
            
            var affinityGroupElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (affinityGroupElement) {
              var affinityGroupInstance = affinityGroupElement;
              hostedServicePropertiesInstance.affinityGroup = affinityGroupInstance;
            }
            
            var locationElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (locationElement) {
              var locationInstance = locationElement;
              hostedServicePropertiesInstance.location = locationInstance;
            }
            
            var labelElement3 = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement3) {
              var labelInstance3 = new Buffer(labelElement3, 'base64').toString('ascii');
              hostedServicePropertiesInstance.label = labelInstance3;
            }
            
            var statusElement3 = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusElement3) {
              var statusInstance3 = statusElement3;
              hostedServicePropertiesInstance.status = statusInstance3;
            }
            
            var dateCreatedElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DATECREATED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dateCreatedElement) {
              var dateCreatedInstance = new Date(dateCreatedElement);
              hostedServicePropertiesInstance.dateCreated = dateCreatedInstance;
            }
            
            var dateLastModifiedElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DATELASTMODIFIED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dateLastModifiedElement) {
              var dateLastModifiedInstance = new Date(dateLastModifiedElement);
              hostedServicePropertiesInstance.dateLastModified = dateLastModifiedInstance;
            }
            
            var extendedPropertiesSequenceElement2 = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (extendedPropertiesSequenceElement2) {
              for (var loweredIndex17 = 0; loweredIndex17 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement2, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex17 = loweredIndex17 + 1) {
                var extendedPropertiesElement2 = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement2, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex17];
                var extendedPropertiesKey2 = js2xml.getElement(responseDoc, extendedPropertiesElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var extendedPropertiesValue2 = js2xml.getElement(responseDoc, extendedPropertiesElement2, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                hostedServicePropertiesInstance.extendedProperties[extendedPropertiesKey2] = extendedPropertiesValue2;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Extension operation retrieves information about a specified
   * extension that was added to a cloud service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn169557.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {String} extensionId - The identifier that was assigned to the
   * extension when it was added to the cloud service
   *
   * @param {Function} callback
   *
   * @returns {HostedServiceGetExtensionResponse} - The Get Extension operation
   * response.
   */
  HostedServiceOperations.prototype.getExtension = function(serviceName, extensionId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (extensionId === null || extensionId === undefined) {
      return callback(new Error('extensionId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/extensions/' + extensionId;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var extensionElement = js2xml.getElement(responseDoc, responseDoc, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (extensionElement) {
          var providerNameSpaceElement = js2xml.getElement(responseDoc, extensionElement, 'PROVIDERNAMESPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (providerNameSpaceElement) {
            var providerNameSpaceInstance = providerNameSpaceElement;
            result.providerNamespace = providerNameSpaceInstance;
          }
          
          var typeElement = js2xml.getElement(responseDoc, extensionElement, 'TYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (typeElement) {
            var typeInstance = typeElement;
            result.type = typeInstance;
          }
          
          var idElement = js2xml.getElement(responseDoc, extensionElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var versionElement = js2xml.getElement(responseDoc, extensionElement, 'VERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (versionElement) {
            var versionInstance = versionElement;
            result.version = versionInstance;
          }
          
          var thumbprintElement = js2xml.getElement(responseDoc, extensionElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (thumbprintElement) {
            var thumbprintInstance = thumbprintElement;
            result.thumbprint = thumbprintInstance;
          }
          
          var thumbprintAlgorithmElement = js2xml.getElement(responseDoc, extensionElement, 'THUMBPRINTALGORITHM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (thumbprintAlgorithmElement) {
            var thumbprintAlgorithmInstance = thumbprintAlgorithmElement;
            result.thumbprintAlgorithm = thumbprintAlgorithmInstance;
          }
          
          var publicConfigurationElement = js2xml.getElement(responseDoc, extensionElement, 'PUBLICCONFIGURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publicConfigurationElement) {
            var publicConfigurationInstance = new Buffer(publicConfigurationElement, 'base64').toString('ascii');
            result.publicConfiguration = publicConfigurationInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Hosted Services operation lists the cloud services available
   * under the current subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460781.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {HostedServiceListResponse} - The Get Hosted Service operation
   * response.
   */
  HostedServiceOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { hostedServices: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var hostedServicesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'HOSTEDSERVICES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (hostedServicesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, hostedServicesSequenceElement, 'HOSTEDSERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var hostedServicesElement = js2xml.getElements(responseDoc, hostedServicesSequenceElement, 'HOSTEDSERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var hostedServiceInstance = {};
            result.hostedServices.push(hostedServiceInstance);
            
            var urlElement = js2xml.getElement(responseDoc, hostedServicesElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (urlElement) {
              var urlInstance = urlElement;
              hostedServiceInstance.uri = urlInstance;
            }
            
            var serviceNameElement = js2xml.getElement(responseDoc, hostedServicesElement, 'SERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (serviceNameElement) {
              var serviceNameInstance = serviceNameElement;
              hostedServiceInstance.serviceName = serviceNameInstance;
            }
            
            var hostedServicePropertiesElement = js2xml.getElement(responseDoc, hostedServicesElement, 'HOSTEDSERVICEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (hostedServicePropertiesElement) {
              var hostedServicePropertiesInstance = { extendedProperties: {} };
              hostedServiceInstance.properties = hostedServicePropertiesInstance;
              
              var descriptionElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (descriptionElement) {
                var descriptionInstance = descriptionElement;
                hostedServicePropertiesInstance.description = descriptionInstance;
              }
              
              var affinityGroupElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (affinityGroupElement) {
                var affinityGroupInstance = affinityGroupElement;
                hostedServicePropertiesInstance.affinityGroup = affinityGroupInstance;
              }
              
              var locationElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (locationElement) {
                var locationInstance = locationElement;
                hostedServicePropertiesInstance.location = locationInstance;
              }
              
              var labelElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (labelElement) {
                var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
                hostedServicePropertiesInstance.label = labelInstance;
              }
              
              var statusElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (statusElement) {
                var statusInstance = statusElement;
                hostedServicePropertiesInstance.status = statusInstance;
              }
              
              var dateCreatedElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DATECREATED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dateCreatedElement) {
                var dateCreatedInstance = new Date(dateCreatedElement);
                hostedServicePropertiesInstance.dateCreated = dateCreatedInstance;
              }
              
              var dateLastModifiedElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'DATELASTMODIFIED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (dateLastModifiedElement) {
                var dateLastModifiedInstance = new Date(dateLastModifiedElement);
                hostedServicePropertiesInstance.dateLastModified = dateLastModifiedInstance;
              }
              
              var extendedPropertiesSequenceElement = js2xml.getElement(responseDoc, hostedServicePropertiesElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (extendedPropertiesSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var extendedPropertiesElement = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  var extendedPropertiesKey = js2xml.getElement(responseDoc, extendedPropertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  var extendedPropertiesValue = js2xml.getElement(responseDoc, extendedPropertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  hostedServicePropertiesInstance.extendedProperties[extendedPropertiesKey] = extendedPropertiesValue;
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Available Extensions operation lists the extensions that are
   * available to add to your cloud service. In Windows Azure, a process can
   * run as an extension of a cloud service. For example, Remote Desktop
   * Access or the Windows Azure Diagnostics Agent can run as extensions to
   * the cloud service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {HostedServiceListAvailableExtensionsResponse} - The List
   * Available Extensions operation response.
   */
  HostedServiceOperations.prototype.listAvailableExtensions = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/extensions';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { extensionImages: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var extensionImagesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'EXTENSIONIMAGES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (extensionImagesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, extensionImagesSequenceElement, 'EXTENSIONIMAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var extensionImagesElement = js2xml.getElements(responseDoc, extensionImagesSequenceElement, 'EXTENSIONIMAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var extensionImageInstance = {};
            result.extensionImages.push(extensionImageInstance);
            
            var providerNameSpaceElement = js2xml.getElement(responseDoc, extensionImagesElement, 'PROVIDERNAMESPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (providerNameSpaceElement) {
              var providerNameSpaceInstance = providerNameSpaceElement;
              extensionImageInstance.providerNamespace = providerNameSpaceInstance;
            }
            
            var typeElement = js2xml.getElement(responseDoc, extensionImagesElement, 'TYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (typeElement) {
              var typeInstance = typeElement;
              extensionImageInstance.type = typeInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, extensionImagesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = labelElement;
              extensionImageInstance.label = labelInstance;
            }
            
            var versionElement = js2xml.getElement(responseDoc, extensionImagesElement, 'VERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (versionElement) {
              var versionInstance = versionElement;
              extensionImageInstance.version = versionInstance;
            }
            
            var descriptionElement = js2xml.getElement(responseDoc, extensionImagesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (descriptionElement) {
              var descriptionInstance = descriptionElement;
              extensionImageInstance.description = descriptionInstance;
            }
            
            var thumbprintAlgorithmElement = js2xml.getElement(responseDoc, extensionImagesElement, 'THUMBPRINTALGORITHM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (thumbprintAlgorithmElement) {
              var thumbprintAlgorithmInstance = thumbprintAlgorithmElement;
              extensionImageInstance.thumbprintAlgorithm = thumbprintAlgorithmInstance;
            }
            
            var hostingResourcesElement = js2xml.getElement(responseDoc, extensionImagesElement, 'HOSTINGRESOURCES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (hostingResourcesElement) {
              var hostingResourcesInstance = hostingResourcesElement;
              extensionImageInstance.hostingResources = hostingResourcesInstance;
            }
            
            var publicConfigurationSchemaElement = js2xml.getElement(responseDoc, extensionImagesElement, 'PUBLICCONFIGURATIONSCHEMA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (publicConfigurationSchemaElement) {
              var publicConfigurationSchemaInstance = new Buffer(publicConfigurationSchemaElement, 'base64').toString('ascii');
              extensionImageInstance.publicConfigurationSchema = publicConfigurationSchemaInstance;
            }
            
            var privateConfigurationSchemaElement = js2xml.getElement(responseDoc, extensionImagesElement, 'PRIVATECONFIGURATIONSCHEMA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (privateConfigurationSchemaElement) {
              var privateConfigurationSchemaInstance = new Buffer(privateConfigurationSchemaElement, 'base64').toString('ascii');
              extensionImageInstance.privateConfigurationSchema = privateConfigurationSchemaInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Extensions operation lists all of the extensions that were added
   * to a cloud service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn169561.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {Function} callback
   *
   * @returns {HostedServiceListExtensionsResponse} - The List Extensions
   * operation response.
   */
  HostedServiceOperations.prototype.listExtensions = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/extensions';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { extensions: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var extensionsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'EXTENSIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (extensionsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, extensionsSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var extensionsElement = js2xml.getElements(responseDoc, extensionsSequenceElement, 'EXTENSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var extensionInstance = {};
            result.extensions.push(extensionInstance);
            
            var providerNameSpaceElement = js2xml.getElement(responseDoc, extensionsElement, 'PROVIDERNAMESPACE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (providerNameSpaceElement) {
              var providerNameSpaceInstance = providerNameSpaceElement;
              extensionInstance.providerNamespace = providerNameSpaceInstance;
            }
            
            var typeElement = js2xml.getElement(responseDoc, extensionsElement, 'TYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (typeElement) {
              var typeInstance = typeElement;
              extensionInstance.type = typeInstance;
            }
            
            var idElement = js2xml.getElement(responseDoc, extensionsElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (idElement) {
              var idInstance = idElement;
              extensionInstance.id = idInstance;
            }
            
            var versionElement = js2xml.getElement(responseDoc, extensionsElement, 'VERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (versionElement) {
              var versionInstance = versionElement;
              extensionInstance.version = versionInstance;
            }
            
            var thumbprintElement = js2xml.getElement(responseDoc, extensionsElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (thumbprintElement) {
              var thumbprintInstance = thumbprintElement;
              extensionInstance.thumbprint = thumbprintInstance;
            }
            
            var thumbprintAlgorithmElement = js2xml.getElement(responseDoc, extensionsElement, 'THUMBPRINTALGORITHM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (thumbprintAlgorithmElement) {
              var thumbprintAlgorithmInstance = thumbprintAlgorithmElement;
              extensionInstance.thumbprintAlgorithm = thumbprintAlgorithmInstance;
            }
            
            var publicConfigurationElement = js2xml.getElement(responseDoc, extensionsElement, 'PUBLICCONFIGURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (publicConfigurationElement) {
              var publicConfigurationInstance = new Buffer(publicConfigurationElement, 'base64').toString('ascii');
              extensionInstance.publicConfiguration = publicConfigurationInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Update Hosted Service operation can update the label or description of
   * a cloud service in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441303.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of the cloud service.
   *
   * @param {HostedServiceUpdateParameters} parameters - Parameters supplied to
   * the Update Hosted Service operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  HostedServiceOperations.prototype.update = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.description && parameters.description.length > 1024) {
      return callback(new Error('parameters.description is outside the valid range.'));
    }
    var labelCount = (parameters.description ? 1 : 0) + (parameters.label ? 1 : 0);
    if (labelCount < 1) {
      return callback(new Error('Expected at least one of parameters.description, parameters.label to be provided.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var updateHostedServiceElement = js2xml.createElement('UpdateHostedService', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, updateHostedServiceElement);
    
    if (parameters.label) {
      var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
      js2xml.addChildElement(updateHostedServiceElement, labelElement);
    }
    
    if (parameters.description) {
      var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(descriptionElement, parameters.description);
      js2xml.addChildElement(updateHostedServiceElement, descriptionElement);
    }
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(updateHostedServiceElement, extendedPropertiesDictionaryElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return HostedServiceOperations;
})();

/**
 * Operations for determining the version of the Windows Azure Guest Operating
 * System on which your service is running.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/ff684169.aspx for more
 * information)
 */
var OperatingSystemOperations = (function() {
  /**
   * Initializes a new instance of the OperatingSystemOperations class.
   *
   * @constructor
   *
   * @param {ComputeManagementClient} client - Reference to the service client.
   */
  function OperatingSystemOperations(client) {
    this.client = client;
  }
  
  /**
   * The List Operating Systems operation lists the versions of the guest
   * operating system that are currently available in Windows Azure. The
   * 2010-10-28 version of List Operating Systems also indicates what family
   * an operating system version belongs to. Currently Windows Azure supports
   * two operating system families: the Windows Azure guest operating system
   * that is substantially compatible with Windows Server 2008 SP2, and the
   * Windows Azure guest operating system that is substantially compatible
   * with Windows Server 2008 R2.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ff684168.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {OperatingSystemListResponse} - The List Operating Systems
   * operation response.
   */
  OperatingSystemOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/operatingsystems';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { operatingSystems: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var operatingSystemsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'OPERATINGSYSTEMS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (operatingSystemsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, operatingSystemsSequenceElement, 'OPERATINGSYSTEM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var operatingSystemsElement = js2xml.getElements(responseDoc, operatingSystemsSequenceElement, 'OPERATINGSYSTEM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var operatingSystemInstance = {};
            result.operatingSystems.push(operatingSystemInstance);
            
            var versionElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'VERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (versionElement) {
              var versionInstance = versionElement;
              operatingSystemInstance.version = versionInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
              operatingSystemInstance.label = labelInstance;
            }
            
            var isDefaultElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'ISDEFAULT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (isDefaultElement) {
              var isDefaultInstance = isDefaultElement;
              operatingSystemInstance.isDefault = isDefaultInstance;
            }
            
            var isActiveElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'ISACTIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (isActiveElement) {
              var isActiveInstance = isActiveElement;
              operatingSystemInstance.isActive = isActiveInstance;
            }
            
            var familyElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'FAMILY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (familyElement) {
              var familyInstance = parseInt(familyElement, 10);
              operatingSystemInstance.family = familyInstance;
            }
            
            var familyLabelElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'FAMILYLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (familyLabelElement) {
              var familyLabelInstance = new Buffer(familyLabelElement, 'base64').toString('ascii');
              operatingSystemInstance.familyLabel = familyLabelInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List OS Families operation lists the guest operating system families
   * available in Windows Azure, and also lists the operating system versions
   * available for each family. Currently Windows Azure supports two operating
   * system families: the Windows Azure guest operating system that is
   * substantially compatible with Windows Server 2008 SP2, and the Windows
   * Azure guest operating system that is substantially compatible with
   * Windows Server 2008 R2.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/gg441291.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {OperatingSystemListFamiliesResponse} - The List Operating System
   * Families operation response.
   */
  OperatingSystemOperations.prototype.listFamilies = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/operatingsystemfamilies';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { operatingSystemFamilies: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var operatingSystemFamiliesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'OPERATINGSYSTEMFAMILIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (operatingSystemFamiliesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, operatingSystemFamiliesSequenceElement, 'OPERATINGSYSTEMFAMILY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var operatingSystemFamiliesElement = js2xml.getElements(responseDoc, operatingSystemFamiliesSequenceElement, 'OPERATINGSYSTEMFAMILY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var operatingSystemFamilyInstance = { operatingSystems: [] };
            result.operatingSystemFamilies.push(operatingSystemFamilyInstance);
            
            var nameElement = js2xml.getElement(responseDoc, operatingSystemFamiliesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = parseInt(nameElement, 10);
              operatingSystemFamilyInstance.name = nameInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, operatingSystemFamiliesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
              operatingSystemFamilyInstance.label = labelInstance;
            }
            
            var operatingSystemsSequenceElement = js2xml.getElement(responseDoc, operatingSystemFamiliesElement, 'OPERATINGSYSTEMS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (operatingSystemsSequenceElement) {
              for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, operatingSystemsSequenceElement, 'OPERATINGSYSTEM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                var operatingSystemsElement = js2xml.getElements(responseDoc, operatingSystemsSequenceElement, 'OPERATINGSYSTEM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                var operatingSystemInstance = {};
                operatingSystemFamilyInstance.operatingSystems.push(operatingSystemInstance);
                
                var versionElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'VERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (versionElement) {
                  var versionInstance = versionElement;
                  operatingSystemInstance.version = versionInstance;
                }
                
                var labelElement2 = js2xml.getElement(responseDoc, operatingSystemsElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (labelElement2) {
                  var labelInstance2 = new Buffer(labelElement2, 'base64').toString('ascii');
                  operatingSystemInstance.label = labelInstance2;
                }
                
                var isDefaultElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'ISDEFAULT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (isDefaultElement) {
                  var isDefaultInstance = isDefaultElement;
                  operatingSystemInstance.isDefault = isDefaultInstance;
                }
                
                var isActiveElement = js2xml.getElement(responseDoc, operatingSystemsElement, 'ISACTIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (isActiveElement) {
                  var isActiveInstance = isActiveElement;
                  operatingSystemInstance.isActive = isActiveInstance;
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return OperatingSystemOperations;
})();

/**
 * Operations for managing service certificates for your subscription.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/ee795178.aspx for more
 * information)
 */
var ServiceCertificateOperations = (function() {
  /**
   * Initializes a new instance of the ServiceCertificateOperations class.
   *
   * @constructor
   *
   * @param {ComputeManagementClient} client - Reference to the service client.
   */
  function ServiceCertificateOperations(client) {
    this.client = client;
  }
  
  /**
   * The Add Service Certificate operation adds a certificate to a hosted
   * service.  The Add Service Certificate operation is an asynchronous
   * operation. To determine whether the management service has finished
   * processing the request, call Get Operation Status.   (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460817.aspx for
   * more information)
   *
   * @param {String} serviceName - The DNS prefix name of your service.
   *
   * @param {ServiceCertificateCreateParameters} parameters - Parameters
   * supplied to the Create Service Certificate operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  ServiceCertificateOperations.prototype.beginCreating = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.data === null || parameters.data === undefined) {
      return callback(new Error('parameters.data cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/certificates';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var certificateFileElement = js2xml.createElement('CertificateFile', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, certificateFileElement);
    
    var dataElement = js2xml.createElement('Data', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(dataElement, parameters.data.toString('base64'));
    js2xml.addChildElement(certificateFileElement, dataElement);
    
    var certificateFormatElement = js2xml.createElement('CertificateFormat', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(certificateFormatElement, parameters.certificateFormat ? parameters.certificateFormat.toString() : 'Pfx');
    js2xml.addChildElement(certificateFileElement, certificateFormatElement);
    
    if (parameters.password) {
      var passwordElement = js2xml.createElement('Password', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(passwordElement, parameters.password);
      js2xml.addChildElement(certificateFileElement, passwordElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Service Certificate operation deletes a service certificate
   * from the certificate store of a hosted service.  The Delete Service
   * Certificate operation is an asynchronous operation. To determine whether
   * the management service has finished processing the request, call Get
   * Operation Status.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460803.aspx for
   * more information)
   *
   * @param {ServiceCertificateDeleteParameters} parameters - Parameters
   * supplied to the Delete Service Certificate operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  ServiceCertificateOperations.prototype.beginDeleting = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.serviceName === null || parameters.serviceName === undefined) {
      return callback(new Error('parameters.serviceName cannot be null.'));
    }
    // TODO: Validate parameters.serviceName is a valid DNS name.
    if (parameters.thumbprint === null || parameters.thumbprint === undefined) {
      return callback(new Error('parameters.thumbprint cannot be null.'));
    }
    if (parameters.thumbprintAlgorithm === null || parameters.thumbprintAlgorithm === undefined) {
      return callback(new Error('parameters.thumbprintAlgorithm cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + parameters.serviceName + '/certificates/' + parameters.thumbprintAlgorithm + '-' + parameters.thumbprint;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Add Service Certificate operation adds a certificate to a hosted
   * service.  The Add Service Certificate operation is an asynchronous
   * operation. To determine whether the management service has finished
   * processing the request, call Get Operation Status.  This overload will
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460817.aspx
   * for more information)
   *
   * @param {String} serviceName - The DNS prefix name of your service.
   *
   * @param {ServiceCertificateCreateParameters} parameters - Parameters
   * supplied to the Create Service Certificate operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  ServiceCertificateOperations.prototype.create = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.serviceCertificates.beginCreating(serviceName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Service Certificate operation deletes a service certificate
   * from the certificate store of a hosted service.  The Delete Service
   * Certificate operation is an asynchronous operation. To determine whether
   * the management service has finished processing the request, call Get
   * Operation Status.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460803.aspx for
   * more information)
   *
   * @param {ServiceCertificateDeleteParameters} parameters - Parameters
   * supplied to the Delete Service Certificate operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  ServiceCertificateOperations.prototype.delete = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.serviceCertificates.beginDeleting(parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get Service Certificate operation returns the public data for the
   * specified X.509 certificate associated with a hosted service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460792.aspx for
   * more information)
   *
   * @param {ServiceCertificateGetParameters} parameters - Parameters supplied
   * to the Get Service Certificate operation.
   *
   * @param {Function} callback
   *
   * @returns {ServiceCertificateGetResponse} - The Get Service Certificate
   * operation response.
   */
  ServiceCertificateOperations.prototype.get = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.serviceName === null || parameters.serviceName === undefined) {
      return callback(new Error('parameters.serviceName cannot be null.'));
    }
    // TODO: Validate parameters.serviceName is a valid DNS name.
    if (parameters.thumbprint === null || parameters.thumbprint === undefined) {
      return callback(new Error('parameters.thumbprint cannot be null.'));
    }
    if (parameters.thumbprintAlgorithm === null || parameters.thumbprintAlgorithm === undefined) {
      return callback(new Error('parameters.thumbprintAlgorithm cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + parameters.serviceName + '/certificates/' + parameters.thumbprintAlgorithm + '-' + parameters.thumbprint;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var certificateElement = js2xml.getElement(responseDoc, responseDoc, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (certificateElement) {
          var dataElement = js2xml.getElement(responseDoc, certificateElement, 'DATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (dataElement) {
            var dataInstance = new Buffer(dataElement, 'base64').toString('ascii');
            result.data = dataInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Service Certificates operation lists all of the service
   * certificates associated with the specified hosted service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154105.aspx for
   * more information)
   *
   * @param {String} serviceName - The DNS prefix name of your hosted service.
   *
   * @param {Function} callback
   *
   * @returns {ServiceCertificateListResponse} - The List Service Certificates
   * operation response.
   */
  ServiceCertificateOperations.prototype.list = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    // TODO: Validate serviceName is a valid DNS name.
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/certificates';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { certificates: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var certificatesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'CERTIFICATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (certificatesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, certificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var certificatesElement = js2xml.getElements(responseDoc, certificatesSequenceElement, 'CERTIFICATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var certificateInstance = {};
            result.certificates.push(certificateInstance);
            
            var certificateUrlElement = js2xml.getElement(responseDoc, certificatesElement, 'CERTIFICATEURL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (certificateUrlElement) {
              var certificateUrlInstance = certificateUrlElement;
              certificateInstance.certificateUri = certificateUrlInstance;
            }
            
            var thumbprintElement = js2xml.getElement(responseDoc, certificatesElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (thumbprintElement) {
              var thumbprintInstance = thumbprintElement;
              certificateInstance.thumbprint = thumbprintInstance;
            }
            
            var thumbprintAlgorithmElement = js2xml.getElement(responseDoc, certificatesElement, 'THUMBPRINTALGORITHM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (thumbprintAlgorithmElement) {
              var thumbprintAlgorithmInstance = thumbprintAlgorithmElement;
              certificateInstance.thumbprintAlgorithm = thumbprintAlgorithmInstance;
            }
            
            var dataElement = js2xml.getElement(responseDoc, certificatesElement, 'DATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (dataElement) {
              var dataInstance = new Buffer(dataElement, 'base64').toString('ascii');
              certificateInstance.data = dataInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return ServiceCertificateOperations;
})();

/**
 * The Service Management API includes operations for managing the disks in
 * your subscription.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/jj157188.aspx for more
 * information)
 */
var VirtualMachineDiskOperations = (function() {
  /**
   * Initializes a new instance of the VirtualMachineDiskOperations class.
   *
   * @constructor
   *
   * @param {ComputeManagementClient} client - Reference to the service client.
   */
  function VirtualMachineDiskOperations(client) {
    this.client = client;
  }
  
  /**
   * The Add Data Disk operation adds a data disk to a virtual machine. There
   * are three ways to create the data disk using the Add Data Disk operation.
   * Option 1 – Attach an empty data disk to the role by specifying the disk
   * label and location of the disk image.  Do not include the DiskName and
   * SourceMediaLink elements in the request body.  Include the MediaLink
   * element and reference a blob that is in the same geographical region as
   * the role.  You can also omit the MediaLink element. In this usage,
   * Windows Azure will create the data disk in the storage account configured
   * as default for the role.   Option 2 – Attach an existing data disk that
   * is in the image repository.  Do not include the DiskName and
   * SourceMediaLink elements in the request body.  Specify the data disk to
   * use by including the DiskName element.  Note: If included the in the
   * response body, the MediaLink and LogicalDiskSizeInGB elements are
   * ignored.  Option 3 - Specify the location of a blob in your storage
   * account that contain a disk image to use.  Include the SourceMediaLink
   * element. Note: If the MediaLink element isincluded, it is ignored.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157199.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of the deployment.
   *
   * @param {String} roleName - The name of the role to add the data disk to.
   *
   * @param {VirtualMachineDiskCreateDataDiskParameters} parameters -
   * Parameters supplied to the Create Virtual Machine Data Disk operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineDiskOperations.prototype.createDataDisk = function(serviceName, deploymentName, roleName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (roleName === null || roleName === undefined) {
      return callback(new Error('roleName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.mediaLinkUri === null || parameters.mediaLinkUri === undefined) {
      return callback(new Error('parameters.mediaLinkUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles/' + roleName + '/DataDisks';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var dataVirtualHardDiskElement = js2xml.createElement('DataVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, dataVirtualHardDiskElement);
    
    var hostCachingElement = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(hostCachingElement, parameters.hostCaching ? parameters.hostCaching.toString() : 'None');
    js2xml.addChildElement(dataVirtualHardDiskElement, hostCachingElement);
    
    if (parameters.diskLabel) {
      var diskLabelElement = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(diskLabelElement, parameters.diskLabel);
      js2xml.addChildElement(dataVirtualHardDiskElement, diskLabelElement);
    }
    
    if (parameters.diskName) {
      var diskNameElement = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(diskNameElement, parameters.diskName);
      js2xml.addChildElement(dataVirtualHardDiskElement, diskNameElement);
    }
    
    if (parameters.logicalUnitNumber) {
      var lunElement = js2xml.createElement('Lun', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(lunElement, parameters.logicalUnitNumber.toString());
      js2xml.addChildElement(dataVirtualHardDiskElement, lunElement);
    }
    
    var logicalDiskSizeInGBElement = js2xml.createElement('LogicalDiskSizeInGB', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(logicalDiskSizeInGBElement, parameters.logicalDiskSizeInGB.toString());
    js2xml.addChildElement(dataVirtualHardDiskElement, logicalDiskSizeInGBElement);
    
    var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(mediaLinkElement, parameters.mediaLinkUri);
    js2xml.addChildElement(dataVirtualHardDiskElement, mediaLinkElement);
    
    if (parameters.sourceMediaLinkUri) {
      var sourceMediaLinkElement = js2xml.createElement('SourceMediaLink', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(sourceMediaLinkElement, parameters.sourceMediaLinkUri);
      js2xml.addChildElement(dataVirtualHardDiskElement, sourceMediaLinkElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Add Disk operation adds a disk to the user image repository. The disk
   * can be an operating system disk or a data disk.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
   * more information)
   *
   * @param {VirtualMachineDiskCreateDiskParameters} parameters - Parameters
   * supplied to the Create Virtual Machine Disk operation.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineDiskCreateDiskResponse} - A virtual machine disk
   * associated with your subscription.
   */
  VirtualMachineDiskOperations.prototype.createDisk = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.mediaLinkUri === null || parameters.mediaLinkUri === undefined) {
      return callback(new Error('parameters.mediaLinkUri cannot be null.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/disks';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var diskElement = js2xml.createElement('Disk', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, diskElement);
    
    if (parameters.operatingSystemType) {
      var osElement = js2xml.createElement('OS', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(osElement, parameters.operatingSystemType);
      js2xml.addChildElement(diskElement, osElement);
    }
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, parameters.label);
    js2xml.addChildElement(diskElement, labelElement);
    
    var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(mediaLinkElement, parameters.mediaLinkUri);
    js2xml.addChildElement(diskElement, mediaLinkElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, parameters.name);
    js2xml.addChildElement(diskElement, nameElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var diskElement2 = js2xml.getElement(responseDoc, responseDoc, 'DISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (diskElement2) {
          var osElement2 = js2xml.getElement(responseDoc, diskElement2, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (osElement2) {
            var osInstance = osElement2;
            result.operatingSystem = osInstance;
          }
          
          var labelElement2 = js2xml.getElement(responseDoc, diskElement2, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement2) {
            var labelInstance = labelElement2;
            result.label = labelInstance;
          }
          
          var affinityGroupElement = js2xml.getElement(responseDoc, diskElement2, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (affinityGroupElement) {
            var affinityGroupInstance = affinityGroupElement;
            result.affinityGroup = affinityGroupInstance;
          }
          
          var locationElement = js2xml.getElement(responseDoc, diskElement2, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (locationElement) {
            var locationInstance = locationElement;
            result.location = locationInstance;
          }
          
          var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, diskElement2, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (logicalDiskSizeInGBElement) {
            var logicalDiskSizeInGBInstance = parseFloat(logicalDiskSizeInGBElement, 10);
            result.logicalSizeInGB = logicalDiskSizeInGBInstance;
          }
          
          var mediaLinkElement2 = js2xml.getElement(responseDoc, diskElement2, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (mediaLinkElement2) {
            var mediaLinkInstance = mediaLinkElement2;
            result.mediaLinkUri = mediaLinkInstance;
          }
          
          var nameElement2 = js2xml.getElement(responseDoc, diskElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var sourceImageNameElement = js2xml.getElement(responseDoc, diskElement2, 'SOURCEIMAGENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sourceImageNameElement) {
            var sourceImageNameInstance = sourceImageNameElement;
            result.sourceImageName = sourceImageNameInstance;
          }
          
          var attachedToElement = js2xml.getElement(responseDoc, diskElement2, 'ATTACHEDTO', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (attachedToElement) {
            var attachedToInstance = {};
            result.usageDetails = attachedToInstance;
            
            var hostedServiceNameElement = js2xml.getElement(responseDoc, attachedToElement, 'HOSTEDSERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (hostedServiceNameElement) {
              var hostedServiceNameInstance = hostedServiceNameElement;
              attachedToInstance.hostedServiceName = hostedServiceNameInstance;
            }
            
            var deploymentNameElement = js2xml.getElement(responseDoc, attachedToElement, 'DEPLOYMENTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (deploymentNameElement) {
              var deploymentNameInstance = deploymentNameElement;
              attachedToInstance.deploymentName = deploymentNameInstance;
            }
            
            var roleNameElement = js2xml.getElement(responseDoc, attachedToElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (roleNameElement) {
              var roleNameInstance = roleNameElement;
              attachedToInstance.roleName = roleNameInstance;
            }
          }
          
          var isPremiumElement = js2xml.getElement(responseDoc, diskElement2, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isPremiumElement && (isPremiumElement === null || isPremiumElement === undefined || isPremiumElement.length === 0) === false) {
            var isPremiumInstance = isPremiumElement;
            result.isPremium = isPremiumInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Delete Data Disk operation removes the specified data disk from a
   * virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157179.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of the deployment.
   *
   * @param {String} roleName - The name of the role to delete the data disk
   * from.
   *
   * @param {Number} logicalUnitNumber - The logical unit number of the disk.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineDiskOperations.prototype.deleteDataDisk = function(serviceName, deploymentName, roleName, logicalUnitNumber, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (roleName === null || roleName === undefined) {
      return callback(new Error('roleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles/' + roleName + '/DataDisks/' + logicalUnitNumber;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Disk operation deletes the specified data or operating system
   * disk from your image repository.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157200.aspx for
   * more information)
   *
   * @param {String} diskName - The name of the disk to delete.
   *
   * @param {Boolean} deleteFromStorage - Optional. Specifies that the source
   * blob for the disk should also be deleted from storage.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineDiskOperations.prototype.deleteDisk = function(diskName, deleteFromStorage, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (diskName === null || diskName === undefined) {
      return callback(new Error('diskName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/disks/' + diskName + '?';
    if (deleteFromStorage === true) {
      url2 = url2 + '&comp=' + encodeURIComponent('media');
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Data Disk operation retrieves the specified data disk from a
   * virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157180.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of the deployment.
   *
   * @param {String} roleName - The name of the role.
   *
   * @param {Number} logicalUnitNumber - The logical unit number of the disk.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineDiskGetDataDiskResponse} - The Get Data Disk
   * operation response.
   */
  VirtualMachineDiskOperations.prototype.getDataDisk = function(serviceName, deploymentName, roleName, logicalUnitNumber, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (roleName === null || roleName === undefined) {
      return callback(new Error('roleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles/' + roleName + '/DataDisks/' + logicalUnitNumber;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var dataVirtualHardDiskElement = js2xml.getElement(responseDoc, responseDoc, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (dataVirtualHardDiskElement) {
          var hostCachingElement = js2xml.getElement(responseDoc, dataVirtualHardDiskElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (hostCachingElement) {
            var hostCachingInstance = hostCachingElement;
            result.hostCaching = hostCachingInstance;
          }
          
          var diskLabelElement = js2xml.getElement(responseDoc, dataVirtualHardDiskElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (diskLabelElement) {
            var diskLabelInstance = diskLabelElement;
            result.diskLabel = diskLabelInstance;
          }
          
          var diskNameElement = js2xml.getElement(responseDoc, dataVirtualHardDiskElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (diskNameElement) {
            var diskNameInstance = diskNameElement;
            result.diskName = diskNameInstance;
          }
          
          var lunElement = js2xml.getElement(responseDoc, dataVirtualHardDiskElement, 'LUN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (lunElement && (lunElement === null || lunElement === undefined || lunElement.length === 0) === false) {
            var lunInstance = parseInt(lunElement, 10);
            result.logicalUnitNumber = lunInstance;
          }
          
          var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, dataVirtualHardDiskElement, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (logicalDiskSizeInGBElement) {
            var logicalDiskSizeInGBInstance = parseFloat(logicalDiskSizeInGBElement, 10);
            result.logicalDiskSizeInGB = logicalDiskSizeInGBInstance;
          }
          
          var mediaLinkElement = js2xml.getElement(responseDoc, dataVirtualHardDiskElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (mediaLinkElement) {
            var mediaLinkInstance = mediaLinkElement;
            result.mediaLinkUri = mediaLinkInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Disk operation retrieves a disk from the user image repository.
   * The disk can be an operating system disk or a data disk.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
   * more information)
   *
   * @param {String} diskName - The name of the disk.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineDiskGetDiskResponse} - A virtual machine disk
   * associated with your subscription.
   */
  VirtualMachineDiskOperations.prototype.getDisk = function(diskName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (diskName === null || diskName === undefined) {
      return callback(new Error('diskName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/disks/' + diskName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var diskElement = js2xml.getElement(responseDoc, responseDoc, 'DISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (diskElement) {
          var affinityGroupElement = js2xml.getElement(responseDoc, diskElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (affinityGroupElement) {
            var affinityGroupInstance = affinityGroupElement;
            result.affinityGroup = affinityGroupInstance;
          }
          
          var locationElement = js2xml.getElement(responseDoc, diskElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (locationElement) {
            var locationInstance = locationElement;
            result.location = locationInstance;
          }
          
          var labelElement = js2xml.getElement(responseDoc, diskElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement) {
            var labelInstance = labelElement;
            result.label = labelInstance;
          }
          
          var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, diskElement, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (logicalDiskSizeInGBElement) {
            var logicalDiskSizeInGBInstance = parseFloat(logicalDiskSizeInGBElement, 10);
            result.logicalSizeInGB = logicalDiskSizeInGBInstance;
          }
          
          var mediaLinkElement = js2xml.getElement(responseDoc, diskElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (mediaLinkElement) {
            var mediaLinkInstance = mediaLinkElement;
            result.mediaLinkUri = mediaLinkInstance;
          }
          
          var nameElement = js2xml.getElement(responseDoc, diskElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var osElement = js2xml.getElement(responseDoc, diskElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (osElement) {
            var osInstance = osElement;
            result.operatingSystemType = osInstance;
          }
          
          var sourceImageNameElement = js2xml.getElement(responseDoc, diskElement, 'SOURCEIMAGENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (sourceImageNameElement) {
            var sourceImageNameInstance = sourceImageNameElement;
            result.sourceImageName = sourceImageNameInstance;
          }
          
          var attachedToElement = js2xml.getElement(responseDoc, diskElement, 'ATTACHEDTO', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (attachedToElement) {
            var attachedToInstance = {};
            result.usageDetails = attachedToInstance;
            
            var hostedServiceNameElement = js2xml.getElement(responseDoc, attachedToElement, 'HOSTEDSERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (hostedServiceNameElement) {
              var hostedServiceNameInstance = hostedServiceNameElement;
              attachedToInstance.hostedServiceName = hostedServiceNameInstance;
            }
            
            var deploymentNameElement = js2xml.getElement(responseDoc, attachedToElement, 'DEPLOYMENTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (deploymentNameElement) {
              var deploymentNameInstance = deploymentNameElement;
              attachedToInstance.deploymentName = deploymentNameInstance;
            }
            
            var roleNameElement = js2xml.getElement(responseDoc, attachedToElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (roleNameElement) {
              var roleNameInstance = roleNameElement;
              attachedToInstance.roleName = roleNameInstance;
            }
          }
          
          var isCorruptedElement = js2xml.getElement(responseDoc, diskElement, 'ISCORRUPTED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isCorruptedElement && (isCorruptedElement === null || isCorruptedElement === undefined || isCorruptedElement.length === 0) === false) {
            var isCorruptedInstance = isCorruptedElement;
            result.isCorrupted = isCorruptedInstance;
          }
          
          var isPremiumElement = js2xml.getElement(responseDoc, diskElement, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isPremiumElement && (isPremiumElement === null || isPremiumElement === undefined || isPremiumElement.length === 0) === false) {
            var isPremiumInstance = isPremiumElement;
            result.isPremium = isPremiumInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Disks operation retrieves a list of the disks in your image
   * repository.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157176.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineDiskListResponse} - The List Disks operation
   * response.
   */
  VirtualMachineDiskOperations.prototype.listDisks = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/disks';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { disks: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var disksSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'DISKS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (disksSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, disksSequenceElement, 'DISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var disksElement = js2xml.getElements(responseDoc, disksSequenceElement, 'DISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var diskInstance = {};
            result.disks.push(diskInstance);
            
            var affinityGroupElement = js2xml.getElement(responseDoc, disksElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (affinityGroupElement) {
              var affinityGroupInstance = affinityGroupElement;
              diskInstance.affinityGroup = affinityGroupInstance;
            }
            
            var locationElement = js2xml.getElement(responseDoc, disksElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (locationElement) {
              var locationInstance = locationElement;
              diskInstance.location = locationInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, disksElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = labelElement;
              diskInstance.label = labelInstance;
            }
            
            var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, disksElement, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (logicalDiskSizeInGBElement) {
              var logicalDiskSizeInGBInstance = parseFloat(logicalDiskSizeInGBElement, 10);
              diskInstance.logicalSizeInGB = logicalDiskSizeInGBInstance;
            }
            
            var mediaLinkElement = js2xml.getElement(responseDoc, disksElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (mediaLinkElement) {
              var mediaLinkInstance = mediaLinkElement;
              diskInstance.mediaLinkUri = mediaLinkInstance;
            }
            
            var nameElement = js2xml.getElement(responseDoc, disksElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              diskInstance.name = nameInstance;
            }
            
            var osElement = js2xml.getElement(responseDoc, disksElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (osElement) {
              var osInstance = osElement;
              diskInstance.operatingSystemType = osInstance;
            }
            
            var sourceImageNameElement = js2xml.getElement(responseDoc, disksElement, 'SOURCEIMAGENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (sourceImageNameElement) {
              var sourceImageNameInstance = sourceImageNameElement;
              diskInstance.sourceImageName = sourceImageNameInstance;
            }
            
            var attachedToElement = js2xml.getElement(responseDoc, disksElement, 'ATTACHEDTO', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (attachedToElement) {
              var attachedToInstance = {};
              diskInstance.usageDetails = attachedToInstance;
              
              var hostedServiceNameElement = js2xml.getElement(responseDoc, attachedToElement, 'HOSTEDSERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostedServiceNameElement) {
                var hostedServiceNameInstance = hostedServiceNameElement;
                attachedToInstance.hostedServiceName = hostedServiceNameInstance;
              }
              
              var deploymentNameElement = js2xml.getElement(responseDoc, attachedToElement, 'DEPLOYMENTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (deploymentNameElement) {
                var deploymentNameInstance = deploymentNameElement;
                attachedToInstance.deploymentName = deploymentNameInstance;
              }
              
              var roleNameElement = js2xml.getElement(responseDoc, attachedToElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (roleNameElement) {
                var roleNameInstance = roleNameElement;
                attachedToInstance.roleName = roleNameInstance;
              }
            }
            
            var isCorruptedElement = js2xml.getElement(responseDoc, disksElement, 'ISCORRUPTED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (isCorruptedElement && (isCorruptedElement === null || isCorruptedElement === undefined || isCorruptedElement.length === 0) === false) {
              var isCorruptedInstance = isCorruptedElement;
              diskInstance.isCorrupted = isCorruptedInstance;
            }
            
            var isPremiumElement = js2xml.getElement(responseDoc, disksElement, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (isPremiumElement && (isPremiumElement === null || isPremiumElement === undefined || isPremiumElement.length === 0) === false) {
              var isPremiumInstance = isPremiumElement;
              diskInstance.isPremium = isPremiumInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Update Data Disk operation updates the specified data disk attached to
   * the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157190.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of the deployment.
   *
   * @param {String} roleName - The name of the role to add the data disk to.
   *
   * @param {Number} logicalUnitNumber - The logical unit number of the disk.
   *
   * @param {VirtualMachineDiskUpdateDataDiskParameters} parameters -
   * Parameters supplied to the Update Virtual Machine Data Disk operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineDiskOperations.prototype.updateDataDisk = function(serviceName, deploymentName, roleName, logicalUnitNumber, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (roleName === null || roleName === undefined) {
      return callback(new Error('roleName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.mediaLinkUri === null || parameters.mediaLinkUri === undefined) {
      return callback(new Error('parameters.mediaLinkUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles/' + roleName + '/DataDisks/' + logicalUnitNumber;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var dataVirtualHardDiskElement = js2xml.createElement('DataVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, dataVirtualHardDiskElement);
    
    var hostCachingElement = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(hostCachingElement, parameters.hostCaching ? parameters.hostCaching.toString() : 'None');
    js2xml.addChildElement(dataVirtualHardDiskElement, hostCachingElement);
    
    if (parameters.diskLabel) {
      var diskLabelElement = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(diskLabelElement, parameters.diskLabel);
      js2xml.addChildElement(dataVirtualHardDiskElement, diskLabelElement);
    }
    
    if (parameters.diskName) {
      var diskNameElement = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(diskNameElement, parameters.diskName);
      js2xml.addChildElement(dataVirtualHardDiskElement, diskNameElement);
    }
    
    if (parameters.logicalUnitNumber) {
      var lunElement = js2xml.createElement('Lun', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(lunElement, parameters.logicalUnitNumber.toString());
      js2xml.addChildElement(dataVirtualHardDiskElement, lunElement);
    }
    
    var logicalDiskSizeInGBElement = js2xml.createElement('LogicalDiskSizeInGB', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(logicalDiskSizeInGBElement, parameters.logicalDiskSizeInGB.toString());
    js2xml.addChildElement(dataVirtualHardDiskElement, logicalDiskSizeInGBElement);
    
    var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(mediaLinkElement, parameters.mediaLinkUri);
    js2xml.addChildElement(dataVirtualHardDiskElement, mediaLinkElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Add Disk operation adds a disk to the user image repository. The disk
   * can be an operating system disk or a data disk.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for
   * more information)
   *
   * @param {String} diskName - The name of the disk being updated.
   *
   * @param {VirtualMachineDiskUpdateDiskParameters} parameters - Parameters
   * supplied to the Update Virtual Machine Disk operation.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineDiskUpdateDiskResponse} - A virtual machine disk
   * associated with your subscription.
   */
  VirtualMachineDiskOperations.prototype.updateDisk = function(diskName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (diskName === null || diskName === undefined) {
      return callback(new Error('diskName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/disks/' + diskName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var diskElement = js2xml.createElement('Disk', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, diskElement);
    
    if (parameters.hasOperatingSystem) {
      var hasOperatingSystemElement = js2xml.createElement('HasOperatingSystem', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(hasOperatingSystemElement, parameters.hasOperatingSystem.toString());
      js2xml.addChildElement(diskElement, hasOperatingSystemElement);
    }
    
    if (parameters.operatingSystemType) {
      var osElement = js2xml.createElement('OS', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(osElement, parameters.operatingSystemType);
      js2xml.addChildElement(diskElement, osElement);
    }
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, parameters.label);
    js2xml.addChildElement(diskElement, labelElement);
    
    if (parameters.mediaLinkUri) {
      var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(mediaLinkElement, parameters.mediaLinkUri);
      js2xml.addChildElement(diskElement, mediaLinkElement);
    }
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, parameters.name);
    js2xml.addChildElement(diskElement, nameElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var diskElement2 = js2xml.getElement(responseDoc, responseDoc, 'DISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (diskElement2) {
          var osElement2 = js2xml.getElement(responseDoc, diskElement2, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (osElement2) {
            var osInstance = osElement2;
            result.operatingSystem = osInstance;
          }
          
          var labelElement2 = js2xml.getElement(responseDoc, diskElement2, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement2) {
            var labelInstance = labelElement2;
            result.label = labelInstance;
          }
          
          var affinityGroupElement = js2xml.getElement(responseDoc, diskElement2, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (affinityGroupElement) {
            var affinityGroupInstance = affinityGroupElement;
            result.affinityGroup = affinityGroupInstance;
          }
          
          var locationElement = js2xml.getElement(responseDoc, diskElement2, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (locationElement) {
            var locationInstance = locationElement;
            result.location = locationInstance;
          }
          
          var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, diskElement2, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (logicalDiskSizeInGBElement) {
            var logicalDiskSizeInGBInstance = parseFloat(logicalDiskSizeInGBElement, 10);
            result.logicalSizeInGB = logicalDiskSizeInGBInstance;
          }
          
          var mediaLinkElement2 = js2xml.getElement(responseDoc, diskElement2, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (mediaLinkElement2) {
            var mediaLinkInstance = mediaLinkElement2;
            result.mediaLinkUri = mediaLinkInstance;
          }
          
          var nameElement2 = js2xml.getElement(responseDoc, diskElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var isPremiumElement = js2xml.getElement(responseDoc, diskElement2, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isPremiumElement && (isPremiumElement === null || isPremiumElement === undefined || isPremiumElement.length === 0) === false) {
            var isPremiumInstance = isPremiumElement;
            result.isPremium = isPremiumInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return VirtualMachineDiskOperations;
})();

/**
 * The Service Management API includes operations for managing the OS images in
 * your subscription.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/jj157175.aspx for more
 * information)
 */
var VirtualMachineImageOperations = (function() {
  /**
   * Initializes a new instance of the VirtualMachineImageOperations class.
   *
   * @constructor
   *
   * @param {ComputeManagementClient} client - Reference to the service client.
   */
  function VirtualMachineImageOperations(client) {
    this.client = client;
  }
  
  /**
   * The Add OS Image operation adds an operating system image that is stored
   * in a storage account and is available from the image repository.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157192.aspx for
   * more information)
   *
   * @param {VirtualMachineImageCreateParameters} parameters - Parameters
   * supplied to the Create Virtual Machine Image operation.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineImageCreateResponse} - Parameters returned from
   * the Create Virtual Machine Image operation.
   */
  VirtualMachineImageOperations.prototype.create = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.mediaLinkUri === null || parameters.mediaLinkUri === undefined) {
      return callback(new Error('parameters.mediaLinkUri cannot be null.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    if (parameters.operatingSystemType === null || parameters.operatingSystemType === undefined) {
      return callback(new Error('parameters.operatingSystemType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/images';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var oSImageElement = js2xml.createElement('OSImage', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, oSImageElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, parameters.label);
    js2xml.addChildElement(oSImageElement, labelElement);
    
    var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(mediaLinkElement, parameters.mediaLinkUri);
    js2xml.addChildElement(oSImageElement, mediaLinkElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, parameters.name);
    js2xml.addChildElement(oSImageElement, nameElement);
    
    var osElement = js2xml.createElement('OS', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(osElement, parameters.operatingSystemType);
    js2xml.addChildElement(oSImageElement, osElement);
    
    if (parameters.eula) {
      var eulaElement = js2xml.createElement('Eula', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(eulaElement, parameters.eula);
      js2xml.addChildElement(oSImageElement, eulaElement);
    }
    
    if (parameters.description) {
      var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(descriptionElement, parameters.description);
      js2xml.addChildElement(oSImageElement, descriptionElement);
    }
    
    if (parameters.imageFamily) {
      var imageFamilyElement = js2xml.createElement('ImageFamily', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(imageFamilyElement, parameters.imageFamily);
      js2xml.addChildElement(oSImageElement, imageFamilyElement);
    }
    
    if (parameters.publishedDate) {
      var publishedDateElement = js2xml.createElement('PublishedDate', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishedDateElement, parameters.publishedDate.toString());
      js2xml.addChildElement(oSImageElement, publishedDateElement);
    }
    
    var isPremiumElement = js2xml.createElement('IsPremium', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(isPremiumElement, parameters.isPremium.toString());
    js2xml.addChildElement(oSImageElement, isPremiumElement);
    
    var showInGuiElement = js2xml.createElement('ShowInGui', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(showInGuiElement, parameters.showInGui.toString());
    js2xml.addChildElement(oSImageElement, showInGuiElement);
    
    if (parameters.privacyUri) {
      var privacyUriElement = js2xml.createElement('PrivacyUri', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(privacyUriElement, parameters.privacyUri);
      js2xml.addChildElement(oSImageElement, privacyUriElement);
    }
    
    if (parameters.iconUri) {
      var iconUriElement = js2xml.createElement('IconUri', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(iconUriElement, parameters.iconUri);
      js2xml.addChildElement(oSImageElement, iconUriElement);
    }
    
    if (parameters.recommendedVMSize) {
      var recommendedVMSizeElement = js2xml.createElement('RecommendedVMSize', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(recommendedVMSizeElement, parameters.recommendedVMSize ? parameters.recommendedVMSize.toString() : 'Small');
      js2xml.addChildElement(oSImageElement, recommendedVMSizeElement);
    }
    
    if (parameters.smallIconUri) {
      var smallIconUriElement = js2xml.createElement('SmallIconUri', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(smallIconUriElement, parameters.smallIconUri);
      js2xml.addChildElement(oSImageElement, smallIconUriElement);
    }
    
    if (parameters.language) {
      var languageElement = js2xml.createElement('Language', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(languageElement, parameters.language);
      js2xml.addChildElement(oSImageElement, languageElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var oSImageElement2 = js2xml.getElement(responseDoc, responseDoc, 'OSIMAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (oSImageElement2) {
          var locationElement = js2xml.getElement(responseDoc, oSImageElement2, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (locationElement) {
            var locationInstance = locationElement;
            result.location = locationInstance;
          }
          
          var categoryElement = js2xml.getElement(responseDoc, oSImageElement2, 'CATEGORY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (categoryElement) {
            var categoryInstance = categoryElement;
            result.category = categoryInstance;
          }
          
          var labelElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement2) {
            var labelInstance = labelElement2;
            result.label = labelInstance;
          }
          
          var logicalSizeInGBElement = js2xml.getElement(responseDoc, oSImageElement2, 'LOGICALSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (logicalSizeInGBElement) {
            var logicalSizeInGBInstance = parseFloat(logicalSizeInGBElement, 10);
            result.logicalSizeInGB = logicalSizeInGBInstance;
          }
          
          var mediaLinkElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (mediaLinkElement2) {
            var mediaLinkInstance = mediaLinkElement2;
            result.mediaLinkUri = mediaLinkInstance;
          }
          
          var nameElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement2) {
            var nameInstance = nameElement2;
            result.name = nameInstance;
          }
          
          var osElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (osElement2) {
            var osInstance = osElement2;
            result.operatingSystemType = osInstance;
          }
          
          var eulaElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'EULA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (eulaElement2) {
            var eulaInstance = eulaElement2;
            result.eula = eulaInstance;
          }
          
          var descriptionElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (descriptionElement2) {
            var descriptionInstance = descriptionElement2;
            result.description = descriptionInstance;
          }
          
          var imageFamilyElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'IMAGEFAMILY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (imageFamilyElement2) {
            var imageFamilyInstance = imageFamilyElement2;
            result.imageFamily = imageFamilyInstance;
          }
          
          var publishedDateElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'PUBLISHEDDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publishedDateElement2 && (publishedDateElement2 === null || publishedDateElement2 === undefined || publishedDateElement2.length === 0) === false) {
            var publishedDateInstance = new Date(publishedDateElement2);
            result.publishedDate = publishedDateInstance;
          }
          
          var publisherNameElement = js2xml.getElement(responseDoc, oSImageElement2, 'PUBLISHERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publisherNameElement) {
            var publisherNameInstance = publisherNameElement;
            result.publisherName = publisherNameInstance;
          }
          
          var isPremiumElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isPremiumElement2 && (isPremiumElement2 === null || isPremiumElement2 === undefined || isPremiumElement2.length === 0) === false) {
            var isPremiumInstance = isPremiumElement2;
            result.isPremium = isPremiumInstance;
          }
          
          var showInGuiElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'SHOWINGUI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (showInGuiElement2 && (showInGuiElement2 === null || showInGuiElement2 === undefined || showInGuiElement2.length === 0) === false) {
            var showInGuiInstance = showInGuiElement2;
            result.showInGui = showInGuiInstance;
          }
          
          var privacyUriElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'PRIVACYURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (privacyUriElement2) {
            var privacyUriInstance = privacyUriElement2;
            result.privacyUri = privacyUriInstance;
          }
          
          var iconUriElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'ICONURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (iconUriElement2) {
            var iconUriInstance = iconUriElement2;
            result.iconUri = iconUriInstance;
          }
          
          var recommendedVMSizeElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'RECOMMENDEDVMSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (recommendedVMSizeElement2) {
            var recommendedVMSizeInstance = recommendedVMSizeElement2;
            result.recommendedVMSize = recommendedVMSizeInstance;
          }
          
          var smallIconUriElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'SMALLICONURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (smallIconUriElement2) {
            var smallIconUriInstance = smallIconUriElement2;
            result.smallIconUri = smallIconUriInstance;
          }
          
          var languageElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'LANGUAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (languageElement2) {
            var languageInstance = languageElement2;
            result.language = languageInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Delete OS Image operation deletes the specified OS image from your
   * image repository.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157203.aspx for
   * more information)
   *
   * @param {String} imageName - The name of the image to delete.
   *
   * @param {Boolean} deleteFromStorage - Optional. Specifies that the source
   * blob for the image should also be deleted from storage.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineImageOperations.prototype.delete = function(imageName, deleteFromStorage, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (imageName === null || imageName === undefined) {
      return callback(new Error('imageName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/images/' + imageName + '?';
    if (deleteFromStorage === true) {
      url2 = url2 + '&comp=' + encodeURIComponent('media');
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get OS Image operation retrieves the details for an operating system
   * image from the image repository.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx for
   * more information)
   *
   * @param {String} imageName - The name of the OS image to retrieve
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineImageGetResponse} - A virtual machine image
   * associated with your subscription.
   */
  VirtualMachineImageOperations.prototype.get = function(imageName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (imageName === null || imageName === undefined) {
      return callback(new Error('imageName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/images/' + imageName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var oSImageElement = js2xml.getElement(responseDoc, responseDoc, 'OSIMAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (oSImageElement) {
          var affinityGroupElement = js2xml.getElement(responseDoc, oSImageElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (affinityGroupElement) {
            var affinityGroupInstance = affinityGroupElement;
            result.affinityGroup = affinityGroupInstance;
          }
          
          var categoryElement = js2xml.getElement(responseDoc, oSImageElement, 'CATEGORY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (categoryElement) {
            var categoryInstance = categoryElement;
            result.category = categoryInstance;
          }
          
          var labelElement = js2xml.getElement(responseDoc, oSImageElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement) {
            var labelInstance = labelElement;
            result.label = labelInstance;
          }
          
          var locationElement = js2xml.getElement(responseDoc, oSImageElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (locationElement) {
            var locationInstance = locationElement;
            result.location = locationInstance;
          }
          
          var logicalSizeInGBElement = js2xml.getElement(responseDoc, oSImageElement, 'LOGICALSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (logicalSizeInGBElement) {
            var logicalSizeInGBInstance = parseFloat(logicalSizeInGBElement, 10);
            result.logicalSizeInGB = logicalSizeInGBInstance;
          }
          
          var mediaLinkElement = js2xml.getElement(responseDoc, oSImageElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (mediaLinkElement) {
            var mediaLinkInstance = mediaLinkElement;
            result.mediaLinkUri = mediaLinkInstance;
          }
          
          var nameElement = js2xml.getElement(responseDoc, oSImageElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var osElement = js2xml.getElement(responseDoc, oSImageElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (osElement) {
            var osInstance = osElement;
            result.operatingSystemType = osInstance;
          }
          
          var eulaElement = js2xml.getElement(responseDoc, oSImageElement, 'EULA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (eulaElement) {
            var eulaInstance = eulaElement;
            result.eula = eulaInstance;
          }
          
          var descriptionElement = js2xml.getElement(responseDoc, oSImageElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (descriptionElement) {
            var descriptionInstance = descriptionElement;
            result.description = descriptionInstance;
          }
          
          var imageFamilyElement = js2xml.getElement(responseDoc, oSImageElement, 'IMAGEFAMILY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (imageFamilyElement) {
            var imageFamilyInstance = imageFamilyElement;
            result.imageFamily = imageFamilyInstance;
          }
          
          var showInGuiElement = js2xml.getElement(responseDoc, oSImageElement, 'SHOWINGUI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (showInGuiElement && (showInGuiElement === null || showInGuiElement === undefined || showInGuiElement.length === 0) === false) {
            var showInGuiInstance = showInGuiElement;
            result.showInGui = showInGuiInstance;
          }
          
          var publishedDateElement = js2xml.getElement(responseDoc, oSImageElement, 'PUBLISHEDDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publishedDateElement) {
            var publishedDateInstance = new Date(publishedDateElement);
            result.publishedDate = publishedDateInstance;
          }
          
          var isPremiumElement = js2xml.getElement(responseDoc, oSImageElement, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isPremiumElement && (isPremiumElement === null || isPremiumElement === undefined || isPremiumElement.length === 0) === false) {
            var isPremiumInstance = isPremiumElement;
            result.isPremium = isPremiumInstance;
          }
          
          var iconUriElement = js2xml.getElement(responseDoc, oSImageElement, 'ICONURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (iconUriElement) {
            var iconUriInstance = iconUriElement;
            result.iconUri = iconUriInstance;
          }
          
          var privacyUriElement = js2xml.getElement(responseDoc, oSImageElement, 'PRIVACYURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (privacyUriElement) {
            var privacyUriInstance = privacyUriElement;
            result.privacyUri = privacyUriInstance;
          }
          
          var recommendedVMSizeElement = js2xml.getElement(responseDoc, oSImageElement, 'RECOMMENDEDVMSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (recommendedVMSizeElement) {
            var recommendedVMSizeInstance = recommendedVMSizeElement;
            result.recommendedVMSize = recommendedVMSizeInstance;
          }
          
          var publisherNameElement = js2xml.getElement(responseDoc, oSImageElement, 'PUBLISHERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publisherNameElement) {
            var publisherNameInstance = publisherNameElement;
            result.publisherName = publisherNameInstance;
          }
          
          var smallIconUriElement = js2xml.getElement(responseDoc, oSImageElement, 'SMALLICONURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (smallIconUriElement) {
            var smallIconUriInstance = smallIconUriElement;
            result.smallIconUri = smallIconUriInstance;
          }
          
          var languageElement = js2xml.getElement(responseDoc, oSImageElement, 'LANGUAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (languageElement) {
            var languageInstance = languageElement;
            result.language = languageInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List OS Images operation retrieves a list of the operating system
   * images from the image repository.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineImageListResponse} - The List OS Images operation
   * response.
   */
  VirtualMachineImageOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/images';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { images: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var imagesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'IMAGES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (imagesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, imagesSequenceElement, 'OSIMAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var imagesElement = js2xml.getElements(responseDoc, imagesSequenceElement, 'OSIMAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var oSImageInstance = {};
            result.images.push(oSImageInstance);
            
            var affinityGroupElement = js2xml.getElement(responseDoc, imagesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (affinityGroupElement) {
              var affinityGroupInstance = affinityGroupElement;
              oSImageInstance.affinityGroup = affinityGroupInstance;
            }
            
            var categoryElement = js2xml.getElement(responseDoc, imagesElement, 'CATEGORY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (categoryElement) {
              var categoryInstance = categoryElement;
              oSImageInstance.category = categoryInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, imagesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = labelElement;
              oSImageInstance.label = labelInstance;
            }
            
            var locationElement = js2xml.getElement(responseDoc, imagesElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (locationElement) {
              var locationInstance = locationElement;
              oSImageInstance.location = locationInstance;
            }
            
            var logicalSizeInGBElement = js2xml.getElement(responseDoc, imagesElement, 'LOGICALSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (logicalSizeInGBElement) {
              var logicalSizeInGBInstance = parseFloat(logicalSizeInGBElement, 10);
              oSImageInstance.logicalSizeInGB = logicalSizeInGBInstance;
            }
            
            var mediaLinkElement = js2xml.getElement(responseDoc, imagesElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (mediaLinkElement) {
              var mediaLinkInstance = mediaLinkElement;
              oSImageInstance.mediaLinkUri = mediaLinkInstance;
            }
            
            var nameElement = js2xml.getElement(responseDoc, imagesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (nameElement) {
              var nameInstance = nameElement;
              oSImageInstance.name = nameInstance;
            }
            
            var osElement = js2xml.getElement(responseDoc, imagesElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (osElement) {
              var osInstance = osElement;
              oSImageInstance.operatingSystemType = osInstance;
            }
            
            var eulaElement = js2xml.getElement(responseDoc, imagesElement, 'EULA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (eulaElement) {
              var eulaInstance = eulaElement;
              oSImageInstance.eula = eulaInstance;
            }
            
            var descriptionElement = js2xml.getElement(responseDoc, imagesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (descriptionElement) {
              var descriptionInstance = descriptionElement;
              oSImageInstance.description = descriptionInstance;
            }
            
            var imageFamilyElement = js2xml.getElement(responseDoc, imagesElement, 'IMAGEFAMILY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (imageFamilyElement) {
              var imageFamilyInstance = imageFamilyElement;
              oSImageInstance.imageFamily = imageFamilyInstance;
            }
            
            var publishedDateElement = js2xml.getElement(responseDoc, imagesElement, 'PUBLISHEDDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (publishedDateElement) {
              var publishedDateInstance = new Date(publishedDateElement);
              oSImageInstance.publishedDate = publishedDateInstance;
            }
            
            var isPremiumElement = js2xml.getElement(responseDoc, imagesElement, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (isPremiumElement && (isPremiumElement === null || isPremiumElement === undefined || isPremiumElement.length === 0) === false) {
              var isPremiumInstance = isPremiumElement;
              oSImageInstance.isPremium = isPremiumInstance;
            }
            
            var privacyUriElement = js2xml.getElement(responseDoc, imagesElement, 'PRIVACYURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (privacyUriElement) {
              var privacyUriInstance = privacyUriElement;
              oSImageInstance.privacyUri = privacyUriInstance;
            }
            
            var recommendedVMSizeElement = js2xml.getElement(responseDoc, imagesElement, 'RECOMMENDEDVMSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (recommendedVMSizeElement) {
              var recommendedVMSizeInstance = recommendedVMSizeElement;
              oSImageInstance.recommendedVMSize = recommendedVMSizeInstance;
            }
            
            var publisherNameElement = js2xml.getElement(responseDoc, imagesElement, 'PUBLISHERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (publisherNameElement) {
              var publisherNameInstance = publisherNameElement;
              oSImageInstance.publisherName = publisherNameInstance;
            }
            
            var pricingDetailLinkElement = js2xml.getElement(responseDoc, imagesElement, 'PRICINGDETAILLINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (pricingDetailLinkElement) {
              var pricingDetailLinkInstance = pricingDetailLinkElement;
              oSImageInstance.pricingDetailUri = pricingDetailLinkInstance;
            }
            
            var smallIconUriElement = js2xml.getElement(responseDoc, imagesElement, 'SMALLICONURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (smallIconUriElement) {
              var smallIconUriInstance = smallIconUriElement;
              oSImageInstance.smallIconUri = smallIconUriInstance;
            }
            
            var languageElement = js2xml.getElement(responseDoc, imagesElement, 'LANGUAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (languageElement) {
              var languageInstance = languageElement;
              oSImageInstance.language = languageInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Update OS Image operation updates an OS image that in your image
   * repository.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157198.aspx for
   * more information)
   *
   * @param {String} imageName - The name of the virtual machine image to be
   * updated.
   *
   * @param {VirtualMachineImageUpdateParameters} parameters - Parameters
   * supplied to the Update Virtual Machine Image operation.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineImageUpdateResponse} - Parameters returned from
   * the Create Virtual Machine Image operation.
   */
  VirtualMachineImageOperations.prototype.update = function(imageName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (imageName === null || imageName === undefined) {
      return callback(new Error('imageName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/images/' + imageName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var oSImageElement = js2xml.createElement('OSImage', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, oSImageElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, parameters.label);
    js2xml.addChildElement(oSImageElement, labelElement);
    
    if (parameters.eula) {
      var eulaElement = js2xml.createElement('Eula', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(eulaElement, parameters.eula);
      js2xml.addChildElement(oSImageElement, eulaElement);
    }
    
    if (parameters.description) {
      var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(descriptionElement, parameters.description);
      js2xml.addChildElement(oSImageElement, descriptionElement);
    }
    
    if (parameters.imageFamily) {
      var imageFamilyElement = js2xml.createElement('ImageFamily', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(imageFamilyElement, parameters.imageFamily);
      js2xml.addChildElement(oSImageElement, imageFamilyElement);
    }
    
    if (parameters.publishedDate) {
      var publishedDateElement = js2xml.createElement('PublishedDate', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(publishedDateElement, parameters.publishedDate.toString());
      js2xml.addChildElement(oSImageElement, publishedDateElement);
    }
    
    var isPremiumElement = js2xml.createElement('IsPremium', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(isPremiumElement, parameters.isPremium.toString());
    js2xml.addChildElement(oSImageElement, isPremiumElement);
    
    if (parameters.privacyUri) {
      var privacyUriElement = js2xml.createElement('PrivacyUri', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(privacyUriElement, parameters.privacyUri);
      js2xml.addChildElement(oSImageElement, privacyUriElement);
    }
    
    if (parameters.iconUri) {
      var iconUriElement = js2xml.createElement('IconUri', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(iconUriElement, parameters.iconUri);
      js2xml.addChildElement(oSImageElement, iconUriElement);
    }
    
    if (parameters.recommendedVMSize) {
      var recommendedVMSizeElement = js2xml.createElement('RecommendedVMSize', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(recommendedVMSizeElement, parameters.recommendedVMSize ? parameters.recommendedVMSize.toString() : 'Small');
      js2xml.addChildElement(oSImageElement, recommendedVMSizeElement);
    }
    
    if (parameters.smallIconUri) {
      var smallIconUriElement = js2xml.createElement('SmallIconUri', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(smallIconUriElement, parameters.smallIconUri);
      js2xml.addChildElement(oSImageElement, smallIconUriElement);
    }
    
    if (parameters.language) {
      var languageElement = js2xml.createElement('Language', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(languageElement, parameters.language);
      js2xml.addChildElement(oSImageElement, languageElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var oSImageElement2 = js2xml.getElement(responseDoc, responseDoc, 'OSIMAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (oSImageElement2) {
          var locationElement = js2xml.getElement(responseDoc, oSImageElement2, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (locationElement) {
            var locationInstance = locationElement;
            result.location = locationInstance;
          }
          
          var categoryElement = js2xml.getElement(responseDoc, oSImageElement2, 'CATEGORY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (categoryElement) {
            var categoryInstance = categoryElement;
            result.category = categoryInstance;
          }
          
          var labelElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (labelElement2) {
            var labelInstance = labelElement2;
            result.label = labelInstance;
          }
          
          var logicalSizeInGBElement = js2xml.getElement(responseDoc, oSImageElement2, 'LOGICALSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (logicalSizeInGBElement) {
            var logicalSizeInGBInstance = parseFloat(logicalSizeInGBElement, 10);
            result.logicalSizeInGB = logicalSizeInGBInstance;
          }
          
          var mediaLinkElement = js2xml.getElement(responseDoc, oSImageElement2, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (mediaLinkElement) {
            var mediaLinkInstance = mediaLinkElement;
            result.mediaLinkUri = mediaLinkInstance;
          }
          
          var nameElement = js2xml.getElement(responseDoc, oSImageElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (nameElement) {
            var nameInstance = nameElement;
            result.name = nameInstance;
          }
          
          var osElement = js2xml.getElement(responseDoc, oSImageElement2, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (osElement) {
            var osInstance = osElement;
            result.operatingSystemType = osInstance;
          }
          
          var eulaElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'EULA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (eulaElement2) {
            var eulaInstance = eulaElement2;
            result.eula = eulaInstance;
          }
          
          var descriptionElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (descriptionElement2) {
            var descriptionInstance = descriptionElement2;
            result.description = descriptionInstance;
          }
          
          var imageFamilyElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'IMAGEFAMILY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (imageFamilyElement2) {
            var imageFamilyInstance = imageFamilyElement2;
            result.imageFamily = imageFamilyInstance;
          }
          
          var publishedDateElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'PUBLISHEDDATE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publishedDateElement2 && (publishedDateElement2 === null || publishedDateElement2 === undefined || publishedDateElement2.length === 0) === false) {
            var publishedDateInstance = new Date(publishedDateElement2);
            result.publishedDate = publishedDateInstance;
          }
          
          var publisherNameElement = js2xml.getElement(responseDoc, oSImageElement2, 'PUBLISHERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (publisherNameElement) {
            var publisherNameInstance = publisherNameElement;
            result.publisherName = publisherNameInstance;
          }
          
          var isPremiumElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'ISPREMIUM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (isPremiumElement2 && (isPremiumElement2 === null || isPremiumElement2 === undefined || isPremiumElement2.length === 0) === false) {
            var isPremiumInstance = isPremiumElement2;
            result.isPremium = isPremiumInstance;
          }
          
          var showInGuiElement = js2xml.getElement(responseDoc, oSImageElement2, 'SHOWINGUI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (showInGuiElement && (showInGuiElement === null || showInGuiElement === undefined || showInGuiElement.length === 0) === false) {
            var showInGuiInstance = showInGuiElement;
            result.showInGui = showInGuiInstance;
          }
          
          var privacyUriElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'PRIVACYURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (privacyUriElement2) {
            var privacyUriInstance = privacyUriElement2;
            result.privacyUri = privacyUriInstance;
          }
          
          var iconUriElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'ICONURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (iconUriElement2) {
            var iconUriInstance = iconUriElement2;
            result.iconUri = iconUriInstance;
          }
          
          var recommendedVMSizeElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'RECOMMENDEDVMSIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (recommendedVMSizeElement2) {
            var recommendedVMSizeInstance = recommendedVMSizeElement2;
            result.recommendedVMSize = recommendedVMSizeInstance;
          }
          
          var smallIconUriElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'SMALLICONURI', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (smallIconUriElement2) {
            var smallIconUriInstance = smallIconUriElement2;
            result.smallIconUri = smallIconUriInstance;
          }
          
          var languageElement2 = js2xml.getElement(responseDoc, oSImageElement2, 'LANGUAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (languageElement2) {
            var languageInstance = languageElement2;
            result.language = languageInstance;
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return VirtualMachineImageOperations;
})();

/**
 * The Service Management API includes operations for managing the virtual
 * machines in your subscription.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/jj157206.aspx for more
 * information)
 */
var VirtualMachineOperations = (function() {
  /**
   * Initializes a new instance of the VirtualMachineOperations class.
   *
   * @constructor
   *
   * @param {ComputeManagementClient} client - Reference to the service client.
   */
  function VirtualMachineOperations(client) {
    this.client = client;
  }
  
  /**
   * The Add Role operation adds a virtual machine to an existing deployment.
   * You can refer to the OSDisk in the Add Role operation in the following
   * ways.  Platform/User Image – Set the SourceImageName to a platform or
   * user image. You can optionally specify the DiskName and MediaLink values
   * as part the operation to control the name and location of target disk.
   * When DiskName and MediaLink are specified in this mode, they must not
   * already exist in the system, otherwise a conflict fault is returned.
   * UserDisk – Set DiskName to a user supplied image in image repository.
   * SourceImageName must be set to NULL. All other properties are ignored.
   * Blob in a Storage Account – Set MediaLink to a blob containing the
   * image. SourceImageName and DiskName are set to NULL.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineCreateParameters} parameters - Parameters supplied
   * to the Create Virtual Machine operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginCreating = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.configurationSets.length; loweredIndex1 = loweredIndex1 + 1) {
      var configurationSetsParameterItem = parameters.configurationSets[loweredIndex1];
      if (configurationSetsParameterItem.domainJoin) {
        if (configurationSetsParameterItem.domainJoin.credentials) {
          if (configurationSetsParameterItem.domainJoin.credentials.password === null || configurationSetsParameterItem.domainJoin.credentials.password === undefined) {
            return callback(new Error('parameters.configurationSets.domainJoin.credentials.password cannot be null.'));
          }
          if (configurationSetsParameterItem.domainJoin.credentials.userName === null || configurationSetsParameterItem.domainJoin.credentials.userName === undefined) {
            return callback(new Error('parameters.configurationSets.domainJoin.credentials.userName cannot be null.'));
          }
        }
      }
      if (configurationSetsParameterItem.hostName && configurationSetsParameterItem.hostName.length < 1) {
        return callback(new Error('parameters.configurationSets.hostName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.hostName && configurationSetsParameterItem.hostName.length > 64) {
        return callback(new Error('parameters.configurationSets.hostName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.sshSettings) {
        for (var loweredIndex2 = 0; loweredIndex2 < configurationSetsParameterItem.sshSettings.keyPairs.length; loweredIndex2 = loweredIndex2 + 1) {
          var keyPairsParameterItem = configurationSetsParameterItem.sshSettings.keyPairs[loweredIndex2];
          if (keyPairsParameterItem.fingerprint === null || keyPairsParameterItem.fingerprint === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.keyPairs.fingerprint cannot be null.'));
          }
          if (keyPairsParameterItem.path === null || keyPairsParameterItem.path === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.keyPairs.path cannot be null.'));
          }
        }
        for (var loweredIndex3 = 0; loweredIndex3 < configurationSetsParameterItem.sshSettings.publicKeys.length; loweredIndex3 = loweredIndex3 + 1) {
          var publicKeysParameterItem = configurationSetsParameterItem.sshSettings.publicKeys[loweredIndex3];
          if (publicKeysParameterItem.fingerprint === null || publicKeysParameterItem.fingerprint === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.publicKeys.fingerprint cannot be null.'));
          }
          if (publicKeysParameterItem.path === null || publicKeysParameterItem.path === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.publicKeys.path cannot be null.'));
          }
        }
      }
      for (var loweredIndex4 = 0; loweredIndex4 < configurationSetsParameterItem.storedCertificateSettings.length; loweredIndex4 = loweredIndex4 + 1) {
        var storedCertificateSettingsParameterItem = configurationSetsParameterItem.storedCertificateSettings[loweredIndex4];
        if (storedCertificateSettingsParameterItem.storeName === null || storedCertificateSettingsParameterItem.storeName === undefined) {
          return callback(new Error('parameters.configurationSets.storedCertificateSettings.storeName cannot be null.'));
        }
        if (storedCertificateSettingsParameterItem.thumbprint === null || storedCertificateSettingsParameterItem.thumbprint === undefined) {
          return callback(new Error('parameters.configurationSets.storedCertificateSettings.thumbprint cannot be null.'));
        }
      }
      if (configurationSetsParameterItem.userName && configurationSetsParameterItem.userName.length < 1) {
        return callback(new Error('parameters.configurationSets.userName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.userName && configurationSetsParameterItem.userName.length > 32) {
        return callback(new Error('parameters.configurationSets.userName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.userPassword && configurationSetsParameterItem.userPassword.length < 6 && (configurationSetsParameterItem.DisableSshPasswordAuthentication === false || configurationSetsParameterItem.userPassword.length !== 0)) {
        return callback(new Error('parameters.configurationSets.userPassword is outside the valid range.'));
      }
      if (configurationSetsParameterItem.userPassword && configurationSetsParameterItem.userPassword.length > 72) {
        return callback(new Error('parameters.configurationSets.userPassword is outside the valid range.'));
      }
    }
    if (parameters.roleName === null || parameters.roleName === undefined) {
      return callback(new Error('parameters.roleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var persistentVMRoleElement = js2xml.createElement('PersistentVMRole', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, persistentVMRoleElement);
    
    var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(roleNameElement, parameters.roleName);
    js2xml.addChildElement(persistentVMRoleElement, roleNameElement);
    
    var roleTypeElement = js2xml.createElement('RoleType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(roleTypeElement, 'PersistentVMRole');
    js2xml.addChildElement(persistentVMRoleElement, roleTypeElement);
    
    if (parameters.configurationSets) {
      var configurationSetsSequenceElement = js2xml.createElement('ConfigurationSets', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex5 = 0; loweredIndex5 < parameters.configurationSets.length; loweredIndex5 = loweredIndex5 + 1) {
        var configurationSetsItem = parameters.configurationSets[loweredIndex5];
        var configurationSetElement = js2xml.createElement('ConfigurationSet', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(configurationSetsSequenceElement, configurationSetElement);
        
        if (configurationSetsItem.configurationSetType) {
          var configurationSetTypeElement = js2xml.createElement('ConfigurationSetType', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(configurationSetTypeElement, configurationSetsItem.configurationSetType);
          js2xml.addChildElement(configurationSetElement, configurationSetTypeElement);
        }
        
        if (configurationSetsItem.inputEndpoints) {
          var inputEndpointsSequenceElement = js2xml.createElement('InputEndpoints', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex6 = 0; loweredIndex6 < configurationSetsItem.inputEndpoints.length; loweredIndex6 = loweredIndex6 + 1) {
            var inputEndpointsItem = configurationSetsItem.inputEndpoints[loweredIndex6];
            var inputEndpointElement = js2xml.createElement('InputEndpoint', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(inputEndpointsSequenceElement, inputEndpointElement);
            
            if (inputEndpointsItem.loadBalancedEndpointSetName) {
              var loadBalancedEndpointSetNameElement = js2xml.createElement('LoadBalancedEndpointSetName', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(loadBalancedEndpointSetNameElement, inputEndpointsItem.loadBalancedEndpointSetName);
              js2xml.addChildElement(inputEndpointElement, loadBalancedEndpointSetNameElement);
            }
            
            if (inputEndpointsItem.localPort) {
              var localPortElement = js2xml.createElement('LocalPort', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(localPortElement, inputEndpointsItem.localPort.toString());
              js2xml.addChildElement(inputEndpointElement, localPortElement);
            }
            
            if (inputEndpointsItem.name) {
              var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(nameElement, inputEndpointsItem.name);
              js2xml.addChildElement(inputEndpointElement, nameElement);
            }
            
            if (inputEndpointsItem.port) {
              var portElement = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(portElement, inputEndpointsItem.port.toString());
              js2xml.addChildElement(inputEndpointElement, portElement);
            }
            
            if (inputEndpointsItem.loadBalancerProbe) {
              var loadBalancerProbeElement = js2xml.createElement('LoadBalancerProbe', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(inputEndpointElement, loadBalancerProbeElement);
              
              if (inputEndpointsItem.loadBalancerProbe.path) {
                var pathElement = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(pathElement, inputEndpointsItem.loadBalancerProbe.path);
                js2xml.addChildElement(loadBalancerProbeElement, pathElement);
              }
              
              var portElement2 = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(portElement2, inputEndpointsItem.loadBalancerProbe.port.toString());
              js2xml.addChildElement(loadBalancerProbeElement, portElement2);
              
              var protocolElement = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(protocolElement, inputEndpointsItem.loadBalancerProbe.protocol ? inputEndpointsItem.loadBalancerProbe.protocol.toString() : 'Tcp');
              js2xml.addChildElement(loadBalancerProbeElement, protocolElement);
              
              if (inputEndpointsItem.loadBalancerProbe.intervalInSeconds) {
                var intervalInSecondsElement = js2xml.createElement('IntervalInSeconds', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(intervalInSecondsElement, inputEndpointsItem.loadBalancerProbe.intervalInSeconds.toString());
                js2xml.addChildElement(loadBalancerProbeElement, intervalInSecondsElement);
              }
              
              if (inputEndpointsItem.loadBalancerProbe.timeoutInSeconds) {
                var timeoutInSecondsElement = js2xml.createElement('TimeoutInSeconds', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(timeoutInSecondsElement, inputEndpointsItem.loadBalancerProbe.timeoutInSeconds.toString());
                js2xml.addChildElement(loadBalancerProbeElement, timeoutInSecondsElement);
              }
            }
            
            if (inputEndpointsItem.protocol) {
              var protocolElement2 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(protocolElement2, inputEndpointsItem.protocol);
              js2xml.addChildElement(inputEndpointElement, protocolElement2);
            }
            
            if (inputEndpointsItem.virtualIPAddress) {
              var vipElement = js2xml.createElement('Vip', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(vipElement, inputEndpointsItem.virtualIPAddress);
              js2xml.addChildElement(inputEndpointElement, vipElement);
            }
            
            if (inputEndpointsItem.enableDirectServerReturn) {
              var enableDirectServerReturnElement = js2xml.createElement('EnableDirectServerReturn', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(enableDirectServerReturnElement, inputEndpointsItem.enableDirectServerReturn.toString());
              js2xml.addChildElement(inputEndpointElement, enableDirectServerReturnElement);
            }
            
            if (inputEndpointsItem.accessControlList) {
              var accessControlListElement = js2xml.createElement('AccessControlList', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(inputEndpointElement, accessControlListElement);
              
              if (inputEndpointsItem.accessControlList.rules) {
                var rulesSequenceElement = js2xml.createElement('Rules', 'http://schemas.microsoft.com/windowsazure');
                for (var loweredIndex7 = 0; loweredIndex7 < inputEndpointsItem.accessControlList.rules.length; loweredIndex7 = loweredIndex7 + 1) {
                  var rulesItem = inputEndpointsItem.accessControlList.rules[loweredIndex7];
                  var ruleElement = js2xml.createElement('Rule', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.addChildElement(rulesSequenceElement, ruleElement);
                  
                  if (rulesItem.order) {
                    var orderElement = js2xml.createElement('Order', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(orderElement, rulesItem.order.toString());
                    js2xml.addChildElement(ruleElement, orderElement);
                  }
                  
                  if (rulesItem.action) {
                    var actionElement = js2xml.createElement('Action', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(actionElement, rulesItem.action);
                    js2xml.addChildElement(ruleElement, actionElement);
                  }
                  
                  if (rulesItem.remoteSubnet) {
                    var remoteSubnetElement = js2xml.createElement('RemoteSubnet', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(remoteSubnetElement, rulesItem.remoteSubnet);
                    js2xml.addChildElement(ruleElement, remoteSubnetElement);
                  }
                  
                  if (rulesItem.description) {
                    var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(descriptionElement, rulesItem.description);
                    js2xml.addChildElement(ruleElement, descriptionElement);
                  }
                }
                js2xml.addChildElement(accessControlListElement, rulesSequenceElement);
              }
            }
          }
          js2xml.addChildElement(configurationSetElement, inputEndpointsSequenceElement);
        }
        
        if (configurationSetsItem.subnetNames) {
          var subnetNamesSequenceElement = js2xml.createElement('SubnetNames', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex8 = 0; loweredIndex8 < configurationSetsItem.subnetNames.length; loweredIndex8 = loweredIndex8 + 1) {
            var subnetNamesItem = configurationSetsItem.subnetNames[loweredIndex8];
            var subnetNamesItemElement = js2xml.createElement('SubnetName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(subnetNamesItemElement, subnetNamesItem);
            js2xml.addChildElement(subnetNamesSequenceElement, subnetNamesItemElement);
          }
          js2xml.addChildElement(configurationSetElement, subnetNamesSequenceElement);
        }
        
        if (configurationSetsItem.computerName) {
          var computerNameElement = js2xml.createElement('ComputerName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(computerNameElement, configurationSetsItem.computerName);
          js2xml.addChildElement(configurationSetElement, computerNameElement);
        }
        
        if (configurationSetsItem.adminPassword) {
          var adminPasswordElement = js2xml.createElement('AdminPassword', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(adminPasswordElement, configurationSetsItem.adminPassword);
          js2xml.addChildElement(configurationSetElement, adminPasswordElement);
        }
        
        if (configurationSetsItem.resetPasswordOnFirstLogon) {
          var resetPasswordOnFirstLogonElement = js2xml.createElement('ResetPasswordOnFirstLogon', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(resetPasswordOnFirstLogonElement, configurationSetsItem.resetPasswordOnFirstLogon.toString());
          js2xml.addChildElement(configurationSetElement, resetPasswordOnFirstLogonElement);
        }
        
        if (configurationSetsItem.enableAutomaticUpdates) {
          var enableAutomaticUpdatesElement = js2xml.createElement('EnableAutomaticUpdates', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(enableAutomaticUpdatesElement, configurationSetsItem.enableAutomaticUpdates.toString());
          js2xml.addChildElement(configurationSetElement, enableAutomaticUpdatesElement);
        }
        
        if (configurationSetsItem.timeZone) {
          var timeZoneElement = js2xml.createElement('TimeZone', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(timeZoneElement, configurationSetsItem.timeZone);
          js2xml.addChildElement(configurationSetElement, timeZoneElement);
        }
        
        if (configurationSetsItem.domainJoin) {
          var domainJoinElement = js2xml.createElement('DomainJoin', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(configurationSetElement, domainJoinElement);
          
          if (configurationSetsItem.domainJoin.credentials) {
            var credentialsElement = js2xml.createElement('Credentials', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(domainJoinElement, credentialsElement);
            
            if (configurationSetsItem.domainJoin.credentials.domain) {
              var domainElement = js2xml.createElement('Domain', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(domainElement, configurationSetsItem.domainJoin.credentials.domain);
              js2xml.addChildElement(credentialsElement, domainElement);
            }
            
            var usernameElement = js2xml.createElement('Username', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(usernameElement, configurationSetsItem.domainJoin.credentials.userName);
            js2xml.addChildElement(credentialsElement, usernameElement);
            
            var passwordElement = js2xml.createElement('Password', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(passwordElement, configurationSetsItem.domainJoin.credentials.password);
            js2xml.addChildElement(credentialsElement, passwordElement);
          }
          
          if (configurationSetsItem.domainJoin.domainToJoin) {
            var joinDomainElement = js2xml.createElement('JoinDomain', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(joinDomainElement, configurationSetsItem.domainJoin.domainToJoin);
            js2xml.addChildElement(domainJoinElement, joinDomainElement);
          }
          
          if (configurationSetsItem.domainJoin.ldapMachineObjectOU) {
            var machineObjectOUElement = js2xml.createElement('MachineObjectOU', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(machineObjectOUElement, configurationSetsItem.domainJoin.ldapMachineObjectOU);
            js2xml.addChildElement(domainJoinElement, machineObjectOUElement);
          }
          
          if (configurationSetsItem.domainJoin.provisioning) {
            var provisioningElement = js2xml.createElement('Provisioning', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(domainJoinElement, provisioningElement);
            
            if (configurationSetsItem.domainJoin.provisioning.accountData) {
              var accountDataElement = js2xml.createElement('AccountData', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(accountDataElement, configurationSetsItem.domainJoin.provisioning.accountData);
              js2xml.addChildElement(provisioningElement, accountDataElement);
            }
          }
        }
        
        if (configurationSetsItem.storedCertificateSettings) {
          var storedCertificateSettingsSequenceElement = js2xml.createElement('StoredCertificateSettings', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex9 = 0; loweredIndex9 < configurationSetsItem.storedCertificateSettings.length; loweredIndex9 = loweredIndex9 + 1) {
            var storedCertificateSettingsItem = configurationSetsItem.storedCertificateSettings[loweredIndex9];
            var certificateSettingElement = js2xml.createElement('CertificateSetting', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(storedCertificateSettingsSequenceElement, certificateSettingElement);
            
            var storeLocationElement = js2xml.createElement('StoreLocation', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(storeLocationElement, 'LocalMachine');
            js2xml.addChildElement(certificateSettingElement, storeLocationElement);
            
            var storeNameElement = js2xml.createElement('StoreName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(storeNameElement, storedCertificateSettingsItem.storeName);
            js2xml.addChildElement(certificateSettingElement, storeNameElement);
            
            var thumbprintElement = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(thumbprintElement, storedCertificateSettingsItem.thumbprint);
            js2xml.addChildElement(certificateSettingElement, thumbprintElement);
          }
          js2xml.addChildElement(configurationSetElement, storedCertificateSettingsSequenceElement);
        }
        
        if (configurationSetsItem.windowsRemoteManagement) {
          var winRMElement = js2xml.createElement('WinRM', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(configurationSetElement, winRMElement);
          
          if (configurationSetsItem.windowsRemoteManagement.listeners) {
            var listenersSequenceElement = js2xml.createElement('Listeners', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex10 = 0; loweredIndex10 < configurationSetsItem.windowsRemoteManagement.listeners.length; loweredIndex10 = loweredIndex10 + 1) {
              var listenersItem = configurationSetsItem.windowsRemoteManagement.listeners[loweredIndex10];
              var listenerElement = js2xml.createElement('Listener', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(listenersSequenceElement, listenerElement);
              
              var protocolElement3 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(protocolElement3, listenersItem.listenerType ? listenersItem.listenerType.toString() : 'Http');
              js2xml.addChildElement(listenerElement, protocolElement3);
              
              if (listenersItem.certificateThumbprint) {
                var certificateThumbprintElement = js2xml.createElement('CertificateThumbprint', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(certificateThumbprintElement, listenersItem.certificateThumbprint);
                js2xml.addChildElement(listenerElement, certificateThumbprintElement);
              }
            }
            js2xml.addChildElement(winRMElement, listenersSequenceElement);
          }
        }
        
        if (configurationSetsItem.adminUserName) {
          var adminUsernameElement = js2xml.createElement('AdminUsername', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(adminUsernameElement, configurationSetsItem.adminUserName);
          js2xml.addChildElement(configurationSetElement, adminUsernameElement);
        }
        
        if (configurationSetsItem.hostName) {
          var hostNameElement = js2xml.createElement('HostName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(hostNameElement, configurationSetsItem.hostName);
          js2xml.addChildElement(configurationSetElement, hostNameElement);
        }
        
        if (configurationSetsItem.userName) {
          var userNameElement = js2xml.createElement('UserName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(userNameElement, configurationSetsItem.userName);
          js2xml.addChildElement(configurationSetElement, userNameElement);
        }
        
        if (configurationSetsItem.userPassword) {
          var userPasswordElement = js2xml.createElement('UserPassword', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(userPasswordElement, configurationSetsItem.userPassword);
          js2xml.addChildElement(configurationSetElement, userPasswordElement);
        }
        
        if (configurationSetsItem.disableSshPasswordAuthentication) {
          var disableSshPasswordAuthenticationElement = js2xml.createElement('DisableSshPasswordAuthentication', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(disableSshPasswordAuthenticationElement, configurationSetsItem.disableSshPasswordAuthentication.toString());
          js2xml.addChildElement(configurationSetElement, disableSshPasswordAuthenticationElement);
        }
        
        if (configurationSetsItem.sshSettings) {
          var sSHElement = js2xml.createElement('SSH', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(configurationSetElement, sSHElement);
          
          if (configurationSetsItem.sshSettings.publicKeys) {
            var publicKeysSequenceElement = js2xml.createElement('PublicKeys', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex11 = 0; loweredIndex11 < configurationSetsItem.sshSettings.publicKeys.length; loweredIndex11 = loweredIndex11 + 1) {
              var publicKeysItem = configurationSetsItem.sshSettings.publicKeys[loweredIndex11];
              var publicKeyElement = js2xml.createElement('PublicKey', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(publicKeysSequenceElement, publicKeyElement);
              
              var fingerPrintElement = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(fingerPrintElement, publicKeysItem.fingerprint);
              js2xml.addChildElement(publicKeyElement, fingerPrintElement);
              
              var pathElement2 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(pathElement2, publicKeysItem.path);
              js2xml.addChildElement(publicKeyElement, pathElement2);
            }
            js2xml.addChildElement(sSHElement, publicKeysSequenceElement);
          }
          
          if (configurationSetsItem.sshSettings.keyPairs) {
            var keyPairsSequenceElement = js2xml.createElement('KeyPairs', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex12 = 0; loweredIndex12 < configurationSetsItem.sshSettings.keyPairs.length; loweredIndex12 = loweredIndex12 + 1) {
              var keyPairsItem = configurationSetsItem.sshSettings.keyPairs[loweredIndex12];
              var keyPairElement = js2xml.createElement('KeyPair', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(keyPairsSequenceElement, keyPairElement);
              
              var fingerPrintElement2 = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(fingerPrintElement2, keyPairsItem.fingerprint);
              js2xml.addChildElement(keyPairElement, fingerPrintElement2);
              
              var pathElement3 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(pathElement3, keyPairsItem.path);
              js2xml.addChildElement(keyPairElement, pathElement3);
            }
            js2xml.addChildElement(sSHElement, keyPairsSequenceElement);
          }
        }
      }
      js2xml.addChildElement(persistentVMRoleElement, configurationSetsSequenceElement);
    }
    
    if (parameters.availabilitySetName) {
      var availabilitySetNameElement = js2xml.createElement('AvailabilitySetName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(availabilitySetNameElement, parameters.availabilitySetName);
      js2xml.addChildElement(persistentVMRoleElement, availabilitySetNameElement);
    }
    
    if (parameters.dataVirtualHardDisks) {
      var dataVirtualHardDisksSequenceElement = js2xml.createElement('DataVirtualHardDisks', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex13 = 0; loweredIndex13 < parameters.dataVirtualHardDisks.length; loweredIndex13 = loweredIndex13 + 1) {
        var dataVirtualHardDisksItem = parameters.dataVirtualHardDisks[loweredIndex13];
        var dataVirtualHardDiskElement = js2xml.createElement('DataVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(dataVirtualHardDisksSequenceElement, dataVirtualHardDiskElement);
        
        if (dataVirtualHardDisksItem.hostCaching) {
          var hostCachingElement = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(hostCachingElement, dataVirtualHardDisksItem.hostCaching ? dataVirtualHardDisksItem.hostCaching.toString() : 'None');
          js2xml.addChildElement(dataVirtualHardDiskElement, hostCachingElement);
        }
        
        if (dataVirtualHardDisksItem.diskLabel) {
          var diskLabelElement = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(diskLabelElement, dataVirtualHardDisksItem.diskLabel);
          js2xml.addChildElement(dataVirtualHardDiskElement, diskLabelElement);
        }
        
        if (dataVirtualHardDisksItem.diskName) {
          var diskNameElement = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(diskNameElement, dataVirtualHardDisksItem.diskName);
          js2xml.addChildElement(dataVirtualHardDiskElement, diskNameElement);
        }
        
        if (dataVirtualHardDisksItem.logicalUnitNumber) {
          var lunElement = js2xml.createElement('Lun', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(lunElement, dataVirtualHardDisksItem.logicalUnitNumber.toString());
          js2xml.addChildElement(dataVirtualHardDiskElement, lunElement);
        }
        
        var logicalDiskSizeInGBElement = js2xml.createElement('LogicalDiskSizeInGB', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(logicalDiskSizeInGBElement, dataVirtualHardDisksItem.logicalDiskSizeInGB.toString());
        js2xml.addChildElement(dataVirtualHardDiskElement, logicalDiskSizeInGBElement);
        
        if (dataVirtualHardDisksItem.mediaLink) {
          var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(mediaLinkElement, dataVirtualHardDisksItem.mediaLink);
          js2xml.addChildElement(dataVirtualHardDiskElement, mediaLinkElement);
        }
      }
      js2xml.addChildElement(persistentVMRoleElement, dataVirtualHardDisksSequenceElement);
    }
    
    if (parameters.oSVirtualHardDisk) {
      var oSVirtualHardDiskElement = js2xml.createElement('OSVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(persistentVMRoleElement, oSVirtualHardDiskElement);
      
      if (parameters.oSVirtualHardDisk.hostCaching) {
        var hostCachingElement2 = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(hostCachingElement2, parameters.oSVirtualHardDisk.hostCaching ? parameters.oSVirtualHardDisk.hostCaching.toString() : 'None');
        js2xml.addChildElement(oSVirtualHardDiskElement, hostCachingElement2);
      }
      
      if (parameters.oSVirtualHardDisk.diskLabel) {
        var diskLabelElement2 = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(diskLabelElement2, parameters.oSVirtualHardDisk.diskLabel);
        js2xml.addChildElement(oSVirtualHardDiskElement, diskLabelElement2);
      }
      
      if (parameters.oSVirtualHardDisk.diskName) {
        var diskNameElement2 = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(diskNameElement2, parameters.oSVirtualHardDisk.diskName);
        js2xml.addChildElement(oSVirtualHardDiskElement, diskNameElement2);
      }
      
      if (parameters.oSVirtualHardDisk.mediaLink) {
        var mediaLinkElement2 = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(mediaLinkElement2, parameters.oSVirtualHardDisk.mediaLink);
        js2xml.addChildElement(oSVirtualHardDiskElement, mediaLinkElement2);
      }
      
      if (parameters.oSVirtualHardDisk.sourceImageName) {
        var sourceImageNameElement = js2xml.createElement('SourceImageName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(sourceImageNameElement, parameters.oSVirtualHardDisk.sourceImageName);
        js2xml.addChildElement(oSVirtualHardDiskElement, sourceImageNameElement);
      }
      
      if (parameters.oSVirtualHardDisk.operatingSystem) {
        var osElement = js2xml.createElement('OS', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(osElement, parameters.oSVirtualHardDisk.operatingSystem);
        js2xml.addChildElement(oSVirtualHardDiskElement, osElement);
      }
    }
    
    if (parameters.roleSize) {
      var roleSizeElement = js2xml.createElement('RoleSize', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(roleSizeElement, parameters.roleSize ? parameters.roleSize.toString() : 'Small');
      js2xml.addChildElement(persistentVMRoleElement, roleSizeElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Create Virtual Machine Deployment operation provisions a virtual
   * machine based on the supplied configuration.  When you create a
   * deployment of a virtual machine, you should make sure that the cloud
   * service and the disk or image that you use are located in the same
   * region. For example, if the cloud service was created in the West US
   * region, the disk or image that you use should also be located in a
   * stor4age account in the West US region.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {VirtualMachineCreateDeploymentParameters} parameters - Parameters
   * supplied to the Create Virtual Machine Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginCreatingDeployment = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.label.length > 100) {
      return callback(new Error('parameters.label is outside the valid range.'));
    }
    if (parameters.name === null || parameters.name === undefined) {
      return callback(new Error('parameters.name cannot be null.'));
    }
    if (parameters.roles === null || parameters.roles === undefined) {
      return callback(new Error('parameters.roles cannot be null.'));
    }
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.roles.length; loweredIndex1 = loweredIndex1 + 1) {
      var rolesParameterItem = parameters.roles[loweredIndex1];
      for (var loweredIndex2 = 0; loweredIndex2 < rolesParameterItem.configurationSets.length; loweredIndex2 = loweredIndex2 + 1) {
        var configurationSetsParameterItem = rolesParameterItem.configurationSets[loweredIndex2];
        if (configurationSetsParameterItem.domainJoin) {
          if (configurationSetsParameterItem.domainJoin.credentials) {
            if (configurationSetsParameterItem.domainJoin.credentials.password === null || configurationSetsParameterItem.domainJoin.credentials.password === undefined) {
              return callback(new Error('parameters.roles.configurationSets.domainJoin.credentials.password cannot be null.'));
            }
            if (configurationSetsParameterItem.domainJoin.credentials.userName === null || configurationSetsParameterItem.domainJoin.credentials.userName === undefined) {
              return callback(new Error('parameters.roles.configurationSets.domainJoin.credentials.userName cannot be null.'));
            }
          }
        }
        if (configurationSetsParameterItem.hostName && configurationSetsParameterItem.hostName.length < 1) {
          return callback(new Error('parameters.roles.configurationSets.hostName is outside the valid range.'));
        }
        if (configurationSetsParameterItem.hostName && configurationSetsParameterItem.hostName.length > 64) {
          return callback(new Error('parameters.roles.configurationSets.hostName is outside the valid range.'));
        }
        if (configurationSetsParameterItem.sshSettings) {
          for (var loweredIndex3 = 0; loweredIndex3 < configurationSetsParameterItem.sshSettings.keyPairs.length; loweredIndex3 = loweredIndex3 + 1) {
            var keyPairsParameterItem = configurationSetsParameterItem.sshSettings.keyPairs[loweredIndex3];
            if (keyPairsParameterItem.fingerprint === null || keyPairsParameterItem.fingerprint === undefined) {
              return callback(new Error('parameters.roles.configurationSets.sshSettings.keyPairs.fingerprint cannot be null.'));
            }
            if (keyPairsParameterItem.path === null || keyPairsParameterItem.path === undefined) {
              return callback(new Error('parameters.roles.configurationSets.sshSettings.keyPairs.path cannot be null.'));
            }
          }
          for (var loweredIndex4 = 0; loweredIndex4 < configurationSetsParameterItem.sshSettings.publicKeys.length; loweredIndex4 = loweredIndex4 + 1) {
            var publicKeysParameterItem = configurationSetsParameterItem.sshSettings.publicKeys[loweredIndex4];
            if (publicKeysParameterItem.fingerprint === null || publicKeysParameterItem.fingerprint === undefined) {
              return callback(new Error('parameters.roles.configurationSets.sshSettings.publicKeys.fingerprint cannot be null.'));
            }
            if (publicKeysParameterItem.path === null || publicKeysParameterItem.path === undefined) {
              return callback(new Error('parameters.roles.configurationSets.sshSettings.publicKeys.path cannot be null.'));
            }
          }
        }
        for (var loweredIndex5 = 0; loweredIndex5 < configurationSetsParameterItem.storedCertificateSettings.length; loweredIndex5 = loweredIndex5 + 1) {
          var storedCertificateSettingsParameterItem = configurationSetsParameterItem.storedCertificateSettings[loweredIndex5];
          if (storedCertificateSettingsParameterItem.storeName === null || storedCertificateSettingsParameterItem.storeName === undefined) {
            return callback(new Error('parameters.roles.configurationSets.storedCertificateSettings.storeName cannot be null.'));
          }
          if (storedCertificateSettingsParameterItem.thumbprint === null || storedCertificateSettingsParameterItem.thumbprint === undefined) {
            return callback(new Error('parameters.roles.configurationSets.storedCertificateSettings.thumbprint cannot be null.'));
          }
        }
        if (configurationSetsParameterItem.userName && configurationSetsParameterItem.userName.length < 1) {
          return callback(new Error('parameters.roles.configurationSets.userName is outside the valid range.'));
        }
        if (configurationSetsParameterItem.userName && configurationSetsParameterItem.userName.length > 32) {
          return callback(new Error('parameters.roles.configurationSets.userName is outside the valid range.'));
        }
        if (configurationSetsParameterItem.userPassword && configurationSetsParameterItem.userPassword.length < 6 && (configurationSetsParameterItem.DisableSshPasswordAuthentication === false || configurationSetsParameterItem.userPassword.length !== 0)) {
          return callback(new Error('parameters.roles.configurationSets.userPassword is outside the valid range.'));
        }
        if (configurationSetsParameterItem.userPassword && configurationSetsParameterItem.userPassword.length > 72) {
          return callback(new Error('parameters.roles.configurationSets.userPassword is outside the valid range.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var deploymentElement = js2xml.createElement('Deployment', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, deploymentElement);
    
    var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(nameElement, parameters.name);
    js2xml.addChildElement(deploymentElement, nameElement);
    
    var deploymentSlotElement = js2xml.createElement('DeploymentSlot', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(deploymentSlotElement, parameters.deploymentSlot ? parameters.deploymentSlot.toString() : 'Staging');
    js2xml.addChildElement(deploymentElement, deploymentSlotElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
    js2xml.addChildElement(deploymentElement, labelElement);
    
    var roleListSequenceElement = js2xml.createElement('RoleList', 'http://schemas.microsoft.com/windowsazure');
    for (var loweredIndex6 = 0; loweredIndex6 < parameters.roles.length; loweredIndex6 = loweredIndex6 + 1) {
      var roleListItem = parameters.roles[loweredIndex6];
      var roleElement = js2xml.createElement('Role', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(roleListSequenceElement, roleElement);
      
      if (roleListItem.roleName) {
        var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(roleNameElement, roleListItem.roleName);
        js2xml.addChildElement(roleElement, roleNameElement);
      }
      
      if (roleListItem.oSVersion) {
        var oSVersionElement = js2xml.createElement('OSVersion', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(oSVersionElement, roleListItem.oSVersion);
        js2xml.addChildElement(roleElement, oSVersionElement);
      }
      
      if (roleListItem.roleType) {
        var roleTypeElement = js2xml.createElement('RoleType', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(roleTypeElement, roleListItem.roleType);
        js2xml.addChildElement(roleElement, roleTypeElement);
      }
      
      if (roleListItem.configurationSets) {
        var configurationSetsSequenceElement = js2xml.createElement('ConfigurationSets', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex7 = 0; loweredIndex7 < roleListItem.configurationSets.length; loweredIndex7 = loweredIndex7 + 1) {
          var configurationSetsItem = roleListItem.configurationSets[loweredIndex7];
          var configurationSetElement = js2xml.createElement('ConfigurationSet', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(configurationSetsSequenceElement, configurationSetElement);
          
          if (configurationSetsItem.configurationSetType) {
            var configurationSetTypeElement = js2xml.createElement('ConfigurationSetType', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(configurationSetTypeElement, configurationSetsItem.configurationSetType);
            js2xml.addChildElement(configurationSetElement, configurationSetTypeElement);
          }
          
          if (configurationSetsItem.inputEndpoints) {
            var inputEndpointsSequenceElement = js2xml.createElement('InputEndpoints', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex8 = 0; loweredIndex8 < configurationSetsItem.inputEndpoints.length; loweredIndex8 = loweredIndex8 + 1) {
              var inputEndpointsItem = configurationSetsItem.inputEndpoints[loweredIndex8];
              var inputEndpointElement = js2xml.createElement('InputEndpoint', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(inputEndpointsSequenceElement, inputEndpointElement);
              
              if (inputEndpointsItem.loadBalancedEndpointSetName) {
                var loadBalancedEndpointSetNameElement = js2xml.createElement('LoadBalancedEndpointSetName', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(loadBalancedEndpointSetNameElement, inputEndpointsItem.loadBalancedEndpointSetName);
                js2xml.addChildElement(inputEndpointElement, loadBalancedEndpointSetNameElement);
              }
              
              if (inputEndpointsItem.localPort) {
                var localPortElement = js2xml.createElement('LocalPort', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(localPortElement, inputEndpointsItem.localPort.toString());
                js2xml.addChildElement(inputEndpointElement, localPortElement);
              }
              
              if (inputEndpointsItem.name) {
                var nameElement2 = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(nameElement2, inputEndpointsItem.name);
                js2xml.addChildElement(inputEndpointElement, nameElement2);
              }
              
              if (inputEndpointsItem.port) {
                var portElement = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(portElement, inputEndpointsItem.port.toString());
                js2xml.addChildElement(inputEndpointElement, portElement);
              }
              
              if (inputEndpointsItem.loadBalancerProbe) {
                var loadBalancerProbeElement = js2xml.createElement('LoadBalancerProbe', 'http://schemas.microsoft.com/windowsazure');
                js2xml.addChildElement(inputEndpointElement, loadBalancerProbeElement);
                
                if (inputEndpointsItem.loadBalancerProbe.path) {
                  var pathElement = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(pathElement, inputEndpointsItem.loadBalancerProbe.path);
                  js2xml.addChildElement(loadBalancerProbeElement, pathElement);
                }
                
                var portElement2 = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(portElement2, inputEndpointsItem.loadBalancerProbe.port.toString());
                js2xml.addChildElement(loadBalancerProbeElement, portElement2);
                
                var protocolElement = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(protocolElement, inputEndpointsItem.loadBalancerProbe.protocol ? inputEndpointsItem.loadBalancerProbe.protocol.toString() : 'Tcp');
                js2xml.addChildElement(loadBalancerProbeElement, protocolElement);
                
                if (inputEndpointsItem.loadBalancerProbe.intervalInSeconds) {
                  var intervalInSecondsElement = js2xml.createElement('IntervalInSeconds', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(intervalInSecondsElement, inputEndpointsItem.loadBalancerProbe.intervalInSeconds.toString());
                  js2xml.addChildElement(loadBalancerProbeElement, intervalInSecondsElement);
                }
                
                if (inputEndpointsItem.loadBalancerProbe.timeoutInSeconds) {
                  var timeoutInSecondsElement = js2xml.createElement('TimeoutInSeconds', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(timeoutInSecondsElement, inputEndpointsItem.loadBalancerProbe.timeoutInSeconds.toString());
                  js2xml.addChildElement(loadBalancerProbeElement, timeoutInSecondsElement);
                }
              }
              
              if (inputEndpointsItem.protocol) {
                var protocolElement2 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(protocolElement2, inputEndpointsItem.protocol);
                js2xml.addChildElement(inputEndpointElement, protocolElement2);
              }
              
              if (inputEndpointsItem.virtualIPAddress) {
                var vipElement = js2xml.createElement('Vip', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(vipElement, inputEndpointsItem.virtualIPAddress);
                js2xml.addChildElement(inputEndpointElement, vipElement);
              }
              
              if (inputEndpointsItem.enableDirectServerReturn) {
                var enableDirectServerReturnElement = js2xml.createElement('EnableDirectServerReturn', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(enableDirectServerReturnElement, inputEndpointsItem.enableDirectServerReturn.toString());
                js2xml.addChildElement(inputEndpointElement, enableDirectServerReturnElement);
              }
              
              if (inputEndpointsItem.accessControlList) {
                var accessControlListElement = js2xml.createElement('AccessControlList', 'http://schemas.microsoft.com/windowsazure');
                js2xml.addChildElement(inputEndpointElement, accessControlListElement);
                
                if (inputEndpointsItem.accessControlList.rules) {
                  var rulesSequenceElement = js2xml.createElement('Rules', 'http://schemas.microsoft.com/windowsazure');
                  for (var loweredIndex9 = 0; loweredIndex9 < inputEndpointsItem.accessControlList.rules.length; loweredIndex9 = loweredIndex9 + 1) {
                    var rulesItem = inputEndpointsItem.accessControlList.rules[loweredIndex9];
                    var ruleElement = js2xml.createElement('Rule', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.addChildElement(rulesSequenceElement, ruleElement);
                    
                    if (rulesItem.order) {
                      var orderElement = js2xml.createElement('Order', 'http://schemas.microsoft.com/windowsazure');
                      js2xml.setElementValue(orderElement, rulesItem.order.toString());
                      js2xml.addChildElement(ruleElement, orderElement);
                    }
                    
                    if (rulesItem.action) {
                      var actionElement = js2xml.createElement('Action', 'http://schemas.microsoft.com/windowsazure');
                      js2xml.setElementValue(actionElement, rulesItem.action);
                      js2xml.addChildElement(ruleElement, actionElement);
                    }
                    
                    if (rulesItem.remoteSubnet) {
                      var remoteSubnetElement = js2xml.createElement('RemoteSubnet', 'http://schemas.microsoft.com/windowsazure');
                      js2xml.setElementValue(remoteSubnetElement, rulesItem.remoteSubnet);
                      js2xml.addChildElement(ruleElement, remoteSubnetElement);
                    }
                    
                    if (rulesItem.description) {
                      var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
                      js2xml.setElementValue(descriptionElement, rulesItem.description);
                      js2xml.addChildElement(ruleElement, descriptionElement);
                    }
                  }
                  js2xml.addChildElement(accessControlListElement, rulesSequenceElement);
                }
              }
            }
            js2xml.addChildElement(configurationSetElement, inputEndpointsSequenceElement);
          }
          
          if (configurationSetsItem.subnetNames) {
            var subnetNamesSequenceElement = js2xml.createElement('SubnetNames', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex10 = 0; loweredIndex10 < configurationSetsItem.subnetNames.length; loweredIndex10 = loweredIndex10 + 1) {
              var subnetNamesItem = configurationSetsItem.subnetNames[loweredIndex10];
              var subnetNamesItemElement = js2xml.createElement('SubnetName', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(subnetNamesItemElement, subnetNamesItem);
              js2xml.addChildElement(subnetNamesSequenceElement, subnetNamesItemElement);
            }
            js2xml.addChildElement(configurationSetElement, subnetNamesSequenceElement);
          }
          
          if (configurationSetsItem.computerName) {
            var computerNameElement = js2xml.createElement('ComputerName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(computerNameElement, configurationSetsItem.computerName);
            js2xml.addChildElement(configurationSetElement, computerNameElement);
          }
          
          if (configurationSetsItem.adminPassword) {
            var adminPasswordElement = js2xml.createElement('AdminPassword', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(adminPasswordElement, configurationSetsItem.adminPassword);
            js2xml.addChildElement(configurationSetElement, adminPasswordElement);
          }
          
          if (configurationSetsItem.resetPasswordOnFirstLogon) {
            var resetPasswordOnFirstLogonElement = js2xml.createElement('ResetPasswordOnFirstLogon', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(resetPasswordOnFirstLogonElement, configurationSetsItem.resetPasswordOnFirstLogon.toString());
            js2xml.addChildElement(configurationSetElement, resetPasswordOnFirstLogonElement);
          }
          
          if (configurationSetsItem.enableAutomaticUpdates) {
            var enableAutomaticUpdatesElement = js2xml.createElement('EnableAutomaticUpdates', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(enableAutomaticUpdatesElement, configurationSetsItem.enableAutomaticUpdates.toString());
            js2xml.addChildElement(configurationSetElement, enableAutomaticUpdatesElement);
          }
          
          if (configurationSetsItem.timeZone) {
            var timeZoneElement = js2xml.createElement('TimeZone', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(timeZoneElement, configurationSetsItem.timeZone);
            js2xml.addChildElement(configurationSetElement, timeZoneElement);
          }
          
          if (configurationSetsItem.domainJoin) {
            var domainJoinElement = js2xml.createElement('DomainJoin', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(configurationSetElement, domainJoinElement);
            
            if (configurationSetsItem.domainJoin.credentials) {
              var credentialsElement = js2xml.createElement('Credentials', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(domainJoinElement, credentialsElement);
              
              if (configurationSetsItem.domainJoin.credentials.domain) {
                var domainElement = js2xml.createElement('Domain', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(domainElement, configurationSetsItem.domainJoin.credentials.domain);
                js2xml.addChildElement(credentialsElement, domainElement);
              }
              
              var usernameElement = js2xml.createElement('Username', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(usernameElement, configurationSetsItem.domainJoin.credentials.userName);
              js2xml.addChildElement(credentialsElement, usernameElement);
              
              var passwordElement = js2xml.createElement('Password', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(passwordElement, configurationSetsItem.domainJoin.credentials.password);
              js2xml.addChildElement(credentialsElement, passwordElement);
            }
            
            if (configurationSetsItem.domainJoin.domainToJoin) {
              var joinDomainElement = js2xml.createElement('JoinDomain', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(joinDomainElement, configurationSetsItem.domainJoin.domainToJoin);
              js2xml.addChildElement(domainJoinElement, joinDomainElement);
            }
            
            if (configurationSetsItem.domainJoin.ldapMachineObjectOU) {
              var machineObjectOUElement = js2xml.createElement('MachineObjectOU', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(machineObjectOUElement, configurationSetsItem.domainJoin.ldapMachineObjectOU);
              js2xml.addChildElement(domainJoinElement, machineObjectOUElement);
            }
            
            if (configurationSetsItem.domainJoin.provisioning) {
              var provisioningElement = js2xml.createElement('Provisioning', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(domainJoinElement, provisioningElement);
              
              if (configurationSetsItem.domainJoin.provisioning.accountData) {
                var accountDataElement = js2xml.createElement('AccountData', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(accountDataElement, configurationSetsItem.domainJoin.provisioning.accountData);
                js2xml.addChildElement(provisioningElement, accountDataElement);
              }
            }
          }
          
          if (configurationSetsItem.storedCertificateSettings) {
            var storedCertificateSettingsSequenceElement = js2xml.createElement('StoredCertificateSettings', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex11 = 0; loweredIndex11 < configurationSetsItem.storedCertificateSettings.length; loweredIndex11 = loweredIndex11 + 1) {
              var storedCertificateSettingsItem = configurationSetsItem.storedCertificateSettings[loweredIndex11];
              var certificateSettingElement = js2xml.createElement('CertificateSetting', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(storedCertificateSettingsSequenceElement, certificateSettingElement);
              
              var storeLocationElement = js2xml.createElement('StoreLocation', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(storeLocationElement, 'LocalMachine');
              js2xml.addChildElement(certificateSettingElement, storeLocationElement);
              
              var storeNameElement = js2xml.createElement('StoreName', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(storeNameElement, storedCertificateSettingsItem.storeName);
              js2xml.addChildElement(certificateSettingElement, storeNameElement);
              
              var thumbprintElement = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(thumbprintElement, storedCertificateSettingsItem.thumbprint);
              js2xml.addChildElement(certificateSettingElement, thumbprintElement);
            }
            js2xml.addChildElement(configurationSetElement, storedCertificateSettingsSequenceElement);
          }
          
          if (configurationSetsItem.windowsRemoteManagement) {
            var winRMElement = js2xml.createElement('WinRM', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(configurationSetElement, winRMElement);
            
            if (configurationSetsItem.windowsRemoteManagement.listeners) {
              var listenersSequenceElement = js2xml.createElement('Listeners', 'http://schemas.microsoft.com/windowsazure');
              for (var loweredIndex12 = 0; loweredIndex12 < configurationSetsItem.windowsRemoteManagement.listeners.length; loweredIndex12 = loweredIndex12 + 1) {
                var listenersItem = configurationSetsItem.windowsRemoteManagement.listeners[loweredIndex12];
                var listenerElement = js2xml.createElement('Listener', 'http://schemas.microsoft.com/windowsazure');
                js2xml.addChildElement(listenersSequenceElement, listenerElement);
                
                var protocolElement3 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(protocolElement3, listenersItem.listenerType ? listenersItem.listenerType.toString() : 'Http');
                js2xml.addChildElement(listenerElement, protocolElement3);
                
                if (listenersItem.certificateThumbprint) {
                  var certificateThumbprintElement = js2xml.createElement('CertificateThumbprint', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(certificateThumbprintElement, listenersItem.certificateThumbprint);
                  js2xml.addChildElement(listenerElement, certificateThumbprintElement);
                }
              }
              js2xml.addChildElement(winRMElement, listenersSequenceElement);
            }
          }
          
          if (configurationSetsItem.adminUserName) {
            var adminUsernameElement = js2xml.createElement('AdminUsername', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(adminUsernameElement, configurationSetsItem.adminUserName);
            js2xml.addChildElement(configurationSetElement, adminUsernameElement);
          }
          
          if (configurationSetsItem.hostName) {
            var hostNameElement = js2xml.createElement('HostName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(hostNameElement, configurationSetsItem.hostName);
            js2xml.addChildElement(configurationSetElement, hostNameElement);
          }
          
          if (configurationSetsItem.userName) {
            var userNameElement = js2xml.createElement('UserName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(userNameElement, configurationSetsItem.userName);
            js2xml.addChildElement(configurationSetElement, userNameElement);
          }
          
          if (configurationSetsItem.userPassword) {
            var userPasswordElement = js2xml.createElement('UserPassword', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(userPasswordElement, configurationSetsItem.userPassword);
            js2xml.addChildElement(configurationSetElement, userPasswordElement);
          }
          
          if (configurationSetsItem.disableSshPasswordAuthentication) {
            var disableSshPasswordAuthenticationElement = js2xml.createElement('DisableSshPasswordAuthentication', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(disableSshPasswordAuthenticationElement, configurationSetsItem.disableSshPasswordAuthentication.toString());
            js2xml.addChildElement(configurationSetElement, disableSshPasswordAuthenticationElement);
          }
          
          if (configurationSetsItem.sshSettings) {
            var sSHElement = js2xml.createElement('SSH', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(configurationSetElement, sSHElement);
            
            if (configurationSetsItem.sshSettings.publicKeys) {
              var publicKeysSequenceElement = js2xml.createElement('PublicKeys', 'http://schemas.microsoft.com/windowsazure');
              for (var loweredIndex13 = 0; loweredIndex13 < configurationSetsItem.sshSettings.publicKeys.length; loweredIndex13 = loweredIndex13 + 1) {
                var publicKeysItem = configurationSetsItem.sshSettings.publicKeys[loweredIndex13];
                var publicKeyElement = js2xml.createElement('PublicKey', 'http://schemas.microsoft.com/windowsazure');
                js2xml.addChildElement(publicKeysSequenceElement, publicKeyElement);
                
                var fingerPrintElement = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(fingerPrintElement, publicKeysItem.fingerprint);
                js2xml.addChildElement(publicKeyElement, fingerPrintElement);
                
                var pathElement2 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(pathElement2, publicKeysItem.path);
                js2xml.addChildElement(publicKeyElement, pathElement2);
              }
              js2xml.addChildElement(sSHElement, publicKeysSequenceElement);
            }
            
            if (configurationSetsItem.sshSettings.keyPairs) {
              var keyPairsSequenceElement = js2xml.createElement('KeyPairs', 'http://schemas.microsoft.com/windowsazure');
              for (var loweredIndex14 = 0; loweredIndex14 < configurationSetsItem.sshSettings.keyPairs.length; loweredIndex14 = loweredIndex14 + 1) {
                var keyPairsItem = configurationSetsItem.sshSettings.keyPairs[loweredIndex14];
                var keyPairElement = js2xml.createElement('KeyPair', 'http://schemas.microsoft.com/windowsazure');
                js2xml.addChildElement(keyPairsSequenceElement, keyPairElement);
                
                var fingerPrintElement2 = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(fingerPrintElement2, keyPairsItem.fingerprint);
                js2xml.addChildElement(keyPairElement, fingerPrintElement2);
                
                var pathElement3 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(pathElement3, keyPairsItem.path);
                js2xml.addChildElement(keyPairElement, pathElement3);
              }
              js2xml.addChildElement(sSHElement, keyPairsSequenceElement);
            }
          }
        }
        js2xml.addChildElement(roleElement, configurationSetsSequenceElement);
      }
      
      if (roleListItem.availabilitySetName) {
        var availabilitySetNameElement = js2xml.createElement('AvailabilitySetName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(availabilitySetNameElement, roleListItem.availabilitySetName);
        js2xml.addChildElement(roleElement, availabilitySetNameElement);
      }
      
      if (roleListItem.dataVirtualHardDisks) {
        var dataVirtualHardDisksSequenceElement = js2xml.createElement('DataVirtualHardDisks', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex15 = 0; loweredIndex15 < roleListItem.dataVirtualHardDisks.length; loweredIndex15 = loweredIndex15 + 1) {
          var dataVirtualHardDisksItem = roleListItem.dataVirtualHardDisks[loweredIndex15];
          var dataVirtualHardDiskElement = js2xml.createElement('DataVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(dataVirtualHardDisksSequenceElement, dataVirtualHardDiskElement);
          
          if (dataVirtualHardDisksItem.hostCaching) {
            var hostCachingElement = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(hostCachingElement, dataVirtualHardDisksItem.hostCaching ? dataVirtualHardDisksItem.hostCaching.toString() : 'None');
            js2xml.addChildElement(dataVirtualHardDiskElement, hostCachingElement);
          }
          
          if (dataVirtualHardDisksItem.diskLabel) {
            var diskLabelElement = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(diskLabelElement, dataVirtualHardDisksItem.diskLabel);
            js2xml.addChildElement(dataVirtualHardDiskElement, diskLabelElement);
          }
          
          if (dataVirtualHardDisksItem.diskName) {
            var diskNameElement = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(diskNameElement, dataVirtualHardDisksItem.diskName);
            js2xml.addChildElement(dataVirtualHardDiskElement, diskNameElement);
          }
          
          if (dataVirtualHardDisksItem.logicalUnitNumber) {
            var lunElement = js2xml.createElement('Lun', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(lunElement, dataVirtualHardDisksItem.logicalUnitNumber.toString());
            js2xml.addChildElement(dataVirtualHardDiskElement, lunElement);
          }
          
          var logicalDiskSizeInGBElement = js2xml.createElement('LogicalDiskSizeInGB', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(logicalDiskSizeInGBElement, dataVirtualHardDisksItem.logicalDiskSizeInGB.toString());
          js2xml.addChildElement(dataVirtualHardDiskElement, logicalDiskSizeInGBElement);
          
          if (dataVirtualHardDisksItem.mediaLink) {
            var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(mediaLinkElement, dataVirtualHardDisksItem.mediaLink);
            js2xml.addChildElement(dataVirtualHardDiskElement, mediaLinkElement);
          }
        }
        js2xml.addChildElement(roleElement, dataVirtualHardDisksSequenceElement);
      }
      
      if (roleListItem.label) {
        var labelElement2 = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(labelElement2, roleListItem.label);
        js2xml.addChildElement(roleElement, labelElement2);
      }
      
      if (roleListItem.oSVirtualHardDisk) {
        var oSVirtualHardDiskElement = js2xml.createElement('OSVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(roleElement, oSVirtualHardDiskElement);
        
        if (roleListItem.oSVirtualHardDisk.hostCaching) {
          var hostCachingElement2 = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(hostCachingElement2, roleListItem.oSVirtualHardDisk.hostCaching ? roleListItem.oSVirtualHardDisk.hostCaching.toString() : 'None');
          js2xml.addChildElement(oSVirtualHardDiskElement, hostCachingElement2);
        }
        
        if (roleListItem.oSVirtualHardDisk.diskLabel) {
          var diskLabelElement2 = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(diskLabelElement2, roleListItem.oSVirtualHardDisk.diskLabel);
          js2xml.addChildElement(oSVirtualHardDiskElement, diskLabelElement2);
        }
        
        if (roleListItem.oSVirtualHardDisk.diskName) {
          var diskNameElement2 = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(diskNameElement2, roleListItem.oSVirtualHardDisk.diskName);
          js2xml.addChildElement(oSVirtualHardDiskElement, diskNameElement2);
        }
        
        if (roleListItem.oSVirtualHardDisk.mediaLink) {
          var mediaLinkElement2 = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(mediaLinkElement2, roleListItem.oSVirtualHardDisk.mediaLink);
          js2xml.addChildElement(oSVirtualHardDiskElement, mediaLinkElement2);
        }
        
        if (roleListItem.oSVirtualHardDisk.sourceImageName) {
          var sourceImageNameElement = js2xml.createElement('SourceImageName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(sourceImageNameElement, roleListItem.oSVirtualHardDisk.sourceImageName);
          js2xml.addChildElement(oSVirtualHardDiskElement, sourceImageNameElement);
        }
        
        if (roleListItem.oSVirtualHardDisk.operatingSystem) {
          var osElement = js2xml.createElement('OS', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(osElement, roleListItem.oSVirtualHardDisk.operatingSystem);
          js2xml.addChildElement(oSVirtualHardDiskElement, osElement);
        }
      }
      
      if (roleListItem.roleSize) {
        var roleSizeElement = js2xml.createElement('RoleSize', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(roleSizeElement, roleListItem.roleSize ? roleListItem.roleSize.toString() : 'Small');
        js2xml.addChildElement(roleElement, roleSizeElement);
      }
      
      if (roleListItem.defaultWinRmCertificateThumbprint) {
        var defaultWinRmCertificateThumbprintElement = js2xml.createElement('DefaultWinRmCertificateThumbprint', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(defaultWinRmCertificateThumbprintElement, roleListItem.defaultWinRmCertificateThumbprint);
        js2xml.addChildElement(roleElement, defaultWinRmCertificateThumbprintElement);
      }
    }
    js2xml.addChildElement(deploymentElement, roleListSequenceElement);
    
    if (parameters.virtualNetworkName) {
      var virtualNetworkNameElement = js2xml.createElement('VirtualNetworkName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(virtualNetworkNameElement, parameters.virtualNetworkName);
      js2xml.addChildElement(deploymentElement, virtualNetworkNameElement);
    }
    
    if (parameters.dnsSettings) {
      var dnsElement = js2xml.createElement('Dns', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(deploymentElement, dnsElement);
      
      if (parameters.dnsSettings.dnsServers) {
        var dnsServersSequenceElement = js2xml.createElement('DnsServers', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex16 = 0; loweredIndex16 < parameters.dnsSettings.dnsServers.length; loweredIndex16 = loweredIndex16 + 1) {
          var dnsServersItem = parameters.dnsSettings.dnsServers[loweredIndex16];
          var dnsServerElement = js2xml.createElement('DnsServer', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(dnsServersSequenceElement, dnsServerElement);
          
          if (dnsServersItem.name) {
            var nameElement3 = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(nameElement3, dnsServersItem.name);
            js2xml.addChildElement(dnsServerElement, nameElement3);
          }
          
          if (dnsServersItem.address) {
            var addressElement = js2xml.createElement('Address', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(addressElement, dnsServersItem.address);
            js2xml.addChildElement(dnsServerElement, addressElement);
          }
        }
        js2xml.addChildElement(dnsElement, dnsServersSequenceElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete Role operation deletes the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * delete.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginDeleting = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles/' + virtualMachineName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Restart role operation restarts the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * restart.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginRestarting = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roleinstances/' + virtualMachineName + '/Operations';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    requestContent = '<RestartRoleOperation xmlns="http://schemas.microsoft.com/windowsazure"><OperationType>RestartRoleOperation</OperationType></RestartRoleOperation>';
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Shutdown Role operation shuts down the specified virtual machine.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
   * for more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * shutdown.
   *
   * @param {VirtualMachineShutdownParameters} parameters - The parameters for
   * the shutdown vm operation
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginShutdown = function(serviceName, deploymentName, virtualMachineName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roleinstances/' + virtualMachineName + '/Operations';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var shutdownRoleOperationElement = js2xml.createElement('ShutdownRoleOperation', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, shutdownRoleOperationElement);
    
    var operationTypeElement = js2xml.createElement('OperationType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(operationTypeElement, 'ShutdownRoleOperation');
    js2xml.addChildElement(shutdownRoleOperationElement, operationTypeElement);
    
    var postShutdownActionElement = js2xml.createElement('PostShutdownAction', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(postShutdownActionElement, parameters.postShutdownAction ? parameters.postShutdownAction.toString() : 'Stopped');
    js2xml.addChildElement(shutdownRoleOperationElement, postShutdownActionElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Shutdown Roles operation stops the specified set of virtual machines.
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineShutdownRolesParameters} parameters - The set of
   * virtual machine roles to shutdown and their post shutdown state.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginShuttingDownRoles = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/Roles/Operations';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var shutdownRolesOperationElement = js2xml.createElement('ShutdownRolesOperation', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, shutdownRolesOperationElement);
    
    var operationTypeElement = js2xml.createElement('OperationType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(operationTypeElement, 'ShutdownRolesOperation');
    js2xml.addChildElement(shutdownRolesOperationElement, operationTypeElement);
    
    if (parameters.roles) {
      var rolesSequenceElement = js2xml.createElement('Roles', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.roles.length; loweredIndex1 = loweredIndex1 + 1) {
        var rolesItem = parameters.roles[loweredIndex1];
        var rolesItemElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(rolesItemElement, rolesItem);
        js2xml.addChildElement(rolesSequenceElement, rolesItemElement);
      }
      js2xml.addChildElement(shutdownRolesOperationElement, rolesSequenceElement);
    }
    
    if (parameters.postShutdownAction) {
      var postShutdownActionElement = js2xml.createElement('PostShutdownAction', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(postShutdownActionElement, parameters.postShutdownAction ? parameters.postShutdownAction.toString() : 'Stopped');
      js2xml.addChildElement(shutdownRolesOperationElement, postShutdownActionElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Start Role operation starts the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * start.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginStarting = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roleinstances/' + virtualMachineName + '/Operations';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    requestContent = '<StartRoleOperation xmlns="http://schemas.microsoft.com/windowsazure"><OperationType>StartRoleOperation</OperationType></StartRoleOperation>';
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Start Roles operation starts the specified set of virtual machines.
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineStartRolesParameters} parameters - The set of
   * virtual machine roles to start.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginStartingRoles = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/Roles/Operations';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var startRolesOperationElement = js2xml.createElement('StartRolesOperation', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, startRolesOperationElement);
    
    var operationTypeElement = js2xml.createElement('OperationType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(operationTypeElement, 'StartRolesOperation');
    js2xml.addChildElement(startRolesOperationElement, operationTypeElement);
    
    if (parameters.roles) {
      var rolesSequenceElement = js2xml.createElement('Roles', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.roles.length; loweredIndex1 = loweredIndex1 + 1) {
        var rolesItem = parameters.roles[loweredIndex1];
        var rolesItemElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(rolesItemElement, rolesItem);
        js2xml.addChildElement(rolesSequenceElement, rolesItemElement);
      }
      js2xml.addChildElement(startRolesOperationElement, rolesSequenceElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Update Role operation adds a virtual machine to an existing
   * deployment.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of your virtual machine.
   *
   * @param {VirtualMachineUpdateParameters} parameters - Parameters supplied
   * to the Update Virtual Machine operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginUpdating = function(serviceName, deploymentName, virtualMachineName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.configurationSets.length; loweredIndex1 = loweredIndex1 + 1) {
      var configurationSetsParameterItem = parameters.configurationSets[loweredIndex1];
      if (configurationSetsParameterItem.domainJoin) {
        if (configurationSetsParameterItem.domainJoin.credentials) {
          if (configurationSetsParameterItem.domainJoin.credentials.password === null || configurationSetsParameterItem.domainJoin.credentials.password === undefined) {
            return callback(new Error('parameters.configurationSets.domainJoin.credentials.password cannot be null.'));
          }
          if (configurationSetsParameterItem.domainJoin.credentials.userName === null || configurationSetsParameterItem.domainJoin.credentials.userName === undefined) {
            return callback(new Error('parameters.configurationSets.domainJoin.credentials.userName cannot be null.'));
          }
        }
      }
      if (configurationSetsParameterItem.hostName && configurationSetsParameterItem.hostName.length < 1) {
        return callback(new Error('parameters.configurationSets.hostName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.hostName && configurationSetsParameterItem.hostName.length > 64) {
        return callback(new Error('parameters.configurationSets.hostName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.sshSettings) {
        for (var loweredIndex2 = 0; loweredIndex2 < configurationSetsParameterItem.sshSettings.keyPairs.length; loweredIndex2 = loweredIndex2 + 1) {
          var keyPairsParameterItem = configurationSetsParameterItem.sshSettings.keyPairs[loweredIndex2];
          if (keyPairsParameterItem.fingerprint === null || keyPairsParameterItem.fingerprint === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.keyPairs.fingerprint cannot be null.'));
          }
          if (keyPairsParameterItem.path === null || keyPairsParameterItem.path === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.keyPairs.path cannot be null.'));
          }
        }
        for (var loweredIndex3 = 0; loweredIndex3 < configurationSetsParameterItem.sshSettings.publicKeys.length; loweredIndex3 = loweredIndex3 + 1) {
          var publicKeysParameterItem = configurationSetsParameterItem.sshSettings.publicKeys[loweredIndex3];
          if (publicKeysParameterItem.fingerprint === null || publicKeysParameterItem.fingerprint === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.publicKeys.fingerprint cannot be null.'));
          }
          if (publicKeysParameterItem.path === null || publicKeysParameterItem.path === undefined) {
            return callback(new Error('parameters.configurationSets.sshSettings.publicKeys.path cannot be null.'));
          }
        }
      }
      for (var loweredIndex4 = 0; loweredIndex4 < configurationSetsParameterItem.storedCertificateSettings.length; loweredIndex4 = loweredIndex4 + 1) {
        var storedCertificateSettingsParameterItem = configurationSetsParameterItem.storedCertificateSettings[loweredIndex4];
        if (storedCertificateSettingsParameterItem.storeName === null || storedCertificateSettingsParameterItem.storeName === undefined) {
          return callback(new Error('parameters.configurationSets.storedCertificateSettings.storeName cannot be null.'));
        }
        if (storedCertificateSettingsParameterItem.thumbprint === null || storedCertificateSettingsParameterItem.thumbprint === undefined) {
          return callback(new Error('parameters.configurationSets.storedCertificateSettings.thumbprint cannot be null.'));
        }
      }
      if (configurationSetsParameterItem.userName && configurationSetsParameterItem.userName.length < 1) {
        return callback(new Error('parameters.configurationSets.userName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.userName && configurationSetsParameterItem.userName.length > 32) {
        return callback(new Error('parameters.configurationSets.userName is outside the valid range.'));
      }
      if (configurationSetsParameterItem.userPassword && configurationSetsParameterItem.userPassword.length < 6 && (configurationSetsParameterItem.DisableSshPasswordAuthentication === false || configurationSetsParameterItem.userPassword.length !== 0)) {
        return callback(new Error('parameters.configurationSets.userPassword is outside the valid range.'));
      }
      if (configurationSetsParameterItem.userPassword && configurationSetsParameterItem.userPassword.length > 72) {
        return callback(new Error('parameters.configurationSets.userPassword is outside the valid range.'));
      }
    }
    if (parameters.oSVirtualHardDisk === null || parameters.oSVirtualHardDisk === undefined) {
      return callback(new Error('parameters.oSVirtualHardDisk cannot be null.'));
    }
    if (parameters.roleName === null || parameters.roleName === undefined) {
      return callback(new Error('parameters.roleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles/' + virtualMachineName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var persistentVMRoleElement = js2xml.createElement('PersistentVMRole', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, persistentVMRoleElement);
    
    var roleNameElement = js2xml.createElement('RoleName', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(roleNameElement, parameters.roleName);
    js2xml.addChildElement(persistentVMRoleElement, roleNameElement);
    
    var roleTypeElement = js2xml.createElement('RoleType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(roleTypeElement, 'PersistentVMRole');
    js2xml.addChildElement(persistentVMRoleElement, roleTypeElement);
    
    if (parameters.configurationSets) {
      var configurationSetsSequenceElement = js2xml.createElement('ConfigurationSets', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex5 = 0; loweredIndex5 < parameters.configurationSets.length; loweredIndex5 = loweredIndex5 + 1) {
        var configurationSetsItem = parameters.configurationSets[loweredIndex5];
        var configurationSetElement = js2xml.createElement('ConfigurationSet', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(configurationSetsSequenceElement, configurationSetElement);
        
        if (configurationSetsItem.configurationSetType) {
          var configurationSetTypeElement = js2xml.createElement('ConfigurationSetType', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(configurationSetTypeElement, configurationSetsItem.configurationSetType);
          js2xml.addChildElement(configurationSetElement, configurationSetTypeElement);
        }
        
        if (configurationSetsItem.inputEndpoints) {
          var inputEndpointsSequenceElement = js2xml.createElement('InputEndpoints', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex6 = 0; loweredIndex6 < configurationSetsItem.inputEndpoints.length; loweredIndex6 = loweredIndex6 + 1) {
            var inputEndpointsItem = configurationSetsItem.inputEndpoints[loweredIndex6];
            var inputEndpointElement = js2xml.createElement('InputEndpoint', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(inputEndpointsSequenceElement, inputEndpointElement);
            
            if (inputEndpointsItem.loadBalancedEndpointSetName) {
              var loadBalancedEndpointSetNameElement = js2xml.createElement('LoadBalancedEndpointSetName', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(loadBalancedEndpointSetNameElement, inputEndpointsItem.loadBalancedEndpointSetName);
              js2xml.addChildElement(inputEndpointElement, loadBalancedEndpointSetNameElement);
            }
            
            if (inputEndpointsItem.localPort) {
              var localPortElement = js2xml.createElement('LocalPort', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(localPortElement, inputEndpointsItem.localPort.toString());
              js2xml.addChildElement(inputEndpointElement, localPortElement);
            }
            
            if (inputEndpointsItem.name) {
              var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(nameElement, inputEndpointsItem.name);
              js2xml.addChildElement(inputEndpointElement, nameElement);
            }
            
            if (inputEndpointsItem.port) {
              var portElement = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(portElement, inputEndpointsItem.port.toString());
              js2xml.addChildElement(inputEndpointElement, portElement);
            }
            
            if (inputEndpointsItem.loadBalancerProbe) {
              var loadBalancerProbeElement = js2xml.createElement('LoadBalancerProbe', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(inputEndpointElement, loadBalancerProbeElement);
              
              if (inputEndpointsItem.loadBalancerProbe.path) {
                var pathElement = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(pathElement, inputEndpointsItem.loadBalancerProbe.path);
                js2xml.addChildElement(loadBalancerProbeElement, pathElement);
              }
              
              var portElement2 = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(portElement2, inputEndpointsItem.loadBalancerProbe.port.toString());
              js2xml.addChildElement(loadBalancerProbeElement, portElement2);
              
              var protocolElement = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(protocolElement, inputEndpointsItem.loadBalancerProbe.protocol ? inputEndpointsItem.loadBalancerProbe.protocol.toString() : 'Tcp');
              js2xml.addChildElement(loadBalancerProbeElement, protocolElement);
              
              if (inputEndpointsItem.loadBalancerProbe.intervalInSeconds) {
                var intervalInSecondsElement = js2xml.createElement('IntervalInSeconds', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(intervalInSecondsElement, inputEndpointsItem.loadBalancerProbe.intervalInSeconds.toString());
                js2xml.addChildElement(loadBalancerProbeElement, intervalInSecondsElement);
              }
              
              if (inputEndpointsItem.loadBalancerProbe.timeoutInSeconds) {
                var timeoutInSecondsElement = js2xml.createElement('TimeoutInSeconds', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(timeoutInSecondsElement, inputEndpointsItem.loadBalancerProbe.timeoutInSeconds.toString());
                js2xml.addChildElement(loadBalancerProbeElement, timeoutInSecondsElement);
              }
            }
            
            if (inputEndpointsItem.protocol) {
              var protocolElement2 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(protocolElement2, inputEndpointsItem.protocol);
              js2xml.addChildElement(inputEndpointElement, protocolElement2);
            }
            
            if (inputEndpointsItem.virtualIPAddress) {
              var vipElement = js2xml.createElement('Vip', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(vipElement, inputEndpointsItem.virtualIPAddress);
              js2xml.addChildElement(inputEndpointElement, vipElement);
            }
            
            if (inputEndpointsItem.enableDirectServerReturn) {
              var enableDirectServerReturnElement = js2xml.createElement('EnableDirectServerReturn', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(enableDirectServerReturnElement, inputEndpointsItem.enableDirectServerReturn.toString());
              js2xml.addChildElement(inputEndpointElement, enableDirectServerReturnElement);
            }
            
            if (inputEndpointsItem.accessControlList) {
              var accessControlListElement = js2xml.createElement('AccessControlList', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(inputEndpointElement, accessControlListElement);
              
              if (inputEndpointsItem.accessControlList.rules) {
                var rulesSequenceElement = js2xml.createElement('Rules', 'http://schemas.microsoft.com/windowsazure');
                for (var loweredIndex7 = 0; loweredIndex7 < inputEndpointsItem.accessControlList.rules.length; loweredIndex7 = loweredIndex7 + 1) {
                  var rulesItem = inputEndpointsItem.accessControlList.rules[loweredIndex7];
                  var ruleElement = js2xml.createElement('Rule', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.addChildElement(rulesSequenceElement, ruleElement);
                  
                  if (rulesItem.order) {
                    var orderElement = js2xml.createElement('Order', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(orderElement, rulesItem.order.toString());
                    js2xml.addChildElement(ruleElement, orderElement);
                  }
                  
                  if (rulesItem.action) {
                    var actionElement = js2xml.createElement('Action', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(actionElement, rulesItem.action);
                    js2xml.addChildElement(ruleElement, actionElement);
                  }
                  
                  if (rulesItem.remoteSubnet) {
                    var remoteSubnetElement = js2xml.createElement('RemoteSubnet', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(remoteSubnetElement, rulesItem.remoteSubnet);
                    js2xml.addChildElement(ruleElement, remoteSubnetElement);
                  }
                  
                  if (rulesItem.description) {
                    var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
                    js2xml.setElementValue(descriptionElement, rulesItem.description);
                    js2xml.addChildElement(ruleElement, descriptionElement);
                  }
                }
                js2xml.addChildElement(accessControlListElement, rulesSequenceElement);
              }
            }
          }
          js2xml.addChildElement(configurationSetElement, inputEndpointsSequenceElement);
        }
        
        if (configurationSetsItem.subnetNames) {
          var subnetNamesSequenceElement = js2xml.createElement('SubnetNames', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex8 = 0; loweredIndex8 < configurationSetsItem.subnetNames.length; loweredIndex8 = loweredIndex8 + 1) {
            var subnetNamesItem = configurationSetsItem.subnetNames[loweredIndex8];
            var subnetNamesItemElement = js2xml.createElement('SubnetName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(subnetNamesItemElement, subnetNamesItem);
            js2xml.addChildElement(subnetNamesSequenceElement, subnetNamesItemElement);
          }
          js2xml.addChildElement(configurationSetElement, subnetNamesSequenceElement);
        }
        
        if (configurationSetsItem.computerName) {
          var computerNameElement = js2xml.createElement('ComputerName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(computerNameElement, configurationSetsItem.computerName);
          js2xml.addChildElement(configurationSetElement, computerNameElement);
        }
        
        if (configurationSetsItem.adminPassword) {
          var adminPasswordElement = js2xml.createElement('AdminPassword', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(adminPasswordElement, configurationSetsItem.adminPassword);
          js2xml.addChildElement(configurationSetElement, adminPasswordElement);
        }
        
        if (configurationSetsItem.resetPasswordOnFirstLogon) {
          var resetPasswordOnFirstLogonElement = js2xml.createElement('ResetPasswordOnFirstLogon', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(resetPasswordOnFirstLogonElement, configurationSetsItem.resetPasswordOnFirstLogon.toString());
          js2xml.addChildElement(configurationSetElement, resetPasswordOnFirstLogonElement);
        }
        
        if (configurationSetsItem.enableAutomaticUpdates) {
          var enableAutomaticUpdatesElement = js2xml.createElement('EnableAutomaticUpdates', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(enableAutomaticUpdatesElement, configurationSetsItem.enableAutomaticUpdates.toString());
          js2xml.addChildElement(configurationSetElement, enableAutomaticUpdatesElement);
        }
        
        if (configurationSetsItem.timeZone) {
          var timeZoneElement = js2xml.createElement('TimeZone', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(timeZoneElement, configurationSetsItem.timeZone);
          js2xml.addChildElement(configurationSetElement, timeZoneElement);
        }
        
        if (configurationSetsItem.domainJoin) {
          var domainJoinElement = js2xml.createElement('DomainJoin', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(configurationSetElement, domainJoinElement);
          
          if (configurationSetsItem.domainJoin.credentials) {
            var credentialsElement = js2xml.createElement('Credentials', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(domainJoinElement, credentialsElement);
            
            if (configurationSetsItem.domainJoin.credentials.domain) {
              var domainElement = js2xml.createElement('Domain', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(domainElement, configurationSetsItem.domainJoin.credentials.domain);
              js2xml.addChildElement(credentialsElement, domainElement);
            }
            
            var usernameElement = js2xml.createElement('Username', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(usernameElement, configurationSetsItem.domainJoin.credentials.userName);
            js2xml.addChildElement(credentialsElement, usernameElement);
            
            var passwordElement = js2xml.createElement('Password', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(passwordElement, configurationSetsItem.domainJoin.credentials.password);
            js2xml.addChildElement(credentialsElement, passwordElement);
          }
          
          if (configurationSetsItem.domainJoin.domainToJoin) {
            var joinDomainElement = js2xml.createElement('JoinDomain', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(joinDomainElement, configurationSetsItem.domainJoin.domainToJoin);
            js2xml.addChildElement(domainJoinElement, joinDomainElement);
          }
          
          if (configurationSetsItem.domainJoin.ldapMachineObjectOU) {
            var machineObjectOUElement = js2xml.createElement('MachineObjectOU', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(machineObjectOUElement, configurationSetsItem.domainJoin.ldapMachineObjectOU);
            js2xml.addChildElement(domainJoinElement, machineObjectOUElement);
          }
          
          if (configurationSetsItem.domainJoin.provisioning) {
            var provisioningElement = js2xml.createElement('Provisioning', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(domainJoinElement, provisioningElement);
            
            if (configurationSetsItem.domainJoin.provisioning.accountData) {
              var accountDataElement = js2xml.createElement('AccountData', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(accountDataElement, configurationSetsItem.domainJoin.provisioning.accountData);
              js2xml.addChildElement(provisioningElement, accountDataElement);
            }
          }
        }
        
        if (configurationSetsItem.storedCertificateSettings) {
          var storedCertificateSettingsSequenceElement = js2xml.createElement('StoredCertificateSettings', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex9 = 0; loweredIndex9 < configurationSetsItem.storedCertificateSettings.length; loweredIndex9 = loweredIndex9 + 1) {
            var storedCertificateSettingsItem = configurationSetsItem.storedCertificateSettings[loweredIndex9];
            var certificateSettingElement = js2xml.createElement('CertificateSetting', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(storedCertificateSettingsSequenceElement, certificateSettingElement);
            
            var storeLocationElement = js2xml.createElement('StoreLocation', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(storeLocationElement, 'LocalMachine');
            js2xml.addChildElement(certificateSettingElement, storeLocationElement);
            
            var storeNameElement = js2xml.createElement('StoreName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(storeNameElement, storedCertificateSettingsItem.storeName);
            js2xml.addChildElement(certificateSettingElement, storeNameElement);
            
            var thumbprintElement = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(thumbprintElement, storedCertificateSettingsItem.thumbprint);
            js2xml.addChildElement(certificateSettingElement, thumbprintElement);
          }
          js2xml.addChildElement(configurationSetElement, storedCertificateSettingsSequenceElement);
        }
        
        if (configurationSetsItem.windowsRemoteManagement) {
          var winRMElement = js2xml.createElement('WinRM', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(configurationSetElement, winRMElement);
          
          if (configurationSetsItem.windowsRemoteManagement.listeners) {
            var listenersSequenceElement = js2xml.createElement('Listeners', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex10 = 0; loweredIndex10 < configurationSetsItem.windowsRemoteManagement.listeners.length; loweredIndex10 = loweredIndex10 + 1) {
              var listenersItem = configurationSetsItem.windowsRemoteManagement.listeners[loweredIndex10];
              var listenerElement = js2xml.createElement('Listener', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(listenersSequenceElement, listenerElement);
              
              var protocolElement3 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(protocolElement3, listenersItem.listenerType ? listenersItem.listenerType.toString() : 'Http');
              js2xml.addChildElement(listenerElement, protocolElement3);
              
              if (listenersItem.certificateThumbprint) {
                var certificateThumbprintElement = js2xml.createElement('CertificateThumbprint', 'http://schemas.microsoft.com/windowsazure');
                js2xml.setElementValue(certificateThumbprintElement, listenersItem.certificateThumbprint);
                js2xml.addChildElement(listenerElement, certificateThumbprintElement);
              }
            }
            js2xml.addChildElement(winRMElement, listenersSequenceElement);
          }
        }
        
        if (configurationSetsItem.adminUserName) {
          var adminUsernameElement = js2xml.createElement('AdminUsername', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(adminUsernameElement, configurationSetsItem.adminUserName);
          js2xml.addChildElement(configurationSetElement, adminUsernameElement);
        }
        
        if (configurationSetsItem.hostName) {
          var hostNameElement = js2xml.createElement('HostName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(hostNameElement, configurationSetsItem.hostName);
          js2xml.addChildElement(configurationSetElement, hostNameElement);
        }
        
        if (configurationSetsItem.userName) {
          var userNameElement = js2xml.createElement('UserName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(userNameElement, configurationSetsItem.userName);
          js2xml.addChildElement(configurationSetElement, userNameElement);
        }
        
        if (configurationSetsItem.userPassword) {
          var userPasswordElement = js2xml.createElement('UserPassword', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(userPasswordElement, configurationSetsItem.userPassword);
          js2xml.addChildElement(configurationSetElement, userPasswordElement);
        }
        
        if (configurationSetsItem.disableSshPasswordAuthentication) {
          var disableSshPasswordAuthenticationElement = js2xml.createElement('DisableSshPasswordAuthentication', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(disableSshPasswordAuthenticationElement, configurationSetsItem.disableSshPasswordAuthentication.toString());
          js2xml.addChildElement(configurationSetElement, disableSshPasswordAuthenticationElement);
        }
        
        if (configurationSetsItem.sshSettings) {
          var sSHElement = js2xml.createElement('SSH', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(configurationSetElement, sSHElement);
          
          if (configurationSetsItem.sshSettings.publicKeys) {
            var publicKeysSequenceElement = js2xml.createElement('PublicKeys', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex11 = 0; loweredIndex11 < configurationSetsItem.sshSettings.publicKeys.length; loweredIndex11 = loweredIndex11 + 1) {
              var publicKeysItem = configurationSetsItem.sshSettings.publicKeys[loweredIndex11];
              var publicKeyElement = js2xml.createElement('PublicKey', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(publicKeysSequenceElement, publicKeyElement);
              
              var fingerPrintElement = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(fingerPrintElement, publicKeysItem.fingerprint);
              js2xml.addChildElement(publicKeyElement, fingerPrintElement);
              
              var pathElement2 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(pathElement2, publicKeysItem.path);
              js2xml.addChildElement(publicKeyElement, pathElement2);
            }
            js2xml.addChildElement(sSHElement, publicKeysSequenceElement);
          }
          
          if (configurationSetsItem.sshSettings.keyPairs) {
            var keyPairsSequenceElement = js2xml.createElement('KeyPairs', 'http://schemas.microsoft.com/windowsazure');
            for (var loweredIndex12 = 0; loweredIndex12 < configurationSetsItem.sshSettings.keyPairs.length; loweredIndex12 = loweredIndex12 + 1) {
              var keyPairsItem = configurationSetsItem.sshSettings.keyPairs[loweredIndex12];
              var keyPairElement = js2xml.createElement('KeyPair', 'http://schemas.microsoft.com/windowsazure');
              js2xml.addChildElement(keyPairsSequenceElement, keyPairElement);
              
              var fingerPrintElement2 = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(fingerPrintElement2, keyPairsItem.fingerprint);
              js2xml.addChildElement(keyPairElement, fingerPrintElement2);
              
              var pathElement3 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(pathElement3, keyPairsItem.path);
              js2xml.addChildElement(keyPairElement, pathElement3);
            }
            js2xml.addChildElement(sSHElement, keyPairsSequenceElement);
          }
        }
      }
      js2xml.addChildElement(persistentVMRoleElement, configurationSetsSequenceElement);
    }
    
    if (parameters.availabilitySetName) {
      var availabilitySetNameElement = js2xml.createElement('AvailabilitySetName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(availabilitySetNameElement, parameters.availabilitySetName);
      js2xml.addChildElement(persistentVMRoleElement, availabilitySetNameElement);
    }
    
    if (parameters.dataVirtualHardDisks) {
      var dataVirtualHardDisksSequenceElement = js2xml.createElement('DataVirtualHardDisks', 'http://schemas.microsoft.com/windowsazure');
      for (var loweredIndex13 = 0; loweredIndex13 < parameters.dataVirtualHardDisks.length; loweredIndex13 = loweredIndex13 + 1) {
        var dataVirtualHardDisksItem = parameters.dataVirtualHardDisks[loweredIndex13];
        var dataVirtualHardDiskElement = js2xml.createElement('DataVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(dataVirtualHardDisksSequenceElement, dataVirtualHardDiskElement);
        
        if (dataVirtualHardDisksItem.hostCaching) {
          var hostCachingElement = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(hostCachingElement, dataVirtualHardDisksItem.hostCaching ? dataVirtualHardDisksItem.hostCaching.toString() : 'None');
          js2xml.addChildElement(dataVirtualHardDiskElement, hostCachingElement);
        }
        
        if (dataVirtualHardDisksItem.diskLabel) {
          var diskLabelElement = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(diskLabelElement, dataVirtualHardDisksItem.diskLabel);
          js2xml.addChildElement(dataVirtualHardDiskElement, diskLabelElement);
        }
        
        if (dataVirtualHardDisksItem.diskName) {
          var diskNameElement = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(diskNameElement, dataVirtualHardDisksItem.diskName);
          js2xml.addChildElement(dataVirtualHardDiskElement, diskNameElement);
        }
        
        if (dataVirtualHardDisksItem.logicalUnitNumber) {
          var lunElement = js2xml.createElement('Lun', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(lunElement, dataVirtualHardDisksItem.logicalUnitNumber.toString());
          js2xml.addChildElement(dataVirtualHardDiskElement, lunElement);
        }
        
        var logicalDiskSizeInGBElement = js2xml.createElement('LogicalDiskSizeInGB', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(logicalDiskSizeInGBElement, dataVirtualHardDisksItem.logicalDiskSizeInGB.toString());
        js2xml.addChildElement(dataVirtualHardDiskElement, logicalDiskSizeInGBElement);
        
        if (dataVirtualHardDisksItem.mediaLink) {
          var mediaLinkElement = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(mediaLinkElement, dataVirtualHardDisksItem.mediaLink);
          js2xml.addChildElement(dataVirtualHardDiskElement, mediaLinkElement);
        }
      }
      js2xml.addChildElement(persistentVMRoleElement, dataVirtualHardDisksSequenceElement);
    }
    
    var oSVirtualHardDiskElement = js2xml.createElement('OSVirtualHardDisk', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(persistentVMRoleElement, oSVirtualHardDiskElement);
    
    if (parameters.oSVirtualHardDisk.hostCaching) {
      var hostCachingElement2 = js2xml.createElement('HostCaching', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(hostCachingElement2, parameters.oSVirtualHardDisk.hostCaching ? parameters.oSVirtualHardDisk.hostCaching.toString() : 'None');
      js2xml.addChildElement(oSVirtualHardDiskElement, hostCachingElement2);
    }
    
    if (parameters.oSVirtualHardDisk.diskLabel) {
      var diskLabelElement2 = js2xml.createElement('DiskLabel', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(diskLabelElement2, parameters.oSVirtualHardDisk.diskLabel);
      js2xml.addChildElement(oSVirtualHardDiskElement, diskLabelElement2);
    }
    
    if (parameters.oSVirtualHardDisk.diskName) {
      var diskNameElement2 = js2xml.createElement('DiskName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(diskNameElement2, parameters.oSVirtualHardDisk.diskName);
      js2xml.addChildElement(oSVirtualHardDiskElement, diskNameElement2);
    }
    
    if (parameters.oSVirtualHardDisk.mediaLink) {
      var mediaLinkElement2 = js2xml.createElement('MediaLink', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(mediaLinkElement2, parameters.oSVirtualHardDisk.mediaLink);
      js2xml.addChildElement(oSVirtualHardDiskElement, mediaLinkElement2);
    }
    
    if (parameters.oSVirtualHardDisk.sourceImageName) {
      var sourceImageNameElement = js2xml.createElement('SourceImageName', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(sourceImageNameElement, parameters.oSVirtualHardDisk.sourceImageName);
      js2xml.addChildElement(oSVirtualHardDiskElement, sourceImageNameElement);
    }
    
    if (parameters.oSVirtualHardDisk.operatingSystem) {
      var osElement = js2xml.createElement('OS', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(osElement, parameters.oSVirtualHardDisk.operatingSystem);
      js2xml.addChildElement(oSVirtualHardDiskElement, osElement);
    }
    
    if (parameters.roleSize) {
      var roleSizeElement = js2xml.createElement('RoleSize', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(roleSizeElement, parameters.roleSize ? parameters.roleSize.toString() : 'Small');
      js2xml.addChildElement(persistentVMRoleElement, roleSizeElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The UpdateLoadBalancedEndpointSet operation changes the specified
   * load-balanced InputEndpoints on all the roles of an Infrastructure as a
   * Service deployment. Non load-balanced endpoints must be changed using
   * UpdateRole.
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineUpdateLoadBalancedSetParameters} parameters -
   * Parameters supplied to the Update Load Balanced Endpoint Set operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.beginUpdatingLoadBalancedEndpointSet = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.loadBalancedEndpoints.length; loweredIndex1 = loweredIndex1 + 1) {
      var loadBalancedEndpointsParameterItem = parameters.loadBalancedEndpoints[loweredIndex1];
      if (loadBalancedEndpointsParameterItem.loadBalancedEndpointSetName === null || loadBalancedEndpointsParameterItem.loadBalancedEndpointSetName === undefined) {
        return callback(new Error('parameters.loadBalancedEndpoints.loadBalancedEndpointSetName cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '?comp=UpdateLbSet';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var loadBalancedEndpointListElement = js2xml.createElement('LoadBalancedEndpointList', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, loadBalancedEndpointListElement);
    
    if (parameters.loadBalancedEndpoints) {
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.loadBalancedEndpoints.length; loweredIndex2 = loweredIndex2 + 1) {
        var loadBalancedEndpointsItem = parameters.loadBalancedEndpoints[loweredIndex2];
        var inputEndpointElement = js2xml.createElement('InputEndpoint', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(loadBalancedEndpointListElement, inputEndpointElement);
        
        var loadBalancedEndpointSetNameElement = js2xml.createElement('LoadBalancedEndpointSetName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(loadBalancedEndpointSetNameElement, loadBalancedEndpointsItem.loadBalancedEndpointSetName);
        js2xml.addChildElement(inputEndpointElement, loadBalancedEndpointSetNameElement);
        
        if (loadBalancedEndpointsItem.localPort) {
          var localPortElement = js2xml.createElement('LocalPort', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(localPortElement, loadBalancedEndpointsItem.localPort.toString());
          js2xml.addChildElement(inputEndpointElement, localPortElement);
        }
        
        if (loadBalancedEndpointsItem.name) {
          var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(nameElement, loadBalancedEndpointsItem.name);
          js2xml.addChildElement(inputEndpointElement, nameElement);
        }
        
        if (loadBalancedEndpointsItem.port) {
          var portElement = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(portElement, loadBalancedEndpointsItem.port.toString());
          js2xml.addChildElement(inputEndpointElement, portElement);
        }
        
        if (loadBalancedEndpointsItem.loadBalancerProbe) {
          var loadBalancerProbeElement = js2xml.createElement('LoadBalancerProbe', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(inputEndpointElement, loadBalancerProbeElement);
          
          if (loadBalancedEndpointsItem.loadBalancerProbe.path) {
            var pathElement = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(pathElement, loadBalancedEndpointsItem.loadBalancerProbe.path);
            js2xml.addChildElement(loadBalancerProbeElement, pathElement);
          }
          
          var portElement2 = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(portElement2, loadBalancedEndpointsItem.loadBalancerProbe.port.toString());
          js2xml.addChildElement(loadBalancerProbeElement, portElement2);
          
          var protocolElement = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(protocolElement, loadBalancedEndpointsItem.loadBalancerProbe.protocol ? loadBalancedEndpointsItem.loadBalancerProbe.protocol.toString() : 'Tcp');
          js2xml.addChildElement(loadBalancerProbeElement, protocolElement);
          
          if (loadBalancedEndpointsItem.loadBalancerProbe.intervalInSeconds) {
            var intervalInSecondsElement = js2xml.createElement('IntervalInSeconds', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(intervalInSecondsElement, loadBalancedEndpointsItem.loadBalancerProbe.intervalInSeconds.toString());
            js2xml.addChildElement(loadBalancerProbeElement, intervalInSecondsElement);
          }
          
          if (loadBalancedEndpointsItem.loadBalancerProbe.timeoutInSeconds) {
            var timeoutInSecondsElement = js2xml.createElement('TimeoutInSeconds', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(timeoutInSecondsElement, loadBalancedEndpointsItem.loadBalancerProbe.timeoutInSeconds.toString());
            js2xml.addChildElement(loadBalancerProbeElement, timeoutInSecondsElement);
          }
        }
        
        if (loadBalancedEndpointsItem.protocol) {
          var protocolElement2 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(protocolElement2, loadBalancedEndpointsItem.protocol);
          js2xml.addChildElement(inputEndpointElement, protocolElement2);
        }
        
        if (loadBalancedEndpointsItem.virtualIPAddress) {
          var vipElement = js2xml.createElement('Vip', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(vipElement, loadBalancedEndpointsItem.virtualIPAddress);
          js2xml.addChildElement(inputEndpointElement, vipElement);
        }
        
        if (loadBalancedEndpointsItem.enableDirectServerReturn) {
          var enableDirectServerReturnElement = js2xml.createElement('EnableDirectServerReturn', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(enableDirectServerReturnElement, loadBalancedEndpointsItem.enableDirectServerReturn.toString());
          js2xml.addChildElement(inputEndpointElement, enableDirectServerReturnElement);
        }
        
        var endpointAclElement = js2xml.createElement('EndpointAcl', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(inputEndpointElement, endpointAclElement);
        
        if (loadBalancedEndpointsItem.rules) {
          var rulesSequenceElement = js2xml.createElement('Rules', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex3 = 0; loweredIndex3 < loadBalancedEndpointsItem.rules.length; loweredIndex3 = loweredIndex3 + 1) {
            var rulesItem = loadBalancedEndpointsItem.rules[loweredIndex3];
            var ruleElement = js2xml.createElement('Rule', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(rulesSequenceElement, ruleElement);
            
            if (rulesItem.order) {
              var orderElement = js2xml.createElement('Order', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(orderElement, rulesItem.order.toString());
              js2xml.addChildElement(ruleElement, orderElement);
            }
            
            if (rulesItem.action) {
              var actionElement = js2xml.createElement('Action', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(actionElement, rulesItem.action);
              js2xml.addChildElement(ruleElement, actionElement);
            }
            
            if (rulesItem.remoteSubnet) {
              var remoteSubnetElement = js2xml.createElement('RemoteSubnet', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(remoteSubnetElement, rulesItem.remoteSubnet);
              js2xml.addChildElement(ruleElement, remoteSubnetElement);
            }
            
            if (rulesItem.description) {
              var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(descriptionElement, rulesItem.description);
              js2xml.addChildElement(ruleElement, descriptionElement);
            }
          }
          js2xml.addChildElement(endpointAclElement, rulesSequenceElement);
        }
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Capture Role operation creates a copy of the operating system virtual
   * hard disk (VHD) that is deployed in the virtual machine, saves the VHD
   * copy in the same storage location as the operating system VHD, and
   * registers the copy as an image in your image gallery. From the captured
   * image, you can create additional customized virtual machines. For more
   * information about images and disks, see Manage Disks and Images. For more
   * information about capturing images, see How to Capture an Image of a
   * Virtual Machine Running Windows Server 2008 R2 or How to Capture an Image
   * of a Virtual Machine Running Linux.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * restart.
   *
   * @param {VirtualMachineCaptureParameters} parameters - Parameters supplied
   * to the Capture Virtual Machine operation.
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard service response including an
   * HTTP status code and request ID.
   */
  VirtualMachineOperations.prototype.capture = function(serviceName, deploymentName, virtualMachineName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.provisioningConfiguration) {
      if (parameters.provisioningConfiguration.domainJoin) {
        if (parameters.provisioningConfiguration.domainJoin.credentials) {
          if (parameters.provisioningConfiguration.domainJoin.credentials.password === null || parameters.provisioningConfiguration.domainJoin.credentials.password === undefined) {
            return callback(new Error('parameters.provisioningConfiguration.domainJoin.credentials.password cannot be null.'));
          }
          if (parameters.provisioningConfiguration.domainJoin.credentials.userName === null || parameters.provisioningConfiguration.domainJoin.credentials.userName === undefined) {
            return callback(new Error('parameters.provisioningConfiguration.domainJoin.credentials.userName cannot be null.'));
          }
        }
      }
      if (parameters.provisioningConfiguration.hostName && parameters.provisioningConfiguration.hostName.length < 1) {
        return callback(new Error('parameters.provisioningConfiguration.hostName is outside the valid range.'));
      }
      if (parameters.provisioningConfiguration.hostName && parameters.provisioningConfiguration.hostName.length > 64) {
        return callback(new Error('parameters.provisioningConfiguration.hostName is outside the valid range.'));
      }
      if (parameters.provisioningConfiguration.sshSettings) {
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.provisioningConfiguration.sshSettings.keyPairs.length; loweredIndex1 = loweredIndex1 + 1) {
          var keyPairsParameterItem = parameters.provisioningConfiguration.sshSettings.keyPairs[loweredIndex1];
          if (keyPairsParameterItem.fingerprint === null || keyPairsParameterItem.fingerprint === undefined) {
            return callback(new Error('parameters.provisioningConfiguration.sshSettings.keyPairs.fingerprint cannot be null.'));
          }
          if (keyPairsParameterItem.path === null || keyPairsParameterItem.path === undefined) {
            return callback(new Error('parameters.provisioningConfiguration.sshSettings.keyPairs.path cannot be null.'));
          }
        }
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.provisioningConfiguration.sshSettings.publicKeys.length; loweredIndex2 = loweredIndex2 + 1) {
          var publicKeysParameterItem = parameters.provisioningConfiguration.sshSettings.publicKeys[loweredIndex2];
          if (publicKeysParameterItem.fingerprint === null || publicKeysParameterItem.fingerprint === undefined) {
            return callback(new Error('parameters.provisioningConfiguration.sshSettings.publicKeys.fingerprint cannot be null.'));
          }
          if (publicKeysParameterItem.path === null || publicKeysParameterItem.path === undefined) {
            return callback(new Error('parameters.provisioningConfiguration.sshSettings.publicKeys.path cannot be null.'));
          }
        }
      }
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.provisioningConfiguration.storedCertificateSettings.length; loweredIndex3 = loweredIndex3 + 1) {
        var storedCertificateSettingsParameterItem = parameters.provisioningConfiguration.storedCertificateSettings[loweredIndex3];
        if (storedCertificateSettingsParameterItem.storeName === null || storedCertificateSettingsParameterItem.storeName === undefined) {
          return callback(new Error('parameters.provisioningConfiguration.storedCertificateSettings.storeName cannot be null.'));
        }
        if (storedCertificateSettingsParameterItem.thumbprint === null || storedCertificateSettingsParameterItem.thumbprint === undefined) {
          return callback(new Error('parameters.provisioningConfiguration.storedCertificateSettings.thumbprint cannot be null.'));
        }
      }
      if (parameters.provisioningConfiguration.userName && parameters.provisioningConfiguration.userName.length < 1) {
        return callback(new Error('parameters.provisioningConfiguration.userName is outside the valid range.'));
      }
      if (parameters.provisioningConfiguration.userName && parameters.provisioningConfiguration.userName.length > 32) {
        return callback(new Error('parameters.provisioningConfiguration.userName is outside the valid range.'));
      }
      if (parameters.provisioningConfiguration.userPassword && parameters.provisioningConfiguration.userPassword.length < 6 && (parameters.provisioningConfiguration.DisableSshPasswordAuthentication === false || parameters.provisioningConfiguration.userPassword.length !== 0)) {
        return callback(new Error('parameters.provisioningConfiguration.userPassword is outside the valid range.'));
      }
      if (parameters.provisioningConfiguration.userPassword && parameters.provisioningConfiguration.userPassword.length > 72) {
        return callback(new Error('parameters.provisioningConfiguration.userPassword is outside the valid range.'));
      }
    }
    if (parameters.targetImageLabel === null || parameters.targetImageLabel === undefined) {
      return callback(new Error('parameters.targetImageLabel cannot be null.'));
    }
    if (parameters.targetImageName === null || parameters.targetImageName === undefined) {
      return callback(new Error('parameters.targetImageName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roleinstances/' + virtualMachineName + '/Operations';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var captureRoleOperationElement = js2xml.createElement('CaptureRoleOperation', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, captureRoleOperationElement);
    
    var operationTypeElement = js2xml.createElement('OperationType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(operationTypeElement, 'CaptureRoleOperation');
    js2xml.addChildElement(captureRoleOperationElement, operationTypeElement);
    
    var postCaptureActionElement = js2xml.createElement('PostCaptureAction', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(postCaptureActionElement, parameters.postCaptureAction ? parameters.postCaptureAction.toString() : 'Delete');
    js2xml.addChildElement(captureRoleOperationElement, postCaptureActionElement);
    
    if (parameters.provisioningConfiguration) {
      var provisioningConfigurationElement = js2xml.createElement('ProvisioningConfiguration', 'http://schemas.microsoft.com/windowsazure');
      js2xml.addChildElement(captureRoleOperationElement, provisioningConfigurationElement);
      
      if (parameters.provisioningConfiguration.configurationSetType) {
        var configurationSetTypeElement = js2xml.createElement('ConfigurationSetType', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(configurationSetTypeElement, parameters.provisioningConfiguration.configurationSetType);
        js2xml.addChildElement(provisioningConfigurationElement, configurationSetTypeElement);
      }
      
      if (parameters.provisioningConfiguration.inputEndpoints) {
        var inputEndpointsSequenceElement = js2xml.createElement('InputEndpoints', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.provisioningConfiguration.inputEndpoints.length; loweredIndex4 = loweredIndex4 + 1) {
          var inputEndpointsItem = parameters.provisioningConfiguration.inputEndpoints[loweredIndex4];
          var inputEndpointElement = js2xml.createElement('InputEndpoint', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(inputEndpointsSequenceElement, inputEndpointElement);
          
          if (inputEndpointsItem.loadBalancedEndpointSetName) {
            var loadBalancedEndpointSetNameElement = js2xml.createElement('LoadBalancedEndpointSetName', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(loadBalancedEndpointSetNameElement, inputEndpointsItem.loadBalancedEndpointSetName);
            js2xml.addChildElement(inputEndpointElement, loadBalancedEndpointSetNameElement);
          }
          
          if (inputEndpointsItem.localPort) {
            var localPortElement = js2xml.createElement('LocalPort', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(localPortElement, inputEndpointsItem.localPort.toString());
            js2xml.addChildElement(inputEndpointElement, localPortElement);
          }
          
          if (inputEndpointsItem.name) {
            var nameElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(nameElement, inputEndpointsItem.name);
            js2xml.addChildElement(inputEndpointElement, nameElement);
          }
          
          if (inputEndpointsItem.port) {
            var portElement = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(portElement, inputEndpointsItem.port.toString());
            js2xml.addChildElement(inputEndpointElement, portElement);
          }
          
          if (inputEndpointsItem.loadBalancerProbe) {
            var loadBalancerProbeElement = js2xml.createElement('LoadBalancerProbe', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(inputEndpointElement, loadBalancerProbeElement);
            
            if (inputEndpointsItem.loadBalancerProbe.path) {
              var pathElement = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(pathElement, inputEndpointsItem.loadBalancerProbe.path);
              js2xml.addChildElement(loadBalancerProbeElement, pathElement);
            }
            
            var portElement2 = js2xml.createElement('Port', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(portElement2, inputEndpointsItem.loadBalancerProbe.port.toString());
            js2xml.addChildElement(loadBalancerProbeElement, portElement2);
            
            var protocolElement = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(protocolElement, inputEndpointsItem.loadBalancerProbe.protocol ? inputEndpointsItem.loadBalancerProbe.protocol.toString() : 'Tcp');
            js2xml.addChildElement(loadBalancerProbeElement, protocolElement);
            
            if (inputEndpointsItem.loadBalancerProbe.intervalInSeconds) {
              var intervalInSecondsElement = js2xml.createElement('IntervalInSeconds', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(intervalInSecondsElement, inputEndpointsItem.loadBalancerProbe.intervalInSeconds.toString());
              js2xml.addChildElement(loadBalancerProbeElement, intervalInSecondsElement);
            }
            
            if (inputEndpointsItem.loadBalancerProbe.timeoutInSeconds) {
              var timeoutInSecondsElement = js2xml.createElement('TimeoutInSeconds', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(timeoutInSecondsElement, inputEndpointsItem.loadBalancerProbe.timeoutInSeconds.toString());
              js2xml.addChildElement(loadBalancerProbeElement, timeoutInSecondsElement);
            }
          }
          
          if (inputEndpointsItem.protocol) {
            var protocolElement2 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(protocolElement2, inputEndpointsItem.protocol);
            js2xml.addChildElement(inputEndpointElement, protocolElement2);
          }
          
          if (inputEndpointsItem.virtualIPAddress) {
            var vipElement = js2xml.createElement('Vip', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(vipElement, inputEndpointsItem.virtualIPAddress);
            js2xml.addChildElement(inputEndpointElement, vipElement);
          }
          
          if (inputEndpointsItem.enableDirectServerReturn) {
            var enableDirectServerReturnElement = js2xml.createElement('EnableDirectServerReturn', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(enableDirectServerReturnElement, inputEndpointsItem.enableDirectServerReturn.toString());
            js2xml.addChildElement(inputEndpointElement, enableDirectServerReturnElement);
          }
          
          if (inputEndpointsItem.accessControlList) {
            var accessControlListElement = js2xml.createElement('AccessControlList', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(inputEndpointElement, accessControlListElement);
            
            if (inputEndpointsItem.accessControlList.rules) {
              var rulesSequenceElement = js2xml.createElement('Rules', 'http://schemas.microsoft.com/windowsazure');
              for (var loweredIndex5 = 0; loweredIndex5 < inputEndpointsItem.accessControlList.rules.length; loweredIndex5 = loweredIndex5 + 1) {
                var rulesItem = inputEndpointsItem.accessControlList.rules[loweredIndex5];
                var ruleElement = js2xml.createElement('Rule', 'http://schemas.microsoft.com/windowsazure');
                js2xml.addChildElement(rulesSequenceElement, ruleElement);
                
                if (rulesItem.order) {
                  var orderElement = js2xml.createElement('Order', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(orderElement, rulesItem.order.toString());
                  js2xml.addChildElement(ruleElement, orderElement);
                }
                
                if (rulesItem.action) {
                  var actionElement = js2xml.createElement('Action', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(actionElement, rulesItem.action);
                  js2xml.addChildElement(ruleElement, actionElement);
                }
                
                if (rulesItem.remoteSubnet) {
                  var remoteSubnetElement = js2xml.createElement('RemoteSubnet', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(remoteSubnetElement, rulesItem.remoteSubnet);
                  js2xml.addChildElement(ruleElement, remoteSubnetElement);
                }
                
                if (rulesItem.description) {
                  var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
                  js2xml.setElementValue(descriptionElement, rulesItem.description);
                  js2xml.addChildElement(ruleElement, descriptionElement);
                }
              }
              js2xml.addChildElement(accessControlListElement, rulesSequenceElement);
            }
          }
        }
        js2xml.addChildElement(provisioningConfigurationElement, inputEndpointsSequenceElement);
      }
      
      if (parameters.provisioningConfiguration.subnetNames) {
        var subnetNamesSequenceElement = js2xml.createElement('SubnetNames', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex6 = 0; loweredIndex6 < parameters.provisioningConfiguration.subnetNames.length; loweredIndex6 = loweredIndex6 + 1) {
          var subnetNamesItem = parameters.provisioningConfiguration.subnetNames[loweredIndex6];
          var subnetNamesItemElement = js2xml.createElement('SubnetName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(subnetNamesItemElement, subnetNamesItem);
          js2xml.addChildElement(subnetNamesSequenceElement, subnetNamesItemElement);
        }
        js2xml.addChildElement(provisioningConfigurationElement, subnetNamesSequenceElement);
      }
      
      if (parameters.provisioningConfiguration.computerName) {
        var computerNameElement = js2xml.createElement('ComputerName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(computerNameElement, parameters.provisioningConfiguration.computerName);
        js2xml.addChildElement(provisioningConfigurationElement, computerNameElement);
      }
      
      if (parameters.provisioningConfiguration.adminPassword) {
        var adminPasswordElement = js2xml.createElement('AdminPassword', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(adminPasswordElement, parameters.provisioningConfiguration.adminPassword);
        js2xml.addChildElement(provisioningConfigurationElement, adminPasswordElement);
      }
      
      if (parameters.provisioningConfiguration.resetPasswordOnFirstLogon) {
        var resetPasswordOnFirstLogonElement = js2xml.createElement('ResetPasswordOnFirstLogon', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(resetPasswordOnFirstLogonElement, parameters.provisioningConfiguration.resetPasswordOnFirstLogon.toString());
        js2xml.addChildElement(provisioningConfigurationElement, resetPasswordOnFirstLogonElement);
      }
      
      if (parameters.provisioningConfiguration.enableAutomaticUpdates) {
        var enableAutomaticUpdatesElement = js2xml.createElement('EnableAutomaticUpdates', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(enableAutomaticUpdatesElement, parameters.provisioningConfiguration.enableAutomaticUpdates.toString());
        js2xml.addChildElement(provisioningConfigurationElement, enableAutomaticUpdatesElement);
      }
      
      if (parameters.provisioningConfiguration.timeZone) {
        var timeZoneElement = js2xml.createElement('TimeZone', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(timeZoneElement, parameters.provisioningConfiguration.timeZone);
        js2xml.addChildElement(provisioningConfigurationElement, timeZoneElement);
      }
      
      if (parameters.provisioningConfiguration.domainJoin) {
        var domainJoinElement = js2xml.createElement('DomainJoin', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(provisioningConfigurationElement, domainJoinElement);
        
        if (parameters.provisioningConfiguration.domainJoin.credentials) {
          var credentialsElement = js2xml.createElement('Credentials', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(domainJoinElement, credentialsElement);
          
          if (parameters.provisioningConfiguration.domainJoin.credentials.domain) {
            var domainElement = js2xml.createElement('Domain', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(domainElement, parameters.provisioningConfiguration.domainJoin.credentials.domain);
            js2xml.addChildElement(credentialsElement, domainElement);
          }
          
          var usernameElement = js2xml.createElement('Username', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(usernameElement, parameters.provisioningConfiguration.domainJoin.credentials.userName);
          js2xml.addChildElement(credentialsElement, usernameElement);
          
          var passwordElement = js2xml.createElement('Password', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(passwordElement, parameters.provisioningConfiguration.domainJoin.credentials.password);
          js2xml.addChildElement(credentialsElement, passwordElement);
        }
        
        if (parameters.provisioningConfiguration.domainJoin.domainToJoin) {
          var joinDomainElement = js2xml.createElement('JoinDomain', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(joinDomainElement, parameters.provisioningConfiguration.domainJoin.domainToJoin);
          js2xml.addChildElement(domainJoinElement, joinDomainElement);
        }
        
        if (parameters.provisioningConfiguration.domainJoin.ldapMachineObjectOU) {
          var machineObjectOUElement = js2xml.createElement('MachineObjectOU', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(machineObjectOUElement, parameters.provisioningConfiguration.domainJoin.ldapMachineObjectOU);
          js2xml.addChildElement(domainJoinElement, machineObjectOUElement);
        }
        
        if (parameters.provisioningConfiguration.domainJoin.provisioning) {
          var provisioningElement = js2xml.createElement('Provisioning', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(domainJoinElement, provisioningElement);
          
          if (parameters.provisioningConfiguration.domainJoin.provisioning.accountData) {
            var accountDataElement = js2xml.createElement('AccountData', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(accountDataElement, parameters.provisioningConfiguration.domainJoin.provisioning.accountData);
            js2xml.addChildElement(provisioningElement, accountDataElement);
          }
        }
      }
      
      if (parameters.provisioningConfiguration.storedCertificateSettings) {
        var storedCertificateSettingsSequenceElement = js2xml.createElement('StoredCertificateSettings', 'http://schemas.microsoft.com/windowsazure');
        for (var loweredIndex7 = 0; loweredIndex7 < parameters.provisioningConfiguration.storedCertificateSettings.length; loweredIndex7 = loweredIndex7 + 1) {
          var storedCertificateSettingsItem = parameters.provisioningConfiguration.storedCertificateSettings[loweredIndex7];
          var certificateSettingElement = js2xml.createElement('CertificateSetting', 'http://schemas.microsoft.com/windowsazure');
          js2xml.addChildElement(storedCertificateSettingsSequenceElement, certificateSettingElement);
          
          var storeLocationElement = js2xml.createElement('StoreLocation', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(storeLocationElement, 'LocalMachine');
          js2xml.addChildElement(certificateSettingElement, storeLocationElement);
          
          var storeNameElement = js2xml.createElement('StoreName', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(storeNameElement, storedCertificateSettingsItem.storeName);
          js2xml.addChildElement(certificateSettingElement, storeNameElement);
          
          var thumbprintElement = js2xml.createElement('Thumbprint', 'http://schemas.microsoft.com/windowsazure');
          js2xml.setElementValue(thumbprintElement, storedCertificateSettingsItem.thumbprint);
          js2xml.addChildElement(certificateSettingElement, thumbprintElement);
        }
        js2xml.addChildElement(provisioningConfigurationElement, storedCertificateSettingsSequenceElement);
      }
      
      if (parameters.provisioningConfiguration.windowsRemoteManagement) {
        var winRMElement = js2xml.createElement('WinRM', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(provisioningConfigurationElement, winRMElement);
        
        if (parameters.provisioningConfiguration.windowsRemoteManagement.listeners) {
          var listenersSequenceElement = js2xml.createElement('Listeners', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex8 = 0; loweredIndex8 < parameters.provisioningConfiguration.windowsRemoteManagement.listeners.length; loweredIndex8 = loweredIndex8 + 1) {
            var listenersItem = parameters.provisioningConfiguration.windowsRemoteManagement.listeners[loweredIndex8];
            var listenerElement = js2xml.createElement('Listener', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(listenersSequenceElement, listenerElement);
            
            var protocolElement3 = js2xml.createElement('Protocol', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(protocolElement3, listenersItem.listenerType ? listenersItem.listenerType.toString() : 'Http');
            js2xml.addChildElement(listenerElement, protocolElement3);
            
            if (listenersItem.certificateThumbprint) {
              var certificateThumbprintElement = js2xml.createElement('CertificateThumbprint', 'http://schemas.microsoft.com/windowsazure');
              js2xml.setElementValue(certificateThumbprintElement, listenersItem.certificateThumbprint);
              js2xml.addChildElement(listenerElement, certificateThumbprintElement);
            }
          }
          js2xml.addChildElement(winRMElement, listenersSequenceElement);
        }
      }
      
      if (parameters.provisioningConfiguration.adminUserName) {
        var adminUsernameElement = js2xml.createElement('AdminUsername', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(adminUsernameElement, parameters.provisioningConfiguration.adminUserName);
        js2xml.addChildElement(provisioningConfigurationElement, adminUsernameElement);
      }
      
      if (parameters.provisioningConfiguration.hostName) {
        var hostNameElement = js2xml.createElement('HostName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(hostNameElement, parameters.provisioningConfiguration.hostName);
        js2xml.addChildElement(provisioningConfigurationElement, hostNameElement);
      }
      
      if (parameters.provisioningConfiguration.userName) {
        var userNameElement = js2xml.createElement('UserName', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(userNameElement, parameters.provisioningConfiguration.userName);
        js2xml.addChildElement(provisioningConfigurationElement, userNameElement);
      }
      
      if (parameters.provisioningConfiguration.userPassword) {
        var userPasswordElement = js2xml.createElement('UserPassword', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(userPasswordElement, parameters.provisioningConfiguration.userPassword);
        js2xml.addChildElement(provisioningConfigurationElement, userPasswordElement);
      }
      
      if (parameters.provisioningConfiguration.disableSshPasswordAuthentication) {
        var disableSshPasswordAuthenticationElement = js2xml.createElement('DisableSshPasswordAuthentication', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(disableSshPasswordAuthenticationElement, parameters.provisioningConfiguration.disableSshPasswordAuthentication.toString());
        js2xml.addChildElement(provisioningConfigurationElement, disableSshPasswordAuthenticationElement);
      }
      
      if (parameters.provisioningConfiguration.sshSettings) {
        var sSHElement = js2xml.createElement('SSH', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(provisioningConfigurationElement, sSHElement);
        
        if (parameters.provisioningConfiguration.sshSettings.publicKeys) {
          var publicKeysSequenceElement = js2xml.createElement('PublicKeys', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex9 = 0; loweredIndex9 < parameters.provisioningConfiguration.sshSettings.publicKeys.length; loweredIndex9 = loweredIndex9 + 1) {
            var publicKeysItem = parameters.provisioningConfiguration.sshSettings.publicKeys[loweredIndex9];
            var publicKeyElement = js2xml.createElement('PublicKey', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(publicKeysSequenceElement, publicKeyElement);
            
            var fingerPrintElement = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(fingerPrintElement, publicKeysItem.fingerprint);
            js2xml.addChildElement(publicKeyElement, fingerPrintElement);
            
            var pathElement2 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(pathElement2, publicKeysItem.path);
            js2xml.addChildElement(publicKeyElement, pathElement2);
          }
          js2xml.addChildElement(sSHElement, publicKeysSequenceElement);
        }
        
        if (parameters.provisioningConfiguration.sshSettings.keyPairs) {
          var keyPairsSequenceElement = js2xml.createElement('KeyPairs', 'http://schemas.microsoft.com/windowsazure');
          for (var loweredIndex10 = 0; loweredIndex10 < parameters.provisioningConfiguration.sshSettings.keyPairs.length; loweredIndex10 = loweredIndex10 + 1) {
            var keyPairsItem = parameters.provisioningConfiguration.sshSettings.keyPairs[loweredIndex10];
            var keyPairElement = js2xml.createElement('KeyPair', 'http://schemas.microsoft.com/windowsazure');
            js2xml.addChildElement(keyPairsSequenceElement, keyPairElement);
            
            var fingerPrintElement2 = js2xml.createElement('FingerPrint', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(fingerPrintElement2, keyPairsItem.fingerprint);
            js2xml.addChildElement(keyPairElement, fingerPrintElement2);
            
            var pathElement3 = js2xml.createElement('Path', 'http://schemas.microsoft.com/windowsazure');
            js2xml.setElementValue(pathElement3, keyPairsItem.path);
            js2xml.addChildElement(keyPairElement, pathElement3);
          }
          js2xml.addChildElement(sSHElement, keyPairsSequenceElement);
        }
      }
    }
    
    var targetImageLabelElement = js2xml.createElement('TargetImageLabel', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(targetImageLabelElement, parameters.targetImageLabel);
    js2xml.addChildElement(captureRoleOperationElement, targetImageLabelElement);
    
    var targetImageNameElement = js2xml.createElement('TargetImageName', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(targetImageNameElement, parameters.targetImageName);
    js2xml.addChildElement(captureRoleOperationElement, targetImageNameElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Add Role operation adds a virtual machine to an existing deployment.
   * You can refer to the OSDisk in the Add Role operation in the following
   * ways.  Platform/User Image – Set the SourceImageName to a platform or
   * user image. You can optionally specify the DiskName and MediaLink values
   * as part the operation to control the name and location of target disk.
   * When DiskName and MediaLink are specified in this mode, they must not
   * already exist in the system, otherwise a conflict fault is returned.
   * UserDisk – Set DiskName to a user supplied image in image repository.
   * SourceImageName must be set to NULL. All other properties are ignored.
   * Blob in a Storage Account – Set MediaLink to a blob containing the
   * image. SourceImageName and DiskName are set to NULL.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineCreateParameters} parameters - Parameters supplied
   * to the Create Virtual Machine operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.create = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginCreating(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Create Virtual Machine Deployment operation provisions a virtual
   * machine based on the supplied configuration.  When you create a
   * deployment of a virtual machine, you should make sure that the cloud
   * service and the disk or image that you use are located in the same
   * region. For example, if the cloud service was created in the West US
   * region, the disk or image that you use should also be located in a
   * stor4age account in the West US region.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {VirtualMachineCreateDeploymentParameters} parameters - Parameters
   * supplied to the Create Virtual Machine Deployment operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.createDeployment = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginCreatingDeployment(serviceName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Role operation deletes the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * delete.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.delete = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginDeleting(serviceName, deploymentName, virtualMachineName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get Role operation retrieves information about the specified virtual
   * machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineGetResponse} - The Get Virtual Machine operation
   * response.
   */
  VirtualMachineOperations.prototype.get = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roles/' + virtualMachineName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { configurationSets: [], dataVirtualHardDisks: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var persistentVMRoleElement = js2xml.getElement(responseDoc, responseDoc, 'PERSISTENTVMROLE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (persistentVMRoleElement) {
          var roleNameElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'ROLENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (roleNameElement) {
            var roleNameInstance = roleNameElement;
            result.roleName = roleNameInstance;
          }
          
          var osVersionElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'OSVERSION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (osVersionElement) {
            var osVersionInstance = osVersionElement;
            result.osVersion = osVersionInstance;
          }
          
          var roleTypeElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'ROLETYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (roleTypeElement) {
            var roleTypeInstance = roleTypeElement;
            result.roleType = roleTypeInstance;
          }
          
          var availabilitySetNameElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'AVAILABILITYSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (availabilitySetNameElement) {
            var availabilitySetNameInstance = availabilitySetNameElement;
            result.availabilitySetName = availabilitySetNameInstance;
          }
          
          var roleSizeElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'ROLESIZE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (roleSizeElement) {
            var roleSizeInstance = roleSizeElement;
            result.roleSize = roleSizeInstance;
          }
          
          var defaultWinRmCertificateThumbprintElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'DEFAULTWINRMCERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (defaultWinRmCertificateThumbprintElement) {
            var defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement;
            result.defaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
          }
          
          var configurationSetsSequenceElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'CONFIGURATIONSETS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (configurationSetsSequenceElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
              var configurationSetsElement = js2xml.getElements(responseDoc, configurationSetsSequenceElement, 'CONFIGURATIONSET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
              var configurationSetInstance = { inputEndpoints: [], storedCertificateSettings: [], subnetNames: [] };
              result.configurationSets.push(configurationSetInstance);
              
              var configurationSetTypeElement = js2xml.getElement(responseDoc, configurationSetsElement, 'CONFIGURATIONSETTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (configurationSetTypeElement) {
                var configurationSetTypeInstance = configurationSetTypeElement;
                configurationSetInstance.configurationSetType = configurationSetTypeInstance;
              }
              
              var inputEndpointsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'INPUTENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (inputEndpointsSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var inputEndpointsElement = js2xml.getElements(responseDoc, inputEndpointsSequenceElement, 'INPUTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  var inputEndpointInstance = {};
                  configurationSetInstance.inputEndpoints.push(inputEndpointInstance);
                  
                  var loadBalancedEndpointSetNameElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCEDENDPOINTSETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (loadBalancedEndpointSetNameElement) {
                    var loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement;
                    inputEndpointInstance.loadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                  }
                  
                  var localPortElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOCALPORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (localPortElement && (localPortElement === null || localPortElement === undefined || localPortElement.length === 0) === false) {
                    var localPortInstance = parseInt(localPortElement, 10);
                    inputEndpointInstance.localPort = localPortInstance;
                  }
                  
                  var nameElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (nameElement) {
                    var nameInstance = nameElement;
                    inputEndpointInstance.name = nameInstance;
                  }
                  
                  var portElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (portElement && (portElement === null || portElement === undefined || portElement.length === 0) === false) {
                    var portInstance = parseInt(portElement, 10);
                    inputEndpointInstance.port = portInstance;
                  }
                  
                  var loadBalancerProbeElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'LOADBALANCERPROBE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (loadBalancerProbeElement) {
                    var loadBalancerProbeInstance = {};
                    inputEndpointInstance.loadBalancerProbe = loadBalancerProbeInstance;
                    
                    var pathElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (pathElement) {
                      var pathInstance = pathElement;
                      loadBalancerProbeInstance.path = pathInstance;
                    }
                    
                    var portElement2 = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PORT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (portElement2) {
                      var portInstance2 = parseInt(portElement2, 10);
                      loadBalancerProbeInstance.port = portInstance2;
                    }
                    
                    var protocolElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (protocolElement) {
                      var protocolInstance = protocolElement;
                      loadBalancerProbeInstance.protocol = protocolInstance;
                    }
                    
                    var intervalInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'INTERVALINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (intervalInSecondsElement && (intervalInSecondsElement === null || intervalInSecondsElement === undefined || intervalInSecondsElement.length === 0) === false) {
                      var intervalInSecondsInstance = parseInt(intervalInSecondsElement, 10);
                      loadBalancerProbeInstance.intervalInSeconds = intervalInSecondsInstance;
                    }
                    
                    var timeoutInSecondsElement = js2xml.getElement(responseDoc, loadBalancerProbeElement, 'TIMEOUTINSECONDS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (timeoutInSecondsElement && (timeoutInSecondsElement === null || timeoutInSecondsElement === undefined || timeoutInSecondsElement.length === 0) === false) {
                      var timeoutInSecondsInstance = parseInt(timeoutInSecondsElement, 10);
                      loadBalancerProbeInstance.timeoutInSeconds = timeoutInSecondsInstance;
                    }
                  }
                  
                  var protocolElement2 = js2xml.getElement(responseDoc, inputEndpointsElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (protocolElement2) {
                    var protocolInstance2 = protocolElement2;
                    inputEndpointInstance.protocol = protocolInstance2;
                  }
                  
                  var vipElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'VIP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (vipElement) {
                    var vipInstance = vipElement;
                    inputEndpointInstance.virtualIPAddress = vipInstance;
                  }
                  
                  var enableDirectServerReturnElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ENABLEDIRECTSERVERRETURN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (enableDirectServerReturnElement && (enableDirectServerReturnElement === null || enableDirectServerReturnElement === undefined || enableDirectServerReturnElement.length === 0) === false) {
                    var enableDirectServerReturnInstance = enableDirectServerReturnElement;
                    inputEndpointInstance.enableDirectServerReturn = enableDirectServerReturnInstance;
                  }
                  
                  var accessControlListElement = js2xml.getElement(responseDoc, inputEndpointsElement, 'ACCESSCONTROLLIST', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (accessControlListElement) {
                    var accessControlListInstance = { rules: [] };
                    inputEndpointInstance.accessControlList = accessControlListInstance;
                    
                    var rulesSequenceElement = js2xml.getElement(responseDoc, accessControlListElement, 'RULES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (rulesSequenceElement) {
                      for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
                        var rulesElement = js2xml.getElements(responseDoc, rulesSequenceElement, 'RULE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
                        var ruleInstance = {};
                        accessControlListInstance.rules.push(ruleInstance);
                        
                        var orderElement = js2xml.getElement(responseDoc, rulesElement, 'ORDER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (orderElement && (orderElement === null || orderElement === undefined || orderElement.length === 0) === false) {
                          var orderInstance = parseInt(orderElement, 10);
                          ruleInstance.order = orderInstance;
                        }
                        
                        var actionElement = js2xml.getElement(responseDoc, rulesElement, 'ACTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (actionElement) {
                          var actionInstance = actionElement;
                          ruleInstance.action = actionInstance;
                        }
                        
                        var remoteSubnetElement = js2xml.getElement(responseDoc, rulesElement, 'REMOTESUBNET', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (remoteSubnetElement) {
                          var remoteSubnetInstance = remoteSubnetElement;
                          ruleInstance.remoteSubnet = remoteSubnetInstance;
                        }
                        
                        var descriptionElement = js2xml.getElement(responseDoc, rulesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                        if (descriptionElement) {
                          var descriptionInstance = descriptionElement;
                          ruleInstance.description = descriptionInstance;
                        }
                      }
                    }
                  }
                }
              }
              
              var subnetNamesSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SUBNETNAMES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (subnetNamesSequenceElement) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex4 = loweredIndex4 + 1) {
                  var subnetNamesElement = js2xml.getElements(responseDoc, subnetNamesSequenceElement, 'SUBNETNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex4];
                  configurationSetInstance.subnetNames.push(subnetNamesElement);
                }
              }
              
              var computerNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'COMPUTERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (computerNameElement) {
                var computerNameInstance = computerNameElement;
                configurationSetInstance.computerName = computerNameInstance;
              }
              
              var adminPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (adminPasswordElement) {
                var adminPasswordInstance = adminPasswordElement;
                configurationSetInstance.adminPassword = adminPasswordInstance;
              }
              
              var resetPasswordOnFirstLogonElement = js2xml.getElement(responseDoc, configurationSetsElement, 'RESETPASSWORDONFIRSTLOGON', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (resetPasswordOnFirstLogonElement && (resetPasswordOnFirstLogonElement === null || resetPasswordOnFirstLogonElement === undefined || resetPasswordOnFirstLogonElement.length === 0) === false) {
                var resetPasswordOnFirstLogonInstance = resetPasswordOnFirstLogonElement;
                configurationSetInstance.resetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
              }
              
              var enableAutomaticUpdatesElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ENABLEAUTOMATICUPDATES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (enableAutomaticUpdatesElement && (enableAutomaticUpdatesElement === null || enableAutomaticUpdatesElement === undefined || enableAutomaticUpdatesElement.length === 0) === false) {
                var enableAutomaticUpdatesInstance = enableAutomaticUpdatesElement;
                configurationSetInstance.enableAutomaticUpdates = enableAutomaticUpdatesInstance;
              }
              
              var timeZoneElement = js2xml.getElement(responseDoc, configurationSetsElement, 'TIMEZONE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (timeZoneElement) {
                var timeZoneInstance = timeZoneElement;
                configurationSetInstance.timeZone = timeZoneInstance;
              }
              
              var domainJoinElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DOMAINJOIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (domainJoinElement) {
                var domainJoinInstance = {};
                configurationSetInstance.domainJoin = domainJoinInstance;
                
                var credentialsElement = js2xml.getElement(responseDoc, domainJoinElement, 'CREDENTIALS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (credentialsElement) {
                  var credentialsInstance = {};
                  domainJoinInstance.credentials = credentialsInstance;
                  
                  var domainElement = js2xml.getElement(responseDoc, credentialsElement, 'DOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (domainElement) {
                    var domainInstance = domainElement;
                    credentialsInstance.domain = domainInstance;
                  }
                  
                  var usernameElement = js2xml.getElement(responseDoc, credentialsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (usernameElement) {
                    var usernameInstance = usernameElement;
                    credentialsInstance.userName = usernameInstance;
                  }
                  
                  var passwordElement = js2xml.getElement(responseDoc, credentialsElement, 'PASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (passwordElement) {
                    var passwordInstance = passwordElement;
                    credentialsInstance.password = passwordInstance;
                  }
                }
                
                var joinDomainElement = js2xml.getElement(responseDoc, domainJoinElement, 'JOINDOMAIN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (joinDomainElement) {
                  var joinDomainInstance = joinDomainElement;
                  domainJoinInstance.domainToJoin = joinDomainInstance;
                }
                
                var machineObjectOUElement = js2xml.getElement(responseDoc, domainJoinElement, 'MACHINEOBJECTOU', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (machineObjectOUElement) {
                  var machineObjectOUInstance = machineObjectOUElement;
                  domainJoinInstance.ldapMachineObjectOU = machineObjectOUInstance;
                }
                
                var provisioningElement = js2xml.getElement(responseDoc, domainJoinElement, 'PROVISIONING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (provisioningElement) {
                  var provisioningInstance = {};
                  domainJoinInstance.provisioning = provisioningInstance;
                  
                  var accountDataElement = js2xml.getElement(responseDoc, provisioningElement, 'ACCOUNTDATA', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (accountDataElement) {
                    var accountDataInstance = accountDataElement;
                    provisioningInstance.accountData = accountDataInstance;
                  }
                }
              }
              
              var storedCertificateSettingsSequenceElement = js2xml.getElement(responseDoc, configurationSetsElement, 'STOREDCERTIFICATESETTINGS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (storedCertificateSettingsSequenceElement) {
                for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex5 = loweredIndex5 + 1) {
                  var storedCertificateSettingsElement = js2xml.getElements(responseDoc, storedCertificateSettingsSequenceElement, 'CERTIFICATESETTING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex5];
                  var certificateSettingInstance = {};
                  configurationSetInstance.storedCertificateSettings.push(certificateSettingInstance);
                  
                  var storeLocationElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORELOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (storeLocationElement) {
                  }
                  
                  var storeNameElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'STORENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (storeNameElement) {
                    var storeNameInstance = storeNameElement;
                    certificateSettingInstance.storeName = storeNameInstance;
                  }
                  
                  var thumbprintElement = js2xml.getElement(responseDoc, storedCertificateSettingsElement, 'THUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                  if (thumbprintElement) {
                    var thumbprintInstance = thumbprintElement;
                    certificateSettingInstance.thumbprint = thumbprintInstance;
                  }
                }
              }
              
              var winRMElement = js2xml.getElement(responseDoc, configurationSetsElement, 'WINRM', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (winRMElement) {
                var winRMInstance = { listeners: [] };
                configurationSetInstance.windowsRemoteManagement = winRMInstance;
                
                var listenersSequenceElement = js2xml.getElement(responseDoc, winRMElement, 'LISTENERS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (listenersSequenceElement) {
                  for (var loweredIndex6 = 0; loweredIndex6 < js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex6 = loweredIndex6 + 1) {
                    var listenersElement = js2xml.getElements(responseDoc, listenersSequenceElement, 'LISTENER', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex6];
                    var listenerInstance = {};
                    winRMInstance.listeners.push(listenerInstance);
                    
                    var protocolElement3 = js2xml.getElement(responseDoc, listenersElement, 'PROTOCOL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (protocolElement3) {
                      var protocolInstance3 = protocolElement3;
                      listenerInstance.listenerType = protocolInstance3;
                    }
                    
                    var certificateThumbprintElement = js2xml.getElement(responseDoc, listenersElement, 'CERTIFICATETHUMBPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (certificateThumbprintElement) {
                      var certificateThumbprintInstance = certificateThumbprintElement;
                      listenerInstance.certificateThumbprint = certificateThumbprintInstance;
                    }
                  }
                }
              }
              
              var adminUsernameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'ADMINUSERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (adminUsernameElement) {
                var adminUsernameInstance = adminUsernameElement;
                configurationSetInstance.adminUserName = adminUsernameInstance;
              }
              
              var hostNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'HOSTNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostNameElement) {
                var hostNameInstance = hostNameElement;
                configurationSetInstance.hostName = hostNameInstance;
              }
              
              var userNameElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (userNameElement) {
                var userNameInstance = userNameElement;
                configurationSetInstance.userName = userNameInstance;
              }
              
              var userPasswordElement = js2xml.getElement(responseDoc, configurationSetsElement, 'USERPASSWORD', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (userPasswordElement) {
                var userPasswordInstance = userPasswordElement;
                configurationSetInstance.userPassword = userPasswordInstance;
              }
              
              var disableSshPasswordAuthenticationElement = js2xml.getElement(responseDoc, configurationSetsElement, 'DISABLESSHPASSWORDAUTHENTICATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (disableSshPasswordAuthenticationElement && (disableSshPasswordAuthenticationElement === null || disableSshPasswordAuthenticationElement === undefined || disableSshPasswordAuthenticationElement.length === 0) === false) {
                var disableSshPasswordAuthenticationInstance = disableSshPasswordAuthenticationElement;
                configurationSetInstance.disableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
              }
              
              var sSHElement = js2xml.getElement(responseDoc, configurationSetsElement, 'SSH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (sSHElement) {
                var sSHInstance = { keyPairs: [], publicKeys: [] };
                configurationSetInstance.sshSettings = sSHInstance;
                
                var publicKeysSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'PUBLICKEYS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (publicKeysSequenceElement) {
                  for (var loweredIndex7 = 0; loweredIndex7 < js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex7 = loweredIndex7 + 1) {
                    var publicKeysElement = js2xml.getElements(responseDoc, publicKeysSequenceElement, 'PUBLICKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex7];
                    var publicKeyInstance = {};
                    sSHInstance.publicKeys.push(publicKeyInstance);
                    
                    var fingerPrintElement = js2xml.getElement(responseDoc, publicKeysElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (fingerPrintElement) {
                      var fingerPrintInstance = fingerPrintElement;
                      publicKeyInstance.fingerprint = fingerPrintInstance;
                    }
                    
                    var pathElement2 = js2xml.getElement(responseDoc, publicKeysElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (pathElement2) {
                      var pathInstance2 = pathElement2;
                      publicKeyInstance.path = pathInstance2;
                    }
                  }
                }
                
                var keyPairsSequenceElement = js2xml.getElement(responseDoc, sSHElement, 'KEYPAIRS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                if (keyPairsSequenceElement) {
                  for (var loweredIndex8 = 0; loweredIndex8 < js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex8 = loweredIndex8 + 1) {
                    var keyPairsElement = js2xml.getElements(responseDoc, keyPairsSequenceElement, 'KEYPAIR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex8];
                    var keyPairInstance = {};
                    sSHInstance.keyPairs.push(keyPairInstance);
                    
                    var fingerPrintElement2 = js2xml.getElement(responseDoc, keyPairsElement, 'FINGERPRINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (fingerPrintElement2) {
                      var fingerPrintInstance2 = fingerPrintElement2;
                      keyPairInstance.fingerprint = fingerPrintInstance2;
                    }
                    
                    var pathElement3 = js2xml.getElement(responseDoc, keyPairsElement, 'PATH', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                    if (pathElement3) {
                      var pathInstance3 = pathElement3;
                      keyPairInstance.path = pathInstance3;
                    }
                  }
                }
              }
            }
          }
          
          var dataVirtualHardDisksSequenceElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'DATAVIRTUALHARDDISKS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (dataVirtualHardDisksSequenceElement) {
            for (var loweredIndex9 = 0; loweredIndex9 < js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex9 = loweredIndex9 + 1) {
              var dataVirtualHardDisksElement = js2xml.getElements(responseDoc, dataVirtualHardDisksSequenceElement, 'DATAVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex9];
              var dataVirtualHardDiskInstance = {};
              result.dataVirtualHardDisks.push(dataVirtualHardDiskInstance);
              
              var hostCachingElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (hostCachingElement && (hostCachingElement === null || hostCachingElement === undefined || hostCachingElement.length === 0) === false) {
                var hostCachingInstance = hostCachingElement;
                dataVirtualHardDiskInstance.hostCaching = hostCachingInstance;
              }
              
              var diskLabelElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (diskLabelElement) {
                var diskLabelInstance = diskLabelElement;
                dataVirtualHardDiskInstance.diskLabel = diskLabelInstance;
              }
              
              var diskNameElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (diskNameElement) {
                var diskNameInstance = diskNameElement;
                dataVirtualHardDiskInstance.diskName = diskNameInstance;
              }
              
              var lunElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LUN', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (lunElement && (lunElement === null || lunElement === undefined || lunElement.length === 0) === false) {
                var lunInstance = parseInt(lunElement, 10);
                dataVirtualHardDiskInstance.logicalUnitNumber = lunInstance;
              }
              
              var logicalDiskSizeInGBElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'LOGICALDISKSIZEINGB', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (logicalDiskSizeInGBElement) {
                var logicalDiskSizeInGBInstance = parseInt(logicalDiskSizeInGBElement, 10);
                dataVirtualHardDiskInstance.logicalDiskSizeInGB = logicalDiskSizeInGBInstance;
              }
              
              var mediaLinkElement = js2xml.getElement(responseDoc, dataVirtualHardDisksElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (mediaLinkElement) {
                var mediaLinkInstance = mediaLinkElement;
                dataVirtualHardDiskInstance.mediaLink = mediaLinkInstance;
              }
            }
          }
          
          var oSVirtualHardDiskElement = js2xml.getElement(responseDoc, persistentVMRoleElement, 'OSVIRTUALHARDDISK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (oSVirtualHardDiskElement) {
            var oSVirtualHardDiskInstance = {};
            result.oSVirtualHardDisk = oSVirtualHardDiskInstance;
            
            var hostCachingElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'HOSTCACHING', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (hostCachingElement2 && (hostCachingElement2 === null || hostCachingElement2 === undefined || hostCachingElement2.length === 0) === false) {
              var hostCachingInstance2 = hostCachingElement2;
              oSVirtualHardDiskInstance.hostCaching = hostCachingInstance2;
            }
            
            var diskLabelElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKLABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (diskLabelElement2) {
              var diskLabelInstance2 = diskLabelElement2;
              oSVirtualHardDiskInstance.diskLabel = diskLabelInstance2;
            }
            
            var diskNameElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'DISKNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (diskNameElement2) {
              var diskNameInstance2 = diskNameElement2;
              oSVirtualHardDiskInstance.diskName = diskNameInstance2;
            }
            
            var mediaLinkElement2 = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'MEDIALINK', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (mediaLinkElement2) {
              var mediaLinkInstance2 = mediaLinkElement2;
              oSVirtualHardDiskInstance.mediaLink = mediaLinkInstance2;
            }
            
            var sourceImageNameElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'SOURCEIMAGENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (sourceImageNameElement) {
              var sourceImageNameInstance = sourceImageNameElement;
              oSVirtualHardDiskInstance.sourceImageName = sourceImageNameInstance;
            }
            
            var osElement = js2xml.getElement(responseDoc, oSVirtualHardDiskElement, 'OS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (osElement) {
              var osInstance = osElement;
              oSVirtualHardDiskInstance.operatingSystem = osInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Download RDP file operation retrieves the Remote Desktop Protocol
   * configuration file from the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine.
   *
   * @param {Function} callback
   *
   * @returns {VirtualMachineGetRemoteDesktopFileResponse} - The Download RDP
   * file operation response.
   */
  VirtualMachineOperations.prototype.getRemoteDesktopFile = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (virtualMachineName === null || virtualMachineName === undefined) {
      return callback(new Error('virtualMachineName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/hostedservices/' + serviceName + '/deployments/' + deploymentName + '/roleinstances/' + virtualMachineName + '/ModelFile?FileType=RDP';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      result.remoteDesktopFile = responseContent;
      
      return callback(null, result);
    });
  };
  
  /**
   * The Restart role operation restarts the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * restart.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.restart = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginRestarting(serviceName, deploymentName, virtualMachineName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Shutdown Role operation shuts down the specified virtual machine.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
   * for more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * shutdown.
   *
   * @param {VirtualMachineShutdownParameters} parameters - The parameters for
   * the shutdown vm operation
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.shutdown = function(serviceName, deploymentName, virtualMachineName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginShutdown(serviceName, deploymentName, virtualMachineName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Shutdown Roles operation stops the specified set of virtual machines.
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineShutdownRolesParameters} parameters - The set of
   * virtual machine roles to shutdown and their post shutdown state.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.shutdownRoles = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginShuttingDownRoles(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Start Role operation starts the specified virtual machine.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of the virtual machine to
   * start.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.start = function(serviceName, deploymentName, virtualMachineName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginStarting(serviceName, deploymentName, virtualMachineName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Start Roles operation starts the specified set of virtual machines.
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineStartRolesParameters} parameters - The set of
   * virtual machine roles to start.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.startRoles = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginStartingRoles(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Update Role operation adds a virtual machine to an existing
   * deployment.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for
   * more information)
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {String} virtualMachineName - The name of your virtual machine.
   *
   * @param {VirtualMachineUpdateParameters} parameters - Parameters supplied
   * to the Update Virtual Machine operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.update = function(serviceName, deploymentName, virtualMachineName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginUpdating(serviceName, deploymentName, virtualMachineName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The UpdateLoadBalancedEndpointSet operation changes the specified
   * load-balanced InputEndpoints on all the roles of an Infrastructure as a
   * Service deployment. Non load-balanced endpoints must be changed using
   * UpdateRole.
   *
   * @param {String} serviceName - The name of your service.
   *
   * @param {String} deploymentName - The name of your deployment.
   *
   * @param {VirtualMachineUpdateLoadBalancedSetParameters} parameters -
   * Parameters supplied to the Update Load Balanced Endpoint Set operation.
   *
   * @param {Function} callback
   *
   * @returns {ComputeOperationStatusResponse} - The response body contains the
   * status of the specified asynchronous operation, indicating whether it has
   * succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  VirtualMachineOperations.prototype.updateLoadBalancedEndpointSet = function(serviceName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginUpdatingLoadBalancedEndpointSet(serviceName, deploymentName, parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return VirtualMachineOperations;
})();