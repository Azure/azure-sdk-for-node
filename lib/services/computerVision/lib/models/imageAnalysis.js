/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Result of AnalyzeImage operation.
 *
 */
class ImageAnalysis {
  /**
   * Create a ImageAnalysis.
   * @member {array} [categories] An array indicating identified categories.
   * @member {object} [adult] An object describing whether the image contains
   * adult-oriented content and/or is racy.
   * @member {boolean} [adult.isAdultContent] A value indicating if the image
   * contains adult-oriented content.
   * @member {boolean} [adult.isRacyContent] A value indicating if the image is
   * racy.
   * @member {number} [adult.adultScore] Score from 0 to 1 that indicates how
   * much the content is considered adult-oriented within the image.
   * @member {number} [adult.racyScore] Score from 0 to 1 that indicates how
   * suggestive is the image.
   * @member {object} [color] An object providing additional metadata
   * describing color attributes.
   * @member {string} [color.dominantColorForeground] Possible dominant
   * foreground color.
   * @member {string} [color.dominantColorBackground] Possible dominant
   * background color.
   * @member {array} [color.dominantColors] An array of possible dominant
   * colors.
   * @member {string} [color.accentColor] Possible accent color.
   * @member {boolean} [color.isBWImg] A value indicating if the image is black
   * and white.
   * @member {object} [imageType] An object providing possible image types and
   * matching confidence levels.
   * @member {number} [imageType.clipArtType] Confidence level that the image
   * is a clip art.
   * @member {number} [imageType.lineDrawingType] Confidence level that the
   * image is a line drawing.
   * @member {array} [tags] A list of tags with confidence level.
   * @member {object} [description] A collection of content tags, along with a
   * list of captions sorted by confidence level, and image metadata.
   * @member {array} [description.tags] A collection of image tags.
   * @member {array} [description.captions] A list of captions, sorted by
   * confidence level.
   * @member {array} [faces] An array of possible faces within the image.
   * @member {array} [objects] Array of objects describing what was detected in
   * the image.
   * @member {string} [requestId] Id of the REST API request.
   * @member {object} [metadata]
   * @member {number} [metadata.width] Image width, in pixels.
   * @member {number} [metadata.height] Image height, in pixels.
   * @member {string} [metadata.format] Image format.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ImageAnalysis
   *
   * @returns {object} metadata of ImageAnalysis
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImageAnalysis',
      type: {
        name: 'Composite',
        className: 'ImageAnalysis',
        modelProperties: {
          categories: {
            required: false,
            nullable: true,
            serializedName: 'categories',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CategoryElementType',
                  type: {
                    name: 'Composite',
                    className: 'Category'
                  }
              }
            }
          },
          adult: {
            required: false,
            serializedName: 'adult',
            type: {
              name: 'Composite',
              className: 'AdultInfo'
            }
          },
          color: {
            required: false,
            serializedName: 'color',
            type: {
              name: 'Composite',
              className: 'ColorInfo'
            }
          },
          imageType: {
            required: false,
            serializedName: 'imageType',
            type: {
              name: 'Composite',
              className: 'ImageType'
            }
          },
          tags: {
            required: false,
            nullable: true,
            serializedName: 'tags',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ImageTagElementType',
                  type: {
                    name: 'Composite',
                    className: 'ImageTag'
                  }
              }
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'Composite',
              className: 'ImageDescriptionDetails'
            }
          },
          faces: {
            required: false,
            nullable: true,
            serializedName: 'faces',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FaceDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'FaceDescription'
                  }
              }
            }
          },
          objects: {
            required: false,
            nullable: true,
            serializedName: 'objects',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DetectedObjectElementType',
                  type: {
                    name: 'Composite',
                    className: 'DetectedObject'
                  }
              }
            }
          },
          requestId: {
            required: false,
            nullable: true,
            serializedName: 'requestId',
            type: {
              name: 'String'
            }
          },
          metadata: {
            required: false,
            serializedName: 'metadata',
            type: {
              name: 'Composite',
              className: 'ImageMetadata'
            }
          }
        }
      }
    };
  }
}

module.exports = ImageAnalysis;
