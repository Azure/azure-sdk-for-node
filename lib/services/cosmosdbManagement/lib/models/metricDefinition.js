/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The definition of a metric.
 *
 */
class MetricDefinition {
  /**
   * Create a MetricDefinition.
   * @property {array} [metricAvailabilities] The list of metric availabilities
   * for the account.
   * @property {string} [primaryAggregationType] The primary aggregation type
   * of the metric. Possible values include: 'None', 'Average', 'Total',
   * 'Minimimum', 'Maximum', 'Last'
   * @property {string} [unit] The unit of the metric. Possible values include:
   * 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
   * 'BytesPerSecond', 'Milliseconds'
   * @property {string} [resourceUri] The resource uri of the database.
   * @property {object} [name] The name information for the metric.
   * @property {string} [name.value] The name of the metric.
   * @property {string} [name.localizedValue] The friendly name of the metric.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MetricDefinition
   *
   * @returns {object} metadata of MetricDefinition
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MetricDefinition',
      type: {
        name: 'Composite',
        className: 'MetricDefinition',
        modelProperties: {
          metricAvailabilities: {
            required: false,
            readOnly: true,
            serializedName: 'metricAvailabilities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MetricAvailabilityElementType',
                  type: {
                    name: 'Composite',
                    className: 'MetricAvailability'
                  }
              }
            }
          },
          primaryAggregationType: {
            required: false,
            readOnly: true,
            serializedName: 'primaryAggregationType',
            type: {
              name: 'String'
            }
          },
          unit: {
            required: false,
            serializedName: 'unit',
            type: {
              name: 'String'
            }
          },
          resourceUri: {
            required: false,
            readOnly: true,
            serializedName: 'resourceUri',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'Composite',
              className: 'MetricName'
            }
          }
        }
      }
    };
  }
}

module.exports = MetricDefinition;
