/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * DatabaseAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface DatabaseAccounts {


    /**
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccount>>;

    /**
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccount>;
    get(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.DatabaseAccount>): void;
    get(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccount>): void;


    /**
     * Patches the properties of an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} updateParameters The tags parameter to patch for the current
     * database account.
     *
     * @param {object} [updateParameters.tags]
     *
     * @param {array} [updateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccount>>;

    /**
     * Patches the properties of an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} updateParameters The tags parameter to patch for the current
     * database account.
     *
     * @param {object} [updateParameters.tags]
     *
     * @param {array} [updateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccount>;
    patch(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, callback: ServiceCallback<models.DatabaseAccount>): void;
    patch(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccount>): void;


    /**
     * Creates or updates an Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} createUpdateParameters The parameters to provide for the
     * current database account.
     *
     * @param {string} [createUpdateParameters.kind] Indicates the type of database
     * account. This can only be set at database account creation. Possible values
     * include: 'GlobalDocumentDB', 'MongoDB', 'Parse'
     *
     * @param {object} [createUpdateParameters.consistencyPolicy] The consistency
     * policy for the Cosmos DB account.
     *
     * @param {string}
     * createUpdateParameters.consistencyPolicy.defaultConsistencyLevel The default
     * consistency level and configuration settings of the Cosmos DB account.
     * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
     * 'Strong', 'ConsistentPrefix'
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxStalenessPrefix] When used with
     * the Bounded Staleness consistency level, this value represents the number of
     * stale requests tolerated. Accepted range for this value is 1 â€“
     * 2,147,483,647. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxIntervalInSeconds] When used
     * with the Bounded Staleness consistency level, this value represents the time
     * amount of staleness (in seconds) tolerated. Accepted range for this value is
     * 5 - 86400. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {array} createUpdateParameters.locations An array that contains the
     * georeplication locations enabled for the Cosmos DB account.
     *
     * @param {string} [createUpdateParameters.ipRangeFilter] Cosmos DB Firewall
     * Support: This value specifies the set of IP addresses or IP address ranges
     * in CIDR form to be included as the allowed list of client IPs for a given
     * database account. IP addresses/ranges must be comma separated and must not
     * contain any spaces.
     *
     * @param {boolean} [createUpdateParameters.isVirtualNetworkFilterEnabled] Flag
     * to indicate whether to enable/disable Virtual Network ACL rules.
     *
     * @param {boolean} [createUpdateParameters.enableAutomaticFailover] Enables
     * automatic failover of the write region in the rare event that the region is
     * unavailable due to an outage. Automatic failover will result in a new write
     * region for the account and is chosen based on the failover priorities
     * configured for the account.
     *
     * @param {array} [createUpdateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {array} [createUpdateParameters.virtualNetworkRules] List of Virtual
     * Network ACL rules configured for the Cosmos DB account.
     *
     * @param {boolean} [createUpdateParameters.enableMultipleWriteLocations]
     * Enables the account to write in multiple locations
     *
     * @param {string} createUpdateParameters.location The location of the resource
     * group to which the resource belongs.
     *
     * @param {object} [createUpdateParameters.tags]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccount>>;

    /**
     * Creates or updates an Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} createUpdateParameters The parameters to provide for the
     * current database account.
     *
     * @param {string} [createUpdateParameters.kind] Indicates the type of database
     * account. This can only be set at database account creation. Possible values
     * include: 'GlobalDocumentDB', 'MongoDB', 'Parse'
     *
     * @param {object} [createUpdateParameters.consistencyPolicy] The consistency
     * policy for the Cosmos DB account.
     *
     * @param {string}
     * createUpdateParameters.consistencyPolicy.defaultConsistencyLevel The default
     * consistency level and configuration settings of the Cosmos DB account.
     * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
     * 'Strong', 'ConsistentPrefix'
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxStalenessPrefix] When used with
     * the Bounded Staleness consistency level, this value represents the number of
     * stale requests tolerated. Accepted range for this value is 1 â€“
     * 2,147,483,647. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxIntervalInSeconds] When used
     * with the Bounded Staleness consistency level, this value represents the time
     * amount of staleness (in seconds) tolerated. Accepted range for this value is
     * 5 - 86400. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {array} createUpdateParameters.locations An array that contains the
     * georeplication locations enabled for the Cosmos DB account.
     *
     * @param {string} [createUpdateParameters.ipRangeFilter] Cosmos DB Firewall
     * Support: This value specifies the set of IP addresses or IP address ranges
     * in CIDR form to be included as the allowed list of client IPs for a given
     * database account. IP addresses/ranges must be comma separated and must not
     * contain any spaces.
     *
     * @param {boolean} [createUpdateParameters.isVirtualNetworkFilterEnabled] Flag
     * to indicate whether to enable/disable Virtual Network ACL rules.
     *
     * @param {boolean} [createUpdateParameters.enableAutomaticFailover] Enables
     * automatic failover of the write region in the rare event that the region is
     * unavailable due to an outage. Automatic failover will result in a new write
     * region for the account and is chosen based on the failover priorities
     * configured for the account.
     *
     * @param {array} [createUpdateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {array} [createUpdateParameters.virtualNetworkRules] List of Virtual
     * Network ACL rules configured for the Cosmos DB account.
     *
     * @param {boolean} [createUpdateParameters.enableMultipleWriteLocations]
     * Enables the account to write in multiple locations
     *
     * @param {string} createUpdateParameters.location The location of the resource
     * group to which the resource belongs.
     *
     * @param {object} [createUpdateParameters.tags]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccount>;
    createOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, callback: ServiceCallback<models.DatabaseAccount>): void;
    createOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccount>): void;


    /**
     * Deletes an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, accountName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A
     * failover priority of 0 indicates a write region. The maximum value for a
     * failover priority = (total number of regions - 1). Failover priority values
     * must be unique for each of the regions in which the database account exists.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} failoverParameters The new failover policies for the
     * database account.
     *
     * @param {array} failoverParameters.failoverPolicies List of failover
     * policies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverPriorityChangeWithHttpOperationResponse(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A
     * failover priority of 0 indicates a write region. The maximum value for a
     * failover priority = (total number of regions - 1). Failover priority values
     * must be unique for each of the regions in which the database account exists.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} failoverParameters The new failover policies for the
     * database account.
     *
     * @param {array} failoverParameters.failoverPolicies List of failover
     * policies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, callback: ServiceCallback<void>): void;
    failoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all the Azure Cosmos DB database accounts available under the
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccountsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccountsListResult>>;

    /**
     * Lists all the Azure Cosmos DB database accounts available under the
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccountsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccountsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccountsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccountsListResult>;
    list(callback: ServiceCallback<models.DatabaseAccountsListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccountsListResult>): void;


    /**
     * Lists all the Azure Cosmos DB database accounts available under the given
     * resource group.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccountsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccountsListResult>>;

    /**
     * Lists all the Azure Cosmos DB database accounts available under the given
     * resource group.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccountsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccountsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccountsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccountsListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DatabaseAccountsListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccountsListResult>): void;


    /**
     * Lists the access keys for the specified Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccountListKeysResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccountListKeysResult>>;

    /**
     * Lists the access keys for the specified Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccountListKeysResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccountListKeysResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccountListKeysResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccountListKeysResult>;
    listKeys(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.DatabaseAccountListKeysResult>): void;
    listKeys(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccountListKeysResult>): void;


    /**
     * Lists the connection strings for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccountListConnectionStringsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionStringsWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccountListConnectionStringsResult>>;

    /**
     * Lists the connection strings for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccountListConnectionStringsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccountListConnectionStringsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccountListConnectionStringsResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionStrings(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccountListConnectionStringsResult>;
    listConnectionStrings(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.DatabaseAccountListConnectionStringsResult>): void;
    listConnectionStrings(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccountListConnectionStringsResult>): void;


    /**
     * Offline the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOffline Cosmos DB region to offline for
     * the database account.
     *
     * @param {string} regionParameterForOffline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    offlineRegionWithHttpOperationResponse(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Offline the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOffline Cosmos DB region to offline for
     * the database account.
     *
     * @param {string} regionParameterForOffline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    offlineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    offlineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, callback: ServiceCallback<void>): void;
    offlineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Online the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOnline Cosmos DB region to online for the
     * database account.
     *
     * @param {string} regionParameterForOnline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    onlineRegionWithHttpOperationResponse(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Online the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOnline Cosmos DB region to online for the
     * database account.
     *
     * @param {string} regionParameterForOnline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    onlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    onlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, callback: ServiceCallback<void>): void;
    onlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccountListReadOnlyKeysResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReadOnlyKeysWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccountListReadOnlyKeysResult>>;

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccountListReadOnlyKeysResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccountListReadOnlyKeysResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccountListReadOnlyKeysResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReadOnlyKeys(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccountListReadOnlyKeysResult>;
    getReadOnlyKeys(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.DatabaseAccountListReadOnlyKeysResult>): void;
    getReadOnlyKeys(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccountListReadOnlyKeysResult>): void;


    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccountListReadOnlyKeysResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listReadOnlyKeysWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccountListReadOnlyKeysResult>>;

    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccountListReadOnlyKeysResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccountListReadOnlyKeysResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccountListReadOnlyKeysResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listReadOnlyKeys(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccountListReadOnlyKeysResult>;
    listReadOnlyKeys(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.DatabaseAccountListReadOnlyKeysResult>): void;
    listReadOnlyKeys(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccountListReadOnlyKeysResult>): void;


    /**
     * Regenerates an access key for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} keyToRegenerate The name of the key to regenerate.
     *
     * @param {string} keyToRegenerate.keyKind The access key to regenerate.
     * Possible values include: 'primary', 'secondary', 'primaryReadonly',
     * 'secondaryReadonly'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeyWithHttpOperationResponse(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerates an access key for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} keyToRegenerate The name of the key to regenerate.
     *
     * @param {string} keyToRegenerate.keyKind The access key to regenerate.
     * Possible values include: 'primary', 'secondary', 'primaryReadonly',
     * 'secondaryReadonly'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, callback: ServiceCallback<void>): void;
    regenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Checks that the Azure Cosmos DB account name already exists. A valid account
     * name may contain only lowercase letters, numbers, and the '-' character, and
     * must be between 3 and 50 characters.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Boolean>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameExistsWithHttpOperationResponse(accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<boolean>>;

    /**
     * Checks that the Azure Cosmos DB account name already exists. A valid account
     * name may contain only lowercase letters, numbers, and the '-' character, and
     * must be between 3 and 50 characters.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Boolean} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Boolean} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameExists(accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<boolean>;
    checkNameExists(accountName: string, callback: ServiceCallback<boolean>): void;
    checkNameExists(accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<boolean>): void;


    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, filter: string, callback: ServiceCallback<models.MetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricListResult>): void;


    /**
     * Retrieves the usages (most recent data) for the given database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsagesResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsagesResult>>;

    /**
     * Retrieves the usages (most recent data) for the given database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsagesResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsagesResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsagesResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, accountName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UsagesResult>;
    listUsages(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.UsagesResult>): void;
    listUsages(resourceGroupName: string, accountName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesResult>): void;


    /**
     * Retrieves metric definitions for the given database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionsListResult>>;

    /**
     * Retrieves metric definitions for the given database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitions(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionsListResult>;
    listMetricDefinitions(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.MetricDefinitionsListResult>): void;
    listMetricDefinitions(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionsListResult>): void;


    /**
     * Patches the properties of an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} updateParameters The tags parameter to patch for the current
     * database account.
     *
     * @param {object} [updateParameters.tags]
     *
     * @param {array} [updateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPatchWithHttpOperationResponse(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccount>>;

    /**
     * Patches the properties of an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} updateParameters The tags parameter to patch for the current
     * database account.
     *
     * @param {object} [updateParameters.tags]
     *
     * @param {array} [updateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPatch(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccount>;
    beginPatch(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, callback: ServiceCallback<models.DatabaseAccount>): void;
    beginPatch(resourceGroupName: string, accountName: string, updateParameters: models.DatabaseAccountPatchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccount>): void;


    /**
     * Creates or updates an Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} createUpdateParameters The parameters to provide for the
     * current database account.
     *
     * @param {string} [createUpdateParameters.kind] Indicates the type of database
     * account. This can only be set at database account creation. Possible values
     * include: 'GlobalDocumentDB', 'MongoDB', 'Parse'
     *
     * @param {object} [createUpdateParameters.consistencyPolicy] The consistency
     * policy for the Cosmos DB account.
     *
     * @param {string}
     * createUpdateParameters.consistencyPolicy.defaultConsistencyLevel The default
     * consistency level and configuration settings of the Cosmos DB account.
     * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
     * 'Strong', 'ConsistentPrefix'
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxStalenessPrefix] When used with
     * the Bounded Staleness consistency level, this value represents the number of
     * stale requests tolerated. Accepted range for this value is 1 â€“
     * 2,147,483,647. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxIntervalInSeconds] When used
     * with the Bounded Staleness consistency level, this value represents the time
     * amount of staleness (in seconds) tolerated. Accepted range for this value is
     * 5 - 86400. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {array} createUpdateParameters.locations An array that contains the
     * georeplication locations enabled for the Cosmos DB account.
     *
     * @param {string} [createUpdateParameters.ipRangeFilter] Cosmos DB Firewall
     * Support: This value specifies the set of IP addresses or IP address ranges
     * in CIDR form to be included as the allowed list of client IPs for a given
     * database account. IP addresses/ranges must be comma separated and must not
     * contain any spaces.
     *
     * @param {boolean} [createUpdateParameters.isVirtualNetworkFilterEnabled] Flag
     * to indicate whether to enable/disable Virtual Network ACL rules.
     *
     * @param {boolean} [createUpdateParameters.enableAutomaticFailover] Enables
     * automatic failover of the write region in the rare event that the region is
     * unavailable due to an outage. Automatic failover will result in a new write
     * region for the account and is chosen based on the failover priorities
     * configured for the account.
     *
     * @param {array} [createUpdateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {array} [createUpdateParameters.virtualNetworkRules] List of Virtual
     * Network ACL rules configured for the Cosmos DB account.
     *
     * @param {boolean} [createUpdateParameters.enableMultipleWriteLocations]
     * Enables the account to write in multiple locations
     *
     * @param {string} createUpdateParameters.location The location of the resource
     * group to which the resource belongs.
     *
     * @param {object} [createUpdateParameters.tags]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAccount>>;

    /**
     * Creates or updates an Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} createUpdateParameters The parameters to provide for the
     * current database account.
     *
     * @param {string} [createUpdateParameters.kind] Indicates the type of database
     * account. This can only be set at database account creation. Possible values
     * include: 'GlobalDocumentDB', 'MongoDB', 'Parse'
     *
     * @param {object} [createUpdateParameters.consistencyPolicy] The consistency
     * policy for the Cosmos DB account.
     *
     * @param {string}
     * createUpdateParameters.consistencyPolicy.defaultConsistencyLevel The default
     * consistency level and configuration settings of the Cosmos DB account.
     * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
     * 'Strong', 'ConsistentPrefix'
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxStalenessPrefix] When used with
     * the Bounded Staleness consistency level, this value represents the number of
     * stale requests tolerated. Accepted range for this value is 1 â€“
     * 2,147,483,647. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {number}
     * [createUpdateParameters.consistencyPolicy.maxIntervalInSeconds] When used
     * with the Bounded Staleness consistency level, this value represents the time
     * amount of staleness (in seconds) tolerated. Accepted range for this value is
     * 5 - 86400. Required when defaultConsistencyPolicy is set to
     * 'BoundedStaleness'.
     *
     * @param {array} createUpdateParameters.locations An array that contains the
     * georeplication locations enabled for the Cosmos DB account.
     *
     * @param {string} [createUpdateParameters.ipRangeFilter] Cosmos DB Firewall
     * Support: This value specifies the set of IP addresses or IP address ranges
     * in CIDR form to be included as the allowed list of client IPs for a given
     * database account. IP addresses/ranges must be comma separated and must not
     * contain any spaces.
     *
     * @param {boolean} [createUpdateParameters.isVirtualNetworkFilterEnabled] Flag
     * to indicate whether to enable/disable Virtual Network ACL rules.
     *
     * @param {boolean} [createUpdateParameters.enableAutomaticFailover] Enables
     * automatic failover of the write region in the rare event that the region is
     * unavailable due to an outage. Automatic failover will result in a new write
     * region for the account and is chosen based on the failover priorities
     * configured for the account.
     *
     * @param {array} [createUpdateParameters.capabilities] List of Cosmos DB
     * capabilities for the account
     *
     * @param {array} [createUpdateParameters.virtualNetworkRules] List of Virtual
     * Network ACL rules configured for the Cosmos DB account.
     *
     * @param {boolean} [createUpdateParameters.enableMultipleWriteLocations]
     * Enables the account to write in multiple locations
     *
     * @param {string} createUpdateParameters.location The location of the resource
     * group to which the resource belongs.
     *
     * @param {object} [createUpdateParameters.tags]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAccount>;
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, callback: ServiceCallback<models.DatabaseAccount>): void;
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: models.DatabaseAccountCreateUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAccount>): void;


    /**
     * Deletes an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing Azure Cosmos DB database account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, accountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, accountName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A
     * failover priority of 0 indicates a write region. The maximum value for a
     * failover priority = (total number of regions - 1). Failover priority values
     * must be unique for each of the regions in which the database account exists.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} failoverParameters The new failover policies for the
     * database account.
     *
     * @param {array} failoverParameters.failoverPolicies List of failover
     * policies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverPriorityChangeWithHttpOperationResponse(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A
     * failover priority of 0 indicates a write region. The maximum value for a
     * failover priority = (total number of regions - 1). Failover priority values
     * must be unique for each of the regions in which the database account exists.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} failoverParameters The new failover policies for the
     * database account.
     *
     * @param {array} failoverParameters.failoverPolicies List of failover
     * policies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginFailoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, callback: ServiceCallback<void>): void;
    beginFailoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: models.FailoverPolicies, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Offline the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOffline Cosmos DB region to offline for
     * the database account.
     *
     * @param {string} regionParameterForOffline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginOfflineRegionWithHttpOperationResponse(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Offline the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOffline Cosmos DB region to offline for
     * the database account.
     *
     * @param {string} regionParameterForOffline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginOfflineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginOfflineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, callback: ServiceCallback<void>): void;
    beginOfflineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: models.RegionForOnlineOffline, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Online the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOnline Cosmos DB region to online for the
     * database account.
     *
     * @param {string} regionParameterForOnline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginOnlineRegionWithHttpOperationResponse(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Online the specified region for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} regionParameterForOnline Cosmos DB region to online for the
     * database account.
     *
     * @param {string} regionParameterForOnline.region Cosmos DB region, with
     * spaces between words and each word capitalized.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginOnlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginOnlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, callback: ServiceCallback<void>): void;
    beginOnlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: models.RegionForOnlineOffline, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Regenerates an access key for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} keyToRegenerate The name of the key to regenerate.
     *
     * @param {string} keyToRegenerate.keyKind The access key to regenerate.
     * Possible values include: 'primary', 'secondary', 'primaryReadonly',
     * 'secondaryReadonly'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRegenerateKeyWithHttpOperationResponse(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerates an access key for the specified Azure Cosmos DB database
     * account.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {object} keyToRegenerate The name of the key to regenerate.
     *
     * @param {string} keyToRegenerate.keyKind The access key to regenerate.
     * Possible values include: 'primary', 'secondary', 'primaryReadonly',
     * 'secondaryReadonly'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRegenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRegenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, callback: ServiceCallback<void>): void;
    beginRegenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: models.DatabaseAccountRegenerateKeyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Cosmos DB Resource Provider operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Cosmos DB Resource Provider operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available Cosmos DB Resource Provider operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Cosmos DB Resource Provider operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Database
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface Database {


    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account and database.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account and database.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, filter: string, callback: ServiceCallback<models.MetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricListResult>): void;


    /**
     * Retrieves the usages (most recent data) for the given database.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsagesResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsagesResult>>;

    /**
     * Retrieves the usages (most recent data) for the given database.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsagesResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsagesResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsagesResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UsagesResult>;
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, callback: ServiceCallback<models.UsagesResult>): void;
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesResult>): void;


    /**
     * Retrieves metric definitions for the given database.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionsListResult>>;

    /**
     * Retrieves metric definitions for the given database.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionsListResult>;
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, callback: ServiceCallback<models.MetricDefinitionsListResult>): void;
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionsListResult>): void;
}

/**
 * @class
 * Collection
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface Collection {


    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account and collection.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account and collection.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, callback: ServiceCallback<models.MetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricListResult>): void;


    /**
     * Retrieves the usages (most recent storage data) for the given collection.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsagesResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsagesResult>>;

    /**
     * Retrieves the usages (most recent storage data) for the given collection.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsagesResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsagesResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsagesResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UsagesResult>;
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, callback: ServiceCallback<models.UsagesResult>): void;
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesResult>): void;


    /**
     * Retrieves metric definitions for the given collection.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionsListResult>>;

    /**
     * Retrieves metric definitions for the given collection.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionsListResult>;
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, callback: ServiceCallback<models.MetricDefinitionsListResult>): void;
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionsListResult>): void;
}

/**
 * @class
 * CollectionRegion
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface CollectionRegion {


    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account, collection and region.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account, collection and region.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, callback: ServiceCallback<models.MetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricListResult>): void;
}

/**
 * @class
 * DatabaseAccountRegion
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface DatabaseAccountRegion {


    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account and region.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, region: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account and region.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, region: string, filter: string, callback: ServiceCallback<models.MetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, region: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricListResult>): void;
}

/**
 * @class
 * PercentileSourceTarget
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface PercentileSourceTarget {


    /**
     * Retrieves the metrics determined by the given filter for the given account,
     * source and target region. This url is only for PBS and Replication Latency
     * data
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} sourceRegion Source region from which data is written.
     * Cosmos DB region, with spaces between words and each word capitalized.
     *
     * @param {string} targetRegion Target region to which data is written. Cosmos
     * DB region, with spaces between words and each word capitalized.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PercentileMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, sourceRegion: string, targetRegion: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PercentileMetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given account,
     * source and target region. This url is only for PBS and Replication Latency
     * data
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} sourceRegion Source region from which data is written.
     * Cosmos DB region, with spaces between words and each word capitalized.
     *
     * @param {string} targetRegion Target region to which data is written. Cosmos
     * DB region, with spaces between words and each word capitalized.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PercentileMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PercentileMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PercentileMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, sourceRegion: string, targetRegion: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PercentileMetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, sourceRegion: string, targetRegion: string, filter: string, callback: ServiceCallback<models.PercentileMetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, sourceRegion: string, targetRegion: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PercentileMetricListResult>): void;
}

/**
 * @class
 * PercentileTarget
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface PercentileTarget {


    /**
     * Retrieves the metrics determined by the given filter for the given account
     * target region. This url is only for PBS and Replication Latency data
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} targetRegion Target region to which data is written. Cosmos
     * DB region, with spaces between words and each word capitalized.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PercentileMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, targetRegion: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PercentileMetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given account
     * target region. This url is only for PBS and Replication Latency data
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} targetRegion Target region to which data is written. Cosmos
     * DB region, with spaces between words and each word capitalized.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PercentileMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PercentileMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PercentileMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, targetRegion: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PercentileMetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, targetRegion: string, filter: string, callback: ServiceCallback<models.PercentileMetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, targetRegion: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PercentileMetricListResult>): void;
}

/**
 * @class
 * Percentile
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface Percentile {


    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account. This url is only for PBS and Replication Latency data
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PercentileMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PercentileMetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given database
     * account. This url is only for PBS and Replication Latency data
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PercentileMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PercentileMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PercentileMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PercentileMetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, filter: string, callback: ServiceCallback<models.PercentileMetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PercentileMetricListResult>): void;
}

/**
 * @class
 * CollectionPartitionRegion
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface CollectionPartitionRegion {


    /**
     * Retrieves the metrics determined by the given filter for the given
     * collection and region, split by partition.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionMetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given
     * collection and region, split by partition.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionMetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, callback: ServiceCallback<models.PartitionMetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionMetricListResult>): void;
}

/**
 * @class
 * CollectionPartition
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface CollectionPartition {


    /**
     * Retrieves the metrics determined by the given filter for the given
     * collection, split by partition.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionMetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given
     * collection, split by partition.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionMetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, callback: ServiceCallback<models.PartitionMetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionMetricListResult>): void;


    /**
     * Retrieves the usages (most recent storage data) for the given collection,
     * split by partition.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionUsagesResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionUsagesResult>>;

    /**
     * Retrieves the usages (most recent storage data) for the given collection,
     * split by partition.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that describes a
     * subset of usages to return. The supported parameter is name.value (name of
     * the metric, can have an or of multiple names).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionUsagesResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionUsagesResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionUsagesResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionUsagesResult>;
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, callback: ServiceCallback<models.PartitionUsagesResult>): void;
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionUsagesResult>): void;
}

/**
 * @class
 * PartitionKeyRangeId
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface PartitionKeyRangeId {


    /**
     * Retrieves the metrics determined by the given filter for the given partition
     * key range id.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} partitionKeyRangeId Partition Key Range Id for which to get
     * data.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionMetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given partition
     * key range id.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} partitionKeyRangeId Partition Key Range Id for which to get
     * data.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionMetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, callback: ServiceCallback<models.PartitionMetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionMetricListResult>): void;
}

/**
 * @class
 * PartitionKeyRangeIdRegion
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CosmosDBManagementClient.
 */
export interface PartitionKeyRangeIdRegion {


    /**
     * Retrieves the metrics determined by the given filter for the given partition
     * key range id and region.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} partitionKeyRangeId Partition Key Range Id for which to get
     * data.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PartitionMetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PartitionMetricListResult>>;

    /**
     * Retrieves the metrics determined by the given filter for the given partition
     * key range id and region.
     *
     * @param {string} resourceGroupName Name of an Azure resource group.
     *
     * @param {string} accountName Cosmos DB database account name.
     *
     * @param {string} region Cosmos DB region, with spaces between words and each
     * word capitalized.
     *
     * @param {string} databaseRid Cosmos DB database rid.
     *
     * @param {string} collectionRid Cosmos DB collection rid.
     *
     * @param {string} partitionKeyRangeId Partition Key Range Id for which to get
     * data.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return. The parameters that can be filtered are name.value (name
     * of the metric, can have an or of multiple names), startTime, endTime, and
     * timeGrain. The supported operator is eq.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PartitionMetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PartitionMetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PartitionMetricListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PartitionMetricListResult>;
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, callback: ServiceCallback<models.PartitionMetricListResult>): void;
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PartitionMetricListResult>): void;
}
