/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a EntireDetectResponse.
 */
class EntireDetectResponse {
  /**
   * Create a EntireDetectResponse.
   * @property {number} period Frequency extracted from the series, zero means
   * no recurrent pattern has been found.
   * @property {array} expectedValues ExpectedValues contain expected value for
   * each input point. The index of the array is consistent with the input
   * series.
   * @property {array} upperMargins UpperMargins contain upper margin of each
   * input point. UpperMargin is used to calculate upperBoundary, which equals
   * to expectedValue + (100 - sensitivity)*upperMargin. Anomalies in response
   * can be filtered by upperBoundary and lowerBoundary. By adjusting
   * sensitivity value, less significant anomalies can be filtered in client
   * side. The index of the array is consistent with the input series.
   * @property {array} lowerMargins LowerMargins contain lower margin of each
   * input point. LowerMargin is used to calculate lowerBoundary, which equals
   * to expectedValue - (100 - sensitivity)*lowerMargin. Points between the
   * boundary can be marked as normal ones in client side. The index of the
   * array is consistent with the input series.
   * @property {array} isAnomaly IsAnomaly contains anomaly properties for each
   * input point. True means an anomaly either negative or positive has been
   * detected. The index of the array is consistent with the input series.
   * @property {array} isNegativeAnomaly IsNegativeAnomaly contains anomaly
   * status in negative direction for each input point. True means a negative
   * anomaly has been detected. A negative anomaly means the point is detected
   * as an anomaly and its real value is smaller than the expected one. The
   * index of the array is consistent with the input series.
   * @property {array} isPositiveAnomaly IsPositiveAnomaly contain anomaly
   * status in positive direction for each input point. True means a positive
   * anomaly has been detected. A positive anomaly means the point is detected
   * as an anomaly and its real value is larger than the expected one. The
   * index of the array is consistent with the input series.
   */
  constructor() {
  }

  /**
   * Defines the metadata of EntireDetectResponse
   *
   * @returns {object} metadata of EntireDetectResponse
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EntireDetectResponse',
      type: {
        name: 'Composite',
        className: 'EntireDetectResponse',
        modelProperties: {
          period: {
            required: true,
            serializedName: 'period',
            type: {
              name: 'Number'
            }
          },
          expectedValues: {
            required: true,
            serializedName: 'expectedValues',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          upperMargins: {
            required: true,
            serializedName: 'upperMargins',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          lowerMargins: {
            required: true,
            serializedName: 'lowerMargins',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          isAnomaly: {
            required: true,
            serializedName: 'isAnomaly',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'BooleanElementType',
                  type: {
                    name: 'Boolean'
                  }
              }
            }
          },
          isNegativeAnomaly: {
            required: true,
            serializedName: 'isNegativeAnomaly',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'BooleanElementType',
                  type: {
                    name: 'Boolean'
                  }
              }
            }
          },
          isPositiveAnomaly: {
            required: true,
            serializedName: 'isPositiveAnomaly',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'BooleanElementType',
                  type: {
                    name: 'Boolean'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = EntireDetectResponse;
