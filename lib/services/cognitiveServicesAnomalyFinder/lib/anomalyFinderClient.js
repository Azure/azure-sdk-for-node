/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Find anomalies for the entire series in batch.
 *
 * The operation will generate a model using the entire series, each point will
 * be detected with the same model. In this method, points before and after a
 * certain point will be used to determine whether it's an anomaly. The entire
 * detection can give user an overall status of the time series.
 *
 * @param {object} body Time series points and period if needed. Advanced model
 * parameters can also be set in the request.
 *
 * @param {array} body.series Time series data points. Points should be sorted
 * by timestamp in ascending order to match the anomaly detection result. If
 * the data is not sorted correctly or there is duplicated timestamp, the API
 * will not work. In such case, an error message will be returned.
 *
 * @param {string} body.granularity Can only be one of yearly, monthly, weekly,
 * daily, hourly or minutely. Granularity is used for verify whether input
 * series is valid. Possible values include: 'yearly', 'monthly', 'weekly',
 * 'daily', 'hourly', 'minutely'
 *
 * @param {number} [body.customInterval] Custom Interval is used to set
 * non-standard time interval, for example, if the series is 5 minutes, request
 * can be set as {"granularity":"minutely", "customInterval":5}.
 *
 * @param {number} [body.period] Optional argument, periodic value of a time
 * series. If the value is null or does not present, the API will determine the
 * period automatically.
 *
 * @param {number} [body.maxAnomalyRatio] Optional argument, advanced model
 * parameter, max anomaly ratio in a time series.
 *
 * @param {number} [body.sensitivity] Optional argument, advanced model
 * parameter, between 0-99, the lower the value is, the larger the margin value
 * will be which means less anomalies will be accepted.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EntireDetectResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _entireDetect(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.endpoint === null || this.endpoint === undefined || typeof this.endpoint.valueOf() !== 'string') {
      throw new Error('this.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'timeseries/entire/detect';
  requestUrl = requestUrl.replace('{Endpoint}', this.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['Request']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EntireDetectResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Detect anomaly status of the latest point in time series.
 *
 * The operation will generate a model using points before the latest one, In
 * this method, only history points are used for determine whether the target
 * point is an anomaly. Latest point detecting matches the scenario of
 * real-time monitoring of business metrics.
 *
 * @param {object} body Time series points and period if needed. Advanced model
 * parameters can also be set in the request.
 *
 * @param {array} body.series Time series data points. Points should be sorted
 * by timestamp in ascending order to match the anomaly detection result. If
 * the data is not sorted correctly or there is duplicated timestamp, the API
 * will not work. In such case, an error message will be returned.
 *
 * @param {string} body.granularity Can only be one of yearly, monthly, weekly,
 * daily, hourly or minutely. Granularity is used for verify whether input
 * series is valid. Possible values include: 'yearly', 'monthly', 'weekly',
 * 'daily', 'hourly', 'minutely'
 *
 * @param {number} [body.customInterval] Custom Interval is used to set
 * non-standard time interval, for example, if the series is 5 minutes, request
 * can be set as {"granularity":"minutely", "customInterval":5}.
 *
 * @param {number} [body.period] Optional argument, periodic value of a time
 * series. If the value is null or does not present, the API will determine the
 * period automatically.
 *
 * @param {number} [body.maxAnomalyRatio] Optional argument, advanced model
 * parameter, max anomaly ratio in a time series.
 *
 * @param {number} [body.sensitivity] Optional argument, advanced model
 * parameter, between 0-99, the lower the value is, the larger the margin value
 * will be which means less anomalies will be accepted.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link LastDetectResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _lastDetect(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.endpoint === null || this.endpoint === undefined || typeof this.endpoint.valueOf() !== 'string') {
      throw new Error('this.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'timeseries/last/detect';
  requestUrl = requestUrl.replace('{Endpoint}', this.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['Request']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['LastDetectResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a AnomalyFinderClient. */
class AnomalyFinderClient extends ServiceClient {
  /**
   * Create a AnomalyFinderClient.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, endpoint, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (endpoint === null || endpoint === undefined) {
      throw new Error('\'endpoint\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = '{Endpoint}/anomalyfinder/v2.0';
    this.credentials = credentials;
    this.endpoint = endpoint;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._entireDetect = _entireDetect;
    this._lastDetect = _lastDetect;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Find anomalies for the entire series in batch.
   *
   * The operation will generate a model using the entire series, each point will
   * be detected with the same model. In this method, points before and after a
   * certain point will be used to determine whether it's an anomaly. The entire
   * detection can give user an overall status of the time series.
   *
   * @param {object} body Time series points and period if needed. Advanced model
   * parameters can also be set in the request.
   *
   * @param {array} body.series Time series data points. Points should be sorted
   * by timestamp in ascending order to match the anomaly detection result. If
   * the data is not sorted correctly or there is duplicated timestamp, the API
   * will not work. In such case, an error message will be returned.
   *
   * @param {string} body.granularity Can only be one of yearly, monthly, weekly,
   * daily, hourly or minutely. Granularity is used for verify whether input
   * series is valid. Possible values include: 'yearly', 'monthly', 'weekly',
   * 'daily', 'hourly', 'minutely'
   *
   * @param {number} [body.customInterval] Custom Interval is used to set
   * non-standard time interval, for example, if the series is 5 minutes, request
   * can be set as {"granularity":"minutely", "customInterval":5}.
   *
   * @param {number} [body.period] Optional argument, periodic value of a time
   * series. If the value is null or does not present, the API will determine the
   * period automatically.
   *
   * @param {number} [body.maxAnomalyRatio] Optional argument, advanced model
   * parameter, max anomaly ratio in a time series.
   *
   * @param {number} [body.sensitivity] Optional argument, advanced model
   * parameter, between 0-99, the lower the value is, the larger the margin value
   * will be which means less anomalies will be accepted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntireDetectResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  entireDetectWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._entireDetect(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Find anomalies for the entire series in batch.
   *
   * The operation will generate a model using the entire series, each point will
   * be detected with the same model. In this method, points before and after a
   * certain point will be used to determine whether it's an anomaly. The entire
   * detection can give user an overall status of the time series.
   *
   * @param {object} body Time series points and period if needed. Advanced model
   * parameters can also be set in the request.
   *
   * @param {array} body.series Time series data points. Points should be sorted
   * by timestamp in ascending order to match the anomaly detection result. If
   * the data is not sorted correctly or there is duplicated timestamp, the API
   * will not work. In such case, an error message will be returned.
   *
   * @param {string} body.granularity Can only be one of yearly, monthly, weekly,
   * daily, hourly or minutely. Granularity is used for verify whether input
   * series is valid. Possible values include: 'yearly', 'monthly', 'weekly',
   * 'daily', 'hourly', 'minutely'
   *
   * @param {number} [body.customInterval] Custom Interval is used to set
   * non-standard time interval, for example, if the series is 5 minutes, request
   * can be set as {"granularity":"minutely", "customInterval":5}.
   *
   * @param {number} [body.period] Optional argument, periodic value of a time
   * series. If the value is null or does not present, the API will determine the
   * period automatically.
   *
   * @param {number} [body.maxAnomalyRatio] Optional argument, advanced model
   * parameter, max anomaly ratio in a time series.
   *
   * @param {number} [body.sensitivity] Optional argument, advanced model
   * parameter, between 0-99, the lower the value is, the larger the margin value
   * will be which means less anomalies will be accepted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EntireDetectResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntireDetectResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  entireDetect(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._entireDetect(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._entireDetect(body, options, optionalCallback);
    }
  }

  /**
   * @summary Detect anomaly status of the latest point in time series.
   *
   * The operation will generate a model using points before the latest one, In
   * this method, only history points are used for determine whether the target
   * point is an anomaly. Latest point detecting matches the scenario of
   * real-time monitoring of business metrics.
   *
   * @param {object} body Time series points and period if needed. Advanced model
   * parameters can also be set in the request.
   *
   * @param {array} body.series Time series data points. Points should be sorted
   * by timestamp in ascending order to match the anomaly detection result. If
   * the data is not sorted correctly or there is duplicated timestamp, the API
   * will not work. In such case, an error message will be returned.
   *
   * @param {string} body.granularity Can only be one of yearly, monthly, weekly,
   * daily, hourly or minutely. Granularity is used for verify whether input
   * series is valid. Possible values include: 'yearly', 'monthly', 'weekly',
   * 'daily', 'hourly', 'minutely'
   *
   * @param {number} [body.customInterval] Custom Interval is used to set
   * non-standard time interval, for example, if the series is 5 minutes, request
   * can be set as {"granularity":"minutely", "customInterval":5}.
   *
   * @param {number} [body.period] Optional argument, periodic value of a time
   * series. If the value is null or does not present, the API will determine the
   * period automatically.
   *
   * @param {number} [body.maxAnomalyRatio] Optional argument, advanced model
   * parameter, max anomaly ratio in a time series.
   *
   * @param {number} [body.sensitivity] Optional argument, advanced model
   * parameter, between 0-99, the lower the value is, the larger the margin value
   * will be which means less anomalies will be accepted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<LastDetectResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  lastDetectWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._lastDetect(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Detect anomaly status of the latest point in time series.
   *
   * The operation will generate a model using points before the latest one, In
   * this method, only history points are used for determine whether the target
   * point is an anomaly. Latest point detecting matches the scenario of
   * real-time monitoring of business metrics.
   *
   * @param {object} body Time series points and period if needed. Advanced model
   * parameters can also be set in the request.
   *
   * @param {array} body.series Time series data points. Points should be sorted
   * by timestamp in ascending order to match the anomaly detection result. If
   * the data is not sorted correctly or there is duplicated timestamp, the API
   * will not work. In such case, an error message will be returned.
   *
   * @param {string} body.granularity Can only be one of yearly, monthly, weekly,
   * daily, hourly or minutely. Granularity is used for verify whether input
   * series is valid. Possible values include: 'yearly', 'monthly', 'weekly',
   * 'daily', 'hourly', 'minutely'
   *
   * @param {number} [body.customInterval] Custom Interval is used to set
   * non-standard time interval, for example, if the series is 5 minutes, request
   * can be set as {"granularity":"minutely", "customInterval":5}.
   *
   * @param {number} [body.period] Optional argument, periodic value of a time
   * series. If the value is null or does not present, the API will determine the
   * period automatically.
   *
   * @param {number} [body.maxAnomalyRatio] Optional argument, advanced model
   * parameter, max anomaly ratio in a time series.
   *
   * @param {number} [body.sensitivity] Optional argument, advanced model
   * parameter, between 0-99, the lower the value is, the larger the margin value
   * will be which means less anomalies will be accepted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {LastDetectResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link LastDetectResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  lastDetect(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._lastDetect(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._lastDetect(body, options, optionalCallback);
    }
  }

}

module.exports = AnomalyFinderClient;
module.exports['default'] = AnomalyFinderClient;
module.exports.AnomalyFinderClient = AnomalyFinderClient;
module.exports.AnomalyFinderModels = models;
