/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Details for the destination account.
 *
 */
class DestinationAccountDetails {
  /**
   * Create a DestinationAccountDetails.
   * @member {string} accountId Destination storage account id.
   * @member {string} [sharedAccessSignature] Shared access signature for the
   * storage account.
   * @member {string} [accountType] Account type. Possible values include:
   * 'UnknownType', 'GeneralPurposeStorage', 'BlobStorage'
   * @member {string} [storageAccessTier] Access tier of the account. Possible
   * values include: 'Invalid', 'Hot', 'Cool', 'Cold'
   * @member {string} [storagePerformanceTier] Performance tier of the account.
   * Possible values include: 'Standard', 'Premium'
   */
  constructor() {
  }

  /**
   * Defines the metadata of DestinationAccountDetails
   *
   * @returns {object} metadata of DestinationAccountDetails
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DestinationAccountDetails',
      type: {
        name: 'Composite',
        className: 'DestinationAccountDetails',
        modelProperties: {
          accountId: {
            required: true,
            serializedName: 'accountId',
            type: {
              name: 'String'
            }
          },
          sharedAccessSignature: {
            required: false,
            serializedName: 'sharedAccessSignature',
            type: {
              name: 'String'
            }
          },
          accountType: {
            required: false,
            serializedName: 'accountType',
            type: {
              name: 'Enum',
              allowedValues: [ 'UnknownType', 'GeneralPurposeStorage', 'BlobStorage' ]
            }
          },
          storageAccessTier: {
            required: false,
            serializedName: 'storageAccessTier',
            type: {
              name: 'Enum',
              allowedValues: [ 'Invalid', 'Hot', 'Cool', 'Cold' ]
            }
          },
          storagePerformanceTier: {
            required: false,
            serializedName: 'storagePerformanceTier',
            type: {
              name: 'Enum',
              allowedValues: [ 'Standard', 'Premium' ]
            }
          }
        }
      }
    };
  }
}

module.exports = DestinationAccountDetails;
