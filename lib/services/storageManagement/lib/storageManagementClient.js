/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var util = require('util');
var azureCommon = require('azure-common');
var xml = azureCommon.xml2js;
var js2xml = azureCommon.js2xml;
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var StorageManagementClient = ( /** @lends StorageManagementClient */ function() {
  /**
   * @class
   * The Service Management API provides programmatic access to much of the
   * functionality available through the Management Portal. The Service
   * Management API is a REST API. All API operations are performed over SSL
   * and mutually authenticated using X.509 v3 certificates.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460799.aspx for
   * more information)
   * Initializes a new instance of the StorageManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials When you create a
   * Windows Azure subscription, it is uniquely identified by a subscription
   * ID. The subscription ID forms part of the URI for every call that you
   * make to the Service Management API.  The Windows Azure Service
   * ManagementAPI use mutual authentication of management certificates over
   * SSL to ensure that a request made to the service is secure.  No anonymous
   * requests are allowed.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] The URI used as the base for all Service
   * Management requests.
   */
  function StorageManagementClient(credentials, baseUri) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    StorageManagementClient['super_'].call(this, credentials);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    /**
     * Provides an instance of the
     * [StorageAccountOperations](-StorageAccountOperations.html) object.
     * @type {object}
     */
    this.storageAccounts = new StorageAccountOperations(this);
  }
  
  util.inherits(StorageManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of thespecified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
   * more information)
   * 
   * @param {string} requestId The request ID for the request you wish to
   * track. The request ID is returned in the x-ms-request-id response header
   * for every request.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageManagementClient.prototype.getOperationStatus = function(requestId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (requestId === null || requestId === undefined) {
      return callback(new Error('requestId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + '/' + this.credentials.subscriptionId + '/operations/' + requestId;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var operationElement = js2xml.getElement(responseDoc, responseDoc, 'OPERATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (operationElement) {
          var idElement = js2xml.getElement(responseDoc, operationElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, operationElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var httpStatusCodeElement = js2xml.getElement(responseDoc, operationElement, 'HTTPSTATUSCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpStatusCodeElement) {
            var httpStatusCodeInstance = httpStatusCodeElement;
            result.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorElement = js2xml.getElement(responseDoc, operationElement, 'ERROR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (errorElement) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeElement = js2xml.getElement(responseDoc, errorElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (codeElement) {
              var codeInstance = codeElement;
              errorInstance.code = codeInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, errorElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              errorInstance.message = messageInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  return StorageManagementClient;
})();
exports.StorageManagementClient = StorageManagementClient;

var StorageAccountOperations = ( /** @lends StorageAccountOperations */ function() {
  /**
   * @class
   * The Service Management API includes operations for managing the storage
   * accounts beneath your subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460790.aspx for
   * more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [StorageManagementClient] {@link
   * StorageManagementClient~StorageManagementClient}.
   * See [storageAccounts] {@link
   * StorageManagementClient~StorageManagementClient#storageAccounts}.
   * Initializes a new instance of the StorageAccountOperations class.
   * @constructor
   * 
   * @param {StorageManagementClient} client Reference to the service client.
   */
  function StorageAccountOperations(client) {
    this.client = client;
  }
  
  /**
   * The Create Storage Account operation creates a new storage account in
   * Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx for
   * more information)
   * 
   * @param {StorageAccountCreateParameters} parameters Parameters supplied to
   * the Create Storage Account operation.
   * 
   * @param {string} parameters.serviceName Required. A name for the storage
   * account that is unique within Windows Azure. Storage account names must
   * be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.  This name is the DNS prefix name and can be used to access
   * blobs, queues, and tables in the storage account.  For example:
   * http://ServiceName.blob.core.windows.net/mycontainer/
   * 
   * @param {string} parameters.label Required. A name for the storage account
   * specified as abase64-encoded string. The name may be up to 100 characters
   * inlength. The name can be used identify the storage account for
   * yourtracking purposes.
   * 
   * @param {string} [parameters.description] Optional. A description for the
   * storage account. The description may be up to 1024 characters in length.
   * 
   * @param {string} [parameters.location] Required if AffinityGroup is not
   * specified. The location where the storage account is created.  You can
   * include either a Location or AffinityGroup element in the request body,
   * but not both. To list available locations, use the List Locations
   * operation.
   * 
   * @param {string} [parameters.affinityGroup] Required if Location is not
   * specified. The name of an existing affinity group in the specified
   * subscription.  You can include either a Location or AffinityGroup element
   * in the request body, but not both. To list available affinity groups, use
   * the List Affinity Groups operation.
   * 
   * @param {boolean} parameters.geoReplicationEnabled Optional. Specifies
   * whether the storage account is created with the geo-replication enabled.
   * If the element is not included in the request body, the default value is
   * true. If set to true, the data in the storage account is replicated
   * across more than one geographic location so as to enable resilience in
   * the face of catastrophic service loss.
   * 
   * @param {object} [parameters.extendedProperties] Optional. Represents the
   * name of an extended storage account property. Each extended property must
   * have both a defined name and value. You can have a maximum of 50 extended
   * property name/value pairs.  The maximum length of the Name element is 64
   * characters, only alphanumeric characters and underscores are valid in the
   * Name, and the name must start with a letter. Attempting to use other
   * characters, starting the Name with a non-letter character, or entering a
   * name that is identical to that of another extended property owned by the
   * same storage account, will result in a status code 400 (Bad Request)
   * error.  Each extended property value has a maximum length of 255
   * characters.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.beginCreating = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.description && parameters.description.length > 1024) {
      return callback(new Error('parameters.description is outside the valid range.'));
    }
    if (parameters.geoReplicationEnabled === null || parameters.geoReplicationEnabled === undefined) {
      return callback(new Error('parameters.geoReplicationEnabled cannot be null.'));
    }
    if (parameters.label === null || parameters.label === undefined) {
      return callback(new Error('parameters.label cannot be null.'));
    }
    if (parameters.label.length > 100) {
      return callback(new Error('parameters.label is outside the valid range.'));
    }
    if (parameters.serviceName === null || parameters.serviceName === undefined) {
      return callback(new Error('parameters.serviceName cannot be null.'));
    }
    if (parameters.serviceName.length < 3) {
      return callback(new Error('parameters.serviceName is outside the valid range.'));
    }
    if (parameters.serviceName.length > 24) {
      return callback(new Error('parameters.serviceName is outside the valid range.'));
    }
    for (var loweredIndex1 = 0; loweredIndex1 < parameters.serviceName.length; loweredIndex1 = loweredIndex1 + 1) {
      var serviceNameChar = parameters.serviceName[loweredIndex1];
      if (serviceNameChar === serviceNameChar.toLowerCase() === false && isNaN(parseInt(serviceNameChar, 10)) === false === false) {
        return callback(new Error('parameters.serviceName is outside the valid range.'));
      }
    }
    // TODO: Validate parameters.serviceName is a valid DNS name.
    var locationCount = (parameters.affinityGroup ? 1 : 0) + (parameters.location ? 1 : 0);
    if (locationCount !== 1) {
      return callback(new Error('Only one of parameters.affinityGroup, parameters.location may be provided.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var createStorageServiceInputElement = js2xml.createElement('CreateStorageServiceInput', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, createStorageServiceInputElement);
    
    var serviceNameElement = js2xml.createElement('ServiceName', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(serviceNameElement, parameters.serviceName);
    js2xml.addChildElement(createStorageServiceInputElement, serviceNameElement);
    
    var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
    js2xml.addChildElement(createStorageServiceInputElement, labelElement);
    
    if (parameters.description) {
      var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(descriptionElement, parameters.description);
      js2xml.addChildElement(createStorageServiceInputElement, descriptionElement);
    } else {
      var emptyElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      var nilAttribute = js2xml.createAttribute('nil', 'http://www.w3.org/2001/XMLSchema-instance');
      js2xml.setAttributeValue(nilAttribute, 'true');
      js2xml.addAttribute(emptyElement, nilAttribute);
      js2xml.addChildElement(createStorageServiceInputElement, emptyElement);
    }
    
    if (parameters.location) {
      var locationElement = js2xml.createElement('Location', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(locationElement, parameters.location);
      js2xml.addChildElement(createStorageServiceInputElement, locationElement);
    }
    
    if (parameters.affinityGroup) {
      var affinityGroupElement = js2xml.createElement('AffinityGroup', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(affinityGroupElement, parameters.affinityGroup);
      js2xml.addChildElement(createStorageServiceInputElement, affinityGroupElement);
    }
    
    var geoReplicationEnabledElement = js2xml.createElement('GeoReplicationEnabled', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(geoReplicationEnabledElement, parameters.geoReplicationEnabled.toString());
    js2xml.addChildElement(createStorageServiceInputElement, geoReplicationEnabledElement);
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(createStorageServiceInputElement, extendedPropertiesDictionaryElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Check Name Availability operation checks if a storage account name is
   * available for use in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj154125.aspx for
   * more information)
   * 
   * @param {string} serviceName The desired storage account name to check for
   * availability.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.checkNameAvailability = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices/operations/isavailable/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var availabilityResponseElement = js2xml.getElement(responseDoc, responseDoc, 'AVAILABILITYRESPONSE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (availabilityResponseElement) {
          var resultElement = js2xml.getElement(responseDoc, availabilityResponseElement, 'RESULT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (resultElement) {
            var resultInstance = resultElement === 'true';
            result.isAvailable = resultInstance;
          }
          
          var reasonElement = js2xml.getElement(responseDoc, availabilityResponseElement, 'REASON', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (reasonElement) {
            var isNil = false;
            var nilAttribute = js2xml.getAttribute(responseDoc, reasonElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
            if (nilAttribute) {
              isNil = nilAttribute === 'true';
            }
            if (isNil === false) {
              var reasonInstance = reasonElement;
              result.reason = reasonInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Create Storage Account operation creates a new storage account in
   * Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx for
   * more information)
   * 
   * @param {StorageAccountCreateParameters} parameters Parameters supplied to
   * the Create Storage Account operation.
   * 
   * @param {string} parameters.serviceName Required. A name for the storage
   * account that is unique within Windows Azure. Storage account names must
   * be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.  This name is the DNS prefix name and can be used to access
   * blobs, queues, and tables in the storage account.  For example:
   * http://ServiceName.blob.core.windows.net/mycontainer/
   * 
   * @param {string} parameters.label Required. A name for the storage account
   * specified as abase64-encoded string. The name may be up to 100 characters
   * inlength. The name can be used identify the storage account for
   * yourtracking purposes.
   * 
   * @param {string} [parameters.description] Optional. A description for the
   * storage account. The description may be up to 1024 characters in length.
   * 
   * @param {string} [parameters.location] Required if AffinityGroup is not
   * specified. The location where the storage account is created.  You can
   * include either a Location or AffinityGroup element in the request body,
   * but not both. To list available locations, use the List Locations
   * operation.
   * 
   * @param {string} [parameters.affinityGroup] Required if Location is not
   * specified. The name of an existing affinity group in the specified
   * subscription.  You can include either a Location or AffinityGroup element
   * in the request body, but not both. To list available affinity groups, use
   * the List Affinity Groups operation.
   * 
   * @param {boolean} parameters.geoReplicationEnabled Optional. Specifies
   * whether the storage account is created with the geo-replication enabled.
   * If the element is not included in the request body, the default value is
   * true. If set to true, the data in the storage account is replicated
   * across more than one geographic location so as to enable resilience in
   * the face of catastrophic service loss.
   * 
   * @param {object} [parameters.extendedProperties] Optional. Represents the
   * name of an extended storage account property. Each extended property must
   * have both a defined name and value. You can have a maximum of 50 extended
   * property name/value pairs.  The maximum length of the Name element is 64
   * characters, only alphanumeric characters and underscores are valid in the
   * Name, and the name must start with a letter. Attempting to use other
   * characters, starting the Name with a non-letter character, or entering a
   * name that is identical to that of another extended property owned by the
   * same storage account, will result in a status code 400 (Bad Request)
   * error.  Each extended property value has a maximum length of 255
   * characters.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.create = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.storageAccounts.beginCreating(parameters, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = 30;
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getOperationStatus(result.requestId, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                if (result2.status !== 'Succeeded') {
                  var ex = new Error(result2.error.code + ' : ' + result2.error.message);
                  ex.errorCode = result2.error.code;
                  ex.errorMessage = result2.error.message;
                  return callback(ex);
                }
                
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete Storage Account operation deletes the specifiedstorage account
   * from Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh264517.aspx for
   * more information)
   * 
   * @param {string} serviceName The name of the storage account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.delete = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Storage Account Properties operation returns system properties for
   * the specified storage account.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460802.aspx for
   * more information)
   * 
   * @param {string} serviceName Name of the storage account to get.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.get = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { capabilities: [], extendedProperties: {} };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var storageServiceElement = js2xml.getElement(responseDoc, responseDoc, 'STORAGESERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (storageServiceElement) {
          var urlElement = js2xml.getElement(responseDoc, storageServiceElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (urlElement) {
            var urlInstance = urlElement;
            result.uri = urlInstance;
          }
          
          var serviceNameElement = js2xml.getElement(responseDoc, storageServiceElement, 'SERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (serviceNameElement) {
            var serviceNameInstance = serviceNameElement;
            result.serviceName = serviceNameInstance;
          }
          
          var storageServicePropertiesElement = js2xml.getElement(responseDoc, storageServiceElement, 'STORAGESERVICEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (storageServicePropertiesElement) {
            var storageServicePropertiesInstance = { endpoints: [] };
            result.properties = storageServicePropertiesInstance;
            
            var descriptionElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (descriptionElement) {
              var isNil = false;
              var nilAttribute = js2xml.getAttribute(responseDoc, descriptionElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
              if (nilAttribute) {
                isNil = nilAttribute === 'true';
              }
              if (isNil === false) {
                var descriptionInstance = descriptionElement;
                storageServicePropertiesInstance.description = descriptionInstance;
              }
            }
            
            var affinityGroupElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (affinityGroupElement) {
              var affinityGroupInstance = affinityGroupElement;
              storageServicePropertiesInstance.affinityGroup = affinityGroupInstance;
            }
            
            var locationElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (locationElement) {
              var locationInstance = locationElement;
              storageServicePropertiesInstance.location = locationInstance;
            }
            
            var labelElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (labelElement) {
              var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
              storageServicePropertiesInstance.label = labelInstance;
            }
            
            var statusElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusElement) {
              var statusInstance = statusElement;
              storageServicePropertiesInstance.status = statusInstance;
            }
            
            var endpointsSequenceElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'ENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (endpointsSequenceElement) {
              for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, endpointsSequenceElement, 'ENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
                var endpointsElement = js2xml.getElements(responseDoc, endpointsSequenceElement, 'ENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
                storageServicePropertiesInstance.endpoints.push(endpointsElement);
              }
            }
            
            var geoReplicationEnabledElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'GEOREPLICATIONENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (geoReplicationEnabledElement) {
              var geoReplicationEnabledInstance = geoReplicationEnabledElement === 'true';
              storageServicePropertiesInstance.geoReplicationEnabled = geoReplicationEnabledInstance;
            }
            
            var geoPrimaryRegionElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'GEOPRIMARYREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (geoPrimaryRegionElement) {
              var geoPrimaryRegionInstance = geoPrimaryRegionElement;
              storageServicePropertiesInstance.geoPrimaryRegion = geoPrimaryRegionInstance;
            }
            
            var statusOfPrimaryElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'STATUSOFPRIMARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusOfPrimaryElement && (statusOfPrimaryElement === null || statusOfPrimaryElement === undefined || statusOfPrimaryElement.length === 0) === false) {
              var statusOfPrimaryInstance = statusOfPrimaryElement;
              storageServicePropertiesInstance.statusOfGeoPrimaryRegion = statusOfPrimaryInstance;
            }
            
            var lastGeoFailoverTimeElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'LASTGEOFAILOVERTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (lastGeoFailoverTimeElement && (lastGeoFailoverTimeElement === null || lastGeoFailoverTimeElement === undefined || lastGeoFailoverTimeElement.length === 0) === false) {
              var lastGeoFailoverTimeInstance = new Date(lastGeoFailoverTimeElement);
              storageServicePropertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
            }
            
            var geoSecondaryRegionElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'GEOSECONDARYREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (geoSecondaryRegionElement) {
              var geoSecondaryRegionInstance = geoSecondaryRegionElement;
              storageServicePropertiesInstance.geoSecondaryRegion = geoSecondaryRegionInstance;
            }
            
            var statusOfSecondaryElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'STATUSOFSECONDARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (statusOfSecondaryElement && (statusOfSecondaryElement === null || statusOfSecondaryElement === undefined || statusOfSecondaryElement.length === 0) === false) {
              var statusOfSecondaryInstance = statusOfSecondaryElement;
              storageServicePropertiesInstance.statusOfGeoSecondaryRegion = statusOfSecondaryInstance;
            }
          }
          
          var extendedPropertiesSequenceElement = js2xml.getElement(responseDoc, storageServiceElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (extendedPropertiesSequenceElement) {
            for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
              var extendedPropertiesElement = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
              var extendedPropertiesKey = js2xml.getElement(responseDoc, extendedPropertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              var extendedPropertiesValue = js2xml.getElement(responseDoc, extendedPropertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              result.extendedProperties[extendedPropertiesKey] = extendedPropertiesValue;
            }
          }
          
          var capabilitiesSequenceElement = js2xml.getElement(responseDoc, storageServiceElement, 'CAPABILITIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (capabilitiesSequenceElement) {
            for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, capabilitiesSequenceElement, 'CAPABILITY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
              var capabilitiesElement = js2xml.getElements(responseDoc, capabilitiesSequenceElement, 'CAPABILITY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
              result.capabilities.push(capabilitiesElement);
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Get Storage Keys operation returns the primary and secondary access
   * keys for the specified storage account.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460785.aspx for
   * more information)
   * 
   * @param {string} serviceName The name of the desired storage account.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.getKeys = function(serviceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices/' + serviceName + '/keys';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var storageServiceElement = js2xml.getElement(responseDoc, responseDoc, 'STORAGESERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (storageServiceElement) {
          var urlElement = js2xml.getElement(responseDoc, storageServiceElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (urlElement) {
            var urlInstance = urlElement;
            result.uri = urlInstance;
          }
          
          var storageServiceKeysElement = js2xml.getElement(responseDoc, storageServiceElement, 'STORAGESERVICEKEYS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (storageServiceKeysElement) {
            var primaryElement = js2xml.getElement(responseDoc, storageServiceKeysElement, 'PRIMARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (primaryElement) {
              var primaryInstance = primaryElement;
              result.primaryKey = primaryInstance;
            }
            
            var secondaryElement = js2xml.getElement(responseDoc, storageServiceKeysElement, 'SECONDARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (secondaryElement) {
              var secondaryInstance = secondaryElement;
              result.secondaryKey = secondaryInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The List Storage Accounts operation lists the storage accounts available
   * under the current subscription.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460787.aspx for
   * more information)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { storageServices: [] };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var storageServicesSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'STORAGESERVICES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (storageServicesSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, storageServicesSequenceElement, 'STORAGESERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex1 = loweredIndex1 + 1) {
            var storageServicesElement = js2xml.getElements(responseDoc, storageServicesSequenceElement, 'STORAGESERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex1];
            var storageServiceInstance = { extendedProperties: {} };
            result.storageServices.push(storageServiceInstance);
            
            var urlElement = js2xml.getElement(responseDoc, storageServicesElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (urlElement) {
              var urlInstance = urlElement;
              storageServiceInstance.uri = urlInstance;
            }
            
            var serviceNameElement = js2xml.getElement(responseDoc, storageServicesElement, 'SERVICENAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (serviceNameElement) {
              var serviceNameInstance = serviceNameElement;
              storageServiceInstance.serviceName = serviceNameInstance;
            }
            
            var storageServicePropertiesElement = js2xml.getElement(responseDoc, storageServicesElement, 'STORAGESERVICEPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (storageServicePropertiesElement) {
              var storageServicePropertiesInstance = { endpoints: [] };
              storageServiceInstance.properties = storageServicePropertiesInstance;
              
              var descriptionElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'DESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (descriptionElement) {
                var isNil = false;
                var nilAttribute = js2xml.getAttribute(responseDoc, descriptionElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                if (nilAttribute) {
                  isNil = nilAttribute === 'true';
                }
                if (isNil === false) {
                  var descriptionInstance = descriptionElement;
                  storageServicePropertiesInstance.description = descriptionInstance;
                }
              }
              
              var affinityGroupElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'AFFINITYGROUP', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (affinityGroupElement) {
                var affinityGroupInstance = affinityGroupElement;
                storageServicePropertiesInstance.affinityGroup = affinityGroupInstance;
              }
              
              var locationElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'LOCATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (locationElement) {
                var locationInstance = locationElement;
                storageServicePropertiesInstance.location = locationInstance;
              }
              
              var labelElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'LABEL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (labelElement) {
                var labelInstance = new Buffer(labelElement, 'base64').toString('ascii');
                storageServicePropertiesInstance.label = labelInstance;
              }
              
              var statusElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (statusElement) {
                var statusInstance = statusElement;
                storageServicePropertiesInstance.status = statusInstance;
              }
              
              var endpointsSequenceElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'ENDPOINTS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (endpointsSequenceElement) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, endpointsSequenceElement, 'ENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex2 = loweredIndex2 + 1) {
                  var endpointsElement = js2xml.getElements(responseDoc, endpointsSequenceElement, 'ENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex2];
                  storageServicePropertiesInstance.endpoints.push(endpointsElement);
                }
              }
              
              var geoReplicationEnabledElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'GEOREPLICATIONENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (geoReplicationEnabledElement) {
                var geoReplicationEnabledInstance = geoReplicationEnabledElement === 'true';
                storageServicePropertiesInstance.geoReplicationEnabled = geoReplicationEnabledInstance;
              }
              
              var geoPrimaryRegionElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'GEOPRIMARYREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (geoPrimaryRegionElement) {
                var geoPrimaryRegionInstance = geoPrimaryRegionElement;
                storageServicePropertiesInstance.geoPrimaryRegion = geoPrimaryRegionInstance;
              }
              
              var statusOfPrimaryElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'STATUSOFPRIMARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (statusOfPrimaryElement && (statusOfPrimaryElement === null || statusOfPrimaryElement === undefined || statusOfPrimaryElement.length === 0) === false) {
                var statusOfPrimaryInstance = statusOfPrimaryElement;
                storageServicePropertiesInstance.statusOfGeoPrimaryRegion = statusOfPrimaryInstance;
              }
              
              var lastGeoFailoverTimeElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'LASTGEOFAILOVERTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (lastGeoFailoverTimeElement && (lastGeoFailoverTimeElement === null || lastGeoFailoverTimeElement === undefined || lastGeoFailoverTimeElement.length === 0) === false) {
                var lastGeoFailoverTimeInstance = new Date(lastGeoFailoverTimeElement);
                storageServicePropertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
              }
              
              var geoSecondaryRegionElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'GEOSECONDARYREGION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (geoSecondaryRegionElement) {
                var geoSecondaryRegionInstance = geoSecondaryRegionElement;
                storageServicePropertiesInstance.geoSecondaryRegion = geoSecondaryRegionInstance;
              }
              
              var statusOfSecondaryElement = js2xml.getElement(responseDoc, storageServicePropertiesElement, 'STATUSOFSECONDARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
              if (statusOfSecondaryElement && (statusOfSecondaryElement === null || statusOfSecondaryElement === undefined || statusOfSecondaryElement.length === 0) === false) {
                var statusOfSecondaryInstance = statusOfSecondaryElement;
                storageServicePropertiesInstance.statusOfGeoSecondaryRegion = statusOfSecondaryInstance;
              }
            }
            
            var extendedPropertiesSequenceElement = js2xml.getElement(responseDoc, storageServicesElement, 'EXTENDEDPROPERTIES', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (extendedPropertiesSequenceElement) {
              for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE').length; loweredIndex3 = loweredIndex3 + 1) {
                var extendedPropertiesElement = js2xml.getElements(responseDoc, extendedPropertiesSequenceElement, 'EXTENDEDPROPERTY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE')[loweredIndex3];
                var extendedPropertiesKey = js2xml.getElement(responseDoc, extendedPropertiesElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                var extendedPropertiesValue = js2xml.getElement(responseDoc, extendedPropertiesElement, 'VALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
                storageServiceInstance.extendedProperties[extendedPropertiesKey] = extendedPropertiesValue;
              }
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Regenerate Keys operation regenerates the primary or secondary access
   * key for the specified storage account.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460795.aspx for
   * more information)
   * 
   * @param {StorageAccountRegenerateKeysParameters} parameters Parameters
   * supplied to the Regenerate Keys operation.
   * 
   * @param {string} parameters.serviceName The name of the desired storage
   * account.
   * 
   * @param {StorageKeyType} parameters.keyType Specifies which key to
   * regenerate.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.regenerateKeys = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.serviceName === null || parameters.serviceName === undefined) {
      return callback(new Error('parameters.serviceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices/' + parameters.serviceName + '/keys?action=regenerate';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var regenerateKeysElement = js2xml.createElement('RegenerateKeys', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, regenerateKeysElement);
    
    var keyTypeElement = js2xml.createElement('KeyType', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(keyTypeElement, parameters.keyType ? parameters.keyType.toString() : 'Primary');
    js2xml.addChildElement(regenerateKeysElement, keyTypeElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var storageServiceElement = js2xml.getElement(responseDoc, responseDoc, 'STORAGESERVICE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (storageServiceElement) {
          var urlElement = js2xml.getElement(responseDoc, storageServiceElement, 'URL', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (urlElement) {
            var urlInstance = urlElement;
            result.uri = urlInstance;
          }
          
          var storageServiceKeysElement = js2xml.getElement(responseDoc, storageServiceElement, 'STORAGESERVICEKEYS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (storageServiceKeysElement) {
            var primaryElement = js2xml.getElement(responseDoc, storageServiceKeysElement, 'PRIMARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (primaryElement) {
              var primaryInstance = primaryElement;
              result.primaryKey = primaryInstance;
            }
            
            var secondaryElement = js2xml.getElement(responseDoc, storageServiceKeysElement, 'SECONDARY', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (secondaryElement) {
              var secondaryInstance = secondaryElement;
              result.secondaryKey = secondaryInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        result.requestId = response.headers['x-ms-request-id'];
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The Update Storage Account operation updates the label, the description,
   * and enables or disables the geo-replication status for a storage account
   * in Windows Azure.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh264516.aspx for
   * more information)
   * 
   * @param {string} serviceName Name of the storage account to update.
   * 
   * @param {StorageAccountUpdateParameters} parameters Parameters supplied to
   * the Update Storage Account operation.
   * 
   * @param {string} [parameters.description]
   * 
   * @param {string} [parameters.label] Optional. A name for the storage
   * account that is base64-encoded. The label may be up to 100 characters in
   * length. The name can be used identify the storage account for your
   * tracking purposes.
   * 
   * @param {boolean} [parameters.geoReplicationEnabled] Optional. Enables or
   * disables geo-replication on the specified the storage. If set to true,
   * the data in the storage account is replicated across more than one
   * geographic location so as to enable resilience in the face of
   * catastrophic service loss. If set to false, geo-replication is disabled.
   * If the element is not included in the request body, the current value is
   * left unchanged.  Important: If you have enabled geo-replication you can
   * elect to disable it by setting this element to false. When disabled, your
   * data is no longer replicated to a secondary data center and any data in
   * the secondary location will be removed.  Enabling geo-replication once it
   * has been disabled will result in the storage account being billed for
   * replicating the current copy of data to the secondary data center. After
   * the existing copy of the data is replicated to the secondary data center,
   * updates are geo-replicated at no additional charge.
   * 
   * @param {object} [parameters.extendedProperties] Optional. Represents the
   * name of an extended storage account property. Each extended property must
   * have both a defined name and value. You can have a maximum of 50 extended
   * property name/value pairs.  The maximum length of the Name element is 64
   * characters, only alphanumeric characters and underscores are valid in the
   * Name, and the name must start with a letter. Attempting to use other
   * characters, starting the Name with a non-letter character, or entering a
   * name that is identical to that of another extended property owned by the
   * same storage account, will result in a status code 400 (Bad Request)
   * error.  Each extended property value has a maximum length of 255
   * characters.  You can delete an extended property by setting the value to
   * NULL.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountOperations.prototype.update = function(serviceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (serviceName === null || serviceName === undefined) {
      return callback(new Error('serviceName cannot be null.'));
    }
    if (serviceName.length < 3) {
      return callback(new Error('serviceName is outside the valid range.'));
    }
    if (serviceName.length > 24) {
      return callback(new Error('serviceName is outside the valid range.'));
    }
    for (var loweredIndex1 = 0; loweredIndex1 < serviceName.length; loweredIndex1 = loweredIndex1 + 1) {
      var serviceNameChar = serviceName[loweredIndex1];
      if (serviceNameChar === serviceNameChar.toLowerCase() === false && isNaN(parseInt(serviceNameChar, 10)) === false === false) {
        return callback(new Error('serviceName is outside the valid range.'));
      }
    }
    // TODO: Validate serviceName is a valid DNS name.
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.description && parameters.description.length > 1024) {
      return callback(new Error('parameters.description is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/' + this.client.credentials.subscriptionId + '/services/storageservices/' + serviceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var updateStorageServiceInputElement = js2xml.createElement('UpdateStorageServiceInput', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, updateStorageServiceInputElement);
    
    if (parameters.description) {
      var descriptionElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(descriptionElement, parameters.description);
      js2xml.addChildElement(updateStorageServiceInputElement, descriptionElement);
    } else {
      var emptyElement = js2xml.createElement('Description', 'http://schemas.microsoft.com/windowsazure');
      var nilAttribute = js2xml.createAttribute('nil', 'http://www.w3.org/2001/XMLSchema-instance');
      js2xml.setAttributeValue(nilAttribute, 'true');
      js2xml.addAttribute(emptyElement, nilAttribute);
      js2xml.addChildElement(updateStorageServiceInputElement, emptyElement);
    }
    
    if (parameters.label) {
      var labelElement = js2xml.createElement('Label', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(labelElement, new Buffer(parameters.label).toString('base64'));
      js2xml.addChildElement(updateStorageServiceInputElement, labelElement);
    }
    
    if (parameters.geoReplicationEnabled) {
      var geoReplicationEnabledElement = js2xml.createElement('GeoReplicationEnabled', 'http://schemas.microsoft.com/windowsazure');
      js2xml.setElementValue(geoReplicationEnabledElement, parameters.geoReplicationEnabled.toString());
      js2xml.addChildElement(updateStorageServiceInputElement, geoReplicationEnabledElement);
    }
    
    if (parameters.extendedProperties) {
      var extendedPropertiesDictionaryElement = js2xml.createElement('ExtendedProperties', 'http://schemas.microsoft.com/windowsazure');
      for (var extendedPropertiesKey in parameters.extendedProperties) {
        var extendedPropertiesValue = parameters.extendedProperties[extendedPropertiesKey];
        var extendedPropertiesElement = js2xml.createElement('ExtendedProperty', 'http://schemas.microsoft.com/windowsazure');
        js2xml.addChildElement(extendedPropertiesDictionaryElement, extendedPropertiesElement);
        
        var extendedPropertiesKeyElement = js2xml.createElement('Name', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesKeyElement, extendedPropertiesKey);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesKeyElement);
        
        var extendedPropertiesValueElement = js2xml.createElement('Value', 'http://schemas.microsoft.com/windowsazure');
        js2xml.setElementValue(extendedPropertiesValueElement, extendedPropertiesValue);
        js2xml.addChildElement(extendedPropertiesElement, extendedPropertiesValueElement);
      }
      js2xml.addChildElement(updateStorageServiceInputElement, extendedPropertiesDictionaryElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return StorageAccountOperations;
})();
