/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes an Azure Search service and its current state.
 *
 * @extends models['Resource']
 */
class SearchService extends models['Resource'] {
  /**
   * Create a SearchService.
   * @property {number} [replicaCount] The number of replicas in the Search
   * service. If specified, it must be a value between 1 and 12 inclusive for
   * standard SKUs or between 1 and 3 inclusive for basic SKU. Default value: 1
   * .
   * @property {number} [partitionCount] The number of partitions in the Search
   * service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than
   * 1 are only valid for standard SKUs. For 'standard3' services with
   * hostingMode set to 'highDensity', the allowed values are between 1 and 3.
   * Default value: 1 .
   * @property {string} [hostingMode] Applicable only for the standard3 SKU.
   * You can set this property to enable up to 3 high density partitions that
   * allow up to 1000 indexes, which is much higher than the maximum indexes
   * allowed for any other SKU. For the standard3 SKU, the value is either
   * 'default' or 'highDensity'. For all other SKUs, this value must be
   * 'default'. Possible values include: 'default', 'highDensity'. Default
   * value: 'default' .
   * @property {string} [status] The status of the Search service. Possible
   * values include: 'running': The Search service is running and no
   * provisioning operations are underway. 'provisioning': The Search service
   * is being provisioned or scaled up or down. 'deleting': The Search service
   * is being deleted. 'degraded': The Search service is degraded. This can
   * occur when the underlying search units are not healthy. The Search service
   * is most likely operational, but performance might be slow and some
   * requests might be dropped. 'disabled': The Search service is disabled. In
   * this state, the service will reject all API requests. 'error': The Search
   * service is in an error state. If your service is in the degraded,
   * disabled, or error states, it means the Azure Search team is actively
   * investigating the underlying issue. Dedicated services in these states are
   * still chargeable based on the number of search units provisioned. Possible
   * values include: 'running', 'provisioning', 'deleting', 'degraded',
   * 'disabled', 'error'
   * @property {string} [statusDetails] The details of the Search service
   * status.
   * @property {string} [provisioningState] The state of the last provisioning
   * operation performed on the Search service. Provisioning is an intermediate
   * state that occurs while service capacity is being established. After
   * capacity is set up, provisioningState changes to either 'succeeded' or
   * 'failed'. Client applications can poll provisioning status (the
   * recommended polling interval is from 30 seconds to one minute) by using
   * the Get Search Service operation to see when an operation is completed. If
   * you are using the free service, this value tends to come back as
   * 'succeeded' directly in the call to Create Search service. This is because
   * the free service uses capacity that is already set up. Possible values
   * include: 'succeeded', 'provisioning', 'failed'
   * @property {object} [sku] The SKU of the Search Service, which determines
   * price tier and capacity limits. This property is required when creating a
   * new Search Service.
   * @property {string} [sku.name] The SKU of the Search service. Valid values
   * include: 'free': Shared service. 'basic': Dedicated service with up to 3
   * replicas. 'standard': Dedicated service with up to 12 partitions and 12
   * replicas. 'standard2': Similar to standard, but with more capacity per
   * search unit. 'standard3': Offers maximum capacity per search unit with up
   * to 12 partitions and 12 replicas (or up to 3 partitions with more indexes
   * if you also set the hostingMode property to 'highDensity'). Possible
   * values include: 'free', 'basic', 'standard', 'standard2', 'standard3'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of SearchService
   *
   * @returns {object} metadata of SearchService
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SearchService',
      type: {
        name: 'Composite',
        className: 'SearchService',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          identity: {
            required: false,
            serializedName: 'identity',
            type: {
              name: 'Composite',
              className: 'Identity'
            }
          },
          replicaCount: {
            required: false,
            serializedName: 'properties.replicaCount',
            defaultValue: 1,
            constraints: {
              InclusiveMaximum: 12,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          partitionCount: {
            required: false,
            serializedName: 'properties.partitionCount',
            defaultValue: 1,
            constraints: {
              InclusiveMaximum: 12,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          hostingMode: {
            required: false,
            serializedName: 'properties.hostingMode',
            defaultValue: 'default',
            type: {
              name: 'Enum',
              allowedValues: [ 'default', 'highDensity' ]
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.status',
            type: {
              name: 'Enum',
              allowedValues: [ 'running', 'provisioning', 'deleting', 'degraded', 'disabled', 'error' ]
            }
          },
          statusDetails: {
            required: false,
            readOnly: true,
            serializedName: 'properties.statusDetails',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'succeeded', 'provisioning', 'failed' ]
            }
          },
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          }
        }
      }
    };
  }
}

module.exports = SearchService;
