/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The container for solution.
 *
 * @extends models['BaseResource']
 */
class Solution extends models['BaseResource'] {
  /**
   * Create a Solution.
   * @property {string} [id] Resource ID.
   * @property {string} [name] Resource name.
   * @property {string} [type] Resource type.
   * @property {string} [location] Resource location
   * @property {object} [plan] Plan for solution object supported by the
   * OperationsManagement resource provider.
   * @property {string} [plan.name] name of the solution to be created. For
   * Microsoft published solution it should be in the format of
   * solutionType(workspaceName). SolutionType part is case sensitive. For
   * third party solution, it can be anything.
   * @property {string} [plan.publisher] Publisher name. For gallery solution,
   * it is Microsoft.
   * @property {string} [plan.promotionCode] promotionCode, Not really used
   * now, can you left as empty
   * @property {string} [plan.product] name of the solution to enabled/add. For
   * Microsoft published gallery solution it should be in the format of
   * OMSGallery/<solutionType>. This is case sensitive
   * @property {object} [properties] Properties for solution object supported
   * by the OperationsManagement resource provider.
   * @property {string} [properties.workspaceResourceId] The azure resourceId
   * for the workspace where the solution will be deployed/enabled.
   * @property {string} [properties.provisioningState] The provisioning state
   * for the solution.
   * @property {array} [properties.containedResources] The azure resources that
   * will be contained within the solutions. They will be locked and gets
   * deleted automatically when the solution is deleted.
   * @property {array} [properties.referencedResources] The resources that will
   * be referenced from this solution. Deleting any of those solution out of
   * band will break the solution.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Solution
   *
   * @returns {object} metadata of Solution
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Solution',
      type: {
        name: 'Composite',
        className: 'Solution',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          plan: {
            required: false,
            serializedName: 'plan',
            type: {
              name: 'Composite',
              className: 'SolutionPlan'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'SolutionProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = Solution;
